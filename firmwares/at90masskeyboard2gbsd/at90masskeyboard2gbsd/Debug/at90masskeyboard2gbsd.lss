
at90masskeyboard2gbsd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000036a  00800100  00002f5a  00002fee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000448  0080046a  0080046a  00003358  2**0
                  ALLOC
  3 .noinit       00000004  008008b2  008008b2  00003358  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00003358  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000033b4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000540  00000000  00000000  000033f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009d95  00000000  00000000  00003934  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002bba  00000000  00000000  0000d6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000d411  00000000  00000000  00010283  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001170  00000000  00000000  0001d694  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00018d3d  00000000  00000000  0001e804  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005e3e  00000000  00000000  00037541  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000768  00000000  00000000  0003d37f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00008cc9  00000000  00000000  0003dae7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	b0 c0       	rjmp	.+352    	; 0x166 <__bad_interrupt>
       6:	00 00       	nop
       8:	ae c0       	rjmp	.+348    	; 0x166 <__bad_interrupt>
       a:	00 00       	nop
       c:	ac c0       	rjmp	.+344    	; 0x166 <__bad_interrupt>
       e:	00 00       	nop
      10:	aa c0       	rjmp	.+340    	; 0x166 <__bad_interrupt>
      12:	00 00       	nop
      14:	a8 c0       	rjmp	.+336    	; 0x166 <__bad_interrupt>
      16:	00 00       	nop
      18:	a6 c0       	rjmp	.+332    	; 0x166 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a4 c0       	rjmp	.+328    	; 0x166 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a2 c0       	rjmp	.+324    	; 0x166 <__bad_interrupt>
      22:	00 00       	nop
      24:	a0 c0       	rjmp	.+320    	; 0x166 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__vector_10>
      2c:	0c 94 1e 12 	jmp	0x243c	; 0x243c <__vector_11>
      30:	9a c0       	rjmp	.+308    	; 0x166 <__bad_interrupt>
      32:	00 00       	nop
      34:	98 c0       	rjmp	.+304    	; 0x166 <__bad_interrupt>
      36:	00 00       	nop
      38:	96 c0       	rjmp	.+300    	; 0x166 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	94 c0       	rjmp	.+296    	; 0x166 <__bad_interrupt>
      3e:	00 00       	nop
      40:	92 c0       	rjmp	.+292    	; 0x166 <__bad_interrupt>
      42:	00 00       	nop
      44:	90 c0       	rjmp	.+288    	; 0x166 <__bad_interrupt>
      46:	00 00       	nop
      48:	8e c0       	rjmp	.+284    	; 0x166 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8c c0       	rjmp	.+280    	; 0x166 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8a c0       	rjmp	.+276    	; 0x166 <__bad_interrupt>
      52:	00 00       	nop
      54:	88 c0       	rjmp	.+272    	; 0x166 <__bad_interrupt>
      56:	00 00       	nop
      58:	86 c0       	rjmp	.+268    	; 0x166 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	84 c0       	rjmp	.+264    	; 0x166 <__bad_interrupt>
      5e:	00 00       	nop
      60:	82 c0       	rjmp	.+260    	; 0x166 <__bad_interrupt>
      62:	00 00       	nop
      64:	80 c0       	rjmp	.+256    	; 0x166 <__bad_interrupt>
      66:	00 00       	nop
      68:	7e c0       	rjmp	.+252    	; 0x166 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7c c0       	rjmp	.+248    	; 0x166 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7a c0       	rjmp	.+244    	; 0x166 <__bad_interrupt>
      72:	00 00       	nop
      74:	78 c0       	rjmp	.+240    	; 0x166 <__bad_interrupt>
      76:	00 00       	nop
      78:	76 c0       	rjmp	.+236    	; 0x166 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	74 c0       	rjmp	.+232    	; 0x166 <__bad_interrupt>
      7e:	00 00       	nop
      80:	72 c0       	rjmp	.+228    	; 0x166 <__bad_interrupt>
      82:	00 00       	nop
      84:	70 c0       	rjmp	.+224    	; 0x166 <__bad_interrupt>
      86:	00 00       	nop
      88:	6e c0       	rjmp	.+220    	; 0x166 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6c c0       	rjmp	.+216    	; 0x166 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6a c0       	rjmp	.+212    	; 0x166 <__bad_interrupt>
      92:	00 00       	nop
      94:	68 c0       	rjmp	.+208    	; 0x166 <__bad_interrupt>
	...

00000098 <__trampolines_end>:
      98:	52 65       	ori	r21, 0x52	; 82
      9a:	61 64       	ori	r22, 0x41	; 65
      9c:	79 0d       	add	r23, r9
      9e:	0a 00       	.word	0x000a	; ????

000000a0 <__c.4740>:
      a0:	44 69 73 63 6f 6e 6e 65 63 74 0d 0a 00              Disconnect...

000000ad <__c.4735>:
      ad:	43 6f 6e 6e 65 63 74 0d 0a 00                       Connect...

000000b7 <__c.4730>:
      b7:	68 74 74 70 73 3a 2f 2f 77 77 77 2e 66 72 33 33     https://www.fr33
      c7:	70 72 6f 6a 65 63 74 2e 6f 72 67 0d 0a 70 6f 77     project.org..pow
      d7:	65 72 65 64 20 62 79 20 4c 55 46 41 0d 0a 0d 0a     ered by LUFA....
	...

000000e8 <__c.4710>:
      e8:	52 20 25 6c 69 20 25 69 0d 0a 00                    R %li %i...

000000f3 <__c.4690>:
      f3:	57 20 25 6c 69 20 25 69 0d 0a 00                    W %li %i...

000000fe <__c.4676>:
      fe:	0d 0a 53 44 20 62 6c 6f 63 6b 73 3a 20 25 6c 69     ..SD blocks: %li
     10e:	0d 0a 00                                            ...

00000111 <__c.4670>:
     111:	0d 0a 0d 0a 00                                      .....

00000116 <__c.4668>:
     116:	66 69 72 73 74 20 53 44 20 73 65 63 74 6f 72 3a     first SD sector:
     126:	0d 0a 00 00                                         ....

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d0 e2       	ldi	r29, 0x20	; 32
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61

00000136 <__do_copy_data>:
     136:	14 e0       	ldi	r17, 0x04	; 4
     138:	a0 e0       	ldi	r26, 0x00	; 0
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	ea e5       	ldi	r30, 0x5A	; 90
     13e:	ff e2       	ldi	r31, 0x2F	; 47
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0b bf       	out	0x3b, r16	; 59
     144:	02 c0       	rjmp	.+4      	; 0x14a <__do_copy_data+0x14>
     146:	07 90       	elpm	r0, Z+
     148:	0d 92       	st	X+, r0
     14a:	aa 36       	cpi	r26, 0x6A	; 106
     14c:	b1 07       	cpc	r27, r17
     14e:	d9 f7       	brne	.-10     	; 0x146 <__do_copy_data+0x10>

00000150 <__do_clear_bss>:
     150:	28 e0       	ldi	r18, 0x08	; 8
     152:	aa e6       	ldi	r26, 0x6A	; 106
     154:	b4 e0       	ldi	r27, 0x04	; 4
     156:	01 c0       	rjmp	.+2      	; 0x15a <.do_clear_bss_start>

00000158 <.do_clear_bss_loop>:
     158:	1d 92       	st	X+, r1

0000015a <.do_clear_bss_start>:
     15a:	a2 3b       	cpi	r26, 0xB2	; 178
     15c:	b2 07       	cpc	r27, r18
     15e:	e1 f7       	brne	.-8      	; 0x158 <.do_clear_bss_loop>
     160:	da d4       	rcall	.+2484   	; 0xb16 <main>
     162:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <_exit>

00000166 <__bad_interrupt>:
     166:	4c cf       	rjmp	.-360    	; 0x0 <__vectors>

00000168 <on_sd>:
    PORTA = 0b11111111;
    PORTB = 0b11111111;
    PORTC = 0b11111111;
    PORTD = 0b11111111;
    //PORTE = 0b11111111;
    PORTF = 0b11111111;
     168:	84 b1       	in	r24, 0x04	; 4
     16a:	80 64       	ori	r24, 0x40	; 64
     16c:	84 b9       	out	0x04, r24	; 4
     16e:	85 b1       	in	r24, 0x05	; 5
     170:	8f 7b       	andi	r24, 0xBF	; 191
     172:	85 b9       	out	0x05, r24	; 5
     174:	08 95       	ret

00000176 <uart_putc>:
     176:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     17a:	95 ff       	sbrs	r25, 5
     17c:	fc cf       	rjmp	.-8      	; 0x176 <uart_putc>
     17e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     182:	08 95       	ret

00000184 <uart_puts>:
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	ec 01       	movw	r28, r24
     18a:	0f c0       	rjmp	.+30     	; 0x1aa <uart_puts+0x26>
     18c:	8a 30       	cpi	r24, 0x0A	; 10
     18e:	49 f4       	brne	.+18     	; 0x1a2 <uart_puts+0x1e>
     190:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <__data_end>
     194:	9d 30       	cpi	r25, 0x0D	; 13
     196:	29 f0       	breq	.+10     	; 0x1a2 <uart_puts+0x1e>
     198:	8d e0       	ldi	r24, 0x0D	; 13
     19a:	ed df       	rcall	.-38     	; 0x176 <uart_putc>
     19c:	8a e0       	ldi	r24, 0x0A	; 10
     19e:	eb df       	rcall	.-42     	; 0x176 <uart_putc>
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <uart_puts+0x20>
     1a2:	e9 df       	rcall	.-46     	; 0x176 <uart_putc>
     1a4:	89 91       	ld	r24, Y+
     1a6:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <__data_end>
     1aa:	88 81       	ld	r24, Y
     1ac:	81 11       	cpse	r24, r1
     1ae:	ee cf       	rjmp	.-36     	; 0x18c <uart_puts+0x8>
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <uart_putsnl>:
     1b6:	e6 df       	rcall	.-52     	; 0x184 <uart_puts>
     1b8:	86 e6       	ldi	r24, 0x66	; 102
     1ba:	94 e0       	ldi	r25, 0x04	; 4
     1bc:	e3 cf       	rjmp	.-58     	; 0x184 <uart_puts>
     1be:	08 95       	ret

000001c0 <uart_printhexchar>:
     1c0:	1f 93       	push	r17
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
     1ca:	61 97       	sbiw	r28, 0x11	; 17
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	f8 94       	cli
     1d0:	de bf       	out	0x3e, r29	; 62
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	cd bf       	out	0x3d, r28	; 61
     1d6:	18 2f       	mov	r17, r24
     1d8:	81 e1       	ldi	r24, 0x11	; 17
     1da:	ea e8       	ldi	r30, 0x8A	; 138
     1dc:	f1 e0       	ldi	r31, 0x01	; 1
     1de:	de 01       	movw	r26, r28
     1e0:	11 96       	adiw	r26, 0x01	; 1
     1e2:	01 90       	ld	r0, Z+
     1e4:	0d 92       	st	X+, r0
     1e6:	8a 95       	dec	r24
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <uart_printhexchar+0x22>
     1ea:	81 2f       	mov	r24, r17
     1ec:	82 95       	swap	r24
     1ee:	8f 70       	andi	r24, 0x0F	; 15
     1f0:	e1 e0       	ldi	r30, 0x01	; 1
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	ec 0f       	add	r30, r28
     1f6:	fd 1f       	adc	r31, r29
     1f8:	e8 0f       	add	r30, r24
     1fa:	f1 1d       	adc	r31, r1
     1fc:	80 81       	ld	r24, Z
     1fe:	bb df       	rcall	.-138    	; 0x176 <uart_putc>
     200:	1f 70       	andi	r17, 0x0F	; 15
     202:	e1 e0       	ldi	r30, 0x01	; 1
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	ec 0f       	add	r30, r28
     208:	fd 1f       	adc	r31, r29
     20a:	e1 0f       	add	r30, r17
     20c:	f1 1d       	adc	r31, r1
     20e:	80 81       	ld	r24, Z
     210:	b2 df       	rcall	.-156    	; 0x176 <uart_putc>
     212:	61 96       	adiw	r28, 0x11	; 17
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
     218:	de bf       	out	0x3e, r29	; 62
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	cd bf       	out	0x3d, r28	; 61
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	08 95       	ret

00000226 <uart_printhexdump>:
     226:	9f 92       	push	r9
     228:	af 92       	push	r10
     22a:	bf 92       	push	r11
     22c:	cf 92       	push	r12
     22e:	df 92       	push	r13
     230:	ef 92       	push	r14
     232:	ff 92       	push	r15
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	ec 01       	movw	r28, r24
     23e:	5b 01       	movw	r10, r22
     240:	67 2b       	or	r22, r23
     242:	09 f4       	brne	.+2      	; 0x246 <uart_printhexdump+0x20>
     244:	3c c0       	rjmp	.+120    	; 0x2be <uart_printhexdump+0x98>
     246:	e1 2c       	mov	r14, r1
     248:	f1 2c       	mov	r15, r1
     24a:	32 c0       	rjmp	.+100    	; 0x2b0 <uart_printhexdump+0x8a>
     24c:	6e 01       	movw	r12, r28
     24e:	8f ef       	ldi	r24, 0xFF	; 255
     250:	c8 1a       	sub	r12, r24
     252:	d8 0a       	sbc	r13, r24
     254:	88 81       	ld	r24, Y
     256:	b4 df       	rcall	.-152    	; 0x1c0 <uart_printhexchar>
     258:	80 e2       	ldi	r24, 0x20	; 32
     25a:	8d df       	rcall	.-230    	; 0x176 <uart_putc>
     25c:	ef ef       	ldi	r30, 0xFF	; 255
     25e:	ee 1a       	sub	r14, r30
     260:	fe 0a       	sbc	r15, r30
     262:	c7 01       	movw	r24, r14
     264:	8f 70       	andi	r24, 0x0F	; 15
     266:	99 27       	eor	r25, r25
     268:	89 2b       	or	r24, r25
     26a:	29 f0       	breq	.+10     	; 0x276 <uart_printhexdump+0x50>
     26c:	c5 01       	movw	r24, r10
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	08 17       	cp	r16, r24
     272:	19 07       	cpc	r17, r25
     274:	e1 f4       	brne	.+56     	; 0x2ae <uart_printhexdump+0x88>
     276:	8e 01       	movw	r16, r28
     278:	0f 50       	subi	r16, 0x0F	; 15
     27a:	11 09       	sbc	r17, r1
     27c:	c0 e0       	ldi	r28, 0x00	; 0
     27e:	d0 e0       	ldi	r29, 0x00	; 0
     280:	10 c0       	rjmp	.+32     	; 0x2a2 <uart_printhexdump+0x7c>
     282:	f8 01       	movw	r30, r16
     284:	90 80       	ld	r9, Z
     286:	89 2d       	mov	r24, r9
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <isprint>
     28e:	89 2b       	or	r24, r25
     290:	19 f0       	breq	.+6      	; 0x298 <uart_printhexdump+0x72>
     292:	89 2d       	mov	r24, r9
     294:	70 df       	rcall	.-288    	; 0x176 <uart_putc>
     296:	02 c0       	rjmp	.+4      	; 0x29c <uart_printhexdump+0x76>
     298:	8e e2       	ldi	r24, 0x2E	; 46
     29a:	6d df       	rcall	.-294    	; 0x176 <uart_putc>
     29c:	0f 5f       	subi	r16, 0xFF	; 255
     29e:	1f 4f       	sbci	r17, 0xFF	; 255
     2a0:	21 96       	adiw	r28, 0x01	; 1
     2a2:	c0 31       	cpi	r28, 0x10	; 16
     2a4:	d1 05       	cpc	r29, r1
     2a6:	6c f3       	brlt	.-38     	; 0x282 <uart_printhexdump+0x5c>
     2a8:	86 e6       	ldi	r24, 0x66	; 102
     2aa:	94 e0       	ldi	r25, 0x04	; 4
     2ac:	6b df       	rcall	.-298    	; 0x184 <uart_puts>
     2ae:	e6 01       	movw	r28, r12
     2b0:	87 01       	movw	r16, r14
     2b2:	ea 14       	cp	r14, r10
     2b4:	fb 04       	cpc	r15, r11
     2b6:	50 f2       	brcs	.-108    	; 0x24c <uart_printhexdump+0x26>
     2b8:	86 e6       	ldi	r24, 0x66	; 102
     2ba:	94 e0       	ldi	r25, 0x04	; 4
     2bc:	63 df       	rcall	.-314    	; 0x184 <uart_puts>
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	cf 90       	pop	r12
     2ce:	bf 90       	pop	r11
     2d0:	af 90       	pop	r10
     2d2:	9f 90       	pop	r9
     2d4:	08 95       	ret

000002d6 <SPI_init>:
    //PORTG = 0b00011111;
}

void SPI_init(void)
{
    CS_DDR |= CS; // SD card circuit select as output
     2d6:	84 b1       	in	r24, 0x04	; 4
     2d8:	81 60       	ori	r24, 0x01	; 1
     2da:	84 b9       	out	0x04, r24	; 4
    DDRB |= MOSI + SCK; // MOSI and SCK as outputs
     2dc:	84 b1       	in	r24, 0x04	; 4
     2de:	86 60       	ori	r24, 0x06	; 6
     2e0:	84 b9       	out	0x04, r24	; 4
    PORTB |= MISO; // pullup in MISO, might not be needed
     2e2:	85 b1       	in	r24, 0x05	; 5
     2e4:	88 60       	ori	r24, 0x08	; 8
     2e6:	85 b9       	out	0x05, r24	; 5
     2e8:	08 95       	ret

000002ea <SPI_write>:
}

unsigned char SPI_write(uint8_t ch)
{
    SPDR = ch;
     2ea:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF))) {}
     2ec:	0d b4       	in	r0, 0x2d	; 45
     2ee:	07 fe       	sbrs	r0, 7
     2f0:	fd cf       	rjmp	.-6      	; 0x2ec <SPI_write+0x2>
    return SPDR;
     2f2:	8e b5       	in	r24, 0x2e	; 46
}
     2f4:	08 95       	ret

000002f6 <wait_sd_some_cycl>:

void wait_sd_some_cycl(void)
{
    SPI_write(0xFF);
     2f6:	8f ef       	ldi	r24, 0xFF	; 255
     2f8:	f8 df       	rcall	.-16     	; 0x2ea <SPI_write>
    SPI_write(0xFF);
     2fa:	8f ef       	ldi	r24, 0xFF	; 255
     2fc:	f6 df       	rcall	.-20     	; 0x2ea <SPI_write>
    SPI_write(0xFF);
     2fe:	8f ef       	ldi	r24, 0xFF	; 255
     300:	f4 df       	rcall	.-24     	; 0x2ea <SPI_write>
    SPI_write(0xFF);
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	f2 df       	rcall	.-28     	; 0x2ea <SPI_write>
    SPI_write(0xFF);
     306:	8f ef       	ldi	r24, 0xFF	; 255
     308:	f0 df       	rcall	.-32     	; 0x2ea <SPI_write>
    SPI_write(0xFF);
     30a:	8f ef       	ldi	r24, 0xFF	; 255
     30c:	ee df       	rcall	.-36     	; 0x2ea <SPI_write>
    SPI_write(0xFF);
     30e:	8f ef       	ldi	r24, 0xFF	; 255
     310:	ec df       	rcall	.-40     	; 0x2ea <SPI_write>
    SPI_write(0xFF);
     312:	8f ef       	ldi	r24, 0xFF	; 255
     314:	ea df       	rcall	.-44     	; 0x2ea <SPI_write>
     316:	8f ef       	ldi	r24, 0xFF	; 255
    SPI_write(0xFF);
     318:	e8 df       	rcall	.-48     	; 0x2ea <SPI_write>
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	e6 cf       	rjmp	.-52     	; 0x2ea <SPI_write>
    SPI_write(0xFF);
     31e:	08 95       	ret

00000320 <read_spi_while_byte_is_not>:
     320:	8f 92       	push	r8
     322:	9f 92       	push	r9
     324:	af 92       	push	r10
}


bool read_spi_while_byte_is_not(uint8_t byte, uint32_t max_timeout)
{
     326:	bf 92       	push	r11
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	cf 93       	push	r28
     332:	c8 2f       	mov	r28, r24
     334:	4a 01       	movw	r8, r20
     336:	5b 01       	movw	r10, r22
    for (uint32_t i = 0; i < max_timeout; i++)
     338:	c1 2c       	mov	r12, r1
     33a:	d1 2c       	mov	r13, r1
     33c:	76 01       	movw	r14, r12
     33e:	18 c0       	rjmp	.+48     	; 0x370 <read_spi_while_byte_is_not+0x50>
    {
        if (SPI_write(0xFF) == byte)
     340:	8f ef       	ldi	r24, 0xFF	; 255
     342:	d3 df       	rcall	.-90     	; 0x2ea <SPI_write>
     344:	8c 17       	cp	r24, r28
     346:	f1 f0       	breq	.+60     	; 0x384 <read_spi_while_byte_is_not+0x64>
        {
            return true;
        }

        if ((i + 1) % 1000 == 0)
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	c8 1a       	sub	r12, r24
     34c:	d8 0a       	sbc	r13, r24
     34e:	e8 0a       	sbc	r14, r24
     350:	f8 0a       	sbc	r15, r24
     352:	c7 01       	movw	r24, r14
     354:	b6 01       	movw	r22, r12
     356:	28 ee       	ldi	r18, 0xE8	; 232
     358:	33 e0       	ldi	r19, 0x03	; 3
     35a:	40 e0       	ldi	r20, 0x00	; 0
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	0e 94 3b 14 	call	0x2876	; 0x2876 <__udivmodsi4>
     362:	67 2b       	or	r22, r23
     364:	68 2b       	or	r22, r24
     366:	69 2b       	or	r22, r25
     368:	19 f4       	brne	.+6      	; 0x370 <read_spi_while_byte_is_not+0x50>
        {
            uart_putsnl("\r\nsd waiting for data...");
     36a:	8b e9       	ldi	r24, 0x9B	; 155
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	23 df       	rcall	.-442    	; 0x1b6 <uart_putsnl>
}


bool read_spi_while_byte_is_not(uint8_t byte, uint32_t max_timeout)
{
    for (uint32_t i = 0; i < max_timeout; i++)
     370:	c8 14       	cp	r12, r8
     372:	d9 04       	cpc	r13, r9
     374:	ea 04       	cpc	r14, r10
     376:	fb 04       	cpc	r15, r11
     378:	18 f3       	brcs	.-58     	; 0x340 <read_spi_while_byte_is_not+0x20>
        {
            uart_putsnl("\r\nsd waiting for data...");
        }
    }

    uart_putsnl("\r\nERROR sd waiting for data timeout...");
     37a:	84 eb       	ldi	r24, 0xB4	; 180
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	1b df       	rcall	.-458    	; 0x1b6 <uart_putsnl>

    return false;
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	01 c0       	rjmp	.+2      	; 0x386 <read_spi_while_byte_is_not+0x66>
{
    for (uint32_t i = 0; i < max_timeout; i++)
    {
        if (SPI_write(0xFF) == byte)
        {
            return true;
     384:	81 e0       	ldi	r24, 0x01	; 1
    }

    uart_putsnl("\r\nERROR sd waiting for data timeout...");

    return false;
}
     386:	cf 91       	pop	r28
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	af 90       	pop	r10
     394:	9f 90       	pop	r9
     396:	8f 90       	pop	r8
     398:	08 95       	ret

0000039a <SD_command>:

unsigned char SD_command(unsigned char cmd,
                         unsigned long arg,
                         unsigned char crc,
                         unsigned char read)
{
     39a:	bf 92       	push	r11
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	a0 97       	sbiw	r28, 0x20	; 32
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	cd bf       	out	0x3d, r28	; 61
     3bc:	18 2f       	mov	r17, r24
     3be:	e4 2e       	mov	r14, r20
     3c0:	d5 2e       	mov	r13, r21
     3c2:	c6 2e       	mov	r12, r22
     3c4:	b7 2e       	mov	r11, r23
     3c6:	f2 2e       	mov	r15, r18
    unsigned char i;
    unsigned char buffer[32] = { 0 };
     3c8:	fe 01       	movw	r30, r28
     3ca:	31 96       	adiw	r30, 0x01	; 1
     3cc:	80 e2       	ldi	r24, 0x20	; 32
     3ce:	df 01       	movw	r26, r30
     3d0:	1d 92       	st	X+, r1
     3d2:	8a 95       	dec	r24
     3d4:	e9 f7       	brne	.-6      	; 0x3d0 <SD_command+0x36>
    unsigned char ret = 0xFF;

    wait_sd_some_cycl();
     3d6:	8f df       	rcall	.-226    	; 0x2f6 <wait_sd_some_cycl>

    uart_puts("CMD ");
     3d8:	8b ed       	ldi	r24, 0xDB	; 219
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	d3 de       	rcall	.-602    	; 0x184 <uart_puts>
    uart_printhexchar(cmd);
     3de:	81 2f       	mov	r24, r17
     3e0:	ef de       	rcall	.-546    	; 0x1c0 <uart_printhexchar>
    uart_putc(' ');
     3e2:	80 e2       	ldi	r24, 0x20	; 32
     3e4:	c8 de       	rcall	.-624    	; 0x176 <uart_putc>

    SPI_write(cmd);
     3e6:	81 2f       	mov	r24, r17
     3e8:	80 df       	rcall	.-256    	; 0x2ea <SPI_write>
    SPI_write(arg >> 24);
     3ea:	8b 2d       	mov	r24, r11
     3ec:	7e df       	rcall	.-260    	; 0x2ea <SPI_write>
    SPI_write(arg >> 16);
     3ee:	8c 2d       	mov	r24, r12
     3f0:	7c df       	rcall	.-264    	; 0x2ea <SPI_write>
    SPI_write(arg >> 8);
     3f2:	8d 2d       	mov	r24, r13
     3f4:	7a df       	rcall	.-268    	; 0x2ea <SPI_write>
     3f6:	8e 2d       	mov	r24, r14
    SPI_write(arg);
     3f8:	78 df       	rcall	.-272    	; 0x2ea <SPI_write>
     3fa:	8f 2d       	mov	r24, r15
    SPI_write(crc);
     3fc:	76 df       	rcall	.-276    	; 0x2ea <SPI_write>
     3fe:	10 e0       	ldi	r17, 0x00	; 0
     400:	0c c0       	rjmp	.+24     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>

    for (i = 0; i < read; i++)
     402:	e1 2e       	mov	r14, r17
     404:	f1 2c       	mov	r15, r1
    {
        buffer[i] = SPI_write(0xFF);
     406:	8f ef       	ldi	r24, 0xFF	; 255
     408:	70 df       	rcall	.-288    	; 0x2ea <SPI_write>
     40a:	e1 e0       	ldi	r30, 0x01	; 1
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	ec 0f       	add	r30, r28
     410:	fd 1f       	adc	r31, r29
     412:	ee 0d       	add	r30, r14
     414:	ff 1d       	adc	r31, r15
     416:	80 83       	st	Z, r24
     418:	1f 5f       	subi	r17, 0xFF	; 255
     41a:	10 17       	cp	r17, r16
     41c:	90 f3       	brcs	.-28     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
    SPI_write(arg >> 16);
    SPI_write(arg >> 8);
    SPI_write(arg);
    SPI_write(crc);

    for (i = 0; i < read; i++)
     41e:	ee 24       	eor	r14, r14
     420:	ea 94       	dec	r14
     422:	f1 2c       	mov	r15, r1
     424:	10 c0       	rjmp	.+32     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     426:	e1 e0       	ldi	r30, 0x01	; 1
     428:	f0 e0       	ldi	r31, 0x00	; 0
        buffer[i] = SPI_write(0xFF);
    }

    for (i = 0; i < read; i++)
    {
        uart_printhexchar(buffer[i]);
     42a:	ec 0f       	add	r30, r28
     42c:	fd 1f       	adc	r31, r29
     42e:	ef 0d       	add	r30, r15
     430:	f1 1d       	adc	r31, r1
     432:	10 81       	ld	r17, Z
     434:	81 2f       	mov	r24, r17
     436:	c4 de       	rcall	.-632    	; 0x1c0 <uart_printhexchar>
     438:	80 e2       	ldi	r24, 0x20	; 32
     43a:	9d de       	rcall	.-710    	; 0x176 <uart_putc>
        uart_putc(' ');
     43c:	1f 3f       	cpi	r17, 0xFF	; 255
     43e:	09 f4       	brne	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     440:	1e 2d       	mov	r17, r14
        if (buffer[i] != 0xFF)
     442:	f3 94       	inc	r15
     444:	e1 2e       	mov	r14, r17
     446:	f0 16       	cp	r15, r16
    for (i = 0; i < read; i++)
    {
        buffer[i] = SPI_write(0xFF);
    }

    for (i = 0; i < read; i++)
     448:	70 f3       	brcs	.-36     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     44a:	86 e6       	ldi	r24, 0x66	; 102
     44c:	94 e0       	ldi	r25, 0x04	; 4
     44e:	9a de       	rcall	.-716    	; 0x184 <uart_puts>
        {
            ret = buffer[i];
        }
    }

    uart_puts("\r\n");
     450:	8e 2d       	mov	r24, r14
     452:	a0 96       	adiw	r28, 0x20	; 32
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli

    return ret;
}
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	ff 90       	pop	r15
     468:	ef 90       	pop	r14
     46a:	df 90       	pop	r13
     46c:	cf 90       	pop	r12
     46e:	bf 90       	pop	r11
     470:	08 95       	ret

00000472 <SD_init>:
     472:	0f 93       	push	r16
     474:	cf 93       	push	r28
     476:	82 e5       	ldi	r24, 0x52	; 82
     478:	8c bd       	out	0x2c, r24	; 44
{
    char i;

    SPI_SLOW();
    // ]r:10
    CS_DISABLE();
     47a:	85 b1       	in	r24, 0x05	; 5
     47c:	81 60       	ori	r24, 0x01	; 1
     47e:	85 b9       	out	0x05, r24	; 5
    for (i = 0; i < 10; i++) // idle for 1 bytes / 80 clocks
     480:	c0 e0       	ldi	r28, 0x00	; 0
     482:	03 c0       	rjmp	.+6      	; 0x48a <SD_init+0x18>
    {
        SPI_write(0xFF);
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	31 df       	rcall	.-414    	; 0x2ea <SPI_write>
    char i;

    SPI_SLOW();
    // ]r:10
    CS_DISABLE();
    for (i = 0; i < 10; i++) // idle for 1 bytes / 80 clocks
     488:	cf 5f       	subi	r28, 0xFF	; 255
     48a:	ca 30       	cpi	r28, 0x0A	; 10
     48c:	d8 f3       	brcs	.-10     	; 0x484 <SD_init+0x12>
    {
        SPI_write(0xFF);
    }

    uart_putsnl("clearing sd...");
     48e:	80 ee       	ldi	r24, 0xE0	; 224
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	91 de       	rcall	.-734    	; 0x1b6 <uart_putsnl>
    CS_ENABLE();
     494:	85 b1       	in	r24, 0x05	; 5
     496:	8e 7f       	andi	r24, 0xFE	; 254
     498:	85 b9       	out	0x05, r24	; 5
    if (!read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
     49a:	40 ea       	ldi	r20, 0xA0	; 160
     49c:	56 e8       	ldi	r21, 0x86	; 134
     49e:	61 e0       	ldi	r22, 0x01	; 1
     4a0:	70 e0       	ldi	r23, 0x00	; 0
     4a2:	8f ef       	ldi	r24, 0xFF	; 255
     4a4:	3d df       	rcall	.-390    	; 0x320 <read_spi_while_byte_is_not>
     4a6:	88 23       	and	r24, r24
     4a8:	09 f4       	brne	.+2      	; 0x4ac <SD_init+0x3a>
     4aa:	53 c0       	rjmp	.+166    	; 0x552 <SD_init+0xe0>
    {
        return SD_INIT_ERR_CANT_CLEAR;
    }
    CS_DISABLE();
     4ac:	85 b1       	in	r24, 0x05	; 5
     4ae:	81 60       	ori	r24, 0x01	; 1
     4b0:	85 b9       	out	0x05, r24	; 5

    // [0x40 0x00 0x00 0x00 0x00 0x95 r:8] until we get "1"
    for (i = 0; i < 10; i++)
     4b2:	c0 e0       	ldi	r28, 0x00	; 0
     4b4:	19 c0       	rjmp	.+50     	; 0x4e8 <SD_init+0x76>
    {
        CS_ENABLE();
     4b6:	85 b1       	in	r24, 0x05	; 5
     4b8:	8e 7f       	andi	r24, 0xFE	; 254
     4ba:	85 b9       	out	0x05, r24	; 5
        if (SD_command(CMD0, 0x00000000, 0x95, 8) == 1)
     4bc:	08 e0       	ldi	r16, 0x08	; 8
     4be:	25 e9       	ldi	r18, 0x95	; 149
     4c0:	40 e0       	ldi	r20, 0x00	; 0
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	ba 01       	movw	r22, r20
     4c6:	80 e4       	ldi	r24, 0x40	; 64
     4c8:	68 df       	rcall	.-304    	; 0x39a <SD_command>
     4ca:	81 30       	cpi	r24, 0x01	; 1
     4cc:	79 f0       	breq	.+30     	; 0x4ec <SD_init+0x7a>
        {
            break;
        }
        CS_DISABLE();
     4ce:	85 b1       	in	r24, 0x05	; 5
     4d0:	81 60       	ori	r24, 0x01	; 1
     4d2:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d4:	2f ef       	ldi	r18, 0xFF	; 255
     4d6:	81 ee       	ldi	r24, 0xE1	; 225
     4d8:	94 e0       	ldi	r25, 0x04	; 4
     4da:	21 50       	subi	r18, 0x01	; 1
     4dc:	80 40       	sbci	r24, 0x00	; 0
     4de:	90 40       	sbci	r25, 0x00	; 0
     4e0:	e1 f7       	brne	.-8      	; 0x4da <SD_init+0x68>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <SD_init+0x72>
     4e4:	00 00       	nop
        return SD_INIT_ERR_CANT_CLEAR;
    }
    CS_DISABLE();

    // [0x40 0x00 0x00 0x00 0x00 0x95 r:8] until we get "1"
    for (i = 0; i < 10; i++)
     4e6:	cf 5f       	subi	r28, 0xFF	; 255
     4e8:	ca 30       	cpi	r28, 0x0A	; 10
     4ea:	28 f3       	brcs	.-54     	; 0x4b6 <SD_init+0x44>
            break;
        }
        CS_DISABLE();
        _delay_ms(100);
    }
    if (i == 10) // card did not respond to initialization
     4ec:	ca 30       	cpi	r28, 0x0A	; 10
     4ee:	99 f1       	breq	.+102    	; 0x556 <SD_init+0xe4>
     4f0:	c0 e0       	ldi	r28, 0x00	; 0
     4f2:	19 c0       	rjmp	.+50     	; 0x526 <SD_init+0xb4>
    }

    // CMD1 until card comes out of idle, but maximum of 10 times
    for (i = 0; i < 10; i++)
    {
        CS_ENABLE();
     4f4:	85 b1       	in	r24, 0x05	; 5
     4f6:	8e 7f       	andi	r24, 0xFE	; 254
     4f8:	85 b9       	out	0x05, r24	; 5
        if (SD_command(CMD1, 0x00000000, 0xFF, 8) == 0)
     4fa:	08 e0       	ldi	r16, 0x08	; 8
     4fc:	2f ef       	ldi	r18, 0xFF	; 255
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	ba 01       	movw	r22, r20
     504:	81 e4       	ldi	r24, 0x41	; 65
     506:	49 df       	rcall	.-366    	; 0x39a <SD_command>
     508:	88 23       	and	r24, r24
     50a:	79 f0       	breq	.+30     	; 0x52a <SD_init+0xb8>
        {
            break;
        }
        CS_DISABLE();
     50c:	85 b1       	in	r24, 0x05	; 5
     50e:	81 60       	ori	r24, 0x01	; 1
     510:	85 b9       	out	0x05, r24	; 5
     512:	2f ef       	ldi	r18, 0xFF	; 255
     514:	81 ee       	ldi	r24, 0xE1	; 225
     516:	94 e0       	ldi	r25, 0x04	; 4
     518:	21 50       	subi	r18, 0x01	; 1
     51a:	80 40       	sbci	r24, 0x00	; 0
     51c:	90 40       	sbci	r25, 0x00	; 0
     51e:	e1 f7       	brne	.-8      	; 0x518 <SD_init+0xa6>
     520:	00 c0       	rjmp	.+0      	; 0x522 <SD_init+0xb0>
     522:	00 00       	nop
    {
        return SD_INIT_ERR_DONT_RESPOND;
    }

    // CMD1 until card comes out of idle, but maximum of 10 times
    for (i = 0; i < 10; i++)
     524:	cf 5f       	subi	r28, 0xFF	; 255
     526:	ca 30       	cpi	r28, 0x0A	; 10
     528:	28 f3       	brcs	.-54     	; 0x4f4 <SD_init+0x82>
            break;
        }
        CS_DISABLE();
        _delay_ms(100);
    }
    if (i == 10) // card did not come out of idle
     52a:	ca 30       	cpi	r28, 0x0A	; 10
     52c:	b1 f0       	breq	.+44     	; 0x55a <SD_init+0xe8>
    {
        return SD_INIT_ERR_DONT_OUT_IDLE;
    }

    // SET_BLOCKLEN to 512
    CS_ENABLE();
     52e:	85 b1       	in	r24, 0x05	; 5
     530:	8e 7f       	andi	r24, 0xFE	; 254
     532:	85 b9       	out	0x05, r24	; 5
    SD_command(CMD16, 512, 0xFF, 8);
     534:	08 e0       	ldi	r16, 0x08	; 8
     536:	2f ef       	ldi	r18, 0xFF	; 255
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	52 e0       	ldi	r21, 0x02	; 2
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	80 e5       	ldi	r24, 0x50	; 80
     542:	2b df       	rcall	.-426    	; 0x39a <SD_command>
    CS_DISABLE();
     544:	85 b1       	in	r24, 0x05	; 5
     546:	81 60       	ori	r24, 0x01	; 1
     548:	85 b9       	out	0x05, r24	; 5

    SPI_FAST();
     54a:	81 e5       	ldi	r24, 0x51	; 81
     54c:	8c bd       	out	0x2c, r24	; 44

    return SD_INIT_OK;
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	05 c0       	rjmp	.+10     	; 0x55c <SD_init+0xea>

    uart_putsnl("clearing sd...");
    CS_ENABLE();
    if (!read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
    {
        return SD_INIT_ERR_CANT_CLEAR;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	03 c0       	rjmp	.+6      	; 0x55c <SD_init+0xea>
        CS_DISABLE();
        _delay_ms(100);
    }
    if (i == 10) // card did not respond to initialization
    {
        return SD_INIT_ERR_DONT_RESPOND;
     556:	82 e0       	ldi	r24, 0x02	; 2
     558:	01 c0       	rjmp	.+2      	; 0x55c <SD_init+0xea>
        CS_DISABLE();
        _delay_ms(100);
    }
    if (i == 10) // card did not come out of idle
    {
        return SD_INIT_ERR_DONT_OUT_IDLE;
     55a:	83 e0       	ldi	r24, 0x03	; 3
    CS_DISABLE();

    SPI_FAST();

    return SD_INIT_OK;
}
     55c:	cf 91       	pop	r28
     55e:	0f 91       	pop	r16
     560:	08 95       	ret

00000562 <SD_read_sector>:

// TODO: This function will not exit gracefully if SD card does not do what it should
bool SD_read_sector(unsigned long sector, uint8_t* buffer)
{
     562:	8f 92       	push	r8
     564:	9f 92       	push	r9
     566:	af 92       	push	r10
     568:	bf 92       	push	r11
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	4b 01       	movw	r8, r22
     578:	5c 01       	movw	r10, r24
     57a:	7a 01       	movw	r14, r20
    unsigned short i = 0;
    bool retf = false;

    CS_ENABLE();
     57c:	85 b1       	in	r24, 0x05	; 5
     57e:	8e 7f       	andi	r24, 0xFE	; 254
     580:	85 b9       	out	0x05, r24	; 5
    wait_sd_some_cycl();
     582:	b9 de       	rcall	.-654    	; 0x2f6 <wait_sd_some_cycl>

    SPI_write(CMD17);
     584:	81 e5       	ldi	r24, 0x51	; 81
     586:	b1 de       	rcall	.-670    	; 0x2ea <SPI_write>
    SPI_write(sector >> 15); // sector*512 >> 24
     588:	d5 01       	movw	r26, r10
     58a:	c4 01       	movw	r24, r8
     58c:	07 2e       	mov	r0, r23
     58e:	7f e0       	ldi	r23, 0x0F	; 15
     590:	b6 95       	lsr	r27
     592:	a7 95       	ror	r26
     594:	97 95       	ror	r25
     596:	87 95       	ror	r24
     598:	7a 95       	dec	r23
     59a:	d1 f7       	brne	.-12     	; 0x590 <SD_read_sector+0x2e>
     59c:	70 2d       	mov	r23, r0
     59e:	a5 de       	rcall	.-694    	; 0x2ea <SPI_write>
    SPI_write(sector >> 7); // sector*512 >> 16
     5a0:	d5 01       	movw	r26, r10
     5a2:	c4 01       	movw	r24, r8
     5a4:	68 94       	set
     5a6:	16 f8       	bld	r1, 6
     5a8:	b6 95       	lsr	r27
     5aa:	a7 95       	ror	r26
     5ac:	97 95       	ror	r25
     5ae:	87 95       	ror	r24
     5b0:	16 94       	lsr	r1
     5b2:	d1 f7       	brne	.-12     	; 0x5a8 <SD_read_sector+0x46>
    SPI_write(sector << 1); // sector*512 >> 8
     5b4:	9a de       	rcall	.-716    	; 0x2ea <SPI_write>
     5b6:	88 2d       	mov	r24, r8
    SPI_write(0);          // sector*512
     5b8:	88 0f       	add	r24, r24
     5ba:	97 de       	rcall	.-722    	; 0x2ea <SPI_write>
     5bc:	80 e0       	ldi	r24, 0x00	; 0
    SPI_write(0xFF);
     5be:	95 de       	rcall	.-726    	; 0x2ea <SPI_write>
     5c0:	8f ef       	ldi	r24, 0xFF	; 255

    // wait for 0
    if (read_spi_while_byte_is_not(0, RECOMMEND_WAIT_TIMEOUT_SPI))
     5c2:	93 de       	rcall	.-730    	; 0x2ea <SPI_write>
     5c4:	40 ea       	ldi	r20, 0xA0	; 160
     5c6:	56 e8       	ldi	r21, 0x86	; 134
     5c8:	61 e0       	ldi	r22, 0x01	; 1
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	a8 de       	rcall	.-688    	; 0x320 <read_spi_while_byte_is_not>
     5d0:	88 23       	and	r24, r24
    {
        // wait for data Start Block token
        if (read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI))
     5d2:	f1 f0       	breq	.+60     	; 0x610 <SD_read_sector+0xae>
     5d4:	40 ea       	ldi	r20, 0xA0	; 160
     5d6:	56 e8       	ldi	r21, 0x86	; 134
     5d8:	61 e0       	ldi	r22, 0x01	; 1
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	8e ef       	ldi	r24, 0xFE	; 254
     5de:	a0 de       	rcall	.-704    	; 0x320 <read_spi_while_byte_is_not>
     5e0:	81 11       	cpse	r24, r1
     5e2:	0a c0       	rjmp	.+20     	; 0x5f8 <SD_read_sector+0x96>
        {
            for (i = 0; i < 512; i++)
            {
                buffer[i] = SPI_write(0xFF);
     5e4:	16 c0       	rjmp	.+44     	; 0x612 <SD_read_sector+0xb0>
     5e6:	87 01       	movw	r16, r14
     5e8:	0c 0f       	add	r16, r28
     5ea:	1d 1f       	adc	r17, r29
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	7d de       	rcall	.-774    	; 0x2ea <SPI_write>
     5f0:	f8 01       	movw	r30, r16
    if (read_spi_while_byte_is_not(0, RECOMMEND_WAIT_TIMEOUT_SPI))
    {
        // wait for data Start Block token
        if (read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI))
        {
            for (i = 0; i < 512; i++)
     5f2:	80 83       	st	Z, r24
     5f4:	21 96       	adiw	r28, 0x01	; 1
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <SD_read_sector+0x9a>
     5f8:	c0 e0       	ldi	r28, 0x00	; 0
     5fa:	d0 e0       	ldi	r29, 0x00	; 0
     5fc:	c1 15       	cp	r28, r1
     5fe:	f2 e0       	ldi	r31, 0x02	; 2
            {
                buffer[i] = SPI_write(0xFF);
            }
            // skip checksum
            SPI_write(0xFF);
     600:	df 07       	cpc	r29, r31
     602:	88 f3       	brcs	.-30     	; 0x5e6 <SD_read_sector+0x84>
     604:	8f ef       	ldi	r24, 0xFF	; 255
            SPI_write(0xFF);
     606:	71 de       	rcall	.-798    	; 0x2ea <SPI_write>
     608:	8f ef       	ldi	r24, 0xFF	; 255
     60a:	6f de       	rcall	.-802    	; 0x2ea <SPI_write>

            retf = true;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	01 c0       	rjmp	.+2      	; 0x612 <SD_read_sector+0xb0>

// TODO: This function will not exit gracefully if SD card does not do what it should
bool SD_read_sector(unsigned long sector, uint8_t* buffer)
{
    unsigned short i = 0;
    bool retf = false;
     610:	80 e0       	ldi	r24, 0x00	; 0
            retf = true;
        }

    }

    CS_DISABLE();
     612:	95 b1       	in	r25, 0x05	; 5
     614:	91 60       	ori	r25, 0x01	; 1
     616:	95 b9       	out	0x05, r25	; 5

    return retf;
}
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	ff 90       	pop	r15
     622:	ef 90       	pop	r14
     624:	bf 90       	pop	r11
     626:	af 90       	pop	r10
     628:	9f 90       	pop	r9
     62a:	8f 90       	pop	r8
     62c:	08 95       	ret

0000062e <SD_write_sector>:

bool SD_write_sector(unsigned long sector, uint8_t* buffer)
{
     62e:	cf 92       	push	r12
     630:	df 92       	push	r13
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	6b 01       	movw	r12, r22
     640:	7c 01       	movw	r14, r24
     642:	8a 01       	movw	r16, r20
    unsigned short i = 0;
    bool retf = false;

    CS_ENABLE();
     644:	85 b1       	in	r24, 0x05	; 5
     646:	8e 7f       	andi	r24, 0xFE	; 254
     648:	85 b9       	out	0x05, r24	; 5
    wait_sd_some_cycl();
     64a:	55 de       	rcall	.-854    	; 0x2f6 <wait_sd_some_cycl>

    SPI_write(CMD24);
     64c:	88 e5       	ldi	r24, 0x58	; 88
     64e:	4d de       	rcall	.-870    	; 0x2ea <SPI_write>
    SPI_write(sector >> 15); // sector*512 >> 24
     650:	d7 01       	movw	r26, r14
     652:	c6 01       	movw	r24, r12
     654:	07 2e       	mov	r0, r23
     656:	7f e0       	ldi	r23, 0x0F	; 15
     658:	b6 95       	lsr	r27
     65a:	a7 95       	ror	r26
     65c:	97 95       	ror	r25
     65e:	87 95       	ror	r24
     660:	7a 95       	dec	r23
     662:	d1 f7       	brne	.-12     	; 0x658 <SD_write_sector+0x2a>
     664:	70 2d       	mov	r23, r0
     666:	41 de       	rcall	.-894    	; 0x2ea <SPI_write>
    SPI_write(sector >> 7); // sector*512 >> 16
     668:	d7 01       	movw	r26, r14
     66a:	c6 01       	movw	r24, r12
     66c:	68 94       	set
     66e:	16 f8       	bld	r1, 6
     670:	b6 95       	lsr	r27
     672:	a7 95       	ror	r26
     674:	97 95       	ror	r25
     676:	87 95       	ror	r24
     678:	16 94       	lsr	r1
     67a:	d1 f7       	brne	.-12     	; 0x670 <SD_write_sector+0x42>
    SPI_write(sector << 1); // sector*512 >> 8
     67c:	36 de       	rcall	.-916    	; 0x2ea <SPI_write>
     67e:	8c 2d       	mov	r24, r12
    SPI_write(0);          // sector*512
     680:	88 0f       	add	r24, r24
     682:	33 de       	rcall	.-922    	; 0x2ea <SPI_write>
     684:	80 e0       	ldi	r24, 0x00	; 0
    SPI_write(0xFF);
     686:	31 de       	rcall	.-926    	; 0x2ea <SPI_write>
     688:	8f ef       	ldi	r24, 0xFF	; 255

    // wait for 0
    if (read_spi_while_byte_is_not(0, RECOMMEND_WAIT_TIMEOUT_SPI))
     68a:	2f de       	rcall	.-930    	; 0x2ea <SPI_write>
     68c:	40 ea       	ldi	r20, 0xA0	; 160
     68e:	56 e8       	ldi	r21, 0x86	; 134
     690:	61 e0       	ldi	r22, 0x01	; 1
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	44 de       	rcall	.-888    	; 0x320 <read_spi_while_byte_is_not>
     698:	88 23       	and	r24, r24
    {
        // wait for 0xff
        if (read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
     69a:	69 f1       	breq	.+90     	; 0x6f6 <SD_write_sector+0xc8>
     69c:	40 ea       	ldi	r20, 0xA0	; 160
     69e:	56 e8       	ldi	r21, 0x86	; 134
     6a0:	61 e0       	ldi	r22, 0x01	; 1
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	8f ef       	ldi	r24, 0xFF	; 255
     6a6:	3c de       	rcall	.-904    	; 0x320 <read_spi_while_byte_is_not>
     6a8:	88 23       	and	r24, r24
        {
            // SEND Start Block token
            SPI_write(0xFE);
     6aa:	39 f1       	breq	.+78     	; 0x6fa <SD_write_sector+0xcc>
     6ac:	8e ef       	ldi	r24, 0xFE	; 254
            for (i = 0; i < 512; i++)
     6ae:	1d de       	rcall	.-966    	; 0x2ea <SPI_write>
     6b0:	c0 e0       	ldi	r28, 0x00	; 0
     6b2:	d0 e0       	ldi	r29, 0x00	; 0
            {
                SPI_write(buffer[i]);
     6b4:	06 c0       	rjmp	.+12     	; 0x6c2 <SD_write_sector+0x94>
     6b6:	f8 01       	movw	r30, r16
     6b8:	ec 0f       	add	r30, r28
     6ba:	fd 1f       	adc	r31, r29
        // wait for 0xff
        if (read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
        {
            // SEND Start Block token
            SPI_write(0xFE);
            for (i = 0; i < 512; i++)
     6bc:	80 81       	ld	r24, Z
     6be:	15 de       	rcall	.-982    	; 0x2ea <SPI_write>
     6c0:	21 96       	adiw	r28, 0x01	; 1
     6c2:	c1 15       	cp	r28, r1
     6c4:	82 e0       	ldi	r24, 0x02	; 2
            {
                SPI_write(buffer[i]);
            }

            // skip checksum
            SPI_write(0);
     6c6:	d8 07       	cpc	r29, r24
     6c8:	b0 f3       	brcs	.-20     	; 0x6b6 <SD_write_sector+0x88>
            SPI_write(0);
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	0e de       	rcall	.-996    	; 0x2ea <SPI_write>
     6ce:	80 e0       	ldi	r24, 0x00	; 0

            if (SPI_write(0) == CMD24_SUCCESS_BYTE)
     6d0:	0c de       	rcall	.-1000   	; 0x2ea <SPI_write>
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	0a de       	rcall	.-1004   	; 0x2ea <SPI_write>
     6d6:	85 3e       	cpi	r24, 0xE5	; 229
            {
                // wait for idle
                if (read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
     6d8:	49 f4       	brne	.+18     	; 0x6ec <SD_write_sector+0xbe>
     6da:	40 ea       	ldi	r20, 0xA0	; 160
     6dc:	56 e8       	ldi	r21, 0x86	; 134
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	8f ef       	ldi	r24, 0xFF	; 255
     6e4:	1d de       	rcall	.-966    	; 0x320 <read_spi_while_byte_is_not>
     6e6:	81 11       	cpse	r24, r1
     6e8:	0a c0       	rjmp	.+20     	; 0x6fe <SD_write_sector+0xd0>
     6ea:	0a c0       	rjmp	.+20     	; 0x700 <SD_write_sector+0xd2>
                    retf = true;
                }
            }
            else
            {
                uart_putsnl("\r\nERROR! CMD24_SUCCESS_BYTE dont recved\r\n");
     6ec:	8f ee       	ldi	r24, 0xEF	; 239
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	62 dd       	rcall	.-1340   	; 0x1b6 <uart_putsnl>
     6f2:	80 e0       	ldi	r24, 0x00	; 0
}

bool SD_write_sector(unsigned long sector, uint8_t* buffer)
{
    unsigned short i = 0;
    bool retf = false;
     6f4:	05 c0       	rjmp	.+10     	; 0x700 <SD_write_sector+0xd2>
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	03 c0       	rjmp	.+6      	; 0x700 <SD_write_sector+0xd2>
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <SD_write_sector+0xd2>
     6fe:	81 e0       	ldi	r24, 0x01	; 1
            if (SPI_write(0) == CMD24_SUCCESS_BYTE)
            {
                // wait for idle
                if (read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
                {
                    retf = true;
     700:	95 b1       	in	r25, 0x05	; 5
                uart_putsnl("\r\nERROR! CMD24_SUCCESS_BYTE dont recved\r\n");
            }
        }
    }

    CS_DISABLE();
     702:	91 60       	ori	r25, 0x01	; 1
     704:	95 b9       	out	0x05, r25	; 5
     706:	df 91       	pop	r29

    return retf;
}
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
     716:	08 95       	ret

00000718 <sd_get_number_of_sectors>:
     718:	7f 92       	push	r7

bool sd_get_number_of_sectors(uint32_t* number_of_sectors)
{
     71a:	8f 92       	push	r8
     71c:	9f 92       	push	r9
     71e:	af 92       	push	r10
     720:	bf 92       	push	r11
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	8c 01       	movw	r16, r24
    uint32_t ret = 1;
    uint8_t csd_read_bl_len = 0;
    uint8_t csd_c_size_mult = 0;
    uint32_t csd_c_size = 0;

    CS_ENABLE();
     734:	85 b1       	in	r24, 0x05	; 5
     736:	8e 7f       	andi	r24, 0xFE	; 254
     738:	85 b9       	out	0x05, r24	; 5
    wait_sd_some_cycl();
     73a:	dd dd       	rcall	.-1094   	; 0x2f6 <wait_sd_some_cycl>

    SPI_write(CMD9);
     73c:	89 e4       	ldi	r24, 0x49	; 73
     73e:	d5 dd       	rcall	.-1110   	; 0x2ea <SPI_write>
    SPI_write(0);
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	d3 dd       	rcall	.-1114   	; 0x2ea <SPI_write>
    SPI_write(0);
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	d1 dd       	rcall	.-1118   	; 0x2ea <SPI_write>
    SPI_write(0);
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	cf dd       	rcall	.-1122   	; 0x2ea <SPI_write>
     74c:	80 e0       	ldi	r24, 0x00	; 0
    SPI_write(0);
     74e:	cd dd       	rcall	.-1126   	; 0x2ea <SPI_write>
     750:	40 ea       	ldi	r20, 0xA0	; 160

    if (read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI))
     752:	56 e8       	ldi	r21, 0x86	; 134
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	8e ef       	ldi	r24, 0xFE	; 254
     75a:	e2 dd       	rcall	.-1084   	; 0x320 <read_spi_while_byte_is_not>
     75c:	81 11       	cpse	r24, r1
     75e:	57 c0       	rjmp	.+174    	; 0x80e <sd_get_number_of_sectors+0xf6>
     760:	c1 2c       	mov	r12, r1
    return retf;
}

bool sd_get_number_of_sectors(uint32_t* number_of_sectors)
{
    uint32_t ret = 1;
     762:	d1 2c       	mov	r13, r1
     764:	76 01       	movw	r14, r12
     766:	c3 94       	inc	r12
     768:	5f c0       	rjmp	.+190    	; 0x828 <sd_get_number_of_sectors+0x110>
     76a:	8f ef       	ldi	r24, 0xFF	; 255

    if (read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI))
    {
        for (uint8_t i = 0; i < 18; i++)
        {
            uint8_t b = SPI_write(0xFF);
     76c:	be dd       	rcall	.-1156   	; 0x2ea <SPI_write>
     76e:	c7 30       	cpi	r28, 0x07	; 7
     770:	c9 f0       	breq	.+50     	; 0x7a4 <sd_get_number_of_sectors+0x8c>

            switch (i)
     772:	28 f4       	brcc	.+10     	; 0x77e <sd_get_number_of_sectors+0x66>
     774:	c5 30       	cpi	r28, 0x05	; 5
     776:	49 f0       	breq	.+18     	; 0x78a <sd_get_number_of_sectors+0x72>
     778:	c6 30       	cpi	r28, 0x06	; 6
     77a:	51 f0       	breq	.+20     	; 0x790 <sd_get_number_of_sectors+0x78>
     77c:	46 c0       	rjmp	.+140    	; 0x80a <sd_get_number_of_sectors+0xf2>
     77e:	c9 30       	cpi	r28, 0x09	; 9
     780:	71 f1       	breq	.+92     	; 0x7de <sd_get_number_of_sectors+0xc6>
     782:	f0 f0       	brcs	.+60     	; 0x7c0 <sd_get_number_of_sectors+0xa8>
     784:	ca 30       	cpi	r28, 0x0A	; 10
     786:	79 f1       	breq	.+94     	; 0x7e6 <sd_get_number_of_sectors+0xce>
     788:	40 c0       	rjmp	.+128    	; 0x80a <sd_get_number_of_sectors+0xf2>
     78a:	8f 70       	andi	r24, 0x0F	; 15
     78c:	78 2e       	mov	r7, r24
            {
                case 5:
                    csd_read_bl_len = b & 0x0f;
     78e:	3d c0       	rjmp	.+122    	; 0x80a <sd_get_number_of_sectors+0xf2>
     790:	48 2f       	mov	r20, r24
                    break;
     792:	43 70       	andi	r20, 0x03	; 3

                case 6:
                    csd_c_size = b & 0x03;
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	88 24       	eor	r8, r8
     79c:	94 2e       	mov	r9, r20
                    csd_c_size <<= 8;
     79e:	a5 2e       	mov	r10, r21
     7a0:	b6 2e       	mov	r11, r22
     7a2:	33 c0       	rjmp	.+102    	; 0x80a <sd_get_number_of_sectors+0xf2>
     7a4:	b5 01       	movw	r22, r10
                    break;
     7a6:	a4 01       	movw	r20, r8

                case 7:
                    csd_c_size |= b;
     7a8:	48 2b       	or	r20, r24
     7aa:	4a 01       	movw	r8, r20
     7ac:	5b 01       	movw	r10, r22
                    csd_c_size <<= 2;
     7ae:	88 0c       	add	r8, r8
     7b0:	99 1c       	adc	r9, r9
     7b2:	aa 1c       	adc	r10, r10
     7b4:	bb 1c       	adc	r11, r11
     7b6:	88 0c       	add	r8, r8
     7b8:	99 1c       	adc	r9, r9
     7ba:	aa 1c       	adc	r10, r10
     7bc:	bb 1c       	adc	r11, r11
     7be:	25 c0       	rjmp	.+74     	; 0x80a <sd_get_number_of_sectors+0xf2>
     7c0:	82 95       	swap	r24
                    break;
     7c2:	86 95       	lsr	r24

                case 8:
                    csd_c_size |= b >> 6;
     7c4:	86 95       	lsr	r24
     7c6:	83 70       	andi	r24, 0x03	; 3
     7c8:	b5 01       	movw	r22, r10
     7ca:	a4 01       	movw	r20, r8
     7cc:	48 2b       	or	r20, r24
     7ce:	4a 01       	movw	r8, r20
     7d0:	5b 01       	movw	r10, r22
                    csd_c_size++;
     7d2:	8f ef       	ldi	r24, 0xFF	; 255
     7d4:	88 1a       	sub	r8, r24
     7d6:	98 0a       	sbc	r9, r24
     7d8:	a8 0a       	sbc	r10, r24
     7da:	b8 0a       	sbc	r11, r24
     7dc:	16 c0       	rjmp	.+44     	; 0x80a <sd_get_number_of_sectors+0xf2>
     7de:	83 70       	andi	r24, 0x03	; 3
                    break;
     7e0:	d8 2f       	mov	r29, r24

                case 9:
                    csd_c_size_mult = b & 0x03;
     7e2:	dd 0f       	add	r29, r29
                    csd_c_size_mult <<= 1;
     7e4:	12 c0       	rjmp	.+36     	; 0x80a <sd_get_number_of_sectors+0xf2>
     7e6:	88 1f       	adc	r24, r24
                    break;
     7e8:	88 27       	eor	r24, r24

                case 10:
                    csd_c_size_mult |= b >> 7;
     7ea:	88 1f       	adc	r24, r24
     7ec:	d8 2b       	or	r29, r24
     7ee:	87 2d       	mov	r24, r7
     7f0:	90 e0       	ldi	r25, 0x00	; 0
                    ret = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
     7f2:	8d 0f       	add	r24, r29
     7f4:	91 1d       	adc	r25, r1
     7f6:	02 96       	adiw	r24, 0x02	; 2
     7f8:	75 01       	movw	r14, r10
     7fa:	64 01       	movw	r12, r8
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <sd_get_number_of_sectors+0xee>
     7fe:	cc 0c       	add	r12, r12
     800:	dd 1c       	adc	r13, r13
     802:	ee 1c       	adc	r14, r14
     804:	ff 1c       	adc	r15, r15
     806:	8a 95       	dec	r24
     808:	d2 f7       	brpl	.-12     	; 0x7fe <sd_get_number_of_sectors+0xe6>
     80a:	cf 5f       	subi	r28, 0xFF	; 255
     80c:	0a c0       	rjmp	.+20     	; 0x822 <sd_get_number_of_sectors+0x10a>
    SPI_write(0);
    SPI_write(0);

    if (read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI))
    {
        for (uint8_t i = 0; i < 18; i++)
     80e:	c0 e0       	ldi	r28, 0x00	; 0
     810:	81 2c       	mov	r8, r1
     812:	91 2c       	mov	r9, r1
     814:	54 01       	movw	r10, r8
     816:	d0 e0       	ldi	r29, 0x00	; 0
     818:	71 2c       	mov	r7, r1
     81a:	c1 2c       	mov	r12, r1
     81c:	d1 2c       	mov	r13, r1
     81e:	76 01       	movw	r14, r12
     820:	c3 94       	inc	r12
     822:	c2 31       	cpi	r28, 0x12	; 18
     824:	08 f4       	brcc	.+2      	; 0x828 <sd_get_number_of_sectors+0x110>
     826:	a1 cf       	rjmp	.-190    	; 0x76a <sd_get_number_of_sectors+0x52>
     828:	85 b1       	in	r24, 0x05	; 5
     82a:	81 60       	ori	r24, 0x01	; 1
                    break;
            }
        }
    }

    CS_DISABLE();
     82c:	85 b9       	out	0x05, r24	; 5
     82e:	d7 01       	movw	r26, r14
     830:	c6 01       	movw	r24, r12

    if (ret % 512 != 0)
     832:	91 70       	andi	r25, 0x01	; 1
     834:	aa 27       	eor	r26, r26
     836:	bb 27       	eor	r27, r27
     838:	89 2b       	or	r24, r25
     83a:	8a 2b       	or	r24, r26
     83c:	8b 2b       	or	r24, r27
     83e:	29 f0       	breq	.+10     	; 0x84a <sd_get_number_of_sectors+0x132>
     840:	89 e1       	ldi	r24, 0x19	; 25
    {
        uart_putsnl("\r\nERROR! number of bytes is not % 512\r\n");
     842:	92 e0       	ldi	r25, 0x02	; 2
     844:	b8 dc       	rcall	.-1680   	; 0x1b6 <uart_putsnl>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	0f c0       	rjmp	.+30     	; 0x868 <sd_get_number_of_sectors+0x150>
        return false;
     84a:	0b 2e       	mov	r0, r27
     84c:	b9 e0       	ldi	r27, 0x09	; 9
    }

    *number_of_sectors = ret / 512;
     84e:	f6 94       	lsr	r15
     850:	e7 94       	ror	r14
     852:	d7 94       	ror	r13
     854:	c7 94       	ror	r12
     856:	ba 95       	dec	r27
     858:	d1 f7       	brne	.-12     	; 0x84e <sd_get_number_of_sectors+0x136>
     85a:	b0 2d       	mov	r27, r0
     85c:	f8 01       	movw	r30, r16
     85e:	c0 82       	st	Z, r12
     860:	d1 82       	std	Z+1, r13	; 0x01
     862:	e2 82       	std	Z+2, r14	; 0x02
     864:	f3 82       	std	Z+3, r15	; 0x03
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	df 91       	pop	r29

    return true;
     86a:	cf 91       	pop	r28
}
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	cf 90       	pop	r12
     878:	bf 90       	pop	r11
     87a:	af 90       	pop	r10
     87c:	9f 90       	pop	r9
     87e:	8f 90       	pop	r8
     880:	7f 90       	pop	r7
     882:	08 95       	ret

00000884 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
     884:	29 2f       	mov	r18, r25
     886:	33 27       	eor	r19, r19
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     888:	23 30       	cpi	r18, 0x03	; 3
     88a:	31 05       	cpc	r19, r1
     88c:	c9 f0       	breq	.+50     	; 0x8c0 <CALLBACK_USB_GetDescriptor+0x3c>
     88e:	40 f4       	brcc	.+16     	; 0x8a0 <CALLBACK_USB_GetDescriptor+0x1c>
     890:	21 30       	cpi	r18, 0x01	; 1
     892:	31 05       	cpc	r19, r1
     894:	09 f4       	brne	.+2      	; 0x898 <CALLBACK_USB_GetDescriptor+0x14>
     896:	47 c0       	rjmp	.+142    	; 0x926 <CALLBACK_USB_GetDescriptor+0xa2>
     898:	22 30       	cpi	r18, 0x02	; 2
     89a:	31 05       	cpc	r19, r1
     89c:	61 f0       	breq	.+24     	; 0x8b6 <CALLBACK_USB_GetDescriptor+0x32>
     89e:	06 c0       	rjmp	.+12     	; 0x8ac <CALLBACK_USB_GetDescriptor+0x28>
     8a0:	21 32       	cpi	r18, 0x21	; 33
     8a2:	31 05       	cpc	r19, r1
     8a4:	b1 f1       	breq	.+108    	; 0x912 <CALLBACK_USB_GetDescriptor+0x8e>
     8a6:	22 32       	cpi	r18, 0x22	; 34
     8a8:	31 05       	cpc	r19, r1
     8aa:	c1 f1       	breq	.+112    	; 0x91c <CALLBACK_USB_GetDescriptor+0x98>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	41 c0       	rjmp	.+130    	; 0x938 <CALLBACK_USB_GetDescriptor+0xb4>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
     8b6:	89 e3       	ldi	r24, 0x39	; 57
     8b8:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
     8ba:	2c ea       	ldi	r18, 0xAC	; 172
     8bc:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
     8be:	3c c0       	rjmp	.+120    	; 0x938 <CALLBACK_USB_GetDescriptor+0xb4>
        case DTYPE_String:
            if (USB_ControlRequest.wLength == 0xFF)
     8c0:	20 91 aa 08 	lds	r18, 0x08AA	; 0x8008aa <USB_ControlRequest+0x6>
     8c4:	30 91 ab 08 	lds	r19, 0x08AB	; 0x8008ab <USB_ControlRequest+0x7>
     8c8:	2f 3f       	cpi	r18, 0xFF	; 255
     8ca:	31 05       	cpc	r19, r1
     8cc:	39 f4       	brne	.+14     	; 0x8dc <CALLBACK_USB_GetDescriptor+0x58>
            {
                guess_os.maybe_linux = 1;
     8ce:	20 91 90 08 	lds	r18, 0x0890	; 0x800890 <guess_os>
                guess_os.maybe_win = 1;
                guess_os.not_mac =
     8d2:	23 60       	ori	r18, 0x03	; 3
     8d4:	20 62       	ori	r18, 0x20	; 32
     8d6:	20 93 90 08 	sts	0x0890, r18	; 0x800890 <guess_os>
     8da:	05 c0       	rjmp	.+10     	; 0x8e6 <CALLBACK_USB_GetDescriptor+0x62>
                    1; // In testing, MacOS NEVER sets a descript request lenght of 255
            }
            else
            {
                guess_os.not_linux =
     8dc:	20 91 90 08 	lds	r18, 0x0890	; 0x800890 <guess_os>
     8e0:	28 60       	ori	r18, 0x08	; 8
     8e2:	20 93 90 08 	sts	0x0890, r18	; 0x800890 <guess_os>
                    1; // In testing, Linux ALWAYS sets a descriptor request length of 255;
            }
            switch (DescriptorNumber)
     8e6:	99 27       	eor	r25, r25
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	91 05       	cpc	r25, r1
     8ec:	41 f0       	breq	.+16     	; 0x8fe <CALLBACK_USB_GetDescriptor+0x7a>
     8ee:	00 f1       	brcs	.+64     	; 0x930 <CALLBACK_USB_GetDescriptor+0xac>
     8f0:	02 97       	sbiw	r24, 0x02	; 2
     8f2:	51 f0       	breq	.+20     	; 0x908 <CALLBACK_USB_GetDescriptor+0x84>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	1d c0       	rjmp	.+58     	; 0x938 <CALLBACK_USB_GetDescriptor+0xb4>
                    Address = &LanguageString;
                    Size    = LanguageString.Header.Size;
                    break;
                case STRING_ID_Manufacturer:
                    Address = &ManufacturerString;
                    Size    = ManufacturerString.Header.Size;
     8fe:	8a e0       	ldi	r24, 0x0A	; 10
     900:	90 e0       	ldi	r25, 0x00	; 0
                case STRING_ID_Language:
                    Address = &LanguageString;
                    Size    = LanguageString.Header.Size;
                    break;
                case STRING_ID_Manufacturer:
                    Address = &ManufacturerString;
     902:	2c e9       	ldi	r18, 0x9C	; 156
     904:	32 e0       	ldi	r19, 0x02	; 2
                    Size    = ManufacturerString.Header.Size;
                    break;
     906:	18 c0       	rjmp	.+48     	; 0x938 <CALLBACK_USB_GetDescriptor+0xb4>
                case STRING_ID_Product:
                    Address = &ProductString;
                    Size    = ProductString.Header.Size;
     908:	8e e3       	ldi	r24, 0x3E	; 62
     90a:	90 e0       	ldi	r25, 0x00	; 0
                case STRING_ID_Manufacturer:
                    Address = &ManufacturerString;
                    Size    = ManufacturerString.Header.Size;
                    break;
                case STRING_ID_Product:
                    Address = &ProductString;
     90c:	2c e5       	ldi	r18, 0x5C	; 92
     90e:	32 e0       	ldi	r19, 0x02	; 2
                    Size    = ProductString.Header.Size;
                    break;
     910:	13 c0       	rjmp	.+38     	; 0x938 <CALLBACK_USB_GetDescriptor+0xb4>
            }

            break;
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_KeyboardHID;
            Size    = sizeof(USB_HID_Descriptor_HID_t);
     912:	89 e0       	ldi	r24, 0x09	; 9
     914:	90 e0       	ldi	r25, 0x00	; 0
                    break;
            }

            break;
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_KeyboardHID;
     916:	25 ed       	ldi	r18, 0xD5	; 213
     918:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_HID_Descriptor_HID_t);
            break;
     91a:	0e c0       	rjmp	.+28     	; 0x938 <CALLBACK_USB_GetDescriptor+0xb4>
        case HID_DTYPE_Report:
            Address = &KeyboardReport;
            Size    = sizeof(KeyboardReport);
     91c:	80 e4       	ldi	r24, 0x40	; 64
     91e:	90 e0       	ldi	r25, 0x00	; 0
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_KeyboardHID;
            Size    = sizeof(USB_HID_Descriptor_HID_t);
            break;
        case HID_DTYPE_Report:
            Address = &KeyboardReport;
     920:	27 ef       	ldi	r18, 0xF7	; 247
     922:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(KeyboardReport);
            break;
     924:	09 c0       	rjmp	.+18     	; 0x938 <CALLBACK_USB_GetDescriptor+0xb4>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
     926:	82 e1       	ldi	r24, 0x12	; 18
     928:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
     92a:	25 ee       	ldi	r18, 0xE5	; 229
     92c:	32 e0       	ldi	r19, 0x02	; 2
     92e:	04 c0       	rjmp	.+8      	; 0x938 <CALLBACK_USB_GetDescriptor+0xb4>
            }
            switch (DescriptorNumber)
            {
                case STRING_ID_Language:
                    Address = &LanguageString;
                    Size    = LanguageString.Header.Size;
     930:	84 e0       	ldi	r24, 0x04	; 4
     932:	90 e0       	ldi	r25, 0x00	; 0
                    1; // In testing, Linux ALWAYS sets a descriptor request length of 255;
            }
            switch (DescriptorNumber)
            {
                case STRING_ID_Language:
                    Address = &LanguageString;
     934:	28 ea       	ldi	r18, 0xA8	; 168
     936:	32 e0       	ldi	r19, 0x02	; 2
            Address = &KeyboardReport;
            Size    = sizeof(KeyboardReport);
            break;
    }

    *DescriptorAddress = Address;
     938:	fa 01       	movw	r30, r20
     93a:	31 83       	std	Z+1, r19	; 0x01
     93c:	20 83       	st	Z, r18
    return Size;
}
     93e:	08 95       	ret

00000940 <guess_host_os>:


guess_os_t guess_host_os(void)
{
    if (guess_os.not_mac && guess_os.not_linux && guess_os.maybe_win)
     940:	80 91 90 08 	lds	r24, 0x0890	; 0x800890 <guess_os>
     944:	98 2f       	mov	r25, r24
     946:	9a 72       	andi	r25, 0x2A	; 42
     948:	9a 32       	cpi	r25, 0x2A	; 42
     94a:	41 f0       	breq	.+16     	; 0x95c <guess_host_os+0x1c>
    {
        return GO_WINDOWS;
    }
    else if (guess_os.maybe_linux && !guess_os.not_linux)
     94c:	98 2f       	mov	r25, r24
     94e:	99 70       	andi	r25, 0x09	; 9
     950:	91 30       	cpi	r25, 0x01	; 1
     952:	31 f0       	breq	.+12     	; 0x960 <guess_host_os+0x20>
    {
        return GO_LINUX;
    }
    else if (!guess_os.not_mac)
     954:	85 fd       	sbrc	r24, 5
     956:	06 c0       	rjmp	.+12     	; 0x964 <guess_host_os+0x24>
    {
        return GO_MAC;
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	08 95       	ret

guess_os_t guess_host_os(void)
{
    if (guess_os.not_mac && guess_os.not_linux && guess_os.maybe_win)
    {
        return GO_WINDOWS;
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	08 95       	ret
    }
    else if (guess_os.maybe_linux && !guess_os.not_linux)
    {
        return GO_LINUX;
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	08 95       	ret
    else if (!guess_os.not_mac)
    {
        return GO_MAC;
    }

    return GO_WINDOWS;
     964:	80 e0       	ldi	r24, 0x00	; 0
}
     966:	08 95       	ret

00000968 <guess_host_os_string>:

const char* guess_host_os_string(void)
{
    switch (guess_host_os())
     968:	eb df       	rcall	.-42     	; 0x940 <guess_host_os>
     96a:	81 30       	cpi	r24, 0x01	; 1
     96c:	41 f0       	breq	.+16     	; 0x97e <guess_host_os_string+0x16>
     96e:	82 30       	cpi	r24, 0x02	; 2
     970:	19 f0       	breq	.+6      	; 0x978 <guess_host_os_string+0x10>
    {
        case GO_WINDOWS:
            return "OS_WINDOWS";
     972:	81 e4       	ldi	r24, 0x41	; 65
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	08 95       	ret
        case GO_LINUX:
            return "OS_LINUX";
            break;

        case GO_MAC:
            return "OS_MAC";
     978:	85 e5       	ldi	r24, 0x55	; 85
     97a:	92 e0       	ldi	r25, 0x02	; 2
     97c:	08 95       	ret
        case GO_WINDOWS:
            return "OS_WINDOWS";
            break;

        case GO_LINUX:
            return "OS_LINUX";
     97e:	8c e4       	ldi	r24, 0x4C	; 76
     980:	92 e0       	ldi	r25, 0x02	; 2

        default:
            return "OS_WINDOWS";
            break;
    }
     982:	08 95       	ret

00000984 <ioinit>:
{
    //MCUCR = _BV(JTD); MCUCR = _BV(JTD);   /* Disable JTAG */

    //pull up

    PORTA = 0b11111111;
     984:	8f ef       	ldi	r24, 0xFF	; 255
     986:	82 b9       	out	0x02, r24	; 2
    PORTB = 0b11111111;
     988:	85 b9       	out	0x05, r24	; 5
    PORTC = 0b11111111;
     98a:	88 b9       	out	0x08, r24	; 8
    PORTD = 0b11111111;
     98c:	8b b9       	out	0x0b, r24	; 11
    //PORTE = 0b11111111;
    PORTF = 0b11111111;
     98e:	81 bb       	out	0x11, r24	; 17
    //PORTG = 0b00011111;

    sei();
     990:	78 94       	sei
     992:	08 95       	ret

00000994 <myrand>:
    static uint8_t cur;
    //32 bit random number, from noinit sram
    static uint32_t random31 __attribute__((section(".noinit")));
    //temp storage for random number
    uint32_t temp;
    temp = random31 << 1;
     994:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <__bss_end>
     998:	90 91 b3 08 	lds	r25, 0x08B3	; 0x8008b3 <__bss_end+0x1>
     99c:	a0 91 b4 08 	lds	r26, 0x08B4	; 0x8008b4 <__bss_end+0x2>
     9a0:	b0 91 b5 08 	lds	r27, 0x08B5	; 0x8008b5 <__bss_end+0x3>
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	aa 1f       	adc	r26, r26
     9aa:	bb 1f       	adc	r27, r27
    //if bit31 set, or if init sram happens to be 0
    if ((temp & 0x80000000) || (temp == 0))
     9ac:	18 16       	cp	r1, r24
     9ae:	19 06       	cpc	r1, r25
     9b0:	1a 06       	cpc	r1, r26
     9b2:	1b 06       	cpc	r1, r27
     9b4:	44 f0       	brlt	.+16     	; 0x9c6 <myrand+0x32>
    {
        //xor magic number (taps)
        temp ^= 0x20AA95B5;
     9b6:	25 eb       	ldi	r18, 0xB5	; 181
     9b8:	82 27       	eor	r24, r18
     9ba:	25 e9       	ldi	r18, 0x95	; 149
     9bc:	92 27       	eor	r25, r18
     9be:	2a ea       	ldi	r18, 0xAA	; 170
     9c0:	a2 27       	eor	r26, r18
     9c2:	20 e2       	ldi	r18, 0x20	; 32
     9c4:	b2 27       	eor	r27, r18
    }
    //save back to random number for next time
    random31 = temp;
     9c6:	80 93 b2 08 	sts	0x08B2, r24	; 0x8008b2 <__bss_end>
     9ca:	90 93 b3 08 	sts	0x08B3, r25	; 0x8008b3 <__bss_end+0x1>
     9ce:	a0 93 b4 08 	sts	0x08B4, r26	; 0x8008b4 <__bss_end+0x2>
     9d2:	b0 93 b5 08 	sts	0x08B5, r27	; 0x8008b5 <__bss_end+0x3>
    //return lowest byte only
    return temp + cur++;
     9d6:	20 91 82 04 	lds	r18, 0x0482	; 0x800482 <cur.4463>
     9da:	31 e0       	ldi	r19, 0x01	; 1
     9dc:	32 0f       	add	r19, r18
     9de:	30 93 82 04 	sts	0x0482, r19	; 0x800482 <cur.4463>
}
     9e2:	82 0f       	add	r24, r18
     9e4:	08 95       	ret

000009e6 <lufa_hook_usb_serialnumber_randomize>:
Get-CimInstance -ClassName Win32_DiskDrive -Property *  | where{$_.Interfacetype -eq 'USB'}

*/
void lufa_hook_usb_serialnumber_randomize(uint16_t* serial_str,
        size_t nr_elements)
{
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	7c 01       	movw	r14, r24
     9f4:	8b 01       	movw	r16, r22
    /*
        hooked LUFA USB_Device_GetInternalSerialDescriptor (DeviceStandardReq.c)
    */
    static bool init;
    static uint8_t charset[0x10];
    if (!init)
     9f6:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <init.4470>
     9fa:	81 11       	cpse	r24, r1
     9fc:	1b c0       	rjmp	.+54     	; 0xa34 <lufa_hook_usb_serialnumber_randomize+0x4e>
    {
        init = true;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <init.4470>
        for (size_t i = 0; i < sizeof(charset); i++)
     a04:	c0 e0       	ldi	r28, 0x00	; 0
     a06:	d0 e0       	ldi	r29, 0x00	; 0
     a08:	12 c0       	rjmp	.+36     	; 0xa2e <lufa_hook_usb_serialnumber_randomize+0x48>
        {
            charset[i] = (myrand() % ('9' + 1 - '1')) + '1';
     a0a:	c4 df       	rcall	.-120    	; 0x994 <myrand>
     a0c:	fe 01       	movw	r30, r28
     a0e:	ef 58       	subi	r30, 0x8F	; 143
     a10:	fb 4f       	sbci	r31, 0xFB	; 251
     a12:	99 e3       	ldi	r25, 0x39	; 57
     a14:	89 9f       	mul	r24, r25
     a16:	91 2d       	mov	r25, r1
     a18:	11 24       	eor	r1, r1
     a1a:	96 95       	lsr	r25
     a1c:	29 2f       	mov	r18, r25
     a1e:	22 0f       	add	r18, r18
     a20:	22 0f       	add	r18, r18
     a22:	22 0f       	add	r18, r18
     a24:	92 0f       	add	r25, r18
     a26:	89 1b       	sub	r24, r25
     a28:	8f 5c       	subi	r24, 0xCF	; 207
     a2a:	80 83       	st	Z, r24
    static bool init;
    static uint8_t charset[0x10];
    if (!init)
    {
        init = true;
        for (size_t i = 0; i < sizeof(charset); i++)
     a2c:	21 96       	adiw	r28, 0x01	; 1
     a2e:	c0 31       	cpi	r28, 0x10	; 16
     a30:	d1 05       	cpc	r29, r1
     a32:	58 f3       	brcs	.-42     	; 0xa0a <lufa_hook_usb_serialnumber_randomize+0x24>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0f c0       	rjmp	.+30     	; 0xa58 <lufa_hook_usb_serialnumber_randomize+0x72>
        }

    }
    for (size_t i = 0; i < nr_elements; i++)
    {
        serial_str[i] = charset[i % sizeof(charset)];
     a3a:	fc 01       	movw	r30, r24
     a3c:	ee 0f       	add	r30, r30
     a3e:	ff 1f       	adc	r31, r31
     a40:	ee 0d       	add	r30, r14
     a42:	ff 1d       	adc	r31, r15
     a44:	dc 01       	movw	r26, r24
     a46:	af 70       	andi	r26, 0x0F	; 15
     a48:	bb 27       	eor	r27, r27
     a4a:	af 58       	subi	r26, 0x8F	; 143
     a4c:	bb 4f       	sbci	r27, 0xFB	; 251
     a4e:	2c 91       	ld	r18, X
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	31 83       	std	Z+1, r19	; 0x01
     a54:	20 83       	st	Z, r18
        {
            charset[i] = (myrand() % ('9' + 1 - '1')) + '1';
        }

    }
    for (size_t i = 0; i < nr_elements; i++)
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	80 17       	cp	r24, r16
     a5a:	91 07       	cpc	r25, r17
     a5c:	70 f3       	brcs	.-36     	; 0xa3a <lufa_hook_usb_serialnumber_randomize+0x54>
    {
        serial_str[i] = charset[i % sizeof(charset)];
    }
}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	08 95       	ret

00000a6c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     a6c:	84 b7       	in	r24, 0x34	; 52
     a6e:	87 7f       	andi	r24, 0xF7	; 247
     a70:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	a8 95       	wdr
     a78:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a7c:	88 61       	ori	r24, 0x18	; 24
     a7e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a82:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a86:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	80 e8       	ldi	r24, 0x80	; 128
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     a94:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     a98:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);

    /* Hardware Initialization */
    ioinit();
     a9a:	74 df       	rcall	.-280    	; 0x984 <ioinit>
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     a9c:	87 e6       	ldi	r24, 0x67	; 103
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     aa4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     aa8:	86 e0       	ldi	r24, 0x06	; 6
     aaa:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     aae:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     ab2:	88 e1       	ldi	r24, 0x18	; 24
     ab4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     ab8:	8a b1       	in	r24, 0x0a	; 10
     aba:	88 60       	ori	r24, 0x08	; 8
     abc:	8a b9       	out	0x0a, r24	; 10
				PORTD |= (1 << 2);
     abe:	8b b1       	in	r24, 0x0b	; 11
     ac0:	84 60       	ori	r24, 0x04	; 4
     ac2:	8b b9       	out	0x0b, r24	; 11

    Serial_Init(9600, false);
    Serial_SendString("\r\n\r\nSetup mass storage sd and keyboard by David Reguera Garcia aka Dreg - MIT License\r\ndreg@fr33project.org\r\nhttps://github.com/therealdreg\r\n");
     ac4:	87 e3       	ldi	r24, 0x37	; 55
     ac6:	93 e0       	ldi	r25, 0x03	; 3
     ac8:	0f d5       	rcall	.+2590   	; 0x14e8 <Serial_SendString>
    Serial_CreateStream(NULL);
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	19 d5       	rcall	.+2610   	; 0x1502 <Serial_CreateStream>
    printf("https://www.rootkit.es\r\n");
     ad0:	85 ec       	ldi	r24, 0xC5	; 197
     ad2:	93 e0       	ldi	r25, 0x03	; 3
     ad4:	0e 94 cb 14 	call	0x2996	; 0x2996 <puts>
    printf_P(PSTR("https://www.fr33project.org\r\npowered by LUFA\r\n\r\n"));
     ad8:	87 eb       	ldi	r24, 0xB7	; 183
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	9f 93       	push	r25
     ade:	8f 93       	push	r24

    on_sd();
     ae0:	0e 94 a4 14 	call	0x2948	; 0x2948 <printf_P>

    sdcard_Init();
     ae4:	41 db       	rcall	.-2430   	; 0x168 <on_sd>
     ae6:	6a d3       	rcall	.+1748   	; 0x11bc <sdcard_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     ae8:	8a b1       	in	r24, 0x0a	; 10
     aea:	80 6c       	ori	r24, 0xC0	; 192
     aec:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     aee:	8b b1       	in	r24, 0x0b	; 11
     af0:	8f 73       	andi	r24, 0x3F	; 63
     af2:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRD  &= ~BUTTONS_BUTTON1;
     af4:	8a b1       	in	r24, 0x0a	; 10
     af6:	8f 7d       	andi	r24, 0xDF	; 223
     af8:	8a b9       	out	0x0a, r24	; 10
				PORTD |=  BUTTONS_BUTTON1;
     afa:	8b b1       	in	r24, 0x0b	; 11
     afc:	80 62       	ori	r24, 0x20	; 32
     afe:	8b b9       	out	0x0b, r24	; 11
                
                DDRE  &= ~BUTTONS_BUTTON2;
     b00:	8d b1       	in	r24, 0x0d	; 13
     b02:	8b 7f       	andi	r24, 0xFB	; 251
     b04:	8d b9       	out	0x0d, r24	; 13
                PORTE |=  BUTTONS_BUTTON2;
     b06:	8e b1       	in	r24, 0x0e	; 14
     b08:	84 60       	ori	r24, 0x04	; 4
     b0a:	8e b9       	out	0x0e, r24	; 14

    LEDs_Init();

    Buttons_Init();

    USB_Init();
     b0c:	0e 94 36 11 	call	0x226c	; 0x226c <USB_Init>
}
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	08 95       	ret

00000b16 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    SetupHardware();
     b16:	aa df       	rcall	.-172    	; 0xa6c <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     b18:	8b b1       	in	r24, 0x0b	; 11
     b1a:	8f 73       	andi	r24, 0x3F	; 63
     b1c:	80 64       	ori	r24, 0x40	; 64
     b1e:	8b b9       	out	0x0b, r24	; 11
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     b20:	78 94       	sei

    GlobalInterruptEnable();

    for (;;)
    {
        MS_Device_USBTask(&Disk_MS_Interface);
     b22:	8f e3       	ldi	r24, 0x3F	; 63
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <MS_Device_USBTask>
        HID_Device_USBTask(&Keyboard_HID_Interface);
     b2a:	8f e2       	ldi	r24, 0x2F	; 47
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	6e d6       	rcall	.+3292   	; 0x180c <HID_Device_USBTask>
        USB_USBTask();
     b30:	0e 94 39 14 	call	0x2872	; 0x2872 <USB_USBTask>
     b34:	f6 cf       	rjmp	.-20     	; 0xb22 <main+0xc>

00000b36 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    printf_P(PSTR("Connect\r\n"));
     b36:	8d ea       	ldi	r24, 0xAD	; 173
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	9f 93       	push	r25
     b3c:	8f 93       	push	r24
     b3e:	0e 94 a4 14 	call	0x2948	; 0x2948 <printf_P>
     b42:	8b b1       	in	r24, 0x0b	; 11
     b44:	8f 73       	andi	r24, 0x3F	; 63
     b46:	80 68       	ori	r24, 0x80	; 128
     b48:	8b b9       	out	0x0b, r24	; 11

    LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	08 95       	ret

00000b50 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    printf_P(PSTR("Disconnect\r\n"));
     b50:	80 ea       	ldi	r24, 0xA0	; 160
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	9f 93       	push	r25
     b56:	8f 93       	push	r24
     b58:	0e 94 a4 14 	call	0x2948	; 0x2948 <printf_P>
     b5c:	8b b1       	in	r24, 0x0b	; 11
     b5e:	8f 73       	andi	r24, 0x3F	; 63
     b60:	80 64       	ori	r24, 0x40	; 64
     b62:	8b b9       	out	0x0b, r24	; 11
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	08 95       	ret

00000b6a <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     b6a:	cf 93       	push	r28
    bool ConfigSuccess = true;

    printf_P(PSTR("Ready\r\n"));
     b6c:	88 e9       	ldi	r24, 0x98	; 152
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	9f 93       	push	r25
     b72:	8f 93       	push	r24
     b74:	0e 94 a4 14 	call	0x2948	; 0x2948 <printf_P>

    ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     b78:	8f e2       	ldi	r24, 0x2F	; 47
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	33 d6       	rcall	.+3174   	; 0x17e4 <HID_Device_ConfigureEndpoints>
     b7e:	c8 2f       	mov	r28, r24
    ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     b80:	8f e3       	ldi	r24, 0x3F	; 63
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	f2 d7       	rcall	.+4068   	; 0x1b6a <MS_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     b86:	e2 ee       	ldi	r30, 0xE2	; 226
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	90 81       	ld	r25, Z
     b8c:	94 60       	ori	r25, 0x04	; 4
     b8e:	90 83       	st	Z, r25

    USB_Device_EnableSOFEvents();

    LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	cc 23       	and	r28, r28
     b96:	21 f0       	breq	.+8      	; 0xba0 <EVENT_USB_Device_ConfigurationChanged+0x36>
     b98:	88 23       	and	r24, r24
     b9a:	11 f0       	breq	.+4      	; 0xba0 <EVENT_USB_Device_ConfigurationChanged+0x36>
     b9c:	90 ec       	ldi	r25, 0xC0	; 192
     b9e:	01 c0       	rjmp	.+2      	; 0xba2 <EVENT_USB_Device_ConfigurationChanged+0x38>
     ba0:	90 e4       	ldi	r25, 0x40	; 64
     ba2:	8b b1       	in	r24, 0x0b	; 11
     ba4:	8f 73       	andi	r24, 0x3F	; 63
     ba6:	89 2b       	or	r24, r25
     ba8:	8b b9       	out	0x0b, r24	; 11
}
     baa:	cf 91       	pop	r28
     bac:	08 95       	ret

00000bae <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
    MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     bae:	8f e3       	ldi	r24, 0x3F	; 63
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	9d d7       	rcall	.+3898   	; 0x1aee <MS_Device_ProcessControlRequest>
    HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     bb4:	8f e2       	ldi	r24, 0x2F	; 47
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	c0 c4       	rjmp	.+2432   	; 0x153a <HID_Device_ProcessControlRequest>
     bba:	08 95       	ret

00000bbc <CALLBACK_MS_Device_SCSICommandReceived>:
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const
        MSInterfaceInfo)
{
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	ec 01       	movw	r28, r24
    bool CommandSuccess;
    static bool show_os = false;

    if (!show_os)
     bc2:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <show_os.4755>
     bc6:	81 11       	cpse	r24, r1
     bc8:	10 c0       	rjmp	.+32     	; 0xbea <CALLBACK_MS_Device_SCSICommandReceived+0x2e>
    {
        show_os = true;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <show_os.4755>
        printf("\r\nguess_host_os: %s\r\n", guess_host_os_string());
     bd0:	cb de       	rcall	.-618    	; 0x968 <guess_host_os_string>
     bd2:	9f 93       	push	r25
     bd4:	8f 93       	push	r24
     bd6:	8d ed       	ldi	r24, 0xDD	; 221
     bd8:	93 e0       	ldi	r25, 0x03	; 3
     bda:	9f 93       	push	r25
     bdc:	8f 93       	push	r24
     bde:	0e 94 91 14 	call	0x2922	; 0x2922 <printf>
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
    }


    if (!last_led)
     bea:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <last_led>
     bee:	81 11       	cpse	r24, r1
     bf0:	04 c0       	rjmp	.+8      	; 0xbfa <CALLBACK_MS_Device_SCSICommandReceived+0x3e>
     bf2:	8b b1       	in	r24, 0x0b	; 11
     bf4:	8f 73       	andi	r24, 0x3F	; 63
     bf6:	80 68       	ori	r24, 0x80	; 128
     bf8:	8b b9       	out	0x0b, r24	; 11
    {
        LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
    }

    CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     bfa:	ce 01       	movw	r24, r28
     bfc:	46 d2       	rcall	.+1164   	; 0x108a <SCSI_DecodeSCSICommand>

    if (!last_led)
     bfe:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <last_led>
     c02:	91 11       	cpse	r25, r1
     c04:	03 c0       	rjmp	.+6      	; 0xc0c <CALLBACK_MS_Device_SCSICommandReceived+0x50>
     c06:	9b b1       	in	r25, 0x0b	; 11
     c08:	90 6c       	ori	r25, 0xC0	; 192
     c0a:	9b b9       	out	0x0b, r25	; 11
    {
        LEDs_SetAllLEDs(LEDMASK_USB_READY);
    }

    return CommandSuccess;
}
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     c12:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <Keyboard_HID_Interface+0xe>
     c16:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <Keyboard_HID_Interface+0xf>
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	29 f0       	breq	.+10     	; 0xc28 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <Keyboard_HID_Interface+0xf>
     c24:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Keyboard_HID_Interface+0xe>
     c28:	08 95       	ret

00000c2a <CALLBACK_HID_Device_CreateHIDReport>:
        HIDInterfaceInfo,
        uint8_t* const ReportID,
        const uint8_t ReportType,
        void* ReportData,
        uint16_t* const ReportSize)
{
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	e9 01       	movw	r28, r18
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return (((PIND & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1) | ((PINE & BUTTONS_BUTTON2) ^ BUTTONS_BUTTON2));
     c34:	49 b1       	in	r20, 0x09	; 9
     c36:	8c b1       	in	r24, 0x0c	; 12
     c38:	40 95       	com	r20
     c3a:	40 72       	andi	r20, 0x20	; 32
     c3c:	80 95       	com	r24
     c3e:	84 70       	andi	r24, 0x04	; 4
     c40:	48 2b       	or	r20, r24
    static uint16_t i = 0;
    uint8_t ButtonStatus_LCL = Buttons_GetStatus();



    i++;
     c42:	e0 91 6e 04 	lds	r30, 0x046E	; 0x80046e <i.4772>
     c46:	f0 91 6f 04 	lds	r31, 0x046F	; 0x80046f <i.4772+0x1>
     c4a:	31 96       	adiw	r30, 0x01	; 1
     c4c:	f0 93 6f 04 	sts	0x046F, r31	; 0x80046f <i.4772+0x1>
     c50:	e0 93 6e 04 	sts	0x046E, r30	; 0x80046e <i.4772>
    if (i % 0x8F == 0)
     c54:	9f 01       	movw	r18, r30
     c56:	a3 e9       	ldi	r26, 0x93	; 147
     c58:	b2 e7       	ldi	r27, 0x72	; 114
     c5a:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__umulhisi3>
     c5e:	00 24       	eor	r0, r0
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	00 1c       	adc	r0, r0
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	00 1c       	adc	r0, r0
     c6c:	89 2f       	mov	r24, r25
     c6e:	90 2d       	mov	r25, r0
     c70:	5f e8       	ldi	r21, 0x8F	; 143
     c72:	58 9f       	mul	r21, r24
     c74:	90 01       	movw	r18, r0
     c76:	59 9f       	mul	r21, r25
     c78:	30 0d       	add	r19, r0
     c7a:	11 24       	eor	r1, r1
     c7c:	e2 17       	cp	r30, r18
     c7e:	f3 07       	cpc	r31, r19
     c80:	21 f4       	brne	.+8      	; 0xc8a <CALLBACK_HID_Device_CreateHIDReport+0x60>
    {
        i = 0;
     c82:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <i.4772+0x1>
     c86:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <i.4772>
    }


    if (last_shift)
     c8a:	80 91 6d 04 	lds	r24, 0x046D	; 0x80046d <last_shift.4767>
     c8e:	88 23       	and	r24, r24
     c90:	19 f0       	breq	.+6      	; 0xc98 <CALLBACK_HID_Device_CreateHIDReport+0x6e>
    {
        KeyboardReport->Modifier = 0;
     c92:	18 82       	st	Y, r1
        last_shift = false;
     c94:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <last_shift.4767>
     c98:	84 2f       	mov	r24, r20
     c9a:	80 72       	andi	r24, 0x20	; 32
    }

    if ((ButtonStatus_LCL & BUTTONS_BUTTON1)
     c9c:	89 f1       	breq	.+98     	; 0xd00 <CALLBACK_HID_Device_CreateHIDReport+0xd6>
            && (ButtonStatus_LCL & BUTTONS_BUTTON2))
     c9e:	42 ff       	sbrs	r20, 2
     ca0:	2f c0       	rjmp	.+94     	; 0xd00 <CALLBACK_HID_Device_CreateHIDReport+0xd6>
    {
        KeyboardReport->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	88 83       	st	Y, r24
        KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_D;
     ca6:	87 e0       	ldi	r24, 0x07	; 7
     ca8:	8a 83       	std	Y+2, r24	; 0x02
        last_shift = true;
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <last_shift.4767>
     cb0:	8b b1       	in	r24, 0x0b	; 11
     cb2:	80 6c       	ori	r24, 0xC0	; 192
     cb4:	8b b9       	out	0x0b, r24	; 11
        LEDs_SetAllLEDs(LEDS_LED1 | LEDS_LED2);
        last_led = true;
     cb6:	90 93 8b 04 	sts	0x048B, r25	; 0x80048b <last_led>

        switch (guess_host_os())
     cba:	42 de       	rcall	.-892    	; 0x940 <guess_host_os>
     cbc:	81 30       	cpi	r24, 0x01	; 1
     cbe:	59 f0       	breq	.+22     	; 0xcd6 <CALLBACK_HID_Device_CreateHIDReport+0xac>
     cc0:	18 f0       	brcs	.+6      	; 0xcc8 <CALLBACK_HID_Device_CreateHIDReport+0x9e>
     cc2:	82 30       	cpi	r24, 0x02	; 2
     cc4:	79 f0       	breq	.+30     	; 0xce4 <CALLBACK_HID_Device_CreateHIDReport+0xba>
     cc6:	15 c0       	rjmp	.+42     	; 0xcf2 <CALLBACK_HID_Device_CreateHIDReport+0xc8>
        {
            case GO_WINDOWS:
                str_to_print = OS_WIN;
     cc8:	8c e1       	ldi	r24, 0x1C	; 28
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <str_to_print.4768+0x1>
     cd0:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <str_to_print.4768>
                break;
     cd4:	4e c0       	rjmp	.+156    	; 0xd72 <CALLBACK_HID_Device_CreateHIDReport+0x148>

            case GO_LINUX:
                str_to_print = OS_LIN;
     cd6:	8d e0       	ldi	r24, 0x0D	; 13
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <str_to_print.4768+0x1>
     cde:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <str_to_print.4768>
                break;
     ce2:	47 c0       	rjmp	.+142    	; 0xd72 <CALLBACK_HID_Device_CreateHIDReport+0x148>

            case GO_MAC:
                str_to_print = OS_MAC;
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <str_to_print.4768+0x1>
     cec:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <str_to_print.4768>
                break;
     cf0:	40 c0       	rjmp	.+128    	; 0xd72 <CALLBACK_HID_Device_CreateHIDReport+0x148>

            default:
                str_to_print = OS_WIN;
     cf2:	8c e1       	ldi	r24, 0x1C	; 28
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <str_to_print.4768+0x1>
     cfa:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <str_to_print.4768>
                break;
     cfe:	39 c0       	rjmp	.+114    	; 0xd72 <CALLBACK_HID_Device_CreateHIDReport+0x148>
        }
    }
    else if (ButtonStatus_LCL & BUTTONS_BUTTON2)
     d00:	42 ff       	sbrs	r20, 2
     d02:	0a c0       	rjmp	.+20     	; 0xd18 <CALLBACK_HID_Device_CreateHIDReport+0xee>
    {
        KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_R;
     d04:	85 e1       	ldi	r24, 0x15	; 21
     d06:	8a 83       	std	Y+2, r24	; 0x02
     d08:	8b b1       	in	r24, 0x0b	; 11
     d0a:	8f 73       	andi	r24, 0x3F	; 63
     d0c:	80 64       	ori	r24, 0x40	; 64
     d0e:	8b b9       	out	0x0b, r24	; 11
        LEDs_SetAllLEDs(LEDS_LED1);
        last_led = true;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <last_led>
     d16:	2d c0       	rjmp	.+90     	; 0xd72 <CALLBACK_HID_Device_CreateHIDReport+0x148>
    }
    else if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     d18:	88 23       	and	r24, r24
     d1a:	51 f0       	breq	.+20     	; 0xd30 <CALLBACK_HID_Device_CreateHIDReport+0x106>
    {
        KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_G;
     d1c:	8a e0       	ldi	r24, 0x0A	; 10
     d1e:	8a 83       	std	Y+2, r24	; 0x02
     d20:	8b b1       	in	r24, 0x0b	; 11
     d22:	8f 73       	andi	r24, 0x3F	; 63
     d24:	80 68       	ori	r24, 0x80	; 128
     d26:	8b b9       	out	0x0b, r24	; 11
        LEDs_SetAllLEDs(LEDS_LED2);
        last_led = true;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	80 93 8b 04 	sts	0x048B, r24	; 0x80048b <last_led>
     d2e:	21 c0       	rjmp	.+66     	; 0xd72 <CALLBACK_HID_Device_CreateHIDReport+0x148>
    }
    else
    {
        if (last_led)
     d30:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <last_led>
     d34:	88 23       	and	r24, r24
     d36:	29 f0       	breq	.+10     	; 0xd42 <CALLBACK_HID_Device_CreateHIDReport+0x118>
        {
            last_led = false;
     d38:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <last_led>
     d3c:	8b b1       	in	r24, 0x0b	; 11
     d3e:	8f 73       	andi	r24, 0x3F	; 63
     d40:	8b b9       	out	0x0b, r24	; 11
            LEDs_SetAllLEDs(LEDS_NO_LEDS);
        }
        if (*str_to_print == '\0')
     d42:	e0 91 6b 04 	lds	r30, 0x046B	; 0x80046b <str_to_print.4768>
     d46:	f0 91 6c 04 	lds	r31, 0x046C	; 0x80046c <str_to_print.4768+0x1>
     d4a:	80 81       	ld	r24, Z
     d4c:	81 11       	cpse	r24, r1
     d4e:	05 c0       	rjmp	.+10     	; 0xd5a <CALLBACK_HID_Device_CreateHIDReport+0x130>
        {
            str_to_print = NULL;
     d50:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <str_to_print.4768+0x1>
     d54:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <str_to_print.4768>
     d58:	0c c0       	rjmp	.+24     	; 0xd72 <CALLBACK_HID_Device_CreateHIDReport+0x148>
        }
        else
        {
            if (i == 0)
     d5a:	20 91 6e 04 	lds	r18, 0x046E	; 0x80046e <i.4772>
     d5e:	30 91 6f 04 	lds	r19, 0x046F	; 0x80046f <i.4772+0x1>
     d62:	23 2b       	or	r18, r19
     d64:	31 f4       	brne	.+12     	; 0xd72 <CALLBACK_HID_Device_CreateHIDReport+0x148>
            {
                KeyboardReport->KeyCode[0] = *str_to_print;
     d66:	8a 83       	std	Y+2, r24	; 0x02
                str_to_print++;
     d68:	31 96       	adiw	r30, 0x01	; 1
     d6a:	f0 93 6c 04 	sts	0x046C, r31	; 0x80046c <str_to_print.4768+0x1>
     d6e:	e0 93 6b 04 	sts	0x046B, r30	; 0x80046b <str_to_print.4768>
            }
        }
    }

    *ReportSize = sizeof(USB_KeyboardReport_Data_t);
     d72:	88 e0       	ldi	r24, 0x08	; 8
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	f8 01       	movw	r30, r16
     d78:	91 83       	std	Z+1, r25	; 0x01
     d7a:	80 83       	st	Z, r24
    return false;
}
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	08 95       	ret

00000d88 <CALLBACK_HID_Device_ProcessHIDReport>:
        const uint16_t ReportSize)
{
    uint8_t  LEDMask   = LEDS_NO_LEDS;
    uint8_t* LEDReport = (uint8_t*)ReportData;

    if (last_led)
     d88:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <last_led>
     d8c:	81 11       	cpse	r24, r1
     d8e:	0c c0       	rjmp	.+24     	; 0xda8 <CALLBACK_HID_Device_ProcessHIDReport+0x20>
    {
        return;
    }

    if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     d90:	f9 01       	movw	r30, r18
     d92:	90 81       	ld	r25, Z
     d94:	90 fd       	sbrc	r25, 0
    {
        LEDMask |= LEDS_LED1;
     d96:	80 e4       	ldi	r24, 0x40	; 64
    }

    if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     d98:	91 fd       	sbrc	r25, 1
    {
        LEDMask |= LEDS_LED2;
     d9a:	80 68       	ori	r24, 0x80	; 128
    }

    if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     d9c:	92 fd       	sbrc	r25, 2
    {
        LEDMask |= LEDS_LED1 | LEDS_LED2;
     d9e:	80 6c       	ori	r24, 0xC0	; 192
     da0:	9b b1       	in	r25, 0x0b	; 11
     da2:	9f 73       	andi	r25, 0x3F	; 63
     da4:	89 2b       	or	r24, r25
     da6:	8b b9       	out	0x0b, r24	; 11
     da8:	08 95       	ret

00000daa <SCSI_Command_ModeSense_6>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ModeSense_6(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     daa:	dc 01       	movw	r26, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dac:	e1 ef       	ldi	r30, 0xF1	; 241
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	10 82       	st	Z, r1
     db2:	10 82       	st	Z, r1
     db4:	10 82       	st	Z, r1
     db6:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     db8:	e8 ee       	ldi	r30, 0xE8	; 232
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	90 81       	ld	r25, Z
     dbe:	9e 77       	andi	r25, 0x7E	; 126
     dc0:	90 83       	st	Z, r25
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     dc2:	54 96       	adiw	r26, 0x14	; 20
     dc4:	4d 91       	ld	r20, X+
     dc6:	5d 91       	ld	r21, X+
     dc8:	6d 91       	ld	r22, X+
     dca:	7c 91       	ld	r23, X
     dcc:	57 97       	sbiw	r26, 0x17	; 23
     dce:	44 50       	subi	r20, 0x04	; 4
     dd0:	51 09       	sbc	r21, r1
     dd2:	61 09       	sbc	r22, r1
     dd4:	71 09       	sbc	r23, r1
     dd6:	54 96       	adiw	r26, 0x14	; 20
     dd8:	4d 93       	st	X+, r20
     dda:	5d 93       	st	X+, r21
     ddc:	6d 93       	st	X+, r22
     dde:	7c 93       	st	X, r23
     de0:	57 97       	sbiw	r26, 0x17	; 23

	return true;
}
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	08 95       	ret

00000de6 <SCSI_Command_Request_Sense>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	8c 01       	movw	r16, r24
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     df4:	fc 01       	movw	r30, r24
     df6:	c7 8d       	ldd	r28, Z+31	; 0x1f
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     df8:	dc 2f       	mov	r29, r28
     dfa:	c3 31       	cpi	r28, 0x13	; 19
     dfc:	08 f0       	brcs	.+2      	; 0xe00 <SCSI_Command_Request_Sense+0x1a>
     dfe:	d2 e1       	ldi	r29, 0x12	; 18

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     e00:	ed 2e       	mov	r14, r29
     e02:	f1 2c       	mov	r15, r1
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	b7 01       	movw	r22, r14
     e0a:	88 e7       	ldi	r24, 0x78	; 120
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	82 d7       	rcall	.+3844   	; 0x1d14 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     e10:	8c 2f       	mov	r24, r28
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	8e 19       	sub	r24, r14
     e1a:	9f 09       	sbc	r25, r15
     e1c:	3d d7       	rcall	.+3706   	; 0x1c98 <Endpoint_Null_Stream>
     e1e:	e8 ee       	ldi	r30, 0xE8	; 232
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	8e 77       	andi	r24, 0x7E	; 126
     e26:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     e28:	f8 01       	movw	r30, r16
     e2a:	84 89       	ldd	r24, Z+20	; 0x14
     e2c:	95 89       	ldd	r25, Z+21	; 0x15
     e2e:	a6 89       	ldd	r26, Z+22	; 0x16
     e30:	b7 89       	ldd	r27, Z+23	; 0x17
     e32:	8d 1b       	sub	r24, r29
     e34:	91 09       	sbc	r25, r1
     e36:	a1 09       	sbc	r26, r1
     e38:	b1 09       	sbc	r27, r1
     e3a:	84 8b       	std	Z+20, r24	; 0x14
     e3c:	95 8b       	std	Z+21, r25	; 0x15
     e3e:	a6 8b       	std	Z+22, r26	; 0x16
     e40:	b7 8b       	std	Z+23, r27	; 0x17

	return true;
}
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	08 95       	ret

00000e52 <SCSI_Command_Inquiry>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	fc 01       	movw	r30, r24
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
     e60:	86 8d       	ldd	r24, Z+30	; 0x1e
     e62:	97 8d       	ldd	r25, Z+31	; 0x1f

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     e64:	09 2f       	mov	r16, r25
     e66:	18 2f       	mov	r17, r24
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     e68:	78 01       	movw	r14, r16
     e6a:	05 32       	cpi	r16, 0x25	; 37
     e6c:	11 05       	cpc	r17, r1
     e6e:	28 f0       	brcs	.+10     	; 0xe7a <SCSI_Command_Inquiry+0x28>
     e70:	0f 2e       	mov	r0, r31
     e72:	f4 e2       	ldi	r31, 0x24	; 36
     e74:	ef 2e       	mov	r14, r31
     e76:	f1 2c       	mov	r15, r1
     e78:	f0 2d       	mov	r31, r0

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     e7a:	84 8d       	ldd	r24, Z+28	; 0x1c
     e7c:	83 70       	andi	r24, 0x03	; 3
     e7e:	19 f4       	brne	.+6      	; 0xe86 <SCSI_Command_Inquiry+0x34>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
     e80:	85 8d       	ldd	r24, Z+29	; 0x1d
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     e82:	88 23       	and	r24, r24
     e84:	69 f0       	breq	.+26     	; 0xea0 <SCSI_Command_Inquiry+0x4e>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     e86:	ea e7       	ldi	r30, 0x7A	; 122
     e88:	f1 e0       	ldi	r31, 0x01	; 1
     e8a:	80 81       	ld	r24, Z
     e8c:	80 7f       	andi	r24, 0xF0	; 240
     e8e:	85 60       	ori	r24, 0x05	; 5
     e90:	80 83       	st	Z, r24
     e92:	e8 e7       	ldi	r30, 0x78	; 120
     e94:	f1 e0       	ldi	r31, 0x01	; 1
     e96:	84 e2       	ldi	r24, 0x24	; 36
     e98:	84 87       	std	Z+12, r24	; 0x0c
     e9a:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_INVALID_FIELD_IN_CDB,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	1f c0       	rjmp	.+62     	; 0xede <SCSI_Command_Inquiry+0x8c>
     ea0:	ef 01       	movw	r28, r30
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	b7 01       	movw	r22, r14
     ea8:	83 ef       	ldi	r24, 0xF3	; 243
     eaa:	93 e0       	ldi	r25, 0x03	; 3
     eac:	33 d7       	rcall	.+3686   	; 0x1d14 <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	c8 01       	movw	r24, r16
     eb4:	8e 19       	sub	r24, r14
     eb6:	9f 09       	sbc	r25, r15
     eb8:	ef d6       	rcall	.+3550   	; 0x1c98 <Endpoint_Null_Stream>
     eba:	e8 ee       	ldi	r30, 0xE8	; 232
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	8e 77       	andi	r24, 0x7E	; 126
     ec2:	80 83       	st	Z, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     ec4:	8c 89       	ldd	r24, Y+20	; 0x14
     ec6:	9d 89       	ldd	r25, Y+21	; 0x15
     ec8:	ae 89       	ldd	r26, Y+22	; 0x16
     eca:	bf 89       	ldd	r27, Y+23	; 0x17
     ecc:	8e 19       	sub	r24, r14
     ece:	9f 09       	sbc	r25, r15
     ed0:	a1 09       	sbc	r26, r1
     ed2:	b1 09       	sbc	r27, r1
     ed4:	8c 8b       	std	Y+20, r24	; 0x14
     ed6:	9d 8b       	std	Y+21, r25	; 0x15
     ed8:	ae 8b       	std	Y+22, r26	; 0x16
     eda:	bf 8b       	std	Y+23, r27	; 0x17

	return true;
     edc:	81 e0       	ldi	r24, 0x01	; 1
}
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	08 95       	ret

00000eec <SCSI_Command_Read_Capacity_10>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	28 97       	sbiw	r28, 0x08	; 8
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	8c 01       	movw	r16, r24
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     f06:	18 d1       	rcall	.+560    	; 0x1138 <sdcard_GetNbBlocks>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	a1 09       	sbc	r26, r1
     f10:	b1 09       	sbc	r27, r1
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	ab 83       	std	Y+3, r26	; 0x03
     f18:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	92 e0       	ldi	r25, 0x02	; 2
     f1e:	a0 e0       	ldi	r26, 0x00	; 0
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	8d 83       	std	Y+5, r24	; 0x05
     f24:	9e 83       	std	Y+6, r25	; 0x06
     f26:	af 83       	std	Y+7, r26	; 0x07
     f28:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	64 e0       	ldi	r22, 0x04	; 4
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	ce 01       	movw	r24, r28
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	37 d7       	rcall	.+3694   	; 0x1da6 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     f38:	40 e0       	ldi	r20, 0x00	; 0
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	64 e0       	ldi	r22, 0x04	; 4
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	ce 01       	movw	r24, r28
     f42:	05 96       	adiw	r24, 0x05	; 5
     f44:	30 d7       	rcall	.+3680   	; 0x1da6 <Endpoint_Write_Stream_BE>
     f46:	e8 ee       	ldi	r30, 0xE8	; 232
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8e 77       	andi	r24, 0x7E	; 126
     f4e:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     f50:	f8 01       	movw	r30, r16
     f52:	84 89       	ldd	r24, Z+20	; 0x14
     f54:	95 89       	ldd	r25, Z+21	; 0x15
     f56:	a6 89       	ldd	r26, Z+22	; 0x16
     f58:	b7 89       	ldd	r27, Z+23	; 0x17
     f5a:	08 97       	sbiw	r24, 0x08	; 8
     f5c:	a1 09       	sbc	r26, r1
     f5e:	b1 09       	sbc	r27, r1
     f60:	84 8b       	std	Z+20, r24	; 0x14
     f62:	95 8b       	std	Z+21, r25	; 0x15
     f64:	a6 8b       	std	Z+22, r26	; 0x16
     f66:	b7 8b       	std	Z+23, r27	; 0x17

	return true;
}
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	28 96       	adiw	r28, 0x08	; 8
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	08 95       	ret

00000f80 <SCSI_Command_Send_Diagnostic>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     f84:	fc 01       	movw	r30, r24
     f86:	24 8d       	ldd	r18, Z+28	; 0x1c
     f88:	22 fd       	sbrc	r18, 2
     f8a:	0d c0       	rjmp	.+26     	; 0xfa6 <SCSI_Command_Send_Diagnostic+0x26>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     f8c:	ea e7       	ldi	r30, 0x7A	; 122
     f8e:	f1 e0       	ldi	r31, 0x01	; 1
     f90:	80 81       	ld	r24, Z
     f92:	80 7f       	andi	r24, 0xF0	; 240
     f94:	85 60       	ori	r24, 0x05	; 5
     f96:	80 83       	st	Z, r24
     f98:	e8 e7       	ldi	r30, 0x78	; 120
     f9a:	f1 e0       	ldi	r31, 0x01	; 1
     f9c:	84 e2       	ldi	r24, 0x24	; 36
     f9e:	84 87       	std	Z+12, r24	; 0x0c
     fa0:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_INVALID_FIELD_IN_CDB,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	13 c0       	rjmp	.+38     	; 0xfcc <SCSI_Command_Send_Diagnostic+0x4c>
     fa6:	ec 01       	movw	r28, r24
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(sdcard_CheckDataflashOperation()))
     fa8:	82 d2       	rcall	.+1284   	; 0x14ae <sdcard_CheckDataflashOperation>
     faa:	81 11       	cpse	r24, r1
     fac:	0b c0       	rjmp	.+22     	; 0xfc4 <SCSI_Command_Send_Diagnostic+0x44>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     fae:	ea e7       	ldi	r30, 0x7A	; 122
     fb0:	f1 e0       	ldi	r31, 0x01	; 1
     fb2:	90 81       	ld	r25, Z
     fb4:	90 7f       	andi	r25, 0xF0	; 240
     fb6:	94 60       	ori	r25, 0x04	; 4
     fb8:	90 83       	st	Z, r25
     fba:	e8 e7       	ldi	r30, 0x78	; 120
     fbc:	f1 e0       	ldi	r31, 0x01	; 1
     fbe:	14 86       	std	Z+12, r1	; 0x0c
     fc0:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     fc2:	04 c0       	rjmp	.+8      	; 0xfcc <SCSI_Command_Send_Diagnostic+0x4c>
	}

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     fc4:	1c 8a       	std	Y+20, r1	; 0x14
     fc6:	1d 8a       	std	Y+21, r1	; 0x15
     fc8:	1e 8a       	std	Y+22, r1	; 0x16
     fca:	1f 8a       	std	Y+23, r1	; 0x17

	return true;
}
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     fd2:	bf 92       	push	r11
     fd4:	cf 92       	push	r12
     fd6:	df 92       	push	r13
     fd8:	ef 92       	push	r14
     fda:	ff 92       	push	r15
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	ec 01       	movw	r28, r24
     fe6:	b6 2e       	mov	r11, r22

		return false;
	}

	/* Load in the 32-bit block address (SCSI uses big-endian, so have to reverse the byte order) */
	BlockAddress = SwapEndian_32(*(uint32_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[2]);
     fe8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fea:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fec:	2f 8d       	ldd	r18, Y+31	; 0x1f
     fee:	38 a1       	ldd	r19, Y+32	; 0x20

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     ff0:	c3 2e       	mov	r12, r19
     ff2:	d2 2e       	mov	r13, r18
     ff4:	e9 2e       	mov	r14, r25
     ff6:	f8 2e       	mov	r15, r24

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);
     ff8:	8a a1       	ldd	r24, Y+34	; 0x22
     ffa:	9b a1       	ldd	r25, Y+35	; 0x23

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     ffc:	09 2f       	mov	r16, r25
     ffe:	18 2f       	mov	r17, r24

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
    1000:	9b d0       	rcall	.+310    	; 0x1138 <sdcard_GetNbBlocks>
    1002:	c6 16       	cp	r12, r22
    1004:	d7 06       	cpc	r13, r23
    1006:	e8 06       	cpc	r14, r24
    1008:	f9 06       	cpc	r15, r25
    100a:	68 f0       	brcs	.+26     	; 0x1026 <SCSI_Command_ReadWrite_10+0x54>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    100c:	ea e7       	ldi	r30, 0x7A	; 122
    100e:	f1 e0       	ldi	r31, 0x01	; 1
    1010:	80 81       	ld	r24, Z
    1012:	80 7f       	andi	r24, 0xF0	; 240
    1014:	85 60       	ori	r24, 0x05	; 5
    1016:	80 83       	st	Z, r24
    1018:	e8 e7       	ldi	r30, 0x78	; 120
    101a:	f1 e0       	ldi	r31, 0x01	; 1
    101c:	81 e2       	ldi	r24, 0x21	; 33
    101e:	84 87       	std	Z+12, r24	; 0x0c
    1020:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	28 c0       	rjmp	.+80     	; 0x1076 <SCSI_Command_ReadWrite_10+0xa4>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
    1026:	bb 20       	and	r11, r11
    1028:	31 f0       	breq	.+12     	; 0x1036 <SCSI_Command_ReadWrite_10+0x64>
	  sdcard_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    102a:	98 01       	movw	r18, r16
    102c:	b7 01       	movw	r22, r14
    102e:	a6 01       	movw	r20, r12
    1030:	ce 01       	movw	r24, r28
    1032:	b2 d1       	rcall	.+868    	; 0x1398 <sdcard_ReadBlocks>
    1034:	05 c0       	rjmp	.+10     	; 0x1040 <SCSI_Command_ReadWrite_10+0x6e>
	else
	  sdcard_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    1036:	98 01       	movw	r18, r16
    1038:	b7 01       	movw	r22, r14
    103a:	a6 01       	movw	r20, r12
    103c:	ce 01       	movw	r24, r28
    103e:	49 d1       	rcall	.+658    	; 0x12d2 <sdcard_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
    1040:	c8 01       	movw	r24, r16
    1042:	a0 e0       	ldi	r26, 0x00	; 0
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	07 2e       	mov	r0, r23
    1048:	79 e0       	ldi	r23, 0x09	; 9
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	aa 1f       	adc	r26, r26
    1050:	bb 1f       	adc	r27, r27
    1052:	7a 95       	dec	r23
    1054:	d1 f7       	brne	.-12     	; 0x104a <SCSI_Command_ReadWrite_10+0x78>
    1056:	70 2d       	mov	r23, r0
    1058:	4c 89       	ldd	r20, Y+20	; 0x14
    105a:	5d 89       	ldd	r21, Y+21	; 0x15
    105c:	6e 89       	ldd	r22, Y+22	; 0x16
    105e:	7f 89       	ldd	r23, Y+23	; 0x17
    1060:	8a 01       	movw	r16, r20
    1062:	9b 01       	movw	r18, r22
    1064:	08 1b       	sub	r16, r24
    1066:	19 0b       	sbc	r17, r25
    1068:	2a 0b       	sbc	r18, r26
    106a:	3b 0b       	sbc	r19, r27
    106c:	0c 8b       	std	Y+20, r16	; 0x14
    106e:	1d 8b       	std	Y+21, r17	; 0x15
    1070:	2e 8b       	std	Y+22, r18	; 0x16
    1072:	3f 8b       	std	Y+23, r19	; 0x17

	return true;
    1074:	81 e0       	ldi	r24, 0x01	; 1
}
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	ff 90       	pop	r15
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	bf 90       	pop	r11
    1088:	08 95       	ret

0000108a <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    108a:	fc 01       	movw	r30, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    108c:	93 8d       	ldd	r25, Z+27	; 0x1b
    108e:	9d 31       	cpi	r25, 0x1D	; 29
    1090:	21 f1       	breq	.+72     	; 0x10da <SCSI_DecodeSCSICommand+0x50>
    1092:	68 f4       	brcc	.+26     	; 0x10ae <SCSI_DecodeSCSICommand+0x24>
    1094:	92 31       	cpi	r25, 0x12	; 18
    1096:	c1 f0       	breq	.+48     	; 0x10c8 <SCSI_DecodeSCSICommand+0x3e>
    1098:	28 f4       	brcc	.+10     	; 0x10a4 <SCSI_DecodeSCSICommand+0x1a>
    109a:	99 23       	and	r25, r25
    109c:	61 f1       	breq	.+88     	; 0x10f6 <SCSI_DecodeSCSICommand+0x6c>
    109e:	93 30       	cpi	r25, 0x03	; 3
    10a0:	b1 f0       	breq	.+44     	; 0x10ce <SCSI_DecodeSCSICommand+0x44>
    10a2:	2f c0       	rjmp	.+94     	; 0x1102 <SCSI_DecodeSCSICommand+0x78>
    10a4:	9a 31       	cpi	r25, 0x1A	; 26
    10a6:	21 f1       	breq	.+72     	; 0x10f0 <SCSI_DecodeSCSICommand+0x66>
    10a8:	9b 31       	cpi	r25, 0x1B	; 27
    10aa:	29 f1       	breq	.+74     	; 0x10f6 <SCSI_DecodeSCSICommand+0x6c>
    10ac:	2a c0       	rjmp	.+84     	; 0x1102 <SCSI_DecodeSCSICommand+0x78>
    10ae:	98 32       	cpi	r25, 0x28	; 40
    10b0:	d9 f0       	breq	.+54     	; 0x10e8 <SCSI_DecodeSCSICommand+0x5e>
    10b2:	28 f4       	brcc	.+10     	; 0x10be <SCSI_DecodeSCSICommand+0x34>
    10b4:	9e 31       	cpi	r25, 0x1E	; 30
    10b6:	f9 f0       	breq	.+62     	; 0x10f6 <SCSI_DecodeSCSICommand+0x6c>
    10b8:	95 32       	cpi	r25, 0x25	; 37
    10ba:	61 f0       	breq	.+24     	; 0x10d4 <SCSI_DecodeSCSICommand+0x4a>
    10bc:	22 c0       	rjmp	.+68     	; 0x1102 <SCSI_DecodeSCSICommand+0x78>
    10be:	9a 32       	cpi	r25, 0x2A	; 42
    10c0:	79 f0       	breq	.+30     	; 0x10e0 <SCSI_DecodeSCSICommand+0x56>
    10c2:	9f 32       	cpi	r25, 0x2F	; 47
    10c4:	c1 f0       	breq	.+48     	; 0x10f6 <SCSI_DecodeSCSICommand+0x6c>
    10c6:	1d c0       	rjmp	.+58     	; 0x1102 <SCSI_DecodeSCSICommand+0x78>
	{
		case SCSI_CMD_INQUIRY:
			CommandSuccess = SCSI_Command_Inquiry(MSInterfaceInfo);
    10c8:	cf 01       	movw	r24, r30
    10ca:	c3 de       	rcall	.-634    	; 0xe52 <SCSI_Command_Inquiry>
			break;
    10cc:	26 c0       	rjmp	.+76     	; 0x111a <SCSI_DecodeSCSICommand+0x90>
		case SCSI_CMD_REQUEST_SENSE:
			CommandSuccess = SCSI_Command_Request_Sense(MSInterfaceInfo);
    10ce:	cf 01       	movw	r24, r30
    10d0:	8a de       	rcall	.-748    	; 0xde6 <SCSI_Command_Request_Sense>
			break;
		case SCSI_CMD_READ_CAPACITY_10:
			CommandSuccess = SCSI_Command_Read_Capacity_10(MSInterfaceInfo);
    10d2:	23 c0       	rjmp	.+70     	; 0x111a <SCSI_DecodeSCSICommand+0x90>
    10d4:	cf 01       	movw	r24, r30
			break;
    10d6:	0a df       	rcall	.-492    	; 0xeec <SCSI_Command_Read_Capacity_10>
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
    10d8:	20 c0       	rjmp	.+64     	; 0x111a <SCSI_DecodeSCSICommand+0x90>
    10da:	cf 01       	movw	r24, r30
			break;
    10dc:	51 df       	rcall	.-350    	; 0xf80 <SCSI_Command_Send_Diagnostic>
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
    10de:	1d c0       	rjmp	.+58     	; 0x111a <SCSI_DecodeSCSICommand+0x90>
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	cf 01       	movw	r24, r30
			break;
    10e4:	76 df       	rcall	.-276    	; 0xfd2 <SCSI_Command_ReadWrite_10>
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
    10e6:	19 c0       	rjmp	.+50     	; 0x111a <SCSI_DecodeSCSICommand+0x90>
    10e8:	61 e0       	ldi	r22, 0x01	; 1
    10ea:	cf 01       	movw	r24, r30
			break;
    10ec:	72 df       	rcall	.-284    	; 0xfd2 <SCSI_Command_ReadWrite_10>
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
    10ee:	15 c0       	rjmp	.+42     	; 0x111a <SCSI_DecodeSCSICommand+0x90>
    10f0:	cf 01       	movw	r24, r30
    10f2:	5b de       	rcall	.-842    	; 0xdaa <SCSI_Command_ModeSense_6>
			break;
    10f4:	12 c0       	rjmp	.+36     	; 0x111a <SCSI_DecodeSCSICommand+0x90>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    10f6:	14 8a       	std	Z+20, r1	; 0x14
    10f8:	15 8a       	std	Z+21, r1	; 0x15
    10fa:	16 8a       	std	Z+22, r1	; 0x16
    10fc:	17 8a       	std	Z+23, r1	; 0x17
		case SCSI_CMD_START_STOP_UNIT:
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
			break;
    1100:	0c c0       	rjmp	.+24     	; 0x111a <SCSI_DecodeSCSICommand+0x90>
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    1102:	ea e7       	ldi	r30, 0x7A	; 122
    1104:	f1 e0       	ldi	r31, 0x01	; 1
    1106:	80 81       	ld	r24, Z
    1108:	80 7f       	andi	r24, 0xF0	; 240
    110a:	85 60       	ori	r24, 0x05	; 5
    110c:	80 83       	st	Z, r24
    110e:	e8 e7       	ldi	r30, 0x78	; 120
    1110:	f1 e0       	ldi	r31, 0x01	; 1
    1112:	80 e2       	ldi	r24, 0x20	; 32
    1114:	84 87       	std	Z+12, r24	; 0x0c
    1116:	15 86       	std	Z+13, r1	; 0x0d
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;
    1118:	80 e0       	ldi	r24, 0x00	; 0
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
    111a:	88 23       	and	r24, r24
    111c:	59 f0       	breq	.+22     	; 0x1134 <SCSI_DecodeSCSICommand+0xaa>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
    111e:	ea e7       	ldi	r30, 0x7A	; 122
    1120:	f1 e0       	ldi	r31, 0x01	; 1
    1122:	80 81       	ld	r24, Z
    1124:	80 7f       	andi	r24, 0xF0	; 240
    1126:	80 83       	st	Z, r24
    1128:	e8 e7       	ldi	r30, 0x78	; 120
    112a:	f1 e0       	ldi	r31, 0x01	; 1
    112c:	14 86       	std	Z+12, r1	; 0x0c
    112e:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	08 95       	ret
	}

	return false;
    1134:	80 e0       	ldi	r24, 0x00	; 0
}
    1136:	08 95       	ret

00001138 <sdcard_GetNbBlocks>:

uint32_t sdcard_GetNbBlocks(void)
{
    static uint32_t CachedTotalBlocks = 0;

    if (CachedTotalBlocks != 0)
    1138:	60 91 8c 08 	lds	r22, 0x088C	; 0x80088c <CachedTotalBlocks.4675>
    113c:	70 91 8d 08 	lds	r23, 0x088D	; 0x80088d <CachedTotalBlocks.4675+0x1>
    1140:	80 91 8e 08 	lds	r24, 0x088E	; 0x80088e <CachedTotalBlocks.4675+0x2>
    1144:	90 91 8f 08 	lds	r25, 0x088F	; 0x80088f <CachedTotalBlocks.4675+0x3>
    1148:	61 15       	cp	r22, r1
    114a:	71 05       	cpc	r23, r1
    114c:	81 05       	cpc	r24, r1
    114e:	91 05       	cpc	r25, r1
    1150:	a1 f5       	brne	.+104    	; 0x11ba <sdcard_GetNbBlocks+0x82>
    {
        return CachedTotalBlocks;
    }

    if (!sd_get_number_of_sectors(&CachedTotalBlocks))
    1152:	8c e8       	ldi	r24, 0x8C	; 140
    1154:	98 e0       	ldi	r25, 0x08	; 8
    1156:	e0 da       	rcall	.-2624   	; 0x718 <sd_get_number_of_sectors>
    1158:	81 11       	cpse	r24, r1
    115a:	0f c0       	rjmp	.+30     	; 0x117a <sdcard_GetNbBlocks+0x42>
    {
        uart_puts("\r\nERROR sd_get_number_of_sectors fails, forcing 2GB\r\n");
    115c:	87 e1       	ldi	r24, 0x17	; 23
    115e:	94 e0       	ldi	r25, 0x04	; 4
    1160:	11 d8       	rcall	.-4062   	; 0x184 <uart_puts>
        CachedTotalBlocks = 3921920;  //2 GB
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	98 ed       	ldi	r25, 0xD8	; 216
    1166:	ab e3       	ldi	r26, 0x3B	; 59
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	80 93 8c 08 	sts	0x088C, r24	; 0x80088c <CachedTotalBlocks.4675>
    116e:	90 93 8d 08 	sts	0x088D, r25	; 0x80088d <CachedTotalBlocks.4675+0x1>
    1172:	a0 93 8e 08 	sts	0x088E, r26	; 0x80088e <CachedTotalBlocks.4675+0x2>
    1176:	b0 93 8f 08 	sts	0x088F, r27	; 0x80088f <CachedTotalBlocks.4675+0x3>
    }

    printf_P(PSTR("\r\nSD blocks: %li\r\n"), CachedTotalBlocks);
    117a:	80 91 8f 08 	lds	r24, 0x088F	; 0x80088f <CachedTotalBlocks.4675+0x3>
    117e:	8f 93       	push	r24
    1180:	80 91 8e 08 	lds	r24, 0x088E	; 0x80088e <CachedTotalBlocks.4675+0x2>
    1184:	8f 93       	push	r24
    1186:	80 91 8d 08 	lds	r24, 0x088D	; 0x80088d <CachedTotalBlocks.4675+0x1>
    118a:	8f 93       	push	r24
    118c:	80 91 8c 08 	lds	r24, 0x088C	; 0x80088c <CachedTotalBlocks.4675>
    1190:	8f 93       	push	r24
    1192:	8e ef       	ldi	r24, 0xFE	; 254
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	9f 93       	push	r25
    1198:	8f 93       	push	r24
    119a:	0e 94 a4 14 	call	0x2948	; 0x2948 <printf_P>

    return CachedTotalBlocks;
    119e:	60 91 8c 08 	lds	r22, 0x088C	; 0x80088c <CachedTotalBlocks.4675>
    11a2:	70 91 8d 08 	lds	r23, 0x088D	; 0x80088d <CachedTotalBlocks.4675+0x1>
    11a6:	80 91 8e 08 	lds	r24, 0x088E	; 0x80088e <CachedTotalBlocks.4675+0x2>
    11aa:	90 91 8f 08 	lds	r25, 0x088F	; 0x80088f <CachedTotalBlocks.4675+0x3>
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
}
    11ba:	08 95       	ret

000011bc <sdcard_Init>:
#include "at90lib.h"
#include "sdcard.h"


bool sdcard_Init(void)
{
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	d2 50       	subi	r29, 0x02	; 2
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    uint8_t ret;

    SPI_init();
    11d4:	80 d8       	rcall	.-3840   	; 0x2d6 <SPI_init>
    do
    {
        ret = SD_init();
    11d6:	4d d9       	rcall	.-3430   	; 0x472 <SD_init>
    11d8:	18 2f       	mov	r17, r24
    11da:	88 23       	and	r24, r24
        if (ret)
    11dc:	49 f0       	breq	.+18     	; 0x11f0 <sdcard_Init+0x34>
    11de:	8d e4       	ldi	r24, 0x4D	; 77
        {
            uart_puts("SD err: ");
    11e0:	94 e0       	ldi	r25, 0x04	; 4
    11e2:	0e 94 c2 00 	call	0x184	; 0x184 <uart_puts>
    11e6:	81 2f       	mov	r24, r17
            uart_printhexchar(ret);
    11e8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <uart_printhexchar>
    11ec:	80 e0       	ldi	r24, 0x00	; 0
            return false;
    11ee:	2d c0       	rjmp	.+90     	; 0x124a <sdcard_Init+0x8e>
    11f0:	81 11       	cpse	r24, r1
        }
    }   while (ret);
    11f2:	f1 cf       	rjmp	.-30     	; 0x11d6 <sdcard_Init+0x1a>
    11f4:	86 e5       	ldi	r24, 0x56	; 86

    uart_puts("SD init sucesss!\r\n");
    11f6:	94 e0       	ldi	r25, 0x04	; 4
    11f8:	0e 94 c2 00 	call	0x184	; 0x184 <uart_puts>

    sdcard_GetNbBlocks();
    11fc:	9d df       	rcall	.-198    	; 0x1138 <sdcard_GetNbBlocks>
    11fe:	8e 01       	movw	r16, r28

    uint8_t readed_sector[512] = { 0 };
    1200:	0f 5f       	subi	r16, 0xFF	; 255
    1202:	1f 4f       	sbci	r17, 0xFF	; 255
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	92 e0       	ldi	r25, 0x02	; 2
    1208:	f8 01       	movw	r30, r16
    120a:	9c 01       	movw	r18, r24
    120c:	11 92       	st	Z+, r1
    120e:	21 50       	subi	r18, 0x01	; 1
    1210:	30 40       	sbci	r19, 0x00	; 0
    1212:	e1 f7       	brne	.-8      	; 0x120c <sdcard_Init+0x50>
    1214:	a8 01       	movw	r20, r16
    SD_read_sector(0, readed_sector);
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	cb 01       	movw	r24, r22
    121c:	a2 d9       	rcall	.-3260   	; 0x562 <SD_read_sector>
    121e:	86 e1       	ldi	r24, 0x16	; 22
    printf_P(PSTR("first SD sector:\r\n"));
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	9f 93       	push	r25
    1224:	8f 93       	push	r24
    1226:	0e 94 a4 14 	call	0x2948	; 0x2948 <printf_P>
    122a:	60 e0       	ldi	r22, 0x00	; 0
    uart_printhexdump(readed_sector, 512);
    122c:	72 e0       	ldi	r23, 0x02	; 2
    122e:	c8 01       	movw	r24, r16
    1230:	0e 94 13 01 	call	0x226	; 0x226 <uart_printhexdump>
    1234:	81 e1       	ldi	r24, 0x11	; 17
    printf_P(PSTR("\r\n\r\n"));
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	9f 93       	push	r25
    123a:	8f 93       	push	r24
    123c:	0e 94 a4 14 	call	0x2948	; 0x2948 <printf_P>
    1240:	0f 90       	pop	r0

    return true;
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	de 5f       	subi	r29, 0xFE	; 254
}
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	08 95       	ret

00001260 <sdcard_WriteBlockHandler>:
    1260:	cf 93       	push	r28
 *
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
uintptr_t sdcard_WriteBlockHandler(uint8_t* buff_to_write, void* a, void* p)
{
    1262:	df 93       	push	r29
    1264:	ec 01       	movw	r28, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1266:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    /* Check if the endpoint is currently empty */
    if (!(Endpoint_IsReadWriteAllowed()))
    126a:	85 fd       	sbrc	r24, 5
    126c:	08 c0       	rjmp	.+16     	; 0x127e <sdcard_WriteBlockHandler+0x1e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    126e:	e8 ee       	ldi	r30, 0xE8	; 232
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	8b 77       	andi	r24, 0x7B	; 123
    1276:	80 83       	st	Z, r24
    {
        /* Clear the current endpoint bank */
        Endpoint_ClearOUT();

        /* Wait until the host has sent another packet */
        if (Endpoint_WaitUntilReady())
    1278:	78 d7       	rcall	.+3824   	; 0x216a <Endpoint_WaitUntilReady>
    127a:	81 11       	cpse	r24, r1
    127c:	25 c0       	rjmp	.+74     	; 0x12c8 <sdcard_WriteBlockHandler+0x68>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    127e:	e1 ef       	ldi	r30, 0xF1	; 241
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
            return 0;
        }
    }

    /* Write one 16-byte chunk of data to the dataflash */
    buff_to_write[0] = Endpoint_Read_8();
    1284:	88 83       	st	Y, r24
    1286:	80 81       	ld	r24, Z
    buff_to_write[1] = Endpoint_Read_8();
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	80 81       	ld	r24, Z
    buff_to_write[2] = Endpoint_Read_8();
    128c:	8a 83       	std	Y+2, r24	; 0x02
    128e:	80 81       	ld	r24, Z
    buff_to_write[3] = Endpoint_Read_8();
    1290:	8b 83       	std	Y+3, r24	; 0x03
    1292:	80 81       	ld	r24, Z
    buff_to_write[4] = Endpoint_Read_8();
    1294:	8c 83       	std	Y+4, r24	; 0x04
    1296:	80 81       	ld	r24, Z
    buff_to_write[5] = Endpoint_Read_8();
    1298:	8d 83       	std	Y+5, r24	; 0x05
    129a:	80 81       	ld	r24, Z
    buff_to_write[6] = Endpoint_Read_8();
    129c:	8e 83       	std	Y+6, r24	; 0x06
    129e:	80 81       	ld	r24, Z
    buff_to_write[7] = Endpoint_Read_8();
    12a0:	8f 83       	std	Y+7, r24	; 0x07
    12a2:	80 81       	ld	r24, Z
    buff_to_write[8] = Endpoint_Read_8();
    12a4:	88 87       	std	Y+8, r24	; 0x08
    12a6:	80 81       	ld	r24, Z
    buff_to_write[9] = Endpoint_Read_8();
    12a8:	89 87       	std	Y+9, r24	; 0x09
    12aa:	80 81       	ld	r24, Z
    buff_to_write[10] = Endpoint_Read_8();
    12ac:	8a 87       	std	Y+10, r24	; 0x0a
    12ae:	80 81       	ld	r24, Z
    buff_to_write[11] = Endpoint_Read_8();
    12b0:	8b 87       	std	Y+11, r24	; 0x0b
    12b2:	80 81       	ld	r24, Z
    buff_to_write[12] = Endpoint_Read_8();
    12b4:	8c 87       	std	Y+12, r24	; 0x0c
    12b6:	80 81       	ld	r24, Z
    buff_to_write[13] = Endpoint_Read_8();
    12b8:	8d 87       	std	Y+13, r24	; 0x0d
    12ba:	80 81       	ld	r24, Z
    buff_to_write[14] = Endpoint_Read_8();
    12bc:	8e 87       	std	Y+14, r24	; 0x0e
    12be:	80 81       	ld	r24, Z
    buff_to_write[15] = Endpoint_Read_8();
    12c0:	8f 87       	std	Y+15, r24	; 0x0f

    return 16;
    12c2:	80 e1       	ldi	r24, 0x10	; 16
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <sdcard_WriteBlockHandler+0x6c>
        Endpoint_ClearOUT();

        /* Wait until the host has sent another packet */
        if (Endpoint_WaitUntilReady())
        {
            return 0;
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    buff_to_write[13] = Endpoint_Read_8();
    buff_to_write[14] = Endpoint_Read_8();
    buff_to_write[15] = Endpoint_Read_8();

    return 16;
}
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	08 95       	ret

000012d2 <sdcard_WriteBlocks>:

void sdcard_WriteBlocks(USB_ClassInfo_MS_Device_t* MSInterfaceInfo,
                        uint32_t BlockAddress, uint16_t TotalBlocks)
{
    12d2:	8f 92       	push	r8
    12d4:	9f 92       	push	r9
    12d6:	af 92       	push	r10
    12d8:	bf 92       	push	r11
    12da:	ef 92       	push	r14
    12dc:	ff 92       	push	r15
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	7c 01       	movw	r14, r24
    12e8:	4a 01       	movw	r8, r20
    12ea:	5b 01       	movw	r10, r22
    12ec:	89 01       	movw	r16, r18
    int i;
    static uint8_t buff_to_write[512];

    printf_P(PSTR("W %li %i\r\n"), BlockAddress, TotalBlocks);
    12ee:	1f 93       	push	r17
    12f0:	2f 93       	push	r18
    12f2:	bf 92       	push	r11
    12f4:	af 92       	push	r10
    12f6:	9f 92       	push	r9
    12f8:	4f 93       	push	r20
    12fa:	83 ef       	ldi	r24, 0xF3	; 243
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9f 93       	push	r25
    1300:	8f 93       	push	r24
    1302:	0e 94 a4 14 	call	0x2948	; 0x2948 <printf_P>

    /* Wait until endpoint is ready before continuing */
    if (Endpoint_WaitUntilReady())
    1306:	31 d7       	rcall	.+3682   	; 0x216a <Endpoint_WaitUntilReady>
    1308:	2d b7       	in	r18, 0x3d	; 61
    130a:	3e b7       	in	r19, 0x3e	; 62
    130c:	28 5f       	subi	r18, 0xF8	; 248
    130e:	3f 4f       	sbci	r19, 0xFF	; 255
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	3e bf       	out	0x3e, r19	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	2d bf       	out	0x3d, r18	; 61
    131a:	88 23       	and	r24, r24
    131c:	31 f1       	breq	.+76     	; 0x136a <sdcard_WriteBlocks+0x98>
    131e:	31 c0       	rjmp	.+98     	; 0x1382 <sdcard_WriteBlocks+0xb0>

    while (TotalBlocks)
    {
        for (i = 0; i < 32; i++)
        {
            sdcard_WriteBlockHandler(buff_to_write + (16 * i), NULL, NULL);
    1320:	ce 01       	movw	r24, r28
    1322:	82 95       	swap	r24
    1324:	92 95       	swap	r25
    1326:	90 7f       	andi	r25, 0xF0	; 240
    1328:	98 27       	eor	r25, r24
    132a:	80 7f       	andi	r24, 0xF0	; 240
    132c:	98 27       	eor	r25, r24
    132e:	40 e0       	ldi	r20, 0x00	; 0
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	84 57       	subi	r24, 0x74	; 116
    1338:	99 4f       	sbci	r25, 0xF9	; 249
    133a:	92 df       	rcall	.-220    	; 0x1260 <sdcard_WriteBlockHandler>
        return;
    }

    while (TotalBlocks)
    {
        for (i = 0; i < 32; i++)
    133c:	21 96       	adiw	r28, 0x01	; 1
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <sdcard_WriteBlocks+0x72>
    1340:	c0 e0       	ldi	r28, 0x00	; 0
    1342:	d0 e0       	ldi	r29, 0x00	; 0
    1344:	c0 32       	cpi	r28, 0x20	; 32
    1346:	d1 05       	cpc	r29, r1
    1348:	5c f3       	brlt	.-42     	; 0x1320 <sdcard_WriteBlocks+0x4e>
        {
            sdcard_WriteBlockHandler(buff_to_write + (16 * i), NULL, NULL);
        }

        SD_write_sector(BlockAddress, buff_to_write);
    134a:	4c e8       	ldi	r20, 0x8C	; 140
    134c:	56 e0       	ldi	r21, 0x06	; 6
    134e:	c5 01       	movw	r24, r10
    1350:	b4 01       	movw	r22, r8
    1352:	6d d9       	rcall	.-3366   	; 0x62e <SD_write_sector>

        /* Check if the current command is being aborted by the host */
        if (MSInterfaceInfo->State.IsMassStoreReset)
    1354:	f7 01       	movw	r30, r14
    1356:	80 ad       	ldd	r24, Z+56	; 0x38
    1358:	81 11       	cpse	r24, r1
    135a:	13 c0       	rjmp	.+38     	; 0x1382 <sdcard_WriteBlocks+0xb0>
        {
            return;
        }

        /* Decrement the blocks remaining counter and reset the sub block counter */
        BlockAddress++;
    135c:	ff ef       	ldi	r31, 0xFF	; 255
    135e:	8f 1a       	sub	r8, r31
    1360:	9f 0a       	sbc	r9, r31
    1362:	af 0a       	sbc	r10, r31
    1364:	bf 0a       	sbc	r11, r31
        TotalBlocks--;
    1366:	01 50       	subi	r16, 0x01	; 1
    1368:	11 09       	sbc	r17, r1
    if (Endpoint_WaitUntilReady())
    {
        return;
    }

    while (TotalBlocks)
    136a:	01 15       	cp	r16, r1
    136c:	11 05       	cpc	r17, r1
    136e:	41 f7       	brne	.-48     	; 0x1340 <sdcard_WriteBlocks+0x6e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1370:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        BlockAddress++;
        TotalBlocks--;
    }

    /* If the endpoint is empty, clear it ready for the next packet from the host */
    if (!(Endpoint_IsReadWriteAllowed()))
    1374:	85 fd       	sbrc	r24, 5
    1376:	05 c0       	rjmp	.+10     	; 0x1382 <sdcard_WriteBlocks+0xb0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1378:	e8 ee       	ldi	r30, 0xE8	; 232
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	8b 77       	andi	r24, 0x7B	; 123
    1380:	80 83       	st	Z, r24
    {
        Endpoint_ClearOUT();
    }
}
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	1f 91       	pop	r17
    1388:	0f 91       	pop	r16
    138a:	ff 90       	pop	r15
    138c:	ef 90       	pop	r14
    138e:	bf 90       	pop	r11
    1390:	af 90       	pop	r10
    1392:	9f 90       	pop	r9
    1394:	8f 90       	pop	r8
    1396:	08 95       	ret

00001398 <sdcard_ReadBlocks>:
    return 1;
}

void sdcard_ReadBlocks(USB_ClassInfo_MS_Device_t* MSInterfaceInfo,
                       uint32_t BlockAddress, uint16_t TotalBlocks)
{
    1398:	8f 92       	push	r8
    139a:	9f 92       	push	r9
    139c:	af 92       	push	r10
    139e:	bf 92       	push	r11
    13a0:	ef 92       	push	r14
    13a2:	ff 92       	push	r15
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	4a 01       	movw	r8, r20
    13ae:	5b 01       	movw	r10, r22
    13b0:	79 01       	movw	r14, r18
    static uint8_t buff_rd[512];
    int i;

    printf_P(PSTR("R %li %i\r\n"), BlockAddress, TotalBlocks);
    13b2:	ff 92       	push	r15
    13b4:	2f 93       	push	r18
    13b6:	bf 92       	push	r11
    13b8:	af 92       	push	r10
    13ba:	9f 92       	push	r9
    13bc:	4f 93       	push	r20
    13be:	88 ee       	ldi	r24, 0xE8	; 232
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9f 93       	push	r25
    13c4:	8f 93       	push	r24
    13c6:	0e 94 a4 14 	call	0x2948	; 0x2948 <printf_P>

    /* Wait until endpoint is ready before continuing */
    if (Endpoint_WaitUntilReady())
    13ca:	cf d6       	rcall	.+3486   	; 0x216a <Endpoint_WaitUntilReady>
    13cc:	2d b7       	in	r18, 0x3d	; 61
    13ce:	3e b7       	in	r19, 0x3e	; 62
    13d0:	28 5f       	subi	r18, 0xF8	; 248
    13d2:	3f 4f       	sbci	r19, 0xFF	; 255
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	3e bf       	out	0x3e, r19	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	2d bf       	out	0x3d, r18	; 61
    13de:	88 23       	and	r24, r24
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <sdcard_ReadBlocks+0x4c>
    13e2:	4d c0       	rjmp	.+154    	; 0x147e <sdcard_ReadBlocks+0xe6>
    13e4:	59 c0       	rjmp	.+178    	; 0x1498 <sdcard_ReadBlocks+0x100>
    while (TotalBlocks)
    {
#ifdef MULTIPLE_READ_SD
        read_multi_buff(buff_rd);
#else
        SD_read_sector(BlockAddress, buff_rd);
    13e6:	4c e8       	ldi	r20, 0x8C	; 140
    13e8:	54 e0       	ldi	r21, 0x04	; 4
    13ea:	c5 01       	movw	r24, r10
    13ec:	b4 01       	movw	r22, r8
    13ee:	b9 d8       	rcall	.-3726   	; 0x562 <SD_read_sector>
#endif
        //uart_printhexdump(buff_rd, 512);
        for (i = 0; i < 32; i++)
    13f0:	00 e0       	ldi	r16, 0x00	; 0
    13f2:	10 e0       	ldi	r17, 0x00	; 0
    13f4:	39 c0       	rjmp	.+114    	; 0x1468 <sdcard_ReadBlocks+0xd0>
        {
            sdcard_ReadBlockHandler(buff_rd + (16 * i), NULL, NULL);
    13f6:	e8 01       	movw	r28, r16
    13f8:	c2 95       	swap	r28
    13fa:	d2 95       	swap	r29
    13fc:	d0 7f       	andi	r29, 0xF0	; 240
    13fe:	dc 27       	eor	r29, r28
    1400:	c0 7f       	andi	r28, 0xF0	; 240
    1402:	dc 27       	eor	r29, r28
    1404:	c4 57       	subi	r28, 0x74	; 116
    1406:	db 4f       	sbci	r29, 0xFB	; 251
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1408:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 */

static inline uint8_t sdcard_ReadBlockHandler(uint8_t* buffer, void* a, void* p)
{
    /* Check if the endpoint is currently full */
    if (!(Endpoint_IsReadWriteAllowed()))
    140c:	85 fd       	sbrc	r24, 5
    140e:	08 c0       	rjmp	.+16     	; 0x1420 <sdcard_ReadBlocks+0x88>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1410:	e8 ee       	ldi	r30, 0xE8	; 232
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8e 77       	andi	r24, 0x7E	; 126
    {
        /* Clear the endpoint bank to send its contents to the host */
        Endpoint_ClearIN();

        /* Wait until the endpoint is ready for more data */
        if (Endpoint_WaitUntilReady())
    1418:	80 83       	st	Z, r24
    141a:	a7 d6       	rcall	.+3406   	; 0x216a <Endpoint_WaitUntilReady>
    141c:	81 11       	cpse	r24, r1
    141e:	22 c0       	rjmp	.+68     	; 0x1464 <sdcard_ReadBlocks+0xcc>
        {
            return 0;
        }
    }

    Endpoint_Write_8(buffer[0]);
    1420:	88 81       	ld	r24, Y
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1422:	e1 ef       	ldi	r30, 0xF1	; 241
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[1]);
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[2]);
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[3]);
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[4]);
    1434:	8c 81       	ldd	r24, Y+4	; 0x04
    1436:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[5]);
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[6]);
    143c:	8e 81       	ldd	r24, Y+6	; 0x06
    143e:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[7]);
    1440:	8f 81       	ldd	r24, Y+7	; 0x07
    1442:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[8]);
    1444:	88 85       	ldd	r24, Y+8	; 0x08
    1446:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[9]);
    1448:	89 85       	ldd	r24, Y+9	; 0x09
    144a:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[10]);
    144c:	8a 85       	ldd	r24, Y+10	; 0x0a
    144e:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[11]);
    1450:	8b 85       	ldd	r24, Y+11	; 0x0b
    1452:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[12]);
    1454:	8c 85       	ldd	r24, Y+12	; 0x0c
    1456:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[13]);
    1458:	8d 85       	ldd	r24, Y+13	; 0x0d
    145a:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[14]);
    145c:	8e 85       	ldd	r24, Y+14	; 0x0e
    145e:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[15]);
    1460:	8f 85       	ldd	r24, Y+15	; 0x0f
    1462:	80 83       	st	Z, r24
        read_multi_buff(buff_rd);
#else
        SD_read_sector(BlockAddress, buff_rd);
#endif
        //uart_printhexdump(buff_rd, 512);
        for (i = 0; i < 32; i++)
    1464:	0f 5f       	subi	r16, 0xFF	; 255
    1466:	1f 4f       	sbci	r17, 0xFF	; 255
    1468:	00 32       	cpi	r16, 0x20	; 32
    146a:	11 05       	cpc	r17, r1
    146c:	24 f2       	brlt	.-120    	; 0x13f6 <sdcard_ReadBlocks+0x5e>
        {
            sdcard_ReadBlockHandler(buff_rd + (16 * i), NULL, NULL);
        }
        /* Decrement the blocks remaining counter */
        BlockAddress++;
    146e:	3f ef       	ldi	r19, 0xFF	; 255
    1470:	83 1a       	sub	r8, r19
    1472:	93 0a       	sbc	r9, r19
    1474:	a3 0a       	sbc	r10, r19
    1476:	b3 0a       	sbc	r11, r19
        TotalBlocks--;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	e8 1a       	sub	r14, r24
    147c:	f1 08       	sbc	r15, r1
    //#define MULTIPLE_READ_SD

#ifdef MULTIPLE_READ_SD
    sd_raw_initmultiread(BlockAddress);
#endif
    while (TotalBlocks)
    147e:	e1 14       	cp	r14, r1
    1480:	f1 04       	cpc	r15, r1
    1482:	09 f0       	breq	.+2      	; 0x1486 <sdcard_ReadBlocks+0xee>
    1484:	b0 cf       	rjmp	.-160    	; 0x13e6 <sdcard_ReadBlocks+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1486:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#ifdef MULTIPLE_READ_SD
    sd_raw_stopmultiread();
#endif

    /* If the endpoint is full, send its contents to the host */
    if (!(Endpoint_IsReadWriteAllowed()))
    148a:	85 fd       	sbrc	r24, 5
    148c:	05 c0       	rjmp	.+10     	; 0x1498 <sdcard_ReadBlocks+0x100>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    148e:	e8 ee       	ldi	r30, 0xE8	; 232
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	8e 77       	andi	r24, 0x7E	; 126
    1496:	80 83       	st	Z, r24
    {
        Endpoint_ClearIN();
    }
}
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	1f 91       	pop	r17
    149e:	0f 91       	pop	r16
    14a0:	ff 90       	pop	r15
    14a2:	ef 90       	pop	r14
    14a4:	bf 90       	pop	r11
    14a6:	af 90       	pop	r10
    14a8:	9f 90       	pop	r9
    14aa:	8f 90       	pop	r8
    14ac:	08 95       	ret

000014ae <sdcard_CheckDataflashOperation>:
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool sdcard_CheckDataflashOperation(void)
{
    return true;
}
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	08 95       	ret

000014b2 <Serial_putchar>:
{
	uint8_t* CurrByte = (uint8_t*)Buffer;

	while (Length--)
	  Serial_SendByte(*(CurrByte++));
}
    14b2:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    14b6:	95 ff       	sbrs	r25, 5
    14b8:	fc cf       	rjmp	.-8      	; 0x14b2 <Serial_putchar>
    14ba:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	08 95       	ret

000014c4 <Serial_getchar>:
    14c4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    14c8:	88 23       	and	r24, r24
    14ca:	5c f4       	brge	.+22     	; 0x14e2 <Serial_getchar+0x1e>
    14cc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    14d0:	88 23       	and	r24, r24
    14d2:	24 f4       	brge	.+8      	; 0x14dc <Serial_getchar+0x18>
    14d4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	08 95       	ret
    14dc:	8f ef       	ldi	r24, 0xFF	; 255
    14de:	9f ef       	ldi	r25, 0xFF	; 255
    14e0:	08 95       	ret
    14e2:	8e ef       	ldi	r24, 0xFE	; 254
    14e4:	9f ef       	ldi	r25, 0xFF	; 255
    14e6:	08 95       	ret

000014e8 <Serial_SendString>:
    14e8:	fc 01       	movw	r30, r24
    14ea:	07 c0       	rjmp	.+14     	; 0x14fa <Serial_SendString+0x12>
    14ec:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    14f0:	95 ff       	sbrs	r25, 5
    14f2:	fc cf       	rjmp	.-8      	; 0x14ec <Serial_SendString+0x4>
    14f4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    14f8:	31 96       	adiw	r30, 0x01	; 1
    14fa:	80 81       	ld	r24, Z
    14fc:	81 11       	cpse	r24, r1
    14fe:	f6 cf       	rjmp	.-20     	; 0x14ec <Serial_SendString+0x4>
    1500:	08 95       	ret

00001502 <Serial_CreateStream>:

void Serial_CreateStream(FILE* Stream)
{
    1502:	fc 01       	movw	r30, r24
	if (!(Stream))
    1504:	89 2b       	or	r24, r25
    1506:	49 f4       	brne	.+18     	; 0x151a <Serial_CreateStream+0x18>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1508:	ec ea       	ldi	r30, 0xAC	; 172
    150a:	f8 e0       	ldi	r31, 0x08	; 8
    150c:	81 e9       	ldi	r24, 0x91	; 145
    150e:	98 e0       	ldi	r25, 0x08	; 8
    1510:	91 83       	std	Z+1, r25	; 0x01
    1512:	80 83       	st	Z, r24
		stdout = Stream;
    1514:	93 83       	std	Z+3, r25	; 0x03
    1516:	82 83       	std	Z+2, r24	; 0x02

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    1518:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    151a:	8e e0       	ldi	r24, 0x0E	; 14
    151c:	df 01       	movw	r26, r30
    151e:	1d 92       	st	X+, r1
    1520:	8a 95       	dec	r24
    1522:	e9 f7       	brne	.-6      	; 0x151e <Serial_CreateStream+0x1c>
    1524:	83 e0       	ldi	r24, 0x03	; 3
    1526:	83 83       	std	Z+3, r24	; 0x03
    1528:	89 e5       	ldi	r24, 0x59	; 89
    152a:	9a e0       	ldi	r25, 0x0A	; 10
    152c:	91 87       	std	Z+9, r25	; 0x09
    152e:	80 87       	std	Z+8, r24	; 0x08
    1530:	82 e6       	ldi	r24, 0x62	; 98
    1532:	9a e0       	ldi	r25, 0x0A	; 10
    1534:	93 87       	std	Z+11, r25	; 0x0b
    1536:	82 87       	std	Z+10, r24	; 0x0a
    1538:	08 95       	ret

0000153a <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    153a:	3f 92       	push	r3
    153c:	4f 92       	push	r4
    153e:	5f 92       	push	r5
    1540:	6f 92       	push	r6
    1542:	7f 92       	push	r7
    1544:	8f 92       	push	r8
    1546:	9f 92       	push	r9
    1548:	af 92       	push	r10
    154a:	bf 92       	push	r11
    154c:	cf 92       	push	r12
    154e:	df 92       	push	r13
    1550:	ef 92       	push	r14
    1552:	ff 92       	push	r15
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	00 d0       	rcall	.+0      	; 0x155e <HID_Device_ProcessControlRequest+0x24>
    155e:	1f 92       	push	r1
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1566:	ed b6       	in	r14, 0x3d	; 61
    1568:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    156a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    156e:	83 ff       	sbrs	r24, 3
    1570:	1f c1       	rjmp	.+574    	; 0x17b0 <HID_Device_ProcessControlRequest+0x276>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1572:	20 91 a8 08 	lds	r18, 0x08A8	; 0x8008a8 <USB_ControlRequest+0x4>
    1576:	30 91 a9 08 	lds	r19, 0x08A9	; 0x8008a9 <USB_ControlRequest+0x5>
    157a:	f6 01       	movw	r30, r12
    157c:	80 81       	ld	r24, Z
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	28 17       	cp	r18, r24
    1582:	39 07       	cpc	r19, r25
    1584:	09 f0       	breq	.+2      	; 0x1588 <HID_Device_ProcessControlRequest+0x4e>
    1586:	14 c1       	rjmp	.+552    	; 0x17b0 <HID_Device_ProcessControlRequest+0x276>
	  return;

	switch (USB_ControlRequest.bRequest)
    1588:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <USB_ControlRequest+0x1>
    158c:	83 30       	cpi	r24, 0x03	; 3
    158e:	09 f4       	brne	.+2      	; 0x1592 <HID_Device_ProcessControlRequest+0x58>
    1590:	aa c0       	rjmp	.+340    	; 0x16e6 <HID_Device_ProcessControlRequest+0x1ac>
    1592:	30 f4       	brcc	.+12     	; 0x15a0 <HID_Device_ProcessControlRequest+0x66>
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	71 f0       	breq	.+28     	; 0x15b4 <HID_Device_ProcessControlRequest+0x7a>
    1598:	82 30       	cpi	r24, 0x02	; 2
    159a:	09 f4       	brne	.+2      	; 0x159e <HID_Device_ProcessControlRequest+0x64>
    159c:	ed c0       	rjmp	.+474    	; 0x1778 <HID_Device_ProcessControlRequest+0x23e>
    159e:	08 c1       	rjmp	.+528    	; 0x17b0 <HID_Device_ProcessControlRequest+0x276>
    15a0:	8a 30       	cpi	r24, 0x0A	; 10
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <HID_Device_ProcessControlRequest+0x6c>
    15a4:	cd c0       	rjmp	.+410    	; 0x1740 <HID_Device_ProcessControlRequest+0x206>
    15a6:	8b 30       	cpi	r24, 0x0B	; 11
    15a8:	09 f4       	brne	.+2      	; 0x15ac <HID_Device_ProcessControlRequest+0x72>
    15aa:	b6 c0       	rjmp	.+364    	; 0x1718 <HID_Device_ProcessControlRequest+0x1de>
    15ac:	89 30       	cpi	r24, 0x09	; 9
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <HID_Device_ProcessControlRequest+0x78>
    15b0:	ff c0       	rjmp	.+510    	; 0x17b0 <HID_Device_ProcessControlRequest+0x276>
    15b2:	52 c0       	rjmp	.+164    	; 0x1658 <HID_Device_ProcessControlRequest+0x11e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    15b4:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <USB_ControlRequest>
    15b8:	81 3a       	cpi	r24, 0xA1	; 161
    15ba:	09 f0       	breq	.+2      	; 0x15be <HID_Device_ProcessControlRequest+0x84>
    15bc:	f9 c0       	rjmp	.+498    	; 0x17b0 <HID_Device_ProcessControlRequest+0x276>
			{
    15be:	ad b6       	in	r10, 0x3d	; 61
    15c0:	be b6       	in	r11, 0x3e	; 62
				uint16_t ReportSize = 0;
    15c2:	1a 82       	std	Y+2, r1	; 0x02
    15c4:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    15c6:	e4 ea       	ldi	r30, 0xA4	; 164
    15c8:	f8 e0       	ldi	r31, 0x08	; 8
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	73 80       	ldd	r7, Z+3	; 0x03
    15ce:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    15d0:	7a 94       	dec	r7
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    15d2:	f6 01       	movw	r30, r12
    15d4:	40 85       	ldd	r20, Z+8	; 0x08
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	8d b7       	in	r24, 0x3d	; 61
    15da:	9e b7       	in	r25, 0x3e	; 62
    15dc:	84 1b       	sub	r24, r20
    15de:	95 0b       	sbc	r25, r21
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	9e bf       	out	0x3e, r25	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	8d bf       	out	0x3d, r24	; 61
    15ea:	ed b7       	in	r30, 0x3d	; 61
    15ec:	fe b7       	in	r31, 0x3e	; 62
    15ee:	31 96       	adiw	r30, 0x01	; 1
    15f0:	4f 01       	movw	r8, r30

				memset(ReportData, 0, sizeof(ReportData));
    15f2:	60 e0       	ldi	r22, 0x00	; 0
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	cf 01       	movw	r24, r30
    15f8:	0e 94 8a 14 	call	0x2914	; 0x2914 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    15fc:	8e 01       	movw	r16, r28
    15fe:	0f 5f       	subi	r16, 0xFF	; 255
    1600:	1f 4f       	sbci	r17, 0xFF	; 255
    1602:	94 01       	movw	r18, r8
    1604:	47 2d       	mov	r20, r7
    1606:	be 01       	movw	r22, r28
    1608:	6d 5f       	subi	r22, 0xFD	; 253
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	c6 01       	movw	r24, r12
    160e:	0d db       	rcall	.-2534   	; 0xc2a <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1610:	f6 01       	movw	r30, r12
    1612:	86 81       	ldd	r24, Z+6	; 0x06
    1614:	97 81       	ldd	r25, Z+7	; 0x07
    1616:	00 97       	sbiw	r24, 0x00	; 0
    1618:	29 f0       	breq	.+10     	; 0x1624 <HID_Device_ProcessControlRequest+0xea>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
					       HIDInterfaceInfo->Config.PrevReportINBufferSize);
    161a:	40 85       	ldd	r20, Z+8	; 0x08

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	b4 01       	movw	r22, r8
    1620:	0e 94 81 14 	call	0x2902	; 0x2902 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1624:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1628:	e8 ee       	ldi	r30, 0xE8	; 232
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	87 7f       	andi	r24, 0xF7	; 247
    1630:	80 83       	st	Z, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1636:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    163a:	69 81       	ldd	r22, Y+1	; 0x01
    163c:	7a 81       	ldd	r23, Y+2	; 0x02
    163e:	c4 01       	movw	r24, r8
    1640:	4a d4       	rcall	.+2196   	; 0x1ed6 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1642:	e8 ee       	ldi	r30, 0xE8	; 232
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	8b 77       	andi	r24, 0x7B	; 123
    164a:	80 83       	st	Z, r24
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	be be       	out	0x3e, r11	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	ad be       	out	0x3d, r10	; 61
    1656:	ac c0       	rjmp	.+344    	; 0x17b0 <HID_Device_ProcessControlRequest+0x276>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1658:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <USB_ControlRequest>
    165c:	81 32       	cpi	r24, 0x21	; 33
    165e:	09 f0       	breq	.+2      	; 0x1662 <HID_Device_ProcessControlRequest+0x128>
    1660:	a7 c0       	rjmp	.+334    	; 0x17b0 <HID_Device_ProcessControlRequest+0x276>
			{
    1662:	6d b6       	in	r6, 0x3d	; 61
    1664:	7e b6       	in	r7, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1666:	e4 ea       	ldi	r30, 0xA4	; 164
    1668:	f8 e0       	ldi	r31, 0x08	; 8
    166a:	06 81       	ldd	r16, Z+6	; 0x06
    166c:	17 81       	ldd	r17, Z+7	; 0x07
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    166e:	42 80       	ldd	r4, Z+2	; 0x02
    1670:	53 80       	ldd	r5, Z+3	; 0x03
    1672:	34 2c       	mov	r3, r4
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1674:	5a 94       	dec	r5
				uint8_t  ReportData[ReportSize];
    1676:	8d b7       	in	r24, 0x3d	; 61
    1678:	9e b7       	in	r25, 0x3e	; 62
    167a:	80 1b       	sub	r24, r16
    167c:	91 0b       	sbc	r25, r17
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	9e bf       	out	0x3e, r25	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	8d bf       	out	0x3d, r24	; 61
    1688:	ed b7       	in	r30, 0x3d	; 61
    168a:	fe b7       	in	r31, 0x3e	; 62
    168c:	31 96       	adiw	r30, 0x01	; 1
    168e:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1690:	0f 2e       	mov	r0, r31
    1692:	f8 ee       	ldi	r31, 0xE8	; 232
    1694:	af 2e       	mov	r10, r31
    1696:	b1 2c       	mov	r11, r1
    1698:	f0 2d       	mov	r31, r0
    169a:	f5 01       	movw	r30, r10
    169c:	80 81       	ld	r24, Z
    169e:	87 7f       	andi	r24, 0xF7	; 247
    16a0:	80 83       	st	Z, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    16a2:	b8 01       	movw	r22, r16
    16a4:	c4 01       	movw	r24, r8
    16a6:	7f d4       	rcall	.+2302   	; 0x1fa6 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16a8:	f5 01       	movw	r30, r10
    16aa:	80 81       	ld	r24, Z
    16ac:	8e 77       	andi	r24, 0x7E	; 126
    16ae:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    16b0:	44 20       	and	r4, r4
    16b2:	19 f0       	breq	.+6      	; 0x16ba <HID_Device_ProcessControlRequest+0x180>
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <HID_Device_ProcessControlRequest+0x184>
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    16be:	21 e0       	ldi	r18, 0x01	; 1
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	31 10       	cpse	r3, r1
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <HID_Device_ProcessControlRequest+0x190>
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	28 0d       	add	r18, r8
    16cc:	39 1d       	adc	r19, r9

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    16ce:	08 1b       	sub	r16, r24
    16d0:	19 0b       	sbc	r17, r25
    16d2:	45 2d       	mov	r20, r5
    16d4:	64 2d       	mov	r22, r4
    16d6:	c6 01       	movw	r24, r12
    16d8:	57 db       	rcall	.-2386   	; 0xd88 <CALLBACK_HID_Device_ProcessHIDReport>
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	7e be       	out	0x3e, r7	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	6d be       	out	0x3d, r6	; 61
    16e4:	65 c0       	rjmp	.+202    	; 0x17b0 <HID_Device_ProcessControlRequest+0x276>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    16e6:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <USB_ControlRequest>
    16ea:	81 3a       	cpi	r24, 0xA1	; 161
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <HID_Device_ProcessControlRequest+0x1b6>
    16ee:	60 c0       	rjmp	.+192    	; 0x17b0 <HID_Device_ProcessControlRequest+0x276>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    16f0:	e8 ee       	ldi	r30, 0xE8	; 232
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	87 7f       	andi	r24, 0xF7	; 247
    16f8:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    16fe:	80 ff       	sbrs	r24, 0
    1700:	fc cf       	rjmp	.-8      	; 0x16fa <HID_Device_ProcessControlRequest+0x1c0>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1702:	f6 01       	movw	r30, r12
    1704:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1706:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    170a:	e8 ee       	ldi	r30, 0xE8	; 232
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1712:	80 83       	st	Z, r24
    1714:	09 d5       	rcall	.+2578   	; 0x2128 <Endpoint_ClearStatusStage>
    1716:	4c c0       	rjmp	.+152    	; 0x17b0 <HID_Device_ProcessControlRequest+0x276>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1718:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <USB_ControlRequest>
    171c:	81 32       	cpi	r24, 0x21	; 33
    171e:	09 f0       	breq	.+2      	; 0x1722 <HID_Device_ProcessControlRequest+0x1e8>
    1720:	47 c0       	rjmp	.+142    	; 0x17b0 <HID_Device_ProcessControlRequest+0x276>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1722:	e8 ee       	ldi	r30, 0xE8	; 232
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    172a:	80 83       	st	Z, r24
    172c:	fd d4       	rcall	.+2554   	; 0x2128 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    172e:	90 91 a6 08 	lds	r25, 0x08A6	; 0x8008a6 <USB_ControlRequest+0x2>
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	91 11       	cpse	r25, r1
    1736:	01 c0       	rjmp	.+2      	; 0x173a <HID_Device_ProcessControlRequest+0x200>
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	f6 01       	movw	r30, r12
    173c:	81 87       	std	Z+9, r24	; 0x09
    173e:	38 c0       	rjmp	.+112    	; 0x17b0 <HID_Device_ProcessControlRequest+0x276>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1740:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <USB_ControlRequest>
    1744:	81 32       	cpi	r24, 0x21	; 33
    1746:	a1 f5       	brne	.+104    	; 0x17b0 <HID_Device_ProcessControlRequest+0x276>
    1748:	e8 ee       	ldi	r30, 0xE8	; 232
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1750:	80 83       	st	Z, r24
    1752:	ea d4       	rcall	.+2516   	; 0x2128 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1754:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <USB_ControlRequest+0x2>
    1758:	90 91 a7 08 	lds	r25, 0x08A7	; 0x8008a7 <USB_ControlRequest+0x3>
    175c:	88 27       	eor	r24, r24
    175e:	00 24       	eor	r0, r0
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	00 1c       	adc	r0, r0
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	00 1c       	adc	r0, r0
    176c:	89 2f       	mov	r24, r25
    176e:	90 2d       	mov	r25, r0
    1770:	f6 01       	movw	r30, r12
    1772:	95 87       	std	Z+13, r25	; 0x0d
    1774:	84 87       	std	Z+12, r24	; 0x0c
    1776:	1c c0       	rjmp	.+56     	; 0x17b0 <HID_Device_ProcessControlRequest+0x276>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1778:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <USB_ControlRequest>
    177c:	81 3a       	cpi	r24, 0xA1	; 161
    177e:	c1 f4       	brne	.+48     	; 0x17b0 <HID_Device_ProcessControlRequest+0x276>
    1780:	e8 ee       	ldi	r30, 0xE8	; 232
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	87 7f       	andi	r24, 0xF7	; 247
    1788:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    178a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    178e:	80 ff       	sbrs	r24, 0
    1790:	fc cf       	rjmp	.-8      	; 0x178a <HID_Device_ProcessControlRequest+0x250>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1792:	f6 01       	movw	r30, r12
    1794:	84 85       	ldd	r24, Z+12	; 0x0c
    1796:	95 85       	ldd	r25, Z+13	; 0x0d
    1798:	96 95       	lsr	r25
    179a:	87 95       	ror	r24
    179c:	96 95       	lsr	r25
    179e:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    17a0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17a4:	e8 ee       	ldi	r30, 0xE8	; 232
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    17ac:	80 83       	st	Z, r24
    17ae:	bc d4       	rcall	.+2424   	; 0x2128 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	fe be       	out	0x3e, r15	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	ed be       	out	0x3d, r14	; 61
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	ff 90       	pop	r15
    17ca:	ef 90       	pop	r14
    17cc:	df 90       	pop	r13
    17ce:	cf 90       	pop	r12
    17d0:	bf 90       	pop	r11
    17d2:	af 90       	pop	r10
    17d4:	9f 90       	pop	r9
    17d6:	8f 90       	pop	r8
    17d8:	7f 90       	pop	r7
    17da:	6f 90       	pop	r6
    17dc:	5f 90       	pop	r5
    17de:	4f 90       	pop	r4
    17e0:	3f 90       	pop	r3
    17e2:	08 95       	ret

000017e4 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    17e4:	fc 01       	movw	r30, r24
    17e6:	39 96       	adiw	r30, 0x09	; 9
    17e8:	27 e0       	ldi	r18, 0x07	; 7
    17ea:	df 01       	movw	r26, r30
    17ec:	1d 92       	st	X+, r1
    17ee:	2a 95       	dec	r18
    17f0:	e9 f7       	brne	.-6      	; 0x17ec <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    17f2:	21 e0       	ldi	r18, 0x01	; 1
    17f4:	fc 01       	movw	r30, r24
    17f6:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    17f8:	24 ef       	ldi	r18, 0xF4	; 244
    17fa:	31 e0       	ldi	r19, 0x01	; 1
    17fc:	35 87       	std	Z+13, r19	; 0x0d
    17fe:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1800:	23 e0       	ldi	r18, 0x03	; 3
    1802:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1804:	61 e0       	ldi	r22, 0x01	; 1
    1806:	01 96       	adiw	r24, 0x01	; 1
    1808:	49 c4       	rjmp	.+2194   	; 0x209c <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    180a:	08 95       	ret

0000180c <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    180c:	5f 92       	push	r5
    180e:	6f 92       	push	r6
    1810:	7f 92       	push	r7
    1812:	8f 92       	push	r8
    1814:	9f 92       	push	r9
    1816:	af 92       	push	r10
    1818:	bf 92       	push	r11
    181a:	cf 92       	push	r12
    181c:	df 92       	push	r13
    181e:	ef 92       	push	r14
    1820:	ff 92       	push	r15
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	00 d0       	rcall	.+0      	; 0x182c <HID_Device_USBTask+0x20>
    182c:	1f 92       	push	r1
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1834:	ad b6       	in	r10, 0x3d	; 61
    1836:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1838:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <USB_DeviceState>
    183c:	84 30       	cpi	r24, 0x04	; 4
    183e:	09 f0       	breq	.+2      	; 0x1842 <HID_Device_USBTask+0x36>
    1840:	8f c0       	rjmp	.+286    	; 0x1960 <HID_Device_USBTask+0x154>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1842:	f7 01       	movw	r30, r14
    1844:	22 85       	ldd	r18, Z+10	; 0x0a
    1846:	33 85       	ldd	r19, Z+11	; 0x0b
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1848:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    184c:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1850:	28 17       	cp	r18, r24
    1852:	39 07       	cpc	r19, r25
    1854:	09 f4       	brne	.+2      	; 0x1858 <HID_Device_USBTask+0x4c>
    1856:	84 c0       	rjmp	.+264    	; 0x1960 <HID_Device_USBTask+0x154>
		#else
		return;
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
    1858:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    185a:	8f 70       	andi	r24, 0x0F	; 15
    185c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1860:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
    1864:	85 ff       	sbrs	r24, 5
    1866:	7c c0       	rjmp	.+248    	; 0x1960 <HID_Device_USBTask+0x154>
	{
    1868:	8d b6       	in	r8, 0x3d	; 61
    186a:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    186c:	40 85       	ldd	r20, Z+8	; 0x08
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	8d b7       	in	r24, 0x3d	; 61
    1872:	9e b7       	in	r25, 0x3e	; 62
    1874:	84 1b       	sub	r24, r20
    1876:	95 0b       	sbc	r25, r21
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	9e bf       	out	0x3e, r25	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	8d bf       	out	0x3d, r24	; 61
    1882:	ed b7       	in	r30, 0x3d	; 61
    1884:	fe b7       	in	r31, 0x3e	; 62
    1886:	31 96       	adiw	r30, 0x01	; 1
    1888:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    188a:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    188c:	1a 82       	std	Y+2, r1	; 0x02
    188e:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    1890:	60 e0       	ldi	r22, 0x00	; 0
    1892:	70 e0       	ldi	r23, 0x00	; 0
    1894:	cf 01       	movw	r24, r30
    1896:	0e 94 8a 14 	call	0x2914	; 0x2914 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    189a:	8e 01       	movw	r16, r28
    189c:	0f 5f       	subi	r16, 0xFF	; 255
    189e:	1f 4f       	sbci	r17, 0xFF	; 255
    18a0:	96 01       	movw	r18, r12
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	be 01       	movw	r22, r28
    18a6:	6d 5f       	subi	r22, 0xFD	; 253
    18a8:	7f 4f       	sbci	r23, 0xFF	; 255
    18aa:	c7 01       	movw	r24, r14
    18ac:	be d9       	rcall	.-3204   	; 0xc2a <CALLBACK_HID_Device_CreateHIDReport>
    18ae:	68 2e       	mov	r6, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    18b0:	f7 01       	movw	r30, r14
    18b2:	84 85       	ldd	r24, Z+12	; 0x0c
    18b4:	95 85       	ldd	r25, Z+13	; 0x0d
    18b6:	89 2b       	or	r24, r25
    18b8:	31 f0       	breq	.+12     	; 0x18c6 <HID_Device_USBTask+0xba>
    18ba:	86 85       	ldd	r24, Z+14	; 0x0e
    18bc:	97 85       	ldd	r25, Z+15	; 0x0f
    18be:	89 2b       	or	r24, r25
    18c0:	21 f0       	breq	.+8      	; 0x18ca <HID_Device_USBTask+0xbe>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	03 c0       	rjmp	.+6      	; 0x18cc <HID_Device_USBTask+0xc0>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	01 c0       	rjmp	.+2      	; 0x18cc <HID_Device_USBTask+0xc0>
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	81 70       	andi	r24, 0x01	; 1
    18ce:	78 2e       	mov	r7, r24

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    18d0:	f7 01       	movw	r30, r14
    18d2:	06 81       	ldd	r16, Z+6	; 0x06
    18d4:	17 81       	ldd	r17, Z+7	; 0x07
    18d6:	01 15       	cp	r16, r1
    18d8:	11 05       	cpc	r17, r1
    18da:	99 f0       	breq	.+38     	; 0x1902 <HID_Device_USBTask+0xf6>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    18dc:	49 81       	ldd	r20, Y+1	; 0x01
    18de:	5a 81       	ldd	r21, Y+2	; 0x02
    18e0:	b8 01       	movw	r22, r16
    18e2:	c6 01       	movw	r24, r12
    18e4:	0e 94 74 14 	call	0x28e8	; 0x28e8 <memcmp>
    18e8:	55 24       	eor	r5, r5
    18ea:	53 94       	inc	r5
    18ec:	89 2b       	or	r24, r25
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <HID_Device_USBTask+0xe6>
    18f0:	51 2c       	mov	r5, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    18f2:	f7 01       	movw	r30, r14
    18f4:	40 85       	ldd	r20, Z+8	; 0x08
    18f6:	50 e0       	ldi	r21, 0x00	; 0
    18f8:	b6 01       	movw	r22, r12
    18fa:	c8 01       	movw	r24, r16
    18fc:	0e 94 81 14 	call	0x2902	; 0x2902 <memcpy>
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <HID_Device_USBTask+0xf8>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1902:	51 2c       	mov	r5, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	9a 81       	ldd	r25, Y+2	; 0x02
    1908:	89 2b       	or	r24, r25
    190a:	f1 f0       	breq	.+60     	; 0x1948 <HID_Device_USBTask+0x13c>
    190c:	61 10       	cpse	r6, r1
    190e:	04 c0       	rjmp	.+8      	; 0x1918 <HID_Device_USBTask+0x10c>
    1910:	51 10       	cpse	r5, r1
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <HID_Device_USBTask+0x10c>
    1914:	77 20       	and	r7, r7
    1916:	c1 f0       	breq	.+48     	; 0x1948 <HID_Device_USBTask+0x13c>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1918:	f7 01       	movw	r30, r14
    191a:	84 85       	ldd	r24, Z+12	; 0x0c
    191c:	95 85       	ldd	r25, Z+13	; 0x0d
    191e:	97 87       	std	Z+15, r25	; 0x0f
    1920:	86 87       	std	Z+14, r24	; 0x0e

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
    1922:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1924:	8f 70       	andi	r24, 0x0F	; 15
    1926:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			if (ReportID)
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    192e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1932:	69 81       	ldd	r22, Y+1	; 0x01
    1934:	7a 81       	ldd	r23, Y+2	; 0x02
    1936:	40 e0       	ldi	r20, 0x00	; 0
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	c6 01       	movw	r24, r12
    193c:	eb d1       	rcall	.+982    	; 0x1d14 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    193e:	e8 ee       	ldi	r30, 0xE8	; 232
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	8e 77       	andi	r24, 0x7E	; 126
    1946:	80 83       	st	Z, r24
    1948:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    194c:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1950:	f7 01       	movw	r30, r14
    1952:	93 87       	std	Z+11, r25	; 0x0b
    1954:	82 87       	std	Z+10, r24	; 0x0a
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	9e be       	out	0x3e, r9	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	8d be       	out	0x3d, r8	; 61
	}
}
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	be be       	out	0x3e, r11	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	ad be       	out	0x3d, r10	; 61
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	1f 91       	pop	r17
    1976:	0f 91       	pop	r16
    1978:	ff 90       	pop	r15
    197a:	ef 90       	pop	r14
    197c:	df 90       	pop	r13
    197e:	cf 90       	pop	r12
    1980:	bf 90       	pop	r11
    1982:	af 90       	pop	r10
    1984:	9f 90       	pop	r9
    1986:	8f 90       	pop	r8
    1988:	7f 90       	pop	r7
    198a:	6f 90       	pop	r6
    198c:	5f 90       	pop	r5
    198e:	08 95       	ret

00001990 <MS_Device_ReadInCommandBlock>:
		MSInterfaceInfo->State.IsMassStoreReset = false;
	}
}

static bool MS_Device_ReadInCommandBlock(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	00 d0       	rcall	.+0      	; 0x199a <MS_Device_ReadInCommandBlock+0xa>
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	8c 01       	movw	r16, r24
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    19a0:	dc 01       	movw	r26, r24
    19a2:	16 96       	adiw	r26, 0x06	; 6
    19a4:	8c 91       	ld	r24, X
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19a6:	8f 70       	andi	r24, 0x0F	; 15
    19a8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	BytesProcessed = 0;
    19ac:	1a 82       	std	Y+2, r1	; 0x02
    19ae:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    19b0:	04 c0       	rjmp	.+8      	; 0x19ba <MS_Device_ReadInCommandBlock+0x2a>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    19b2:	f8 01       	movw	r30, r16
    19b4:	80 ad       	ldd	r24, Z+56	; 0x38
    19b6:	81 11       	cpse	r24, r1
    19b8:	52 c0       	rjmp	.+164    	; 0x1a5e <MS_Device_ReadInCommandBlock+0xce>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    19ba:	ae 01       	movw	r20, r28
    19bc:	4f 5f       	subi	r20, 0xFF	; 255
    19be:	5f 4f       	sbci	r21, 0xFF	; 255
    19c0:	6f e0       	ldi	r22, 0x0F	; 15
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	c8 01       	movw	r24, r16
    19c6:	0c 96       	adiw	r24, 0x0c	; 12
    19c8:	3d d2       	rcall	.+1146   	; 0x1e44 <Endpoint_Read_Stream_LE>
    19ca:	85 30       	cpi	r24, 0x05	; 5
    19cc:	91 f3       	breq	.-28     	; 0x19b2 <MS_Device_ReadInCommandBlock+0x22>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    19ce:	f8 01       	movw	r30, r16
    19d0:	84 85       	ldd	r24, Z+12	; 0x0c
    19d2:	95 85       	ldd	r25, Z+13	; 0x0d
    19d4:	a6 85       	ldd	r26, Z+14	; 0x0e
    19d6:	b7 85       	ldd	r27, Z+15	; 0x0f
    19d8:	85 35       	cpi	r24, 0x55	; 85
    19da:	93 45       	sbci	r25, 0x53	; 83
    19dc:	a2 44       	sbci	r26, 0x42	; 66
    19de:	b3 44       	sbci	r27, 0x43	; 67
    19e0:	a1 f4       	brne	.+40     	; 0x1a0a <MS_Device_ReadInCommandBlock+0x7a>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    19e2:	d8 01       	movw	r26, r16
    19e4:	59 96       	adiw	r26, 0x19	; 25
    19e6:	9c 91       	ld	r25, X
    19e8:	59 97       	sbiw	r26, 0x19	; 25
    19ea:	1b 96       	adiw	r26, 0x0b	; 11
    19ec:	8c 91       	ld	r24, X
    19ee:	1b 97       	sbiw	r26, 0x0b	; 11
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    19f0:	98 17       	cp	r25, r24
    19f2:	58 f4       	brcc	.+22     	; 0x1a0a <MS_Device_ReadInCommandBlock+0x7a>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    19f4:	58 96       	adiw	r26, 0x18	; 24
    19f6:	8c 91       	ld	r24, X
    19f8:	58 97       	sbiw	r26, 0x18	; 24
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    19fa:	8f 71       	andi	r24, 0x1F	; 31
    19fc:	31 f4       	brne	.+12     	; 0x1a0a <MS_Device_ReadInCommandBlock+0x7a>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    19fe:	5a 96       	adiw	r26, 0x1a	; 26
    1a00:	8c 91       	ld	r24, X
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1a02:	88 23       	and	r24, r24
    1a04:	11 f0       	breq	.+4      	; 0x1a0a <MS_Device_ReadInCommandBlock+0x7a>
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    1a06:	81 31       	cpi	r24, 0x11	; 17
    1a08:	80 f0       	brcs	.+32     	; 0x1a2a <MS_Device_ReadInCommandBlock+0x9a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1a0a:	eb ee       	ldi	r30, 0xEB	; 235
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	80 62       	ori	r24, 0x20	; 32
    1a12:	80 83       	st	Z, r24
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    1a14:	d8 01       	movw	r26, r16
    1a16:	11 96       	adiw	r26, 0x01	; 1
    1a18:	8c 91       	ld	r24, X
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a1a:	8f 70       	andi	r24, 0x0F	; 15
    1a1c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1a20:	80 81       	ld	r24, Z
    1a22:	80 62       	ori	r24, 0x20	; 32
    1a24:	80 83       	st	Z, r24
		Endpoint_StallTransaction();

		return false;
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	1d c0       	rjmp	.+58     	; 0x1a64 <MS_Device_ReadInCommandBlock+0xd4>
	}

	BytesProcessed = 0;
    1a2a:	1a 82       	std	Y+2, r1	; 0x02
    1a2c:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1a2e:	04 c0       	rjmp	.+8      	; 0x1a38 <MS_Device_ReadInCommandBlock+0xa8>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1a30:	f8 01       	movw	r30, r16
    1a32:	80 ad       	ldd	r24, Z+56	; 0x38
    1a34:	81 11       	cpse	r24, r1
    1a36:	15 c0       	rjmp	.+42     	; 0x1a62 <MS_Device_ReadInCommandBlock+0xd2>
		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
    1a38:	d8 01       	movw	r26, r16
    1a3a:	5a 96       	adiw	r26, 0x1a	; 26
    1a3c:	6c 91       	ld	r22, X

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1a3e:	70 e0       	ldi	r23, 0x00	; 0
    1a40:	ae 01       	movw	r20, r28
    1a42:	4f 5f       	subi	r20, 0xFF	; 255
    1a44:	5f 4f       	sbci	r21, 0xFF	; 255
    1a46:	c8 01       	movw	r24, r16
    1a48:	4b 96       	adiw	r24, 0x1b	; 27
    1a4a:	fc d1       	rcall	.+1016   	; 0x1e44 <Endpoint_Read_Stream_LE>
    1a4c:	85 30       	cpi	r24, 0x05	; 5
    1a4e:	81 f3       	breq	.-32     	; 0x1a30 <MS_Device_ReadInCommandBlock+0xa0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a50:	e8 ee       	ldi	r30, 0xE8	; 232
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	8b 77       	andi	r24, 0x7B	; 123
    1a58:	80 83       	st	Z, r24
		  return false;
	}

	Endpoint_ClearOUT();

	return true;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	03 c0       	rjmp	.+6      	; 0x1a64 <MS_Device_ReadInCommandBlock+0xd4>
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	01 c0       	rjmp	.+2      	; 0x1a64 <MS_Device_ReadInCommandBlock+0xd4>
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
    1a62:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_ClearOUT();

	return true;
}
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	1f 91       	pop	r17
    1a6e:	0f 91       	pop	r16
    1a70:	08 95       	ret

00001a72 <MS_Device_ReturnCommandStatus>:

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <MS_Device_ReturnCommandStatus+0xa>
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	fc 01       	movw	r30, r24
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    1a82:	86 81       	ldd	r24, Z+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a84:	8f 70       	andi	r24, 0x0F	; 15
    1a86:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1a8a:	03 c0       	rjmp	.+6      	; 0x1a92 <MS_Device_ReturnCommandStatus+0x20>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1a8c:	80 ad       	ldd	r24, Z+56	; 0x38
    1a8e:	81 11       	cpse	r24, r1
    1a90:	27 c0       	rjmp	.+78     	; 0x1ae0 <MS_Device_ReturnCommandStatus+0x6e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1a92:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    1a96:	85 fd       	sbrc	r24, 5
    1a98:	f9 cf       	rjmp	.-14     	; 0x1a8c <MS_Device_ReturnCommandStatus+0x1a>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    1a9a:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a9c:	8f 70       	andi	r24, 0x0F	; 15
    1a9e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1aa2:	03 c0       	rjmp	.+6      	; 0x1aaa <MS_Device_ReturnCommandStatus+0x38>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1aa4:	80 ad       	ldd	r24, Z+56	; 0x38
    1aa6:	81 11       	cpse	r24, r1
    1aa8:	1b c0       	rjmp	.+54     	; 0x1ae0 <MS_Device_ReturnCommandStatus+0x6e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1aaa:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    1aae:	85 fd       	sbrc	r24, 5
    1ab0:	f9 cf       	rjmp	.-14     	; 0x1aa4 <MS_Device_ReturnCommandStatus+0x32>
    1ab2:	8f 01       	movw	r16, r30

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    1ab4:	1a 82       	std	Y+2, r1	; 0x02
    1ab6:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1ab8:	04 c0       	rjmp	.+8      	; 0x1ac2 <MS_Device_ReturnCommandStatus+0x50>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1aba:	f8 01       	movw	r30, r16
    1abc:	80 ad       	ldd	r24, Z+56	; 0x38
    1abe:	81 11       	cpse	r24, r1
    1ac0:	0f c0       	rjmp	.+30     	; 0x1ae0 <MS_Device_ReturnCommandStatus+0x6e>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1ac2:	ae 01       	movw	r20, r28
    1ac4:	4f 5f       	subi	r20, 0xFF	; 255
    1ac6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac8:	6d e0       	ldi	r22, 0x0D	; 13
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	c8 01       	movw	r24, r16
    1ace:	8b 96       	adiw	r24, 0x2b	; 43
    1ad0:	21 d1       	rcall	.+578    	; 0x1d14 <Endpoint_Write_Stream_LE>
    1ad2:	85 30       	cpi	r24, 0x05	; 5
    1ad4:	91 f3       	breq	.-28     	; 0x1aba <MS_Device_ReturnCommandStatus+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ad6:	e8 ee       	ldi	r30, 0xE8	; 232
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	8e 77       	andi	r24, 0x7E	; 126
    1ade:	80 83       	st	Z, r24
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_ClearIN();
}
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	df 91       	pop	r29
    1ae6:	cf 91       	pop	r28
    1ae8:	1f 91       	pop	r17
    1aea:	0f 91       	pop	r16
    1aec:	08 95       	ret

00001aee <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	fc 01       	movw	r30, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1af4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    1af8:	93 ff       	sbrs	r25, 3
    1afa:	34 c0       	rjmp	.+104    	; 0x1b64 <MS_Device_ProcessControlRequest+0x76>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1afc:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <USB_ControlRequest+0x4>
    1b00:	90 91 a9 08 	lds	r25, 0x08A9	; 0x8008a9 <USB_ControlRequest+0x5>
    1b04:	20 81       	ld	r18, Z
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	82 17       	cp	r24, r18
    1b0a:	93 07       	cpc	r25, r19
    1b0c:	59 f5       	brne	.+86     	; 0x1b64 <MS_Device_ProcessControlRequest+0x76>
    1b0e:	ef 01       	movw	r28, r30
	  return;

	switch (USB_ControlRequest.bRequest)
    1b10:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <USB_ControlRequest+0x1>
    1b14:	8e 3f       	cpi	r24, 0xFE	; 254
    1b16:	79 f0       	breq	.+30     	; 0x1b36 <MS_Device_ProcessControlRequest+0x48>
    1b18:	8f 3f       	cpi	r24, 0xFF	; 255
    1b1a:	21 f5       	brne	.+72     	; 0x1b64 <MS_Device_ProcessControlRequest+0x76>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1b1c:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <USB_ControlRequest>
    1b20:	81 32       	cpi	r24, 0x21	; 33
    1b22:	01 f5       	brne	.+64     	; 0x1b64 <MS_Device_ProcessControlRequest+0x76>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b24:	e8 ee       	ldi	r30, 0xE8	; 232
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	87 7f       	andi	r24, 0xF7	; 247
    1b2c:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1b2e:	fc d2       	rcall	.+1528   	; 0x2128 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	88 af       	std	Y+56, r24	; 0x38
    1b34:	17 c0       	rjmp	.+46     	; 0x1b64 <MS_Device_ProcessControlRequest+0x76>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1b36:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <USB_ControlRequest>
    1b3a:	81 3a       	cpi	r24, 0xA1	; 161
    1b3c:	99 f4       	brne	.+38     	; 0x1b64 <MS_Device_ProcessControlRequest+0x76>
    1b3e:	e8 ee       	ldi	r30, 0xE8	; 232
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	87 7f       	andi	r24, 0xF7	; 247
    1b46:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1b4c:	80 ff       	sbrs	r24, 0
    1b4e:	fc cf       	rjmp	.-8      	; 0x1b48 <MS_Device_ProcessControlRequest+0x5a>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    1b50:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b52:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b54:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b58:	e8 ee       	ldi	r30, 0xE8	; 232
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1b60:	80 83       	st	Z, r24
    1b62:	e2 d2       	rcall	.+1476   	; 0x2128 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	08 95       	ret

00001b6a <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1b70:	fc 01       	movw	r30, r24
    1b72:	3c 96       	adiw	r30, 0x0c	; 12
    1b74:	8d e2       	ldi	r24, 0x2D	; 45
    1b76:	df 01       	movw	r26, r30
    1b78:	1d 92       	st	X+, r1
    1b7a:	8a 95       	dec	r24
    1b7c:	e9 f7       	brne	.-6      	; 0x1b78 <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    1b7e:	82 e0       	ldi	r24, 0x02	; 2
    1b80:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    1b82:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    1b84:	61 e0       	ldi	r22, 0x01	; 1
    1b86:	ce 01       	movw	r24, r28
    1b88:	01 96       	adiw	r24, 0x01	; 1
    1b8a:	88 d2       	rcall	.+1296   	; 0x209c <Endpoint_ConfigureEndpointTable>
    1b8c:	88 23       	and	r24, r24
    1b8e:	21 f0       	breq	.+8      	; 0x1b98 <MS_Device_ConfigureEndpoints+0x2e>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1b90:	61 e0       	ldi	r22, 0x01	; 1
    1b92:	ce 01       	movw	r24, r28
    1b94:	06 96       	adiw	r24, 0x06	; 6
    1b96:	82 d2       	rcall	.+1284   	; 0x209c <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	08 95       	ret

00001b9e <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	ec 01       	movw	r28, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1ba4:	90 91 a3 08 	lds	r25, 0x08A3	; 0x8008a3 <USB_DeviceState>
    1ba8:	94 30       	cpi	r25, 0x04	; 4
    1baa:	09 f0       	breq	.+2      	; 0x1bae <MS_Device_USBTask+0x10>
    1bac:	72 c0       	rjmp	.+228    	; 0x1c92 <MS_Device_USBTask+0xf4>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    1bae:	8e 81       	ldd	r24, Y+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bb0:	8f 70       	andi	r24, 0x0F	; 15
    1bb2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1bb6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsOUTReceived())
    1bba:	82 ff       	sbrs	r24, 2
    1bbc:	39 c0       	rjmp	.+114    	; 0x1c30 <MS_Device_USBTask+0x92>
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	e7 de       	rcall	.-562    	; 0x1990 <MS_Device_ReadInCommandBlock>
    1bc2:	88 23       	and	r24, r24
    1bc4:	a9 f1       	breq	.+106    	; 0x1c30 <MS_Device_USBTask+0x92>
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1bc6:	88 8d       	ldd	r24, Y+24	; 0x18
    1bc8:	88 23       	and	r24, r24
    1bca:	24 f4       	brge	.+8      	; 0x1bd4 <MS_Device_USBTask+0x36>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bce:	8f 70       	andi	r24, 0x0F	; 15
    1bd0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	0e 94 de 05 	call	0xbbc	; 0xbbc <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1bda:	88 23       	and	r24, r24
    1bdc:	11 f0       	breq	.+4      	; 0x1be2 <MS_Device_USBTask+0x44>
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	01 c0       	rjmp	.+2      	; 0x1be4 <MS_Device_USBTask+0x46>
    1be2:	91 e0       	ldi	r25, 0x01	; 1
    1be4:	9f ab       	std	Y+55, r25	; 0x37
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1be6:	45 e5       	ldi	r20, 0x55	; 85
    1be8:	53 e5       	ldi	r21, 0x53	; 83
    1bea:	62 e4       	ldi	r22, 0x42	; 66
    1bec:	73 e5       	ldi	r23, 0x53	; 83
    1bee:	4b a7       	std	Y+43, r20	; 0x2b
    1bf0:	5c a7       	std	Y+44, r21	; 0x2c
    1bf2:	6d a7       	std	Y+45, r22	; 0x2d
    1bf4:	7e a7       	std	Y+46, r23	; 0x2e
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1bf6:	48 89       	ldd	r20, Y+16	; 0x10
    1bf8:	59 89       	ldd	r21, Y+17	; 0x11
    1bfa:	6a 89       	ldd	r22, Y+18	; 0x12
    1bfc:	7b 89       	ldd	r23, Y+19	; 0x13
    1bfe:	4f a7       	std	Y+47, r20	; 0x2f
    1c00:	58 ab       	std	Y+48, r21	; 0x30
    1c02:	69 ab       	std	Y+49, r22	; 0x31
    1c04:	7a ab       	std	Y+50, r23	; 0x32
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1c06:	4c 89       	ldd	r20, Y+20	; 0x14
    1c08:	5d 89       	ldd	r21, Y+21	; 0x15
    1c0a:	6e 89       	ldd	r22, Y+22	; 0x16
    1c0c:	7f 89       	ldd	r23, Y+23	; 0x17
    1c0e:	4b ab       	std	Y+51, r20	; 0x33
    1c10:	5c ab       	std	Y+52, r21	; 0x34
    1c12:	6d ab       	std	Y+53, r22	; 0x35
    1c14:	7e ab       	std	Y+54, r23	; 0x36

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    1c16:	81 11       	cpse	r24, r1
    1c18:	09 c0       	rjmp	.+18     	; 0x1c2c <MS_Device_USBTask+0x8e>
    1c1a:	45 2b       	or	r20, r21
    1c1c:	46 2b       	or	r20, r22
    1c1e:	47 2b       	or	r20, r23
    1c20:	29 f0       	breq	.+10     	; 0x1c2c <MS_Device_USBTask+0x8e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1c22:	eb ee       	ldi	r30, 0xEB	; 235
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	80 62       	ori	r24, 0x20	; 32
    1c2a:	80 83       	st	Z, r24
			  Endpoint_StallTransaction();

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	21 df       	rcall	.-446    	; 0x1a72 <MS_Device_ReturnCommandStatus>
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1c30:	88 ad       	ldd	r24, Y+56	; 0x38
    1c32:	88 23       	and	r24, r24
    1c34:	71 f1       	breq	.+92     	; 0x1c92 <MS_Device_USBTask+0xf4>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    1c36:	2e 81       	ldd	r18, Y+6	; 0x06
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1c38:	2f 70       	andi	r18, 0x0F	; 15
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	ac 01       	movw	r20, r24
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <MS_Device_USBTask+0xa8>
    1c42:	44 0f       	add	r20, r20
    1c44:	55 1f       	adc	r21, r21
    1c46:	2a 95       	dec	r18
    1c48:	e2 f7       	brpl	.-8      	; 0x1c42 <MS_Device_USBTask+0xa4>
    1c4a:	ea ee       	ldi	r30, 0xEA	; 234
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	40 83       	st	Z, r20
				UERST = 0;
    1c50:	10 82       	st	Z, r1
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    1c52:	29 81       	ldd	r18, Y+1	; 0x01
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1c54:	2f 70       	andi	r18, 0x0F	; 15
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <MS_Device_USBTask+0xbe>
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	2a 95       	dec	r18
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <MS_Device_USBTask+0xba>
    1c60:	80 83       	st	Z, r24
				UERST = 0;
    1c62:	10 82       	st	Z, r1

		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    1c64:	8e 81       	ldd	r24, Y+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c66:	8f 70       	andi	r24, 0x0F	; 15
    1c68:	a9 ee       	ldi	r26, 0xE9	; 233
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	8c 93       	st	X, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1c6e:	eb ee       	ldi	r30, 0xEB	; 235
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	80 61       	ori	r24, 0x10	; 16
    1c76:	80 83       	st	Z, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1c78:	80 81       	ld	r24, Z
    1c7a:	88 60       	ori	r24, 0x08	; 8
    1c7c:	80 83       	st	Z, r24
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1c80:	8f 70       	andi	r24, 0x0F	; 15
    1c82:	8c 93       	st	X, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1c84:	80 81       	ld	r24, Z
    1c86:	80 61       	ori	r24, 0x10	; 16
    1c88:	80 83       	st	Z, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1c8a:	80 81       	ld	r24, Z
    1c8c:	88 60       	ori	r24, 0x08	; 8
    1c8e:	80 83       	st	Z, r24
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1c90:	18 ae       	std	Y+56, r1	; 0x38
	}
}
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	08 95       	ret

00001c98 <Endpoint_Null_Stream>:
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1c98:	ef 92       	push	r14
    1c9a:	ff 92       	push	r15
    1c9c:	0f 93       	push	r16
    1c9e:	1f 93       	push	r17
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	ec 01       	movw	r28, r24
    1ca6:	7b 01       	movw	r14, r22
    1ca8:	60 d2       	rcall	.+1216   	; 0x216a <Endpoint_WaitUntilReady>
    1caa:	81 11       	cpse	r24, r1
    1cac:	2c c0       	rjmp	.+88     	; 0x1d06 <Endpoint_Null_Stream+0x6e>
    1cae:	e1 14       	cp	r14, r1
    1cb0:	f1 04       	cpc	r15, r1
    1cb2:	29 f0       	breq	.+10     	; 0x1cbe <Endpoint_Null_Stream+0x26>
    1cb4:	f7 01       	movw	r30, r14
    1cb6:	80 81       	ld	r24, Z
    1cb8:	91 81       	ldd	r25, Z+1	; 0x01
    1cba:	c8 1b       	sub	r28, r24
    1cbc:	d9 0b       	sbc	r29, r25
    1cbe:	00 e0       	ldi	r16, 0x00	; 0
    1cc0:	10 e0       	ldi	r17, 0x00	; 0
    1cc2:	1e c0       	rjmp	.+60     	; 0x1d00 <Endpoint_Null_Stream+0x68>
    1cc4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1cc8:	85 fd       	sbrc	r24, 5
    1cca:	15 c0       	rjmp	.+42     	; 0x1cf6 <Endpoint_Null_Stream+0x5e>
    1ccc:	e8 ee       	ldi	r30, 0xE8	; 232
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8e 77       	andi	r24, 0x7E	; 126
    1cd4:	80 83       	st	Z, r24
    1cd6:	e1 14       	cp	r14, r1
    1cd8:	f1 04       	cpc	r15, r1
    1cda:	49 f0       	breq	.+18     	; 0x1cee <Endpoint_Null_Stream+0x56>
    1cdc:	f7 01       	movw	r30, r14
    1cde:	80 81       	ld	r24, Z
    1ce0:	91 81       	ldd	r25, Z+1	; 0x01
    1ce2:	08 0f       	add	r16, r24
    1ce4:	19 1f       	adc	r17, r25
    1ce6:	11 83       	std	Z+1, r17	; 0x01
    1ce8:	00 83       	st	Z, r16
    1cea:	85 e0       	ldi	r24, 0x05	; 5
    1cec:	0c c0       	rjmp	.+24     	; 0x1d06 <Endpoint_Null_Stream+0x6e>
    1cee:	3d d2       	rcall	.+1146   	; 0x216a <Endpoint_WaitUntilReady>
    1cf0:	88 23       	and	r24, r24
    1cf2:	31 f0       	breq	.+12     	; 0x1d00 <Endpoint_Null_Stream+0x68>
    1cf4:	08 c0       	rjmp	.+16     	; 0x1d06 <Endpoint_Null_Stream+0x6e>
    1cf6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1cfa:	21 97       	sbiw	r28, 0x01	; 1
    1cfc:	0f 5f       	subi	r16, 0xFF	; 255
    1cfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1d00:	20 97       	sbiw	r28, 0x00	; 0
    1d02:	01 f7       	brne	.-64     	; 0x1cc4 <Endpoint_Null_Stream+0x2c>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	08 95       	ret

00001d14 <Endpoint_Write_Stream_LE>:
    1d14:	cf 92       	push	r12
    1d16:	df 92       	push	r13
    1d18:	ef 92       	push	r14
    1d1a:	ff 92       	push	r15
    1d1c:	0f 93       	push	r16
    1d1e:	1f 93       	push	r17
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
    1d24:	8c 01       	movw	r16, r24
    1d26:	eb 01       	movw	r28, r22
    1d28:	6a 01       	movw	r12, r20
    1d2a:	1f d2       	rcall	.+1086   	; 0x216a <Endpoint_WaitUntilReady>
    1d2c:	81 11       	cpse	r24, r1
    1d2e:	32 c0       	rjmp	.+100    	; 0x1d94 <Endpoint_Write_Stream_LE+0x80>
    1d30:	c1 14       	cp	r12, r1
    1d32:	d1 04       	cpc	r13, r1
    1d34:	39 f0       	breq	.+14     	; 0x1d44 <Endpoint_Write_Stream_LE+0x30>
    1d36:	f6 01       	movw	r30, r12
    1d38:	80 81       	ld	r24, Z
    1d3a:	91 81       	ldd	r25, Z+1	; 0x01
    1d3c:	c8 1b       	sub	r28, r24
    1d3e:	d9 0b       	sbc	r29, r25
    1d40:	08 0f       	add	r16, r24
    1d42:	19 1f       	adc	r17, r25
    1d44:	e1 2c       	mov	r14, r1
    1d46:	f1 2c       	mov	r15, r1
    1d48:	22 c0       	rjmp	.+68     	; 0x1d8e <Endpoint_Write_Stream_LE+0x7a>
    1d4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d4e:	85 fd       	sbrc	r24, 5
    1d50:	15 c0       	rjmp	.+42     	; 0x1d7c <Endpoint_Write_Stream_LE+0x68>
    1d52:	e8 ee       	ldi	r30, 0xE8	; 232
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	90 81       	ld	r25, Z
    1d58:	9e 77       	andi	r25, 0x7E	; 126
    1d5a:	90 83       	st	Z, r25
    1d5c:	c1 14       	cp	r12, r1
    1d5e:	d1 04       	cpc	r13, r1
    1d60:	49 f0       	breq	.+18     	; 0x1d74 <Endpoint_Write_Stream_LE+0x60>
    1d62:	f6 01       	movw	r30, r12
    1d64:	80 81       	ld	r24, Z
    1d66:	91 81       	ldd	r25, Z+1	; 0x01
    1d68:	e8 0e       	add	r14, r24
    1d6a:	f9 1e       	adc	r15, r25
    1d6c:	f1 82       	std	Z+1, r15	; 0x01
    1d6e:	e0 82       	st	Z, r14
    1d70:	85 e0       	ldi	r24, 0x05	; 5
    1d72:	10 c0       	rjmp	.+32     	; 0x1d94 <Endpoint_Write_Stream_LE+0x80>
    1d74:	fa d1       	rcall	.+1012   	; 0x216a <Endpoint_WaitUntilReady>
    1d76:	88 23       	and	r24, r24
    1d78:	51 f0       	breq	.+20     	; 0x1d8e <Endpoint_Write_Stream_LE+0x7a>
    1d7a:	0c c0       	rjmp	.+24     	; 0x1d94 <Endpoint_Write_Stream_LE+0x80>
    1d7c:	f8 01       	movw	r30, r16
    1d7e:	81 91       	ld	r24, Z+
    1d80:	8f 01       	movw	r16, r30
    1d82:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1d86:	21 97       	sbiw	r28, 0x01	; 1
    1d88:	ff ef       	ldi	r31, 0xFF	; 255
    1d8a:	ef 1a       	sub	r14, r31
    1d8c:	ff 0a       	sbc	r15, r31
    1d8e:	20 97       	sbiw	r28, 0x00	; 0
    1d90:	e1 f6       	brne	.-72     	; 0x1d4a <Endpoint_Write_Stream_LE+0x36>
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	ff 90       	pop	r15
    1d9e:	ef 90       	pop	r14
    1da0:	df 90       	pop	r13
    1da2:	cf 90       	pop	r12
    1da4:	08 95       	ret

00001da6 <Endpoint_Write_Stream_BE>:
    1da6:	cf 92       	push	r12
    1da8:	df 92       	push	r13
    1daa:	ef 92       	push	r14
    1dac:	ff 92       	push	r15
    1dae:	0f 93       	push	r16
    1db0:	1f 93       	push	r17
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	eb 01       	movw	r28, r22
    1db8:	7a 01       	movw	r14, r20
    1dba:	6b 01       	movw	r12, r22
    1dbc:	21 e0       	ldi	r18, 0x01	; 1
    1dbe:	c2 1a       	sub	r12, r18
    1dc0:	d1 08       	sbc	r13, r1
    1dc2:	c8 0e       	add	r12, r24
    1dc4:	d9 1e       	adc	r13, r25
    1dc6:	d1 d1       	rcall	.+930    	; 0x216a <Endpoint_WaitUntilReady>
    1dc8:	81 11       	cpse	r24, r1
    1dca:	33 c0       	rjmp	.+102    	; 0x1e32 <Endpoint_Write_Stream_BE+0x8c>
    1dcc:	e1 14       	cp	r14, r1
    1dce:	f1 04       	cpc	r15, r1
    1dd0:	39 f0       	breq	.+14     	; 0x1de0 <Endpoint_Write_Stream_BE+0x3a>
    1dd2:	f7 01       	movw	r30, r14
    1dd4:	80 81       	ld	r24, Z
    1dd6:	91 81       	ldd	r25, Z+1	; 0x01
    1dd8:	c8 1b       	sub	r28, r24
    1dda:	d9 0b       	sbc	r29, r25
    1ddc:	c8 1a       	sub	r12, r24
    1dde:	d9 0a       	sbc	r13, r25
    1de0:	00 e0       	ldi	r16, 0x00	; 0
    1de2:	10 e0       	ldi	r17, 0x00	; 0
    1de4:	23 c0       	rjmp	.+70     	; 0x1e2c <Endpoint_Write_Stream_BE+0x86>
    1de6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1dea:	85 fd       	sbrc	r24, 5
    1dec:	15 c0       	rjmp	.+42     	; 0x1e18 <Endpoint_Write_Stream_BE+0x72>
    1dee:	e8 ee       	ldi	r30, 0xE8	; 232
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	8e 77       	andi	r24, 0x7E	; 126
    1df6:	80 83       	st	Z, r24
    1df8:	e1 14       	cp	r14, r1
    1dfa:	f1 04       	cpc	r15, r1
    1dfc:	49 f0       	breq	.+18     	; 0x1e10 <Endpoint_Write_Stream_BE+0x6a>
    1dfe:	f7 01       	movw	r30, r14
    1e00:	80 81       	ld	r24, Z
    1e02:	91 81       	ldd	r25, Z+1	; 0x01
    1e04:	08 0f       	add	r16, r24
    1e06:	19 1f       	adc	r17, r25
    1e08:	11 83       	std	Z+1, r17	; 0x01
    1e0a:	00 83       	st	Z, r16
    1e0c:	85 e0       	ldi	r24, 0x05	; 5
    1e0e:	11 c0       	rjmp	.+34     	; 0x1e32 <Endpoint_Write_Stream_BE+0x8c>
    1e10:	ac d1       	rcall	.+856    	; 0x216a <Endpoint_WaitUntilReady>
    1e12:	88 23       	and	r24, r24
    1e14:	59 f0       	breq	.+22     	; 0x1e2c <Endpoint_Write_Stream_BE+0x86>
    1e16:	0d c0       	rjmp	.+26     	; 0x1e32 <Endpoint_Write_Stream_BE+0x8c>
    1e18:	f6 01       	movw	r30, r12
    1e1a:	80 81       	ld	r24, Z
    1e1c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1e20:	f1 e0       	ldi	r31, 0x01	; 1
    1e22:	cf 1a       	sub	r12, r31
    1e24:	d1 08       	sbc	r13, r1
    1e26:	21 97       	sbiw	r28, 0x01	; 1
    1e28:	0f 5f       	subi	r16, 0xFF	; 255
    1e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2c:	20 97       	sbiw	r28, 0x00	; 0
    1e2e:	d9 f6       	brne	.-74     	; 0x1de6 <Endpoint_Write_Stream_BE+0x40>
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	1f 91       	pop	r17
    1e38:	0f 91       	pop	r16
    1e3a:	ff 90       	pop	r15
    1e3c:	ef 90       	pop	r14
    1e3e:	df 90       	pop	r13
    1e40:	cf 90       	pop	r12
    1e42:	08 95       	ret

00001e44 <Endpoint_Read_Stream_LE>:
    1e44:	cf 92       	push	r12
    1e46:	df 92       	push	r13
    1e48:	ef 92       	push	r14
    1e4a:	ff 92       	push	r15
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	8c 01       	movw	r16, r24
    1e56:	eb 01       	movw	r28, r22
    1e58:	6a 01       	movw	r12, r20
    1e5a:	87 d1       	rcall	.+782    	; 0x216a <Endpoint_WaitUntilReady>
    1e5c:	81 11       	cpse	r24, r1
    1e5e:	32 c0       	rjmp	.+100    	; 0x1ec4 <Endpoint_Read_Stream_LE+0x80>
    1e60:	c1 14       	cp	r12, r1
    1e62:	d1 04       	cpc	r13, r1
    1e64:	39 f0       	breq	.+14     	; 0x1e74 <Endpoint_Read_Stream_LE+0x30>
    1e66:	f6 01       	movw	r30, r12
    1e68:	80 81       	ld	r24, Z
    1e6a:	91 81       	ldd	r25, Z+1	; 0x01
    1e6c:	c8 1b       	sub	r28, r24
    1e6e:	d9 0b       	sbc	r29, r25
    1e70:	08 0f       	add	r16, r24
    1e72:	19 1f       	adc	r17, r25
    1e74:	e1 2c       	mov	r14, r1
    1e76:	f1 2c       	mov	r15, r1
    1e78:	22 c0       	rjmp	.+68     	; 0x1ebe <Endpoint_Read_Stream_LE+0x7a>
    1e7a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e7e:	85 fd       	sbrc	r24, 5
    1e80:	15 c0       	rjmp	.+42     	; 0x1eac <Endpoint_Read_Stream_LE+0x68>
    1e82:	e8 ee       	ldi	r30, 0xE8	; 232
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	90 81       	ld	r25, Z
    1e88:	9b 77       	andi	r25, 0x7B	; 123
    1e8a:	90 83       	st	Z, r25
    1e8c:	c1 14       	cp	r12, r1
    1e8e:	d1 04       	cpc	r13, r1
    1e90:	49 f0       	breq	.+18     	; 0x1ea4 <Endpoint_Read_Stream_LE+0x60>
    1e92:	f6 01       	movw	r30, r12
    1e94:	80 81       	ld	r24, Z
    1e96:	91 81       	ldd	r25, Z+1	; 0x01
    1e98:	e8 0e       	add	r14, r24
    1e9a:	f9 1e       	adc	r15, r25
    1e9c:	f1 82       	std	Z+1, r15	; 0x01
    1e9e:	e0 82       	st	Z, r14
    1ea0:	85 e0       	ldi	r24, 0x05	; 5
    1ea2:	10 c0       	rjmp	.+32     	; 0x1ec4 <Endpoint_Read_Stream_LE+0x80>
    1ea4:	62 d1       	rcall	.+708    	; 0x216a <Endpoint_WaitUntilReady>
    1ea6:	88 23       	and	r24, r24
    1ea8:	51 f0       	breq	.+20     	; 0x1ebe <Endpoint_Read_Stream_LE+0x7a>
    1eaa:	0c c0       	rjmp	.+24     	; 0x1ec4 <Endpoint_Read_Stream_LE+0x80>
    1eac:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1eb0:	f8 01       	movw	r30, r16
    1eb2:	81 93       	st	Z+, r24
    1eb4:	8f 01       	movw	r16, r30
    1eb6:	21 97       	sbiw	r28, 0x01	; 1
    1eb8:	ff ef       	ldi	r31, 0xFF	; 255
    1eba:	ef 1a       	sub	r14, r31
    1ebc:	ff 0a       	sbc	r15, r31
    1ebe:	20 97       	sbiw	r28, 0x00	; 0
    1ec0:	e1 f6       	brne	.-72     	; 0x1e7a <Endpoint_Read_Stream_LE+0x36>
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	1f 91       	pop	r17
    1eca:	0f 91       	pop	r16
    1ecc:	ff 90       	pop	r15
    1ece:	ef 90       	pop	r14
    1ed0:	df 90       	pop	r13
    1ed2:	cf 90       	pop	r12
    1ed4:	08 95       	ret

00001ed6 <Endpoint_Write_Control_Stream_LE>:
    1ed6:	20 91 aa 08 	lds	r18, 0x08AA	; 0x8008aa <USB_ControlRequest+0x6>
    1eda:	30 91 ab 08 	lds	r19, 0x08AB	; 0x8008ab <USB_ControlRequest+0x7>
    1ede:	26 17       	cp	r18, r22
    1ee0:	37 07       	cpc	r19, r23
    1ee2:	58 f0       	brcs	.+22     	; 0x1efa <Endpoint_Write_Control_Stream_LE+0x24>
    1ee4:	61 15       	cp	r22, r1
    1ee6:	71 05       	cpc	r23, r1
    1ee8:	39 f4       	brne	.+14     	; 0x1ef8 <Endpoint_Write_Control_Stream_LE+0x22>
    1eea:	e8 ee       	ldi	r30, 0xE8	; 232
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	20 81       	ld	r18, Z
    1ef0:	2e 77       	andi	r18, 0x7E	; 126
    1ef2:	20 83       	st	Z, r18
    1ef4:	9b 01       	movw	r18, r22
    1ef6:	01 c0       	rjmp	.+2      	; 0x1efa <Endpoint_Write_Control_Stream_LE+0x24>
    1ef8:	9b 01       	movw	r18, r22
    1efa:	e8 2f       	mov	r30, r24
    1efc:	f9 2f       	mov	r31, r25
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	30 c0       	rjmp	.+96     	; 0x1f62 <Endpoint_Write_Control_Stream_LE+0x8c>
    1f02:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <USB_DeviceState>
    1f06:	88 23       	and	r24, r24
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <Endpoint_Write_Control_Stream_LE+0x36>
    1f0a:	41 c0       	rjmp	.+130    	; 0x1f8e <Endpoint_Write_Control_Stream_LE+0xb8>
    1f0c:	85 30       	cpi	r24, 0x05	; 5
    1f0e:	09 f4       	brne	.+2      	; 0x1f12 <Endpoint_Write_Control_Stream_LE+0x3c>
    1f10:	40 c0       	rjmp	.+128    	; 0x1f92 <Endpoint_Write_Control_Stream_LE+0xbc>
    1f12:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f16:	83 fd       	sbrc	r24, 3
    1f18:	3e c0       	rjmp	.+124    	; 0x1f96 <Endpoint_Write_Control_Stream_LE+0xc0>
    1f1a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f1e:	82 fd       	sbrc	r24, 2
    1f20:	30 c0       	rjmp	.+96     	; 0x1f82 <Endpoint_Write_Control_Stream_LE+0xac>
    1f22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f26:	80 ff       	sbrs	r24, 0
    1f28:	1c c0       	rjmp	.+56     	; 0x1f62 <Endpoint_Write_Control_Stream_LE+0x8c>
    1f2a:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1f2e:	50 91 f3 00 	lds	r21, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1f32:	07 c0       	rjmp	.+14     	; 0x1f42 <Endpoint_Write_Control_Stream_LE+0x6c>
    1f34:	81 91       	ld	r24, Z+
    1f36:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1f3a:	21 50       	subi	r18, 0x01	; 1
    1f3c:	31 09       	sbc	r19, r1
    1f3e:	4f 5f       	subi	r20, 0xFF	; 255
    1f40:	5f 4f       	sbci	r21, 0xFF	; 255
    1f42:	21 15       	cp	r18, r1
    1f44:	31 05       	cpc	r19, r1
    1f46:	19 f0       	breq	.+6      	; 0x1f4e <Endpoint_Write_Control_Stream_LE+0x78>
    1f48:	48 30       	cpi	r20, 0x08	; 8
    1f4a:	51 05       	cpc	r21, r1
    1f4c:	98 f3       	brcs	.-26     	; 0x1f34 <Endpoint_Write_Control_Stream_LE+0x5e>
    1f4e:	91 e0       	ldi	r25, 0x01	; 1
    1f50:	48 30       	cpi	r20, 0x08	; 8
    1f52:	51 05       	cpc	r21, r1
    1f54:	09 f0       	breq	.+2      	; 0x1f58 <Endpoint_Write_Control_Stream_LE+0x82>
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	a8 ee       	ldi	r26, 0xE8	; 232
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	8c 91       	ld	r24, X
    1f5e:	8e 77       	andi	r24, 0x7E	; 126
    1f60:	8c 93       	st	X, r24
    1f62:	21 15       	cp	r18, r1
    1f64:	31 05       	cpc	r19, r1
    1f66:	69 f6       	brne	.-102    	; 0x1f02 <Endpoint_Write_Control_Stream_LE+0x2c>
    1f68:	91 11       	cpse	r25, r1
    1f6a:	cb cf       	rjmp	.-106    	; 0x1f02 <Endpoint_Write_Control_Stream_LE+0x2c>
    1f6c:	0a c0       	rjmp	.+20     	; 0x1f82 <Endpoint_Write_Control_Stream_LE+0xac>
    1f6e:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <USB_DeviceState>
    1f72:	88 23       	and	r24, r24
    1f74:	91 f0       	breq	.+36     	; 0x1f9a <Endpoint_Write_Control_Stream_LE+0xc4>
    1f76:	85 30       	cpi	r24, 0x05	; 5
    1f78:	91 f0       	breq	.+36     	; 0x1f9e <Endpoint_Write_Control_Stream_LE+0xc8>
    1f7a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f7e:	83 fd       	sbrc	r24, 3
    1f80:	10 c0       	rjmp	.+32     	; 0x1fa2 <Endpoint_Write_Control_Stream_LE+0xcc>
    1f82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1f86:	82 ff       	sbrs	r24, 2
    1f88:	f2 cf       	rjmp	.-28     	; 0x1f6e <Endpoint_Write_Control_Stream_LE+0x98>
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	08 95       	ret
    1f8e:	82 e0       	ldi	r24, 0x02	; 2
    1f90:	08 95       	ret
    1f92:	83 e0       	ldi	r24, 0x03	; 3
    1f94:	08 95       	ret
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	08 95       	ret
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	08 95       	ret
    1f9e:	83 e0       	ldi	r24, 0x03	; 3
    1fa0:	08 95       	ret
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	08 95       	ret

00001fa6 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1fa6:	61 15       	cp	r22, r1
    1fa8:	71 05       	cpc	r23, r1
    1faa:	29 f4       	brne	.+10     	; 0x1fb6 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1fac:	e8 ee       	ldi	r30, 0xE8	; 232
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	20 81       	ld	r18, Z
    1fb2:	2b 77       	andi	r18, 0x7B	; 123
    1fb4:	20 83       	st	Z, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    1fb6:	e8 2f       	mov	r30, r24
    1fb8:	f9 2f       	mov	r31, r25
    1fba:	22 c0       	rjmp	.+68     	; 0x2000 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1fbc:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1fc0:	88 23       	and	r24, r24
    1fc2:	71 f1       	breq	.+92     	; 0x2020 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1fc4:	85 30       	cpi	r24, 0x05	; 5
    1fc6:	71 f1       	breq	.+92     	; 0x2024 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fc8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1fcc:	83 fd       	sbrc	r24, 3
    1fce:	2c c0       	rjmp	.+88     	; 0x2028 <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1fd0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1fd4:	82 ff       	sbrs	r24, 2
    1fd6:	14 c0       	rjmp	.+40     	; 0x2000 <Endpoint_Read_Control_Stream_LE+0x5a>
    1fd8:	05 c0       	rjmp	.+10     	; 0x1fe4 <Endpoint_Read_Control_Stream_LE+0x3e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1fda:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1fde:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1fe0:	61 50       	subi	r22, 0x01	; 1
    1fe2:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1fe4:	61 15       	cp	r22, r1
    1fe6:	71 05       	cpc	r23, r1
    1fe8:	31 f0       	breq	.+12     	; 0x1ff6 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1fea:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1fee:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1ff2:	89 2b       	or	r24, r25
    1ff4:	91 f7       	brne	.-28     	; 0x1fda <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1ff6:	a8 ee       	ldi	r26, 0xE8	; 232
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	8c 91       	ld	r24, X
    1ffc:	8b 77       	andi	r24, 0x7B	; 123
    1ffe:	8c 93       	st	X, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    2000:	61 15       	cp	r22, r1
    2002:	71 05       	cpc	r23, r1
    2004:	d9 f6       	brne	.-74     	; 0x1fbc <Endpoint_Read_Control_Stream_LE+0x16>
    2006:	06 c0       	rjmp	.+12     	; 0x2014 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2008:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    200c:	88 23       	and	r24, r24
    200e:	71 f0       	breq	.+28     	; 0x202c <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2010:	85 30       	cpi	r24, 0x05	; 5
    2012:	71 f0       	breq	.+28     	; 0x2030 <Endpoint_Read_Control_Stream_LE+0x8a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2014:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    2018:	80 ff       	sbrs	r24, 0
    201a:	f6 cf       	rjmp	.-20     	; 0x2008 <Endpoint_Read_Control_Stream_LE+0x62>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    2020:	82 e0       	ldi	r24, 0x02	; 2
    2022:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2024:	83 e0       	ldi	r24, 0x03	; 3
    2026:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    202c:	82 e0       	ldi	r24, 0x02	; 2
    202e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2030:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2032:	08 95       	ret

00002034 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    2034:	98 2f       	mov	r25, r24
    2036:	29 c0       	rjmp	.+82     	; 0x208a <Endpoint_ConfigureEndpoint_Prv+0x56>
    2038:	29 2f       	mov	r18, r25
    203a:	2f 70       	andi	r18, 0x0F	; 15
    203c:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2040:	98 17       	cp	r25, r24
    2042:	39 f0       	breq	.+14     	; 0x2052 <Endpoint_ConfigureEndpoint_Prv+0x1e>
    2044:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2048:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    204c:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2050:	03 c0       	rjmp	.+6      	; 0x2058 <Endpoint_ConfigureEndpoint_Prv+0x24>
    2052:	24 2f       	mov	r18, r20
    2054:	76 2f       	mov	r23, r22
    2056:	50 e0       	ldi	r21, 0x00	; 0
    2058:	21 ff       	sbrs	r18, 1
    205a:	16 c0       	rjmp	.+44     	; 0x2088 <Endpoint_ConfigureEndpoint_Prv+0x54>
    205c:	eb ee       	ldi	r30, 0xEB	; 235
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	30 81       	ld	r19, Z
    2062:	3e 7f       	andi	r19, 0xFE	; 254
    2064:	30 83       	st	Z, r19
    2066:	ad ee       	ldi	r26, 0xED	; 237
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	3c 91       	ld	r19, X
    206c:	3d 7f       	andi	r19, 0xFD	; 253
    206e:	3c 93       	st	X, r19
    2070:	30 81       	ld	r19, Z
    2072:	31 60       	ori	r19, 0x01	; 1
    2074:	30 83       	st	Z, r19
    2076:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    207a:	2c 93       	st	X, r18
    207c:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2080:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    2084:	22 23       	and	r18, r18
    2086:	44 f4       	brge	.+16     	; 0x2098 <Endpoint_ConfigureEndpoint_Prv+0x64>
    2088:	9f 5f       	subi	r25, 0xFF	; 255
    208a:	97 30       	cpi	r25, 0x07	; 7
    208c:	a8 f2       	brcs	.-86     	; 0x2038 <Endpoint_ConfigureEndpoint_Prv+0x4>
    208e:	8f 70       	andi	r24, 0x0F	; 15
    2090:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	08 95       	ret
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	08 95       	ret

0000209c <Endpoint_ConfigureEndpointTable>:
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	ec 01       	movw	r28, r24
    20a6:	06 2f       	mov	r16, r22
    20a8:	10 e0       	ldi	r17, 0x00	; 0
    20aa:	36 c0       	rjmp	.+108    	; 0x2118 <__stack+0x19>
    20ac:	e1 2f       	mov	r30, r17
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	cf 01       	movw	r24, r30
    20b2:	88 0f       	add	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	e8 0f       	add	r30, r24
    20bc:	f9 1f       	adc	r31, r25
    20be:	ec 0f       	add	r30, r28
    20c0:	fd 1f       	adc	r31, r29
    20c2:	50 81       	ld	r21, Z
    20c4:	55 23       	and	r21, r21
    20c6:	39 f1       	breq	.+78     	; 0x2116 <__stack+0x17>
    20c8:	94 81       	ldd	r25, Z+4	; 0x04
    20ca:	a1 81       	ldd	r26, Z+1	; 0x01
    20cc:	b2 81       	ldd	r27, Z+2	; 0x02
    20ce:	63 81       	ldd	r22, Z+3	; 0x03
    20d0:	85 2f       	mov	r24, r21
    20d2:	8f 70       	andi	r24, 0x0F	; 15
    20d4:	87 30       	cpi	r24, 0x07	; 7
    20d6:	e0 f4       	brcc	.+56     	; 0x2110 <__stack+0x11>
    20d8:	92 30       	cpi	r25, 0x02	; 2
    20da:	10 f0       	brcs	.+4      	; 0x20e0 <Endpoint_ConfigureEndpointTable+0x44>
    20dc:	46 e0       	ldi	r20, 0x06	; 6
    20de:	01 c0       	rjmp	.+2      	; 0x20e2 <Endpoint_ConfigureEndpointTable+0x46>
    20e0:	42 e0       	ldi	r20, 0x02	; 2
    20e2:	28 e0       	ldi	r18, 0x08	; 8
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	03 c0       	rjmp	.+6      	; 0x20f0 <Endpoint_ConfigureEndpointTable+0x54>
    20ea:	9f 5f       	subi	r25, 0xFF	; 255
    20ec:	22 0f       	add	r18, r18
    20ee:	33 1f       	adc	r19, r19
    20f0:	2a 17       	cp	r18, r26
    20f2:	3b 07       	cpc	r19, r27
    20f4:	d0 f3       	brcs	.-12     	; 0x20ea <Endpoint_ConfigureEndpointTable+0x4e>
    20f6:	92 95       	swap	r25
    20f8:	90 7f       	andi	r25, 0xF0	; 240
    20fa:	20 e4       	ldi	r18, 0x40	; 64
    20fc:	62 9f       	mul	r22, r18
    20fe:	b0 01       	movw	r22, r0
    2100:	11 24       	eor	r1, r1
    2102:	55 1f       	adc	r21, r21
    2104:	55 27       	eor	r21, r21
    2106:	55 1f       	adc	r21, r21
    2108:	49 2b       	or	r20, r25
    210a:	65 2b       	or	r22, r21
    210c:	93 df       	rcall	.-218    	; 0x2034 <Endpoint_ConfigureEndpoint_Prv>
    210e:	01 c0       	rjmp	.+2      	; 0x2112 <__stack+0x13>
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	88 23       	and	r24, r24
    2114:	21 f0       	breq	.+8      	; 0x211e <__stack+0x1f>
    2116:	1f 5f       	subi	r17, 0xFF	; 255
    2118:	10 17       	cp	r17, r16
    211a:	40 f2       	brcs	.-112    	; 0x20ac <Endpoint_ConfigureEndpointTable+0x10>
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	0f 91       	pop	r16
    2126:	08 95       	ret

00002128 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2128:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <USB_ControlRequest>
    212c:	88 23       	and	r24, r24
    212e:	9c f4       	brge	.+38     	; 0x2156 <Endpoint_ClearStatusStage+0x2e>
    2130:	04 c0       	rjmp	.+8      	; 0x213a <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2132:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <USB_DeviceState>
    2136:	88 23       	and	r24, r24
    2138:	b9 f0       	breq	.+46     	; 0x2168 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    213a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    213e:	82 ff       	sbrs	r24, 2
    2140:	f8 cf       	rjmp	.-16     	; 0x2132 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2142:	e8 ee       	ldi	r30, 0xE8	; 232
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	8b 77       	andi	r24, 0x7B	; 123
    214a:	80 83       	st	Z, r24
    214c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    214e:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <USB_DeviceState>
    2152:	88 23       	and	r24, r24
    2154:	49 f0       	breq	.+18     	; 0x2168 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2156:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    215a:	80 ff       	sbrs	r24, 0
    215c:	f8 cf       	rjmp	.-16     	; 0x214e <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    215e:	e8 ee       	ldi	r30, 0xE8	; 232
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	8e 77       	andi	r24, 0x7E	; 126
    2166:	80 83       	st	Z, r24
    2168:	08 95       	ret

0000216a <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    216a:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    216e:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    2172:	44 e6       	ldi	r20, 0x64	; 100
    2174:	02 c0       	rjmp	.+4      	; 0x217a <Endpoint_WaitUntilReady+0x10>

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;
    2176:	9c 01       	movw	r18, r24

			if (!(TimeoutMSRem--))
    2178:	45 2f       	mov	r20, r21
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    217a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    217e:	98 2f       	mov	r25, r24
    2180:	91 70       	andi	r25, 0x01	; 1
    2182:	80 fd       	sbrc	r24, 0
    2184:	90 e8       	ldi	r25, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    2186:	90 38       	cpi	r25, 0x80	; 128
    2188:	29 f4       	brne	.+10     	; 0x2194 <Endpoint_WaitUntilReady+0x2a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    218a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		{
			if (Endpoint_IsINReady())
    218e:	80 ff       	sbrs	r24, 0
    2190:	05 c0       	rjmp	.+10     	; 0x219c <Endpoint_WaitUntilReady+0x32>
    2192:	1b c0       	rjmp	.+54     	; 0x21ca <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2194:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    2198:	82 fd       	sbrc	r24, 2
    219a:	19 c0       	rjmp	.+50     	; 0x21ce <Endpoint_WaitUntilReady+0x64>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    219c:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    21a0:	88 23       	and	r24, r24
    21a2:	b9 f0       	breq	.+46     	; 0x21d2 <Endpoint_WaitUntilReady+0x68>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    21a4:	85 30       	cpi	r24, 0x05	; 5
    21a6:	b9 f0       	breq	.+46     	; 0x21d6 <Endpoint_WaitUntilReady+0x6c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    21a8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    21ac:	85 fd       	sbrc	r24, 5
    21ae:	15 c0       	rjmp	.+42     	; 0x21da <Endpoint_WaitUntilReady+0x70>
    21b0:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    21b4:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    21b8:	28 17       	cp	r18, r24
    21ba:	39 07       	cpc	r19, r25
    21bc:	f1 f2       	breq	.-68     	; 0x217a <Endpoint_WaitUntilReady+0x10>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    21be:	5f ef       	ldi	r21, 0xFF	; 255
    21c0:	54 0f       	add	r21, r20
    21c2:	41 11       	cpse	r20, r1
    21c4:	d8 cf       	rjmp	.-80     	; 0x2176 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
    21c6:	84 e0       	ldi	r24, 0x04	; 4
    21c8:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	08 95       	ret
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    21d2:	82 e0       	ldi	r24, 0x02	; 2
    21d4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    21d6:	83 e0       	ldi	r24, 0x03	; 3
    21d8:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    21da:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    21dc:	08 95       	ret

000021de <USB_Init_Device>:

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
    21e2:	10 92 a3 08 	sts	0x08A3, r1	; 0x8008a3 <USB_DeviceState>
    21e6:	10 92 9f 08 	sts	0x089F, r1	; 0x80089f <USB_Device_ConfigurationNumber>
    21ea:	10 92 a1 08 	sts	0x08A1, r1	; 0x8008a1 <USB_Device_RemoteWakeupEnabled>
    21ee:	10 92 a0 08 	sts	0x08A0, r1	; 0x8008a0 <USB_Device_CurrentlySelfPowered>
    21f2:	c0 ee       	ldi	r28, 0xE0	; 224
    21f4:	d0 e0       	ldi	r29, 0x00	; 0
    21f6:	88 81       	ld	r24, Y
    21f8:	8b 7f       	andi	r24, 0xFB	; 251
    21fa:	88 83       	st	Y, r24
    21fc:	e8 ed       	ldi	r30, 0xD8	; 216
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	81 60       	ori	r24, 0x01	; 1
    2204:	80 83       	st	Z, r24
    2206:	42 e0       	ldi	r20, 0x02	; 2
    2208:	60 e0       	ldi	r22, 0x00	; 0
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	13 df       	rcall	.-474    	; 0x2034 <Endpoint_ConfigureEndpoint_Prv>
    220e:	e1 ee       	ldi	r30, 0xE1	; 225
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	8e 7f       	andi	r24, 0xFE	; 254
    2216:	80 83       	st	Z, r24
    2218:	e2 ee       	ldi	r30, 0xE2	; 226
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	81 60       	ori	r24, 0x01	; 1
    2220:	80 83       	st	Z, r24
    2222:	80 81       	ld	r24, Z
    2224:	88 60       	ori	r24, 0x08	; 8
    2226:	80 83       	st	Z, r24
    2228:	88 81       	ld	r24, Y
    222a:	8e 7f       	andi	r24, 0xFE	; 254
    222c:	88 83       	st	Y, r24
    222e:	df 91       	pop	r29
    2230:	cf 91       	pop	r28
    2232:	08 95       	ret

00002234 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    2234:	cf 93       	push	r28
    2236:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    2238:	28 d0       	rcall	.+80     	; 0x228a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    223a:	2f d0       	rcall	.+94     	; 0x229a <USB_INT_ClearAllInterrupts>
    223c:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    223e:	d0 e0       	ldi	r29, 0x00	; 0
    2240:	88 81       	ld	r24, Y
    2242:	8f 77       	andi	r24, 0x7F	; 127
    2244:	88 83       	st	Y, r24
    2246:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    2248:	80 68       	ori	r24, 0x80	; 128
    224a:	88 83       	st	Y, r24
    224c:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    224e:	8f 7d       	andi	r24, 0xDF	; 223
    2250:	88 83       	st	Y, r24
    2252:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	80 68       	ori	r24, 0x80	; 128
    225a:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    225c:	19 bc       	out	0x29, r1	; 41
			#else
			USB_PLL_Off();
			#endif
		}

		USB_Init_Device();
    225e:	bf df       	rcall	.-130    	; 0x21de <USB_Init_Device>
    2260:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    2262:	80 61       	ori	r24, 0x10	; 16
    2264:	88 83       	st	Y, r24
    2266:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2268:	cf 91       	pop	r28
    226a:	08 95       	ret

0000226c <USB_Init>:
    226c:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	8f 7e       	andi	r24, 0xEF	; 239
    2274:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    2276:	e7 ed       	ldi	r30, 0xD7	; 215
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	81 60       	ori	r24, 0x01	; 1
    227e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <USB_IsInitialized>

	USB_ResetInterface();
    2286:	d6 cf       	rjmp	.-84     	; 0x2234 <USB_ResetInterface>
    2288:	08 95       	ret

0000228a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    228a:	e8 ed       	ldi	r30, 0xD8	; 216
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	8c 7f       	andi	r24, 0xFC	; 252
    2292:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    2294:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2298:	08 95       	ret

0000229a <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    229a:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    229e:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    22a2:	08 95       	ret

000022a4 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    22a4:	1f 92       	push	r1
    22a6:	0f 92       	push	r0
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	0f 92       	push	r0
    22ac:	11 24       	eor	r1, r1
    22ae:	0b b6       	in	r0, 0x3b	; 59
    22b0:	0f 92       	push	r0
    22b2:	2f 93       	push	r18
    22b4:	3f 93       	push	r19
    22b6:	4f 93       	push	r20
    22b8:	5f 93       	push	r21
    22ba:	6f 93       	push	r22
    22bc:	7f 93       	push	r23
    22be:	8f 93       	push	r24
    22c0:	9f 93       	push	r25
    22c2:	af 93       	push	r26
    22c4:	bf 93       	push	r27
    22c6:	ef 93       	push	r30
    22c8:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    22ca:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    22ce:	82 ff       	sbrs	r24, 2
    22d0:	0b c0       	rjmp	.+22     	; 0x22e8 <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    22d2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    22d6:	82 ff       	sbrs	r24, 2
    22d8:	07 c0       	rjmp	.+14     	; 0x22e8 <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    22da:	e1 ee       	ldi	r30, 0xE1	; 225
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	8b 7f       	andi	r24, 0xFB	; 251
    22e2:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    22e4:	0e 94 09 06 	call	0xc12	; 0xc12 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    22e8:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    22ec:	80 ff       	sbrs	r24, 0
    22ee:	1f c0       	rjmp	.+62     	; 0x232e <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    22f0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    22f4:	80 ff       	sbrs	r24, 0
    22f6:	1b c0       	rjmp	.+54     	; 0x232e <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    22f8:	ea ed       	ldi	r30, 0xDA	; 218
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	8e 7f       	andi	r24, 0xFE	; 254
    2300:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    2302:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    2306:	80 ff       	sbrs	r24, 0
    2308:	0d c0       	rjmp	.+26     	; 0x2324 <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    230a:	84 e1       	ldi	r24, 0x14	; 20
    230c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    230e:	86 e1       	ldi	r24, 0x16	; 22
    2310:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    2312:	09 b4       	in	r0, 0x29	; 41
    2314:	00 fe       	sbrs	r0, 0
    2316:	fd cf       	rjmp	.-6      	; 0x2312 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    231e:	0e 94 9b 05 	call	0xb36	; 0xb36 <EVENT_USB_Device_Connect>
    2322:	05 c0       	rjmp	.+10     	; 0x232e <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2324:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    2326:	10 92 a3 08 	sts	0x08A3, r1	; 0x8008a3 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    232a:	0e 94 a8 05 	call	0xb50	; 0xb50 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    232e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2332:	80 ff       	sbrs	r24, 0
    2334:	16 c0       	rjmp	.+44     	; 0x2362 <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    2336:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    233a:	80 ff       	sbrs	r24, 0
    233c:	12 c0       	rjmp	.+36     	; 0x2362 <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    233e:	e2 ee       	ldi	r30, 0xE2	; 226
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	8e 7f       	andi	r24, 0xFE	; 254
    2346:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2348:	80 81       	ld	r24, Z
    234a:	80 61       	ori	r24, 0x10	; 16
    234c:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    234e:	e8 ed       	ldi	r30, 0xD8	; 216
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	80 62       	ori	r24, 0x20	; 32
    2356:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2358:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    235a:	85 e0       	ldi	r24, 0x05	; 5
    235c:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    2360:	6d d2       	rcall	.+1242   	; 0x283c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    2362:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    2366:	84 ff       	sbrs	r24, 4
    2368:	2f c0       	rjmp	.+94     	; 0x23c8 <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    236a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    236e:	84 ff       	sbrs	r24, 4
    2370:	2b c0       	rjmp	.+86     	; 0x23c8 <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2372:	84 e1       	ldi	r24, 0x14	; 20
    2374:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2376:	86 e1       	ldi	r24, 0x16	; 22
    2378:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    237a:	09 b4       	in	r0, 0x29	; 41
    237c:	00 fe       	sbrs	r0, 0
    237e:	fd cf       	rjmp	.-6      	; 0x237a <__vector_10+0xd6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2380:	e8 ed       	ldi	r30, 0xD8	; 216
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	8f 7d       	andi	r24, 0xDF	; 223
    2388:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    238a:	e1 ee       	ldi	r30, 0xE1	; 225
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	8f 7e       	andi	r24, 0xEF	; 239
    2392:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    2394:	e2 ee       	ldi	r30, 0xE2	; 226
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	80 81       	ld	r24, Z
    239a:	8f 7e       	andi	r24, 0xEF	; 239
    239c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    239e:	80 81       	ld	r24, Z
    23a0:	81 60       	ori	r24, 0x01	; 1
    23a2:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    23a4:	80 91 9f 08 	lds	r24, 0x089F	; 0x80089f <USB_Device_ConfigurationNumber>
    23a8:	88 23       	and	r24, r24
    23aa:	21 f0       	breq	.+8      	; 0x23b4 <__vector_10+0x110>
		  USB_DeviceState = DEVICE_STATE_Configured;
    23ac:	84 e0       	ldi	r24, 0x04	; 4
    23ae:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <USB_DeviceState>
    23b2:	09 c0       	rjmp	.+18     	; 0x23c6 <__vector_10+0x122>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    23b4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    23b8:	88 23       	and	r24, r24
    23ba:	14 f4       	brge	.+4      	; 0x23c0 <__vector_10+0x11c>
    23bc:	83 e0       	ldi	r24, 0x03	; 3
    23be:	01 c0       	rjmp	.+2      	; 0x23c2 <__vector_10+0x11e>
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    23c6:	3a d2       	rcall	.+1140   	; 0x283c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    23c8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    23cc:	83 ff       	sbrs	r24, 3
    23ce:	23 c0       	rjmp	.+70     	; 0x2416 <__vector_10+0x172>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    23d0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    23d4:	83 ff       	sbrs	r24, 3
    23d6:	1f c0       	rjmp	.+62     	; 0x2416 <__vector_10+0x172>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    23d8:	e1 ee       	ldi	r30, 0xE1	; 225
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	87 7f       	andi	r24, 0xF7	; 247
    23e0:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    23e2:	82 e0       	ldi	r24, 0x02	; 2
    23e4:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    23e8:	10 92 9f 08 	sts	0x089F, r1	; 0x80089f <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    23ec:	80 81       	ld	r24, Z
    23ee:	8e 7f       	andi	r24, 0xFE	; 254
    23f0:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    23f2:	e2 ee       	ldi	r30, 0xE2	; 226
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	8e 7f       	andi	r24, 0xFE	; 254
    23fa:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    23fc:	80 81       	ld	r24, Z
    23fe:	80 61       	ori	r24, 0x10	; 16
    2400:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2402:	42 e0       	ldi	r20, 0x02	; 2
    2404:	60 e0       	ldi	r22, 0x00	; 0
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	15 de       	rcall	.-982    	; 0x2034 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    240a:	e0 ef       	ldi	r30, 0xF0	; 240
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	88 60       	ori	r24, 0x08	; 8

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    2412:	80 83       	st	Z, r24
    2414:	13 d2       	rcall	.+1062   	; 0x283c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2416:	ff 91       	pop	r31
    2418:	ef 91       	pop	r30
    241a:	bf 91       	pop	r27
    241c:	af 91       	pop	r26
    241e:	9f 91       	pop	r25
    2420:	8f 91       	pop	r24
    2422:	7f 91       	pop	r23
    2424:	6f 91       	pop	r22
    2426:	5f 91       	pop	r21
    2428:	4f 91       	pop	r20
    242a:	3f 91       	pop	r19
    242c:	2f 91       	pop	r18
    242e:	0f 90       	pop	r0
    2430:	0b be       	out	0x3b, r0	; 59
    2432:	0f 90       	pop	r0
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	0f 90       	pop	r0
    2438:	1f 90       	pop	r1
    243a:	18 95       	reti

0000243c <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    243c:	1f 92       	push	r1
    243e:	0f 92       	push	r0
    2440:	0f b6       	in	r0, 0x3f	; 63
    2442:	0f 92       	push	r0
    2444:	11 24       	eor	r1, r1
    2446:	0b b6       	in	r0, 0x3b	; 59
    2448:	0f 92       	push	r0
    244a:	ef 92       	push	r14
    244c:	ff 92       	push	r15
    244e:	1f 93       	push	r17
    2450:	2f 93       	push	r18
    2452:	3f 93       	push	r19
    2454:	4f 93       	push	r20
    2456:	5f 93       	push	r21
    2458:	6f 93       	push	r22
    245a:	7f 93       	push	r23
    245c:	8f 93       	push	r24
    245e:	9f 93       	push	r25
    2460:	af 93       	push	r26
    2462:	bf 93       	push	r27
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	ef 93       	push	r30
    246a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    246c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2470:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2472:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2476:	98 2f       	mov	r25, r24
    2478:	91 70       	andi	r25, 0x01	; 1
    247a:	80 fd       	sbrc	r24, 0
    247c:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    247e:	19 2f       	mov	r17, r25
    2480:	1c 2b       	or	r17, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2482:	0f 2e       	mov	r0, r31
    2484:	f9 ee       	ldi	r31, 0xE9	; 233
    2486:	ef 2e       	mov	r14, r31
    2488:	f1 2c       	mov	r15, r1
    248a:	f0 2d       	mov	r31, r0
    248c:	f7 01       	movw	r30, r14
    248e:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    2490:	c0 ef       	ldi	r28, 0xF0	; 240
    2492:	d0 e0       	ldi	r29, 0x00	; 0
    2494:	88 81       	ld	r24, Y
    2496:	87 7f       	andi	r24, 0xF7	; 247
    2498:	88 83       	st	Y, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    249a:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    249c:	7f d1       	rcall	.+766    	; 0x279c <USB_Device_ProcessControlRequest>
    249e:	f7 01       	movw	r30, r14
    24a0:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    24a2:	88 81       	ld	r24, Y
    24a4:	88 60       	ori	r24, 0x08	; 8
    24a6:	88 83       	st	Y, r24
    24a8:	c1 2f       	mov	r28, r17
    24aa:	cf 70       	andi	r28, 0x0F	; 15
    24ac:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    24ae:	ff 91       	pop	r31
    24b0:	ef 91       	pop	r30
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	bf 91       	pop	r27
    24b8:	af 91       	pop	r26
    24ba:	9f 91       	pop	r25
    24bc:	8f 91       	pop	r24
    24be:	7f 91       	pop	r23
    24c0:	6f 91       	pop	r22
    24c2:	5f 91       	pop	r21
    24c4:	4f 91       	pop	r20
    24c6:	3f 91       	pop	r19
    24c8:	2f 91       	pop	r18
    24ca:	1f 91       	pop	r17
    24cc:	ff 90       	pop	r15
    24ce:	ef 90       	pop	r14
    24d0:	0f 90       	pop	r0
    24d2:	0b be       	out	0x3b, r0	; 59
    24d4:	0f 90       	pop	r0
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	0f 90       	pop	r0
    24da:	1f 90       	pop	r1
    24dc:	18 95       	reti

000024de <USB_Device_GetStatus>:

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;

	switch (USB_ControlRequest.bmRequestType)
    24de:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <USB_ControlRequest>
    24e2:	80 38       	cpi	r24, 0x80	; 128
    24e4:	19 f0       	breq	.+6      	; 0x24ec <USB_Device_GetStatus+0xe>
    24e6:	82 38       	cpi	r24, 0x82	; 130
    24e8:	71 f0       	breq	.+28     	; 0x2506 <USB_Device_GetStatus+0x28>
    24ea:	08 95       	ret
	{
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
		{
			#if !defined(NO_DEVICE_SELF_POWER)
			if (USB_Device_CurrentlySelfPowered)
    24ec:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <USB_Device_CurrentlySelfPowered>
    24f0:	81 11       	cpse	r24, r1
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <USB_Device_GetStatus+0x1a>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	01 c0       	rjmp	.+2      	; 0x24fa <USB_Device_GetStatus+0x1c>
	{
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
		{
			#if !defined(NO_DEVICE_SELF_POWER)
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
    24f8:	91 e0       	ldi	r25, 0x01	; 1
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    24fa:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <USB_Device_RemoteWakeupEnabled>
    24fe:	88 23       	and	r24, r24
    2500:	81 f0       	breq	.+32     	; 0x2522 <USB_Device_GetStatus+0x44>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2502:	92 60       	ori	r25, 0x02	; 2
    2504:	0e c0       	rjmp	.+28     	; 0x2522 <USB_Device_GetStatus+0x44>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2506:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <USB_ControlRequest+0x4>
    250a:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    250c:	87 30       	cpi	r24, 0x07	; 7
    250e:	b0 f4       	brcc	.+44     	; 0x253c <USB_Device_GetStatus+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2510:	e9 ee       	ldi	r30, 0xE9	; 233
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2516:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    251a:	95 fb       	bst	r25, 5
    251c:	99 27       	eor	r25, r25
    251e:	90 f9       	bld	r25, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2520:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2522:	e8 ee       	ldi	r30, 0xE8	; 232
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
    2528:	87 7f       	andi	r24, 0xF7	; 247
    252a:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    252c:	a1 ef       	ldi	r26, 0xF1	; 241
    252e:	b0 e0       	ldi	r27, 0x00	; 0
    2530:	9c 93       	st	X, r25
				UEDATX = (Data >> 8);
    2532:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2534:	80 81       	ld	r24, Z
    2536:	8e 77       	andi	r24, 0x7E	; 126
    2538:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    253a:	f6 cd       	rjmp	.-1044   	; 0x2128 <Endpoint_ClearStatusStage>
    253c:	08 95       	ret

0000253e <USB_Device_ClearSetFeature>:
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    253e:	80 91 a4 08 	lds	r24, 0x08A4	; 0x8008a4 <USB_ControlRequest>
    2542:	8f 71       	andi	r24, 0x1F	; 31
    2544:	19 f0       	breq	.+6      	; 0x254c <USB_Device_ClearSetFeature+0xe>
    2546:	82 30       	cpi	r24, 0x02	; 2
    2548:	71 f0       	breq	.+28     	; 0x2566 <USB_Device_ClearSetFeature+0x28>
    254a:	08 95       	ret
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    254c:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <USB_ControlRequest+0x2>
    2550:	81 30       	cpi	r24, 0x01	; 1
    2552:	09 f0       	breq	.+2      	; 0x2556 <USB_Device_ClearSetFeature+0x18>
    2554:	3f c0       	rjmp	.+126    	; 0x25d4 <USB_Device_ClearSetFeature+0x96>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2556:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <USB_ControlRequest+0x1>
    255a:	93 30       	cpi	r25, 0x03	; 3
    255c:	09 f0       	breq	.+2      	; 0x2560 <USB_Device_ClearSetFeature+0x22>
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	80 93 a1 08 	sts	0x08A1, r24	; 0x8008a1 <USB_Device_RemoteWakeupEnabled>
			else
			  return;

			break;
    2564:	2f c0       	rjmp	.+94     	; 0x25c4 <USB_Device_ClearSetFeature+0x86>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2566:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <USB_ControlRequest+0x2>
    256a:	81 11       	cpse	r24, r1
    256c:	2b c0       	rjmp	.+86     	; 0x25c4 <USB_Device_ClearSetFeature+0x86>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    256e:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <USB_ControlRequest+0x4>
    2572:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    2574:	9f ef       	ldi	r25, 0xFF	; 255
    2576:	98 0f       	add	r25, r24
    2578:	96 30       	cpi	r25, 0x06	; 6
    257a:	60 f5       	brcc	.+88     	; 0x25d4 <USB_Device_ClearSetFeature+0x96>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    257c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2580:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2584:	90 ff       	sbrs	r25, 0
    2586:	1e c0       	rjmp	.+60     	; 0x25c4 <USB_Device_ClearSetFeature+0x86>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2588:	90 91 a5 08 	lds	r25, 0x08A5	; 0x8008a5 <USB_ControlRequest+0x1>
    258c:	93 30       	cpi	r25, 0x03	; 3
    258e:	31 f4       	brne	.+12     	; 0x259c <USB_Device_ClearSetFeature+0x5e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2590:	eb ee       	ldi	r30, 0xEB	; 235
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	80 62       	ori	r24, 0x20	; 32
    2598:	80 83       	st	Z, r24
    259a:	14 c0       	rjmp	.+40     	; 0x25c4 <USB_Device_ClearSetFeature+0x86>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    259c:	eb ee       	ldi	r30, 0xEB	; 235
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	90 81       	ld	r25, Z
    25a2:	90 61       	ori	r25, 0x10	; 16
    25a4:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    25a6:	21 e0       	ldi	r18, 0x01	; 1
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	a9 01       	movw	r20, r18
    25ac:	02 c0       	rjmp	.+4      	; 0x25b2 <USB_Device_ClearSetFeature+0x74>
    25ae:	44 0f       	add	r20, r20
    25b0:	55 1f       	adc	r21, r21
    25b2:	8a 95       	dec	r24
    25b4:	e2 f7       	brpl	.-8      	; 0x25ae <USB_Device_ClearSetFeature+0x70>
    25b6:	aa ee       	ldi	r26, 0xEA	; 234
    25b8:	b0 e0       	ldi	r27, 0x00	; 0
    25ba:	4c 93       	st	X, r20
				UERST = 0;
    25bc:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    25be:	80 81       	ld	r24, Z
    25c0:	88 60       	ori	r24, 0x08	; 8
    25c2:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    25c4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    25c8:	e8 ee       	ldi	r30, 0xE8	; 232
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	87 7f       	andi	r24, 0xF7	; 247
    25d0:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    25d2:	aa cd       	rjmp	.-1196   	; 0x2128 <Endpoint_ClearStatusStage>
    25d4:	08 95       	ret

000025d6 <USB_Device_SetAddress>:
		Endpoint_StallTransaction();
	}
}

static void USB_Device_SetAddress(void)
{
    25d6:	cf 93       	push	r28
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    25d8:	c0 91 a6 08 	lds	r28, 0x08A6	; 0x8008a6 <USB_ControlRequest+0x2>
    25dc:	cf 77       	andi	r28, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    25de:	e3 ee       	ldi	r30, 0xE3	; 227
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	80 78       	andi	r24, 0x80	; 128
    25e6:	8c 2b       	or	r24, r28
    25e8:	80 83       	st	Z, r24
    25ea:	e8 ee       	ldi	r30, 0xE8	; 232
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	87 7f       	andi	r24, 0xF7	; 247
    25f2:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    25f4:	99 dd       	rcall	.-1230   	; 0x2128 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    25f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    25fa:	80 ff       	sbrs	r24, 0
    25fc:	fc cf       	rjmp	.-8      	; 0x25f6 <USB_Device_SetAddress+0x20>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    25fe:	e3 ee       	ldi	r30, 0xE3	; 227
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	80 68       	ori	r24, 0x80	; 128
    2606:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2608:	cc 23       	and	r28, r28
    260a:	11 f0       	breq	.+4      	; 0x2610 <USB_Device_SetAddress+0x3a>
    260c:	83 e0       	ldi	r24, 0x03	; 3
    260e:	01 c0       	rjmp	.+2      	; 0x2612 <USB_Device_SetAddress+0x3c>
    2610:	82 e0       	ldi	r24, 0x02	; 2
    2612:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <USB_DeviceState>
}
    2616:	cf 91       	pop	r28
    2618:	08 95       	ret

0000261a <USB_Device_GetConfiguration>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    261a:	e8 ee       	ldi	r30, 0xE8	; 232
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	87 7f       	andi	r24, 0xF7	; 247
    2622:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2624:	80 91 9f 08 	lds	r24, 0x089F	; 0x80089f <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2628:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    262c:	80 81       	ld	r24, Z
    262e:	8e 77       	andi	r24, 0x7E	; 126
    2630:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2632:	7a cd       	rjmp	.-1292   	; 0x2128 <Endpoint_ClearStatusStage>
    2634:	08 95       	ret

00002636 <USB_Device_GetInternalSerialDescriptor>:

extern void(*LUFA_DREG_HOOK_INTERNAL_SERIAL)(uint16_t* serial_str, size_t nr_elements);

#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
static void USB_Device_GetInternalSerialDescriptor(void)
{
    2636:	0f 93       	push	r16
    2638:	1f 93       	push	r17
    263a:	cf 93       	push	r28
    263c:	df 93       	push	r29
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
    2642:	aa 97       	sbiw	r28, 0x2a	; 42
    2644:	0f b6       	in	r0, 0x3f	; 63
    2646:	f8 94       	cli
    2648:	de bf       	out	0x3e, r29	; 62
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	cd bf       	out	0x3d, r28	; 61
    {
        USB_Descriptor_Header_t Header;
        uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
    } SignatureDescriptor;

    SignatureDescriptor.Header.Type = DTYPE_String;
    264e:	83 e0       	ldi	r24, 0x03	; 3
    2650:	8a 83       	std	Y+2, r24	; 0x02
    SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2652:	8a e2       	ldi	r24, 0x2A	; 42
    2654:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2656:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2658:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    265a:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    265c:	2e e0       	ldi	r18, 0x0E	; 14
    265e:	20 c0       	rjmp	.+64     	; 0x26a0 <USB_Device_GetInternalSerialDescriptor+0x6a>

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2660:	e2 2f       	mov	r30, r18
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	81 e2       	ldi	r24, 0x21	; 33
    2666:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    266a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    266c:	90 ff       	sbrs	r25, 0
    266e:	03 c0       	rjmp	.+6      	; 0x2676 <USB_Device_GetInternalSerialDescriptor+0x40>
					{
						SerialByte >>= 4;
    2670:	e2 95       	swap	r30
    2672:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    2674:	2f 5f       	subi	r18, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2676:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2678:	a9 2f       	mov	r26, r25
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	aa 0f       	add	r26, r26
    267e:	bb 1f       	adc	r27, r27
    2680:	43 e0       	ldi	r20, 0x03	; 3
    2682:	50 e0       	ldi	r21, 0x00	; 0
    2684:	4c 0f       	add	r20, r28
    2686:	5d 1f       	adc	r21, r29
    2688:	a4 0f       	add	r26, r20
    268a:	b5 1f       	adc	r27, r21
    268c:	ea 30       	cpi	r30, 0x0A	; 10
    268e:	18 f0       	brcs	.+6      	; 0x2696 <USB_Device_GetInternalSerialDescriptor+0x60>
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	f7 96       	adiw	r30, 0x37	; 55
    2694:	02 c0       	rjmp	.+4      	; 0x269a <USB_Device_GetInternalSerialDescriptor+0x64>
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	f0 96       	adiw	r30, 0x30	; 48
    269a:	ed 93       	st	X+, r30
    269c:	fc 93       	st	X, r31
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    269e:	9f 5f       	subi	r25, 0xFF	; 255
    26a0:	94 31       	cpi	r25, 0x14	; 20
    26a2:	f0 f2       	brcs	.-68     	; 0x2660 <USB_Device_GetInternalSerialDescriptor+0x2a>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    26a4:	3f bf       	out	0x3f, r19	; 63

    USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

    if (NULL != LUFA_DREG_HOOK_INTERNAL_SERIAL)
    26a6:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <LUFA_DREG_HOOK_INTERNAL_SERIAL>
    26aa:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <LUFA_DREG_HOOK_INTERNAL_SERIAL+0x1>
    26ae:	30 97       	sbiw	r30, 0x00	; 0
    26b0:	29 f0       	breq	.+10     	; 0x26bc <USB_Device_GetInternalSerialDescriptor+0x86>
    {
        LUFA_DREG_HOOK_INTERNAL_SERIAL(SignatureDescriptor.UnicodeString, INTERNAL_SERIAL_LENGTH_BITS / 4);
    26b2:	64 e1       	ldi	r22, 0x14	; 20
    26b4:	70 e0       	ldi	r23, 0x00	; 0
    26b6:	ce 01       	movw	r24, r28
    26b8:	03 96       	adiw	r24, 0x03	; 3
    26ba:	09 95       	icall
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    26bc:	08 ee       	ldi	r16, 0xE8	; 232
    26be:	10 e0       	ldi	r17, 0x00	; 0
    26c0:	f8 01       	movw	r30, r16
    26c2:	80 81       	ld	r24, Z
    26c4:	87 7f       	andi	r24, 0xF7	; 247
    26c6:	80 83       	st	Z, r24
    }
    
    Endpoint_ClearSETUP();

    Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    26c8:	6a e2       	ldi	r22, 0x2A	; 42
    26ca:	70 e0       	ldi	r23, 0x00	; 0
    26cc:	ce 01       	movw	r24, r28
    26ce:	01 96       	adiw	r24, 0x01	; 1
    26d0:	02 dc       	rcall	.-2044   	; 0x1ed6 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    26d2:	f8 01       	movw	r30, r16
    26d4:	80 81       	ld	r24, Z
    26d6:	8b 77       	andi	r24, 0x7B	; 123
    26d8:	80 83       	st	Z, r24
    Endpoint_ClearOUT();
}
    26da:	aa 96       	adiw	r28, 0x2a	; 42
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	1f 91       	pop	r17
    26ec:	0f 91       	pop	r16
    26ee:	08 95       	ret

000026f0 <USB_Device_GetDescriptor>:
#endif

static void USB_Device_GetDescriptor(void)
{
    26f0:	0f 93       	push	r16
    26f2:	1f 93       	push	r17
    26f4:	cf 93       	push	r28
    26f6:	df 93       	push	r29
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <USB_Device_GetDescriptor+0xa>
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    26fe:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <USB_ControlRequest+0x2>
    2702:	90 91 a7 08 	lds	r25, 0x08A7	; 0x8008a7 <USB_ControlRequest+0x3>
    2706:	8c 3d       	cpi	r24, 0xDC	; 220
    2708:	23 e0       	ldi	r18, 0x03	; 3
    270a:	92 07       	cpc	r25, r18
    270c:	11 f4       	brne	.+4      	; 0x2712 <USB_Device_GetDescriptor+0x22>
	{
		USB_Device_GetInternalSerialDescriptor();
    270e:	93 df       	rcall	.-218    	; 0x2636 <USB_Device_GetInternalSerialDescriptor>
		return;
    2710:	19 c0       	rjmp	.+50     	; 0x2744 <USB_Device_GetDescriptor+0x54>
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2712:	60 91 a8 08 	lds	r22, 0x08A8	; 0x8008a8 <USB_ControlRequest+0x4>
    2716:	70 91 a9 08 	lds	r23, 0x08A9	; 0x8008a9 <USB_ControlRequest+0x5>
    271a:	ae 01       	movw	r20, r28
    271c:	4f 5f       	subi	r20, 0xFF	; 255
    271e:	5f 4f       	sbci	r21, 0xFF	; 255
    2720:	0e 94 42 04 	call	0x884	; 0x884 <CALLBACK_USB_GetDescriptor>
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	71 f0       	breq	.+28     	; 0x2744 <USB_Device_GetDescriptor+0x54>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2728:	08 ee       	ldi	r16, 0xE8	; 232
    272a:	10 e0       	ldi	r17, 0x00	; 0
    272c:	f8 01       	movw	r30, r16
    272e:	20 81       	ld	r18, Z
    2730:	27 7f       	andi	r18, 0xF7	; 247
    2732:	20 83       	st	Z, r18
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    2734:	bc 01       	movw	r22, r24
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	9a 81       	ldd	r25, Y+2	; 0x02
    273a:	cd db       	rcall	.-2150   	; 0x1ed6 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    273c:	f8 01       	movw	r30, r16
    273e:	80 81       	ld	r24, Z
    2740:	8b 77       	andi	r24, 0x7B	; 123
    2742:	80 83       	st	Z, r24
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
}
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	1f 91       	pop	r17
    274e:	0f 91       	pop	r16
    2750:	08 95       	ret

00002752 <USB_Device_SetConfiguration>:
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2752:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <USB_ControlRequest+0x2>
    2756:	90 91 a7 08 	lds	r25, 0x08A7	; 0x8008a7 <USB_ControlRequest+0x3>
    275a:	99 27       	eor	r25, r25
    275c:	02 97       	sbiw	r24, 0x02	; 2
    275e:	ec f4       	brge	.+58     	; 0x279a <USB_Device_SetConfiguration+0x48>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2760:	e8 ee       	ldi	r30, 0xE8	; 232
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	87 7f       	andi	r24, 0xF7	; 247
    2768:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    276a:	80 91 a6 08 	lds	r24, 0x08A6	; 0x8008a6 <USB_ControlRequest+0x2>
    276e:	80 93 9f 08 	sts	0x089F, r24	; 0x80089f <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    2772:	da dc       	rcall	.-1612   	; 0x2128 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2774:	80 91 9f 08 	lds	r24, 0x089F	; 0x80089f <USB_Device_ConfigurationNumber>
    2778:	88 23       	and	r24, r24
    277a:	21 f0       	breq	.+8      	; 0x2784 <USB_Device_SetConfiguration+0x32>
	  USB_DeviceState = DEVICE_STATE_Configured;
    277c:	84 e0       	ldi	r24, 0x04	; 4
    277e:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <USB_DeviceState>
    2782:	09 c0       	rjmp	.+18     	; 0x2796 <USB_Device_SetConfiguration+0x44>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2784:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2788:	88 23       	and	r24, r24
    278a:	14 f4       	brge	.+4      	; 0x2790 <USB_Device_SetConfiguration+0x3e>
    278c:	84 e0       	ldi	r24, 0x04	; 4
    278e:	01 c0       	rjmp	.+2      	; 0x2792 <USB_Device_SetConfiguration+0x40>
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    2796:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <EVENT_USB_Device_ConfigurationChanged>
    279a:	08 95       	ret

0000279c <USB_Device_ProcessControlRequest>:
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    279c:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    279e:	e4 ea       	ldi	r30, 0xA4	; 164
    27a0:	f8 e0       	ldi	r31, 0x08	; 8

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    27a2:	05 c0       	rjmp	.+10     	; 0x27ae <USB_Device_ProcessControlRequest+0x12>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    27a4:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	  *(RequestHeader++) = Endpoint_Read_8();
    27a8:	90 83       	st	Z, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    27aa:	8f 5f       	subi	r24, 0xFF	; 255
	  *(RequestHeader++) = Endpoint_Read_8();
    27ac:	31 96       	adiw	r30, 0x01	; 1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    27ae:	88 30       	cpi	r24, 0x08	; 8
    27b0:	c8 f3       	brcs	.-14     	; 0x27a4 <USB_Device_ProcessControlRequest+0x8>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    27b2:	0e 94 d7 05 	call	0xbae	; 0xbae <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    27b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    27ba:	83 ff       	sbrs	r24, 3
    27bc:	30 c0       	rjmp	.+96     	; 0x281e <USB_Device_ProcessControlRequest+0x82>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    27be:	e4 ea       	ldi	r30, 0xA4	; 164
    27c0:	f8 e0       	ldi	r31, 0x08	; 8
    27c2:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
    27c4:	81 81       	ldd	r24, Z+1	; 0x01
    27c6:	85 30       	cpi	r24, 0x05	; 5
    27c8:	d1 f0       	breq	.+52     	; 0x27fe <USB_Device_ProcessControlRequest+0x62>
    27ca:	30 f4       	brcc	.+12     	; 0x27d8 <USB_Device_ProcessControlRequest+0x3c>
    27cc:	81 30       	cpi	r24, 0x01	; 1
    27ce:	89 f0       	breq	.+34     	; 0x27f2 <USB_Device_ProcessControlRequest+0x56>
    27d0:	50 f0       	brcs	.+20     	; 0x27e6 <USB_Device_ProcessControlRequest+0x4a>
    27d2:	83 30       	cpi	r24, 0x03	; 3
    27d4:	71 f0       	breq	.+28     	; 0x27f2 <USB_Device_ProcessControlRequest+0x56>
    27d6:	23 c0       	rjmp	.+70     	; 0x281e <USB_Device_ProcessControlRequest+0x82>
    27d8:	88 30       	cpi	r24, 0x08	; 8
    27da:	d1 f0       	breq	.+52     	; 0x2810 <USB_Device_ProcessControlRequest+0x74>
    27dc:	89 30       	cpi	r24, 0x09	; 9
    27de:	e1 f0       	breq	.+56     	; 0x2818 <USB_Device_ProcessControlRequest+0x7c>
    27e0:	86 30       	cpi	r24, 0x06	; 6
    27e2:	e9 f4       	brne	.+58     	; 0x281e <USB_Device_ProcessControlRequest+0x82>
    27e4:	10 c0       	rjmp	.+32     	; 0x2806 <USB_Device_ProcessControlRequest+0x6a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    27e6:	90 38       	cpi	r25, 0x80	; 128
    27e8:	11 f0       	breq	.+4      	; 0x27ee <USB_Device_ProcessControlRequest+0x52>
    27ea:	92 38       	cpi	r25, 0x82	; 130
    27ec:	c1 f4       	brne	.+48     	; 0x281e <USB_Device_ProcessControlRequest+0x82>
					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT)))
				{
					USB_Device_GetStatus();
    27ee:	77 de       	rcall	.-786    	; 0x24de <USB_Device_GetStatus>
    27f0:	16 c0       	rjmp	.+44     	; 0x281e <USB_Device_ProcessControlRequest+0x82>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    27f2:	99 23       	and	r25, r25
    27f4:	11 f0       	breq	.+4      	; 0x27fa <USB_Device_ProcessControlRequest+0x5e>
    27f6:	92 30       	cpi	r25, 0x02	; 2
					(bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_ENDPOINT)))
				{
					USB_Device_ClearSetFeature();
    27f8:	91 f4       	brne	.+36     	; 0x281e <USB_Device_ProcessControlRequest+0x82>
    27fa:	a1 de       	rcall	.-702    	; 0x253e <USB_Device_ClearSetFeature>
    27fc:	10 c0       	rjmp	.+32     	; 0x281e <USB_Device_ProcessControlRequest+0x82>
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    27fe:	91 11       	cpse	r25, r1
				  USB_Device_SetAddress();
    2800:	0e c0       	rjmp	.+28     	; 0x281e <USB_Device_ProcessControlRequest+0x82>
    2802:	e9 de       	rcall	.-558    	; 0x25d6 <USB_Device_SetAddress>
    2804:	0c c0       	rjmp	.+24     	; 0x281e <USB_Device_ProcessControlRequest+0x82>

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2806:	90 58       	subi	r25, 0x80	; 128
    2808:	92 30       	cpi	r25, 0x02	; 2
					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_INTERFACE)))
				{
					USB_Device_GetDescriptor();
    280a:	48 f4       	brcc	.+18     	; 0x281e <USB_Device_ProcessControlRequest+0x82>
    280c:	71 df       	rcall	.-286    	; 0x26f0 <USB_Device_GetDescriptor>
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    280e:	07 c0       	rjmp	.+14     	; 0x281e <USB_Device_ProcessControlRequest+0x82>
    2810:	90 38       	cpi	r25, 0x80	; 128
				  USB_Device_GetConfiguration();
    2812:	29 f4       	brne	.+10     	; 0x281e <USB_Device_ProcessControlRequest+0x82>
    2814:	02 df       	rcall	.-508    	; 0x261a <USB_Device_GetConfiguration>

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2816:	03 c0       	rjmp	.+6      	; 0x281e <USB_Device_ProcessControlRequest+0x82>
    2818:	91 11       	cpse	r25, r1
				  USB_Device_SetConfiguration();
    281a:	01 c0       	rjmp	.+2      	; 0x281e <USB_Device_ProcessControlRequest+0x82>
    281c:	9a df       	rcall	.-204    	; 0x2752 <USB_Device_SetConfiguration>
    281e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2822:	83 ff       	sbrs	r24, 3
    2824:	0a c0       	rjmp	.+20     	; 0x283a <USB_Device_ProcessControlRequest+0x9e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2826:	e8 ee       	ldi	r30, 0xE8	; 232
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	87 7f       	andi	r24, 0xF7	; 247
    282e:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2830:	eb ee       	ldi	r30, 0xEB	; 235
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	80 62       	ori	r24, 0x20	; 32
    2838:	80 83       	st	Z, r24
    283a:	08 95       	ret

0000283c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    283c:	08 95       	ret

0000283e <USB_DeviceTask>:
	#endif
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
    283e:	cf 93       	push	r28
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2840:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <USB_DeviceState>
    2844:	88 23       	and	r24, r24
    2846:	99 f0       	breq	.+38     	; 0x286e <USB_DeviceTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2848:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    284c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    284e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2852:	98 2f       	mov	r25, r24
    2854:	91 70       	andi	r25, 0x01	; 1
    2856:	80 fd       	sbrc	r24, 0
    2858:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    285a:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    285c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2860:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2864:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    2866:	9a df       	rcall	.-204    	; 0x279c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2868:	cf 70       	andi	r28, 0x0F	; 15
    286a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(PrevEndpoint);
}
    286e:	cf 91       	pop	r28
    2870:	08 95       	ret

00002872 <USB_USBTask>:
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
    2872:	e5 cf       	rjmp	.-54     	; 0x283e <USB_DeviceTask>
    2874:	08 95       	ret

00002876 <__udivmodsi4>:
    2876:	a1 e2       	ldi	r26, 0x21	; 33
    2878:	1a 2e       	mov	r1, r26
    287a:	aa 1b       	sub	r26, r26
    287c:	bb 1b       	sub	r27, r27
    287e:	fd 01       	movw	r30, r26
    2880:	0d c0       	rjmp	.+26     	; 0x289c <__udivmodsi4_ep>

00002882 <__udivmodsi4_loop>:
    2882:	aa 1f       	adc	r26, r26
    2884:	bb 1f       	adc	r27, r27
    2886:	ee 1f       	adc	r30, r30
    2888:	ff 1f       	adc	r31, r31
    288a:	a2 17       	cp	r26, r18
    288c:	b3 07       	cpc	r27, r19
    288e:	e4 07       	cpc	r30, r20
    2890:	f5 07       	cpc	r31, r21
    2892:	20 f0       	brcs	.+8      	; 0x289c <__udivmodsi4_ep>
    2894:	a2 1b       	sub	r26, r18
    2896:	b3 0b       	sbc	r27, r19
    2898:	e4 0b       	sbc	r30, r20
    289a:	f5 0b       	sbc	r31, r21

0000289c <__udivmodsi4_ep>:
    289c:	66 1f       	adc	r22, r22
    289e:	77 1f       	adc	r23, r23
    28a0:	88 1f       	adc	r24, r24
    28a2:	99 1f       	adc	r25, r25
    28a4:	1a 94       	dec	r1
    28a6:	69 f7       	brne	.-38     	; 0x2882 <__udivmodsi4_loop>
    28a8:	60 95       	com	r22
    28aa:	70 95       	com	r23
    28ac:	80 95       	com	r24
    28ae:	90 95       	com	r25
    28b0:	9b 01       	movw	r18, r22
    28b2:	ac 01       	movw	r20, r24
    28b4:	bd 01       	movw	r22, r26
    28b6:	cf 01       	movw	r24, r30
    28b8:	08 95       	ret

000028ba <__umulhisi3>:
    28ba:	a2 9f       	mul	r26, r18
    28bc:	b0 01       	movw	r22, r0
    28be:	b3 9f       	mul	r27, r19
    28c0:	c0 01       	movw	r24, r0
    28c2:	a3 9f       	mul	r26, r19
    28c4:	70 0d       	add	r23, r0
    28c6:	81 1d       	adc	r24, r1
    28c8:	11 24       	eor	r1, r1
    28ca:	91 1d       	adc	r25, r1
    28cc:	b2 9f       	mul	r27, r18
    28ce:	70 0d       	add	r23, r0
    28d0:	81 1d       	adc	r24, r1
    28d2:	11 24       	eor	r1, r1
    28d4:	91 1d       	adc	r25, r1
    28d6:	08 95       	ret

000028d8 <isgraph>:
    28d8:	80 32       	cpi	r24, 0x20	; 32
    28da:	09 f0       	breq	.+2      	; 0x28de <isprint+0x2>

000028dc <isprint>:
    28dc:	91 11       	cpse	r25, r1
    28de:	88 c2       	rjmp	.+1296   	; 0x2df0 <__ctype_isfalse>
    28e0:	80 52       	subi	r24, 0x20	; 32
    28e2:	8f 55       	subi	r24, 0x5F	; 95
    28e4:	e0 f7       	brcc	.-8      	; 0x28de <isprint+0x2>
    28e6:	08 95       	ret

000028e8 <memcmp>:
    28e8:	fb 01       	movw	r30, r22
    28ea:	dc 01       	movw	r26, r24
    28ec:	04 c0       	rjmp	.+8      	; 0x28f6 <memcmp+0xe>
    28ee:	8d 91       	ld	r24, X+
    28f0:	01 90       	ld	r0, Z+
    28f2:	80 19       	sub	r24, r0
    28f4:	21 f4       	brne	.+8      	; 0x28fe <memcmp+0x16>
    28f6:	41 50       	subi	r20, 0x01	; 1
    28f8:	50 40       	sbci	r21, 0x00	; 0
    28fa:	c8 f7       	brcc	.-14     	; 0x28ee <memcmp+0x6>
    28fc:	88 1b       	sub	r24, r24
    28fe:	99 0b       	sbc	r25, r25
    2900:	08 95       	ret

00002902 <memcpy>:
    2902:	fb 01       	movw	r30, r22
    2904:	dc 01       	movw	r26, r24
    2906:	02 c0       	rjmp	.+4      	; 0x290c <memcpy+0xa>
    2908:	01 90       	ld	r0, Z+
    290a:	0d 92       	st	X+, r0
    290c:	41 50       	subi	r20, 0x01	; 1
    290e:	50 40       	sbci	r21, 0x00	; 0
    2910:	d8 f7       	brcc	.-10     	; 0x2908 <memcpy+0x6>
    2912:	08 95       	ret

00002914 <memset>:
    2914:	dc 01       	movw	r26, r24
    2916:	01 c0       	rjmp	.+2      	; 0x291a <memset+0x6>
    2918:	6d 93       	st	X+, r22
    291a:	41 50       	subi	r20, 0x01	; 1
    291c:	50 40       	sbci	r21, 0x00	; 0
    291e:	e0 f7       	brcc	.-8      	; 0x2918 <memset+0x4>
    2920:	08 95       	ret

00002922 <printf>:
    2922:	cf 93       	push	r28
    2924:	df 93       	push	r29
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	ae 01       	movw	r20, r28
    292c:	4b 5f       	subi	r20, 0xFB	; 251
    292e:	5f 4f       	sbci	r21, 0xFF	; 255
    2930:	fa 01       	movw	r30, r20
    2932:	61 91       	ld	r22, Z+
    2934:	71 91       	ld	r23, Z+
    2936:	af 01       	movw	r20, r30
    2938:	80 91 ae 08 	lds	r24, 0x08AE	; 0x8008ae <__iob+0x2>
    293c:	90 91 af 08 	lds	r25, 0x08AF	; 0x8008af <__iob+0x3>
    2940:	5a d0       	rcall	.+180    	; 0x29f6 <vfprintf>
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	08 95       	ret

00002948 <printf_P>:
    2948:	0f 93       	push	r16
    294a:	1f 93       	push	r17
    294c:	cf 93       	push	r28
    294e:	df 93       	push	r29
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62
    2954:	ae 01       	movw	r20, r28
    2956:	49 5f       	subi	r20, 0xF9	; 249
    2958:	5f 4f       	sbci	r21, 0xFF	; 255
    295a:	da 01       	movw	r26, r20
    295c:	6d 91       	ld	r22, X+
    295e:	7d 91       	ld	r23, X+
    2960:	ad 01       	movw	r20, r26
    2962:	0c ea       	ldi	r16, 0xAC	; 172
    2964:	18 e0       	ldi	r17, 0x08	; 8
    2966:	f8 01       	movw	r30, r16
    2968:	82 81       	ldd	r24, Z+2	; 0x02
    296a:	93 81       	ldd	r25, Z+3	; 0x03
    296c:	dc 01       	movw	r26, r24
    296e:	13 96       	adiw	r26, 0x03	; 3
    2970:	2c 91       	ld	r18, X
    2972:	13 97       	sbiw	r26, 0x03	; 3
    2974:	28 60       	ori	r18, 0x08	; 8
    2976:	13 96       	adiw	r26, 0x03	; 3
    2978:	2c 93       	st	X, r18
    297a:	3d d0       	rcall	.+122    	; 0x29f6 <vfprintf>
    297c:	d8 01       	movw	r26, r16
    297e:	12 96       	adiw	r26, 0x02	; 2
    2980:	ed 91       	ld	r30, X+
    2982:	fc 91       	ld	r31, X
    2984:	13 97       	sbiw	r26, 0x03	; 3
    2986:	23 81       	ldd	r18, Z+3	; 0x03
    2988:	27 7f       	andi	r18, 0xF7	; 247
    298a:	23 83       	std	Z+3, r18	; 0x03
    298c:	df 91       	pop	r29
    298e:	cf 91       	pop	r28
    2990:	1f 91       	pop	r17
    2992:	0f 91       	pop	r16
    2994:	08 95       	ret

00002996 <puts>:
    2996:	0f 93       	push	r16
    2998:	1f 93       	push	r17
    299a:	cf 93       	push	r28
    299c:	df 93       	push	r29
    299e:	e0 91 ae 08 	lds	r30, 0x08AE	; 0x8008ae <__iob+0x2>
    29a2:	f0 91 af 08 	lds	r31, 0x08AF	; 0x8008af <__iob+0x3>
    29a6:	23 81       	ldd	r18, Z+3	; 0x03
    29a8:	21 ff       	sbrs	r18, 1
    29aa:	1b c0       	rjmp	.+54     	; 0x29e2 <puts+0x4c>
    29ac:	8c 01       	movw	r16, r24
    29ae:	d0 e0       	ldi	r29, 0x00	; 0
    29b0:	c0 e0       	ldi	r28, 0x00	; 0
    29b2:	f8 01       	movw	r30, r16
    29b4:	81 91       	ld	r24, Z+
    29b6:	8f 01       	movw	r16, r30
    29b8:	60 91 ae 08 	lds	r22, 0x08AE	; 0x8008ae <__iob+0x2>
    29bc:	70 91 af 08 	lds	r23, 0x08AF	; 0x8008af <__iob+0x3>
    29c0:	db 01       	movw	r26, r22
    29c2:	18 96       	adiw	r26, 0x08	; 8
    29c4:	ed 91       	ld	r30, X+
    29c6:	fc 91       	ld	r31, X
    29c8:	19 97       	sbiw	r26, 0x09	; 9
    29ca:	88 23       	and	r24, r24
    29cc:	31 f0       	breq	.+12     	; 0x29da <puts+0x44>
    29ce:	09 95       	icall
    29d0:	89 2b       	or	r24, r25
    29d2:	79 f3       	breq	.-34     	; 0x29b2 <puts+0x1c>
    29d4:	df ef       	ldi	r29, 0xFF	; 255
    29d6:	cf ef       	ldi	r28, 0xFF	; 255
    29d8:	ec cf       	rjmp	.-40     	; 0x29b2 <puts+0x1c>
    29da:	8a e0       	ldi	r24, 0x0A	; 10
    29dc:	09 95       	icall
    29de:	89 2b       	or	r24, r25
    29e0:	19 f0       	breq	.+6      	; 0x29e8 <puts+0x52>
    29e2:	8f ef       	ldi	r24, 0xFF	; 255
    29e4:	9f ef       	ldi	r25, 0xFF	; 255
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <puts+0x56>
    29e8:	8d 2f       	mov	r24, r29
    29ea:	9c 2f       	mov	r25, r28
    29ec:	df 91       	pop	r29
    29ee:	cf 91       	pop	r28
    29f0:	1f 91       	pop	r17
    29f2:	0f 91       	pop	r16
    29f4:	08 95       	ret

000029f6 <vfprintf>:
    29f6:	2f 92       	push	r2
    29f8:	3f 92       	push	r3
    29fa:	4f 92       	push	r4
    29fc:	5f 92       	push	r5
    29fe:	6f 92       	push	r6
    2a00:	7f 92       	push	r7
    2a02:	8f 92       	push	r8
    2a04:	9f 92       	push	r9
    2a06:	af 92       	push	r10
    2a08:	bf 92       	push	r11
    2a0a:	cf 92       	push	r12
    2a0c:	df 92       	push	r13
    2a0e:	ef 92       	push	r14
    2a10:	ff 92       	push	r15
    2a12:	0f 93       	push	r16
    2a14:	1f 93       	push	r17
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	2b 97       	sbiw	r28, 0x0b	; 11
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	de bf       	out	0x3e, r29	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	cd bf       	out	0x3d, r28	; 61
    2a2a:	6c 01       	movw	r12, r24
    2a2c:	7b 01       	movw	r14, r22
    2a2e:	8a 01       	movw	r16, r20
    2a30:	fc 01       	movw	r30, r24
    2a32:	17 82       	std	Z+7, r1	; 0x07
    2a34:	16 82       	std	Z+6, r1	; 0x06
    2a36:	83 81       	ldd	r24, Z+3	; 0x03
    2a38:	81 ff       	sbrs	r24, 1
    2a3a:	bf c1       	rjmp	.+894    	; 0x2dba <vfprintf+0x3c4>
    2a3c:	ce 01       	movw	r24, r28
    2a3e:	01 96       	adiw	r24, 0x01	; 1
    2a40:	3c 01       	movw	r6, r24
    2a42:	f6 01       	movw	r30, r12
    2a44:	93 81       	ldd	r25, Z+3	; 0x03
    2a46:	f7 01       	movw	r30, r14
    2a48:	93 fd       	sbrc	r25, 3
    2a4a:	85 91       	lpm	r24, Z+
    2a4c:	93 ff       	sbrs	r25, 3
    2a4e:	81 91       	ld	r24, Z+
    2a50:	7f 01       	movw	r14, r30
    2a52:	88 23       	and	r24, r24
    2a54:	09 f4       	brne	.+2      	; 0x2a58 <vfprintf+0x62>
    2a56:	ad c1       	rjmp	.+858    	; 0x2db2 <vfprintf+0x3bc>
    2a58:	85 32       	cpi	r24, 0x25	; 37
    2a5a:	39 f4       	brne	.+14     	; 0x2a6a <vfprintf+0x74>
    2a5c:	93 fd       	sbrc	r25, 3
    2a5e:	85 91       	lpm	r24, Z+
    2a60:	93 ff       	sbrs	r25, 3
    2a62:	81 91       	ld	r24, Z+
    2a64:	7f 01       	movw	r14, r30
    2a66:	85 32       	cpi	r24, 0x25	; 37
    2a68:	21 f4       	brne	.+8      	; 0x2a72 <vfprintf+0x7c>
    2a6a:	b6 01       	movw	r22, r12
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	d9 d1       	rcall	.+946    	; 0x2e22 <fputc>
    2a70:	e8 cf       	rjmp	.-48     	; 0x2a42 <vfprintf+0x4c>
    2a72:	91 2c       	mov	r9, r1
    2a74:	21 2c       	mov	r2, r1
    2a76:	31 2c       	mov	r3, r1
    2a78:	ff e1       	ldi	r31, 0x1F	; 31
    2a7a:	f3 15       	cp	r31, r3
    2a7c:	d8 f0       	brcs	.+54     	; 0x2ab4 <vfprintf+0xbe>
    2a7e:	8b 32       	cpi	r24, 0x2B	; 43
    2a80:	79 f0       	breq	.+30     	; 0x2aa0 <vfprintf+0xaa>
    2a82:	38 f4       	brcc	.+14     	; 0x2a92 <vfprintf+0x9c>
    2a84:	80 32       	cpi	r24, 0x20	; 32
    2a86:	79 f0       	breq	.+30     	; 0x2aa6 <vfprintf+0xb0>
    2a88:	83 32       	cpi	r24, 0x23	; 35
    2a8a:	a1 f4       	brne	.+40     	; 0x2ab4 <vfprintf+0xbe>
    2a8c:	23 2d       	mov	r18, r3
    2a8e:	20 61       	ori	r18, 0x10	; 16
    2a90:	1d c0       	rjmp	.+58     	; 0x2acc <vfprintf+0xd6>
    2a92:	8d 32       	cpi	r24, 0x2D	; 45
    2a94:	61 f0       	breq	.+24     	; 0x2aae <vfprintf+0xb8>
    2a96:	80 33       	cpi	r24, 0x30	; 48
    2a98:	69 f4       	brne	.+26     	; 0x2ab4 <vfprintf+0xbe>
    2a9a:	23 2d       	mov	r18, r3
    2a9c:	21 60       	ori	r18, 0x01	; 1
    2a9e:	16 c0       	rjmp	.+44     	; 0x2acc <vfprintf+0xd6>
    2aa0:	83 2d       	mov	r24, r3
    2aa2:	82 60       	ori	r24, 0x02	; 2
    2aa4:	38 2e       	mov	r3, r24
    2aa6:	e3 2d       	mov	r30, r3
    2aa8:	e4 60       	ori	r30, 0x04	; 4
    2aaa:	3e 2e       	mov	r3, r30
    2aac:	2a c0       	rjmp	.+84     	; 0x2b02 <vfprintf+0x10c>
    2aae:	f3 2d       	mov	r31, r3
    2ab0:	f8 60       	ori	r31, 0x08	; 8
    2ab2:	1d c0       	rjmp	.+58     	; 0x2aee <vfprintf+0xf8>
    2ab4:	37 fc       	sbrc	r3, 7
    2ab6:	2d c0       	rjmp	.+90     	; 0x2b12 <vfprintf+0x11c>
    2ab8:	20 ed       	ldi	r18, 0xD0	; 208
    2aba:	28 0f       	add	r18, r24
    2abc:	2a 30       	cpi	r18, 0x0A	; 10
    2abe:	40 f0       	brcs	.+16     	; 0x2ad0 <vfprintf+0xda>
    2ac0:	8e 32       	cpi	r24, 0x2E	; 46
    2ac2:	b9 f4       	brne	.+46     	; 0x2af2 <vfprintf+0xfc>
    2ac4:	36 fc       	sbrc	r3, 6
    2ac6:	75 c1       	rjmp	.+746    	; 0x2db2 <vfprintf+0x3bc>
    2ac8:	23 2d       	mov	r18, r3
    2aca:	20 64       	ori	r18, 0x40	; 64
    2acc:	32 2e       	mov	r3, r18
    2ace:	19 c0       	rjmp	.+50     	; 0x2b02 <vfprintf+0x10c>
    2ad0:	36 fe       	sbrs	r3, 6
    2ad2:	06 c0       	rjmp	.+12     	; 0x2ae0 <vfprintf+0xea>
    2ad4:	8a e0       	ldi	r24, 0x0A	; 10
    2ad6:	98 9e       	mul	r9, r24
    2ad8:	20 0d       	add	r18, r0
    2ada:	11 24       	eor	r1, r1
    2adc:	92 2e       	mov	r9, r18
    2ade:	11 c0       	rjmp	.+34     	; 0x2b02 <vfprintf+0x10c>
    2ae0:	ea e0       	ldi	r30, 0x0A	; 10
    2ae2:	2e 9e       	mul	r2, r30
    2ae4:	20 0d       	add	r18, r0
    2ae6:	11 24       	eor	r1, r1
    2ae8:	22 2e       	mov	r2, r18
    2aea:	f3 2d       	mov	r31, r3
    2aec:	f0 62       	ori	r31, 0x20	; 32
    2aee:	3f 2e       	mov	r3, r31
    2af0:	08 c0       	rjmp	.+16     	; 0x2b02 <vfprintf+0x10c>
    2af2:	8c 36       	cpi	r24, 0x6C	; 108
    2af4:	21 f4       	brne	.+8      	; 0x2afe <vfprintf+0x108>
    2af6:	83 2d       	mov	r24, r3
    2af8:	80 68       	ori	r24, 0x80	; 128
    2afa:	38 2e       	mov	r3, r24
    2afc:	02 c0       	rjmp	.+4      	; 0x2b02 <vfprintf+0x10c>
    2afe:	88 36       	cpi	r24, 0x68	; 104
    2b00:	41 f4       	brne	.+16     	; 0x2b12 <vfprintf+0x11c>
    2b02:	f7 01       	movw	r30, r14
    2b04:	93 fd       	sbrc	r25, 3
    2b06:	85 91       	lpm	r24, Z+
    2b08:	93 ff       	sbrs	r25, 3
    2b0a:	81 91       	ld	r24, Z+
    2b0c:	7f 01       	movw	r14, r30
    2b0e:	81 11       	cpse	r24, r1
    2b10:	b3 cf       	rjmp	.-154    	; 0x2a78 <vfprintf+0x82>
    2b12:	98 2f       	mov	r25, r24
    2b14:	9f 7d       	andi	r25, 0xDF	; 223
    2b16:	95 54       	subi	r25, 0x45	; 69
    2b18:	93 30       	cpi	r25, 0x03	; 3
    2b1a:	28 f4       	brcc	.+10     	; 0x2b26 <vfprintf+0x130>
    2b1c:	0c 5f       	subi	r16, 0xFC	; 252
    2b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b20:	9f e3       	ldi	r25, 0x3F	; 63
    2b22:	99 83       	std	Y+1, r25	; 0x01
    2b24:	0d c0       	rjmp	.+26     	; 0x2b40 <vfprintf+0x14a>
    2b26:	83 36       	cpi	r24, 0x63	; 99
    2b28:	31 f0       	breq	.+12     	; 0x2b36 <vfprintf+0x140>
    2b2a:	83 37       	cpi	r24, 0x73	; 115
    2b2c:	71 f0       	breq	.+28     	; 0x2b4a <vfprintf+0x154>
    2b2e:	83 35       	cpi	r24, 0x53	; 83
    2b30:	09 f0       	breq	.+2      	; 0x2b34 <vfprintf+0x13e>
    2b32:	55 c0       	rjmp	.+170    	; 0x2bde <vfprintf+0x1e8>
    2b34:	20 c0       	rjmp	.+64     	; 0x2b76 <vfprintf+0x180>
    2b36:	f8 01       	movw	r30, r16
    2b38:	80 81       	ld	r24, Z
    2b3a:	89 83       	std	Y+1, r24	; 0x01
    2b3c:	0e 5f       	subi	r16, 0xFE	; 254
    2b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b40:	88 24       	eor	r8, r8
    2b42:	83 94       	inc	r8
    2b44:	91 2c       	mov	r9, r1
    2b46:	53 01       	movw	r10, r6
    2b48:	12 c0       	rjmp	.+36     	; 0x2b6e <vfprintf+0x178>
    2b4a:	28 01       	movw	r4, r16
    2b4c:	f2 e0       	ldi	r31, 0x02	; 2
    2b4e:	4f 0e       	add	r4, r31
    2b50:	51 1c       	adc	r5, r1
    2b52:	f8 01       	movw	r30, r16
    2b54:	a0 80       	ld	r10, Z
    2b56:	b1 80       	ldd	r11, Z+1	; 0x01
    2b58:	36 fe       	sbrs	r3, 6
    2b5a:	03 c0       	rjmp	.+6      	; 0x2b62 <vfprintf+0x16c>
    2b5c:	69 2d       	mov	r22, r9
    2b5e:	70 e0       	ldi	r23, 0x00	; 0
    2b60:	02 c0       	rjmp	.+4      	; 0x2b66 <vfprintf+0x170>
    2b62:	6f ef       	ldi	r22, 0xFF	; 255
    2b64:	7f ef       	ldi	r23, 0xFF	; 255
    2b66:	c5 01       	movw	r24, r10
    2b68:	51 d1       	rcall	.+674    	; 0x2e0c <strnlen>
    2b6a:	4c 01       	movw	r8, r24
    2b6c:	82 01       	movw	r16, r4
    2b6e:	f3 2d       	mov	r31, r3
    2b70:	ff 77       	andi	r31, 0x7F	; 127
    2b72:	3f 2e       	mov	r3, r31
    2b74:	15 c0       	rjmp	.+42     	; 0x2ba0 <vfprintf+0x1aa>
    2b76:	28 01       	movw	r4, r16
    2b78:	22 e0       	ldi	r18, 0x02	; 2
    2b7a:	42 0e       	add	r4, r18
    2b7c:	51 1c       	adc	r5, r1
    2b7e:	f8 01       	movw	r30, r16
    2b80:	a0 80       	ld	r10, Z
    2b82:	b1 80       	ldd	r11, Z+1	; 0x01
    2b84:	36 fe       	sbrs	r3, 6
    2b86:	03 c0       	rjmp	.+6      	; 0x2b8e <vfprintf+0x198>
    2b88:	69 2d       	mov	r22, r9
    2b8a:	70 e0       	ldi	r23, 0x00	; 0
    2b8c:	02 c0       	rjmp	.+4      	; 0x2b92 <vfprintf+0x19c>
    2b8e:	6f ef       	ldi	r22, 0xFF	; 255
    2b90:	7f ef       	ldi	r23, 0xFF	; 255
    2b92:	c5 01       	movw	r24, r10
    2b94:	30 d1       	rcall	.+608    	; 0x2df6 <strnlen_P>
    2b96:	4c 01       	movw	r8, r24
    2b98:	f3 2d       	mov	r31, r3
    2b9a:	f0 68       	ori	r31, 0x80	; 128
    2b9c:	3f 2e       	mov	r3, r31
    2b9e:	82 01       	movw	r16, r4
    2ba0:	33 fc       	sbrc	r3, 3
    2ba2:	19 c0       	rjmp	.+50     	; 0x2bd6 <vfprintf+0x1e0>
    2ba4:	82 2d       	mov	r24, r2
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	88 16       	cp	r8, r24
    2baa:	99 06       	cpc	r9, r25
    2bac:	a0 f4       	brcc	.+40     	; 0x2bd6 <vfprintf+0x1e0>
    2bae:	b6 01       	movw	r22, r12
    2bb0:	80 e2       	ldi	r24, 0x20	; 32
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	36 d1       	rcall	.+620    	; 0x2e22 <fputc>
    2bb6:	2a 94       	dec	r2
    2bb8:	f5 cf       	rjmp	.-22     	; 0x2ba4 <vfprintf+0x1ae>
    2bba:	f5 01       	movw	r30, r10
    2bbc:	37 fc       	sbrc	r3, 7
    2bbe:	85 91       	lpm	r24, Z+
    2bc0:	37 fe       	sbrs	r3, 7
    2bc2:	81 91       	ld	r24, Z+
    2bc4:	5f 01       	movw	r10, r30
    2bc6:	b6 01       	movw	r22, r12
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	2b d1       	rcall	.+598    	; 0x2e22 <fputc>
    2bcc:	21 10       	cpse	r2, r1
    2bce:	2a 94       	dec	r2
    2bd0:	21 e0       	ldi	r18, 0x01	; 1
    2bd2:	82 1a       	sub	r8, r18
    2bd4:	91 08       	sbc	r9, r1
    2bd6:	81 14       	cp	r8, r1
    2bd8:	91 04       	cpc	r9, r1
    2bda:	79 f7       	brne	.-34     	; 0x2bba <vfprintf+0x1c4>
    2bdc:	e1 c0       	rjmp	.+450    	; 0x2da0 <vfprintf+0x3aa>
    2bde:	84 36       	cpi	r24, 0x64	; 100
    2be0:	11 f0       	breq	.+4      	; 0x2be6 <vfprintf+0x1f0>
    2be2:	89 36       	cpi	r24, 0x69	; 105
    2be4:	39 f5       	brne	.+78     	; 0x2c34 <vfprintf+0x23e>
    2be6:	f8 01       	movw	r30, r16
    2be8:	37 fe       	sbrs	r3, 7
    2bea:	07 c0       	rjmp	.+14     	; 0x2bfa <vfprintf+0x204>
    2bec:	60 81       	ld	r22, Z
    2bee:	71 81       	ldd	r23, Z+1	; 0x01
    2bf0:	82 81       	ldd	r24, Z+2	; 0x02
    2bf2:	93 81       	ldd	r25, Z+3	; 0x03
    2bf4:	0c 5f       	subi	r16, 0xFC	; 252
    2bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf8:	08 c0       	rjmp	.+16     	; 0x2c0a <vfprintf+0x214>
    2bfa:	60 81       	ld	r22, Z
    2bfc:	71 81       	ldd	r23, Z+1	; 0x01
    2bfe:	07 2e       	mov	r0, r23
    2c00:	00 0c       	add	r0, r0
    2c02:	88 0b       	sbc	r24, r24
    2c04:	99 0b       	sbc	r25, r25
    2c06:	0e 5f       	subi	r16, 0xFE	; 254
    2c08:	1f 4f       	sbci	r17, 0xFF	; 255
    2c0a:	f3 2d       	mov	r31, r3
    2c0c:	ff 76       	andi	r31, 0x6F	; 111
    2c0e:	3f 2e       	mov	r3, r31
    2c10:	97 ff       	sbrs	r25, 7
    2c12:	09 c0       	rjmp	.+18     	; 0x2c26 <vfprintf+0x230>
    2c14:	90 95       	com	r25
    2c16:	80 95       	com	r24
    2c18:	70 95       	com	r23
    2c1a:	61 95       	neg	r22
    2c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1e:	8f 4f       	sbci	r24, 0xFF	; 255
    2c20:	9f 4f       	sbci	r25, 0xFF	; 255
    2c22:	f0 68       	ori	r31, 0x80	; 128
    2c24:	3f 2e       	mov	r3, r31
    2c26:	2a e0       	ldi	r18, 0x0A	; 10
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	a3 01       	movw	r20, r6
    2c2c:	36 d1       	rcall	.+620    	; 0x2e9a <__ultoa_invert>
    2c2e:	88 2e       	mov	r8, r24
    2c30:	86 18       	sub	r8, r6
    2c32:	44 c0       	rjmp	.+136    	; 0x2cbc <vfprintf+0x2c6>
    2c34:	85 37       	cpi	r24, 0x75	; 117
    2c36:	31 f4       	brne	.+12     	; 0x2c44 <vfprintf+0x24e>
    2c38:	23 2d       	mov	r18, r3
    2c3a:	2f 7e       	andi	r18, 0xEF	; 239
    2c3c:	b2 2e       	mov	r11, r18
    2c3e:	2a e0       	ldi	r18, 0x0A	; 10
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	25 c0       	rjmp	.+74     	; 0x2c8e <vfprintf+0x298>
    2c44:	93 2d       	mov	r25, r3
    2c46:	99 7f       	andi	r25, 0xF9	; 249
    2c48:	b9 2e       	mov	r11, r25
    2c4a:	8f 36       	cpi	r24, 0x6F	; 111
    2c4c:	c1 f0       	breq	.+48     	; 0x2c7e <vfprintf+0x288>
    2c4e:	18 f4       	brcc	.+6      	; 0x2c56 <vfprintf+0x260>
    2c50:	88 35       	cpi	r24, 0x58	; 88
    2c52:	79 f0       	breq	.+30     	; 0x2c72 <vfprintf+0x27c>
    2c54:	ae c0       	rjmp	.+348    	; 0x2db2 <vfprintf+0x3bc>
    2c56:	80 37       	cpi	r24, 0x70	; 112
    2c58:	19 f0       	breq	.+6      	; 0x2c60 <vfprintf+0x26a>
    2c5a:	88 37       	cpi	r24, 0x78	; 120
    2c5c:	21 f0       	breq	.+8      	; 0x2c66 <vfprintf+0x270>
    2c5e:	a9 c0       	rjmp	.+338    	; 0x2db2 <vfprintf+0x3bc>
    2c60:	e9 2f       	mov	r30, r25
    2c62:	e0 61       	ori	r30, 0x10	; 16
    2c64:	be 2e       	mov	r11, r30
    2c66:	b4 fe       	sbrs	r11, 4
    2c68:	0d c0       	rjmp	.+26     	; 0x2c84 <vfprintf+0x28e>
    2c6a:	fb 2d       	mov	r31, r11
    2c6c:	f4 60       	ori	r31, 0x04	; 4
    2c6e:	bf 2e       	mov	r11, r31
    2c70:	09 c0       	rjmp	.+18     	; 0x2c84 <vfprintf+0x28e>
    2c72:	34 fe       	sbrs	r3, 4
    2c74:	0a c0       	rjmp	.+20     	; 0x2c8a <vfprintf+0x294>
    2c76:	29 2f       	mov	r18, r25
    2c78:	26 60       	ori	r18, 0x06	; 6
    2c7a:	b2 2e       	mov	r11, r18
    2c7c:	06 c0       	rjmp	.+12     	; 0x2c8a <vfprintf+0x294>
    2c7e:	28 e0       	ldi	r18, 0x08	; 8
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	05 c0       	rjmp	.+10     	; 0x2c8e <vfprintf+0x298>
    2c84:	20 e1       	ldi	r18, 0x10	; 16
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	02 c0       	rjmp	.+4      	; 0x2c8e <vfprintf+0x298>
    2c8a:	20 e1       	ldi	r18, 0x10	; 16
    2c8c:	32 e0       	ldi	r19, 0x02	; 2
    2c8e:	f8 01       	movw	r30, r16
    2c90:	b7 fe       	sbrs	r11, 7
    2c92:	07 c0       	rjmp	.+14     	; 0x2ca2 <vfprintf+0x2ac>
    2c94:	60 81       	ld	r22, Z
    2c96:	71 81       	ldd	r23, Z+1	; 0x01
    2c98:	82 81       	ldd	r24, Z+2	; 0x02
    2c9a:	93 81       	ldd	r25, Z+3	; 0x03
    2c9c:	0c 5f       	subi	r16, 0xFC	; 252
    2c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca0:	06 c0       	rjmp	.+12     	; 0x2cae <vfprintf+0x2b8>
    2ca2:	60 81       	ld	r22, Z
    2ca4:	71 81       	ldd	r23, Z+1	; 0x01
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	0e 5f       	subi	r16, 0xFE	; 254
    2cac:	1f 4f       	sbci	r17, 0xFF	; 255
    2cae:	a3 01       	movw	r20, r6
    2cb0:	f4 d0       	rcall	.+488    	; 0x2e9a <__ultoa_invert>
    2cb2:	88 2e       	mov	r8, r24
    2cb4:	86 18       	sub	r8, r6
    2cb6:	fb 2d       	mov	r31, r11
    2cb8:	ff 77       	andi	r31, 0x7F	; 127
    2cba:	3f 2e       	mov	r3, r31
    2cbc:	36 fe       	sbrs	r3, 6
    2cbe:	0d c0       	rjmp	.+26     	; 0x2cda <vfprintf+0x2e4>
    2cc0:	23 2d       	mov	r18, r3
    2cc2:	2e 7f       	andi	r18, 0xFE	; 254
    2cc4:	a2 2e       	mov	r10, r18
    2cc6:	89 14       	cp	r8, r9
    2cc8:	58 f4       	brcc	.+22     	; 0x2ce0 <vfprintf+0x2ea>
    2cca:	34 fe       	sbrs	r3, 4
    2ccc:	0b c0       	rjmp	.+22     	; 0x2ce4 <vfprintf+0x2ee>
    2cce:	32 fc       	sbrc	r3, 2
    2cd0:	09 c0       	rjmp	.+18     	; 0x2ce4 <vfprintf+0x2ee>
    2cd2:	83 2d       	mov	r24, r3
    2cd4:	8e 7e       	andi	r24, 0xEE	; 238
    2cd6:	a8 2e       	mov	r10, r24
    2cd8:	05 c0       	rjmp	.+10     	; 0x2ce4 <vfprintf+0x2ee>
    2cda:	b8 2c       	mov	r11, r8
    2cdc:	a3 2c       	mov	r10, r3
    2cde:	03 c0       	rjmp	.+6      	; 0x2ce6 <vfprintf+0x2f0>
    2ce0:	b8 2c       	mov	r11, r8
    2ce2:	01 c0       	rjmp	.+2      	; 0x2ce6 <vfprintf+0x2f0>
    2ce4:	b9 2c       	mov	r11, r9
    2ce6:	a4 fe       	sbrs	r10, 4
    2ce8:	0f c0       	rjmp	.+30     	; 0x2d08 <vfprintf+0x312>
    2cea:	fe 01       	movw	r30, r28
    2cec:	e8 0d       	add	r30, r8
    2cee:	f1 1d       	adc	r31, r1
    2cf0:	80 81       	ld	r24, Z
    2cf2:	80 33       	cpi	r24, 0x30	; 48
    2cf4:	21 f4       	brne	.+8      	; 0x2cfe <vfprintf+0x308>
    2cf6:	9a 2d       	mov	r25, r10
    2cf8:	99 7e       	andi	r25, 0xE9	; 233
    2cfa:	a9 2e       	mov	r10, r25
    2cfc:	09 c0       	rjmp	.+18     	; 0x2d10 <vfprintf+0x31a>
    2cfe:	a2 fe       	sbrs	r10, 2
    2d00:	06 c0       	rjmp	.+12     	; 0x2d0e <vfprintf+0x318>
    2d02:	b3 94       	inc	r11
    2d04:	b3 94       	inc	r11
    2d06:	04 c0       	rjmp	.+8      	; 0x2d10 <vfprintf+0x31a>
    2d08:	8a 2d       	mov	r24, r10
    2d0a:	86 78       	andi	r24, 0x86	; 134
    2d0c:	09 f0       	breq	.+2      	; 0x2d10 <vfprintf+0x31a>
    2d0e:	b3 94       	inc	r11
    2d10:	a3 fc       	sbrc	r10, 3
    2d12:	10 c0       	rjmp	.+32     	; 0x2d34 <vfprintf+0x33e>
    2d14:	a0 fe       	sbrs	r10, 0
    2d16:	06 c0       	rjmp	.+12     	; 0x2d24 <vfprintf+0x32e>
    2d18:	b2 14       	cp	r11, r2
    2d1a:	80 f4       	brcc	.+32     	; 0x2d3c <vfprintf+0x346>
    2d1c:	28 0c       	add	r2, r8
    2d1e:	92 2c       	mov	r9, r2
    2d20:	9b 18       	sub	r9, r11
    2d22:	0d c0       	rjmp	.+26     	; 0x2d3e <vfprintf+0x348>
    2d24:	b2 14       	cp	r11, r2
    2d26:	58 f4       	brcc	.+22     	; 0x2d3e <vfprintf+0x348>
    2d28:	b6 01       	movw	r22, r12
    2d2a:	80 e2       	ldi	r24, 0x20	; 32
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	79 d0       	rcall	.+242    	; 0x2e22 <fputc>
    2d30:	b3 94       	inc	r11
    2d32:	f8 cf       	rjmp	.-16     	; 0x2d24 <vfprintf+0x32e>
    2d34:	b2 14       	cp	r11, r2
    2d36:	18 f4       	brcc	.+6      	; 0x2d3e <vfprintf+0x348>
    2d38:	2b 18       	sub	r2, r11
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <vfprintf+0x34a>
    2d3c:	98 2c       	mov	r9, r8
    2d3e:	21 2c       	mov	r2, r1
    2d40:	a4 fe       	sbrs	r10, 4
    2d42:	0f c0       	rjmp	.+30     	; 0x2d62 <vfprintf+0x36c>
    2d44:	b6 01       	movw	r22, r12
    2d46:	80 e3       	ldi	r24, 0x30	; 48
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	6b d0       	rcall	.+214    	; 0x2e22 <fputc>
    2d4c:	a2 fe       	sbrs	r10, 2
    2d4e:	16 c0       	rjmp	.+44     	; 0x2d7c <vfprintf+0x386>
    2d50:	a1 fc       	sbrc	r10, 1
    2d52:	03 c0       	rjmp	.+6      	; 0x2d5a <vfprintf+0x364>
    2d54:	88 e7       	ldi	r24, 0x78	; 120
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	02 c0       	rjmp	.+4      	; 0x2d5e <vfprintf+0x368>
    2d5a:	88 e5       	ldi	r24, 0x58	; 88
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	b6 01       	movw	r22, r12
    2d60:	0c c0       	rjmp	.+24     	; 0x2d7a <vfprintf+0x384>
    2d62:	8a 2d       	mov	r24, r10
    2d64:	86 78       	andi	r24, 0x86	; 134
    2d66:	51 f0       	breq	.+20     	; 0x2d7c <vfprintf+0x386>
    2d68:	a1 fe       	sbrs	r10, 1
    2d6a:	02 c0       	rjmp	.+4      	; 0x2d70 <vfprintf+0x37a>
    2d6c:	8b e2       	ldi	r24, 0x2B	; 43
    2d6e:	01 c0       	rjmp	.+2      	; 0x2d72 <vfprintf+0x37c>
    2d70:	80 e2       	ldi	r24, 0x20	; 32
    2d72:	a7 fc       	sbrc	r10, 7
    2d74:	8d e2       	ldi	r24, 0x2D	; 45
    2d76:	b6 01       	movw	r22, r12
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	53 d0       	rcall	.+166    	; 0x2e22 <fputc>
    2d7c:	89 14       	cp	r8, r9
    2d7e:	30 f4       	brcc	.+12     	; 0x2d8c <vfprintf+0x396>
    2d80:	b6 01       	movw	r22, r12
    2d82:	80 e3       	ldi	r24, 0x30	; 48
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	4d d0       	rcall	.+154    	; 0x2e22 <fputc>
    2d88:	9a 94       	dec	r9
    2d8a:	f8 cf       	rjmp	.-16     	; 0x2d7c <vfprintf+0x386>
    2d8c:	8a 94       	dec	r8
    2d8e:	f3 01       	movw	r30, r6
    2d90:	e8 0d       	add	r30, r8
    2d92:	f1 1d       	adc	r31, r1
    2d94:	80 81       	ld	r24, Z
    2d96:	b6 01       	movw	r22, r12
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	43 d0       	rcall	.+134    	; 0x2e22 <fputc>
    2d9c:	81 10       	cpse	r8, r1
    2d9e:	f6 cf       	rjmp	.-20     	; 0x2d8c <vfprintf+0x396>
    2da0:	22 20       	and	r2, r2
    2da2:	09 f4       	brne	.+2      	; 0x2da6 <vfprintf+0x3b0>
    2da4:	4e ce       	rjmp	.-868    	; 0x2a42 <vfprintf+0x4c>
    2da6:	b6 01       	movw	r22, r12
    2da8:	80 e2       	ldi	r24, 0x20	; 32
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	3a d0       	rcall	.+116    	; 0x2e22 <fputc>
    2dae:	2a 94       	dec	r2
    2db0:	f7 cf       	rjmp	.-18     	; 0x2da0 <vfprintf+0x3aa>
    2db2:	f6 01       	movw	r30, r12
    2db4:	86 81       	ldd	r24, Z+6	; 0x06
    2db6:	97 81       	ldd	r25, Z+7	; 0x07
    2db8:	02 c0       	rjmp	.+4      	; 0x2dbe <vfprintf+0x3c8>
    2dba:	8f ef       	ldi	r24, 0xFF	; 255
    2dbc:	9f ef       	ldi	r25, 0xFF	; 255
    2dbe:	2b 96       	adiw	r28, 0x0b	; 11
    2dc0:	0f b6       	in	r0, 0x3f	; 63
    2dc2:	f8 94       	cli
    2dc4:	de bf       	out	0x3e, r29	; 62
    2dc6:	0f be       	out	0x3f, r0	; 63
    2dc8:	cd bf       	out	0x3d, r28	; 61
    2dca:	df 91       	pop	r29
    2dcc:	cf 91       	pop	r28
    2dce:	1f 91       	pop	r17
    2dd0:	0f 91       	pop	r16
    2dd2:	ff 90       	pop	r15
    2dd4:	ef 90       	pop	r14
    2dd6:	df 90       	pop	r13
    2dd8:	cf 90       	pop	r12
    2dda:	bf 90       	pop	r11
    2ddc:	af 90       	pop	r10
    2dde:	9f 90       	pop	r9
    2de0:	8f 90       	pop	r8
    2de2:	7f 90       	pop	r7
    2de4:	6f 90       	pop	r6
    2de6:	5f 90       	pop	r5
    2de8:	4f 90       	pop	r4
    2dea:	3f 90       	pop	r3
    2dec:	2f 90       	pop	r2
    2dee:	08 95       	ret

00002df0 <__ctype_isfalse>:
    2df0:	99 27       	eor	r25, r25
    2df2:	88 27       	eor	r24, r24

00002df4 <__ctype_istrue>:
    2df4:	08 95       	ret

00002df6 <strnlen_P>:
    2df6:	fc 01       	movw	r30, r24
    2df8:	05 90       	lpm	r0, Z+
    2dfa:	61 50       	subi	r22, 0x01	; 1
    2dfc:	70 40       	sbci	r23, 0x00	; 0
    2dfe:	01 10       	cpse	r0, r1
    2e00:	d8 f7       	brcc	.-10     	; 0x2df8 <strnlen_P+0x2>
    2e02:	80 95       	com	r24
    2e04:	90 95       	com	r25
    2e06:	8e 0f       	add	r24, r30
    2e08:	9f 1f       	adc	r25, r31
    2e0a:	08 95       	ret

00002e0c <strnlen>:
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	61 50       	subi	r22, 0x01	; 1
    2e10:	70 40       	sbci	r23, 0x00	; 0
    2e12:	01 90       	ld	r0, Z+
    2e14:	01 10       	cpse	r0, r1
    2e16:	d8 f7       	brcc	.-10     	; 0x2e0e <strnlen+0x2>
    2e18:	80 95       	com	r24
    2e1a:	90 95       	com	r25
    2e1c:	8e 0f       	add	r24, r30
    2e1e:	9f 1f       	adc	r25, r31
    2e20:	08 95       	ret

00002e22 <fputc>:
    2e22:	0f 93       	push	r16
    2e24:	1f 93       	push	r17
    2e26:	cf 93       	push	r28
    2e28:	df 93       	push	r29
    2e2a:	fb 01       	movw	r30, r22
    2e2c:	23 81       	ldd	r18, Z+3	; 0x03
    2e2e:	21 fd       	sbrc	r18, 1
    2e30:	03 c0       	rjmp	.+6      	; 0x2e38 <fputc+0x16>
    2e32:	8f ef       	ldi	r24, 0xFF	; 255
    2e34:	9f ef       	ldi	r25, 0xFF	; 255
    2e36:	2c c0       	rjmp	.+88     	; 0x2e90 <fputc+0x6e>
    2e38:	22 ff       	sbrs	r18, 2
    2e3a:	16 c0       	rjmp	.+44     	; 0x2e68 <fputc+0x46>
    2e3c:	46 81       	ldd	r20, Z+6	; 0x06
    2e3e:	57 81       	ldd	r21, Z+7	; 0x07
    2e40:	24 81       	ldd	r18, Z+4	; 0x04
    2e42:	35 81       	ldd	r19, Z+5	; 0x05
    2e44:	42 17       	cp	r20, r18
    2e46:	53 07       	cpc	r21, r19
    2e48:	44 f4       	brge	.+16     	; 0x2e5a <fputc+0x38>
    2e4a:	a0 81       	ld	r26, Z
    2e4c:	b1 81       	ldd	r27, Z+1	; 0x01
    2e4e:	9d 01       	movw	r18, r26
    2e50:	2f 5f       	subi	r18, 0xFF	; 255
    2e52:	3f 4f       	sbci	r19, 0xFF	; 255
    2e54:	31 83       	std	Z+1, r19	; 0x01
    2e56:	20 83       	st	Z, r18
    2e58:	8c 93       	st	X, r24
    2e5a:	26 81       	ldd	r18, Z+6	; 0x06
    2e5c:	37 81       	ldd	r19, Z+7	; 0x07
    2e5e:	2f 5f       	subi	r18, 0xFF	; 255
    2e60:	3f 4f       	sbci	r19, 0xFF	; 255
    2e62:	37 83       	std	Z+7, r19	; 0x07
    2e64:	26 83       	std	Z+6, r18	; 0x06
    2e66:	14 c0       	rjmp	.+40     	; 0x2e90 <fputc+0x6e>
    2e68:	8b 01       	movw	r16, r22
    2e6a:	ec 01       	movw	r28, r24
    2e6c:	fb 01       	movw	r30, r22
    2e6e:	00 84       	ldd	r0, Z+8	; 0x08
    2e70:	f1 85       	ldd	r31, Z+9	; 0x09
    2e72:	e0 2d       	mov	r30, r0
    2e74:	09 95       	icall
    2e76:	89 2b       	or	r24, r25
    2e78:	e1 f6       	brne	.-72     	; 0x2e32 <fputc+0x10>
    2e7a:	d8 01       	movw	r26, r16
    2e7c:	16 96       	adiw	r26, 0x06	; 6
    2e7e:	8d 91       	ld	r24, X+
    2e80:	9c 91       	ld	r25, X
    2e82:	17 97       	sbiw	r26, 0x07	; 7
    2e84:	01 96       	adiw	r24, 0x01	; 1
    2e86:	17 96       	adiw	r26, 0x07	; 7
    2e88:	9c 93       	st	X, r25
    2e8a:	8e 93       	st	-X, r24
    2e8c:	16 97       	sbiw	r26, 0x06	; 6
    2e8e:	ce 01       	movw	r24, r28
    2e90:	df 91       	pop	r29
    2e92:	cf 91       	pop	r28
    2e94:	1f 91       	pop	r17
    2e96:	0f 91       	pop	r16
    2e98:	08 95       	ret

00002e9a <__ultoa_invert>:
    2e9a:	fa 01       	movw	r30, r20
    2e9c:	aa 27       	eor	r26, r26
    2e9e:	28 30       	cpi	r18, 0x08	; 8
    2ea0:	51 f1       	breq	.+84     	; 0x2ef6 <__ultoa_invert+0x5c>
    2ea2:	20 31       	cpi	r18, 0x10	; 16
    2ea4:	81 f1       	breq	.+96     	; 0x2f06 <__ultoa_invert+0x6c>
    2ea6:	e8 94       	clt
    2ea8:	6f 93       	push	r22
    2eaa:	6e 7f       	andi	r22, 0xFE	; 254
    2eac:	6e 5f       	subi	r22, 0xFE	; 254
    2eae:	7f 4f       	sbci	r23, 0xFF	; 255
    2eb0:	8f 4f       	sbci	r24, 0xFF	; 255
    2eb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb4:	af 4f       	sbci	r26, 0xFF	; 255
    2eb6:	b1 e0       	ldi	r27, 0x01	; 1
    2eb8:	3e d0       	rcall	.+124    	; 0x2f36 <__ultoa_invert+0x9c>
    2eba:	b4 e0       	ldi	r27, 0x04	; 4
    2ebc:	3c d0       	rcall	.+120    	; 0x2f36 <__ultoa_invert+0x9c>
    2ebe:	67 0f       	add	r22, r23
    2ec0:	78 1f       	adc	r23, r24
    2ec2:	89 1f       	adc	r24, r25
    2ec4:	9a 1f       	adc	r25, r26
    2ec6:	a1 1d       	adc	r26, r1
    2ec8:	68 0f       	add	r22, r24
    2eca:	79 1f       	adc	r23, r25
    2ecc:	8a 1f       	adc	r24, r26
    2ece:	91 1d       	adc	r25, r1
    2ed0:	a1 1d       	adc	r26, r1
    2ed2:	6a 0f       	add	r22, r26
    2ed4:	71 1d       	adc	r23, r1
    2ed6:	81 1d       	adc	r24, r1
    2ed8:	91 1d       	adc	r25, r1
    2eda:	a1 1d       	adc	r26, r1
    2edc:	20 d0       	rcall	.+64     	; 0x2f1e <__ultoa_invert+0x84>
    2ede:	09 f4       	brne	.+2      	; 0x2ee2 <__ultoa_invert+0x48>
    2ee0:	68 94       	set
    2ee2:	3f 91       	pop	r19
    2ee4:	2a e0       	ldi	r18, 0x0A	; 10
    2ee6:	26 9f       	mul	r18, r22
    2ee8:	11 24       	eor	r1, r1
    2eea:	30 19       	sub	r19, r0
    2eec:	30 5d       	subi	r19, 0xD0	; 208
    2eee:	31 93       	st	Z+, r19
    2ef0:	de f6       	brtc	.-74     	; 0x2ea8 <__ultoa_invert+0xe>
    2ef2:	cf 01       	movw	r24, r30
    2ef4:	08 95       	ret
    2ef6:	46 2f       	mov	r20, r22
    2ef8:	47 70       	andi	r20, 0x07	; 7
    2efa:	40 5d       	subi	r20, 0xD0	; 208
    2efc:	41 93       	st	Z+, r20
    2efe:	b3 e0       	ldi	r27, 0x03	; 3
    2f00:	0f d0       	rcall	.+30     	; 0x2f20 <__ultoa_invert+0x86>
    2f02:	c9 f7       	brne	.-14     	; 0x2ef6 <__ultoa_invert+0x5c>
    2f04:	f6 cf       	rjmp	.-20     	; 0x2ef2 <__ultoa_invert+0x58>
    2f06:	46 2f       	mov	r20, r22
    2f08:	4f 70       	andi	r20, 0x0F	; 15
    2f0a:	40 5d       	subi	r20, 0xD0	; 208
    2f0c:	4a 33       	cpi	r20, 0x3A	; 58
    2f0e:	18 f0       	brcs	.+6      	; 0x2f16 <__ultoa_invert+0x7c>
    2f10:	49 5d       	subi	r20, 0xD9	; 217
    2f12:	31 fd       	sbrc	r19, 1
    2f14:	40 52       	subi	r20, 0x20	; 32
    2f16:	41 93       	st	Z+, r20
    2f18:	02 d0       	rcall	.+4      	; 0x2f1e <__ultoa_invert+0x84>
    2f1a:	a9 f7       	brne	.-22     	; 0x2f06 <__ultoa_invert+0x6c>
    2f1c:	ea cf       	rjmp	.-44     	; 0x2ef2 <__ultoa_invert+0x58>
    2f1e:	b4 e0       	ldi	r27, 0x04	; 4
    2f20:	a6 95       	lsr	r26
    2f22:	97 95       	ror	r25
    2f24:	87 95       	ror	r24
    2f26:	77 95       	ror	r23
    2f28:	67 95       	ror	r22
    2f2a:	ba 95       	dec	r27
    2f2c:	c9 f7       	brne	.-14     	; 0x2f20 <__ultoa_invert+0x86>
    2f2e:	00 97       	sbiw	r24, 0x00	; 0
    2f30:	61 05       	cpc	r22, r1
    2f32:	71 05       	cpc	r23, r1
    2f34:	08 95       	ret
    2f36:	9b 01       	movw	r18, r22
    2f38:	ac 01       	movw	r20, r24
    2f3a:	0a 2e       	mov	r0, r26
    2f3c:	06 94       	lsr	r0
    2f3e:	57 95       	ror	r21
    2f40:	47 95       	ror	r20
    2f42:	37 95       	ror	r19
    2f44:	27 95       	ror	r18
    2f46:	ba 95       	dec	r27
    2f48:	c9 f7       	brne	.-14     	; 0x2f3c <__ultoa_invert+0xa2>
    2f4a:	62 0f       	add	r22, r18
    2f4c:	73 1f       	adc	r23, r19
    2f4e:	84 1f       	adc	r24, r20
    2f50:	95 1f       	adc	r25, r21
    2f52:	a0 1d       	adc	r26, r0
    2f54:	08 95       	ret

00002f56 <_exit>:
    2f56:	f8 94       	cli

00002f58 <__stop_program>:
    2f58:	ff cf       	rjmp	.-2      	; 0x2f58 <__stop_program>
