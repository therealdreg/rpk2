
at90dualvirtualserial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000f5c  00000ff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800136  00800136  00001026  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001026  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000062ac  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ee9  00000000  00000000  0000767c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008504  00000000  00000000  00009565  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000908  00000000  00000000  00011a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001764f  00000000  00000000  00012374  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037c4  00000000  00000000  000299c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000568  00000000  00000000  0002d187  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000071ad  00000000  00000000  0002d6ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b9 c0       	rjmp	.+370    	; 0x174 <__ctors_end>
   2:	00 00       	nop
   4:	d4 c0       	rjmp	.+424    	; 0x1ae <__bad_interrupt>
   6:	00 00       	nop
   8:	d2 c0       	rjmp	.+420    	; 0x1ae <__bad_interrupt>
   a:	00 00       	nop
   c:	d0 c0       	rjmp	.+416    	; 0x1ae <__bad_interrupt>
   e:	00 00       	nop
  10:	ce c0       	rjmp	.+412    	; 0x1ae <__bad_interrupt>
  12:	00 00       	nop
  14:	cc c0       	rjmp	.+408    	; 0x1ae <__bad_interrupt>
  16:	00 00       	nop
  18:	ca c0       	rjmp	.+404    	; 0x1ae <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c8 c0       	rjmp	.+400    	; 0x1ae <__bad_interrupt>
  1e:	00 00       	nop
  20:	c6 c0       	rjmp	.+396    	; 0x1ae <__bad_interrupt>
  22:	00 00       	nop
  24:	c4 c0       	rjmp	.+392    	; 0x1ae <__bad_interrupt>
  26:	00 00       	nop
  28:	bf c4       	rjmp	.+2430   	; 0x9a8 <__vector_10>
  2a:	00 00       	nop
  2c:	86 c5       	rjmp	.+2828   	; 0xb3a <__vector_11>
  2e:	00 00       	nop
  30:	be c0       	rjmp	.+380    	; 0x1ae <__bad_interrupt>
  32:	00 00       	nop
  34:	bc c0       	rjmp	.+376    	; 0x1ae <__bad_interrupt>
  36:	00 00       	nop
  38:	ba c0       	rjmp	.+372    	; 0x1ae <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b8 c0       	rjmp	.+368    	; 0x1ae <__bad_interrupt>
  3e:	00 00       	nop
  40:	b6 c0       	rjmp	.+364    	; 0x1ae <__bad_interrupt>
  42:	00 00       	nop
  44:	b4 c0       	rjmp	.+360    	; 0x1ae <__bad_interrupt>
  46:	00 00       	nop
  48:	b2 c0       	rjmp	.+356    	; 0x1ae <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b0 c0       	rjmp	.+352    	; 0x1ae <__bad_interrupt>
  4e:	00 00       	nop
  50:	ae c0       	rjmp	.+348    	; 0x1ae <__bad_interrupt>
  52:	00 00       	nop
  54:	ac c0       	rjmp	.+344    	; 0x1ae <__bad_interrupt>
  56:	00 00       	nop
  58:	aa c0       	rjmp	.+340    	; 0x1ae <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a8 c0       	rjmp	.+336    	; 0x1ae <__bad_interrupt>
  5e:	00 00       	nop
  60:	a6 c0       	rjmp	.+332    	; 0x1ae <__bad_interrupt>
  62:	00 00       	nop
  64:	a4 c0       	rjmp	.+328    	; 0x1ae <__bad_interrupt>
  66:	00 00       	nop
  68:	a2 c0       	rjmp	.+324    	; 0x1ae <__bad_interrupt>
  6a:	00 00       	nop
  6c:	a0 c0       	rjmp	.+320    	; 0x1ae <__bad_interrupt>
  6e:	00 00       	nop
  70:	9e c0       	rjmp	.+316    	; 0x1ae <__bad_interrupt>
  72:	00 00       	nop
  74:	9c c0       	rjmp	.+312    	; 0x1ae <__bad_interrupt>
  76:	00 00       	nop
  78:	9a c0       	rjmp	.+308    	; 0x1ae <__bad_interrupt>
  7a:	00 00       	nop
  7c:	98 c0       	rjmp	.+304    	; 0x1ae <__bad_interrupt>
  7e:	00 00       	nop
  80:	96 c0       	rjmp	.+300    	; 0x1ae <__bad_interrupt>
  82:	00 00       	nop
  84:	94 c0       	rjmp	.+296    	; 0x1ae <__bad_interrupt>
  86:	00 00       	nop
  88:	92 c0       	rjmp	.+292    	; 0x1ae <__bad_interrupt>
  8a:	00 00       	nop
  8c:	90 c0       	rjmp	.+288    	; 0x1ae <__bad_interrupt>
  8e:	00 00       	nop
  90:	8e c0       	rjmp	.+284    	; 0x1ae <__bad_interrupt>
  92:	00 00       	nop
  94:	8c c0       	rjmp	.+280    	; 0x1ae <__bad_interrupt>
	...

00000098 <ProductString>:
  98:	26 03 4c 00 55 00 46 00 41 00 20 00 44 00 75 00     &.L.U.F.A. .D.u.
  a8:	61 00 6c 00 20 00 43 00 44 00 43 00 20 00 44 00     a.l. .C.D.C. .D.
  b8:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000c0 <ManufacturerString>:
  c0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  d0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000da <LanguageString>:
  da:	04 03 09 04                                         ....

000000de <ConfigurationDescriptor>:
  de:	09 02 83 00 04 01 00 c0 32 08 0b 00 02 02 02 01     ........2.......
  ee:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
  fe:	24 02 06 05 24 06 00 01 07 05 83 03 08 00 ff 09     $...$...........
 10e:	04 01 00 02 0a 00 00 00 07 05 02 02 10 00 05 07     ................
 11e:	05 81 02 10 00 05 08 0b 02 02 02 02 01 00 09 04     ................
 12e:	02 00 01 02 02 01 00 05 24 00 10 01 04 24 02 06     ........$....$..
 13e:	05 24 06 02 03 07 05 86 03 08 00 ff 09 04 03 00     .$..............
 14e:	02 0a 00 00 00 07 05 05 02 10 00 05 07 05 84 02     ................
 15e:	10 00 05                                            ...

00000161 <DeviceDescriptor>:
 161:	12 01 10 01 ef 02 01 08 69 69 23 22 01 00 01 02     ........ii#"....
 171:	dc 01 00                                            ...

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf ef       	ldi	r28, 0xFF	; 255
 17a:	d0 e2       	ldi	r29, 0x20	; 32
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	11 e0       	ldi	r17, 0x01	; 1
 182:	a0 e0       	ldi	r26, 0x00	; 0
 184:	b1 e0       	ldi	r27, 0x01	; 1
 186:	ec e5       	ldi	r30, 0x5C	; 92
 188:	ff e0       	ldi	r31, 0x0F	; 15
 18a:	00 e0       	ldi	r16, 0x00	; 0
 18c:	0b bf       	out	0x3b, r16	; 59
 18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x14>
 190:	07 90       	elpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	a6 33       	cpi	r26, 0x36	; 54
 196:	b1 07       	cpc	r27, r17
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0x10>

0000019a <__do_clear_bss>:
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	a6 e3       	ldi	r26, 0x36	; 54
 19e:	b1 e0       	ldi	r27, 0x01	; 1
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
 1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
 1a4:	a3 34       	cpi	r26, 0x43	; 67
 1a6:	b2 07       	cpc	r27, r18
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
 1aa:	57 d0       	rcall	.+174    	; 0x25a <main>
 1ac:	d5 c6       	rjmp	.+3498   	; 0xf58 <_exit>

000001ae <__bad_interrupt>:
 1ae:	28 cf       	rjmp	.-432    	; 0x0 <__vectors>

000001b0 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
 1b0:	29 2f       	mov	r18, r25
 1b2:	33 27       	eor	r19, r19
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
 1b4:	22 30       	cpi	r18, 0x02	; 2
 1b6:	31 05       	cpc	r19, r1
 1b8:	59 f0       	breq	.+22     	; 0x1d0 <CALLBACK_USB_GetDescriptor+0x20>
 1ba:	23 30       	cpi	r18, 0x03	; 3
 1bc:	31 05       	cpc	r19, r1
 1be:	69 f0       	breq	.+26     	; 0x1da <CALLBACK_USB_GetDescriptor+0x2a>
 1c0:	21 30       	cpi	r18, 0x01	; 1
 1c2:	31 05       	cpc	r19, r1
 1c4:	21 f1       	breq	.+72     	; 0x20e <CALLBACK_USB_GetDescriptor+0x5e>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	28 c0       	rjmp	.+80     	; 0x220 <CALLBACK_USB_GetDescriptor+0x70>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
 1d0:	83 e8       	ldi	r24, 0x83	; 131
 1d2:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
 1d4:	2e ed       	ldi	r18, 0xDE	; 222
 1d6:	30 e0       	ldi	r19, 0x00	; 0
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
 1d8:	23 c0       	rjmp	.+70     	; 0x220 <CALLBACK_USB_GetDescriptor+0x70>
        case DTYPE_String:
            switch (DescriptorNumber)
 1da:	99 27       	eor	r25, r25
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	91 05       	cpc	r25, r1
 1e0:	51 f0       	breq	.+20     	; 0x1f6 <CALLBACK_USB_GetDescriptor+0x46>
 1e2:	18 f0       	brcs	.+6      	; 0x1ea <CALLBACK_USB_GetDescriptor+0x3a>
 1e4:	02 97       	sbiw	r24, 0x02	; 2
 1e6:	69 f0       	breq	.+26     	; 0x202 <CALLBACK_USB_GetDescriptor+0x52>
 1e8:	17 c0       	rjmp	.+46     	; 0x218 <CALLBACK_USB_GetDescriptor+0x68>
            {
                case STRING_ID_Language:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
 1ea:	ea ed       	ldi	r30, 0xDA	; 218
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	84 91       	lpm	r24, Z
 1f0:	90 e0       	ldi	r25, 0x00	; 0
            break;
        case DTYPE_String:
            switch (DescriptorNumber)
            {
                case STRING_ID_Language:
                    Address = &LanguageString;
 1f2:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
 1f4:	15 c0       	rjmp	.+42     	; 0x220 <CALLBACK_USB_GetDescriptor+0x70>
                case STRING_ID_Manufacturer:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 1f6:	e0 ec       	ldi	r30, 0xC0	; 192
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	84 91       	lpm	r24, Z
 1fc:	90 e0       	ldi	r25, 0x00	; 0
                case STRING_ID_Language:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case STRING_ID_Manufacturer:
                    Address = &ManufacturerString;
 1fe:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
 200:	0f c0       	rjmp	.+30     	; 0x220 <CALLBACK_USB_GetDescriptor+0x70>
                case STRING_ID_Product:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
 202:	e8 e9       	ldi	r30, 0x98	; 152
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	84 91       	lpm	r24, Z
 208:	90 e0       	ldi	r25, 0x00	; 0
                case STRING_ID_Manufacturer:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case STRING_ID_Product:
                    Address = &ProductString;
 20a:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
 20c:	09 c0       	rjmp	.+18     	; 0x220 <CALLBACK_USB_GetDescriptor+0x70>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
 20e:	82 e1       	ldi	r24, 0x12	; 18
 210:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
 212:	21 e6       	ldi	r18, 0x61	; 97
 214:	31 e0       	ldi	r19, 0x01	; 1
 216:	04 c0       	rjmp	.+8      	; 0x220 <CALLBACK_USB_GetDescriptor+0x70>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	30 e0       	ldi	r19, 0x00	; 0
            }

            break;
    }

    *DescriptorAddress = Address;
 220:	fa 01       	movw	r30, r20
 222:	31 83       	std	Z+1, r19	; 0x01
 224:	20 83       	st	Z, r18
    return Size;
}
 226:	08 95       	ret

00000228 <SetupHardware>:

/** Checks for changes in the position of the board joystick, sending strings to the host upon each change
 *  through the first of the CDC interfaces.
 */
void CheckJoystickMovement(void)
{
 228:	84 b7       	in	r24, 0x34	; 52
 22a:	87 7f       	andi	r24, 0xF7	; 247
 22c:	84 bf       	out	0x34, r24	; 52
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	f8 94       	cli
 232:	a8 95       	wdr
 234:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 238:	88 61       	ori	r24, 0x18	; 24
 23a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 23e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 242:	0f be       	out	0x3f, r0	; 63
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	80 e8       	ldi	r24, 0x80	; 128
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 250:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 254:	0f be       	out	0x3f, r0	; 63
 256:	8c c3       	rjmp	.+1816   	; 0x970 <USB_Init>
 258:	08 95       	ret

0000025a <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    SetupHardware();
 25a:	e6 df       	rcall	.-52     	; 0x228 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 25c:	78 94       	sei
    for (;;)
    {
        CheckJoystickMovement();

        /* Discard all received data on the first CDC interface */
        CDC_Device_ReceiveByte(&VirtualSerial1_CDC_Interface);
 25e:	8b e1       	ldi	r24, 0x1B	; 27
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	bb d0       	rcall	.+374    	; 0x3da <CDC_Device_ReceiveByte>

        /* Echo all received data on the second CDC interface */
        int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial2_CDC_Interface);
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	b8 d0       	rcall	.+368    	; 0x3da <CDC_Device_ReceiveByte>
        if (!(ReceivedByte < 0))
 26a:	99 23       	and	r25, r25
 26c:	24 f0       	brlt	.+8      	; 0x276 <main+0x1c>
        {
            CDC_Device_SendByte(&VirtualSerial2_CDC_Interface, (uint8_t)ReceivedByte);
 26e:	68 2f       	mov	r22, r24
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	91 e0       	ldi	r25, 0x01	; 1
        }

        CDC_Device_USBTask(&VirtualSerial1_CDC_Interface);
 274:	3b d0       	rcall	.+118    	; 0x2ec <CDC_Device_SendByte>
 276:	8b e1       	ldi	r24, 0x1B	; 27
        CDC_Device_USBTask(&VirtualSerial2_CDC_Interface);
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	97 d0       	rcall	.+302    	; 0x3aa <CDC_Device_USBTask>
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	91 e0       	ldi	r25, 0x01	; 1
        USB_USBTask();
 280:	94 d0       	rcall	.+296    	; 0x3aa <CDC_Device_USBTask>
 282:	68 d6       	rcall	.+3280   	; 0xf54 <USB_USBTask>
    }
 284:	ec cf       	rjmp	.-40     	; 0x25e <main+0x4>

00000286 <EVENT_USB_Device_Connect>:
    }
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
 286:	08 95       	ret

00000288 <EVENT_USB_Device_Disconnect>:
    //LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
 288:	08 95       	ret

0000028a <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
    bool ConfigSuccess = true;

    ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial1_CDC_Interface);
 28a:	8b e1       	ldi	r24, 0x1B	; 27
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0c d0       	rcall	.+24     	; 0x2a8 <CDC_Device_ConfigureEndpoints>
    ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial2_CDC_Interface);
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	09 c0       	rjmp	.+18     	; 0x2a8 <CDC_Device_ConfigureEndpoints>
 296:	08 95       	ret

00000298 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
    CDC_Device_ProcessControlRequest(&VirtualSerial1_CDC_Interface);
 298:	8b e1       	ldi	r24, 0x1B	; 27
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	da d0       	rcall	.+436    	; 0x452 <CDC_Device_ProcessControlRequest>
    CDC_Device_ProcessControlRequest(&VirtualSerial2_CDC_Interface);
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	d7 c0       	rjmp	.+430    	; 0x452 <CDC_Device_ProcessControlRequest>
 2a4:	08 95       	ret

000002a6 <EVENT_CDC_Device_ControLineStateChanged>:
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const
        CDCInterfaceInfo)
{
 2a6:	08 95       	ret

000002a8 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	ec 01       	movw	r28, r24
 2ae:	fc 01       	movw	r30, r24
 2b0:	70 96       	adiw	r30, 0x10	; 16
 2b2:	8b e0       	ldi	r24, 0x0B	; 11
 2b4:	df 01       	movw	r26, r30
 2b6:	1d 92       	st	X+, r1
 2b8:	8a 95       	dec	r24
 2ba:	e9 f7       	brne	.-6      	; 0x2b6 <CDC_Device_ConfigureEndpoints+0xe>
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	8c 83       	std	Y+4, r24	; 0x04
 2c0:	89 87       	std	Y+9, r24	; 0x09
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	8e 87       	std	Y+14, r24	; 0x0e
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	ce 01       	movw	r24, r28
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	69 d2       	rcall	.+1234   	; 0x7a0 <Endpoint_ConfigureEndpointTable>
 2ce:	88 23       	and	r24, r24
 2d0:	51 f0       	breq	.+20     	; 0x2e6 <CDC_Device_ConfigureEndpoints+0x3e>
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	ce 01       	movw	r24, r28
 2d6:	06 96       	adiw	r24, 0x06	; 6
 2d8:	63 d2       	rcall	.+1222   	; 0x7a0 <Endpoint_ConfigureEndpointTable>
 2da:	88 23       	and	r24, r24
 2dc:	21 f0       	breq	.+8      	; 0x2e6 <CDC_Device_ConfigureEndpoints+0x3e>
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	ce 01       	movw	r24, r28
 2e2:	0b 96       	adiw	r24, 0x0b	; 11
 2e4:	5d d2       	rcall	.+1210   	; 0x7a0 <Endpoint_ConfigureEndpointTable>
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <CDC_Device_SendByte>:
 2ec:	cf 93       	push	r28
 2ee:	fc 01       	movw	r30, r24
 2f0:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <USB_DeviceState>
 2f4:	94 30       	cpi	r25, 0x04	; 4
 2f6:	e9 f4       	brne	.+58     	; 0x332 <CDC_Device_SendByte+0x46>
 2f8:	84 89       	ldd	r24, Z+20	; 0x14
 2fa:	95 89       	ldd	r25, Z+21	; 0x15
 2fc:	a6 89       	ldd	r26, Z+22	; 0x16
 2fe:	b7 89       	ldd	r27, Z+23	; 0x17
 300:	89 2b       	or	r24, r25
 302:	8a 2b       	or	r24, r26
 304:	8b 2b       	or	r24, r27
 306:	b9 f0       	breq	.+46     	; 0x336 <CDC_Device_SendByte+0x4a>
 308:	c6 2f       	mov	r28, r22
 30a:	81 81       	ldd	r24, Z+1	; 0x01
 30c:	8f 70       	andi	r24, 0x0F	; 15
 30e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 312:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 316:	85 fd       	sbrc	r24, 5
 318:	08 c0       	rjmp	.+16     	; 0x32a <CDC_Device_SendByte+0x3e>
 31a:	e8 ee       	ldi	r30, 0xE8	; 232
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	8e 77       	andi	r24, 0x7E	; 126
 322:	80 83       	st	Z, r24
 324:	a4 d2       	rcall	.+1352   	; 0x86e <Endpoint_WaitUntilReady>
 326:	81 11       	cpse	r24, r1
 328:	07 c0       	rjmp	.+14     	; 0x338 <CDC_Device_SendByte+0x4c>
 32a:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	03 c0       	rjmp	.+6      	; 0x338 <CDC_Device_SendByte+0x4c>
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	01 c0       	rjmp	.+2      	; 0x338 <CDC_Device_SendByte+0x4c>
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <CDC_Device_Flush>:
 33c:	cf 93       	push	r28
 33e:	fc 01       	movw	r30, r24
 340:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <USB_DeviceState>
 344:	94 30       	cpi	r25, 0x04	; 4
 346:	29 f5       	brne	.+74     	; 0x392 <CDC_Device_Flush+0x56>
 348:	84 89       	ldd	r24, Z+20	; 0x14
 34a:	95 89       	ldd	r25, Z+21	; 0x15
 34c:	a6 89       	ldd	r26, Z+22	; 0x16
 34e:	b7 89       	ldd	r27, Z+23	; 0x17
 350:	89 2b       	or	r24, r25
 352:	8a 2b       	or	r24, r26
 354:	8b 2b       	or	r24, r27
 356:	f9 f0       	breq	.+62     	; 0x396 <CDC_Device_Flush+0x5a>
 358:	81 81       	ldd	r24, Z+1	; 0x01
 35a:	8f 70       	andi	r24, 0x0F	; 15
 35c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 360:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 364:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 368:	89 2b       	or	r24, r25
 36a:	b9 f0       	breq	.+46     	; 0x39a <CDC_Device_Flush+0x5e>
 36c:	e8 ee       	ldi	r30, 0xE8	; 232
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	90 81       	ld	r25, Z
 372:	80 81       	ld	r24, Z
 374:	8e 77       	andi	r24, 0x7E	; 126
 376:	80 83       	st	Z, r24
 378:	c9 2f       	mov	r28, r25
 37a:	c0 72       	andi	r28, 0x20	; 32
 37c:	95 fd       	sbrc	r25, 5
 37e:	0f c0       	rjmp	.+30     	; 0x39e <CDC_Device_Flush+0x62>
 380:	76 d2       	rcall	.+1260   	; 0x86e <Endpoint_WaitUntilReady>
 382:	81 11       	cpse	r24, r1
 384:	0e c0       	rjmp	.+28     	; 0x3a2 <CDC_Device_Flush+0x66>
 386:	e8 ee       	ldi	r30, 0xE8	; 232
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	8e 77       	andi	r24, 0x7E	; 126
 38e:	80 83       	st	Z, r24
 390:	09 c0       	rjmp	.+18     	; 0x3a4 <CDC_Device_Flush+0x68>
 392:	c2 e0       	ldi	r28, 0x02	; 2
 394:	07 c0       	rjmp	.+14     	; 0x3a4 <CDC_Device_Flush+0x68>
 396:	c2 e0       	ldi	r28, 0x02	; 2
 398:	05 c0       	rjmp	.+10     	; 0x3a4 <CDC_Device_Flush+0x68>
 39a:	c0 e0       	ldi	r28, 0x00	; 0
 39c:	03 c0       	rjmp	.+6      	; 0x3a4 <CDC_Device_Flush+0x68>
 39e:	c0 e0       	ldi	r28, 0x00	; 0
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <CDC_Device_Flush+0x68>
 3a2:	c8 2f       	mov	r28, r24
 3a4:	8c 2f       	mov	r24, r28
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <CDC_Device_USBTask>:
 3aa:	fc 01       	movw	r30, r24
 3ac:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <USB_DeviceState>
 3b0:	94 30       	cpi	r25, 0x04	; 4
 3b2:	91 f4       	brne	.+36     	; 0x3d8 <CDC_Device_USBTask+0x2e>
 3b4:	84 89       	ldd	r24, Z+20	; 0x14
 3b6:	95 89       	ldd	r25, Z+21	; 0x15
 3b8:	a6 89       	ldd	r26, Z+22	; 0x16
 3ba:	b7 89       	ldd	r27, Z+23	; 0x17
 3bc:	89 2b       	or	r24, r25
 3be:	8a 2b       	or	r24, r26
 3c0:	8b 2b       	or	r24, r27
 3c2:	51 f0       	breq	.+20     	; 0x3d8 <CDC_Device_USBTask+0x2e>
 3c4:	81 81       	ldd	r24, Z+1	; 0x01
 3c6:	8f 70       	andi	r24, 0x0F	; 15
 3c8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 3cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 3d0:	80 ff       	sbrs	r24, 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <CDC_Device_USBTask+0x2e>
 3d4:	cf 01       	movw	r24, r30
 3d6:	b2 cf       	rjmp	.-156    	; 0x33c <CDC_Device_Flush>
 3d8:	08 95       	ret

000003da <CDC_Device_ReceiveByte>:
 3da:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <USB_DeviceState>
 3de:	24 30       	cpi	r18, 0x04	; 4
 3e0:	59 f5       	brne	.+86     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3e2:	fc 01       	movw	r30, r24
 3e4:	44 89       	ldd	r20, Z+20	; 0x14
 3e6:	55 89       	ldd	r21, Z+21	; 0x15
 3e8:	66 89       	ldd	r22, Z+22	; 0x16
 3ea:	77 89       	ldd	r23, Z+23	; 0x17
 3ec:	45 2b       	or	r20, r21
 3ee:	46 2b       	or	r20, r22
 3f0:	47 2b       	or	r20, r23
 3f2:	29 f1       	breq	.+74     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3f4:	86 81       	ldd	r24, Z+6	; 0x06
 3f6:	8f 70       	andi	r24, 0x0F	; 15
 3f8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 3fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 400:	82 ff       	sbrs	r24, 2
 402:	20 c0       	rjmp	.+64     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 404:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 408:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 40c:	89 2b       	or	r24, r25
 40e:	21 f0       	breq	.+8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 410:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 418:	2f ef       	ldi	r18, 0xFF	; 255
 41a:	3f ef       	ldi	r19, 0xFF	; 255
 41c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 420:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 424:	89 2b       	or	r24, r25
 426:	89 f4       	brne	.+34     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 428:	e8 ee       	ldi	r30, 0xE8	; 232
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	8b 77       	andi	r24, 0x7B	; 123
 430:	80 83       	st	Z, r24
 432:	82 2f       	mov	r24, r18
 434:	93 2f       	mov	r25, r19
 436:	08 95       	ret
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	9f ef       	ldi	r25, 0xFF	; 255
 43c:	08 95       	ret
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	9f ef       	ldi	r25, 0xFF	; 255
 442:	08 95       	ret
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	9f ef       	ldi	r25, 0xFF	; 255
 448:	08 95       	ret
 44a:	82 2f       	mov	r24, r18
 44c:	93 2f       	mov	r25, r19
 44e:	08 95       	ret

00000450 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
 450:	08 95       	ret

00000452 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	fc 01       	movw	r30, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 458:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
 45c:	93 ff       	sbrs	r25, 3
 45e:	98 c0       	rjmp	.+304    	; 0x590 <CDC_Device_ProcessControlRequest+0x13e>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 460:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <USB_ControlRequest+0x4>
 464:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <USB_ControlRequest+0x5>
 468:	20 81       	ld	r18, Z
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	82 17       	cp	r24, r18
 46e:	93 07       	cpc	r25, r19
 470:	09 f0       	breq	.+2      	; 0x474 <CDC_Device_ProcessControlRequest+0x22>
 472:	8e c0       	rjmp	.+284    	; 0x590 <CDC_Device_ProcessControlRequest+0x13e>
 474:	ef 01       	movw	r28, r30
	  return;

	switch (USB_ControlRequest.bRequest)
 476:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <USB_ControlRequest+0x1>
 47a:	81 32       	cpi	r24, 0x21	; 33
 47c:	59 f0       	breq	.+22     	; 0x494 <CDC_Device_ProcessControlRequest+0x42>
 47e:	18 f4       	brcc	.+6      	; 0x486 <CDC_Device_ProcessControlRequest+0x34>
 480:	80 32       	cpi	r24, 0x20	; 32
 482:	c1 f1       	breq	.+112    	; 0x4f4 <CDC_Device_ProcessControlRequest+0xa2>
 484:	85 c0       	rjmp	.+266    	; 0x590 <CDC_Device_ProcessControlRequest+0x13e>
 486:	82 32       	cpi	r24, 0x22	; 34
 488:	09 f4       	brne	.+2      	; 0x48c <CDC_Device_ProcessControlRequest+0x3a>
 48a:	61 c0       	rjmp	.+194    	; 0x54e <CDC_Device_ProcessControlRequest+0xfc>
 48c:	83 32       	cpi	r24, 0x23	; 35
 48e:	09 f4       	brne	.+2      	; 0x492 <CDC_Device_ProcessControlRequest+0x40>
 490:	71 c0       	rjmp	.+226    	; 0x574 <CDC_Device_ProcessControlRequest+0x122>
 492:	7e c0       	rjmp	.+252    	; 0x590 <CDC_Device_ProcessControlRequest+0x13e>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 494:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <USB_ControlRequest>
 498:	81 3a       	cpi	r24, 0xA1	; 161
 49a:	09 f0       	breq	.+2      	; 0x49e <CDC_Device_ProcessControlRequest+0x4c>
 49c:	79 c0       	rjmp	.+242    	; 0x590 <CDC_Device_ProcessControlRequest+0x13e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 49e:	e8 ee       	ldi	r30, 0xE8	; 232
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	87 7f       	andi	r24, 0xF7	; 247
 4a6:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 4ac:	80 ff       	sbrs	r24, 0
 4ae:	fc cf       	rjmp	.-8      	; 0x4a8 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 4b0:	8c 89       	ldd	r24, Y+20	; 0x14
 4b2:	9d 89       	ldd	r25, Y+21	; 0x15
 4b4:	ae 89       	ldd	r26, Y+22	; 0x16
 4b6:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 4b8:	e1 ef       	ldi	r30, 0xF1	; 241
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 83       	st	Z, r24
				UEDATX = (Data >> 8);
 4be:	49 2f       	mov	r20, r25
 4c0:	5a 2f       	mov	r21, r26
 4c2:	6b 2f       	mov	r22, r27
 4c4:	77 27       	eor	r23, r23
 4c6:	40 83       	st	Z, r20
				UEDATX = (Data >> 16);
 4c8:	ad 01       	movw	r20, r26
 4ca:	66 27       	eor	r22, r22
 4cc:	77 27       	eor	r23, r23
 4ce:	40 83       	st	Z, r20
				UEDATX = (Data >> 24);
 4d0:	8b 2f       	mov	r24, r27
 4d2:	99 27       	eor	r25, r25
 4d4:	aa 27       	eor	r26, r26
 4d6:	bb 27       	eor	r27, r27
 4d8:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 4da:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 4dc:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 4de:	89 8d       	ldd	r24, Y+25	; 0x19
 4e0:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 4e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
 4e4:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4e6:	e8 ee       	ldi	r30, 0xE8	; 232
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	8e 77       	andi	r24, 0x7E	; 126
 4ee:	80 83       	st	Z, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 4f0:	9d d1       	rcall	.+826    	; 0x82c <Endpoint_ClearStatusStage>
 4f2:	4e c0       	rjmp	.+156    	; 0x590 <CDC_Device_ProcessControlRequest+0x13e>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 4f4:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <USB_ControlRequest>
 4f8:	81 32       	cpi	r24, 0x21	; 33
 4fa:	09 f0       	breq	.+2      	; 0x4fe <CDC_Device_ProcessControlRequest+0xac>
 4fc:	49 c0       	rjmp	.+146    	; 0x590 <CDC_Device_ProcessControlRequest+0x13e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 4fe:	e8 ee       	ldi	r30, 0xE8	; 232
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	87 7f       	andi	r24, 0xF7	; 247
 506:	80 83       	st	Z, r24
 508:	05 c0       	rjmp	.+10     	; 0x514 <CDC_Device_ProcessControlRequest+0xc2>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 50a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_DeviceState>
 50e:	88 23       	and	r24, r24
 510:	09 f4       	brne	.+2      	; 0x514 <CDC_Device_ProcessControlRequest+0xc2>
 512:	3e c0       	rjmp	.+124    	; 0x590 <CDC_Device_ProcessControlRequest+0x13e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 514:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 518:	82 ff       	sbrs	r24, 2
 51a:	f7 cf       	rjmp	.-18     	; 0x50a <CDC_Device_ProcessControlRequest+0xb8>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 51c:	e1 ef       	ldi	r30, 0xF1	; 241
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	30 81       	ld	r19, Z
				Data.Bytes[1] = UEDATX;
 522:	20 81       	ld	r18, Z
				Data.Bytes[2] = UEDATX;
 524:	90 81       	ld	r25, Z
				Data.Bytes[3] = UEDATX;
 526:	80 81       	ld	r24, Z
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 528:	3c 8b       	std	Y+20, r19	; 0x14
 52a:	2d 8b       	std	Y+21, r18	; 0x15
 52c:	9e 8b       	std	Y+22, r25	; 0x16
 52e:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 530:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 532:	88 8f       	std	Y+24, r24	; 0x18
 534:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 536:	89 8f       	std	Y+25, r24	; 0x19
 538:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 53a:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 53c:	e8 ee       	ldi	r30, 0xE8	; 232
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	80 81       	ld	r24, Z
 542:	8b 77       	andi	r24, 0x7B	; 123

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 544:	80 83       	st	Z, r24

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 546:	72 d1       	rcall	.+740    	; 0x82c <Endpoint_ClearStatusStage>
 548:	ce 01       	movw	r24, r28
 54a:	82 df       	rcall	.-252    	; 0x450 <CDC_Device_Event_Stub>
 54c:	21 c0       	rjmp	.+66     	; 0x590 <CDC_Device_ProcessControlRequest+0x13e>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 54e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <USB_ControlRequest>
 552:	81 32       	cpi	r24, 0x21	; 33
 554:	e9 f4       	brne	.+58     	; 0x590 <CDC_Device_ProcessControlRequest+0x13e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 556:	e8 ee       	ldi	r30, 0xE8	; 232
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 55e:	80 83       	st	Z, r24
 560:	65 d1       	rcall	.+714    	; 0x82c <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 562:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_ControlRequest+0x2>
 566:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <USB_ControlRequest+0x3>
 56a:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 56c:	88 8b       	std	Y+16, r24	; 0x10
 56e:	ce 01       	movw	r24, r28
 570:	9a de       	rcall	.-716    	; 0x2a6 <EVENT_CDC_Device_ControLineStateChanged>
 572:	0e c0       	rjmp	.+28     	; 0x590 <CDC_Device_ProcessControlRequest+0x13e>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 574:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <USB_ControlRequest>
 578:	81 32       	cpi	r24, 0x21	; 33
 57a:	51 f4       	brne	.+20     	; 0x590 <CDC_Device_ProcessControlRequest+0x13e>
 57c:	e8 ee       	ldi	r30, 0xE8	; 232
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 584:	80 83       	st	Z, r24
 586:	52 d1       	rcall	.+676    	; 0x82c <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 588:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <USB_ControlRequest+0x2>
 58c:	ce 01       	movw	r24, r28
 58e:	60 df       	rcall	.-320    	; 0x450 <CDC_Device_Event_Stub>
 590:	df 91       	pop	r29
			}

			break;
	}
}
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <Endpoint_Write_Control_Stream_LE>:
 596:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <USB_ControlRequest+0x6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 59a:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <USB_ControlRequest+0x7>
 59e:	26 17       	cp	r18, r22
 5a0:	37 07       	cpc	r19, r23
 5a2:	58 f0       	brcs	.+22     	; 0x5ba <Endpoint_Write_Control_Stream_LE+0x24>
 5a4:	61 15       	cp	r22, r1
 5a6:	71 05       	cpc	r23, r1
 5a8:	39 f4       	brne	.+14     	; 0x5b8 <Endpoint_Write_Control_Stream_LE+0x22>
 5aa:	e8 ee       	ldi	r30, 0xE8	; 232
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	20 81       	ld	r18, Z
 5b0:	2e 77       	andi	r18, 0x7E	; 126
 5b2:	20 83       	st	Z, r18
 5b4:	9b 01       	movw	r18, r22
 5b6:	01 c0       	rjmp	.+2      	; 0x5ba <Endpoint_Write_Control_Stream_LE+0x24>
 5b8:	9b 01       	movw	r18, r22
 5ba:	e8 2f       	mov	r30, r24
 5bc:	f9 2f       	mov	r31, r25
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	30 c0       	rjmp	.+96     	; 0x622 <Endpoint_Write_Control_Stream_LE+0x8c>
 5c2:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_DeviceState>
 5c6:	88 23       	and	r24, r24
 5c8:	09 f4       	brne	.+2      	; 0x5cc <Endpoint_Write_Control_Stream_LE+0x36>
 5ca:	41 c0       	rjmp	.+130    	; 0x64e <Endpoint_Write_Control_Stream_LE+0xb8>
 5cc:	85 30       	cpi	r24, 0x05	; 5
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <Endpoint_Write_Control_Stream_LE+0x3c>
 5d0:	40 c0       	rjmp	.+128    	; 0x652 <Endpoint_Write_Control_Stream_LE+0xbc>
 5d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5d6:	83 fd       	sbrc	r24, 3
 5d8:	3e c0       	rjmp	.+124    	; 0x656 <Endpoint_Write_Control_Stream_LE+0xc0>
 5da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5de:	82 fd       	sbrc	r24, 2
 5e0:	30 c0       	rjmp	.+96     	; 0x642 <Endpoint_Write_Control_Stream_LE+0xac>
 5e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5e6:	80 ff       	sbrs	r24, 0
 5e8:	1c c0       	rjmp	.+56     	; 0x622 <Endpoint_Write_Control_Stream_LE+0x8c>
 5ea:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 5ee:	50 91 f3 00 	lds	r21, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 5f2:	07 c0       	rjmp	.+14     	; 0x602 <Endpoint_Write_Control_Stream_LE+0x6c>
 5f4:	81 91       	ld	r24, Z+
 5f6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 5fa:	21 50       	subi	r18, 0x01	; 1
 5fc:	31 09       	sbc	r19, r1
 5fe:	4f 5f       	subi	r20, 0xFF	; 255
 600:	5f 4f       	sbci	r21, 0xFF	; 255
 602:	21 15       	cp	r18, r1
 604:	31 05       	cpc	r19, r1
 606:	19 f0       	breq	.+6      	; 0x60e <Endpoint_Write_Control_Stream_LE+0x78>
 608:	48 30       	cpi	r20, 0x08	; 8
 60a:	51 05       	cpc	r21, r1
 60c:	98 f3       	brcs	.-26     	; 0x5f4 <Endpoint_Write_Control_Stream_LE+0x5e>
 60e:	91 e0       	ldi	r25, 0x01	; 1
 610:	48 30       	cpi	r20, 0x08	; 8
 612:	51 05       	cpc	r21, r1
 614:	09 f0       	breq	.+2      	; 0x618 <Endpoint_Write_Control_Stream_LE+0x82>
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	a8 ee       	ldi	r26, 0xE8	; 232
 61a:	b0 e0       	ldi	r27, 0x00	; 0
 61c:	8c 91       	ld	r24, X
 61e:	8e 77       	andi	r24, 0x7E	; 126
 620:	8c 93       	st	X, r24
 622:	21 15       	cp	r18, r1
 624:	31 05       	cpc	r19, r1
 626:	69 f6       	brne	.-102    	; 0x5c2 <Endpoint_Write_Control_Stream_LE+0x2c>
 628:	91 11       	cpse	r25, r1
 62a:	cb cf       	rjmp	.-106    	; 0x5c2 <Endpoint_Write_Control_Stream_LE+0x2c>
 62c:	0a c0       	rjmp	.+20     	; 0x642 <Endpoint_Write_Control_Stream_LE+0xac>
 62e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_DeviceState>
 632:	88 23       	and	r24, r24
 634:	91 f0       	breq	.+36     	; 0x65a <Endpoint_Write_Control_Stream_LE+0xc4>
 636:	85 30       	cpi	r24, 0x05	; 5
 638:	91 f0       	breq	.+36     	; 0x65e <Endpoint_Write_Control_Stream_LE+0xc8>
 63a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 63e:	83 fd       	sbrc	r24, 3
 640:	10 c0       	rjmp	.+32     	; 0x662 <Endpoint_Write_Control_Stream_LE+0xcc>
 642:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 646:	82 ff       	sbrs	r24, 2
 648:	f2 cf       	rjmp	.-28     	; 0x62e <Endpoint_Write_Control_Stream_LE+0x98>
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	08 95       	ret
 64e:	82 e0       	ldi	r24, 0x02	; 2
 650:	08 95       	ret
 652:	83 e0       	ldi	r24, 0x03	; 3
 654:	08 95       	ret
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	08 95       	ret
 65a:	82 e0       	ldi	r24, 0x02	; 2
 65c:	08 95       	ret
 65e:	83 e0       	ldi	r24, 0x03	; 3
 660:	08 95       	ret
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	08 95       	ret

00000666 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 666:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <USB_ControlRequest+0x6>
 66a:	30 91 42 01 	lds	r19, 0x0142	; 0x800142 <USB_ControlRequest+0x7>
 66e:	26 17       	cp	r18, r22
 670:	37 07       	cpc	r19, r23
 672:	58 f0       	brcs	.+22     	; 0x68a <Endpoint_Write_Control_PStream_LE+0x24>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 674:	61 15       	cp	r22, r1
 676:	71 05       	cpc	r23, r1
 678:	39 f4       	brne	.+14     	; 0x688 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 67a:	e8 ee       	ldi	r30, 0xE8	; 232
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	20 81       	ld	r18, Z
 680:	2e 77       	andi	r18, 0x7E	; 126
 682:	20 83       	st	Z, r18
 684:	9b 01       	movw	r18, r22
 686:	01 c0       	rjmp	.+2      	; 0x68a <Endpoint_Write_Control_PStream_LE+0x24>
 688:	9b 01       	movw	r18, r22
 68a:	e8 2f       	mov	r30, r24
 68c:	f9 2f       	mov	r31, r25
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	31 c0       	rjmp	.+98     	; 0x6f4 <Endpoint_Write_Control_PStream_LE+0x8e>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 692:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 696:	88 23       	and	r24, r24
 698:	09 f4       	brne	.+2      	; 0x69c <Endpoint_Write_Control_PStream_LE+0x36>
 69a:	42 c0       	rjmp	.+132    	; 0x720 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 69c:	85 30       	cpi	r24, 0x05	; 5
 69e:	09 f4       	brne	.+2      	; 0x6a2 <Endpoint_Write_Control_PStream_LE+0x3c>
 6a0:	41 c0       	rjmp	.+130    	; 0x724 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 6a6:	83 fd       	sbrc	r24, 3
 6a8:	3f c0       	rjmp	.+126    	; 0x728 <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 6ae:	82 fd       	sbrc	r24, 2
 6b0:	31 c0       	rjmp	.+98     	; 0x714 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 6b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
 6b6:	80 ff       	sbrs	r24, 0
 6b8:	1d c0       	rjmp	.+58     	; 0x6f4 <Endpoint_Write_Control_PStream_LE+0x8e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
 6ba:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 6be:	50 91 f3 00 	lds	r21, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 6c2:	08 c0       	rjmp	.+16     	; 0x6d4 <Endpoint_Write_Control_PStream_LE+0x6e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 6c4:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 6c6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 6ca:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 6cc:	21 50       	subi	r18, 0x01	; 1
 6ce:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
 6d0:	4f 5f       	subi	r20, 0xFF	; 255
 6d2:	5f 4f       	sbci	r21, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 6d4:	21 15       	cp	r18, r1
 6d6:	31 05       	cpc	r19, r1
 6d8:	19 f0       	breq	.+6      	; 0x6e0 <Endpoint_Write_Control_PStream_LE+0x7a>
 6da:	48 30       	cpi	r20, 0x08	; 8
 6dc:	51 05       	cpc	r21, r1
 6de:	90 f3       	brcs	.-28     	; 0x6c4 <Endpoint_Write_Control_PStream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 6e0:	91 e0       	ldi	r25, 0x01	; 1
 6e2:	48 30       	cpi	r20, 0x08	; 8
 6e4:	51 05       	cpc	r21, r1
 6e6:	09 f0       	breq	.+2      	; 0x6ea <Endpoint_Write_Control_PStream_LE+0x84>
 6e8:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6ea:	a8 ee       	ldi	r26, 0xE8	; 232
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	8c 91       	ld	r24, X
 6f0:	8e 77       	andi	r24, 0x7E	; 126
 6f2:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 6f4:	21 15       	cp	r18, r1
 6f6:	31 05       	cpc	r19, r1
 6f8:	61 f6       	brne	.-104    	; 0x692 <Endpoint_Write_Control_PStream_LE+0x2c>
 6fa:	91 11       	cpse	r25, r1
 6fc:	ca cf       	rjmp	.-108    	; 0x692 <Endpoint_Write_Control_PStream_LE+0x2c>
 6fe:	0a c0       	rjmp	.+20     	; 0x714 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 700:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 704:	88 23       	and	r24, r24
 706:	91 f0       	breq	.+36     	; 0x72c <Endpoint_Write_Control_PStream_LE+0xc6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 708:	85 30       	cpi	r24, 0x05	; 5
 70a:	91 f0       	breq	.+36     	; 0x730 <Endpoint_Write_Control_PStream_LE+0xca>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 70c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 710:	83 fd       	sbrc	r24, 3
 712:	10 c0       	rjmp	.+32     	; 0x734 <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 714:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 718:	82 ff       	sbrs	r24, 2
 71a:	f2 cf       	rjmp	.-28     	; 0x700 <Endpoint_Write_Control_PStream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 720:	82 e0       	ldi	r24, 0x02	; 2
 722:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 724:	83 e0       	ldi	r24, 0x03	; 3
 726:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 72c:	82 e0       	ldi	r24, 0x02	; 2
 72e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 730:	83 e0       	ldi	r24, 0x03	; 3
 732:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 734:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 736:	08 95       	ret

00000738 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 738:	98 2f       	mov	r25, r24
 73a:	29 c0       	rjmp	.+82     	; 0x78e <Endpoint_ConfigureEndpoint_Prv+0x56>
 73c:	29 2f       	mov	r18, r25
 73e:	2f 70       	andi	r18, 0x0F	; 15
 740:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 744:	98 17       	cp	r25, r24
 746:	39 f0       	breq	.+14     	; 0x756 <Endpoint_ConfigureEndpoint_Prv+0x1e>
 748:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 74c:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 750:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 754:	03 c0       	rjmp	.+6      	; 0x75c <Endpoint_ConfigureEndpoint_Prv+0x24>
 756:	24 2f       	mov	r18, r20
 758:	76 2f       	mov	r23, r22
 75a:	50 e0       	ldi	r21, 0x00	; 0
 75c:	21 ff       	sbrs	r18, 1
 75e:	16 c0       	rjmp	.+44     	; 0x78c <Endpoint_ConfigureEndpoint_Prv+0x54>
 760:	eb ee       	ldi	r30, 0xEB	; 235
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	30 81       	ld	r19, Z
 766:	3e 7f       	andi	r19, 0xFE	; 254
 768:	30 83       	st	Z, r19
 76a:	ad ee       	ldi	r26, 0xED	; 237
 76c:	b0 e0       	ldi	r27, 0x00	; 0
 76e:	3c 91       	ld	r19, X
 770:	3d 7f       	andi	r19, 0xFD	; 253
 772:	3c 93       	st	X, r19
 774:	30 81       	ld	r19, Z
 776:	31 60       	ori	r19, 0x01	; 1
 778:	30 83       	st	Z, r19
 77a:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 77e:	2c 93       	st	X, r18
 780:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 784:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 788:	22 23       	and	r18, r18
 78a:	44 f4       	brge	.+16     	; 0x79c <Endpoint_ConfigureEndpoint_Prv+0x64>
 78c:	9f 5f       	subi	r25, 0xFF	; 255
 78e:	97 30       	cpi	r25, 0x07	; 7
 790:	a8 f2       	brcs	.-86     	; 0x73c <Endpoint_ConfigureEndpoint_Prv+0x4>
 792:	8f 70       	andi	r24, 0x0F	; 15
 794:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	08 95       	ret
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	08 95       	ret

000007a0 <Endpoint_ConfigureEndpointTable>:
 7a0:	0f 93       	push	r16
 7a2:	1f 93       	push	r17
 7a4:	cf 93       	push	r28
 7a6:	df 93       	push	r29
 7a8:	ec 01       	movw	r28, r24
 7aa:	06 2f       	mov	r16, r22
 7ac:	10 e0       	ldi	r17, 0x00	; 0
 7ae:	36 c0       	rjmp	.+108    	; 0x81c <Endpoint_ConfigureEndpointTable+0x7c>
 7b0:	e1 2f       	mov	r30, r17
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	cf 01       	movw	r24, r30
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	88 0f       	add	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	e8 0f       	add	r30, r24
 7c0:	f9 1f       	adc	r31, r25
 7c2:	ec 0f       	add	r30, r28
 7c4:	fd 1f       	adc	r31, r29
 7c6:	50 81       	ld	r21, Z
 7c8:	55 23       	and	r21, r21
 7ca:	39 f1       	breq	.+78     	; 0x81a <Endpoint_ConfigureEndpointTable+0x7a>
 7cc:	94 81       	ldd	r25, Z+4	; 0x04
 7ce:	a1 81       	ldd	r26, Z+1	; 0x01
 7d0:	b2 81       	ldd	r27, Z+2	; 0x02
 7d2:	63 81       	ldd	r22, Z+3	; 0x03
 7d4:	85 2f       	mov	r24, r21
 7d6:	8f 70       	andi	r24, 0x0F	; 15
 7d8:	87 30       	cpi	r24, 0x07	; 7
 7da:	e0 f4       	brcc	.+56     	; 0x814 <Endpoint_ConfigureEndpointTable+0x74>
 7dc:	92 30       	cpi	r25, 0x02	; 2
 7de:	10 f0       	brcs	.+4      	; 0x7e4 <Endpoint_ConfigureEndpointTable+0x44>
 7e0:	46 e0       	ldi	r20, 0x06	; 6
 7e2:	01 c0       	rjmp	.+2      	; 0x7e6 <Endpoint_ConfigureEndpointTable+0x46>
 7e4:	42 e0       	ldi	r20, 0x02	; 2
 7e6:	28 e0       	ldi	r18, 0x08	; 8
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <Endpoint_ConfigureEndpointTable+0x54>
 7ee:	9f 5f       	subi	r25, 0xFF	; 255
 7f0:	22 0f       	add	r18, r18
 7f2:	33 1f       	adc	r19, r19
 7f4:	2a 17       	cp	r18, r26
 7f6:	3b 07       	cpc	r19, r27
 7f8:	d0 f3       	brcs	.-12     	; 0x7ee <Endpoint_ConfigureEndpointTable+0x4e>
 7fa:	92 95       	swap	r25
 7fc:	90 7f       	andi	r25, 0xF0	; 240
 7fe:	20 e4       	ldi	r18, 0x40	; 64
 800:	62 9f       	mul	r22, r18
 802:	b0 01       	movw	r22, r0
 804:	11 24       	eor	r1, r1
 806:	55 1f       	adc	r21, r21
 808:	55 27       	eor	r21, r21
 80a:	55 1f       	adc	r21, r21
 80c:	49 2b       	or	r20, r25
 80e:	65 2b       	or	r22, r21
 810:	93 df       	rcall	.-218    	; 0x738 <Endpoint_ConfigureEndpoint_Prv>
 812:	01 c0       	rjmp	.+2      	; 0x816 <Endpoint_ConfigureEndpointTable+0x76>
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	88 23       	and	r24, r24
 818:	21 f0       	breq	.+8      	; 0x822 <Endpoint_ConfigureEndpointTable+0x82>
 81a:	1f 5f       	subi	r17, 0xFF	; 255
 81c:	10 17       	cp	r17, r16
 81e:	40 f2       	brcs	.-112    	; 0x7b0 <Endpoint_ConfigureEndpointTable+0x10>
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	df 91       	pop	r29
 824:	cf 91       	pop	r28
 826:	1f 91       	pop	r17
 828:	0f 91       	pop	r16
 82a:	08 95       	ret

0000082c <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 82c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <USB_ControlRequest>
 830:	88 23       	and	r24, r24
 832:	9c f4       	brge	.+38     	; 0x85a <Endpoint_ClearStatusStage+0x2e>
 834:	04 c0       	rjmp	.+8      	; 0x83e <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 836:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_DeviceState>
 83a:	88 23       	and	r24, r24
 83c:	b9 f0       	breq	.+46     	; 0x86c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 83e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 842:	82 ff       	sbrs	r24, 2
 844:	f8 cf       	rjmp	.-16     	; 0x836 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 846:	e8 ee       	ldi	r30, 0xE8	; 232
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	80 81       	ld	r24, Z
 84c:	8b 77       	andi	r24, 0x7B	; 123
 84e:	80 83       	st	Z, r24
 850:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 852:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_DeviceState>
 856:	88 23       	and	r24, r24
 858:	49 f0       	breq	.+18     	; 0x86c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 85a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 85e:	80 ff       	sbrs	r24, 0
 860:	f8 cf       	rjmp	.-16     	; 0x852 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 862:	e8 ee       	ldi	r30, 0xE8	; 232
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 81       	ld	r24, Z
 868:	8e 77       	andi	r24, 0x7E	; 126
 86a:	80 83       	st	Z, r24
 86c:	08 95       	ret

0000086e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 86e:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 872:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
 876:	44 e6       	ldi	r20, 0x64	; 100
 878:	02 c0       	rjmp	.+4      	; 0x87e <Endpoint_WaitUntilReady+0x10>

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;
 87a:	9c 01       	movw	r18, r24

			if (!(TimeoutMSRem--))
 87c:	45 2f       	mov	r20, r21
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 87e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 882:	98 2f       	mov	r25, r24
 884:	91 70       	andi	r25, 0x01	; 1
 886:	80 fd       	sbrc	r24, 0
 888:	90 e8       	ldi	r25, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 88a:	90 38       	cpi	r25, 0x80	; 128
 88c:	29 f4       	brne	.+10     	; 0x898 <Endpoint_WaitUntilReady+0x2a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 88e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		{
			if (Endpoint_IsINReady())
 892:	80 ff       	sbrs	r24, 0
 894:	05 c0       	rjmp	.+10     	; 0x8a0 <Endpoint_WaitUntilReady+0x32>
 896:	1b c0       	rjmp	.+54     	; 0x8ce <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 898:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 89c:	82 fd       	sbrc	r24, 2
 89e:	19 c0       	rjmp	.+50     	; 0x8d2 <Endpoint_WaitUntilReady+0x64>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8a0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8a4:	88 23       	and	r24, r24
 8a6:	b9 f0       	breq	.+46     	; 0x8d6 <Endpoint_WaitUntilReady+0x68>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8a8:	85 30       	cpi	r24, 0x05	; 5
 8aa:	b9 f0       	breq	.+46     	; 0x8da <Endpoint_WaitUntilReady+0x6c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 8ac:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 8b0:	85 fd       	sbrc	r24, 5
 8b2:	15 c0       	rjmp	.+42     	; 0x8de <Endpoint_WaitUntilReady+0x70>
 8b4:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 8b8:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 8bc:	28 17       	cp	r18, r24
 8be:	39 07       	cpc	r19, r25
 8c0:	f1 f2       	breq	.-68     	; 0x87e <Endpoint_WaitUntilReady+0x10>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 8c2:	5f ef       	ldi	r21, 0xFF	; 255
 8c4:	54 0f       	add	r21, r20
 8c6:	41 11       	cpse	r20, r1
 8c8:	d8 cf       	rjmp	.-80     	; 0x87a <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
 8ca:	84 e0       	ldi	r24, 0x04	; 4
 8cc:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 8ce:	80 e0       	ldi	r24, 0x00	; 0
 8d0:	08 95       	ret
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8d6:	82 e0       	ldi	r24, 0x02	; 2
 8d8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 8da:	83 e0       	ldi	r24, 0x03	; 3
 8dc:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 8de:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 8e0:	08 95       	ret

000008e2 <USB_Init_Device>:

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
 8e2:	cf 93       	push	r28
 8e4:	df 93       	push	r29
 8e6:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <USB_DeviceState>
 8ea:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
 8ee:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <USB_Device_RemoteWakeupEnabled>
 8f2:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <USB_Device_CurrentlySelfPowered>
 8f6:	c0 ee       	ldi	r28, 0xE0	; 224
 8f8:	d0 e0       	ldi	r29, 0x00	; 0
 8fa:	88 81       	ld	r24, Y
 8fc:	8b 7f       	andi	r24, 0xFB	; 251
 8fe:	88 83       	st	Y, r24
 900:	e8 ed       	ldi	r30, 0xD8	; 216
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	80 81       	ld	r24, Z
 906:	81 60       	ori	r24, 0x01	; 1
 908:	80 83       	st	Z, r24
 90a:	42 e0       	ldi	r20, 0x02	; 2
 90c:	60 e0       	ldi	r22, 0x00	; 0
 90e:	80 e0       	ldi	r24, 0x00	; 0
 910:	13 df       	rcall	.-474    	; 0x738 <Endpoint_ConfigureEndpoint_Prv>
 912:	e1 ee       	ldi	r30, 0xE1	; 225
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	80 81       	ld	r24, Z
 918:	8e 7f       	andi	r24, 0xFE	; 254
 91a:	80 83       	st	Z, r24
 91c:	e2 ee       	ldi	r30, 0xE2	; 226
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	80 81       	ld	r24, Z
 922:	81 60       	ori	r24, 0x01	; 1
 924:	80 83       	st	Z, r24
 926:	80 81       	ld	r24, Z
 928:	88 60       	ori	r24, 0x08	; 8
 92a:	80 83       	st	Z, r24
 92c:	88 81       	ld	r24, Y
 92e:	8e 7f       	andi	r24, 0xFE	; 254
 930:	88 83       	st	Y, r24
 932:	df 91       	pop	r29
 934:	cf 91       	pop	r28
 936:	08 95       	ret

00000938 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
 938:	cf 93       	push	r28
 93a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 93c:	28 d0       	rcall	.+80     	; 0x98e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 93e:	2f d0       	rcall	.+94     	; 0x99e <USB_INT_ClearAllInterrupts>
 940:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 942:	d0 e0       	ldi	r29, 0x00	; 0
 944:	88 81       	ld	r24, Y
 946:	8f 77       	andi	r24, 0x7F	; 127
 948:	88 83       	st	Y, r24
 94a:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 94c:	80 68       	ori	r24, 0x80	; 128
 94e:	88 83       	st	Y, r24
 950:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 952:	8f 7d       	andi	r24, 0xDF	; 223
 954:	88 83       	st	Y, r24
 956:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	80 81       	ld	r24, Z
 95c:	80 68       	ori	r24, 0x80	; 128
 95e:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 960:	19 bc       	out	0x29, r1	; 41
			#else
			USB_PLL_Off();
			#endif
		}

		USB_Init_Device();
 962:	bf df       	rcall	.-130    	; 0x8e2 <USB_Init_Device>
 964:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 966:	80 61       	ori	r24, 0x10	; 16
 968:	88 83       	st	Y, r24
 96a:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 96c:	cf 91       	pop	r28
 96e:	08 95       	ret

00000970 <USB_Init>:
 970:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 972:	f0 e0       	ldi	r31, 0x00	; 0
 974:	80 81       	ld	r24, Z
 976:	8f 7e       	andi	r24, 0xEF	; 239
 978:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 97a:	e7 ed       	ldi	r30, 0xD7	; 215
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	80 81       	ld	r24, Z
 980:	81 60       	ori	r24, 0x01	; 1
 982:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 984:	81 e0       	ldi	r24, 0x01	; 1
 986:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <USB_IsInitialized>

	USB_ResetInterface();
 98a:	d6 cf       	rjmp	.-84     	; 0x938 <USB_ResetInterface>
 98c:	08 95       	ret

0000098e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 98e:	e8 ed       	ldi	r30, 0xD8	; 216
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	80 81       	ld	r24, Z
 994:	8c 7f       	andi	r24, 0xFC	; 252
 996:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 998:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 99c:	08 95       	ret

0000099e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 99e:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 9a2:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 9a6:	08 95       	ret

000009a8 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 9a8:	1f 92       	push	r1
 9aa:	0f 92       	push	r0
 9ac:	0f b6       	in	r0, 0x3f	; 63
 9ae:	0f 92       	push	r0
 9b0:	11 24       	eor	r1, r1
 9b2:	0b b6       	in	r0, 0x3b	; 59
 9b4:	0f 92       	push	r0
 9b6:	2f 93       	push	r18
 9b8:	3f 93       	push	r19
 9ba:	4f 93       	push	r20
 9bc:	5f 93       	push	r21
 9be:	6f 93       	push	r22
 9c0:	7f 93       	push	r23
 9c2:	8f 93       	push	r24
 9c4:	9f 93       	push	r25
 9c6:	af 93       	push	r26
 9c8:	bf 93       	push	r27
 9ca:	ef 93       	push	r30
 9cc:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 9ce:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 9d2:	82 ff       	sbrs	r24, 2
 9d4:	0a c0       	rjmp	.+20     	; 0x9ea <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 9d6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 9da:	82 ff       	sbrs	r24, 2
 9dc:	06 c0       	rjmp	.+12     	; 0x9ea <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 9de:	e1 ee       	ldi	r30, 0xE1	; 225
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	80 81       	ld	r24, Z
 9e4:	8b 7f       	andi	r24, 0xFB	; 251
 9e6:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 9e8:	9a d2       	rcall	.+1332   	; 0xf1e <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 9ea:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 9ee:	80 ff       	sbrs	r24, 0
 9f0:	1d c0       	rjmp	.+58     	; 0xa2c <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 9f2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 9f6:	80 ff       	sbrs	r24, 0
 9f8:	19 c0       	rjmp	.+50     	; 0xa2c <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 9fa:	ea ed       	ldi	r30, 0xDA	; 218
 9fc:	f0 e0       	ldi	r31, 0x00	; 0
 9fe:	80 81       	ld	r24, Z
 a00:	8e 7f       	andi	r24, 0xFE	; 254
 a02:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 a04:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 a08:	80 ff       	sbrs	r24, 0
 a0a:	0c c0       	rjmp	.+24     	; 0xa24 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 a0c:	84 e1       	ldi	r24, 0x14	; 20
 a0e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 a10:	86 e1       	ldi	r24, 0x16	; 22
 a12:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 a14:	09 b4       	in	r0, 0x29	; 41
 a16:	00 fe       	sbrs	r0, 0
 a18:	fd cf       	rjmp	.-6      	; 0xa14 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 a1a:	81 e0       	ldi	r24, 0x01	; 1
 a1c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <USB_DeviceState>
			EVENT_USB_Device_Connect();
 a20:	32 dc       	rcall	.-1948   	; 0x286 <EVENT_USB_Device_Connect>
 a22:	04 c0       	rjmp	.+8      	; 0xa2c <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 a24:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 a26:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 a2a:	2e dc       	rcall	.-1956   	; 0x288 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 a2c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 a30:	80 ff       	sbrs	r24, 0
 a32:	16 c0       	rjmp	.+44     	; 0xa60 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 a34:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a38:	80 ff       	sbrs	r24, 0
 a3a:	12 c0       	rjmp	.+36     	; 0xa60 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a3c:	e2 ee       	ldi	r30, 0xE2	; 226
 a3e:	f0 e0       	ldi	r31, 0x00	; 0
 a40:	80 81       	ld	r24, Z
 a42:	8e 7f       	andi	r24, 0xFE	; 254
 a44:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a46:	80 81       	ld	r24, Z
 a48:	80 61       	ori	r24, 0x10	; 16
 a4a:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 a4c:	e8 ed       	ldi	r30, 0xD8	; 216
 a4e:	f0 e0       	ldi	r31, 0x00	; 0
 a50:	80 81       	ld	r24, Z
 a52:	80 62       	ori	r24, 0x20	; 32
 a54:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 a56:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 a58:	85 e0       	ldi	r24, 0x05	; 5
 a5a:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 a5e:	5f d2       	rcall	.+1214   	; 0xf1e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 a60:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 a64:	84 ff       	sbrs	r24, 4
 a66:	2f c0       	rjmp	.+94     	; 0xac6 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 a68:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 a6c:	84 ff       	sbrs	r24, 4
 a6e:	2b c0       	rjmp	.+86     	; 0xac6 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 a70:	84 e1       	ldi	r24, 0x14	; 20
 a72:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 a74:	86 e1       	ldi	r24, 0x16	; 22
 a76:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 a78:	09 b4       	in	r0, 0x29	; 41
 a7a:	00 fe       	sbrs	r0, 0
 a7c:	fd cf       	rjmp	.-6      	; 0xa78 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 a7e:	e8 ed       	ldi	r30, 0xD8	; 216
 a80:	f0 e0       	ldi	r31, 0x00	; 0
 a82:	80 81       	ld	r24, Z
 a84:	8f 7d       	andi	r24, 0xDF	; 223
 a86:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 a88:	e1 ee       	ldi	r30, 0xE1	; 225
 a8a:	f0 e0       	ldi	r31, 0x00	; 0
 a8c:	80 81       	ld	r24, Z
 a8e:	8f 7e       	andi	r24, 0xEF	; 239
 a90:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 a92:	e2 ee       	ldi	r30, 0xE2	; 226
 a94:	f0 e0       	ldi	r31, 0x00	; 0
 a96:	80 81       	ld	r24, Z
 a98:	8f 7e       	andi	r24, 0xEF	; 239
 a9a:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 a9c:	80 81       	ld	r24, Z
 a9e:	81 60       	ori	r24, 0x01	; 1
 aa0:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 aa2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 aa6:	88 23       	and	r24, r24
 aa8:	21 f0       	breq	.+8      	; 0xab2 <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
 aaa:	84 e0       	ldi	r24, 0x04	; 4
 aac:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <USB_DeviceState>
 ab0:	09 c0       	rjmp	.+18     	; 0xac4 <__vector_10+0x11c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 ab2:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 ab6:	88 23       	and	r24, r24
 ab8:	14 f4       	brge	.+4      	; 0xabe <__vector_10+0x116>
 aba:	83 e0       	ldi	r24, 0x03	; 3
 abc:	01 c0       	rjmp	.+2      	; 0xac0 <__vector_10+0x118>
 abe:	81 e0       	ldi	r24, 0x01	; 1
 ac0:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 ac4:	2c d2       	rcall	.+1112   	; 0xf1e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 ac6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 aca:	83 ff       	sbrs	r24, 3
 acc:	23 c0       	rjmp	.+70     	; 0xb14 <__vector_10+0x16c>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 ace:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 ad2:	83 ff       	sbrs	r24, 3
 ad4:	1f c0       	rjmp	.+62     	; 0xb14 <__vector_10+0x16c>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 ad6:	e1 ee       	ldi	r30, 0xE1	; 225
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	80 81       	ld	r24, Z
 adc:	87 7f       	andi	r24, 0xF7	; 247
 ade:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 ae0:	82 e0       	ldi	r24, 0x02	; 2
 ae2:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 ae6:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 aea:	80 81       	ld	r24, Z
 aec:	8e 7f       	andi	r24, 0xFE	; 254
 aee:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 af0:	e2 ee       	ldi	r30, 0xE2	; 226
 af2:	f0 e0       	ldi	r31, 0x00	; 0
 af4:	80 81       	ld	r24, Z
 af6:	8e 7f       	andi	r24, 0xFE	; 254
 af8:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 afa:	80 81       	ld	r24, Z
 afc:	80 61       	ori	r24, 0x10	; 16
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 afe:	80 83       	st	Z, r24
 b00:	42 e0       	ldi	r20, 0x02	; 2
 b02:	60 e0       	ldi	r22, 0x00	; 0
 b04:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 b06:	18 de       	rcall	.-976    	; 0x738 <Endpoint_ConfigureEndpoint_Prv>
 b08:	e0 ef       	ldi	r30, 0xF0	; 240
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	80 81       	ld	r24, Z
 b0e:	88 60       	ori	r24, 0x08	; 8

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 b10:	80 83       	st	Z, r24
 b12:	05 d2       	rcall	.+1034   	; 0xf1e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 b14:	ff 91       	pop	r31
 b16:	ef 91       	pop	r30
 b18:	bf 91       	pop	r27
 b1a:	af 91       	pop	r26
 b1c:	9f 91       	pop	r25
 b1e:	8f 91       	pop	r24
 b20:	7f 91       	pop	r23
 b22:	6f 91       	pop	r22
 b24:	5f 91       	pop	r21
 b26:	4f 91       	pop	r20
 b28:	3f 91       	pop	r19
 b2a:	2f 91       	pop	r18
 b2c:	0f 90       	pop	r0
 b2e:	0b be       	out	0x3b, r0	; 59
 b30:	0f 90       	pop	r0
 b32:	0f be       	out	0x3f, r0	; 63
 b34:	0f 90       	pop	r0
 b36:	1f 90       	pop	r1
 b38:	18 95       	reti

00000b3a <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 b3a:	1f 92       	push	r1
 b3c:	0f 92       	push	r0
 b3e:	0f b6       	in	r0, 0x3f	; 63
 b40:	0f 92       	push	r0
 b42:	11 24       	eor	r1, r1
 b44:	0b b6       	in	r0, 0x3b	; 59
 b46:	0f 92       	push	r0
 b48:	ef 92       	push	r14
 b4a:	ff 92       	push	r15
 b4c:	1f 93       	push	r17
 b4e:	2f 93       	push	r18
 b50:	3f 93       	push	r19
 b52:	4f 93       	push	r20
 b54:	5f 93       	push	r21
 b56:	6f 93       	push	r22
 b58:	7f 93       	push	r23
 b5a:	8f 93       	push	r24
 b5c:	9f 93       	push	r25
 b5e:	af 93       	push	r26
 b60:	bf 93       	push	r27
 b62:	cf 93       	push	r28
 b64:	df 93       	push	r29
 b66:	ef 93       	push	r30
 b68:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 b6a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 b6e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 b70:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 b74:	98 2f       	mov	r25, r24
 b76:	91 70       	andi	r25, 0x01	; 1
 b78:	80 fd       	sbrc	r24, 0
 b7a:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 b7c:	19 2f       	mov	r17, r25
 b7e:	1c 2b       	or	r17, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b80:	0f 2e       	mov	r0, r31
 b82:	f9 ee       	ldi	r31, 0xE9	; 233
 b84:	ef 2e       	mov	r14, r31
 b86:	f1 2c       	mov	r15, r1
 b88:	f0 2d       	mov	r31, r0
 b8a:	f7 01       	movw	r30, r14
 b8c:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 b8e:	c0 ef       	ldi	r28, 0xF0	; 240
 b90:	d0 e0       	ldi	r29, 0x00	; 0
 b92:	88 81       	ld	r24, Y
 b94:	87 7f       	andi	r24, 0xF7	; 247
 b96:	88 83       	st	Y, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 b98:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 b9a:	72 d1       	rcall	.+740    	; 0xe80 <USB_Device_ProcessControlRequest>
 b9c:	f7 01       	movw	r30, r14
 b9e:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 ba0:	88 81       	ld	r24, Y
 ba2:	88 60       	ori	r24, 0x08	; 8
 ba4:	88 83       	st	Y, r24
 ba6:	c1 2f       	mov	r28, r17
 ba8:	cf 70       	andi	r28, 0x0F	; 15
 baa:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 bac:	ff 91       	pop	r31
 bae:	ef 91       	pop	r30
 bb0:	df 91       	pop	r29
 bb2:	cf 91       	pop	r28
 bb4:	bf 91       	pop	r27
 bb6:	af 91       	pop	r26
 bb8:	9f 91       	pop	r25
 bba:	8f 91       	pop	r24
 bbc:	7f 91       	pop	r23
 bbe:	6f 91       	pop	r22
 bc0:	5f 91       	pop	r21
 bc2:	4f 91       	pop	r20
 bc4:	3f 91       	pop	r19
 bc6:	2f 91       	pop	r18
 bc8:	1f 91       	pop	r17
 bca:	ff 90       	pop	r15
 bcc:	ef 90       	pop	r14
 bce:	0f 90       	pop	r0
 bd0:	0b be       	out	0x3b, r0	; 59
 bd2:	0f 90       	pop	r0
 bd4:	0f be       	out	0x3f, r0	; 63
 bd6:	0f 90       	pop	r0
 bd8:	1f 90       	pop	r1
 bda:	18 95       	reti

00000bdc <USB_Device_GetStatus>:

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;

	switch (USB_ControlRequest.bmRequestType)
 bdc:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <USB_ControlRequest>
 be0:	80 38       	cpi	r24, 0x80	; 128
 be2:	19 f0       	breq	.+6      	; 0xbea <USB_Device_GetStatus+0xe>
 be4:	82 38       	cpi	r24, 0x82	; 130
 be6:	71 f0       	breq	.+28     	; 0xc04 <USB_Device_GetStatus+0x28>
 be8:	08 95       	ret
	{
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
		{
			#if !defined(NO_DEVICE_SELF_POWER)
			if (USB_Device_CurrentlySelfPowered)
 bea:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_Device_CurrentlySelfPowered>
 bee:	81 11       	cpse	r24, r1
 bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <USB_Device_GetStatus+0x1a>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	01 c0       	rjmp	.+2      	; 0xbf8 <USB_Device_GetStatus+0x1c>
	{
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
		{
			#if !defined(NO_DEVICE_SELF_POWER)
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
 bf6:	91 e0       	ldi	r25, 0x01	; 1
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 bf8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <USB_Device_RemoteWakeupEnabled>
 bfc:	88 23       	and	r24, r24
 bfe:	81 f0       	breq	.+32     	; 0xc20 <USB_Device_GetStatus+0x44>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 c00:	92 60       	ori	r25, 0x02	; 2
 c02:	0e c0       	rjmp	.+28     	; 0xc20 <USB_Device_GetStatus+0x44>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 c04:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <USB_ControlRequest+0x4>
 c08:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 c0a:	87 30       	cpi	r24, 0x07	; 7
 c0c:	b0 f4       	brcc	.+44     	; 0xc3a <USB_Device_GetStatus+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c0e:	e9 ee       	ldi	r30, 0xE9	; 233
 c10:	f0 e0       	ldi	r31, 0x00	; 0
 c12:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 c14:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 c18:	95 fb       	bst	r25, 5
 c1a:	99 27       	eor	r25, r25
 c1c:	90 f9       	bld	r25, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c1e:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c20:	e8 ee       	ldi	r30, 0xE8	; 232
 c22:	f0 e0       	ldi	r31, 0x00	; 0
 c24:	80 81       	ld	r24, Z
 c26:	87 7f       	andi	r24, 0xF7	; 247
 c28:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 c2a:	a1 ef       	ldi	r26, 0xF1	; 241
 c2c:	b0 e0       	ldi	r27, 0x00	; 0
 c2e:	9c 93       	st	X, r25
				UEDATX = (Data >> 8);
 c30:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c32:	80 81       	ld	r24, Z
 c34:	8e 77       	andi	r24, 0x7E	; 126
 c36:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 c38:	f9 cd       	rjmp	.-1038   	; 0x82c <Endpoint_ClearStatusStage>
 c3a:	08 95       	ret

00000c3c <USB_Device_ClearSetFeature>:
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 c3c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <USB_ControlRequest>
 c40:	8f 71       	andi	r24, 0x1F	; 31
 c42:	19 f0       	breq	.+6      	; 0xc4a <USB_Device_ClearSetFeature+0xe>
 c44:	82 30       	cpi	r24, 0x02	; 2
 c46:	71 f0       	breq	.+28     	; 0xc64 <USB_Device_ClearSetFeature+0x28>
 c48:	08 95       	ret
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 c4a:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_ControlRequest+0x2>
 c4e:	81 30       	cpi	r24, 0x01	; 1
 c50:	09 f0       	breq	.+2      	; 0xc54 <USB_Device_ClearSetFeature+0x18>
 c52:	3f c0       	rjmp	.+126    	; 0xcd2 <USB_Device_ClearSetFeature+0x96>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 c54:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <USB_ControlRequest+0x1>
 c58:	93 30       	cpi	r25, 0x03	; 3
 c5a:	09 f0       	breq	.+2      	; 0xc5e <USB_Device_ClearSetFeature+0x22>
 c5c:	80 e0       	ldi	r24, 0x00	; 0
 c5e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <USB_Device_RemoteWakeupEnabled>
			else
			  return;

			break;
 c62:	2f c0       	rjmp	.+94     	; 0xcc2 <USB_Device_ClearSetFeature+0x86>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 c64:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_ControlRequest+0x2>
 c68:	81 11       	cpse	r24, r1
 c6a:	2b c0       	rjmp	.+86     	; 0xcc2 <USB_Device_ClearSetFeature+0x86>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 c6c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <USB_ControlRequest+0x4>
 c70:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 c72:	9f ef       	ldi	r25, 0xFF	; 255
 c74:	98 0f       	add	r25, r24
 c76:	96 30       	cpi	r25, 0x06	; 6
 c78:	60 f5       	brcc	.+88     	; 0xcd2 <USB_Device_ClearSetFeature+0x96>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c7a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 c7e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 c82:	90 ff       	sbrs	r25, 0
 c84:	1e c0       	rjmp	.+60     	; 0xcc2 <USB_Device_ClearSetFeature+0x86>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 c86:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <USB_ControlRequest+0x1>
 c8a:	93 30       	cpi	r25, 0x03	; 3
 c8c:	31 f4       	brne	.+12     	; 0xc9a <USB_Device_ClearSetFeature+0x5e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c8e:	eb ee       	ldi	r30, 0xEB	; 235
 c90:	f0 e0       	ldi	r31, 0x00	; 0
 c92:	80 81       	ld	r24, Z
 c94:	80 62       	ori	r24, 0x20	; 32
 c96:	80 83       	st	Z, r24
 c98:	14 c0       	rjmp	.+40     	; 0xcc2 <USB_Device_ClearSetFeature+0x86>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 c9a:	eb ee       	ldi	r30, 0xEB	; 235
 c9c:	f0 e0       	ldi	r31, 0x00	; 0
 c9e:	90 81       	ld	r25, Z
 ca0:	90 61       	ori	r25, 0x10	; 16
 ca2:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 ca4:	21 e0       	ldi	r18, 0x01	; 1
 ca6:	30 e0       	ldi	r19, 0x00	; 0
 ca8:	a9 01       	movw	r20, r18
 caa:	02 c0       	rjmp	.+4      	; 0xcb0 <USB_Device_ClearSetFeature+0x74>
 cac:	44 0f       	add	r20, r20
 cae:	55 1f       	adc	r21, r21
 cb0:	8a 95       	dec	r24
 cb2:	e2 f7       	brpl	.-8      	; 0xcac <USB_Device_ClearSetFeature+0x70>
 cb4:	aa ee       	ldi	r26, 0xEA	; 234
 cb6:	b0 e0       	ldi	r27, 0x00	; 0
 cb8:	4c 93       	st	X, r20
				UERST = 0;
 cba:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 cbc:	80 81       	ld	r24, Z
 cbe:	88 60       	ori	r24, 0x08	; 8
 cc0:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 cc2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cc6:	e8 ee       	ldi	r30, 0xE8	; 232
 cc8:	f0 e0       	ldi	r31, 0x00	; 0
 cca:	80 81       	ld	r24, Z
 ccc:	87 7f       	andi	r24, 0xF7	; 247
 cce:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 cd0:	ad cd       	rjmp	.-1190   	; 0x82c <Endpoint_ClearStatusStage>
 cd2:	08 95       	ret

00000cd4 <USB_Device_SetAddress>:
		Endpoint_StallTransaction();
	}
}

static void USB_Device_SetAddress(void)
{
 cd4:	cf 93       	push	r28
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 cd6:	c0 91 3d 01 	lds	r28, 0x013D	; 0x80013d <USB_ControlRequest+0x2>
 cda:	cf 77       	andi	r28, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 cdc:	e3 ee       	ldi	r30, 0xE3	; 227
 cde:	f0 e0       	ldi	r31, 0x00	; 0
 ce0:	80 81       	ld	r24, Z
 ce2:	80 78       	andi	r24, 0x80	; 128
 ce4:	8c 2b       	or	r24, r28
 ce6:	80 83       	st	Z, r24
 ce8:	e8 ee       	ldi	r30, 0xE8	; 232
 cea:	f0 e0       	ldi	r31, 0x00	; 0
 cec:	80 81       	ld	r24, Z
 cee:	87 7f       	andi	r24, 0xF7	; 247
 cf0:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 cf2:	9c dd       	rcall	.-1224   	; 0x82c <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 cf4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
 cf8:	80 ff       	sbrs	r24, 0
 cfa:	fc cf       	rjmp	.-8      	; 0xcf4 <USB_Device_SetAddress+0x20>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 cfc:	e3 ee       	ldi	r30, 0xE3	; 227
 cfe:	f0 e0       	ldi	r31, 0x00	; 0
 d00:	80 81       	ld	r24, Z
 d02:	80 68       	ori	r24, 0x80	; 128
 d04:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 d06:	cc 23       	and	r28, r28
 d08:	11 f0       	breq	.+4      	; 0xd0e <USB_Device_SetAddress+0x3a>
 d0a:	83 e0       	ldi	r24, 0x03	; 3
 d0c:	01 c0       	rjmp	.+2      	; 0xd10 <USB_Device_SetAddress+0x3c>
 d0e:	82 e0       	ldi	r24, 0x02	; 2
 d10:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <USB_DeviceState>
}
 d14:	cf 91       	pop	r28
 d16:	08 95       	ret

00000d18 <USB_Device_GetConfiguration>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d18:	e8 ee       	ldi	r30, 0xE8	; 232
 d1a:	f0 e0       	ldi	r31, 0x00	; 0
 d1c:	80 81       	ld	r24, Z
 d1e:	87 7f       	andi	r24, 0xF7	; 247
 d20:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 d22:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d26:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d2a:	80 81       	ld	r24, Z
 d2c:	8e 77       	andi	r24, 0x7E	; 126
 d2e:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 d30:	7d cd       	rjmp	.-1286   	; 0x82c <Endpoint_ClearStatusStage>
 d32:	08 95       	ret

00000d34 <USB_Device_GetInternalSerialDescriptor>:
}

#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
static void USB_Device_GetInternalSerialDescriptor(void)
{
 d34:	0f 93       	push	r16
 d36:	1f 93       	push	r17
 d38:	cf 93       	push	r28
 d3a:	df 93       	push	r29
 d3c:	cd b7       	in	r28, 0x3d	; 61
 d3e:	de b7       	in	r29, 0x3e	; 62
 d40:	aa 97       	sbiw	r28, 0x2a	; 42
 d42:	0f b6       	in	r0, 0x3f	; 63
 d44:	f8 94       	cli
 d46:	de bf       	out	0x3e, r29	; 62
 d48:	0f be       	out	0x3f, r0	; 63
 d4a:	cd bf       	out	0x3d, r28	; 61
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 d4c:	83 e0       	ldi	r24, 0x03	; 3
 d4e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 d50:	8a e2       	ldi	r24, 0x2A	; 42
 d52:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 d54:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 d56:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 d58:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 d5a:	2e e0       	ldi	r18, 0x0E	; 14
 d5c:	20 c0       	rjmp	.+64     	; 0xd9e <USB_Device_GetInternalSerialDescriptor+0x6a>

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 d5e:	e2 2f       	mov	r30, r18
 d60:	f0 e0       	ldi	r31, 0x00	; 0
 d62:	81 e2       	ldi	r24, 0x21	; 33
 d64:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 d68:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 d6a:	90 ff       	sbrs	r25, 0
 d6c:	03 c0       	rjmp	.+6      	; 0xd74 <USB_Device_GetInternalSerialDescriptor+0x40>
					{
						SerialByte >>= 4;
 d6e:	e2 95       	swap	r30
 d70:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 d72:	2f 5f       	subi	r18, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 d74:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 d76:	a9 2f       	mov	r26, r25
 d78:	b0 e0       	ldi	r27, 0x00	; 0
 d7a:	aa 0f       	add	r26, r26
 d7c:	bb 1f       	adc	r27, r27
 d7e:	43 e0       	ldi	r20, 0x03	; 3
 d80:	50 e0       	ldi	r21, 0x00	; 0
 d82:	4c 0f       	add	r20, r28
 d84:	5d 1f       	adc	r21, r29
 d86:	a4 0f       	add	r26, r20
 d88:	b5 1f       	adc	r27, r21
 d8a:	ea 30       	cpi	r30, 0x0A	; 10
 d8c:	18 f0       	brcs	.+6      	; 0xd94 <USB_Device_GetInternalSerialDescriptor+0x60>
 d8e:	f0 e0       	ldi	r31, 0x00	; 0
 d90:	f7 96       	adiw	r30, 0x37	; 55
 d92:	02 c0       	rjmp	.+4      	; 0xd98 <USB_Device_GetInternalSerialDescriptor+0x64>
 d94:	f0 e0       	ldi	r31, 0x00	; 0
 d96:	f0 96       	adiw	r30, 0x30	; 48
 d98:	ed 93       	st	X+, r30
 d9a:	fc 93       	st	X, r31
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 d9c:	9f 5f       	subi	r25, 0xFF	; 255
 d9e:	94 31       	cpi	r25, 0x14	; 20
 da0:	f0 f2       	brcs	.-68     	; 0xd5e <USB_Device_GetInternalSerialDescriptor+0x2a>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 da2:	3f bf       	out	0x3f, r19	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 da4:	08 ee       	ldi	r16, 0xE8	; 232
 da6:	10 e0       	ldi	r17, 0x00	; 0
 da8:	f8 01       	movw	r30, r16
 daa:	80 81       	ld	r24, Z
 dac:	87 7f       	andi	r24, 0xF7	; 247
 dae:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 db0:	6a e2       	ldi	r22, 0x2A	; 42
 db2:	70 e0       	ldi	r23, 0x00	; 0
 db4:	ce 01       	movw	r24, r28
 db6:	01 96       	adiw	r24, 0x01	; 1
 db8:	ee db       	rcall	.-2084   	; 0x596 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 dba:	f8 01       	movw	r30, r16
 dbc:	80 81       	ld	r24, Z
 dbe:	8b 77       	andi	r24, 0x7B	; 123
 dc0:	80 83       	st	Z, r24
	Endpoint_ClearOUT();
}
 dc2:	aa 96       	adiw	r28, 0x2a	; 42
 dc4:	0f b6       	in	r0, 0x3f	; 63
 dc6:	f8 94       	cli
 dc8:	de bf       	out	0x3e, r29	; 62
 dca:	0f be       	out	0x3f, r0	; 63
 dcc:	cd bf       	out	0x3d, r28	; 61
 dce:	df 91       	pop	r29
 dd0:	cf 91       	pop	r28
 dd2:	1f 91       	pop	r17
 dd4:	0f 91       	pop	r16
 dd6:	08 95       	ret

00000dd8 <USB_Device_GetDescriptor>:
#endif

static void USB_Device_GetDescriptor(void)
{
 dd8:	0f 93       	push	r16
 dda:	1f 93       	push	r17
 ddc:	cf 93       	push	r28
 dde:	df 93       	push	r29
 de0:	00 d0       	rcall	.+0      	; 0xde2 <USB_Device_GetDescriptor+0xa>
 de2:	cd b7       	in	r28, 0x3d	; 61
 de4:	de b7       	in	r29, 0x3e	; 62
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 de6:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_ControlRequest+0x2>
 dea:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <USB_ControlRequest+0x3>
 dee:	8c 3d       	cpi	r24, 0xDC	; 220
 df0:	23 e0       	ldi	r18, 0x03	; 3
 df2:	92 07       	cpc	r25, r18
 df4:	11 f4       	brne	.+4      	; 0xdfa <USB_Device_GetDescriptor+0x22>
	{
		USB_Device_GetInternalSerialDescriptor();
 df6:	9e df       	rcall	.-196    	; 0xd34 <USB_Device_GetInternalSerialDescriptor>
		return;
 df8:	18 c0       	rjmp	.+48     	; 0xe2a <USB_Device_GetDescriptor+0x52>
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 dfa:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <USB_ControlRequest+0x4>
 dfe:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <USB_ControlRequest+0x5>
 e02:	ae 01       	movw	r20, r28
 e04:	4f 5f       	subi	r20, 0xFF	; 255
 e06:	5f 4f       	sbci	r21, 0xFF	; 255
 e08:	d3 d9       	rcall	.-3162   	; 0x1b0 <CALLBACK_USB_GetDescriptor>
 e0a:	00 97       	sbiw	r24, 0x00	; 0
 e0c:	71 f0       	breq	.+28     	; 0xe2a <USB_Device_GetDescriptor+0x52>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e0e:	08 ee       	ldi	r16, 0xE8	; 232
 e10:	10 e0       	ldi	r17, 0x00	; 0
 e12:	f8 01       	movw	r30, r16
 e14:	20 81       	ld	r18, Z
 e16:	27 7f       	andi	r18, 0xF7	; 247
 e18:	20 83       	st	Z, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 e1a:	bc 01       	movw	r22, r24
 e1c:	89 81       	ldd	r24, Y+1	; 0x01
 e1e:	9a 81       	ldd	r25, Y+2	; 0x02
 e20:	22 dc       	rcall	.-1980   	; 0x666 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e22:	f8 01       	movw	r30, r16
 e24:	80 81       	ld	r24, Z
 e26:	8b 77       	andi	r24, 0x7B	; 123
 e28:	80 83       	st	Z, r24
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
}
 e2a:	0f 90       	pop	r0
 e2c:	0f 90       	pop	r0
 e2e:	df 91       	pop	r29
 e30:	cf 91       	pop	r28
 e32:	1f 91       	pop	r17
 e34:	0f 91       	pop	r16
 e36:	08 95       	ret

00000e38 <USB_Device_SetConfiguration>:
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 e38:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_ControlRequest+0x2>
 e3c:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <USB_ControlRequest+0x3>
 e40:	99 27       	eor	r25, r25
 e42:	02 97       	sbiw	r24, 0x02	; 2
 e44:	e4 f4       	brge	.+56     	; 0xe7e <USB_Device_SetConfiguration+0x46>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e46:	e8 ee       	ldi	r30, 0xE8	; 232
 e48:	f0 e0       	ldi	r31, 0x00	; 0
 e4a:	80 81       	ld	r24, Z
 e4c:	87 7f       	andi	r24, 0xF7	; 247
 e4e:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 e50:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <USB_ControlRequest+0x2>
 e54:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>

	Endpoint_ClearStatusStage();
 e58:	e9 dc       	rcall	.-1582   	; 0x82c <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 e5a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 e5e:	88 23       	and	r24, r24
 e60:	21 f0       	breq	.+8      	; 0xe6a <USB_Device_SetConfiguration+0x32>
	  USB_DeviceState = DEVICE_STATE_Configured;
 e62:	84 e0       	ldi	r24, 0x04	; 4
 e64:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <USB_DeviceState>
 e68:	09 c0       	rjmp	.+18     	; 0xe7c <USB_Device_SetConfiguration+0x44>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 e6a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 e6e:	88 23       	and	r24, r24
 e70:	14 f4       	brge	.+4      	; 0xe76 <USB_Device_SetConfiguration+0x3e>
 e72:	84 e0       	ldi	r24, 0x04	; 4
 e74:	01 c0       	rjmp	.+2      	; 0xe78 <USB_Device_SetConfiguration+0x40>
 e76:	81 e0       	ldi	r24, 0x01	; 1
 e78:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 e7c:	06 ca       	rjmp	.-3060   	; 0x28a <EVENT_USB_Device_ConfigurationChanged>
 e7e:	08 95       	ret

00000e80 <USB_Device_ProcessControlRequest>:
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 e80:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
 e82:	eb e3       	ldi	r30, 0x3B	; 59
 e84:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 e86:	05 c0       	rjmp	.+10     	; 0xe92 <USB_Device_ProcessControlRequest+0x12>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 e88:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	  *(RequestHeader++) = Endpoint_Read_8();
 e8c:	90 83       	st	Z, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 e8e:	8f 5f       	subi	r24, 0xFF	; 255
	  *(RequestHeader++) = Endpoint_Read_8();
 e90:	31 96       	adiw	r30, 0x01	; 1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 e92:	88 30       	cpi	r24, 0x08	; 8
 e94:	c8 f3       	brcs	.-14     	; 0xe88 <USB_Device_ProcessControlRequest+0x8>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 e96:	00 da       	rcall	.-3072   	; 0x298 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e98:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 e9c:	83 ff       	sbrs	r24, 3
 e9e:	30 c0       	rjmp	.+96     	; 0xf00 <USB_Device_ProcessControlRequest+0x80>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 ea0:	eb e3       	ldi	r30, 0x3B	; 59
 ea2:	f1 e0       	ldi	r31, 0x01	; 1
 ea4:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
 ea6:	81 81       	ldd	r24, Z+1	; 0x01
 ea8:	85 30       	cpi	r24, 0x05	; 5
 eaa:	d1 f0       	breq	.+52     	; 0xee0 <USB_Device_ProcessControlRequest+0x60>
 eac:	30 f4       	brcc	.+12     	; 0xeba <USB_Device_ProcessControlRequest+0x3a>
 eae:	81 30       	cpi	r24, 0x01	; 1
 eb0:	89 f0       	breq	.+34     	; 0xed4 <USB_Device_ProcessControlRequest+0x54>
 eb2:	50 f0       	brcs	.+20     	; 0xec8 <USB_Device_ProcessControlRequest+0x48>
 eb4:	83 30       	cpi	r24, 0x03	; 3
 eb6:	71 f0       	breq	.+28     	; 0xed4 <USB_Device_ProcessControlRequest+0x54>
 eb8:	23 c0       	rjmp	.+70     	; 0xf00 <USB_Device_ProcessControlRequest+0x80>
 eba:	88 30       	cpi	r24, 0x08	; 8
 ebc:	d1 f0       	breq	.+52     	; 0xef2 <USB_Device_ProcessControlRequest+0x72>
 ebe:	89 30       	cpi	r24, 0x09	; 9
 ec0:	e1 f0       	breq	.+56     	; 0xefa <USB_Device_ProcessControlRequest+0x7a>
 ec2:	86 30       	cpi	r24, 0x06	; 6
 ec4:	e9 f4       	brne	.+58     	; 0xf00 <USB_Device_ProcessControlRequest+0x80>
 ec6:	10 c0       	rjmp	.+32     	; 0xee8 <USB_Device_ProcessControlRequest+0x68>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ec8:	90 38       	cpi	r25, 0x80	; 128
 eca:	11 f0       	breq	.+4      	; 0xed0 <USB_Device_ProcessControlRequest+0x50>
 ecc:	92 38       	cpi	r25, 0x82	; 130
					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT)))
				{
					USB_Device_GetStatus();
 ece:	c1 f4       	brne	.+48     	; 0xf00 <USB_Device_ProcessControlRequest+0x80>
 ed0:	85 de       	rcall	.-758    	; 0xbdc <USB_Device_GetStatus>
 ed2:	16 c0       	rjmp	.+44     	; 0xf00 <USB_Device_ProcessControlRequest+0x80>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ed4:	99 23       	and	r25, r25
 ed6:	11 f0       	breq	.+4      	; 0xedc <USB_Device_ProcessControlRequest+0x5c>
 ed8:	92 30       	cpi	r25, 0x02	; 2
					(bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_ENDPOINT)))
				{
					USB_Device_ClearSetFeature();
 eda:	91 f4       	brne	.+36     	; 0xf00 <USB_Device_ProcessControlRequest+0x80>
 edc:	af de       	rcall	.-674    	; 0xc3c <USB_Device_ClearSetFeature>
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ede:	10 c0       	rjmp	.+32     	; 0xf00 <USB_Device_ProcessControlRequest+0x80>
 ee0:	91 11       	cpse	r25, r1
				  USB_Device_SetAddress();
 ee2:	0e c0       	rjmp	.+28     	; 0xf00 <USB_Device_ProcessControlRequest+0x80>
 ee4:	f7 de       	rcall	.-530    	; 0xcd4 <USB_Device_SetAddress>

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ee6:	0c c0       	rjmp	.+24     	; 0xf00 <USB_Device_ProcessControlRequest+0x80>
 ee8:	90 58       	subi	r25, 0x80	; 128
 eea:	92 30       	cpi	r25, 0x02	; 2
					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_INTERFACE)))
				{
					USB_Device_GetDescriptor();
 eec:	48 f4       	brcc	.+18     	; 0xf00 <USB_Device_ProcessControlRequest+0x80>
 eee:	74 df       	rcall	.-280    	; 0xdd8 <USB_Device_GetDescriptor>
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 ef0:	07 c0       	rjmp	.+14     	; 0xf00 <USB_Device_ProcessControlRequest+0x80>
				  USB_Device_GetConfiguration();
 ef2:	90 38       	cpi	r25, 0x80	; 128
 ef4:	29 f4       	brne	.+10     	; 0xf00 <USB_Device_ProcessControlRequest+0x80>
 ef6:	10 df       	rcall	.-480    	; 0xd18 <USB_Device_GetConfiguration>

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ef8:	03 c0       	rjmp	.+6      	; 0xf00 <USB_Device_ProcessControlRequest+0x80>
 efa:	91 11       	cpse	r25, r1
				  USB_Device_SetConfiguration();
 efc:	01 c0       	rjmp	.+2      	; 0xf00 <USB_Device_ProcessControlRequest+0x80>
 efe:	9c df       	rcall	.-200    	; 0xe38 <USB_Device_SetConfiguration>
 f00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 f04:	83 ff       	sbrs	r24, 3
 f06:	0a c0       	rjmp	.+20     	; 0xf1c <USB_Device_ProcessControlRequest+0x9c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 f08:	e8 ee       	ldi	r30, 0xE8	; 232
 f0a:	f0 e0       	ldi	r31, 0x00	; 0
 f0c:	80 81       	ld	r24, Z
 f0e:	87 7f       	andi	r24, 0xF7	; 247
 f10:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 f12:	eb ee       	ldi	r30, 0xEB	; 235
 f14:	f0 e0       	ldi	r31, 0x00	; 0
 f16:	80 81       	ld	r24, Z
 f18:	80 62       	ori	r24, 0x20	; 32
 f1a:	80 83       	st	Z, r24
 f1c:	08 95       	ret

00000f1e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 f1e:	08 95       	ret

00000f20 <USB_DeviceTask>:
	#endif
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
 f20:	cf 93       	push	r28
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 f22:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_DeviceState>
 f26:	88 23       	and	r24, r24
 f28:	99 f0       	breq	.+38     	; 0xf50 <USB_DeviceTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 f2a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 f2e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 f30:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 f34:	98 2f       	mov	r25, r24
 f36:	91 70       	andi	r25, 0x01	; 1
 f38:	80 fd       	sbrc	r24, 0
 f3a:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 f3c:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 f3e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 f42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 f46:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 f48:	9b df       	rcall	.-202    	; 0xe80 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 f4a:	cf 70       	andi	r28, 0x0F	; 15
 f4c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(PrevEndpoint);
}
 f50:	cf 91       	pop	r28
 f52:	08 95       	ret

00000f54 <USB_USBTask>:
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
 f54:	e5 cf       	rjmp	.-54     	; 0xf20 <USB_DeviceTask>
 f56:	08 95       	ret

00000f58 <_exit>:
 f58:	f8 94       	cli

00000f5a <__stop_program>:
 f5a:	ff cf       	rjmp	.-2      	; 0xf5a <__stop_program>
