
leobootloadercdcavr109dude.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  00007e90  00000f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .apitable_jumptable 00000018  00007fe0  00007fe0  0000100e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_signatures 00000008  00007ff8  00007ff8  00001026  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_trampolines 00000018  00007fa0  00007fa0  00000ff6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .text         00000e90  00007000  00007000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          0000000e  00800192  00800192  0000102e  2**0
                  ALLOC
  6 .noinit       00000002  008001a0  008001a0  0000102e  2**0
                  ALLOC
  7 .comment      00000030  00000000  00000000  0000102e  2**0
                  CONTENTS, READONLY
  8 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001060  2**2
                  CONTENTS, READONLY
  9 .debug_aranges 000002f0  00000000  00000000  000010a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00005787  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001a37  00000000  00000000  00006b17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000078a8  00000000  00000000  0000854e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000006dc  00000000  00000000  0000fdf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00017bf6  00000000  00000000  000104d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00002f32  00000000  00000000  000280ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003f0  00000000  00000000  0002b000  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00007683  00000000  00000000  0002b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .apitable_jumptable:

00007fe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
    7fe0:	df cf       	rjmp	.-66     	; 0x7fa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
    7fe2:	df cf       	rjmp	.-66     	; 0x7fa2 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
    7fe4:	df cf       	rjmp	.-66     	; 0x7fa4 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
    7fe6:	df cf       	rjmp	.-66     	; 0x7fa6 <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
    7fe8:	df cf       	rjmp	.-66     	; 0x7fa8 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
    7fea:	df cf       	rjmp	.-66     	; 0x7faa <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
    7fec:	df cf       	rjmp	.-66     	; 0x7fac <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
    7fee:	df cf       	rjmp	.-66     	; 0x7fae <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
    7ff0:	df cf       	rjmp	.-66     	; 0x7fb0 <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
    7ff2:	df cf       	rjmp	.-66     	; 0x7fb2 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
    7ff4:	df cf       	rjmp	.-66     	; 0x7fb4 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
    7ff6:	df cf       	rjmp	.-66     	; 0x7fb6 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

00007ff8 <BootloaderAPI_Signatures>:
    7ff8:	00 70       	andi	r16, 0x00	; 0
    7ffa:	00 00       	nop
    7ffc:	00 df       	rcall	.-512    	; 0x7dfe <USB_Device_ProcessControlRequest+0x1fc>
    7ffe:	fb dc       	rcall	.-1546   	; 0x79f6 <USB_ResetInterface+0xa>

Disassembly of section .apitable_trampolines:

00007fa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
    7fa0:	ea c8       	rjmp	.-3628   	; 0x7176 <BootloaderAPI_ErasePage>

00007fa2 <BootloaderAPI_WritePage_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
    7fa2:	fb c8       	rjmp	.-3594   	; 0x719a <BootloaderAPI_WritePage>

00007fa4 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
    7fa4:	0c c9       	rjmp	.-3560   	; 0x71be <BootloaderAPI_FillWord>

00007fa6 <BootloaderAPI_ReadSignature_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
    7fa6:	18 c9       	rjmp	.-3536   	; 0x71d8 <BootloaderAPI_ReadSignature>

00007fa8 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
    7fa8:	1d c9       	rjmp	.-3526   	; 0x71e4 <BootloaderAPI_ReadFuse>

00007faa <BootloaderAPI_ReadLock_Trampoline>:
    7faa:	22 c9       	rjmp	.-3516   	; 0x71f0 <BootloaderAPI_ReadLock>

00007fac <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
    7fac:	28 c9       	rjmp	.-3504   	; 0x71fe <BootloaderAPI_WriteLock>

00007fae <BootloaderAPI_UNUSED1>:
    7fae:	08 95       	ret

00007fb0 <BootloaderAPI_UNUSED2>:
	BootloaderAPI_WriteLock_Trampoline:
		jmp BootloaderAPI_WriteLock
    7fb0:	08 95       	ret

00007fb2 <BootloaderAPI_UNUSED3>:
    7fb2:	08 95       	ret

00007fb4 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_UNUSED1:
		ret
    7fb4:	08 95       	ret

00007fb6 <BootloaderAPI_UNUSED5>:
	BootloaderAPI_UNUSED2:
		ret
    7fb6:	08 95       	ret

Disassembly of section .text:

00007000 <__vectors>:
    7000:	55 c0       	rjmp	.+170    	; 0x70ac <__ctors_end>
    7002:	00 00       	nop
    7004:	b7 c0       	rjmp	.+366    	; 0x7174 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	b5 c0       	rjmp	.+362    	; 0x7174 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	b3 c0       	rjmp	.+358    	; 0x7174 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	b1 c0       	rjmp	.+354    	; 0x7174 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	af c0       	rjmp	.+350    	; 0x7174 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	ad c0       	rjmp	.+346    	; 0x7174 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	ab c0       	rjmp	.+342    	; 0x7174 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	a9 c0       	rjmp	.+338    	; 0x7174 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	a7 c0       	rjmp	.+334    	; 0x7174 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	39 c5       	rjmp	.+2674   	; 0x7a9c <__vector_10>
    702a:	00 00       	nop
    702c:	a3 c0       	rjmp	.+326    	; 0x7174 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	a1 c0       	rjmp	.+322    	; 0x7174 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	9f c0       	rjmp	.+318    	; 0x7174 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	9d c0       	rjmp	.+314    	; 0x7174 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	9b c0       	rjmp	.+310    	; 0x7174 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	99 c0       	rjmp	.+306    	; 0x7174 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	97 c0       	rjmp	.+302    	; 0x7174 <__bad_interrupt>
    7046:	00 00       	nop
    7048:	95 c0       	rjmp	.+298    	; 0x7174 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	93 c0       	rjmp	.+294    	; 0x7174 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	80 c3       	rjmp	.+1792   	; 0x7752 <__vector_20>
    7052:	00 00       	nop
    7054:	8f c0       	rjmp	.+286    	; 0x7174 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	8d c0       	rjmp	.+282    	; 0x7174 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	8b c0       	rjmp	.+278    	; 0x7174 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	89 c0       	rjmp	.+274    	; 0x7174 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	87 c0       	rjmp	.+270    	; 0x7174 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	85 c0       	rjmp	.+266    	; 0x7174 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	83 c0       	rjmp	.+262    	; 0x7174 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	81 c0       	rjmp	.+258    	; 0x7174 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	7f c0       	rjmp	.+254    	; 0x7174 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	7d c0       	rjmp	.+250    	; 0x7174 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	7b c0       	rjmp	.+246    	; 0x7174 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	79 c0       	rjmp	.+242    	; 0x7174 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	77 c0       	rjmp	.+238    	; 0x7174 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	75 c0       	rjmp	.+234    	; 0x7174 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	73 c0       	rjmp	.+230    	; 0x7174 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	71 c0       	rjmp	.+226    	; 0x7174 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	6f c0       	rjmp	.+222    	; 0x7174 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	6d c0       	rjmp	.+218    	; 0x7174 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	6b c0       	rjmp	.+214    	; 0x7174 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	69 c0       	rjmp	.+210    	; 0x7174 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	67 c0       	rjmp	.+206    	; 0x7174 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	65 c0       	rjmp	.+202    	; 0x7174 <__bad_interrupt>
	...

000070ac <__ctors_end>:
    70ac:	11 24       	eor	r1, r1
    70ae:	1f be       	out	0x3f, r1	; 63
    70b0:	cf ef       	ldi	r28, 0xFF	; 255
    70b2:	da e0       	ldi	r29, 0x0A	; 10
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	cd bf       	out	0x3d, r28	; 61

000070b8 <Application_Jump_Check>:

		/* Re-enable JTAG debugging */
		JTAG_ENABLE();
	#else
		/* Check if the device's BOOTRST fuse is set */
		if (boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS) & FUSE_BOOTRST)
    70b8:	e3 e0       	ldi	r30, 0x03	; 3
    70ba:	f0 e0       	ldi	r31, 0x00	; 0
    70bc:	89 e0       	ldi	r24, 0x09	; 9
    70be:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    70c2:	84 91       	lpm	r24, Z
    70c4:	8e 7f       	andi	r24, 0xFE	; 254
    70c6:	91 f0       	breq	.+36     	; 0x70ec <Application_Jump_Check+0x34>
		{
			/* If the reset source was not an external reset or the key is correct, clear it and jump to the application */
			if (!(MCUSR & (1 << EXTRF)) || (MagicBootKey == MAGIC_BOOT_KEY))
    70c8:	04 b6       	in	r0, 0x34	; 52
    70ca:	01 fe       	sbrs	r0, 1
    70cc:	0a c0       	rjmp	.+20     	; 0x70e2 <Application_Jump_Check+0x2a>
    70ce:	81 e0       	ldi	r24, 0x01	; 1
    70d0:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <__bss_end>
    70d4:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <__bss_end+0x1>
    70d8:	22 34       	cpi	r18, 0x42	; 66
    70da:	3c 4d       	sbci	r19, 0xDC	; 220
    70dc:	19 f0       	breq	.+6      	; 0x70e4 <Application_Jump_Check+0x2c>
    70de:	80 e0       	ldi	r24, 0x00	; 0
    70e0:	01 c0       	rjmp	.+2      	; 0x70e4 <Application_Jump_Check+0x2c>
			  JumpToApplication = true;
    70e2:	81 e0       	ldi	r24, 0x01	; 1

			/* Clear reset source */
			MCUSR &= ~(1 << EXTRF);
    70e4:	94 b7       	in	r25, 0x34	; 52
    70e6:	9d 7f       	andi	r25, 0xFD	; 253
    70e8:	94 bf       	out	0x34, r25	; 52
    70ea:	11 c0       	rjmp	.+34     	; 0x710e <Application_Jump_Check+0x56>
		}
		else
		{
			/* If the reset source was the bootloader and the key is correct, clear it and jump to the application;
			 * this can happen in the HWBE fuse is set, and the HBE pin is low during the watchdog reset */
			if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
    70ec:	04 b6       	in	r0, 0x34	; 52
    70ee:	03 fe       	sbrs	r0, 3
    70f0:	0a c0       	rjmp	.+20     	; 0x7106 <Application_Jump_Check+0x4e>
    70f2:	81 e0       	ldi	r24, 0x01	; 1
    70f4:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <__bss_end>
    70f8:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <__bss_end+0x1>
    70fc:	22 34       	cpi	r18, 0x42	; 66
    70fe:	3c 4d       	sbci	r19, 0xDC	; 220
    7100:	19 f0       	breq	.+6      	; 0x7108 <Application_Jump_Check+0x50>
    7102:	80 e0       	ldi	r24, 0x00	; 0
    7104:	01 c0       	rjmp	.+2      	; 0x7108 <Application_Jump_Check+0x50>
 *  start key has been loaded into \ref MagicBootKey. If the bootloader started via the watchdog and the key is valid,
 *  this will force the user application to start via a software jump.
 */
void Application_Jump_Check(void)
{
	bool JumpToApplication = false;
    7106:	80 e0       	ldi	r24, 0x00	; 0
			 * this can happen in the HWBE fuse is set, and the HBE pin is low during the watchdog reset */
			if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
				JumpToApplication = true;

			/* Clear reset source */
			MCUSR &= ~(1 << WDRF);
    7108:	94 b7       	in	r25, 0x34	; 52
    710a:	97 7f       	andi	r25, 0xF7	; 247
    710c:	94 bf       	out	0x34, r25	; 52
		}
	#endif

	/* Don't run the user application if the reset vector is blank (no app loaded) */
	bool ApplicationValid = (pgm_read_word_near(0) != 0xFFFF);
    710e:	20 e0       	ldi	r18, 0x00	; 0
    7110:	30 e0       	ldi	r19, 0x00	; 0
    7112:	f9 01       	movw	r30, r18
    7114:	45 91       	lpm	r20, Z+
    7116:	54 91       	lpm	r21, Z

	/* If a request has been made to jump to the user application, honor it */
	if (JumpToApplication && ApplicationValid)
    7118:	88 23       	and	r24, r24
    711a:	b9 f0       	breq	.+46     	; 0x714a <__do_copy_data>
    711c:	4f 3f       	cpi	r20, 0xFF	; 255
    711e:	5f 4f       	sbci	r21, 0xFF	; 255
    7120:	a1 f0       	breq	.+40     	; 0x714a <__do_copy_data>
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1 << WDRF);
    7122:	84 b7       	in	r24, 0x34	; 52
    7124:	87 7f       	andi	r24, 0xF7	; 247
    7126:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    7128:	0f b6       	in	r0, 0x3f	; 63
    712a:	f8 94       	cli
    712c:	a8 95       	wdr
    712e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    7132:	88 61       	ori	r24, 0x18	; 24
    7134:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    7138:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    713c:	0f be       	out	0x3f, r0	; 63
		wdt_disable();

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
    713e:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__bss_end+0x1>
    7142:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__bss_end>

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
    7146:	f9 01       	movw	r30, r18
    7148:	09 95       	icall

0000714a <__do_copy_data>:
    714a:	11 e0       	ldi	r17, 0x01	; 1
    714c:	a0 e0       	ldi	r26, 0x00	; 0
    714e:	b1 e0       	ldi	r27, 0x01	; 1
    7150:	e0 e9       	ldi	r30, 0x90	; 144
    7152:	fe e7       	ldi	r31, 0x7E	; 126
    7154:	02 c0       	rjmp	.+4      	; 0x715a <__do_copy_data+0x10>
    7156:	05 90       	lpm	r0, Z+
    7158:	0d 92       	st	X+, r0
    715a:	a2 39       	cpi	r26, 0x92	; 146
    715c:	b1 07       	cpc	r27, r17
    715e:	d9 f7       	brne	.-10     	; 0x7156 <__do_copy_data+0xc>

00007160 <__do_clear_bss>:
    7160:	21 e0       	ldi	r18, 0x01	; 1
    7162:	a2 e9       	ldi	r26, 0x92	; 146
    7164:	b1 e0       	ldi	r27, 0x01	; 1
    7166:	01 c0       	rjmp	.+2      	; 0x716a <.do_clear_bss_start>

00007168 <.do_clear_bss_loop>:
    7168:	1d 92       	st	X+, r1

0000716a <.do_clear_bss_start>:
    716a:	a0 3a       	cpi	r26, 0xA0	; 160
    716c:	b2 07       	cpc	r27, r18
    716e:	e1 f7       	brne	.-8      	; 0x7168 <.do_clear_bss_loop>
    7170:	82 d0       	rcall	.+260    	; 0x7276 <main>
    7172:	8c c6       	rjmp	.+3352   	; 0x7e8c <_exit>

00007174 <__bad_interrupt>:
    7174:	45 cf       	rjmp	.-374    	; 0x7000 <__vectors>

00007176 <BootloaderAPI_ErasePage>:

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	boot_page_erase_safe(Address);
    7176:	07 b6       	in	r0, 0x37	; 55
    7178:	00 fc       	sbrc	r0, 0
    717a:	fd cf       	rjmp	.-6      	; 0x7176 <BootloaderAPI_ErasePage>
    717c:	f9 99       	sbic	0x1f, 1	; 31
    717e:	fe cf       	rjmp	.-4      	; 0x717c <BootloaderAPI_ErasePage+0x6>
    7180:	23 e0       	ldi	r18, 0x03	; 3
    7182:	fb 01       	movw	r30, r22
    7184:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    7188:	e8 95       	spm
	boot_spm_busy_wait();
    718a:	07 b6       	in	r0, 0x37	; 55
    718c:	00 fc       	sbrc	r0, 0
    718e:	fd cf       	rjmp	.-6      	; 0x718a <BootloaderAPI_ErasePage+0x14>
	boot_rww_enable();
    7190:	81 e1       	ldi	r24, 0x11	; 17
    7192:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    7196:	e8 95       	spm
    7198:	08 95       	ret

0000719a <BootloaderAPI_WritePage>:
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	boot_page_write_safe(Address);
    719a:	07 b6       	in	r0, 0x37	; 55
    719c:	00 fc       	sbrc	r0, 0
    719e:	fd cf       	rjmp	.-6      	; 0x719a <BootloaderAPI_WritePage>
    71a0:	f9 99       	sbic	0x1f, 1	; 31
    71a2:	fe cf       	rjmp	.-4      	; 0x71a0 <BootloaderAPI_WritePage+0x6>
    71a4:	25 e0       	ldi	r18, 0x05	; 5
    71a6:	fb 01       	movw	r30, r22
    71a8:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    71ac:	e8 95       	spm
	boot_spm_busy_wait();
    71ae:	07 b6       	in	r0, 0x37	; 55
    71b0:	00 fc       	sbrc	r0, 0
    71b2:	fd cf       	rjmp	.-6      	; 0x71ae <BootloaderAPI_WritePage+0x14>
	boot_rww_enable();
    71b4:	81 e1       	ldi	r24, 0x11	; 17
    71b6:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    71ba:	e8 95       	spm
    71bc:	08 95       	ret

000071be <BootloaderAPI_FillWord>:
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
    71be:	07 b6       	in	r0, 0x37	; 55
    71c0:	00 fc       	sbrc	r0, 0
    71c2:	fd cf       	rjmp	.-6      	; 0x71be <BootloaderAPI_FillWord>
    71c4:	f9 99       	sbic	0x1f, 1	; 31
    71c6:	fe cf       	rjmp	.-4      	; 0x71c4 <BootloaderAPI_FillWord+0x6>
    71c8:	21 e0       	ldi	r18, 0x01	; 1
    71ca:	fb 01       	movw	r30, r22
    71cc:	0a 01       	movw	r0, r20
    71ce:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    71d2:	e8 95       	spm
    71d4:	11 24       	eor	r1, r1
    71d6:	08 95       	ret

000071d8 <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
    71d8:	21 e2       	ldi	r18, 0x21	; 33
    71da:	fc 01       	movw	r30, r24
    71dc:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    71e0:	84 91       	lpm	r24, Z
}
    71e2:	08 95       	ret

000071e4 <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
    71e4:	29 e0       	ldi	r18, 0x09	; 9
    71e6:	fc 01       	movw	r30, r24
    71e8:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    71ec:	84 91       	lpm	r24, Z
}
    71ee:	08 95       	ret

000071f0 <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
    71f0:	e1 e0       	ldi	r30, 0x01	; 1
    71f2:	f0 e0       	ldi	r31, 0x00	; 0
    71f4:	89 e0       	ldi	r24, 0x09	; 9
    71f6:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    71fa:	84 91       	lpm	r24, Z
}
    71fc:	08 95       	ret

000071fe <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
    71fe:	07 b6       	in	r0, 0x37	; 55
    7200:	00 fc       	sbrc	r0, 0
    7202:	fd cf       	rjmp	.-6      	; 0x71fe <BootloaderAPI_WriteLock>
    7204:	f9 99       	sbic	0x1f, 1	; 31
    7206:	fe cf       	rjmp	.-4      	; 0x7204 <BootloaderAPI_WriteLock+0x6>
    7208:	80 95       	com	r24
    720a:	99 e0       	ldi	r25, 0x09	; 9
    720c:	e1 e0       	ldi	r30, 0x01	; 1
    720e:	f0 e0       	ldi	r31, 0x00	; 0
    7210:	08 2e       	mov	r0, r24
    7212:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    7216:	e8 95       	spm
    7218:	08 95       	ret

0000721a <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    721a:	84 e0       	ldi	r24, 0x04	; 4
    721c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    7220:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
    7224:	85 fd       	sbrc	r24, 5
    7226:	0d c0       	rjmp	.+26     	; 0x7242 <FetchNextCommandByte+0x28>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7228:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    722c:	8b 77       	andi	r24, 0x7B	; 123
    722e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7232:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
    7236:	82 fd       	sbrc	r24, 2
    7238:	f3 cf       	rjmp	.-26     	; 0x7220 <FetchNextCommandByte+0x6>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    723a:	8e b3       	in	r24, 0x1e	; 30
    723c:	81 11       	cpse	r24, r1
    723e:	f9 cf       	rjmp	.-14     	; 0x7232 <FetchNextCommandByte+0x18>
    7240:	02 c0       	rjmp	.+4      	; 0x7246 <FetchNextCommandByte+0x2c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7242:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
    7246:	08 95       	ret

00007248 <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7248:	93 e0       	ldi	r25, 0x03	; 3
    724a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    724e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPADDR);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    7252:	95 ff       	sbrs	r25, 5
    7254:	03 c0       	rjmp	.+6      	; 0x725c <WriteNextResponseByte+0x14>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7256:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    725a:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    725c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7260:	9e 77       	andi	r25, 0x7E	; 126
    7262:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7266:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
    726a:	90 fd       	sbrc	r25, 0
    726c:	f4 cf       	rjmp	.-24     	; 0x7256 <WriteNextResponseByte+0xe>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    726e:	9e b3       	in	r25, 0x1e	; 30
    7270:	91 11       	cpse	r25, r1
    7272:	f9 cf       	rjmp	.-14     	; 0x7266 <WriteNextResponseByte+0x1e>
    7274:	08 95       	ret

00007276 <main>:

/** Configures all hardware required for the bootloader. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    7276:	84 b7       	in	r24, 0x34	; 52
    7278:	87 7f       	andi	r24, 0xF7	; 247
    727a:	84 bf       	out	0x34, r24	; 52
    727c:	0f b6       	in	r0, 0x3f	; 63
    727e:	f8 94       	cli
    7280:	a8 95       	wdr
    7282:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    7286:	88 61       	ori	r24, 0x18	; 24
    7288:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    728c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    7290:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    7292:	90 e0       	ldi	r25, 0x00	; 0
    7294:	80 e8       	ldi	r24, 0x80	; 128
    7296:	0f b6       	in	r0, 0x3f	; 63
    7298:	f8 94       	cli
    729a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
    729e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
    72a2:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    72a4:	c1 e0       	ldi	r28, 0x01	; 1
    72a6:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1 << IVSEL);
    72a8:	82 e0       	ldi	r24, 0x02	; 2
    72aa:	85 bf       	out	0x35, r24	; 53

	/* Initialize the USB and other board hardware drivers */
	USB_Init();
    72ac:	da d3       	rcall	.+1972   	; 0x7a62 <USB_Init>
	LEDs_Init();

	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
    72ae:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1B = ((1 << CS11) | (1 << CS10));
    72b2:	83 e0       	ldi	r24, 0x03	; 3
    72b4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
{
	/* Setup hardware required for the bootloader */
	SetupHardware();
    
    //modified by Dreg
    asm volatile ("sbi 0x10,0");
    72b8:	80 9a       	sbi	0x10, 0	; 16
    asm volatile ("cbi 0x11,0");
    72ba:	88 98       	cbi	0x11, 0	; 17
    asm volatile ("sbi 0x10,1");
    72bc:	81 9a       	sbi	0x10, 1	; 16
    asm volatile ("sbi 0x11,1");
    72be:	89 9a       	sbi	0x11, 1	; 17
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    72c0:	78 94       	sei
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    72c2:	f3 e0       	ldi	r31, 0x03	; 3
    72c4:	cf 2e       	mov	r12, r31

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == MEMORY_TYPE_FLASH)
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    72c6:	a5 e0       	ldi	r26, 0x05	; 5
    72c8:	ea 2e       	mov	r14, r26
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
	}
	else if (Command == AVR109_COMMAND_ReadLowFuses)
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    72ca:	21 2c       	mov	r2, r1
    72cc:	31 2c       	mov	r3, r1
	LEDs_SetAllLEDs(LEDS_LED1);

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	while (RunBootloader)
    72ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    72d2:	88 23       	and	r24, r24
    72d4:	09 f4       	brne	.+2      	; 0x72d8 <main+0x62>
    72d6:	21 c2       	rjmp	.+1090   	; 0x771a <main+0x4a4>
    72d8:	24 e0       	ldi	r18, 0x04	; 4
    72da:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    72de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
{
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
    72e2:	82 ff       	sbrs	r24, 2
	  return;

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
    72e4:	18 c2       	rjmp	.+1072   	; 0x7716 <main+0x4a0>
    72e6:	99 df       	rcall	.-206    	; 0x721a <FetchNextCommandByte>
    72e8:	18 2f       	mov	r17, r24

	if (Command == AVR109_COMMAND_ExitBootloader)
    72ea:	85 34       	cpi	r24, 0x45	; 69
    72ec:	19 f4       	brne	.+6      	; 0x72f4 <main+0x7e>
	{
		RunBootloader = false;
    72ee:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
    72f2:	07 c0       	rjmp	.+14     	; 0x7302 <main+0x8c>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if ((Command == AVR109_COMMAND_SetLED) || (Command == AVR109_COMMAND_ClearLED) ||
    72f4:	88 e8       	ldi	r24, 0x88	; 136
    72f6:	81 0f       	add	r24, r17
    72f8:	82 30       	cpi	r24, 0x02	; 2
    72fa:	10 f0       	brcs	.+4      	; 0x7300 <main+0x8a>
    72fc:	14 35       	cpi	r17, 0x54	; 84
	         (Command == AVR109_COMMAND_SelectDeviceType))
	{
		FetchNextCommandByte();
    72fe:	21 f4       	brne	.+8      	; 0x7308 <main+0x92>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
    7300:	8c df       	rcall	.-232    	; 0x721a <FetchNextCommandByte>
    7302:	8d e0       	ldi	r24, 0x0D	; 13
    7304:	a1 df       	rcall	.-190    	; 0x7248 <WriteNextResponseByte>
    7306:	df c1       	rjmp	.+958    	; 0x76c6 <main+0x450>
	}
	else if ((Command == AVR109_COMMAND_EnterProgrammingMode) || (Command == AVR109_COMMAND_LeaveProgrammingMode))
    7308:	10 35       	cpi	r17, 0x50	; 80
    730a:	d9 f3       	breq	.-10     	; 0x7302 <main+0x8c>
    730c:	1c 34       	cpi	r17, 0x4C	; 76
	{
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadPartCode)
    730e:	c9 f3       	breq	.-14     	; 0x7302 <main+0x8c>
    7310:	14 37       	cpi	r17, 0x74	; 116
	{
		/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
		WriteNextResponseByte(0x44);
    7312:	21 f4       	brne	.+8      	; 0x731c <main+0xa6>
    7314:	84 e4       	ldi	r24, 0x44	; 68
    7316:	98 df       	rcall	.-208    	; 0x7248 <WriteNextResponseByte>
		WriteNextResponseByte(0x00);
    7318:	80 e0       	ldi	r24, 0x00	; 0
    731a:	f4 cf       	rjmp	.-24     	; 0x7304 <main+0x8e>
	}
	else if (Command == AVR109_COMMAND_ReadAutoAddressIncrement)
    731c:	11 36       	cpi	r17, 0x61	; 97
	{
		/* Indicate auto-address increment is supported */
		WriteNextResponseByte('Y');
    731e:	11 f4       	brne	.+4      	; 0x7324 <main+0xae>
	}
	else if (Command == AVR109_COMMAND_SetCurrentAddress)
    7320:	89 e5       	ldi	r24, 0x59	; 89
    7322:	f0 cf       	rjmp	.-32     	; 0x7304 <main+0x8e>
	{
		/* Set the current address to that given by the host (translate 16-bit word address to byte address) */
		CurrAddress   = (FetchNextCommandByte() << 9);
    7324:	11 34       	cpi	r17, 0x41	; 65
    7326:	91 f4       	brne	.+36     	; 0x734c <main+0xd6>
    7328:	78 df       	rcall	.-272    	; 0x721a <FetchNextCommandByte>
		CurrAddress  |= (FetchNextCommandByte() << 1);
    732a:	c8 2f       	mov	r28, r24
    732c:	76 df       	rcall	.-276    	; 0x721a <FetchNextCommandByte>
    732e:	2c 2f       	mov	r18, r28
    7330:	30 e0       	ldi	r19, 0x00	; 0
    7332:	32 2f       	mov	r19, r18
    7334:	22 27       	eor	r18, r18
    7336:	33 0f       	add	r19, r19
    7338:	90 e0       	ldi	r25, 0x00	; 0
    733a:	88 0f       	add	r24, r24
    733c:	99 1f       	adc	r25, r25
    733e:	82 2b       	or	r24, r18
    7340:	93 2b       	or	r25, r19
    7342:	09 2e       	mov	r0, r25
    7344:	00 0c       	add	r0, r0
    7346:	aa 0b       	sbc	r26, r26
    7348:	bb 0b       	sbc	r27, r27
    734a:	91 c1       	rjmp	.+802    	; 0x766e <main+0x3f8>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderInterface)
    734c:	10 37       	cpi	r17, 0x70	; 112
    734e:	11 f4       	brne	.+4      	; 0x7354 <main+0xde>
	{
		/* Indicate serial programmer back to the host */
		WriteNextResponseByte('S');
    7350:	83 e5       	ldi	r24, 0x53	; 83
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderIdentifier)
    7352:	d8 cf       	rjmp	.-80     	; 0x7304 <main+0x8e>
    7354:	13 35       	cpi	r17, 0x53	; 83
    7356:	49 f4       	brne	.+18     	; 0x736a <main+0xf4>
    7358:	c8 e0       	ldi	r28, 0x08	; 8
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    735a:	d1 e0       	ldi	r29, 0x01	; 1
    735c:	89 91       	ld	r24, Y+
    735e:	74 df       	rcall	.-280    	; 0x7248 <WriteNextResponseByte>
		WriteNextResponseByte('S');
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderIdentifier)
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    7360:	41 e0       	ldi	r20, 0x01	; 1
    7362:	cf 30       	cpi	r28, 0x0F	; 15
    7364:	d4 07       	cpc	r29, r20
    7366:	d1 f7       	brne	.-12     	; 0x735c <main+0xe6>
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderSWVersion)
    7368:	ae c1       	rjmp	.+860    	; 0x76c6 <main+0x450>
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    736a:	16 35       	cpi	r17, 0x56	; 86
    736c:	21 f4       	brne	.+8      	; 0x7376 <main+0x100>
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    736e:	81 e3       	ldi	r24, 0x31	; 49
    7370:	6b df       	rcall	.-298    	; 0x7248 <WriteNextResponseByte>
	}
	else if (Command == AVR109_COMMAND_ReadSignature)
    7372:	80 e3       	ldi	r24, 0x30	; 48
    7374:	c7 cf       	rjmp	.-114    	; 0x7304 <main+0x8e>
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
    7376:	13 37       	cpi	r17, 0x73	; 115
    7378:	31 f4       	brne	.+12     	; 0x7386 <main+0x110>
    737a:	87 e8       	ldi	r24, 0x87	; 135
		WriteNextResponseByte(AVR_SIGNATURE_2);
    737c:	65 df       	rcall	.-310    	; 0x7248 <WriteNextResponseByte>
    737e:	85 e9       	ldi	r24, 0x95	; 149
    7380:	63 df       	rcall	.-314    	; 0x7248 <WriteNextResponseByte>
		WriteNextResponseByte(AVR_SIGNATURE_1);
    7382:	8e e1       	ldi	r24, 0x1E	; 30
    7384:	bf cf       	rjmp	.-130    	; 0x7304 <main+0x8e>
	}
	else if (Command == AVR109_COMMAND_EraseFLASH)
    7386:	15 36       	cpi	r17, 0x65	; 101
    7388:	a9 f4       	brne	.+42     	; 0x73b4 <main+0x13e>
    738a:	e0 e0       	ldi	r30, 0x00	; 0
    738c:	f0 e0       	ldi	r31, 0x00	; 0
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    738e:	c0 92 57 00 	sts	0x0057, r12	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    7392:	e8 95       	spm
			boot_spm_busy_wait();
    7394:	07 b6       	in	r0, 0x37	; 55
    7396:	00 fc       	sbrc	r0, 0
    7398:	fd cf       	rjmp	.-6      	; 0x7394 <main+0x11e>
			boot_page_write(CurrFlashAddress);
    739a:	e0 92 57 00 	sts	0x0057, r14	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    739e:	e8 95       	spm
			boot_spm_busy_wait();
    73a0:	07 b6       	in	r0, 0x37	; 55
    73a2:	00 fc       	sbrc	r0, 0
    73a4:	fd cf       	rjmp	.-6      	; 0x73a0 <main+0x12a>
    73a6:	e0 58       	subi	r30, 0x80	; 128
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == AVR109_COMMAND_EraseFLASH)
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
    73a8:	ff 4f       	sbci	r31, 0xFF	; 255
    73aa:	e1 15       	cp	r30, r1
    73ac:	50 e7       	ldi	r21, 0x70	; 112
    73ae:	f5 07       	cpc	r31, r21
    73b0:	71 f7       	brne	.-36     	; 0x738e <main+0x118>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
	else if (Command == AVR109_COMMAND_WriteLockbits)
    73b2:	a7 cf       	rjmp	.-178    	; 0x7302 <main+0x8c>
    73b4:	1c 36       	cpi	r17, 0x6C	; 108
	{
		/* Set the lock bits to those given by the host */
		boot_lock_bits_set(FetchNextCommandByte());
    73b6:	51 f4       	brne	.+20     	; 0x73cc <main+0x156>
    73b8:	30 df       	rcall	.-416    	; 0x721a <FetchNextCommandByte>
    73ba:	80 95       	com	r24
    73bc:	99 e0       	ldi	r25, 0x09	; 9
    73be:	e1 e0       	ldi	r30, 0x01	; 1
    73c0:	f0 e0       	ldi	r31, 0x00	; 0
    73c2:	08 2e       	mov	r0, r24
    73c4:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    73c8:	e8 95       	spm
    73ca:	9b cf       	rjmp	.-202    	; 0x7302 <main+0x8c>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == AVR109_COMMAND_ReadLockbits)
    73cc:	12 37       	cpi	r17, 0x72	; 114
    73ce:	21 f4       	brne	.+8      	; 0x73d8 <main+0x162>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    73d0:	89 e0       	ldi	r24, 0x09	; 9
    73d2:	e1 e0       	ldi	r30, 0x01	; 1
    73d4:	f0 e0       	ldi	r31, 0x00	; 0
    73d6:	10 c0       	rjmp	.+32     	; 0x73f8 <main+0x182>
	}
	else if (Command == AVR109_COMMAND_ReadLowFuses)
    73d8:	16 34       	cpi	r17, 0x46	; 70
    73da:	19 f4       	brne	.+6      	; 0x73e2 <main+0x16c>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    73dc:	89 e0       	ldi	r24, 0x09	; 9
    73de:	f1 01       	movw	r30, r2
    73e0:	0b c0       	rjmp	.+22     	; 0x73f8 <main+0x182>
	}
	else if (Command == AVR109_COMMAND_ReadHighFuses)
    73e2:	1e 34       	cpi	r17, 0x4E	; 78
    73e4:	21 f4       	brne	.+8      	; 0x73ee <main+0x178>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    73e6:	89 e0       	ldi	r24, 0x09	; 9
    73e8:	e3 e0       	ldi	r30, 0x03	; 3
    73ea:	f0 e0       	ldi	r31, 0x00	; 0
    73ec:	05 c0       	rjmp	.+10     	; 0x73f8 <main+0x182>
	}
	else if (Command == AVR109_COMMAND_ReadExtendedFuses)
    73ee:	11 35       	cpi	r17, 0x51	; 81
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    73f0:	39 f4       	brne	.+14     	; 0x7400 <main+0x18a>
    73f2:	89 e0       	ldi	r24, 0x09	; 9
    73f4:	e2 e0       	ldi	r30, 0x02	; 2
    73f6:	f0 e0       	ldi	r31, 0x00	; 0
    73f8:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == AVR109_COMMAND_GetBlockWriteSupport)
    73fc:	84 91       	lpm	r24, Z
	{
		WriteNextResponseByte('Y');
    73fe:	82 cf       	rjmp	.-252    	; 0x7304 <main+0x8e>
    7400:	12 36       	cpi	r17, 0x62	; 98
    7402:	31 f4       	brne	.+12     	; 0x7410 <main+0x19a>

		/* Send block size to the host */
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
    7404:	89 e5       	ldi	r24, 0x59	; 89
    7406:	20 df       	rcall	.-448    	; 0x7248 <WriteNextResponseByte>
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    7408:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if ((Command == AVR109_COMMAND_BlockWrite) || (Command == AVR109_COMMAND_BlockRead))
    740a:	1e df       	rcall	.-452    	; 0x7248 <WriteNextResponseByte>
    740c:	80 e8       	ldi	r24, 0x80	; 128
    740e:	7a cf       	rjmp	.-268    	; 0x7304 <main+0x8e>
    7410:	12 34       	cpi	r17, 0x42	; 66
    7412:	19 f0       	breq	.+6      	; 0x741a <main+0x1a4>
	char     MemoryType;

	uint8_t  HighByte = 0;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    7414:	17 36       	cpi	r17, 0x67	; 103
    7416:	09 f0       	breq	.+2      	; 0x741a <main+0x1a4>
    7418:	c3 c0       	rjmp	.+390    	; 0x75a0 <main+0x32a>
    741a:	ff de       	rcall	.-514    	; 0x721a <FetchNextCommandByte>
    741c:	c8 2f       	mov	r28, r24
    741e:	d0 e0       	ldi	r29, 0x00	; 0
	BlockSize |=  FetchNextCommandByte();
    7420:	dc 2f       	mov	r29, r28
    7422:	cc 27       	eor	r28, r28
    7424:	fa de       	rcall	.-524    	; 0x721a <FetchNextCommandByte>

	MemoryType =  FetchNextCommandByte();
    7426:	c8 2b       	or	r28, r24
    7428:	f8 de       	rcall	.-528    	; 0x721a <FetchNextCommandByte>
    742a:	08 2f       	mov	r16, r24

	if ((MemoryType != MEMORY_TYPE_FLASH) && (MemoryType != MEMORY_TYPE_EEPROM))
    742c:	8b eb       	ldi	r24, 0xBB	; 187
    742e:	80 0f       	add	r24, r16
    7430:	82 30       	cpi	r24, 0x02	; 2
    7432:	10 f0       	brcs	.+4      	; 0x7438 <main+0x1c2>
	{
		/* Send error byte back to the host */
		WriteNextResponseByte('?');
    7434:	8f e3       	ldi	r24, 0x3F	; 63
    7436:	66 cf       	rjmp	.-308    	; 0x7304 <main+0x8e>

		return;
	}

	/* Check if command is to read a memory block */
	if (Command == AVR109_COMMAND_BlockRead)
    7438:	17 36       	cpi	r17, 0x67	; 103
    743a:	09 f0       	breq	.+2      	; 0x743e <main+0x1c8>
    743c:	41 c0       	rjmp	.+130    	; 0x74c0 <main+0x24a>
	{
		/* Re-enable RWW section */
		boot_rww_enable();
    743e:	f1 e1       	ldi	r31, 0x11	; 17
    7440:	f0 93 57 00 	sts	0x0057, r31	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    7444:	e8 95       	spm
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	uint8_t  HighByte = 0;
    7446:	f1 2c       	mov	r15, r1
	if (Command == AVR109_COMMAND_BlockRead)
	{
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
    7448:	20 97       	sbiw	r28, 0x00	; 0
    744a:	09 f4       	brne	.+2      	; 0x744e <main+0x1d8>
    744c:	3c c1       	rjmp	.+632    	; 0x76c6 <main+0x450>
    744e:	80 90 92 01 	lds	r8, 0x0192	; 0x800192 <__data_end>
    7452:	90 90 93 01 	lds	r9, 0x0193	; 0x800193 <__data_end+0x1>
    7456:	a0 90 94 01 	lds	r10, 0x0194	; 0x800194 <__data_end+0x2>
    745a:	b0 90 95 01 	lds	r11, 0x0195	; 0x800195 <__data_end+0x3>
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
    745e:	06 34       	cpi	r16, 0x46	; 70
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    7460:	c1 f4       	brne	.+48     	; 0x7492 <main+0x21c>
    7462:	ef 2d       	mov	r30, r15
    7464:	f0 e0       	ldi	r31, 0x00	; 0
    7466:	e8 29       	or	r30, r8
    7468:	f9 29       	or	r31, r9
    746a:	84 91       	lpm	r24, Z
    746c:	ed de       	rcall	.-550    	; 0x7248 <WriteNextResponseByte>
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
    746e:	ff 20       	and	r15, r15
    7470:	69 f0       	breq	.+26     	; 0x748c <main+0x216>
				  CurrAddress += 2;
    7472:	22 e0       	ldi	r18, 0x02	; 2
    7474:	82 0e       	add	r8, r18
    7476:	91 1c       	adc	r9, r1
    7478:	a1 1c       	adc	r10, r1
    747a:	b1 1c       	adc	r11, r1
    747c:	80 92 92 01 	sts	0x0192, r8	; 0x800192 <__data_end>
    7480:	90 92 93 01 	sts	0x0193, r9	; 0x800193 <__data_end+0x1>
    7484:	a0 92 94 01 	sts	0x0194, r10	; 0x800194 <__data_end+0x2>
    7488:	b0 92 95 01 	sts	0x0195, r11	; 0x800195 <__data_end+0x3>
    748c:	41 e0       	ldi	r20, 0x01	; 1
				HighByte = !HighByte;
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    748e:	f4 26       	eor	r15, r20
    7490:	15 c0       	rjmp	.+42     	; 0x74bc <main+0x246>
    7492:	d5 01       	movw	r26, r10
    7494:	c4 01       	movw	r24, r8
    7496:	b6 95       	lsr	r27
    7498:	a7 95       	ror	r26
    749a:	97 95       	ror	r25
    749c:	87 95       	ror	r24
    749e:	dc d4       	rcall	.+2488   	; 0x7e58 <eeprom_read_byte>
    74a0:	d3 de       	rcall	.-602    	; 0x7248 <WriteNextResponseByte>

				/* Increment the address counter after use */
				CurrAddress += 2;
    74a2:	52 e0       	ldi	r21, 0x02	; 2
    74a4:	85 0e       	add	r8, r21
    74a6:	91 1c       	adc	r9, r1
    74a8:	a1 1c       	adc	r10, r1
    74aa:	b1 1c       	adc	r11, r1
    74ac:	80 92 92 01 	sts	0x0192, r8	; 0x800192 <__data_end>
    74b0:	90 92 93 01 	sts	0x0193, r9	; 0x800193 <__data_end+0x1>
    74b4:	a0 92 94 01 	sts	0x0194, r10	; 0x800194 <__data_end+0x2>
    74b8:	b0 92 95 01 	sts	0x0195, r11	; 0x800195 <__data_end+0x3>
    74bc:	21 97       	sbiw	r28, 0x01	; 1
    74be:	c4 cf       	rjmp	.-120    	; 0x7448 <main+0x1d2>
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
    74c0:	80 90 92 01 	lds	r8, 0x0192	; 0x800192 <__data_end>
    74c4:	90 90 93 01 	lds	r9, 0x0193	; 0x800193 <__data_end+0x1>
    74c8:	a0 90 94 01 	lds	r10, 0x0194	; 0x800194 <__data_end+0x2>
    74cc:	b0 90 95 01 	lds	r11, 0x0195	; 0x800195 <__data_end+0x3>

		if (MemoryType == MEMORY_TYPE_FLASH)
    74d0:	06 34       	cpi	r16, 0x46	; 70
    74d2:	39 f4       	brne	.+14     	; 0x74e2 <main+0x26c>
		{
			boot_page_erase(PageStartAddress);
    74d4:	f4 01       	movw	r30, r8
    74d6:	c0 92 57 00 	sts	0x0057, r12	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    74da:	e8 95       	spm
			boot_spm_busy_wait();
    74dc:	07 b6       	in	r0, 0x37	; 55
    74de:	00 fc       	sbrc	r0, 0
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == MEMORY_TYPE_FLASH)
    74e0:	fd cf       	rjmp	.-6      	; 0x74dc <main+0x266>
    74e2:	d1 2c       	mov	r13, r1
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
    74e4:	f1 2c       	mov	r15, r1
    74e6:	20 97       	sbiw	r28, 0x00	; 0
    74e8:	09 f4       	brne	.+2      	; 0x74ec <main+0x276>
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
    74ea:	4f c0       	rjmp	.+158    	; 0x758a <main+0x314>
    74ec:	06 34       	cpi	r16, 0x46	; 70
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
    74ee:	49 f5       	brne	.+82     	; 0x7542 <main+0x2cc>
    74f0:	ff 20       	and	r15, r15
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    74f2:	11 f1       	breq	.+68     	; 0x7538 <main+0x2c2>
    74f4:	40 90 92 01 	lds	r4, 0x0192	; 0x800192 <__data_end>
    74f8:	50 90 93 01 	lds	r5, 0x0193	; 0x800193 <__data_end+0x1>
    74fc:	60 90 94 01 	lds	r6, 0x0194	; 0x800194 <__data_end+0x2>
    7500:	70 90 95 01 	lds	r7, 0x0195	; 0x800195 <__data_end+0x3>
    7504:	8a de       	rcall	.-748    	; 0x721a <FetchNextCommandByte>
    7506:	2d 2d       	mov	r18, r13
    7508:	30 e0       	ldi	r19, 0x00	; 0
    750a:	a9 01       	movw	r20, r18
    750c:	58 2b       	or	r21, r24
    750e:	21 e0       	ldi	r18, 0x01	; 1
    7510:	f2 01       	movw	r30, r4
    7512:	0a 01       	movw	r0, r20
    7514:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>

					/* Increment the address counter after use */
					CurrAddress += 2;
    7518:	e8 95       	spm
    751a:	11 24       	eor	r1, r1
    751c:	42 e0       	ldi	r20, 0x02	; 2
    751e:	44 0e       	add	r4, r20
    7520:	51 1c       	adc	r5, r1
    7522:	61 1c       	adc	r6, r1
    7524:	71 1c       	adc	r7, r1
    7526:	40 92 92 01 	sts	0x0192, r4	; 0x800192 <__data_end>
    752a:	50 92 93 01 	sts	0x0193, r5	; 0x800193 <__data_end+0x1>
    752e:	60 92 94 01 	sts	0x0194, r6	; 0x800194 <__data_end+0x2>
				}
				else
				{
					LowByte = FetchNextCommandByte();
    7532:	70 92 95 01 	sts	0x0195, r7	; 0x800195 <__data_end+0x3>
    7536:	02 c0       	rjmp	.+4      	; 0x753c <main+0x2c6>
    7538:	70 de       	rcall	.-800    	; 0x721a <FetchNextCommandByte>
    753a:	d8 2e       	mov	r13, r24
    753c:	51 e0       	ldi	r21, 0x01	; 1
				HighByte = !HighByte;
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_update_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    753e:	f5 26       	eor	r15, r21
    7540:	22 c0       	rjmp	.+68     	; 0x7586 <main+0x310>
    7542:	6b de       	rcall	.-810    	; 0x721a <FetchNextCommandByte>
    7544:	68 2f       	mov	r22, r24
    7546:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
    754a:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
    754e:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <__data_end+0x2>
    7552:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <__data_end+0x3>
    7556:	b6 95       	lsr	r27
    7558:	a7 95       	ror	r26
    755a:	97 95       	ror	r25
    755c:	87 95       	ror	r24
    755e:	84 d4       	rcall	.+2312   	; 0x7e68 <eeprom_update_byte>

				/* Increment the address counter after use */
				CurrAddress += 2;
    7560:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
    7564:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
    7568:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <__data_end+0x2>
    756c:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <__data_end+0x3>
    7570:	02 96       	adiw	r24, 0x02	; 2
    7572:	a1 1d       	adc	r26, r1
    7574:	b1 1d       	adc	r27, r1
    7576:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
    757a:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
    757e:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <__data_end+0x2>
    7582:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <__data_end+0x3>
    7586:	21 97       	sbiw	r28, 0x01	; 1
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == MEMORY_TYPE_FLASH)
    7588:	ae cf       	rjmp	.-164    	; 0x74e6 <main+0x270>
    758a:	06 34       	cpi	r16, 0x46	; 70
    758c:	09 f0       	breq	.+2      	; 0x7590 <main+0x31a>
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    758e:	b9 ce       	rjmp	.-654    	; 0x7302 <main+0x8c>
    7590:	f4 01       	movw	r30, r8
    7592:	e0 92 57 00 	sts	0x0057, r14	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    7596:	e8 95       	spm
    7598:	07 b6       	in	r0, 0x37	; 55
    759a:	00 fc       	sbrc	r0, 0
    759c:	fd cf       	rjmp	.-6      	; 0x7598 <main+0x322>
		/* Delegate the block write/read to a separate function for clarity */
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == AVR109_COMMAND_FillFlashPageWordHigh)
    759e:	b1 ce       	rjmp	.-670    	; 0x7302 <main+0x8c>
    75a0:	13 34       	cpi	r17, 0x43	; 67
	{
		/* Write the high byte to the current flash page */
		boot_page_fill(CurrAddress, FetchNextCommandByte());
    75a2:	71 f4       	brne	.+28     	; 0x75c0 <main+0x34a>
    75a4:	c0 91 92 01 	lds	r28, 0x0192	; 0x800192 <__data_end>
    75a8:	d0 91 93 01 	lds	r29, 0x0193	; 0x800193 <__data_end+0x1>
    75ac:	36 de       	rcall	.-916    	; 0x721a <FetchNextCommandByte>
    75ae:	90 e0       	ldi	r25, 0x00	; 0
    75b0:	21 e0       	ldi	r18, 0x01	; 1
    75b2:	fe 01       	movw	r30, r28
    75b4:	0c 01       	movw	r0, r24
    75b6:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    75ba:	e8 95       	spm
    75bc:	11 24       	eor	r1, r1

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_FillFlashPageWordLow)
    75be:	a1 ce       	rjmp	.-702    	; 0x7302 <main+0x8c>
    75c0:	13 36       	cpi	r17, 0x63	; 99
	{
		/* Write the low byte to the current flash page */
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
    75c2:	01 f5       	brne	.+64     	; 0x7604 <main+0x38e>
    75c4:	80 90 92 01 	lds	r8, 0x0192	; 0x800192 <__data_end>
    75c8:	90 90 93 01 	lds	r9, 0x0193	; 0x800193 <__data_end+0x1>
    75cc:	a0 90 94 01 	lds	r10, 0x0194	; 0x800194 <__data_end+0x2>
    75d0:	b0 90 95 01 	lds	r11, 0x0195	; 0x800195 <__data_end+0x3>
    75d4:	22 de       	rcall	.-956    	; 0x721a <FetchNextCommandByte>
    75d6:	f4 01       	movw	r30, r8
    75d8:	e1 60       	ori	r30, 0x01	; 1
    75da:	90 e0       	ldi	r25, 0x00	; 0
    75dc:	41 e0       	ldi	r20, 0x01	; 1
    75de:	0c 01       	movw	r0, r24
    75e0:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    75e4:	e8 95       	spm
    75e6:	11 24       	eor	r1, r1

		/* Increment the address */
		CurrAddress += 2;
    75e8:	52 e0       	ldi	r21, 0x02	; 2
    75ea:	85 0e       	add	r8, r21
    75ec:	91 1c       	adc	r9, r1
    75ee:	a1 1c       	adc	r10, r1
    75f0:	b1 1c       	adc	r11, r1
    75f2:	80 92 92 01 	sts	0x0192, r8	; 0x800192 <__data_end>
    75f6:	90 92 93 01 	sts	0x0193, r9	; 0x800193 <__data_end+0x1>
    75fa:	a0 92 94 01 	sts	0x0194, r10	; 0x800194 <__data_end+0x2>
    75fe:	b0 92 95 01 	sts	0x0195, r11	; 0x800195 <__data_end+0x3>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_WriteFlashPage)
    7602:	7f ce       	rjmp	.-770    	; 0x7302 <main+0x8c>
	{
		/* Commit the flash page to memory */
		boot_page_write(CurrAddress);
    7604:	1d 36       	cpi	r17, 0x6D	; 109
    7606:	59 f4       	brne	.+22     	; 0x761e <main+0x3a8>
    7608:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <__data_end>
    760c:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <__data_end+0x1>
    7610:	e0 92 57 00 	sts	0x0057, r14	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>

		/* Wait until write operation has completed */
		boot_spm_busy_wait();
    7614:	e8 95       	spm
    7616:	07 b6       	in	r0, 0x37	; 55
    7618:	00 fc       	sbrc	r0, 0

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadFLASHWord)
    761a:	fd cf       	rjmp	.-6      	; 0x7616 <main+0x3a0>
    761c:	72 ce       	rjmp	.-796    	; 0x7302 <main+0x8c>
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
    761e:	12 35       	cpi	r17, 0x52	; 82
    7620:	51 f4       	brne	.+20     	; 0x7636 <main+0x3c0>
    7622:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <__data_end>
    7626:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <__data_end+0x1>
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
    762a:	c5 91       	lpm	r28, Z+
    762c:	d4 91       	lpm	r29, Z
		WriteNextResponseByte(ProgramWord & 0xFF);
    762e:	8d 2f       	mov	r24, r29
    7630:	0b de       	rcall	.-1002   	; 0x7248 <WriteNextResponseByte>
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == AVR109_COMMAND_WriteEEPROM)
    7632:	8c 2f       	mov	r24, r28
    7634:	67 ce       	rjmp	.-818    	; 0x7304 <main+0x8e>
	{
		/* Read the byte from the endpoint and write it to the EEPROM */
		eeprom_update_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    7636:	14 34       	cpi	r17, 0x44	; 68
    7638:	19 f5       	brne	.+70     	; 0x7680 <main+0x40a>
    763a:	ef dd       	rcall	.-1058   	; 0x721a <FetchNextCommandByte>
    763c:	68 2f       	mov	r22, r24
    763e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
    7642:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
    7646:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <__data_end+0x2>
    764a:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <__data_end+0x3>
    764e:	b6 95       	lsr	r27
    7650:	a7 95       	ror	r26
    7652:	97 95       	ror	r25
    7654:	87 95       	ror	r24
    7656:	08 d4       	rcall	.+2064   	; 0x7e68 <eeprom_update_byte>

		/* Increment the address after use */
		CurrAddress += 2;
    7658:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
    765c:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
    7660:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <__data_end+0x2>
    7664:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <__data_end+0x3>
    7668:	02 96       	adiw	r24, 0x02	; 2
    766a:	a1 1d       	adc	r26, r1
    766c:	b1 1d       	adc	r27, r1
    766e:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
    7672:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
    7676:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <__data_end+0x2>
    767a:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <__data_end+0x3>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadEEPROM)
    767e:	41 ce       	rjmp	.-894    	; 0x7302 <main+0x8c>
	{
		/* Read the EEPROM byte and write it to the endpoint */
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
    7680:	14 36       	cpi	r17, 0x64	; 100
    7682:	f1 f4       	brne	.+60     	; 0x76c0 <main+0x44a>
    7684:	80 90 92 01 	lds	r8, 0x0192	; 0x800192 <__data_end>
    7688:	90 90 93 01 	lds	r9, 0x0193	; 0x800193 <__data_end+0x1>
    768c:	a0 90 94 01 	lds	r10, 0x0194	; 0x800194 <__data_end+0x2>
    7690:	b0 90 95 01 	lds	r11, 0x0195	; 0x800195 <__data_end+0x3>
    7694:	d5 01       	movw	r26, r10
    7696:	c4 01       	movw	r24, r8
    7698:	b6 95       	lsr	r27
    769a:	a7 95       	ror	r26
    769c:	97 95       	ror	r25
    769e:	87 95       	ror	r24
    76a0:	db d3       	rcall	.+1974   	; 0x7e58 <eeprom_read_byte>
    76a2:	d2 dd       	rcall	.-1116   	; 0x7248 <WriteNextResponseByte>

		/* Increment the address after use */
		CurrAddress += 2;
    76a4:	82 e0       	ldi	r24, 0x02	; 2
    76a6:	88 0e       	add	r8, r24
    76a8:	91 1c       	adc	r9, r1
    76aa:	a1 1c       	adc	r10, r1
    76ac:	b1 1c       	adc	r11, r1
    76ae:	80 92 92 01 	sts	0x0192, r8	; 0x800192 <__data_end>
    76b2:	90 92 93 01 	sts	0x0193, r9	; 0x800193 <__data_end+0x1>
    76b6:	a0 92 94 01 	sts	0x0194, r10	; 0x800194 <__data_end+0x2>
    76ba:	b0 92 95 01 	sts	0x0195, r11	; 0x800195 <__data_end+0x3>
    76be:	03 c0       	rjmp	.+6      	; 0x76c6 <main+0x450>
	}
	#endif
	else if (Command != AVR109_COMMAND_Sync)
    76c0:	1b 31       	cpi	r17, 0x1B	; 27
    76c2:	09 f0       	breq	.+2      	; 0x76c6 <main+0x450>
    76c4:	b7 ce       	rjmp	.-658    	; 0x7434 <main+0x1be>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    76c6:	c0 92 e9 00 	sts	0x00E9, r12	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    76ca:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    76ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    76d2:	8e 77       	andi	r24, 0x7E	; 126
    76d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
    76d8:	95 fd       	sbrc	r25, 5
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    76da:	11 c0       	rjmp	.+34     	; 0x76fe <main+0x488>
    76dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	{
		while (!(Endpoint_IsINReady()))
    76e0:	80 fd       	sbrc	r24, 0
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    76e2:	04 c0       	rjmp	.+8      	; 0x76ec <main+0x476>
    76e4:	8e b3       	in	r24, 0x1e	; 30
    76e6:	81 11       	cpse	r24, r1
    76e8:	f9 cf       	rjmp	.-14     	; 0x76dc <main+0x466>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    76ea:	15 c0       	rjmp	.+42     	; 0x7716 <main+0x4a0>
    76ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    76f0:	8e 77       	andi	r24, 0x7E	; 126
    76f2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    76f6:	03 c0       	rjmp	.+6      	; 0x76fe <main+0x488>
    76f8:	8e b3       	in	r24, 0x1e	; 30
    76fa:	88 23       	and	r24, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    76fc:	61 f0       	breq	.+24     	; 0x7716 <main+0x4a0>
    76fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
    7702:	80 ff       	sbrs	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7704:	f9 cf       	rjmp	.-14     	; 0x76f8 <main+0x482>
    7706:	94 e0       	ldi	r25, 0x04	; 4
    7708:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    770c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7710:	8b 77       	andi	r24, 0x7B	; 123
    7712:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	GlobalInterruptEnable();

	while (RunBootloader)
	{
		CDC_Task();
		USB_USBTask();
    7716:	87 d3       	rcall	.+1806   	; 0x7e26 <USB_USBTask>
    7718:	da cd       	rjmp	.-1100   	; 0x72ce <main+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    771a:	ef e9       	ldi	r30, 0x9F	; 159
    771c:	ff e0       	ldi	r31, 0x0F	; 15
    771e:	31 97       	sbiw	r30, 0x01	; 1
    7720:	f1 f7       	brne	.-4      	; 0x771e <main+0x4a8>
    7722:	00 c0       	rjmp	.+0      	; 0x7724 <main+0x4ae>
    7724:	00 00       	nop
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    7726:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    772a:	81 60       	ori	r24, 0x01	; 1
    772c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Unlock the forced application start mode of the bootloader if it is restarted */
	MagicBootKey = MAGIC_BOOT_KEY;
    7730:	82 e4       	ldi	r24, 0x42	; 66
    7732:	9c ed       	ldi	r25, 0xDC	; 220
    7734:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <__bss_end+0x1>
    7738:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__bss_end>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    773c:	9c e0       	ldi	r25, 0x0C	; 12
    773e:	88 e1       	ldi	r24, 0x18	; 24
    7740:	0f b6       	in	r0, 0x3f	; 63
    7742:	f8 94       	cli
    7744:	a8 95       	wdr
    7746:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    774a:	0f be       	out	0x3f, r0	; 63
    774c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    7750:	ff cf       	rjmp	.-2      	; 0x7750 <main+0x4da>

00007752 <__vector_20>:
	TCCR1B = ((1 << CS11) | (1 << CS10));
}

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    7752:	1f 92       	push	r1
    7754:	0f 92       	push	r0
    7756:	0f b6       	in	r0, 0x3f	; 63
    7758:	0f 92       	push	r0
    775a:	11 24       	eor	r1, r1
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);
}
    775c:	0f 90       	pop	r0
    775e:	0f be       	out	0x3f, r0	; 63
    7760:	0f 90       	pop	r0
    7762:	1f 90       	pop	r1
    7764:	18 95       	reti

00007766 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    7766:	42 e0       	ldi	r20, 0x02	; 2
    7768:	61 ec       	ldi	r22, 0xC1	; 193
    776a:	82 e0       	ldi	r24, 0x02	; 2
    776c:	0e d1       	rcall	.+540    	; 0x798a <Endpoint_ConfigureEndpoint_Prv>
    776e:	42 e1       	ldi	r20, 0x12	; 18
    7770:	61 e8       	ldi	r22, 0x81	; 129
    7772:	83 e0       	ldi	r24, 0x03	; 3
    7774:	0a d1       	rcall	.+532    	; 0x798a <Endpoint_ConfigureEndpoint_Prv>
    7776:	42 e1       	ldi	r20, 0x12	; 18
    7778:	60 e8       	ldi	r22, 0x80	; 128
    777a:	84 e0       	ldi	r24, 0x04	; 4
    777c:	06 c1       	rjmp	.+524    	; 0x798a <Endpoint_ConfigureEndpoint_Prv>

0000777e <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Ignore any requests that aren't directed to the CDC interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    777e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <USB_ControlRequest>
    7782:	98 2f       	mov	r25, r24
    7784:	9f 77       	andi	r25, 0x7F	; 127
    7786:	91 32       	cpi	r25, 0x21	; 33
    7788:	99 f5       	brne	.+102    	; 0x77f0 <EVENT_USB_Device_ControlRequest+0x72>

	/* Activity - toggle indicator LEDs */
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
    778a:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <USB_ControlRequest+0x1>
    778e:	91 32       	cpi	r25, 0x21	; 33
    7790:	29 f0       	breq	.+10     	; 0x779c <EVENT_USB_Device_ControlRequest+0x1e>
    7792:	92 32       	cpi	r25, 0x22	; 34
    7794:	29 f1       	breq	.+74     	; 0x77e0 <EVENT_USB_Device_ControlRequest+0x62>
    7796:	90 32       	cpi	r25, 0x20	; 32
    7798:	59 f5       	brne	.+86     	; 0x77f0 <EVENT_USB_Device_ControlRequest+0x72>
    779a:	10 c0       	rjmp	.+32     	; 0x77bc <EVENT_USB_Device_ControlRequest+0x3e>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    779c:	81 3a       	cpi	r24, 0xA1	; 161
    779e:	41 f5       	brne	.+80     	; 0x77f0 <EVENT_USB_Device_ControlRequest+0x72>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    77a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    77a4:	87 7f       	andi	r24, 0xF7	; 247
    77a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    77aa:	67 e0       	ldi	r22, 0x07	; 7
    77ac:	70 e0       	ldi	r23, 0x00	; 0
    77ae:	81 e0       	ldi	r24, 0x01	; 1
    77b0:	91 e0       	ldi	r25, 0x01	; 1
    77b2:	51 d0       	rcall	.+162    	; 0x7856 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    77b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    77b8:	8b 77       	andi	r24, 0x7B	; 123
    77ba:	0f c0       	rjmp	.+30     	; 0x77da <EVENT_USB_Device_ControlRequest+0x5c>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    77bc:	81 32       	cpi	r24, 0x21	; 33
    77be:	c1 f4       	brne	.+48     	; 0x77f0 <EVENT_USB_Device_ControlRequest+0x72>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    77c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    77c4:	87 7f       	andi	r24, 0xF7	; 247
    77c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    77ca:	67 e0       	ldi	r22, 0x07	; 7
    77cc:	70 e0       	ldi	r23, 0x00	; 0
    77ce:	81 e0       	ldi	r24, 0x01	; 1
    77d0:	91 e0       	ldi	r25, 0x01	; 1
    77d2:	9d d0       	rcall	.+314    	; 0x790e <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    77d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    77d8:	8e 77       	andi	r24, 0x7E	; 126
    77da:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    77de:	08 95       	ret
				Endpoint_ClearIN();
			}

			break;
        case CDC_REQ_SetControlLineState:
	        if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    77e0:	81 32       	cpi	r24, 0x21	; 33
    77e2:	31 f4       	brne	.+12     	; 0x77f0 <EVENT_USB_Device_ControlRequest+0x72>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    77e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    77e8:	87 7f       	andi	r24, 0xF7	; 247
    77ea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	        {
	            Endpoint_ClearSETUP();
	            Endpoint_ClearStatusStage();
    77ee:	e1 c0       	rjmp	.+450    	; 0x79b2 <Endpoint_ClearStatusStage>
    77f0:	08 95       	ret

000077f2 <CALLBACK_USB_GetDescriptor>:
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    77f2:	29 2f       	mov	r18, r25
    77f4:	30 e0       	ldi	r19, 0x00	; 0
    77f6:	22 30       	cpi	r18, 0x02	; 2
    77f8:	31 05       	cpc	r19, r1
    77fa:	59 f0       	breq	.+22     	; 0x7812 <CALLBACK_USB_GetDescriptor+0x20>
    77fc:	23 30       	cpi	r18, 0x03	; 3
    77fe:	31 05       	cpc	r19, r1
    7800:	69 f0       	breq	.+26     	; 0x781c <CALLBACK_USB_GetDescriptor+0x2a>
    7802:	21 30       	cpi	r18, 0x01	; 1
    7804:	31 05       	cpc	r19, r1
    7806:	f9 f4       	brne	.+62     	; 0x7846 <CALLBACK_USB_GetDescriptor+0x54>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    7808:	82 e1       	ldi	r24, 0x12	; 18
    780a:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    780c:	20 e8       	ldi	r18, 0x80	; 128
    780e:	31 e0       	ldi	r19, 0x01	; 1
    7810:	1e c0       	rjmp	.+60     	; 0x784e <CALLBACK_USB_GetDescriptor+0x5c>
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    7812:	8e e3       	ldi	r24, 0x3E	; 62
    7814:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    7816:	22 e4       	ldi	r18, 0x42	; 66
    7818:	31 e0       	ldi	r19, 0x01	; 1
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    781a:	19 c0       	rjmp	.+50     	; 0x784e <CALLBACK_USB_GetDescriptor+0x5c>
        case DTYPE_String:
            if (DescriptorNumber == STRING_ID_Language)
    781c:	88 23       	and	r24, r24
    781e:	49 f0       	breq	.+18     	; 0x7832 <CALLBACK_USB_GetDescriptor+0x40>
            {
                Address = &LanguageString;
                Size    = LanguageString.Header.Size;
            }
            else if (DescriptorNumber == STRING_ID_Manufacturer)
    7820:	81 30       	cpi	r24, 0x01	; 1
    7822:	61 f0       	breq	.+24     	; 0x783c <CALLBACK_USB_GetDescriptor+0x4a>
            {
                Address = &ManufacturerString;
                Size    = ManufacturerString.Header.Size;
            }
            else if (DescriptorNumber == STRING_ID_Product)
    7824:	82 30       	cpi	r24, 0x02	; 2
    7826:	79 f4       	brne	.+30     	; 0x7846 <CALLBACK_USB_GetDescriptor+0x54>
            {
                Address = &ProductString;
                Size    = ProductString.Header.Size;
    7828:	82 e1       	ldi	r24, 0x12	; 18
    782a:	90 e0       	ldi	r25, 0x00	; 0
                Address = &ManufacturerString;
                Size    = ManufacturerString.Header.Size;
            }
            else if (DescriptorNumber == STRING_ID_Product)
            {
                Address = &ProductString;
    782c:	20 e1       	ldi	r18, 0x10	; 16
    782e:	31 e0       	ldi	r19, 0x01	; 1
    7830:	0e c0       	rjmp	.+28     	; 0x784e <CALLBACK_USB_GetDescriptor+0x5c>
            break;
        case DTYPE_String:
            if (DescriptorNumber == STRING_ID_Language)
            {
                Address = &LanguageString;
                Size    = LanguageString.Header.Size;
    7832:	84 e0       	ldi	r24, 0x04	; 4
    7834:	90 e0       	ldi	r25, 0x00	; 0
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            if (DescriptorNumber == STRING_ID_Language)
            {
                Address = &LanguageString;
    7836:	2e e3       	ldi	r18, 0x3E	; 62
    7838:	31 e0       	ldi	r19, 0x01	; 1
    783a:	09 c0       	rjmp	.+18     	; 0x784e <CALLBACK_USB_GetDescriptor+0x5c>
                Size    = LanguageString.Header.Size;
            }
            else if (DescriptorNumber == STRING_ID_Manufacturer)
            {
                Address = &ManufacturerString;
                Size    = ManufacturerString.Header.Size;
    783c:	88 e1       	ldi	r24, 0x18	; 24
    783e:	90 e0       	ldi	r25, 0x00	; 0
                Address = &LanguageString;
                Size    = LanguageString.Header.Size;
            }
            else if (DescriptorNumber == STRING_ID_Manufacturer)
            {
                Address = &ManufacturerString;
    7840:	24 e2       	ldi	r18, 0x24	; 36
    7842:	31 e0       	ldi	r19, 0x01	; 1
    7844:	04 c0       	rjmp	.+8      	; 0x784e <CALLBACK_USB_GetDescriptor+0x5c>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
    7846:	80 e0       	ldi	r24, 0x00	; 0
    7848:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    784a:	20 e0       	ldi	r18, 0x00	; 0
    784c:	30 e0       	ldi	r19, 0x00	; 0
            }

            break;
    }

    *DescriptorAddress = Address;
    784e:	fa 01       	movw	r30, r20
    7850:	31 83       	std	Z+1, r19	; 0x01
    7852:	20 83       	st	Z, r18
    return Size;
}
    7854:	08 95       	ret

00007856 <Endpoint_Write_Control_Stream_LE>:
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7856:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <USB_ControlRequest+0x6>
    785a:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <USB_ControlRequest+0x7>
    785e:	26 17       	cp	r18, r22
    7860:	37 07       	cpc	r19, r23
    7862:	48 f0       	brcs	.+18     	; 0x7876 <Endpoint_Write_Control_Stream_LE+0x20>
    7864:	61 15       	cp	r22, r1
    7866:	71 05       	cpc	r23, r1
    7868:	39 f4       	brne	.+14     	; 0x7878 <Endpoint_Write_Control_Stream_LE+0x22>
    786a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    786e:	2e 77       	andi	r18, 0x7E	; 126
    7870:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7874:	01 c0       	rjmp	.+2      	; 0x7878 <Endpoint_Write_Control_Stream_LE+0x22>
    7876:	b9 01       	movw	r22, r18
    7878:	fc 01       	movw	r30, r24
    787a:	20 e0       	ldi	r18, 0x00	; 0
    787c:	61 15       	cp	r22, r1
    787e:	71 05       	cpc	r23, r1
    7880:	71 f1       	breq	.+92     	; 0x78de <Endpoint_Write_Control_Stream_LE+0x88>
    7882:	8e b3       	in	r24, 0x1e	; 30
    7884:	88 23       	and	r24, r24
    7886:	e9 f1       	breq	.+122    	; 0x7902 <Endpoint_Write_Control_Stream_LE+0xac>
    7888:	85 30       	cpi	r24, 0x05	; 5
    788a:	e9 f1       	breq	.+122    	; 0x7906 <Endpoint_Write_Control_Stream_LE+0xb0>
    788c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7890:	83 fd       	sbrc	r24, 3
    7892:	3b c0       	rjmp	.+118    	; 0x790a <Endpoint_Write_Control_Stream_LE+0xb4>
    7894:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7898:	82 fd       	sbrc	r24, 2
    789a:	2d c0       	rjmp	.+90     	; 0x78f6 <Endpoint_Write_Control_Stream_LE+0xa0>
    789c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    78a0:	80 ff       	sbrs	r24, 0
    78a2:	ec cf       	rjmp	.-40     	; 0x787c <Endpoint_Write_Control_Stream_LE+0x26>
    78a4:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    78a8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    78ac:	90 e0       	ldi	r25, 0x00	; 0
    78ae:	92 2b       	or	r25, r18
    78b0:	61 15       	cp	r22, r1
    78b2:	71 05       	cpc	r23, r1
    78b4:	51 f0       	breq	.+20     	; 0x78ca <Endpoint_Write_Control_Stream_LE+0x74>
    78b6:	88 30       	cpi	r24, 0x08	; 8
    78b8:	91 05       	cpc	r25, r1
    78ba:	38 f4       	brcc	.+14     	; 0x78ca <Endpoint_Write_Control_Stream_LE+0x74>
    78bc:	21 91       	ld	r18, Z+
    78be:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    78c2:	61 50       	subi	r22, 0x01	; 1
    78c4:	71 09       	sbc	r23, r1
    78c6:	01 96       	adiw	r24, 0x01	; 1
    78c8:	f3 cf       	rjmp	.-26     	; 0x78b0 <Endpoint_Write_Control_Stream_LE+0x5a>
    78ca:	21 e0       	ldi	r18, 0x01	; 1
    78cc:	08 97       	sbiw	r24, 0x08	; 8
    78ce:	09 f0       	breq	.+2      	; 0x78d2 <Endpoint_Write_Control_Stream_LE+0x7c>
    78d0:	20 e0       	ldi	r18, 0x00	; 0
    78d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    78d6:	8e 77       	andi	r24, 0x7E	; 126
    78d8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    78dc:	cf cf       	rjmp	.-98     	; 0x787c <Endpoint_Write_Control_Stream_LE+0x26>
    78de:	21 11       	cpse	r18, r1
    78e0:	d0 cf       	rjmp	.-96     	; 0x7882 <Endpoint_Write_Control_Stream_LE+0x2c>
    78e2:	09 c0       	rjmp	.+18     	; 0x78f6 <Endpoint_Write_Control_Stream_LE+0xa0>
    78e4:	8e b3       	in	r24, 0x1e	; 30
    78e6:	88 23       	and	r24, r24
    78e8:	61 f0       	breq	.+24     	; 0x7902 <Endpoint_Write_Control_Stream_LE+0xac>
    78ea:	85 30       	cpi	r24, 0x05	; 5
    78ec:	61 f0       	breq	.+24     	; 0x7906 <Endpoint_Write_Control_Stream_LE+0xb0>
    78ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    78f2:	83 fd       	sbrc	r24, 3
    78f4:	0a c0       	rjmp	.+20     	; 0x790a <Endpoint_Write_Control_Stream_LE+0xb4>
    78f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    78fa:	82 ff       	sbrs	r24, 2
    78fc:	f3 cf       	rjmp	.-26     	; 0x78e4 <Endpoint_Write_Control_Stream_LE+0x8e>
    78fe:	80 e0       	ldi	r24, 0x00	; 0
    7900:	08 95       	ret
    7902:	82 e0       	ldi	r24, 0x02	; 2
    7904:	08 95       	ret
    7906:	83 e0       	ldi	r24, 0x03	; 3
    7908:	08 95       	ret
    790a:	81 e0       	ldi	r24, 0x01	; 1
    790c:	08 95       	ret

0000790e <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    790e:	61 15       	cp	r22, r1
    7910:	71 05       	cpc	r23, r1
    7912:	29 f4       	brne	.+10     	; 0x791e <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7914:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7918:	2b 77       	andi	r18, 0x7B	; 123
    791a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    791e:	fc 01       	movw	r30, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    7920:	61 15       	cp	r22, r1
    7922:	71 05       	cpc	r23, r1
    7924:	31 f1       	breq	.+76     	; 0x7972 <Endpoint_Read_Control_Stream_LE+0x64>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7926:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7928:	88 23       	and	r24, r24
    792a:	59 f1       	breq	.+86     	; 0x7982 <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    792c:	85 30       	cpi	r24, 0x05	; 5
    792e:	59 f1       	breq	.+86     	; 0x7986 <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7930:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7934:	83 fd       	sbrc	r24, 3
    7936:	23 c0       	rjmp	.+70     	; 0x797e <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7938:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    793c:	82 ff       	sbrs	r24, 2
    793e:	f0 cf       	rjmp	.-32     	; 0x7920 <Endpoint_Read_Control_Stream_LE+0x12>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7940:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    7944:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
		{
			while (Length && Endpoint_BytesInEndpoint())
    7948:	90 e0       	ldi	r25, 0x00	; 0
    794a:	92 2b       	or	r25, r18
    794c:	89 2b       	or	r24, r25
    794e:	31 f0       	breq	.+12     	; 0x795c <Endpoint_Read_Control_Stream_LE+0x4e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7950:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7954:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7956:	61 50       	subi	r22, 0x01	; 1
    7958:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    795a:	91 f7       	brne	.-28     	; 0x7940 <Endpoint_Read_Control_Stream_LE+0x32>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    795c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7960:	8b 77       	andi	r24, 0x7B	; 123
    7962:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7966:	dc cf       	rjmp	.-72     	; 0x7920 <Endpoint_Read_Control_Stream_LE+0x12>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7968:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    796a:	88 23       	and	r24, r24
    796c:	51 f0       	breq	.+20     	; 0x7982 <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    796e:	85 30       	cpi	r24, 0x05	; 5
    7970:	51 f0       	breq	.+20     	; 0x7986 <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7972:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    7976:	80 ff       	sbrs	r24, 0
    7978:	f7 cf       	rjmp	.-18     	; 0x7968 <Endpoint_Read_Control_Stream_LE+0x5a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    797a:	80 e0       	ldi	r24, 0x00	; 0
    797c:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    797e:	81 e0       	ldi	r24, 0x01	; 1
    7980:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7982:	82 e0       	ldi	r24, 0x02	; 2
    7984:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7986:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7988:	08 95       	ret

0000798a <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    798a:	8f 70       	andi	r24, 0x0F	; 15
    798c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    7990:	eb ee       	ldi	r30, 0xEB	; 235
    7992:	f0 e0       	ldi	r31, 0x00	; 0
    7994:	80 81       	ld	r24, Z
    7996:	81 60       	ori	r24, 0x01	; 1
    7998:	80 83       	st	Z, r24
    799a:	ed ee       	ldi	r30, 0xED	; 237
    799c:	f0 e0       	ldi	r31, 0x00	; 0
    799e:	10 82       	st	Z, r1
    79a0:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    79a4:	40 83       	st	Z, r20
    79a6:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
    79aa:	88 1f       	adc	r24, r24
    79ac:	88 27       	eor	r24, r24
    79ae:	88 1f       	adc	r24, r24
    79b0:	08 95       	ret

000079b2 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    79b2:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <USB_ControlRequest>
    79b6:	87 ff       	sbrs	r24, 7
    79b8:	0f c0       	rjmp	.+30     	; 0x79d8 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    79ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    79be:	82 fd       	sbrc	r24, 2
    79c0:	04 c0       	rjmp	.+8      	; 0x79ca <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    79c2:	8e b3       	in	r24, 0x1e	; 30
    79c4:	81 11       	cpse	r24, r1
    79c6:	f9 cf       	rjmp	.-14     	; 0x79ba <Endpoint_ClearStatusStage+0x8>
    79c8:	10 c0       	rjmp	.+32     	; 0x79ea <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    79ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    79ce:	8b 77       	andi	r24, 0x7B	; 123
    79d0:	0a c0       	rjmp	.+20     	; 0x79e6 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    79d2:	8e b3       	in	r24, 0x1e	; 30
    79d4:	88 23       	and	r24, r24
    79d6:	49 f0       	breq	.+18     	; 0x79ea <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    79d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    79dc:	80 ff       	sbrs	r24, 0
    79de:	f9 cf       	rjmp	.-14     	; 0x79d2 <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    79e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    79e4:	8e 77       	andi	r24, 0x7E	; 126
    79e6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    79ea:	08 95       	ret

000079ec <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    79ec:	0f 93       	push	r16
    79ee:	1f 93       	push	r17
    79f0:	cf 93       	push	r28
    79f2:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    79f4:	46 d0       	rcall	.+140    	; 0x7a82 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    79f6:	4d d0       	rcall	.+154    	; 0x7a92 <USB_INT_ClearAllInterrupts>
    79f8:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    79fa:	d0 e0       	ldi	r29, 0x00	; 0
    79fc:	88 81       	ld	r24, Y
    79fe:	8f 77       	andi	r24, 0x7F	; 127
    7a00:	88 83       	st	Y, r24
    7a02:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    7a04:	80 68       	ori	r24, 0x80	; 128
    7a06:	88 83       	st	Y, r24
    7a08:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    7a0a:	8f 7d       	andi	r24, 0xDF	; 223
    7a0c:	88 83       	st	Y, r24
    7a0e:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7a10:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    7a12:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    7a16:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    7a18:	10 e0       	ldi	r17, 0x00	; 0
    7a1a:	f8 01       	movw	r30, r16
    7a1c:	80 81       	ld	r24, Z
    7a1e:	8b 7f       	andi	r24, 0xFB	; 251
    7a20:	80 83       	st	Z, r24
    7a22:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    7a24:	81 60       	ori	r24, 0x01	; 1
    7a26:	88 83       	st	Y, r24
    7a28:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    7a2a:	60 e0       	ldi	r22, 0x00	; 0
    7a2c:	80 e0       	ldi	r24, 0x00	; 0
    7a2e:	ad df       	rcall	.-166    	; 0x798a <Endpoint_ConfigureEndpoint_Prv>
    7a30:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7a32:	f0 e0       	ldi	r31, 0x00	; 0
    7a34:	80 81       	ld	r24, Z
    7a36:	8e 7f       	andi	r24, 0xFE	; 254
    7a38:	80 83       	st	Z, r24
    7a3a:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7a3c:	f0 e0       	ldi	r31, 0x00	; 0
    7a3e:	80 81       	ld	r24, Z
    7a40:	81 60       	ori	r24, 0x01	; 1
    7a42:	80 83       	st	Z, r24
    7a44:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    7a46:	88 60       	ori	r24, 0x08	; 8
    7a48:	80 83       	st	Z, r24
    7a4a:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    7a4c:	80 81       	ld	r24, Z
    7a4e:	8e 7f       	andi	r24, 0xFE	; 254
    7a50:	80 83       	st	Z, r24
    7a52:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    7a54:	80 61       	ori	r24, 0x10	; 16
    7a56:	88 83       	st	Y, r24
    7a58:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    7a5a:	cf 91       	pop	r28
    7a5c:	1f 91       	pop	r17
    7a5e:	0f 91       	pop	r16
    7a60:	08 95       	ret

00007a62 <USB_Init>:
    7a62:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    7a64:	f0 e0       	ldi	r31, 0x00	; 0
    7a66:	80 81       	ld	r24, Z
    7a68:	8f 7e       	andi	r24, 0xEF	; 239
    7a6a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    7a6c:	e7 ed       	ldi	r30, 0xD7	; 215
    7a6e:	f0 e0       	ldi	r31, 0x00	; 0
    7a70:	80 81       	ld	r24, Z
    7a72:	81 60       	ori	r24, 0x01	; 1
    7a74:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    7a76:	84 e0       	ldi	r24, 0x04	; 4
    7a78:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    7a7a:	81 e0       	ldi	r24, 0x01	; 1
    7a7c:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <USB_IsInitialized>

	USB_ResetInterface();
    7a80:	b5 cf       	rjmp	.-150    	; 0x79ec <USB_ResetInterface>

00007a82 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    7a82:	e8 ed       	ldi	r30, 0xD8	; 216
    7a84:	f0 e0       	ldi	r31, 0x00	; 0
    7a86:	80 81       	ld	r24, Z
    7a88:	8e 7f       	andi	r24, 0xFE	; 254
    7a8a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    7a8c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7a90:	08 95       	ret

00007a92 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    7a92:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    7a96:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    7a9a:	08 95       	ret

00007a9c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    7a9c:	1f 92       	push	r1
    7a9e:	0f 92       	push	r0
    7aa0:	0f b6       	in	r0, 0x3f	; 63
    7aa2:	0f 92       	push	r0
    7aa4:	11 24       	eor	r1, r1
    7aa6:	2f 93       	push	r18
    7aa8:	3f 93       	push	r19
    7aaa:	4f 93       	push	r20
    7aac:	5f 93       	push	r21
    7aae:	6f 93       	push	r22
    7ab0:	7f 93       	push	r23
    7ab2:	8f 93       	push	r24
    7ab4:	9f 93       	push	r25
    7ab6:	af 93       	push	r26
    7ab8:	bf 93       	push	r27
    7aba:	ef 93       	push	r30
    7abc:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    7abe:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    7ac2:	80 ff       	sbrs	r24, 0
    7ac4:	1b c0       	rjmp	.+54     	; 0x7afc <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    7ac6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    7aca:	80 ff       	sbrs	r24, 0
    7acc:	17 c0       	rjmp	.+46     	; 0x7afc <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    7ace:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
    7ad2:	8e 7f       	andi	r24, 0xFE	; 254
    7ad4:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    7ad8:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    7adc:	80 ff       	sbrs	r24, 0
    7ade:	0b c0       	rjmp	.+22     	; 0x7af6 <__vector_10+0x5a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7ae0:	80 e1       	ldi	r24, 0x10	; 16
    7ae2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7ae4:	82 e1       	ldi	r24, 0x12	; 18
    7ae6:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    7ae8:	09 b4       	in	r0, 0x29	; 41
    7aea:	00 fe       	sbrs	r0, 0
    7aec:	fd cf       	rjmp	.-6      	; 0x7ae8 <__vector_10+0x4c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    7aee:	81 e0       	ldi	r24, 0x01	; 1
    7af0:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    7af2:	98 d1       	rcall	.+816    	; 0x7e24 <USB_Event_Stub>
    7af4:	03 c0       	rjmp	.+6      	; 0x7afc <__vector_10+0x60>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7af6:	19 bc       	out	0x29, r1	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
			EVENT_USB_Device_Disconnect();
    7af8:	1e ba       	out	0x1e, r1	; 30
    7afa:	94 d1       	rcall	.+808    	; 0x7e24 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    7afc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    7b00:	80 ff       	sbrs	r24, 0
    7b02:	17 c0       	rjmp	.+46     	; 0x7b32 <__vector_10+0x96>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    7b04:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7b08:	80 ff       	sbrs	r24, 0
    7b0a:	13 c0       	rjmp	.+38     	; 0x7b32 <__vector_10+0x96>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7b0c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7b10:	8e 7f       	andi	r24, 0xFE	; 254
    7b12:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7b16:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7b1a:	80 61       	ori	r24, 0x10	; 16
    7b1c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    7b20:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    7b24:	80 62       	ori	r24, 0x20	; 32
    7b26:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7b2a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    7b2c:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
    7b2e:	8e bb       	out	0x1e, r24	; 30
    7b30:	79 d1       	rcall	.+754    	; 0x7e24 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    7b32:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7b36:	84 ff       	sbrs	r24, 4
    7b38:	2e c0       	rjmp	.+92     	; 0x7b96 <__vector_10+0xfa>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    7b3a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7b3e:	84 ff       	sbrs	r24, 4
    7b40:	2a c0       	rjmp	.+84     	; 0x7b96 <__vector_10+0xfa>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7b42:	80 e1       	ldi	r24, 0x10	; 16
    7b44:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7b46:	82 e1       	ldi	r24, 0x12	; 18
    7b48:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7b4a:	09 b4       	in	r0, 0x29	; 41
    7b4c:	00 fe       	sbrs	r0, 0
    7b4e:	fd cf       	rjmp	.-6      	; 0x7b4a <__vector_10+0xae>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    7b50:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    7b54:	8f 7d       	andi	r24, 0xDF	; 223
    7b56:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    7b5a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    7b5e:	8f 7e       	andi	r24, 0xEF	; 239
    7b60:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    7b64:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7b68:	8f 7e       	andi	r24, 0xEF	; 239
    7b6a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7b6e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7b72:	81 60       	ori	r24, 0x01	; 1
    7b74:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    7b78:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <USB_Device_ConfigurationNumber>
    7b7c:	88 23       	and	r24, r24
    7b7e:	11 f0       	breq	.+4      	; 0x7b84 <__vector_10+0xe8>
		  USB_DeviceState = DEVICE_STATE_Configured;
    7b80:	84 e0       	ldi	r24, 0x04	; 4
    7b82:	07 c0       	rjmp	.+14     	; 0x7b92 <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7b84:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    7b88:	87 fd       	sbrc	r24, 7
    7b8a:	02 c0       	rjmp	.+4      	; 0x7b90 <__vector_10+0xf4>
    7b8c:	81 e0       	ldi	r24, 0x01	; 1
    7b8e:	01 c0       	rjmp	.+2      	; 0x7b92 <__vector_10+0xf6>
    7b90:	83 e0       	ldi	r24, 0x03	; 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7b92:	8e bb       	out	0x1e, r24	; 30
    7b94:	47 d1       	rcall	.+654    	; 0x7e24 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7b96:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    7b9a:	83 ff       	sbrs	r24, 3
    7b9c:	21 c0       	rjmp	.+66     	; 0x7be0 <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    7b9e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7ba2:	83 ff       	sbrs	r24, 3
    7ba4:	1d c0       	rjmp	.+58     	; 0x7be0 <__vector_10+0x144>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    7ba6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    7baa:	87 7f       	andi	r24, 0xF7	; 247
    7bac:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    7bb0:	82 e0       	ldi	r24, 0x02	; 2
    7bb2:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    7bb4:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7bb8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    7bbc:	8e 7f       	andi	r24, 0xFE	; 254
    7bbe:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7bc2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7bc6:	8e 7f       	andi	r24, 0xFE	; 254
    7bc8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7bcc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7bd0:	80 61       	ori	r24, 0x10	; 16
    7bd2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    7bd6:	42 e0       	ldi	r20, 0x02	; 2
    7bd8:	60 e0       	ldi	r22, 0x00	; 0
    7bda:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7bdc:	d6 de       	rcall	.-596    	; 0x798a <Endpoint_ConfigureEndpoint_Prv>
    7bde:	22 d1       	rcall	.+580    	; 0x7e24 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7be0:	ff 91       	pop	r31
    7be2:	ef 91       	pop	r30
    7be4:	bf 91       	pop	r27
    7be6:	af 91       	pop	r26
    7be8:	9f 91       	pop	r25
    7bea:	8f 91       	pop	r24
    7bec:	7f 91       	pop	r23
    7bee:	6f 91       	pop	r22
    7bf0:	5f 91       	pop	r21
    7bf2:	4f 91       	pop	r20
    7bf4:	3f 91       	pop	r19
    7bf6:	2f 91       	pop	r18
    7bf8:	0f 90       	pop	r0
    7bfa:	0f be       	out	0x3f, r0	; 63
    7bfc:	0f 90       	pop	r0
    7bfe:	1f 90       	pop	r1
    7c00:	18 95       	reti

00007c02 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7c02:	1f 93       	push	r17
    7c04:	cf 93       	push	r28
    7c06:	df 93       	push	r29
    7c08:	00 d0       	rcall	.+0      	; 0x7c0a <USB_Device_ProcessControlRequest+0x8>
    7c0a:	cd b7       	in	r28, 0x3d	; 61
    7c0c:	de b7       	in	r29, 0x3e	; 62
    7c0e:	e8 e9       	ldi	r30, 0x98	; 152
    7c10:	f1 e0       	ldi	r31, 0x01	; 1
    7c12:	80 ea       	ldi	r24, 0xA0	; 160
    7c14:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7c16:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    7c1a:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7c1c:	8e 17       	cp	r24, r30
    7c1e:	9f 07       	cpc	r25, r31
    7c20:	d1 f7       	brne	.-12     	; 0x7c16 <USB_Device_ProcessControlRequest+0x14>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    7c22:	ad dd       	rcall	.-1190   	; 0x777e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	if (Endpoint_IsSETUPReceived())
    7c28:	83 ff       	sbrs	r24, 3
    7c2a:	e8 c0       	rjmp	.+464    	; 0x7dfc <USB_Device_ProcessControlRequest+0x1fa>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7c2c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    7c30:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <USB_ControlRequest+0x1>
    7c34:	95 30       	cpi	r25, 0x05	; 5
    7c36:	09 f4       	brne	.+2      	; 0x7c3a <USB_Device_ProcessControlRequest+0x38>
    7c38:	6f c0       	rjmp	.+222    	; 0x7d18 <USB_Device_ProcessControlRequest+0x116>
    7c3a:	30 f4       	brcc	.+12     	; 0x7c48 <USB_Device_ProcessControlRequest+0x46>
    7c3c:	91 30       	cpi	r25, 0x01	; 1
    7c3e:	71 f1       	breq	.+92     	; 0x7c9c <USB_Device_ProcessControlRequest+0x9a>
    7c40:	68 f0       	brcs	.+26     	; 0x7c5c <USB_Device_ProcessControlRequest+0x5a>
    7c42:	93 30       	cpi	r25, 0x03	; 3
    7c44:	59 f1       	breq	.+86     	; 0x7c9c <USB_Device_ProcessControlRequest+0x9a>
    7c46:	da c0       	rjmp	.+436    	; 0x7dfc <USB_Device_ProcessControlRequest+0x1fa>
    7c48:	98 30       	cpi	r25, 0x08	; 8
    7c4a:	09 f4       	brne	.+2      	; 0x7c4e <USB_Device_ProcessControlRequest+0x4c>
    7c4c:	a8 c0       	rjmp	.+336    	; 0x7d9e <USB_Device_ProcessControlRequest+0x19c>
    7c4e:	99 30       	cpi	r25, 0x09	; 9
    7c50:	09 f4       	brne	.+2      	; 0x7c54 <USB_Device_ProcessControlRequest+0x52>
    7c52:	b4 c0       	rjmp	.+360    	; 0x7dbc <USB_Device_ProcessControlRequest+0x1ba>
    7c54:	96 30       	cpi	r25, 0x06	; 6
    7c56:	09 f0       	breq	.+2      	; 0x7c5a <USB_Device_ProcessControlRequest+0x58>
    7c58:	d1 c0       	rjmp	.+418    	; 0x7dfc <USB_Device_ProcessControlRequest+0x1fa>
    7c5a:	7f c0       	rjmp	.+254    	; 0x7d5a <USB_Device_ProcessControlRequest+0x158>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7c5c:	80 38       	cpi	r24, 0x80	; 128
    7c5e:	99 f0       	breq	.+38     	; 0x7c86 <USB_Device_ProcessControlRequest+0x84>
    7c60:	82 38       	cpi	r24, 0x82	; 130
    7c62:	09 f0       	breq	.+2      	; 0x7c66 <USB_Device_ProcessControlRequest+0x64>
    7c64:	cb c0       	rjmp	.+406    	; 0x7dfc <USB_Device_ProcessControlRequest+0x1fa>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7c66:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_ControlRequest+0x4>
    7c6a:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    7c6c:	87 30       	cpi	r24, 0x07	; 7
    7c6e:	08 f0       	brcs	.+2      	; 0x7c72 <USB_Device_ProcessControlRequest+0x70>
    7c70:	c5 c0       	rjmp	.+394    	; 0x7dfc <USB_Device_ProcessControlRequest+0x1fa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7c72:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7c76:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    7c7a:	85 fb       	bst	r24, 5
    7c7c:	88 27       	eor	r24, r24
    7c7e:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7c80:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    7c84:	01 c0       	rjmp	.+2      	; 0x7c88 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    7c86:	80 e0       	ldi	r24, 0x00	; 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7c88:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7c8c:	97 7f       	andi	r25, 0xF7	; 247
    7c8e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7c92:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 8);
    7c96:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    7c9a:	8c c0       	rjmp	.+280    	; 0x7db4 <USB_Device_ProcessControlRequest+0x1b2>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7c9c:	28 2f       	mov	r18, r24
    7c9e:	2d 7f       	andi	r18, 0xFD	; 253
    7ca0:	09 f0       	breq	.+2      	; 0x7ca4 <USB_Device_ProcessControlRequest+0xa2>
    7ca2:	ac c0       	rjmp	.+344    	; 0x7dfc <USB_Device_ProcessControlRequest+0x1fa>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    7ca4:	82 30       	cpi	r24, 0x02	; 2
    7ca6:	09 f0       	breq	.+2      	; 0x7caa <USB_Device_ProcessControlRequest+0xa8>
    7ca8:	a9 c0       	rjmp	.+338    	; 0x7dfc <USB_Device_ProcessControlRequest+0x1fa>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7caa:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <USB_ControlRequest+0x2>
    7cae:	81 11       	cpse	r24, r1
    7cb0:	2a c0       	rjmp	.+84     	; 0x7d06 <USB_Device_ProcessControlRequest+0x104>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7cb2:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_ControlRequest+0x4>
    7cb6:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    7cb8:	2f ef       	ldi	r18, 0xFF	; 255
    7cba:	28 0f       	add	r18, r24
    7cbc:	26 30       	cpi	r18, 0x06	; 6
    7cbe:	08 f0       	brcs	.+2      	; 0x7cc2 <USB_Device_ProcessControlRequest+0xc0>
    7cc0:	9d c0       	rjmp	.+314    	; 0x7dfc <USB_Device_ProcessControlRequest+0x1fa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7cc2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7cc6:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7cca:	20 ff       	sbrs	r18, 0
    7ccc:	1c c0       	rjmp	.+56     	; 0x7d06 <USB_Device_ProcessControlRequest+0x104>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7cce:	93 30       	cpi	r25, 0x03	; 3
    7cd0:	21 f4       	brne	.+8      	; 0x7cda <USB_Device_ProcessControlRequest+0xd8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7cd2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    7cd6:	80 62       	ori	r24, 0x20	; 32
    7cd8:	14 c0       	rjmp	.+40     	; 0x7d02 <USB_Device_ProcessControlRequest+0x100>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7cda:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    7cde:	90 61       	ori	r25, 0x10	; 16
    7ce0:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    7ce4:	21 e0       	ldi	r18, 0x01	; 1
    7ce6:	30 e0       	ldi	r19, 0x00	; 0
    7ce8:	a9 01       	movw	r20, r18
    7cea:	02 c0       	rjmp	.+4      	; 0x7cf0 <USB_Device_ProcessControlRequest+0xee>
    7cec:	44 0f       	add	r20, r20
    7cee:	55 1f       	adc	r21, r21
    7cf0:	8a 95       	dec	r24
    7cf2:	e2 f7       	brpl	.-8      	; 0x7cec <USB_Device_ProcessControlRequest+0xea>
    7cf4:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
				UERST = 0;
    7cf8:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7cfc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    7d00:	88 60       	ori	r24, 0x08	; 8
    7d02:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7d06:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d0a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7d0e:	87 7f       	andi	r24, 0xF7	; 247
    7d10:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7d14:	4e de       	rcall	.-868    	; 0x79b2 <Endpoint_ClearStatusStage>
    7d16:	72 c0       	rjmp	.+228    	; 0x7dfc <USB_Device_ProcessControlRequest+0x1fa>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7d18:	81 11       	cpse	r24, r1
    7d1a:	70 c0       	rjmp	.+224    	; 0x7dfc <USB_Device_ProcessControlRequest+0x1fa>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    7d1c:	10 91 9a 01 	lds	r17, 0x019A	; 0x80019a <USB_ControlRequest+0x2>
    7d20:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7d22:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    7d26:	80 78       	andi	r24, 0x80	; 128
    7d28:	81 2b       	or	r24, r17
    7d2a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    7d2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7d32:	87 7f       	andi	r24, 0xF7	; 247
    7d34:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7d38:	3c de       	rcall	.-904    	; 0x79b2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7d3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	while (!(Endpoint_IsINReady()));
    7d3e:	80 ff       	sbrs	r24, 0
    7d40:	fc cf       	rjmp	.-8      	; 0x7d3a <USB_Device_ProcessControlRequest+0x138>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    7d42:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    7d46:	80 68       	ori	r24, 0x80	; 128
    7d48:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7d4c:	11 11       	cpse	r17, r1
    7d4e:	02 c0       	rjmp	.+4      	; 0x7d54 <USB_Device_ProcessControlRequest+0x152>
    7d50:	82 e0       	ldi	r24, 0x02	; 2
    7d52:	01 c0       	rjmp	.+2      	; 0x7d56 <USB_Device_ProcessControlRequest+0x154>
    7d54:	83 e0       	ldi	r24, 0x03	; 3
    7d56:	8e bb       	out	0x1e, r24	; 30
    7d58:	51 c0       	rjmp	.+162    	; 0x7dfc <USB_Device_ProcessControlRequest+0x1fa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7d5a:	80 58       	subi	r24, 0x80	; 128
    7d5c:	82 30       	cpi	r24, 0x02	; 2
    7d5e:	08 f0       	brcs	.+2      	; 0x7d62 <USB_Device_ProcessControlRequest+0x160>
    7d60:	4d c0       	rjmp	.+154    	; 0x7dfc <USB_Device_ProcessControlRequest+0x1fa>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7d62:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <USB_ControlRequest+0x4>
    7d66:	70 91 9d 01 	lds	r23, 0x019D	; 0x80019d <USB_ControlRequest+0x5>
    7d6a:	ae 01       	movw	r20, r28
    7d6c:	4f 5f       	subi	r20, 0xFF	; 255
    7d6e:	5f 4f       	sbci	r21, 0xFF	; 255
    7d70:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <USB_ControlRequest+0x2>
    7d74:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <USB_ControlRequest+0x3>
    7d78:	3c dd       	rcall	.-1416   	; 0x77f2 <CALLBACK_USB_GetDescriptor>
    7d7a:	bc 01       	movw	r22, r24
    7d7c:	89 2b       	or	r24, r25
    7d7e:	09 f4       	brne	.+2      	; 0x7d82 <USB_Device_ProcessControlRequest+0x180>
    7d80:	3d c0       	rjmp	.+122    	; 0x7dfc <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d82:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7d86:	97 7f       	andi	r25, 0xF7	; 247
    7d88:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7d8c:	89 81       	ldd	r24, Y+1	; 0x01
    7d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    7d90:	62 dd       	rcall	.-1340   	; 0x7856 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7d92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7d96:	8b 77       	andi	r24, 0x7B	; 123
    7d98:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7d9c:	2f c0       	rjmp	.+94     	; 0x7dfc <USB_Device_ProcessControlRequest+0x1fa>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7d9e:	80 38       	cpi	r24, 0x80	; 128
    7da0:	69 f5       	brne	.+90     	; 0x7dfc <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7da2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7da6:	87 7f       	andi	r24, 0xF7	; 247
    7da8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7dac:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7db0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7db4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7db8:	8e 77       	andi	r24, 0x7E	; 126
    7dba:	aa cf       	rjmp	.-172    	; 0x7d10 <USB_Device_ProcessControlRequest+0x10e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7dbc:	81 11       	cpse	r24, r1
    7dbe:	1e c0       	rjmp	.+60     	; 0x7dfc <USB_Device_ProcessControlRequest+0x1fa>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7dc0:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <USB_ControlRequest+0x2>
    7dc4:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <USB_ControlRequest+0x3>
    7dc8:	99 27       	eor	r25, r25
    7dca:	02 97       	sbiw	r24, 0x02	; 2
    7dcc:	bc f4       	brge	.+46     	; 0x7dfc <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7dce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7dd2:	87 7f       	andi	r24, 0xF7	; 247
    7dd4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7dd8:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <USB_ControlRequest+0x2>
    7ddc:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    7de0:	e8 dd       	rcall	.-1072   	; 0x79b2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    7de2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <USB_Device_ConfigurationNumber>
    7de6:	81 11       	cpse	r24, r1
    7de8:	06 c0       	rjmp	.+12     	; 0x7df6 <USB_Device_ProcessControlRequest+0x1f4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7dea:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7dee:	87 fd       	sbrc	r24, 7
    7df0:	02 c0       	rjmp	.+4      	; 0x7df6 <USB_Device_ProcessControlRequest+0x1f4>
    7df2:	81 e0       	ldi	r24, 0x01	; 1
    7df4:	01 c0       	rjmp	.+2      	; 0x7df8 <USB_Device_ProcessControlRequest+0x1f6>
    7df6:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
    7df8:	8e bb       	out	0x1e, r24	; 30
    7dfa:	b5 dc       	rcall	.-1686   	; 0x7766 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7dfc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7e00:	83 ff       	sbrs	r24, 3
    7e02:	0a c0       	rjmp	.+20     	; 0x7e18 <USB_Device_ProcessControlRequest+0x216>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7e08:	87 7f       	andi	r24, 0xF7	; 247
    7e0a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7e0e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    7e12:	80 62       	ori	r24, 0x20	; 32
    7e14:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    7e18:	0f 90       	pop	r0
    7e1a:	0f 90       	pop	r0
    7e1c:	df 91       	pop	r29
    7e1e:	cf 91       	pop	r28
    7e20:	1f 91       	pop	r17
    7e22:	08 95       	ret

00007e24 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    7e24:	08 95       	ret

00007e26 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7e26:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    7e28:	8e b3       	in	r24, 0x1e	; 30
    7e2a:	88 23       	and	r24, r24
    7e2c:	99 f0       	breq	.+38     	; 0x7e54 <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    7e2e:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    7e32:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    7e34:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    7e38:	89 2f       	mov	r24, r25
    7e3a:	81 70       	andi	r24, 0x01	; 1
    7e3c:	90 fd       	sbrc	r25, 0
    7e3e:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    7e40:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7e42:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    7e4a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    7e4c:	da de       	rcall	.-588    	; 0x7c02 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7e4e:	cf 70       	andi	r28, 0x0F	; 15
    7e50:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    7e54:	cf 91       	pop	r28
    7e56:	08 95       	ret

00007e58 <eeprom_read_byte>:
    7e58:	f9 99       	sbic	0x1f, 1	; 31
    7e5a:	fe cf       	rjmp	.-4      	; 0x7e58 <eeprom_read_byte>
    7e5c:	92 bd       	out	0x22, r25	; 34
    7e5e:	81 bd       	out	0x21, r24	; 33
    7e60:	f8 9a       	sbi	0x1f, 0	; 31
    7e62:	99 27       	eor	r25, r25
    7e64:	80 b5       	in	r24, 0x20	; 32
    7e66:	08 95       	ret

00007e68 <eeprom_update_byte>:
    7e68:	26 2f       	mov	r18, r22

00007e6a <eeprom_update_r18>:
    7e6a:	f9 99       	sbic	0x1f, 1	; 31
    7e6c:	fe cf       	rjmp	.-4      	; 0x7e6a <eeprom_update_r18>
    7e6e:	92 bd       	out	0x22, r25	; 34
    7e70:	81 bd       	out	0x21, r24	; 33
    7e72:	f8 9a       	sbi	0x1f, 0	; 31
    7e74:	01 97       	sbiw	r24, 0x01	; 1
    7e76:	00 b4       	in	r0, 0x20	; 32
    7e78:	02 16       	cp	r0, r18
    7e7a:	39 f0       	breq	.+14     	; 0x7e8a <eeprom_update_r18+0x20>
    7e7c:	1f ba       	out	0x1f, r1	; 31
    7e7e:	20 bd       	out	0x20, r18	; 32
    7e80:	0f b6       	in	r0, 0x3f	; 63
    7e82:	f8 94       	cli
    7e84:	fa 9a       	sbi	0x1f, 2	; 31
    7e86:	f9 9a       	sbi	0x1f, 1	; 31
    7e88:	0f be       	out	0x3f, r0	; 63
    7e8a:	08 95       	ret

00007e8c <_exit>:
    7e8c:	f8 94       	cli

00007e8e <__stop_program>:
    7e8e:	ff cf       	rjmp	.-2      	; 0x7e8e <__stop_program>
