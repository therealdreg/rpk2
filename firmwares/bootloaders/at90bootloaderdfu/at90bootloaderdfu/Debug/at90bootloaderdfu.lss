
at90bootloaderdfu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  0001eeee  00000fc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .apitable_jumptable 00000018  0001ffe0  0001ffe0  0000104e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_signatures 00000008  0001fff8  0001fff8  00001066  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_trampolines 00000026  0001ffa0  0001ffa0  00001028  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .text         00000eee  0001e000  0001e000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          0000001d  00800166  00800166  0000106e  2**0
                  ALLOC
  6 .noinit       00000002  00800183  00800183  0000106e  2**0
                  ALLOC
  7 .comment      00000030  00000000  00000000  0000106e  2**0
                  CONTENTS, READONLY
  8 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY
  9 .debug_aranges 00000288  00000000  00000000  000010e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00004c55  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c25  00000000  00000000  00005fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007190  00000000  00000000  00007be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000004ac  00000000  00000000  0000ed74  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00016d12  00000000  00000000  0000f220  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001db0  00000000  00000000  00025f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000310  00000000  00000000  00027ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000715e  00000000  00000000  00027ff8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .apitable_jumptable:

0001ffe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
   1ffe0:	df cf       	rjmp	.-66     	; 0x1ffa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
   1ffe2:	e0 cf       	rjmp	.-64     	; 0x1ffa4 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
   1ffe4:	e1 cf       	rjmp	.-62     	; 0x1ffa8 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
   1ffe6:	e2 cf       	rjmp	.-60     	; 0x1ffac <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
   1ffe8:	e3 cf       	rjmp	.-58     	; 0x1ffb0 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
   1ffea:	e4 cf       	rjmp	.-56     	; 0x1ffb4 <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
   1ffec:	e5 cf       	rjmp	.-54     	; 0x1ffb8 <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
   1ffee:	e6 cf       	rjmp	.-52     	; 0x1ffbc <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
   1fff0:	e6 cf       	rjmp	.-52     	; 0x1ffbe <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
   1fff2:	e6 cf       	rjmp	.-52     	; 0x1ffc0 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
   1fff4:	e6 cf       	rjmp	.-52     	; 0x1ffc2 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
   1fff6:	e6 cf       	rjmp	.-52     	; 0x1ffc4 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

0001fff8 <BootloaderAPI_Signatures>:
   1fff8:	00 e0       	ldi	r16, 0x00	; 0
   1fffa:	01 00       	.word	0x0001	; ????
   1fffc:	10 df       	rcall	.-480    	; 0x1fe1e <__data_load_end+0xeca>
   1fffe:	fb dc       	rcall	.-1546   	; 0x1f9f6 <__data_load_end+0xaa2>

Disassembly of section .apitable_trampolines:

0001ffa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
   1ffa0:	0c 94 b0 f0 	jmp	0x1e160	; 0x1e160 <BootloaderAPI_ErasePage>

0001ffa4 <BootloaderAPI_WritePage_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
   1ffa4:	0c 94 d3 f0 	jmp	0x1e1a6	; 0x1e1a6 <BootloaderAPI_WritePage>

0001ffa8 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
   1ffa8:	0c 94 f6 f0 	jmp	0x1e1ec	; 0x1e1ec <BootloaderAPI_FillWord>

0001ffac <BootloaderAPI_ReadSignature_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
   1ffac:	0c 94 05 f1 	jmp	0x1e20a	; 0x1e20a <BootloaderAPI_ReadSignature>

0001ffb0 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
   1ffb0:	0c 94 0b f1 	jmp	0x1e216	; 0x1e216 <BootloaderAPI_ReadFuse>

0001ffb4 <BootloaderAPI_ReadLock_Trampoline>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
   1ffb4:	0c 94 11 f1 	jmp	0x1e222	; 0x1e222 <BootloaderAPI_ReadLock>

0001ffb8 <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_WriteLock_Trampoline:
		jmp BootloaderAPI_WriteLock
   1ffb8:	0c 94 18 f1 	jmp	0x1e230	; 0x1e230 <BootloaderAPI_WriteLock>

0001ffbc <BootloaderAPI_UNUSED1>:
	BootloaderAPI_UNUSED1:
		ret
   1ffbc:	08 95       	ret

0001ffbe <BootloaderAPI_UNUSED2>:
	BootloaderAPI_UNUSED2:
		ret
   1ffbe:	08 95       	ret

0001ffc0 <BootloaderAPI_UNUSED3>:
	BootloaderAPI_UNUSED3:
		ret
   1ffc0:	08 95       	ret

0001ffc2 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_UNUSED4:
		ret
   1ffc2:	08 95       	ret

0001ffc4 <BootloaderAPI_UNUSED5>:
	BootloaderAPI_UNUSED5:
		ret
   1ffc4:	08 95       	ret

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	4b c0       	rjmp	.+150    	; 0x1e098 <__ctors_end>
   1e002:	00 00       	nop
   1e004:	ac c0       	rjmp	.+344    	; 0x1e15e <__bad_interrupt>
   1e006:	00 00       	nop
   1e008:	aa c0       	rjmp	.+340    	; 0x1e15e <__bad_interrupt>
   1e00a:	00 00       	nop
   1e00c:	a8 c0       	rjmp	.+336    	; 0x1e15e <__bad_interrupt>
   1e00e:	00 00       	nop
   1e010:	a6 c0       	rjmp	.+332    	; 0x1e15e <__bad_interrupt>
   1e012:	00 00       	nop
   1e014:	a4 c0       	rjmp	.+328    	; 0x1e15e <__bad_interrupt>
   1e016:	00 00       	nop
   1e018:	a2 c0       	rjmp	.+324    	; 0x1e15e <__bad_interrupt>
   1e01a:	00 00       	nop
   1e01c:	a0 c0       	rjmp	.+320    	; 0x1e15e <__bad_interrupt>
   1e01e:	00 00       	nop
   1e020:	9e c0       	rjmp	.+316    	; 0x1e15e <__bad_interrupt>
   1e022:	00 00       	nop
   1e024:	9c c0       	rjmp	.+312    	; 0x1e15e <__bad_interrupt>
   1e026:	00 00       	nop
   1e028:	c8 c5       	rjmp	.+2960   	; 0x1ebba <__vector_10>
   1e02a:	00 00       	nop
   1e02c:	98 c0       	rjmp	.+304    	; 0x1e15e <__bad_interrupt>
   1e02e:	00 00       	nop
   1e030:	96 c0       	rjmp	.+300    	; 0x1e15e <__bad_interrupt>
   1e032:	00 00       	nop
   1e034:	94 c0       	rjmp	.+296    	; 0x1e15e <__bad_interrupt>
   1e036:	00 00       	nop
   1e038:	92 c0       	rjmp	.+292    	; 0x1e15e <__bad_interrupt>
   1e03a:	00 00       	nop
   1e03c:	90 c0       	rjmp	.+288    	; 0x1e15e <__bad_interrupt>
   1e03e:	00 00       	nop
   1e040:	8e c0       	rjmp	.+284    	; 0x1e15e <__bad_interrupt>
   1e042:	00 00       	nop
   1e044:	8c c0       	rjmp	.+280    	; 0x1e15e <__bad_interrupt>
   1e046:	00 00       	nop
   1e048:	8a c0       	rjmp	.+276    	; 0x1e15e <__bad_interrupt>
   1e04a:	00 00       	nop
   1e04c:	88 c0       	rjmp	.+272    	; 0x1e15e <__bad_interrupt>
   1e04e:	00 00       	nop
   1e050:	7c c2       	rjmp	.+1272   	; 0x1e54a <__vector_20>
   1e052:	00 00       	nop
   1e054:	84 c0       	rjmp	.+264    	; 0x1e15e <__bad_interrupt>
   1e056:	00 00       	nop
   1e058:	82 c0       	rjmp	.+260    	; 0x1e15e <__bad_interrupt>
   1e05a:	00 00       	nop
   1e05c:	80 c0       	rjmp	.+256    	; 0x1e15e <__bad_interrupt>
   1e05e:	00 00       	nop
   1e060:	7e c0       	rjmp	.+252    	; 0x1e15e <__bad_interrupt>
   1e062:	00 00       	nop
   1e064:	7c c0       	rjmp	.+248    	; 0x1e15e <__bad_interrupt>
   1e066:	00 00       	nop
   1e068:	7a c0       	rjmp	.+244    	; 0x1e15e <__bad_interrupt>
   1e06a:	00 00       	nop
   1e06c:	78 c0       	rjmp	.+240    	; 0x1e15e <__bad_interrupt>
   1e06e:	00 00       	nop
   1e070:	76 c0       	rjmp	.+236    	; 0x1e15e <__bad_interrupt>
   1e072:	00 00       	nop
   1e074:	74 c0       	rjmp	.+232    	; 0x1e15e <__bad_interrupt>
   1e076:	00 00       	nop
   1e078:	72 c0       	rjmp	.+228    	; 0x1e15e <__bad_interrupt>
   1e07a:	00 00       	nop
   1e07c:	70 c0       	rjmp	.+224    	; 0x1e15e <__bad_interrupt>
   1e07e:	00 00       	nop
   1e080:	6e c0       	rjmp	.+220    	; 0x1e15e <__bad_interrupt>
   1e082:	00 00       	nop
   1e084:	6c c0       	rjmp	.+216    	; 0x1e15e <__bad_interrupt>
   1e086:	00 00       	nop
   1e088:	6a c0       	rjmp	.+212    	; 0x1e15e <__bad_interrupt>
   1e08a:	00 00       	nop
   1e08c:	68 c0       	rjmp	.+208    	; 0x1e15e <__bad_interrupt>
   1e08e:	00 00       	nop
   1e090:	66 c0       	rjmp	.+204    	; 0x1e15e <__bad_interrupt>
   1e092:	00 00       	nop
   1e094:	64 c0       	rjmp	.+200    	; 0x1e15e <__bad_interrupt>
	...

0001e098 <__ctors_end>:
   1e098:	11 24       	eor	r1, r1
   1e09a:	1f be       	out	0x3f, r1	; 63
   1e09c:	cf ef       	ldi	r28, 0xFF	; 255
   1e09e:	d0 e2       	ldi	r29, 0x20	; 32
   1e0a0:	de bf       	out	0x3e, r29	; 62
   1e0a2:	cd bf       	out	0x3d, r28	; 61

0001e0a4 <Application_Jump_Check>:

		/* Re-enable JTAG debugging */
		JTAG_ENABLE();
	#else
		/* Check if the device's BOOTRST fuse is set */
		if (!(BootloaderAPI_ReadFuse(GET_HIGH_FUSE_BITS) & ~FUSE_BOOTRST))
   1e0a4:	83 e0       	ldi	r24, 0x03	; 3
   1e0a6:	90 e0       	ldi	r25, 0x00	; 0
   1e0a8:	b6 d0       	rcall	.+364    	; 0x1e216 <BootloaderAPI_ReadFuse>
   1e0aa:	80 fd       	sbrc	r24, 0
   1e0ac:	12 c0       	rjmp	.+36     	; 0x1e0d2 <Application_Jump_Check+0x2e>
		{
			/* If the reset source was not an external reset or the key is correct, clear it and jump to the application */
			if (!(MCUSR & (1 << EXTRF)) || (MagicBootKey == MAGIC_BOOT_KEY))
   1e0ae:	04 b6       	in	r0, 0x34	; 52
   1e0b0:	01 fe       	sbrs	r0, 1
   1e0b2:	0a c0       	rjmp	.+20     	; 0x1e0c8 <Application_Jump_Check+0x24>
   1e0b4:	81 e0       	ldi	r24, 0x01	; 1
   1e0b6:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <__bss_end>
   1e0ba:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <__bss_end+0x1>
   1e0be:	22 34       	cpi	r18, 0x42	; 66
   1e0c0:	3c 4d       	sbci	r19, 0xDC	; 220
   1e0c2:	19 f0       	breq	.+6      	; 0x1e0ca <Application_Jump_Check+0x26>
   1e0c4:	80 e0       	ldi	r24, 0x00	; 0
   1e0c6:	01 c0       	rjmp	.+2      	; 0x1e0ca <Application_Jump_Check+0x26>
			  JumpToApplication = true;
   1e0c8:	81 e0       	ldi	r24, 0x01	; 1

			/* Clear reset source */
			MCUSR &= ~(1 << EXTRF);
   1e0ca:	94 b7       	in	r25, 0x34	; 52
   1e0cc:	9d 7f       	andi	r25, 0xFD	; 253
   1e0ce:	94 bf       	out	0x34, r25	; 52
   1e0d0:	11 c0       	rjmp	.+34     	; 0x1e0f4 <Application_Jump_Check+0x50>
		}
		else
		{
			/* If the reset source was the bootloader and the key is correct, clear it and jump to the application;
			 * this can happen in the HWBE fuse is set, and the HBE pin is low during the watchdog reset */
			if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
   1e0d2:	04 b6       	in	r0, 0x34	; 52
   1e0d4:	03 fe       	sbrs	r0, 3
   1e0d6:	0a c0       	rjmp	.+20     	; 0x1e0ec <Application_Jump_Check+0x48>
   1e0d8:	81 e0       	ldi	r24, 0x01	; 1
   1e0da:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <__bss_end>
   1e0de:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <__bss_end+0x1>
   1e0e2:	22 34       	cpi	r18, 0x42	; 66
   1e0e4:	3c 4d       	sbci	r19, 0xDC	; 220
   1e0e6:	19 f0       	breq	.+6      	; 0x1e0ee <Application_Jump_Check+0x4a>
   1e0e8:	80 e0       	ldi	r24, 0x00	; 0
   1e0ea:	01 c0       	rjmp	.+2      	; 0x1e0ee <Application_Jump_Check+0x4a>
 *  start key has been loaded into \ref MagicBootKey. If the bootloader started via the watchdog and the key is valid,
 *  this will force the user application to start via a software jump.
 */
void Application_Jump_Check(void)
{
	bool JumpToApplication = false;
   1e0ec:	80 e0       	ldi	r24, 0x00	; 0
			 * this can happen in the HWBE fuse is set, and the HBE pin is low during the watchdog reset */
			if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
				JumpToApplication = true;

			/* Clear reset source */
			MCUSR &= ~(1 << WDRF);
   1e0ee:	94 b7       	in	r25, 0x34	; 52
   1e0f0:	97 7f       	andi	r25, 0xF7	; 247
   1e0f2:	94 bf       	out	0x34, r25	; 52
		}
	#endif

	/* Don't run the user application if the reset vector is blank (no app loaded) */
	bool ApplicationValid = (pgm_read_word_near(0) != 0xFFFF);
   1e0f4:	20 e0       	ldi	r18, 0x00	; 0
   1e0f6:	30 e0       	ldi	r19, 0x00	; 0
   1e0f8:	f9 01       	movw	r30, r18
   1e0fa:	45 91       	lpm	r20, Z+
   1e0fc:	54 91       	lpm	r21, Z

	/* If a request has been made to jump to the user application, honor it */
	if (JumpToApplication && ApplicationValid)
   1e0fe:	88 23       	and	r24, r24
   1e100:	b9 f0       	breq	.+46     	; 0x1e130 <__do_copy_data>
   1e102:	4f 3f       	cpi	r20, 0xFF	; 255
   1e104:	5f 4f       	sbci	r21, 0xFF	; 255
   1e106:	a1 f0       	breq	.+40     	; 0x1e130 <__do_copy_data>
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1 << WDRF);
   1e108:	84 b7       	in	r24, 0x34	; 52
   1e10a:	87 7f       	andi	r24, 0xF7	; 247
   1e10c:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
   1e10e:	0f b6       	in	r0, 0x3f	; 63
   1e110:	f8 94       	cli
   1e112:	a8 95       	wdr
   1e114:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e118:	88 61       	ori	r24, 0x18	; 24
   1e11a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e11e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e122:	0f be       	out	0x3f, r0	; 63
		wdt_disable();

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
   1e124:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <__bss_end+0x1>
   1e128:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <__bss_end>

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
   1e12c:	f9 01       	movw	r30, r18
   1e12e:	09 95       	icall

0001e130 <__do_copy_data>:
   1e130:	11 e0       	ldi	r17, 0x01	; 1
   1e132:	a0 e0       	ldi	r26, 0x00	; 0
   1e134:	b1 e0       	ldi	r27, 0x01	; 1
   1e136:	ee ee       	ldi	r30, 0xEE	; 238
   1e138:	fe ee       	ldi	r31, 0xEE	; 238
   1e13a:	01 e0       	ldi	r16, 0x01	; 1
   1e13c:	0b bf       	out	0x3b, r16	; 59
   1e13e:	02 c0       	rjmp	.+4      	; 0x1e144 <__do_copy_data+0x14>
   1e140:	07 90       	elpm	r0, Z+
   1e142:	0d 92       	st	X+, r0
   1e144:	a6 36       	cpi	r26, 0x66	; 102
   1e146:	b1 07       	cpc	r27, r17
   1e148:	d9 f7       	brne	.-10     	; 0x1e140 <__do_copy_data+0x10>

0001e14a <__do_clear_bss>:
   1e14a:	21 e0       	ldi	r18, 0x01	; 1
   1e14c:	a6 e6       	ldi	r26, 0x66	; 102
   1e14e:	b1 e0       	ldi	r27, 0x01	; 1
   1e150:	01 c0       	rjmp	.+2      	; 0x1e154 <.do_clear_bss_start>

0001e152 <.do_clear_bss_loop>:
   1e152:	1d 92       	st	X+, r1

0001e154 <.do_clear_bss_start>:
   1e154:	a3 38       	cpi	r26, 0x83	; 131
   1e156:	b2 07       	cpc	r27, r18
   1e158:	e1 f7       	brne	.-8      	; 0x1e152 <.do_clear_bss_loop>
   1e15a:	b8 d1       	rcall	.+880    	; 0x1e4cc <main>
   1e15c:	c6 c6       	rjmp	.+3468   	; 0x1eeea <_exit>

0001e15e <__bad_interrupt>:
   1e15e:	50 cf       	rjmp	.-352    	; 0x1e000 <__vectors>

0001e160 <BootloaderAPI_ErasePage>:
{
	/* Determine if the given page address is correctly aligned to the
	   start of a flash page. */
	bool PageAddressIsAligned = !(Address & (SPM_PAGESIZE - 1));

	return (Address < BOOT_START_ADDR) && PageAddressIsAligned;
   1e160:	61 15       	cp	r22, r1
   1e162:	20 ee       	ldi	r18, 0xE0	; 224
   1e164:	72 07       	cpc	r23, r18
   1e166:	21 e0       	ldi	r18, 0x01	; 1
   1e168:	82 07       	cpc	r24, r18
   1e16a:	91 05       	cpc	r25, r1
   1e16c:	10 f4       	brcc	.+4      	; 0x1e172 <BootloaderAPI_ErasePage+0x12>
   1e16e:	21 e0       	ldi	r18, 0x01	; 1
   1e170:	61 11       	cpse	r22, r1
   1e172:	20 e0       	ldi	r18, 0x00	; 0
}

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	if (! IsPageAddressValid(Address))
   1e174:	20 ff       	sbrs	r18, 0
   1e176:	16 c0       	rjmp	.+44     	; 0x1e1a4 <BootloaderAPI_ErasePage+0x44>
		return;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
   1e178:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1e17a:	f8 94       	cli
	{
		boot_page_erase_safe(Address);
   1e17c:	07 b6       	in	r0, 0x37	; 55
   1e17e:	00 fc       	sbrc	r0, 0
   1e180:	fd cf       	rjmp	.-6      	; 0x1e17c <BootloaderAPI_ErasePage+0x1c>
   1e182:	f9 99       	sbic	0x1f, 1	; 31
   1e184:	fe cf       	rjmp	.-4      	; 0x1e182 <BootloaderAPI_ErasePage+0x22>
   1e186:	33 e0       	ldi	r19, 0x03	; 3
   1e188:	fb 01       	movw	r30, r22
   1e18a:	80 93 5b 00 	sts	0x005B, r24	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e18e:	30 93 57 00 	sts	0x0057, r19	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e192:	e8 95       	spm
		boot_spm_busy_wait();
   1e194:	07 b6       	in	r0, 0x37	; 55
   1e196:	00 fc       	sbrc	r0, 0
   1e198:	fd cf       	rjmp	.-6      	; 0x1e194 <BootloaderAPI_ErasePage+0x34>
		boot_rww_enable();
   1e19a:	91 e1       	ldi	r25, 0x11	; 17
   1e19c:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e1a0:	e8 95       	spm
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
   1e1a2:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
   1e1a4:	08 95       	ret

0001e1a6 <BootloaderAPI_WritePage>:
{
	/* Determine if the given page address is correctly aligned to the
	   start of a flash page. */
	bool PageAddressIsAligned = !(Address & (SPM_PAGESIZE - 1));

	return (Address < BOOT_START_ADDR) && PageAddressIsAligned;
   1e1a6:	61 15       	cp	r22, r1
   1e1a8:	20 ee       	ldi	r18, 0xE0	; 224
   1e1aa:	72 07       	cpc	r23, r18
   1e1ac:	21 e0       	ldi	r18, 0x01	; 1
   1e1ae:	82 07       	cpc	r24, r18
   1e1b0:	91 05       	cpc	r25, r1
   1e1b2:	10 f4       	brcc	.+4      	; 0x1e1b8 <BootloaderAPI_WritePage+0x12>
   1e1b4:	21 e0       	ldi	r18, 0x01	; 1
   1e1b6:	61 11       	cpse	r22, r1
   1e1b8:	20 e0       	ldi	r18, 0x00	; 0
	}
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	if (! IsPageAddressValid(Address))
   1e1ba:	20 ff       	sbrs	r18, 0
   1e1bc:	16 c0       	rjmp	.+44     	; 0x1e1ea <BootloaderAPI_WritePage+0x44>
		return;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
   1e1be:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1e1c0:	f8 94       	cli
	{
		boot_page_write_safe(Address);
   1e1c2:	07 b6       	in	r0, 0x37	; 55
   1e1c4:	00 fc       	sbrc	r0, 0
   1e1c6:	fd cf       	rjmp	.-6      	; 0x1e1c2 <BootloaderAPI_WritePage+0x1c>
   1e1c8:	f9 99       	sbic	0x1f, 1	; 31
   1e1ca:	fe cf       	rjmp	.-4      	; 0x1e1c8 <BootloaderAPI_WritePage+0x22>
   1e1cc:	35 e0       	ldi	r19, 0x05	; 5
   1e1ce:	fb 01       	movw	r30, r22
   1e1d0:	80 93 5b 00 	sts	0x005B, r24	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e1d4:	30 93 57 00 	sts	0x0057, r19	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e1d8:	e8 95       	spm
		boot_spm_busy_wait();
   1e1da:	07 b6       	in	r0, 0x37	; 55
   1e1dc:	00 fc       	sbrc	r0, 0
   1e1de:	fd cf       	rjmp	.-6      	; 0x1e1da <BootloaderAPI_WritePage+0x34>
		boot_rww_enable();
   1e1e0:	91 e1       	ldi	r25, 0x11	; 17
   1e1e2:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e1e6:	e8 95       	spm
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
   1e1e8:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
   1e1ea:	08 95       	ret

0001e1ec <BootloaderAPI_FillWord>:
	}
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
   1e1ec:	07 b6       	in	r0, 0x37	; 55
   1e1ee:	00 fc       	sbrc	r0, 0
   1e1f0:	fd cf       	rjmp	.-6      	; 0x1e1ec <BootloaderAPI_FillWord>
   1e1f2:	f9 99       	sbic	0x1f, 1	; 31
   1e1f4:	fe cf       	rjmp	.-4      	; 0x1e1f2 <BootloaderAPI_FillWord+0x6>
   1e1f6:	21 e0       	ldi	r18, 0x01	; 1
   1e1f8:	0a 01       	movw	r0, r20
   1e1fa:	fb 01       	movw	r30, r22
   1e1fc:	80 93 5b 00 	sts	0x005B, r24	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e200:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e204:	e8 95       	spm
   1e206:	11 24       	eor	r1, r1
   1e208:	08 95       	ret

0001e20a <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
   1e20a:	21 e2       	ldi	r18, 0x21	; 33
   1e20c:	fc 01       	movw	r30, r24
   1e20e:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e212:	84 91       	lpm	r24, Z
}
   1e214:	08 95       	ret

0001e216 <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
   1e216:	29 e0       	ldi	r18, 0x09	; 9
   1e218:	fc 01       	movw	r30, r24
   1e21a:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e21e:	84 91       	lpm	r24, Z
}
   1e220:	08 95       	ret

0001e222 <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
   1e222:	e1 e0       	ldi	r30, 0x01	; 1
   1e224:	f0 e0       	ldi	r31, 0x00	; 0
   1e226:	89 e0       	ldi	r24, 0x09	; 9
   1e228:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e22c:	84 91       	lpm	r24, Z
}
   1e22e:	08 95       	ret

0001e230 <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
   1e230:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
   1e232:	f8 94       	cli
	{
		boot_lock_bits_set_safe(LockBits);
   1e234:	07 b6       	in	r0, 0x37	; 55
   1e236:	00 fc       	sbrc	r0, 0
   1e238:	fd cf       	rjmp	.-6      	; 0x1e234 <BootloaderAPI_WriteLock+0x4>
   1e23a:	f9 99       	sbic	0x1f, 1	; 31
   1e23c:	fe cf       	rjmp	.-4      	; 0x1e23a <BootloaderAPI_WriteLock+0xa>
   1e23e:	80 95       	com	r24
   1e240:	29 e0       	ldi	r18, 0x09	; 9
   1e242:	e1 e0       	ldi	r30, 0x01	; 1
   1e244:	f0 e0       	ldi	r31, 0x00	; 0
   1e246:	08 2e       	mov	r0, r24
   1e248:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e24c:	e8 95       	spm
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
   1e24e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
   1e250:	08 95       	ret

0001e252 <DiscardFillerBytes>:
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
	while (NumberOfBytes--)
   1e252:	88 23       	and	r24, r24
   1e254:	b9 f0       	breq	.+46     	; 0x1e284 <DiscardFillerBytes+0x32>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e256:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1e25a:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	{
		if (!(Endpoint_BytesInEndpoint()))
   1e25e:	23 2b       	or	r18, r19
   1e260:	69 f4       	brne	.+26     	; 0x1e27c <DiscardFillerBytes+0x2a>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1e262:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e266:	9b 7f       	andi	r25, 0xFB	; 251
   1e268:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e26c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		{
			Endpoint_ClearOUT();

			/* Wait until next data packet received */
			while (!(Endpoint_IsOUTReceived()))
   1e270:	92 fd       	sbrc	r25, 2
   1e272:	06 c0       	rjmp	.+12     	; 0x1e280 <DiscardFillerBytes+0x2e>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e274:	9e b3       	in	r25, 0x1e	; 30
   1e276:	91 11       	cpse	r25, r1
   1e278:	f9 cf       	rjmp	.-14     	; 0x1e26c <DiscardFillerBytes+0x1a>
   1e27a:	04 c0       	rjmp	.+8      	; 0x1e284 <DiscardFillerBytes+0x32>
			static inline void Endpoint_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
   1e27c:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
	while (NumberOfBytes--)
   1e280:	81 50       	subi	r24, 0x01	; 1
   1e282:	e7 cf       	rjmp	.-50     	; 0x1e252 <DiscardFillerBytes>
   1e284:	08 95       	ret

0001e286 <LoadStartEndAddresses>:
{
	union
	{
		uint8_t  Bytes[2];
		uint16_t Word;
	} Address[2] = {{.Bytes = {SentCommand.Data[2], SentCommand.Data[1]}},
   1e286:	ee e6       	ldi	r30, 0x6E	; 110
   1e288:	f1 e0       	ldi	r31, 0x01	; 1
   1e28a:	35 81       	ldd	r19, Z+5	; 0x05
   1e28c:	24 81       	ldd	r18, Z+4	; 0x04
	                {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}}};

	/* Load in the start and ending read addresses from the sent data packet */
	StartAddr = Address[0].Word;
   1e28e:	93 81       	ldd	r25, Z+3	; 0x03
   1e290:	82 81       	ldd	r24, Z+2	; 0x02
   1e292:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <StartAddr>
   1e296:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <StartAddr+0x1>
	EndAddr   = Address[1].Word;
   1e29a:	c9 01       	movw	r24, r18
   1e29c:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <__data_end>
   1e2a0:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <__data_end+0x1>
   1e2a4:	08 95       	ret

0001e2a6 <ProcessBootloaderCommand>:
/** Routine to process an issued command from the host, via a DFU_DNLOAD request wrapper. This routine ensures
 *  that the command is allowed based on the current secure mode flag value, and passes the command off to the
 *  appropriate handler function.
 */
static void ProcessBootloaderCommand(void)
{
   1e2a6:	cf 92       	push	r12
   1e2a8:	df 92       	push	r13
   1e2aa:	ef 92       	push	r14
   1e2ac:	ff 92       	push	r15
   1e2ae:	1f 93       	push	r17
   1e2b0:	cf 93       	push	r28
   1e2b2:	df 93       	push	r29
   1e2b4:	00 d0       	rcall	.+0      	; 0x1e2b6 <ProcessBootloaderCommand+0x10>
   1e2b6:	1f 92       	push	r1
   1e2b8:	cd b7       	in	r28, 0x3d	; 61
   1e2ba:	de b7       	in	r29, 0x3e	; 62
	/* Check if device is in secure mode */
	if (IsSecure)
   1e2bc:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <IsSecure>
   1e2c0:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <SentCommand>
   1e2c4:	99 23       	and	r25, r25
   1e2c6:	d1 f0       	breq	.+52     	; 0x1e2fc <ProcessBootloaderCommand+0x56>
	{
		/* Don't process command unless it is a READ or chip erase command */
		if (!(((SentCommand.Command == COMMAND_WRITE)             &&
   1e2c8:	84 30       	cpi	r24, 0x04	; 4
   1e2ca:	49 f4       	brne	.+18     	; 0x1e2de <ProcessBootloaderCommand+0x38>
   1e2cc:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <SentCommand+0x1>
   1e2d0:	81 11       	cpse	r24, r1
   1e2d2:	08 c0       	rjmp	.+16     	; 0x1e2e4 <ProcessBootloaderCommand+0x3e>
		        IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF)) ||
   1e2d4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SentCommand+0x2>
   1e2d8:	8f 3f       	cpi	r24, 0xFF	; 255
   1e2da:	21 f4       	brne	.+8      	; 0x1e2e4 <ProcessBootloaderCommand+0x3e>
   1e2dc:	5d c0       	rjmp	.+186    	; 0x1e398 <ProcessBootloaderCommand+0xf2>
{
	/* Check if device is in secure mode */
	if (IsSecure)
	{
		/* Don't process command unless it is a READ or chip erase command */
		if (!(((SentCommand.Command == COMMAND_WRITE)             &&
   1e2de:	85 30       	cpi	r24, 0x05	; 5
   1e2e0:	09 f4       	brne	.+2      	; 0x1e2e4 <ProcessBootloaderCommand+0x3e>
   1e2e2:	ab c0       	rjmp	.+342    	; 0x1e43a <ProcessBootloaderCommand+0x194>
		        IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF)) ||
			   (SentCommand.Command == COMMAND_READ)))
		{
			/* Set the state and status variables to indicate the error */
			DFU_State  = dfuERROR;
   1e2e4:	8a e0       	ldi	r24, 0x0A	; 10
   1e2e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			DFU_Status = errWRITE;
   1e2ea:	83 e0       	ldi	r24, 0x03	; 3
   1e2ec:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <DFU_Status>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1e2f0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1e2f4:	80 62       	ori	r24, 0x20	; 32
   1e2f6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1e2fa:	dd c0       	rjmp	.+442    	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
			return;
		}
	}

	/* Dispatch the required command processing routine based on the command type */
	switch (SentCommand.Command)
   1e2fc:	84 30       	cpi	r24, 0x04	; 4
   1e2fe:	09 f4       	brne	.+2      	; 0x1e302 <ProcessBootloaderCommand+0x5c>
   1e300:	4b c0       	rjmp	.+150    	; 0x1e398 <ProcessBootloaderCommand+0xf2>
   1e302:	28 f4       	brcc	.+10     	; 0x1e30e <ProcessBootloaderCommand+0x68>
   1e304:	81 30       	cpi	r24, 0x01	; 1
   1e306:	51 f0       	breq	.+20     	; 0x1e31c <ProcessBootloaderCommand+0x76>
   1e308:	83 30       	cpi	r24, 0x03	; 3
   1e30a:	d9 f0       	breq	.+54     	; 0x1e342 <ProcessBootloaderCommand+0x9c>
   1e30c:	d4 c0       	rjmp	.+424    	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
   1e30e:	85 30       	cpi	r24, 0x05	; 5
   1e310:	09 f4       	brne	.+2      	; 0x1e314 <ProcessBootloaderCommand+0x6e>
   1e312:	93 c0       	rjmp	.+294    	; 0x1e43a <ProcessBootloaderCommand+0x194>
   1e314:	86 30       	cpi	r24, 0x06	; 6
   1e316:	09 f4       	brne	.+2      	; 0x1e31a <ProcessBootloaderCommand+0x74>
   1e318:	bb c0       	rjmp	.+374    	; 0x1e490 <ProcessBootloaderCommand+0x1ea>
   1e31a:	cd c0       	rjmp	.+410    	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
/** Handler for a Memory Program command issued by the host. This routine handles the preparations needed
 *  to write subsequent data from the host into the specified memory.
 */
static void ProcessMemProgCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Write FLASH command
   1e31c:	10 91 6f 01 	lds	r17, 0x016F	; 0x80016f <SentCommand+0x1>
   1e320:	12 30       	cpi	r17, 0x02	; 2
   1e322:	08 f0       	brcs	.+2      	; 0x1e326 <ProcessBootloaderCommand+0x80>
   1e324:	c8 c0       	rjmp	.+400    	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
	    IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                            // Write EEPROM command
	{
		/* Load in the start and ending read addresses */
		LoadStartEndAddresses();
   1e326:	af df       	rcall	.-162    	; 0x1e286 <LoadStartEndAddresses>

		/* If FLASH is being written to, we need to pre-erase the first page to write to */
		if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))
   1e328:	11 11       	cpse	r17, r1
   1e32a:	09 c0       	rjmp	.+18     	; 0x1e33e <ProcessBootloaderCommand+0x98>
		{
			union
			{
				uint16_t Words[2];
				uint32_t Long;
			} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};
   1e32c:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <StartAddr>
   1e330:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <StartAddr+0x1>
   1e334:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <Flash64KBPage>
   1e338:	82 2f       	mov	r24, r18

			/* Erase the current page's temp buffer */
			BootloaderAPI_ErasePage(CurrFlashAddress.Long);
   1e33a:	90 e0       	ldi	r25, 0x00	; 0
   1e33c:	11 df       	rcall	.-478    	; 0x1e160 <BootloaderAPI_ErasePage>
		}

		/* Set the state so that the next DNLOAD requests reads in the firmware */
		DFU_State = dfuDNLOAD_IDLE;
   1e33e:	85 e0       	ldi	r24, 0x05	; 5
   1e340:	07 c0       	rjmp	.+14     	; 0x1e350 <ProcessBootloaderCommand+0xaa>
 *  to read subsequent data from the specified memory out to the host, as well as implementing the memory
 *  blank check command.
 */
static void ProcessMemReadCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Read FLASH command
   1e342:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <SentCommand+0x1>
   1e346:	98 2f       	mov	r25, r24
   1e348:	9d 7f       	andi	r25, 0xFD	; 253
        IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))                            // Read EEPROM command
	{
		/* Load in the start and ending read addresses */
		LoadStartEndAddresses();
   1e34a:	29 f4       	brne	.+10     	; 0x1e356 <ProcessBootloaderCommand+0xb0>
   1e34c:	9c df       	rcall	.-200    	; 0x1e286 <LoadStartEndAddresses>

		/* Set the state so that the next UPLOAD requests read out the firmware */
		DFU_State = dfuUPLOAD_IDLE;
   1e34e:	89 e0       	ldi	r24, 0x09	; 9
   1e350:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
   1e354:	b0 c0       	rjmp	.+352    	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
   1e356:	81 30       	cpi	r24, 0x01	; 1
   1e358:	09 f0       	breq	.+2      	; 0x1e35c <ProcessBootloaderCommand+0xb6>
   1e35a:	ad c0       	rjmp	.+346    	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
   1e35c:	80 e0       	ldi	r24, 0x00	; 0
   1e35e:	90 e0       	ldi	r25, 0x00	; 0
   1e360:	dc 01       	movw	r26, r24

		while (CurrFlashAddress < (uint32_t)BOOT_START_ADDR)
		{
			/* Check if the current byte is not blank */
			#if (FLASHEND > 0xFFFF)
			if (pgm_read_byte_far(CurrFlashAddress) != 0xFF)
   1e362:	ab bf       	out	0x3b, r26	; 59
   1e364:	fc 01       	movw	r30, r24
   1e366:	27 91       	elpm	r18, Z+
   1e368:	2f 3f       	cpi	r18, 0xFF	; 255
   1e36a:	59 f0       	breq	.+22     	; 0x1e382 <ProcessBootloaderCommand+0xdc>
			#else
			if (pgm_read_byte(CurrFlashAddress) != 0xFF)
			#endif
			{
				/* Save the location of the first non-blank byte for response back to the host */
				Flash64KBPage = (CurrFlashAddress >> 16);
   1e36c:	a0 93 6a 01 	sts	0x016A, r26	; 0x80016a <Flash64KBPage>
				StartAddr     = CurrFlashAddress;
   1e370:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <StartAddr+0x1>
   1e374:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <StartAddr>

				/* Set state and status variables to the appropriate error values */
				DFU_State  = dfuERROR;
   1e378:	8a e0       	ldi	r24, 0x0A	; 10
   1e37a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				DFU_Status = errCHECK_ERASED;
   1e37e:	85 e0       	ldi	r24, 0x05	; 5
   1e380:	98 c0       	rjmp	.+304    	; 0x1e4b2 <ProcessBootloaderCommand+0x20c>

				break;
			}

			CurrFlashAddress++;
   1e382:	01 96       	adiw	r24, 0x01	; 1
   1e384:	a1 1d       	adc	r26, r1
   1e386:	b1 1d       	adc	r27, r1
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
	{
		uint32_t CurrFlashAddress = 0;

		while (CurrFlashAddress < (uint32_t)BOOT_START_ADDR)
   1e388:	81 15       	cp	r24, r1
   1e38a:	20 ee       	ldi	r18, 0xE0	; 224
   1e38c:	92 07       	cpc	r25, r18
   1e38e:	21 e0       	ldi	r18, 0x01	; 1
   1e390:	a2 07       	cpc	r26, r18
   1e392:	b1 05       	cpc	r27, r1
   1e394:	31 f7       	brne	.-52     	; 0x1e362 <ProcessBootloaderCommand+0xbc>
   1e396:	8f c0       	rjmp	.+286    	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
/** Handler for a Data Write command issued by the host. This routine handles non-programming commands such as
 *  bootloader exit (both via software jumps and hardware watchdog resets) and flash memory erasure.
 */
static void ProcessWriteCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x03))                            // Start application
   1e398:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <SentCommand+0x1>
   1e39c:	83 30       	cpi	r24, 0x03	; 3
   1e39e:	91 f5       	brne	.+100    	; 0x1e404 <ProcessBootloaderCommand+0x15e>
	{
		/* Indicate that the bootloader is terminating */
		WaitForExit = true;
   1e3a0:	81 e0       	ldi	r24, 0x01	; 1
   1e3a2:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <WaitForExit>

		/* Check if data supplied for the Start Program command - no data executes the program */
		if (SentCommand.DataSize)
   1e3a6:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <SentCommand+0x6>
   1e3aa:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <SentCommand+0x7>
   1e3ae:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SentCommand+0x2>
   1e3b2:	30 97       	sbiw	r30, 0x00	; 0
   1e3b4:	61 f0       	breq	.+24     	; 0x1e3ce <ProcessBootloaderCommand+0x128>
		{
			if (SentCommand.Data[1] == 0x01)                                   // Start via jump
   1e3b6:	81 30       	cpi	r24, 0x01	; 1
   1e3b8:	09 f0       	breq	.+2      	; 0x1e3bc <ProcessBootloaderCommand+0x116>
   1e3ba:	7d c0       	rjmp	.+250    	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
			{
				union
				{
					uint8_t  Bytes[2];
					AppPtr_t FuncPtr;
				} Address = {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}};
   1e3bc:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <SentCommand+0x5>
   1e3c0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SentCommand+0x4>

				/* Load in the jump address into the application start address pointer */
				AppStartPtr = Address.FuncPtr;
   1e3c4:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <AppStartPtr>
   1e3c8:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <AppStartPtr+0x1>
   1e3cc:	74 c0       	rjmp	.+232    	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
			}
		}
		else
		{
			if (SentCommand.Data[1] == 0x00)                                   // Start via watchdog
   1e3ce:	81 11       	cpse	r24, r1
   1e3d0:	11 c0       	rjmp	.+34     	; 0x1e3f4 <ProcessBootloaderCommand+0x14e>
			{
				/* Unlock the forced application start mode of the bootloader if it is restarted */
				MagicBootKey = MAGIC_BOOT_KEY;
   1e3d2:	82 e4       	ldi	r24, 0x42	; 66
   1e3d4:	9c ed       	ldi	r25, 0xDC	; 220
   1e3d6:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <__bss_end+0x1>
   1e3da:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <__bss_end>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
   1e3de:	9c e0       	ldi	r25, 0x0C	; 12
   1e3e0:	88 e1       	ldi	r24, 0x18	; 24
   1e3e2:	0f b6       	in	r0, 0x3f	; 63
   1e3e4:	f8 94       	cli
   1e3e6:	a8 95       	wdr
   1e3e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e3ec:	0f be       	out	0x3f, r0	; 63
   1e3ee:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e3f2:	61 c0       	rjmp	.+194    	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
				wdt_enable(WDTO_250MS);
			}
			else                                                               // Start via jump
			{
				/* Set the flag to terminate the bootloader at next opportunity if a valid application has been loaded */
				if (pgm_read_word_near(0) == 0xFFFF)
   1e3f4:	85 91       	lpm	r24, Z+
   1e3f6:	94 91       	lpm	r25, Z
   1e3f8:	01 96       	adiw	r24, 0x01	; 1
   1e3fa:	09 f0       	breq	.+2      	; 0x1e3fe <ProcessBootloaderCommand+0x158>
   1e3fc:	5c c0       	rjmp	.+184    	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
				  RunBootloader = false;
   1e3fe:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <RunBootloader>
   1e402:	59 c0       	rjmp	.+178    	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
			}
		}
	}
	else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
   1e404:	81 11       	cpse	r24, r1
   1e406:	57 c0       	rjmp	.+174    	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
   1e408:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SentCommand+0x2>
   1e40c:	8f 3f       	cpi	r24, 0xFF	; 255
   1e40e:	09 f0       	breq	.+2      	; 0x1e412 <ProcessBootloaderCommand+0x16c>
   1e410:	52 c0       	rjmp	.+164    	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
   1e412:	c1 2c       	mov	r12, r1
   1e414:	d1 2c       	mov	r13, r1
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
			BootloaderAPI_ErasePage(CurrFlashAddress);
   1e416:	76 01       	movw	r14, r12
   1e418:	c7 01       	movw	r24, r14
   1e41a:	b6 01       	movw	r22, r12
   1e41c:	a1 de       	rcall	.-702    	; 0x1e160 <BootloaderAPI_ErasePage>
		}
	}
	else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
   1e41e:	8f ef       	ldi	r24, 0xFF	; 255
   1e420:	d8 1a       	sub	r13, r24
   1e422:	e8 0a       	sbc	r14, r24
   1e424:	f8 0a       	sbc	r15, r24
   1e426:	c1 14       	cp	r12, r1
   1e428:	20 ee       	ldi	r18, 0xE0	; 224
   1e42a:	d2 06       	cpc	r13, r18
   1e42c:	21 e0       	ldi	r18, 0x01	; 1
   1e42e:	e2 06       	cpc	r14, r18
   1e430:	f1 04       	cpc	r15, r1
   1e432:	91 f7       	brne	.-28     	; 0x1e418 <ProcessBootloaderCommand+0x172>
			BootloaderAPI_ErasePage(CurrFlashAddress);

		/* Memory has been erased, reset the security bit so that programming/reading is allowed */
		IsSecure = false;
   1e434:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <IsSecure>
   1e438:	3e c0       	rjmp	.+124    	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
/** Handler for a Data Read command issued by the host. This routine handles bootloader information retrieval
 *  commands such as device signature and bootloader version retrieval.
 */
static void ProcessReadCommand(void)
{
	const uint8_t BootloaderInfo[3] = {BOOTLOADER_VERSION, BOOTLOADER_ID_BYTE1, BOOTLOADER_ID_BYTE2};
   1e43a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <RunBootloader+0x1>
   1e43e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <RunBootloader+0x2>
   1e442:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <RunBootloader+0x3>
   1e446:	89 83       	std	Y+1, r24	; 0x01
   1e448:	9a 83       	std	Y+2, r25	; 0x02
   1e44a:	ab 83       	std	Y+3, r26	; 0x03
	const uint8_t SignatureInfo[4]  = {0x58, AVR_SIGNATURE_1, AVR_SIGNATURE_2, AVR_SIGNATURE_3};

	uint8_t DataIndexToRead    = SentCommand.Data[1];
   1e44c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SentCommand+0x2>
	bool    ReadAddressInvalid = false;

	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))                        // Read bootloader info
   1e450:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <SentCommand+0x1>
   1e454:	91 11       	cpse	r25, r1
   1e456:	07 c0       	rjmp	.+14     	; 0x1e466 <ProcessBootloaderCommand+0x1c0>
	{
		if (DataIndexToRead < 3)
   1e458:	83 30       	cpi	r24, 0x03	; 3
   1e45a:	38 f5       	brcc	.+78     	; 0x1e4aa <ProcessBootloaderCommand+0x204>
		  ResponseByte = BootloaderInfo[DataIndexToRead];
   1e45c:	fe 01       	movw	r30, r28
   1e45e:	e8 0f       	add	r30, r24
   1e460:	f1 1d       	adc	r31, r1
   1e462:	81 81       	ldd	r24, Z+1	; 0x01
   1e464:	12 c0       	rjmp	.+36     	; 0x1e48a <ProcessBootloaderCommand+0x1e4>
		else
		  ReadAddressInvalid = true;
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                    // Read signature byte
   1e466:	91 30       	cpi	r25, 0x01	; 1
   1e468:	31 f5       	brne	.+76     	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
	{
		switch (DataIndexToRead)
   1e46a:	81 33       	cpi	r24, 0x31	; 49
   1e46c:	59 f0       	breq	.+22     	; 0x1e484 <ProcessBootloaderCommand+0x1de>
   1e46e:	20 f4       	brcc	.+8      	; 0x1e478 <ProcessBootloaderCommand+0x1d2>
   1e470:	80 33       	cpi	r24, 0x30	; 48
   1e472:	d9 f4       	brne	.+54     	; 0x1e4aa <ProcessBootloaderCommand+0x204>
		{
			case 0x30:
				ResponseByte = SignatureInfo[0];
   1e474:	88 e5       	ldi	r24, 0x58	; 88
   1e476:	09 c0       	rjmp	.+18     	; 0x1e48a <ProcessBootloaderCommand+0x1e4>
		else
		  ReadAddressInvalid = true;
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                    // Read signature byte
	{
		switch (DataIndexToRead)
   1e478:	80 36       	cpi	r24, 0x60	; 96
   1e47a:	31 f0       	breq	.+12     	; 0x1e488 <ProcessBootloaderCommand+0x1e2>
   1e47c:	81 36       	cpi	r24, 0x61	; 97
   1e47e:	a9 f4       	brne	.+42     	; 0x1e4aa <ProcessBootloaderCommand+0x204>
				break;
			case 0x60:
				ResponseByte = SignatureInfo[2];
				break;
			case 0x61:
				ResponseByte = SignatureInfo[3];
   1e480:	82 e8       	ldi	r24, 0x82	; 130
   1e482:	03 c0       	rjmp	.+6      	; 0x1e48a <ProcessBootloaderCommand+0x1e4>
		{
			case 0x30:
				ResponseByte = SignatureInfo[0];
				break;
			case 0x31:
				ResponseByte = SignatureInfo[1];
   1e484:	8e e1       	ldi	r24, 0x1E	; 30
   1e486:	01 c0       	rjmp	.+2      	; 0x1e48a <ProcessBootloaderCommand+0x1e4>
				break;
			case 0x60:
				ResponseByte = SignatureInfo[2];
   1e488:	87 e9       	ldi	r24, 0x97	; 151
				break;
			case 0x61:
				ResponseByte = SignatureInfo[3];
   1e48a:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <ResponseByte>
   1e48e:	13 c0       	rjmp	.+38     	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
			break;
		case COMMAND_READ:
			ProcessReadCommand();
			break;
		case COMMAND_CHANGE_BASE_ADDR:
			if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x03, 0x00))              // Set 64KB flash page command
   1e490:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <SentCommand+0x1>
   1e494:	83 30       	cpi	r24, 0x03	; 3
   1e496:	79 f4       	brne	.+30     	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
   1e498:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SentCommand+0x2>
   1e49c:	81 11       	cpse	r24, r1
   1e49e:	0b c0       	rjmp	.+22     	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
			  Flash64KBPage = SentCommand.Data[2];
   1e4a0:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <SentCommand+0x3>
   1e4a4:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <Flash64KBPage>
   1e4a8:	06 c0       	rjmp	.+12     	; 0x1e4b6 <ProcessBootloaderCommand+0x210>
	}

	if (ReadAddressInvalid)
	{
		/* Set the state and status variables to indicate the error */
		DFU_State  = dfuERROR;
   1e4aa:	8a e0       	ldi	r24, 0x0A	; 10
   1e4ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		DFU_Status = errADDRESS;
   1e4b0:	88 e0       	ldi	r24, 0x08	; 8
   1e4b2:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <DFU_Status>
			if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x03, 0x00))              // Set 64KB flash page command
			  Flash64KBPage = SentCommand.Data[2];

			break;
	}
}
   1e4b6:	0f 90       	pop	r0
   1e4b8:	0f 90       	pop	r0
   1e4ba:	0f 90       	pop	r0
   1e4bc:	df 91       	pop	r29
   1e4be:	cf 91       	pop	r28
   1e4c0:	1f 91       	pop	r17
   1e4c2:	ff 90       	pop	r15
   1e4c4:	ef 90       	pop	r14
   1e4c6:	df 90       	pop	r13
   1e4c8:	cf 90       	pop	r12
   1e4ca:	08 95       	ret

0001e4cc <main>:

/** Configures all hardware required for the bootloader. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1e4cc:	84 b7       	in	r24, 0x34	; 52
   1e4ce:	87 7f       	andi	r24, 0xF7	; 247
   1e4d0:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
   1e4d2:	0f b6       	in	r0, 0x3f	; 63
   1e4d4:	f8 94       	cli
   1e4d6:	a8 95       	wdr
   1e4d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e4dc:	88 61       	ori	r24, 0x18	; 24
   1e4de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e4e2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e4e6:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
   1e4e8:	90 e0       	ldi	r25, 0x00	; 0
   1e4ea:	80 e8       	ldi	r24, 0x80	; 128
   1e4ec:	0f b6       	in	r0, 0x3f	; 63
   1e4ee:	f8 94       	cli
   1e4f0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
   1e4f4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
   1e4f8:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1e4fa:	c1 e0       	ldi	r28, 0x01	; 1
   1e4fc:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1 << IVSEL);
   1e4fe:	82 e0       	ldi	r24, 0x02	; 2
   1e500:	85 bf       	out	0x35, r24	; 53

	/* Initialize the USB and other board hardware drivers */
	USB_Init();
   1e502:	40 d3       	rcall	.+1664   	; 0x1eb84 <USB_Init>
	LEDs_Init();

	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
   1e504:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCCR1B = ((1 << CS11) | (1 << CS10));
   1e508:	83 e0       	ldi	r24, 0x03	; 3
   1e50a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
   1e50e:	78 94       	sei

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	/* Run the USB management task while the bootloader is supposed to be running */
	while (RunBootloader || WaitForExit)
   1e510:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <RunBootloader>
   1e514:	88 23       	and	r24, r24
	  USB_USBTask();
   1e516:	11 f0       	breq	.+4      	; 0x1e51c <main+0x50>
   1e518:	c6 d4       	rcall	.+2444   	; 0x1eea6 <USB_USBTask>
   1e51a:	fa cf       	rjmp	.-12     	; 0x1e510 <main+0x44>

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	/* Run the USB management task while the bootloader is supposed to be running */
	while (RunBootloader || WaitForExit)
   1e51c:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <WaitForExit>
   1e520:	81 11       	cpse	r24, r1
   1e522:	fa cf       	rjmp	.-12     	; 0x1e518 <main+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   1e524:	8f e9       	ldi	r24, 0x9F	; 159
   1e526:	9f e0       	ldi	r25, 0x0F	; 15
   1e528:	01 97       	sbiw	r24, 0x01	; 1
   1e52a:	f1 f7       	brne	.-4      	; 0x1e528 <main+0x5c>
   1e52c:	00 c0       	rjmp	.+0      	; 0x1e52e <main+0x62>

/** Resets all configured hardware required for the bootloader back to their original states. */
static void ResetHardware(void)
{
	/* Shut down the USB and other board hardware drivers */
	USB_Disable();
   1e52e:	00 00       	nop
   1e530:	d1 d2       	rcall	.+1442   	; 0x1ead4 <USB_Disable>
	LEDs_Disable();

	/* Disable Bootloader active LED toggle timer */
	TIMSK1 = 0;
   1e532:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCCR1B = 0;
   1e536:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

	/* Relocate the interrupt vector table back to the application section */
	MCUCR = (1 << IVCE);
   1e53a:	81 e0       	ldi	r24, 0x01	; 1
   1e53c:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0;
   1e53e:	15 be       	out	0x35, r1	; 53

	/* Reset configured hardware back to their original states for the user application */
	ResetHardware();

	/* Start the user application */
	AppStartPtr();
   1e540:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <AppStartPtr>
   1e544:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <AppStartPtr+0x1>
   1e548:	09 95       	icall

0001e54a <__vector_20>:
	MCUCR = 0;
}

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
   1e54a:	1f 92       	push	r1
   1e54c:	0f 92       	push	r0
   1e54e:	0f b6       	in	r0, 0x3f	; 63
   1e550:	0f 92       	push	r0
   1e552:	11 24       	eor	r1, r1
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);
}
   1e554:	0f 90       	pop	r0
   1e556:	0f be       	out	0x3f, r0	; 63
   1e558:	0f 90       	pop	r0
   1e55a:	1f 90       	pop	r1
   1e55c:	18 95       	reti

0001e55e <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
   1e55e:	5f 92       	push	r5
   1e560:	6f 92       	push	r6
   1e562:	7f 92       	push	r7
   1e564:	8f 92       	push	r8
   1e566:	9f 92       	push	r9
   1e568:	af 92       	push	r10
   1e56a:	bf 92       	push	r11
   1e56c:	cf 92       	push	r12
   1e56e:	df 92       	push	r13
   1e570:	ef 92       	push	r14
   1e572:	ff 92       	push	r15
   1e574:	0f 93       	push	r16
   1e576:	1f 93       	push	r17
   1e578:	cf 93       	push	r28
   1e57a:	df 93       	push	r29
	/* Ignore any requests that aren't directed to the DFU interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
   1e57c:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_ControlRequest>
   1e580:	8f 77       	andi	r24, 0x7F	; 127
   1e582:	81 32       	cpi	r24, 0x21	; 33
   1e584:	09 f0       	breq	.+2      	; 0x1e588 <EVENT_USB_Device_ControlRequest+0x2a>
   1e586:	dc c1       	rjmp	.+952    	; 0x1e940 <EVENT_USB_Device_ControlRequest+0x3e2>

	/* Activity - toggle indicator LEDs */
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);

	/* Get the size of the command and data from the wLength value */
	SentCommand.DataSize = USB_ControlRequest.wLength;
   1e588:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <USB_ControlRequest+0x6>
   1e58c:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <USB_ControlRequest+0x7>
   1e590:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <SentCommand+0x7>
   1e594:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <SentCommand+0x6>

	switch (USB_ControlRequest.bRequest)
   1e598:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <USB_ControlRequest+0x1>
   1e59c:	83 30       	cpi	r24, 0x03	; 3
   1e59e:	09 f4       	brne	.+2      	; 0x1e5a2 <EVENT_USB_Device_ControlRequest+0x44>
   1e5a0:	89 c1       	rjmp	.+786    	; 0x1e8b4 <EVENT_USB_Device_ControlRequest+0x356>
   1e5a2:	58 f4       	brcc	.+22     	; 0x1e5ba <EVENT_USB_Device_ControlRequest+0x5c>
   1e5a4:	81 30       	cpi	r24, 0x01	; 1
   1e5a6:	d1 f0       	breq	.+52     	; 0x1e5dc <EVENT_USB_Device_ControlRequest+0x7e>
   1e5a8:	82 30       	cpi	r24, 0x02	; 2
   1e5aa:	09 f0       	breq	.+2      	; 0x1e5ae <EVENT_USB_Device_ControlRequest+0x50>
   1e5ac:	c9 c1       	rjmp	.+914    	; 0x1e940 <EVENT_USB_Device_ControlRequest+0x3e2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e5ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e5b2:	87 7f       	andi	r24, 0xF7	; 247
   1e5b4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e5b8:	f0 c0       	rjmp	.+480    	; 0x1e79a <EVENT_USB_Device_ControlRequest+0x23c>
   1e5ba:	85 30       	cpi	r24, 0x05	; 5
   1e5bc:	09 f4       	brne	.+2      	; 0x1e5c0 <EVENT_USB_Device_ControlRequest+0x62>
   1e5be:	a0 c1       	rjmp	.+832    	; 0x1e900 <EVENT_USB_Device_ControlRequest+0x3a2>
   1e5c0:	08 f4       	brcc	.+2      	; 0x1e5c4 <EVENT_USB_Device_ControlRequest+0x66>
   1e5c2:	96 c1       	rjmp	.+812    	; 0x1e8f0 <EVENT_USB_Device_ControlRequest+0x392>
   1e5c4:	86 30       	cpi	r24, 0x06	; 6
   1e5c6:	09 f0       	breq	.+2      	; 0x1e5ca <EVENT_USB_Device_ControlRequest+0x6c>
   1e5c8:	bb c1       	rjmp	.+886    	; 0x1e940 <EVENT_USB_Device_ControlRequest+0x3e2>
   1e5ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e5ce:	87 7f       	andi	r24, 0xF7	; 247
   1e5d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			break;
		case DFU_REQ_ABORT:
			Endpoint_ClearSETUP();

			/* Reset the current state variable to the default idle state */
			DFU_State = dfuIDLE;
   1e5d4:	82 e0       	ldi	r24, 0x02	; 2
   1e5d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
   1e5da:	a2 c1       	rjmp	.+836    	; 0x1e920 <EVENT_USB_Device_ControlRequest+0x3c2>
   1e5dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e5e0:	87 7f       	andi	r24, 0xF7	; 247
   1e5e2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		case DFU_REQ_DNLOAD:
			Endpoint_ClearSETUP();

			/* Check if bootloader is waiting to terminate */
			if (WaitForExit)
   1e5e6:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <WaitForExit>
   1e5ea:	88 23       	and	r24, r24
   1e5ec:	19 f0       	breq	.+6      	; 0x1e5f4 <EVENT_USB_Device_ControlRequest+0x96>
			{
				/* Bootloader is terminating - process last received command */
				ProcessBootloaderCommand();
   1e5ee:	5b de       	rcall	.-842    	; 0x1e2a6 <ProcessBootloaderCommand>

				/* Indicate that the last command has now been processed - free to exit bootloader */
				WaitForExit = false;
   1e5f0:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <WaitForExit>
			}

			/* If the request has a data stage, load it into the command struct */
			if (SentCommand.DataSize)
   1e5f4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SentCommand+0x6>
   1e5f8:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SentCommand+0x7>
   1e5fc:	00 97       	sbiw	r24, 0x00	; 0
   1e5fe:	51 f1       	breq	.+84     	; 0x1e654 <EVENT_USB_Device_ControlRequest+0xf6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e600:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				while (!(Endpoint_IsOUTReceived()))
   1e604:	22 fd       	sbrc	r18, 2
   1e606:	04 c0       	rjmp	.+8      	; 0x1e610 <EVENT_USB_Device_ControlRequest+0xb2>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e608:	2e b3       	in	r18, 0x1e	; 30
   1e60a:	21 11       	cpse	r18, r1
   1e60c:	f9 cf       	rjmp	.-14     	; 0x1e600 <EVENT_USB_Device_ControlRequest+0xa2>
   1e60e:	98 c1       	rjmp	.+816    	; 0x1e940 <EVENT_USB_Device_ControlRequest+0x3e2>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1e610:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					  return;
				}

				/* First byte of the data stage is the DNLOAD request's command */
				SentCommand.Command = Endpoint_Read_8();
   1e614:	20 93 6e 01 	sts	0x016E, r18	; 0x80016e <SentCommand>

				/* One byte of the data stage is the command, so subtract it from the total data bytes */
				SentCommand.DataSize--;
   1e618:	01 97       	sbiw	r24, 0x01	; 1
   1e61a:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <SentCommand+0x7>
   1e61e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <SentCommand+0x6>
   1e622:	ef e6       	ldi	r30, 0x6F	; 111
   1e624:	f1 e0       	ldi	r31, 0x01	; 1
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e626:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1e62a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

				/* Load in the rest of the data stage as command parameters */
				for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
   1e62e:	89 2b       	or	r24, r25
   1e630:	81 f0       	breq	.+32     	; 0x1e652 <EVENT_USB_Device_ControlRequest+0xf4>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1e632:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				     Endpoint_BytesInEndpoint(); DataByte++)
				{
					SentCommand.Data[DataByte] = Endpoint_Read_8();
   1e636:	81 93       	st	Z+, r24
					SentCommand.DataSize--;
   1e638:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SentCommand+0x6>
   1e63c:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SentCommand+0x7>
   1e640:	01 97       	sbiw	r24, 0x01	; 1
   1e642:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <SentCommand+0x7>
   1e646:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <SentCommand+0x6>

				/* One byte of the data stage is the command, so subtract it from the total data bytes */
				SentCommand.DataSize--;

				/* Load in the rest of the data stage as command parameters */
				for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
   1e64a:	21 e0       	ldi	r18, 0x01	; 1
   1e64c:	e4 37       	cpi	r30, 0x74	; 116
   1e64e:	f2 07       	cpc	r31, r18
					SentCommand.Data[DataByte] = Endpoint_Read_8();
					SentCommand.DataSize--;
				}

				/* Process the command */
				ProcessBootloaderCommand();
   1e650:	51 f7       	brne	.-44     	; 0x1e626 <EVENT_USB_Device_ControlRequest+0xc8>
   1e652:	29 de       	rcall	.-942    	; 0x1e2a6 <ProcessBootloaderCommand>
			}

			/* Check if currently downloading firmware */
			if (DFU_State == dfuDNLOAD_IDLE)
   1e654:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1e658:	85 30       	cpi	r24, 0x05	; 5
   1e65a:	09 f0       	breq	.+2      	; 0x1e65e <EVENT_USB_Device_ControlRequest+0x100>
   1e65c:	96 c0       	rjmp	.+300    	; 0x1e78a <EVENT_USB_Device_ControlRequest+0x22c>
			{
				if (!(SentCommand.DataSize))
   1e65e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SentCommand+0x6>
   1e662:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SentCommand+0x7>
   1e666:	89 2b       	or	r24, r25
   1e668:	21 f4       	brne	.+8      	; 0x1e672 <EVENT_USB_Device_ControlRequest+0x114>
				{
					DFU_State = dfuIDLE;
   1e66a:	82 e0       	ldi	r24, 0x02	; 2
   1e66c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				}
				else
				{
					/* Throw away the filler bytes before the start of the firmware */
					DiscardFillerBytes(DFU_FILLER_BYTES_SIZE);
   1e670:	8c c0       	rjmp	.+280    	; 0x1e78a <EVENT_USB_Device_ControlRequest+0x22c>
   1e672:	8a e1       	ldi	r24, 0x1A	; 26
   1e674:	ee dd       	rcall	.-1060   	; 0x1e252 <DiscardFillerBytes>

					/* Throw away the packet alignment filler bytes before the start of the firmware */
					DiscardFillerBytes(StartAddr % FIXED_CONTROL_ENDPOINT_SIZE);
   1e676:	00 91 68 01 	lds	r16, 0x0168	; 0x800168 <StartAddr>
   1e67a:	10 91 69 01 	lds	r17, 0x0169	; 0x800169 <StartAddr+0x1>
   1e67e:	80 2f       	mov	r24, r16
   1e680:	8f 71       	andi	r24, 0x1F	; 31
   1e682:	e7 dd       	rcall	.-1074   	; 0x1e252 <DiscardFillerBytes>

					/* Calculate the number of bytes remaining to be written */
					uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
   1e684:	c0 91 66 01 	lds	r28, 0x0166	; 0x800166 <__data_end>
   1e688:	d0 91 67 01 	lds	r29, 0x0167	; 0x800167 <__data_end+0x1>
   1e68c:	21 96       	adiw	r28, 0x01	; 1
   1e68e:	c0 1b       	sub	r28, r16
   1e690:	d1 0b       	sbc	r29, r17

					if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))        // Write flash
   1e692:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <SentCommand+0x1>
   1e696:	81 11       	cpse	r24, r1
   1e698:	66 c0       	rjmp	.+204    	; 0x1e766 <EVENT_USB_Device_ControlRequest+0x208>
					{
						/* Calculate the number of words to be written from the number of bytes to be written */
						uint16_t WordsRemaining = (BytesRemaining >> 1);
   1e69a:	d6 95       	lsr	r29
   1e69c:	c7 95       	ror	r28

						union
						{
							uint16_t Words[2];
							uint32_t Long;
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};
   1e69e:	68 01       	movw	r12, r16
   1e6a0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <Flash64KBPage>
   1e6a4:	e8 2e       	mov	r14, r24
   1e6a6:	f1 2c       	mov	r15, r1

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
   1e6a8:	7d 2c       	mov	r7, r13
   1e6aa:	68 2e       	mov	r6, r24
   1e6ac:	5f 2c       	mov	r5, r15

								/* Check if programming incomplete */
								if (WordsRemaining)
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
									WordsInFlashPage          = 0;
   1e6ae:	10 e0       	ldi	r17, 0x00	; 0
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
						uint8_t  WordsInFlashPage          = 0;

						while (WordsRemaining--)
   1e6b0:	20 97       	sbiw	r28, 0x00	; 0
   1e6b2:	c9 f1       	breq	.+114    	; 0x1e726 <EVENT_USB_Device_ControlRequest+0x1c8>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e6b4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1e6b8:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
						{
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
   1e6bc:	89 2b       	or	r24, r25
   1e6be:	a9 f0       	breq	.+42     	; 0x1e6ea <EVENT_USB_Device_ControlRequest+0x18c>
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
						uint8_t  WordsInFlashPage          = 0;

						while (WordsRemaining--)
   1e6c0:	21 97       	sbiw	r28, 0x01	; 1
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
   1e6c2:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
   1e6c6:	50 91 f1 00 	lds	r21, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
									  return;
								}
							}

							/* Write the next word into the current flash page */
							BootloaderAPI_FillWord(CurrFlashAddress.Long, Endpoint_Read_16_LE());
   1e6ca:	c7 01       	movw	r24, r14
   1e6cc:	b6 01       	movw	r22, r12
   1e6ce:	8e dd       	rcall	.-1252   	; 0x1e1ec <BootloaderAPI_FillWord>

							/* Adjust counters */
							WordsInFlashPage      += 1;
   1e6d0:	1f 5f       	subi	r17, 0xFF	; 255
							CurrFlashAddress.Long += 2;
   1e6d2:	46 01       	movw	r8, r12
   1e6d4:	57 01       	movw	r10, r14
   1e6d6:	82 e0       	ldi	r24, 0x02	; 2
   1e6d8:	88 0e       	add	r8, r24
   1e6da:	91 1c       	adc	r9, r1
   1e6dc:	a1 1c       	adc	r10, r1
   1e6de:	b1 1c       	adc	r11, r1
   1e6e0:	75 01       	movw	r14, r10
   1e6e2:	64 01       	movw	r12, r8

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
   1e6e4:	10 38       	cpi	r17, 0x80	; 128
   1e6e6:	71 f4       	brne	.+28     	; 0x1e704 <EVENT_USB_Device_ControlRequest+0x1a6>
   1e6e8:	0f c0       	rjmp	.+30     	; 0x1e708 <EVENT_USB_Device_ControlRequest+0x1aa>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1e6ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e6ee:	8b 7f       	andi	r24, 0xFB	; 251
   1e6f0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e6f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
   1e6f8:	82 fd       	sbrc	r24, 2
   1e6fa:	e2 cf       	rjmp	.-60     	; 0x1e6c0 <EVENT_USB_Device_ControlRequest+0x162>
								{
									if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e6fc:	8e b3       	in	r24, 0x1e	; 30
   1e6fe:	81 11       	cpse	r24, r1
   1e700:	f9 cf       	rjmp	.-14     	; 0x1e6f4 <EVENT_USB_Device_ControlRequest+0x196>
   1e702:	1e c1       	rjmp	.+572    	; 0x1e940 <EVENT_USB_Device_ControlRequest+0x3e2>
							/* Adjust counters */
							WordsInFlashPage      += 1;
							CurrFlashAddress.Long += 2;

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
   1e704:	20 97       	sbiw	r28, 0x00	; 0
							{
								/* Commit the flash page to memory */
								BootloaderAPI_WritePage(CurrFlashPageStartAddress);
   1e706:	a1 f6       	brne	.-88     	; 0x1e6b0 <EVENT_USB_Device_ControlRequest+0x152>
   1e708:	60 2f       	mov	r22, r16
   1e70a:	77 2d       	mov	r23, r7
   1e70c:	86 2d       	mov	r24, r6
   1e70e:	95 2d       	mov	r25, r5

								/* Check if programming incomplete */
								if (WordsRemaining)
   1e710:	4a dd       	rcall	.-1388   	; 0x1e1a6 <BootloaderAPI_WritePage>
   1e712:	20 97       	sbiw	r28, 0x00	; 0
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
									WordsInFlashPage          = 0;

									/* Erase next page's temp buffer */
									BootloaderAPI_ErasePage(CurrFlashAddress.Long);
   1e714:	69 f2       	breq	.-102    	; 0x1e6b0 <EVENT_USB_Device_ControlRequest+0x152>
   1e716:	c5 01       	movw	r24, r10
   1e718:	b4 01       	movw	r22, r8
   1e71a:	22 dd       	rcall	.-1468   	; 0x1e160 <BootloaderAPI_ErasePage>
								BootloaderAPI_WritePage(CurrFlashPageStartAddress);

								/* Check if programming incomplete */
								if (WordsRemaining)
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
   1e71c:	08 2d       	mov	r16, r8
   1e71e:	79 2c       	mov	r7, r9
   1e720:	6a 2c       	mov	r6, r10
   1e722:	5b 2c       	mov	r5, r11
   1e724:	c4 cf       	rjmp	.-120    	; 0x1e6ae <EVENT_USB_Device_ControlRequest+0x150>
								}
							}
						}

						/* Once programming complete, start address equals the end address */
						StartAddr = EndAddr;
   1e726:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end>
   1e72a:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <__data_end+0x1>
   1e72e:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <StartAddr+0x1>
   1e732:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <StartAddr>
   1e736:	27 c0       	rjmp	.+78     	; 0x1e786 <EVENT_USB_Device_ControlRequest+0x228>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e738:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1e73c:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
						{
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
   1e740:	89 2b       	or	r24, r25
   1e742:	a1 f0       	breq	.+40     	; 0x1e76c <EVENT_USB_Device_ControlRequest+0x20e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1e744:	21 97       	sbiw	r28, 0x01	; 1
   1e746:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
									  return;
								}
							}

							/* Read the byte from the USB interface and write to to the EEPROM */
							eeprom_update_byte((uint8_t*)StartAddr, Endpoint_Read_8());
   1e74a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <StartAddr>
   1e74e:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <StartAddr+0x1>
   1e752:	b9 d3       	rcall	.+1906   	; 0x1eec6 <eeprom_update_byte>

							/* Adjust counters */
							StartAddr++;
   1e754:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <StartAddr>
   1e758:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <StartAddr+0x1>
   1e75c:	01 96       	adiw	r24, 0x01	; 1
   1e75e:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <StartAddr+0x1>
   1e762:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <StartAddr>
						/* Once programming complete, start address equals the end address */
						StartAddr = EndAddr;
					}
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
   1e766:	20 97       	sbiw	r28, 0x00	; 0
   1e768:	39 f7       	brne	.-50     	; 0x1e738 <EVENT_USB_Device_ControlRequest+0x1da>
   1e76a:	0d c0       	rjmp	.+26     	; 0x1e786 <EVENT_USB_Device_ControlRequest+0x228>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1e76c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e770:	8b 7f       	andi	r24, 0xFB	; 251
   1e772:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e776:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
   1e77a:	82 fd       	sbrc	r24, 2
								{
									if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e77c:	e3 cf       	rjmp	.-58     	; 0x1e744 <EVENT_USB_Device_ControlRequest+0x1e6>
   1e77e:	8e b3       	in	r24, 0x1e	; 30
   1e780:	81 11       	cpse	r24, r1
   1e782:	f9 cf       	rjmp	.-14     	; 0x1e776 <EVENT_USB_Device_ControlRequest+0x218>
							StartAddr++;
						}
					}

					/* Throw away the currently unused DFU file suffix */
					DiscardFillerBytes(DFU_FILE_SUFFIX_SIZE);
   1e784:	dd c0       	rjmp	.+442    	; 0x1e940 <EVENT_USB_Device_ControlRequest+0x3e2>
   1e786:	80 e1       	ldi	r24, 0x10	; 16
   1e788:	64 dd       	rcall	.-1336   	; 0x1e252 <DiscardFillerBytes>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1e78a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e78e:	8b 7f       	andi	r24, 0xFB	; 251
   1e790:	8e c0       	rjmp	.+284    	; 0x1e8ae <EVENT_USB_Device_ControlRequest+0x350>
		case DFU_REQ_UPLOAD:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e792:	8e b3       	in	r24, 0x1e	; 30
   1e794:	88 23       	and	r24, r24
   1e796:	09 f4       	brne	.+2      	; 0x1e79a <EVENT_USB_Device_ControlRequest+0x23c>
   1e798:	d3 c0       	rjmp	.+422    	; 0x1e940 <EVENT_USB_Device_ControlRequest+0x3e2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e79a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			break;
		case DFU_REQ_UPLOAD:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
   1e79e:	80 ff       	sbrs	r24, 0
   1e7a0:	f8 cf       	rjmp	.-16     	; 0x1e792 <EVENT_USB_Device_ControlRequest+0x234>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
				  return;
			}

			if (DFU_State != dfuUPLOAD_IDLE)
   1e7a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1e7a6:	89 30       	cpi	r24, 0x09	; 9
   1e7a8:	91 f0       	breq	.+36     	; 0x1e7ce <EVENT_USB_Device_ControlRequest+0x270>
			{
				if ((DFU_State == dfuERROR) && IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))       // Blank Check
   1e7aa:	8a 30       	cpi	r24, 0x0A	; 10
   1e7ac:	59 f4       	brne	.+22     	; 0x1e7c4 <EVENT_USB_Device_ControlRequest+0x266>
   1e7ae:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <SentCommand+0x1>
   1e7b2:	81 30       	cpi	r24, 0x01	; 1
   1e7b4:	39 f4       	brne	.+14     	; 0x1e7c4 <EVENT_USB_Device_ControlRequest+0x266>
				{
					/* Blank checking is performed in the DFU_DNLOAD request - if we get here we've told the host
					   that the memory isn't blank, and the host is requesting the first non-blank address */
					Endpoint_Write_16_LE(StartAddr);
   1e7b6:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <StartAddr>
   1e7ba:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <StartAddr+0x1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1e7be:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1e7c2:	02 c0       	rjmp	.+4      	; 0x1e7c8 <EVENT_USB_Device_ControlRequest+0x26a>
				}
				else
				{
					/* Idle state upload - send response to last issued command */
					Endpoint_Write_8(ResponseByte);
   1e7c4:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <ResponseByte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e7c8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1e7cc:	6d c0       	rjmp	.+218    	; 0x1e8a8 <EVENT_USB_Device_ControlRequest+0x34a>
				}
			}
			else
			{
				/* Determine the number of bytes remaining in the current block */
				uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
   1e7ce:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <StartAddr>
   1e7d2:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <StartAddr+0x1>
   1e7d6:	c0 91 66 01 	lds	r28, 0x0166	; 0x800166 <__data_end>
   1e7da:	d0 91 67 01 	lds	r29, 0x0167	; 0x800167 <__data_end+0x1>
   1e7de:	21 96       	adiw	r28, 0x01	; 1
   1e7e0:	c2 1b       	sub	r28, r18
   1e7e2:	d3 0b       	sbc	r29, r19

				if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))            // Read FLASH
   1e7e4:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <SentCommand+0x1>
   1e7e8:	81 11       	cpse	r24, r1
   1e7ea:	32 c0       	rjmp	.+100    	; 0x1e850 <EVENT_USB_Device_ControlRequest+0x2f2>
				{
					/* Calculate the number of words to be written from the number of bytes to be written */
					uint16_t WordsRemaining = (BytesRemaining >> 1);
   1e7ec:	d6 95       	lsr	r29
   1e7ee:	c7 95       	ror	r28

					union
					{
						uint16_t Words[2];
						uint32_t Long;
					} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};
   1e7f0:	c9 01       	movw	r24, r18
   1e7f2:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <Flash64KBPage>
   1e7f6:	a2 2f       	mov	r26, r18
   1e7f8:	b0 e0       	ldi	r27, 0x00	; 0

					while (WordsRemaining--)
   1e7fa:	21 97       	sbiw	r28, 0x01	; 1
   1e7fc:	00 f1       	brcs	.+64     	; 0x1e83e <EVENT_USB_Device_ControlRequest+0x2e0>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e7fe:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1e802:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
					{
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
   1e806:	20 32       	cpi	r18, 0x20	; 32
   1e808:	31 05       	cpc	r19, r1
   1e80a:	61 f0       	breq	.+24     	; 0x1e824 <EVENT_USB_Device_ControlRequest+0x2c6>
							}
						}

						/* Read the flash word and send it via USB to the host */
						#if (FLASHEND > 0xFFFF)
							Endpoint_Write_16_LE(pgm_read_word_far(CurrFlashAddress.Long));
   1e80c:	ab bf       	out	0x3b, r26	; 59
   1e80e:	fc 01       	movw	r30, r24
   1e810:	27 91       	elpm	r18, Z+
   1e812:	36 91       	elpm	r19, Z
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1e814:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
   1e818:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
						#else
							Endpoint_Write_16_LE(pgm_read_word(CurrFlashAddress.Long));
						#endif

						/* Adjust counters */
						CurrFlashAddress.Long += 2;
   1e81c:	02 96       	adiw	r24, 0x02	; 2
   1e81e:	a1 1d       	adc	r26, r1
   1e820:	b1 1d       	adc	r27, r1
   1e822:	eb cf       	rjmp	.-42     	; 0x1e7fa <EVENT_USB_Device_ControlRequest+0x29c>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1e824:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e828:	2e 7f       	andi	r18, 0xFE	; 254
   1e82a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e82e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
   1e832:	20 fd       	sbrc	r18, 0
   1e834:	eb cf       	rjmp	.-42     	; 0x1e80c <EVENT_USB_Device_ControlRequest+0x2ae>
							{
								if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e836:	2e b3       	in	r18, 0x1e	; 30
   1e838:	21 11       	cpse	r18, r1
   1e83a:	f9 cf       	rjmp	.-14     	; 0x1e82e <EVENT_USB_Device_ControlRequest+0x2d0>
   1e83c:	81 c0       	rjmp	.+258    	; 0x1e940 <EVENT_USB_Device_ControlRequest+0x3e2>
						/* Adjust counters */
						CurrFlashAddress.Long += 2;
					}

					/* Once reading is complete, start address equals the end address */
					StartAddr = EndAddr;
   1e83e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <__data_end>
   1e842:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <__data_end+0x1>
   1e846:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <StartAddr+0x1>
   1e84a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <StartAddr>
   1e84e:	29 c0       	rjmp	.+82     	; 0x1e8a2 <EVENT_USB_Device_ControlRequest+0x344>
				}
				else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))       // Read EEPROM
   1e850:	82 30       	cpi	r24, 0x02	; 2
   1e852:	39 f5       	brne	.+78     	; 0x1e8a2 <EVENT_USB_Device_ControlRequest+0x344>
				{
					while (BytesRemaining--)
   1e854:	20 97       	sbiw	r28, 0x00	; 0
   1e856:	29 f1       	breq	.+74     	; 0x1e8a2 <EVENT_USB_Device_ControlRequest+0x344>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e858:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1e85c:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
					{
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
   1e860:	80 97       	sbiw	r24, 0x20	; 32
								  return;
							}
						}

						/* Read the EEPROM byte and send it via USB to the host */
						Endpoint_Write_8(eeprom_read_byte((uint8_t*)StartAddr));
   1e862:	91 f0       	breq	.+36     	; 0x1e888 <EVENT_USB_Device_ControlRequest+0x32a>
   1e864:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <StartAddr>
   1e868:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <StartAddr+0x1>
   1e86c:	24 d3       	rcall	.+1608   	; 0x1eeb6 <eeprom_read_byte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e86e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

						/* Adjust counters */
						StartAddr++;
   1e872:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <StartAddr>
   1e876:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <StartAddr+0x1>
   1e87a:	01 96       	adiw	r24, 0x01	; 1
   1e87c:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <StartAddr+0x1>
   1e880:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <StartAddr>
   1e884:	21 97       	sbiw	r28, 0x01	; 1
   1e886:	e6 cf       	rjmp	.-52     	; 0x1e854 <EVENT_USB_Device_ControlRequest+0x2f6>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1e888:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e88c:	8e 7f       	andi	r24, 0xFE	; 254
   1e88e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e892:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
   1e896:	80 fd       	sbrc	r24, 0
   1e898:	e5 cf       	rjmp	.-54     	; 0x1e864 <EVENT_USB_Device_ControlRequest+0x306>
							{
								if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e89a:	8e b3       	in	r24, 0x1e	; 30
   1e89c:	81 11       	cpse	r24, r1
   1e89e:	f9 cf       	rjmp	.-14     	; 0x1e892 <EVENT_USB_Device_ControlRequest+0x334>
   1e8a0:	4f c0       	rjmp	.+158    	; 0x1e940 <EVENT_USB_Device_ControlRequest+0x3e2>
						StartAddr++;
					}
				}

				/* Return to idle state */
				DFU_State = dfuIDLE;
   1e8a2:	82 e0       	ldi	r24, 0x02	; 2
   1e8a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1e8a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e8ac:	8e 7f       	andi	r24, 0xFE	; 254
   1e8ae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e8b2:	36 c0       	rjmp	.+108    	; 0x1e920 <EVENT_USB_Device_ControlRequest+0x3c2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e8b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e8b8:	87 7f       	andi	r24, 0xF7	; 247
   1e8ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e8be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			Endpoint_ClearStatusStage();
			break;
		case DFU_REQ_GETSTATUS:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
   1e8c2:	80 fd       	sbrc	r24, 0
   1e8c4:	04 c0       	rjmp	.+8      	; 0x1e8ce <EVENT_USB_Device_ControlRequest+0x370>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e8c6:	8e b3       	in	r24, 0x1e	; 30
   1e8c8:	81 11       	cpse	r24, r1
   1e8ca:	f9 cf       	rjmp	.-14     	; 0x1e8be <EVENT_USB_Device_ControlRequest+0x360>
   1e8cc:	39 c0       	rjmp	.+114    	; 0x1e940 <EVENT_USB_Device_ControlRequest+0x3e2>
				  return;
			}

			/* Write 8-bit status value */
			Endpoint_Write_8(DFU_Status);
   1e8ce:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <DFU_Status>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e8d2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1e8d6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1e8da:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
   1e8de:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			/* Write 24-bit poll timeout value */
			Endpoint_Write_8(0);
			Endpoint_Write_16_LE(0);

			/* Write 8-bit state value */
			Endpoint_Write_8(DFU_State);
   1e8e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e8e6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1e8ea:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1e8ee:	dc cf       	rjmp	.-72     	; 0x1e8a8 <EVENT_USB_Device_ControlRequest+0x34a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e8f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e8f4:	87 7f       	andi	r24, 0xF7	; 247
   1e8f6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			break;
		case DFU_REQ_CLRSTATUS:
			Endpoint_ClearSETUP();

			/* Reset the status value variable to the default OK status */
			DFU_Status = OK;
   1e8fa:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <DFU_Status>
   1e8fe:	10 c0       	rjmp	.+32     	; 0x1e920 <EVENT_USB_Device_ControlRequest+0x3c2>
   1e900:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e904:	87 7f       	andi	r24, 0xF7	; 247
   1e906:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e90a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			Endpoint_ClearStatusStage();
			break;
		case DFU_REQ_GETSTATE:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
   1e90e:	80 fd       	sbrc	r24, 0
   1e910:	04 c0       	rjmp	.+8      	; 0x1e91a <EVENT_USB_Device_ControlRequest+0x3bc>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e912:	8e b3       	in	r24, 0x1e	; 30
   1e914:	81 11       	cpse	r24, r1
   1e916:	f9 cf       	rjmp	.-14     	; 0x1e90a <EVENT_USB_Device_ControlRequest+0x3ac>
   1e918:	13 c0       	rjmp	.+38     	; 0x1e940 <EVENT_USB_Device_ControlRequest+0x3e2>
				  return;
			}

			/* Write the current device state to the endpoint */
			Endpoint_Write_8(DFU_State);
   1e91a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1e91e:	54 cf       	rjmp	.-344    	; 0x1e7c8 <EVENT_USB_Device_ControlRequest+0x26a>
			DFU_State = dfuIDLE;

			Endpoint_ClearStatusStage();
			break;
	}
}
   1e920:	df 91       	pop	r29
   1e922:	cf 91       	pop	r28
   1e924:	1f 91       	pop	r17
   1e926:	0f 91       	pop	r16
   1e928:	ff 90       	pop	r15
   1e92a:	ef 90       	pop	r14
   1e92c:	df 90       	pop	r13
   1e92e:	cf 90       	pop	r12
   1e930:	bf 90       	pop	r11
   1e932:	af 90       	pop	r10
   1e934:	9f 90       	pop	r9
   1e936:	8f 90       	pop	r8
   1e938:	7f 90       	pop	r7
   1e93a:	6f 90       	pop	r6
			Endpoint_ClearSETUP();

			/* Reset the current state variable to the default idle state */
			DFU_State = dfuIDLE;

			Endpoint_ClearStatusStage();
   1e93c:	5f 90       	pop	r5
   1e93e:	ad c0       	rjmp	.+346    	; 0x1ea9a <Endpoint_ClearStatusStage>
			break;
	}
}
   1e940:	df 91       	pop	r29
   1e942:	cf 91       	pop	r28
   1e944:	1f 91       	pop	r17
   1e946:	0f 91       	pop	r16
   1e948:	ff 90       	pop	r15
   1e94a:	ef 90       	pop	r14
   1e94c:	df 90       	pop	r13
   1e94e:	cf 90       	pop	r12
   1e950:	bf 90       	pop	r11
   1e952:	af 90       	pop	r10
   1e954:	9f 90       	pop	r9
   1e956:	8f 90       	pop	r8
   1e958:	7f 90       	pop	r7
   1e95a:	6f 90       	pop	r6
   1e95c:	5f 90       	pop	r5
   1e95e:	08 95       	ret

0001e960 <CALLBACK_USB_GetDescriptor>:
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
   1e960:	29 2f       	mov	r18, r25
   1e962:	30 e0       	ldi	r19, 0x00	; 0
   1e964:	22 30       	cpi	r18, 0x02	; 2
   1e966:	31 05       	cpc	r19, r1
   1e968:	59 f0       	breq	.+22     	; 0x1e980 <CALLBACK_USB_GetDescriptor+0x20>
   1e96a:	23 30       	cpi	r18, 0x03	; 3
   1e96c:	31 05       	cpc	r19, r1
   1e96e:	69 f0       	breq	.+26     	; 0x1e98a <CALLBACK_USB_GetDescriptor+0x2a>
   1e970:	21 30       	cpi	r18, 0x01	; 1
   1e972:	31 05       	cpc	r19, r1
   1e974:	f9 f4       	brne	.+62     	; 0x1e9b4 <CALLBACK_USB_GetDescriptor+0x54>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
   1e976:	82 e1       	ldi	r24, 0x12	; 18
   1e978:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
   1e97a:	24 e5       	ldi	r18, 0x54	; 84
   1e97c:	31 e0       	ldi	r19, 0x01	; 1
   1e97e:	1e c0       	rjmp	.+60     	; 0x1e9bc <CALLBACK_USB_GetDescriptor+0x5c>
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
   1e980:	8b e1       	ldi	r24, 0x1B	; 27
   1e982:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
   1e984:	29 e3       	ldi	r18, 0x39	; 57
   1e986:	31 e0       	ldi	r19, 0x01	; 1
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
   1e988:	19 c0       	rjmp	.+50     	; 0x1e9bc <CALLBACK_USB_GetDescriptor+0x5c>
        case DTYPE_String:
            if (DescriptorNumber == STRING_ID_Language)
   1e98a:	88 23       	and	r24, r24
   1e98c:	49 f0       	breq	.+18     	; 0x1e9a0 <CALLBACK_USB_GetDescriptor+0x40>
            {
                Address = &LanguageString;
                Size    = LanguageString.Header.Size;
            }
            else if (DescriptorNumber == STRING_ID_Manufacturer)
   1e98e:	81 30       	cpi	r24, 0x01	; 1
   1e990:	61 f0       	breq	.+24     	; 0x1e9aa <CALLBACK_USB_GetDescriptor+0x4a>
            {
                Address = &ManufacturerString;
                Size    = ManufacturerString.Header.Size;
            }
            else if (DescriptorNumber == STRING_ID_Product)
   1e992:	82 30       	cpi	r24, 0x02	; 2
   1e994:	79 f4       	brne	.+30     	; 0x1e9b4 <CALLBACK_USB_GetDescriptor+0x54>
            {
                Address = &ProductString;
                Size    = ProductString.Header.Size;
   1e996:	82 e1       	ldi	r24, 0x12	; 18
   1e998:	90 e0       	ldi	r25, 0x00	; 0
                Address = &ManufacturerString;
                Size    = ManufacturerString.Header.Size;
            }
            else if (DescriptorNumber == STRING_ID_Product)
            {
                Address = &ProductString;
   1e99a:	25 e0       	ldi	r18, 0x05	; 5
   1e99c:	31 e0       	ldi	r19, 0x01	; 1
   1e99e:	0e c0       	rjmp	.+28     	; 0x1e9bc <CALLBACK_USB_GetDescriptor+0x5c>
            break;
        case DTYPE_String:
            if (DescriptorNumber == STRING_ID_Language)
            {
                Address = &LanguageString;
                Size    = LanguageString.Header.Size;
   1e9a0:	84 e0       	ldi	r24, 0x04	; 4
   1e9a2:	90 e0       	ldi	r25, 0x00	; 0
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            if (DescriptorNumber == STRING_ID_Language)
            {
                Address = &LanguageString;
   1e9a4:	25 e3       	ldi	r18, 0x35	; 53
   1e9a6:	31 e0       	ldi	r19, 0x01	; 1
   1e9a8:	09 c0       	rjmp	.+18     	; 0x1e9bc <CALLBACK_USB_GetDescriptor+0x5c>
                Size    = LanguageString.Header.Size;
            }
            else if (DescriptorNumber == STRING_ID_Manufacturer)
            {
                Address = &ManufacturerString;
                Size    = ManufacturerString.Header.Size;
   1e9aa:	8a e1       	ldi	r24, 0x1A	; 26
   1e9ac:	90 e0       	ldi	r25, 0x00	; 0
                Address = &LanguageString;
                Size    = LanguageString.Header.Size;
            }
            else if (DescriptorNumber == STRING_ID_Manufacturer)
            {
                Address = &ManufacturerString;
   1e9ae:	29 e1       	ldi	r18, 0x19	; 25
   1e9b0:	31 e0       	ldi	r19, 0x01	; 1
   1e9b2:	04 c0       	rjmp	.+8      	; 0x1e9bc <CALLBACK_USB_GetDescriptor+0x5c>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
   1e9b4:	80 e0       	ldi	r24, 0x00	; 0
   1e9b6:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
   1e9b8:	20 e0       	ldi	r18, 0x00	; 0
   1e9ba:	30 e0       	ldi	r19, 0x00	; 0
            }

            break;
    }

    *DescriptorAddress = Address;
   1e9bc:	fa 01       	movw	r30, r20
   1e9be:	31 83       	std	Z+1, r19	; 0x01
   1e9c0:	20 83       	st	Z, r18
    return Size;
}
   1e9c2:	08 95       	ret

0001e9c4 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1e9c4:	20 91 81 01 	lds	r18, 0x0181	; 0x800181 <USB_ControlRequest+0x6>
   1e9c8:	30 91 82 01 	lds	r19, 0x0182	; 0x800182 <USB_ControlRequest+0x7>
   1e9cc:	26 17       	cp	r18, r22
   1e9ce:	37 07       	cpc	r19, r23
   1e9d0:	48 f0       	brcs	.+18     	; 0x1e9e4 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1e9d2:	61 15       	cp	r22, r1
   1e9d4:	71 05       	cpc	r23, r1
   1e9d6:	39 f4       	brne	.+14     	; 0x1e9e6 <Endpoint_Write_Control_Stream_LE+0x22>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1e9d8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e9dc:	2e 7f       	andi	r18, 0xFE	; 254
   1e9de:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e9e2:	01 c0       	rjmp	.+2      	; 0x1e9e6 <Endpoint_Write_Control_Stream_LE+0x22>
   1e9e4:	b9 01       	movw	r22, r18
   1e9e6:	fc 01       	movw	r30, r24
   1e9e8:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1e9ea:	61 15       	cp	r22, r1
   1e9ec:	71 05       	cpc	r23, r1
   1e9ee:	61 f1       	breq	.+88     	; 0x1ea48 <Endpoint_Write_Control_Stream_LE+0x84>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e9f0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e9f2:	88 23       	and	r24, r24
   1e9f4:	d9 f1       	breq	.+118    	; 0x1ea6c <Endpoint_Write_Control_Stream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e9f6:	85 30       	cpi	r24, 0x05	; 5
   1e9f8:	d9 f1       	breq	.+118    	; 0x1ea70 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e9fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1e9fe:	83 fd       	sbrc	r24, 3
   1ea00:	39 c0       	rjmp	.+114    	; 0x1ea74 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ea02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1ea06:	82 fd       	sbrc	r24, 2
   1ea08:	2b c0       	rjmp	.+86     	; 0x1ea60 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ea0a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
   1ea0e:	80 ff       	sbrs	r24, 0
   1ea10:	ec cf       	rjmp	.-40     	; 0x1e9ea <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1ea12:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1ea16:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1ea1a:	61 15       	cp	r22, r1
   1ea1c:	71 05       	cpc	r23, r1
   1ea1e:	51 f0       	breq	.+20     	; 0x1ea34 <Endpoint_Write_Control_Stream_LE+0x70>
   1ea20:	80 32       	cpi	r24, 0x20	; 32
   1ea22:	91 05       	cpc	r25, r1
   1ea24:	38 f4       	brcc	.+14     	; 0x1ea34 <Endpoint_Write_Control_Stream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1ea26:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1ea28:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1ea2c:	61 50       	subi	r22, 0x01	; 1
   1ea2e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
   1ea30:	01 96       	adiw	r24, 0x01	; 1
   1ea32:	f3 cf       	rjmp	.-26     	; 0x1ea1a <Endpoint_Write_Control_Stream_LE+0x56>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1ea34:	21 e0       	ldi	r18, 0x01	; 1
   1ea36:	80 97       	sbiw	r24, 0x20	; 32
   1ea38:	09 f0       	breq	.+2      	; 0x1ea3c <Endpoint_Write_Control_Stream_LE+0x78>
   1ea3a:	20 e0       	ldi	r18, 0x00	; 0
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1ea3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ea40:	8e 7f       	andi	r24, 0xFE	; 254
   1ea42:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ea46:	d1 cf       	rjmp	.-94     	; 0x1e9ea <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1ea48:	21 11       	cpse	r18, r1
   1ea4a:	d2 cf       	rjmp	.-92     	; 0x1e9f0 <Endpoint_Write_Control_Stream_LE+0x2c>
   1ea4c:	09 c0       	rjmp	.+18     	; 0x1ea60 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ea4e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ea50:	88 23       	and	r24, r24
   1ea52:	61 f0       	breq	.+24     	; 0x1ea6c <Endpoint_Write_Control_Stream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1ea54:	85 30       	cpi	r24, 0x05	; 5
   1ea56:	61 f0       	breq	.+24     	; 0x1ea70 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ea58:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1ea5c:	83 fd       	sbrc	r24, 3
   1ea5e:	0a c0       	rjmp	.+20     	; 0x1ea74 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ea60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1ea64:	82 ff       	sbrs	r24, 2
   1ea66:	f3 cf       	rjmp	.-26     	; 0x1ea4e <Endpoint_Write_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1ea68:	80 e0       	ldi	r24, 0x00	; 0
   1ea6a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1ea6c:	82 e0       	ldi	r24, 0x02	; 2
   1ea6e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1ea70:	83 e0       	ldi	r24, 0x03	; 3
   1ea72:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1ea74:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1ea76:	08 95       	ret

0001ea78 <Endpoint_ConfigureEndpoint_Prv>:
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
   1ea78:	eb ee       	ldi	r30, 0xEB	; 235
   1ea7a:	f0 e0       	ldi	r31, 0x00	; 0
   1ea7c:	80 81       	ld	r24, Z
   1ea7e:	81 60       	ori	r24, 0x01	; 1
   1ea80:	80 83       	st	Z, r24
   1ea82:	ed ee       	ldi	r30, 0xED	; 237
   1ea84:	f0 e0       	ldi	r31, 0x00	; 0
   1ea86:	10 82       	st	Z, r1
   1ea88:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
   1ea8c:	40 83       	st	Z, r20
   1ea8e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
   1ea92:	88 1f       	adc	r24, r24
   1ea94:	88 27       	eor	r24, r24
   1ea96:	88 1f       	adc	r24, r24
   1ea98:	08 95       	ret

0001ea9a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1ea9a:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_ControlRequest>
   1ea9e:	87 ff       	sbrs	r24, 7
   1eaa0:	0f c0       	rjmp	.+30     	; 0x1eac0 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1eaa2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
   1eaa6:	82 fd       	sbrc	r24, 2
   1eaa8:	04 c0       	rjmp	.+8      	; 0x1eab2 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1eaaa:	8e b3       	in	r24, 0x1e	; 30
   1eaac:	81 11       	cpse	r24, r1
   1eaae:	f9 cf       	rjmp	.-14     	; 0x1eaa2 <Endpoint_ClearStatusStage+0x8>
   1eab0:	10 c0       	rjmp	.+32     	; 0x1ead2 <Endpoint_ClearStatusStage+0x38>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1eab2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1eab6:	8b 7f       	andi	r24, 0xFB	; 251
   1eab8:	0a c0       	rjmp	.+20     	; 0x1eace <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1eaba:	8e b3       	in	r24, 0x1e	; 30
   1eabc:	88 23       	and	r24, r24
   1eabe:	49 f0       	breq	.+18     	; 0x1ead2 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1eac0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1eac4:	80 ff       	sbrs	r24, 0
   1eac6:	f9 cf       	rjmp	.-14     	; 0x1eaba <Endpoint_ClearStatusStage+0x20>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1eac8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1eacc:	8e 7f       	andi	r24, 0xFE	; 254
   1eace:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ead2:	08 95       	ret

0001ead4 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
   1ead4:	65 d0       	rcall	.+202    	; 0x1eba0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1ead6:	6c d0       	rcall	.+216    	; 0x1ebb0 <USB_INT_ClearAllInterrupts>
   1ead8:	e0 ee       	ldi	r30, 0xE0	; 224
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1eada:	f0 e0       	ldi	r31, 0x00	; 0
   1eadc:	80 81       	ld	r24, Z
   1eade:	81 60       	ori	r24, 0x01	; 1
   1eae0:	80 83       	st	Z, r24
   1eae2:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
   1eae4:	f0 e0       	ldi	r31, 0x00	; 0
   1eae6:	80 81       	ld	r24, Z
   1eae8:	8f 77       	andi	r24, 0x7F	; 127
   1eaea:	80 83       	st	Z, r24
   1eaec:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1eaee:	a7 ed       	ldi	r26, 0xD7	; 215

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
   1eaf0:	b0 e0       	ldi	r27, 0x00	; 0
   1eaf2:	8c 91       	ld	r24, X
   1eaf4:	8e 7f       	andi	r24, 0xFE	; 254
   1eaf6:	8c 93       	st	X, r24
   1eaf8:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
   1eafa:	8f 7e       	andi	r24, 0xEF	; 239
   1eafc:	80 83       	st	Z, r24
   1eafe:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <USB_IsInitialized>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
   1eb02:	08 95       	ret

0001eb04 <USB_ResetInterface>:
   1eb04:	0f 93       	push	r16
}

void USB_ResetInterface(void)
{
   1eb06:	1f 93       	push	r17
   1eb08:	cf 93       	push	r28
   1eb0a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1eb0c:	49 d0       	rcall	.+146    	; 0x1eba0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1eb0e:	50 d0       	rcall	.+160    	; 0x1ebb0 <USB_INT_ClearAllInterrupts>
   1eb10:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1eb12:	d0 e0       	ldi	r29, 0x00	; 0
   1eb14:	88 81       	ld	r24, Y
   1eb16:	8f 77       	andi	r24, 0x7F	; 127
   1eb18:	88 83       	st	Y, r24
   1eb1a:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
   1eb1c:	80 68       	ori	r24, 0x80	; 128
   1eb1e:	88 83       	st	Y, r24
   1eb20:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1eb22:	8f 7d       	andi	r24, 0xDF	; 223
   1eb24:	88 83       	st	Y, r24
   1eb26:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1eb28:	f0 e0       	ldi	r31, 0x00	; 0
   1eb2a:	80 81       	ld	r24, Z
   1eb2c:	80 68       	ori	r24, 0x80	; 128
   1eb2e:	80 83       	st	Z, r24
   1eb30:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1eb32:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
   1eb34:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
   1eb38:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1eb3a:	10 e0       	ldi	r17, 0x00	; 0
   1eb3c:	f8 01       	movw	r30, r16
   1eb3e:	80 81       	ld	r24, Z
   1eb40:	8b 7f       	andi	r24, 0xFB	; 251
   1eb42:	80 83       	st	Z, r24
   1eb44:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1eb46:	81 60       	ori	r24, 0x01	; 1
   1eb48:	88 83       	st	Y, r24
   1eb4a:	42 e2       	ldi	r20, 0x22	; 34
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1eb4c:	60 e0       	ldi	r22, 0x00	; 0
   1eb4e:	80 e0       	ldi	r24, 0x00	; 0
   1eb50:	93 df       	rcall	.-218    	; 0x1ea78 <Endpoint_ConfigureEndpoint_Prv>
   1eb52:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1eb54:	f0 e0       	ldi	r31, 0x00	; 0
   1eb56:	80 81       	ld	r24, Z
   1eb58:	8e 7f       	andi	r24, 0xFE	; 254
   1eb5a:	80 83       	st	Z, r24
   1eb5c:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1eb5e:	f0 e0       	ldi	r31, 0x00	; 0
   1eb60:	80 81       	ld	r24, Z
   1eb62:	81 60       	ori	r24, 0x01	; 1
   1eb64:	80 83       	st	Z, r24
   1eb66:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1eb68:	88 60       	ori	r24, 0x08	; 8
   1eb6a:	80 83       	st	Z, r24
   1eb6c:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1eb6e:	80 81       	ld	r24, Z
   1eb70:	8e 7f       	andi	r24, 0xFE	; 254
   1eb72:	80 83       	st	Z, r24
   1eb74:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
   1eb76:	80 61       	ori	r24, 0x10	; 16
   1eb78:	88 83       	st	Y, r24
   1eb7a:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1eb7c:	cf 91       	pop	r28
   1eb7e:	1f 91       	pop	r17
   1eb80:	0f 91       	pop	r16
   1eb82:	08 95       	ret

0001eb84 <USB_Init>:
   1eb84:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
   1eb86:	f0 e0       	ldi	r31, 0x00	; 0
   1eb88:	80 81       	ld	r24, Z
   1eb8a:	8f 7e       	andi	r24, 0xEF	; 239
   1eb8c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
   1eb8e:	e7 ed       	ldi	r30, 0xD7	; 215
   1eb90:	f0 e0       	ldi	r31, 0x00	; 0
   1eb92:	80 81       	ld	r24, Z
   1eb94:	81 60       	ori	r24, 0x01	; 1
   1eb96:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1eb98:	81 e0       	ldi	r24, 0x01	; 1
   1eb9a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <USB_IsInitialized>

	USB_ResetInterface();
   1eb9e:	b2 cf       	rjmp	.-156    	; 0x1eb04 <USB_ResetInterface>

0001eba0 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1eba0:	e8 ed       	ldi	r30, 0xD8	; 216
   1eba2:	f0 e0       	ldi	r31, 0x00	; 0
   1eba4:	80 81       	ld	r24, Z
   1eba6:	8c 7f       	andi	r24, 0xFC	; 252
   1eba8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1ebaa:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1ebae:	08 95       	ret

0001ebb0 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1ebb0:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1ebb4:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1ebb8:	08 95       	ret

0001ebba <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1ebba:	1f 92       	push	r1
   1ebbc:	0f 92       	push	r0
   1ebbe:	0f b6       	in	r0, 0x3f	; 63
   1ebc0:	0f 92       	push	r0
   1ebc2:	11 24       	eor	r1, r1
   1ebc4:	0b b6       	in	r0, 0x3b	; 59
   1ebc6:	0f 92       	push	r0
   1ebc8:	2f 93       	push	r18
   1ebca:	3f 93       	push	r19
   1ebcc:	4f 93       	push	r20
   1ebce:	5f 93       	push	r21
   1ebd0:	6f 93       	push	r22
   1ebd2:	7f 93       	push	r23
   1ebd4:	8f 93       	push	r24
   1ebd6:	9f 93       	push	r25
   1ebd8:	af 93       	push	r26
   1ebda:	bf 93       	push	r27
   1ebdc:	ef 93       	push	r30
   1ebde:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1ebe0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1ebe4:	80 ff       	sbrs	r24, 0
   1ebe6:	1b c0       	rjmp	.+54     	; 0x1ec1e <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1ebe8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1ebec:	80 ff       	sbrs	r24, 0
   1ebee:	17 c0       	rjmp	.+46     	; 0x1ec1e <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1ebf0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
   1ebf4:	8e 7f       	andi	r24, 0xFE	; 254
   1ebf6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1ebfa:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1ebfe:	80 ff       	sbrs	r24, 0
   1ec00:	0b c0       	rjmp	.+22     	; 0x1ec18 <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1ec02:	84 e1       	ldi	r24, 0x14	; 20
   1ec04:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1ec06:	86 e1       	ldi	r24, 0x16	; 22
   1ec08:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1ec0a:	09 b4       	in	r0, 0x29	; 41
   1ec0c:	00 fe       	sbrs	r0, 0
   1ec0e:	fd cf       	rjmp	.-6      	; 0x1ec0a <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1ec10:	81 e0       	ldi	r24, 0x01	; 1
   1ec12:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1ec14:	47 d1       	rcall	.+654    	; 0x1eea4 <USB_Event_Stub>
   1ec16:	03 c0       	rjmp	.+6      	; 0x1ec1e <__vector_10+0x64>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1ec18:	19 bc       	out	0x29, r1	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
			EVENT_USB_Device_Disconnect();
   1ec1a:	1e ba       	out	0x1e, r1	; 30
   1ec1c:	43 d1       	rcall	.+646    	; 0x1eea4 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1ec1e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1ec22:	80 ff       	sbrs	r24, 0
   1ec24:	17 c0       	rjmp	.+46     	; 0x1ec54 <__vector_10+0x9a>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1ec26:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1ec2a:	80 ff       	sbrs	r24, 0
   1ec2c:	13 c0       	rjmp	.+38     	; 0x1ec54 <__vector_10+0x9a>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1ec2e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1ec32:	8e 7f       	andi	r24, 0xFE	; 254
   1ec34:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1ec38:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1ec3c:	80 61       	ori	r24, 0x10	; 16
   1ec3e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
   1ec42:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1ec46:	80 62       	ori	r24, 0x20	; 32
   1ec48:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1ec4c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1ec4e:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
   1ec50:	8e bb       	out	0x1e, r24	; 30
   1ec52:	28 d1       	rcall	.+592    	; 0x1eea4 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1ec54:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1ec58:	84 ff       	sbrs	r24, 4
   1ec5a:	2e c0       	rjmp	.+92     	; 0x1ecb8 <__vector_10+0xfe>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1ec5c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1ec60:	84 ff       	sbrs	r24, 4
   1ec62:	2a c0       	rjmp	.+84     	; 0x1ecb8 <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1ec64:	84 e1       	ldi	r24, 0x14	; 20
   1ec66:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1ec68:	86 e1       	ldi	r24, 0x16	; 22
   1ec6a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1ec6c:	09 b4       	in	r0, 0x29	; 41
   1ec6e:	00 fe       	sbrs	r0, 0
   1ec70:	fd cf       	rjmp	.-6      	; 0x1ec6c <__vector_10+0xb2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1ec72:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1ec76:	8f 7d       	andi	r24, 0xDF	; 223
   1ec78:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1ec7c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1ec80:	8f 7e       	andi	r24, 0xEF	; 239
   1ec82:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1ec86:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1ec8a:	8f 7e       	andi	r24, 0xEF	; 239
   1ec8c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1ec90:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1ec94:	81 60       	ori	r24, 0x01	; 1
   1ec96:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1ec9a:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <USB_Device_ConfigurationNumber>
   1ec9e:	88 23       	and	r24, r24
   1eca0:	11 f0       	breq	.+4      	; 0x1eca6 <__vector_10+0xec>
		  USB_DeviceState = DEVICE_STATE_Configured;
   1eca2:	84 e0       	ldi	r24, 0x04	; 4
   1eca4:	07 c0       	rjmp	.+14     	; 0x1ecb4 <__vector_10+0xfa>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1eca6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
   1ecaa:	87 fd       	sbrc	r24, 7
   1ecac:	02 c0       	rjmp	.+4      	; 0x1ecb2 <__vector_10+0xf8>
   1ecae:	81 e0       	ldi	r24, 0x01	; 1
   1ecb0:	01 c0       	rjmp	.+2      	; 0x1ecb4 <__vector_10+0xfa>
   1ecb2:	83 e0       	ldi	r24, 0x03	; 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1ecb4:	8e bb       	out	0x1e, r24	; 30
   1ecb6:	f6 d0       	rcall	.+492    	; 0x1eea4 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1ecb8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1ecbc:	83 ff       	sbrs	r24, 3
   1ecbe:	21 c0       	rjmp	.+66     	; 0x1ed02 <__vector_10+0x148>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1ecc0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1ecc4:	83 ff       	sbrs	r24, 3
   1ecc6:	1d c0       	rjmp	.+58     	; 0x1ed02 <__vector_10+0x148>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1ecc8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1eccc:	87 7f       	andi	r24, 0xF7	; 247
   1ecce:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1ecd2:	82 e0       	ldi	r24, 0x02	; 2
   1ecd4:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
   1ecd6:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1ecda:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1ecde:	8e 7f       	andi	r24, 0xFE	; 254
   1ece0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1ece4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1ece8:	8e 7f       	andi	r24, 0xFE	; 254
   1ecea:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1ecee:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1ecf2:	80 61       	ori	r24, 0x10	; 16
   1ecf4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1ecf8:	42 e2       	ldi	r20, 0x22	; 34
   1ecfa:	60 e0       	ldi	r22, 0x00	; 0
   1ecfc:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1ecfe:	bc de       	rcall	.-648    	; 0x1ea78 <Endpoint_ConfigureEndpoint_Prv>
   1ed00:	d1 d0       	rcall	.+418    	; 0x1eea4 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1ed02:	ff 91       	pop	r31
   1ed04:	ef 91       	pop	r30
   1ed06:	bf 91       	pop	r27
   1ed08:	af 91       	pop	r26
   1ed0a:	9f 91       	pop	r25
   1ed0c:	8f 91       	pop	r24
   1ed0e:	7f 91       	pop	r23
   1ed10:	6f 91       	pop	r22
   1ed12:	5f 91       	pop	r21
   1ed14:	4f 91       	pop	r20
   1ed16:	3f 91       	pop	r19
   1ed18:	2f 91       	pop	r18
   1ed1a:	0f 90       	pop	r0
   1ed1c:	0b be       	out	0x3b, r0	; 59
   1ed1e:	0f 90       	pop	r0
   1ed20:	0f be       	out	0x3f, r0	; 63
   1ed22:	0f 90       	pop	r0
   1ed24:	1f 90       	pop	r1
   1ed26:	18 95       	reti

0001ed28 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1ed28:	1f 93       	push	r17
   1ed2a:	cf 93       	push	r28
   1ed2c:	df 93       	push	r29
   1ed2e:	00 d0       	rcall	.+0      	; 0x1ed30 <USB_Device_ProcessControlRequest+0x8>
   1ed30:	cd b7       	in	r28, 0x3d	; 61
   1ed32:	de b7       	in	r29, 0x3e	; 62
   1ed34:	eb e7       	ldi	r30, 0x7B	; 123
   1ed36:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1ed38:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1ed3c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1ed3e:	81 e0       	ldi	r24, 0x01	; 1
   1ed40:	e3 38       	cpi	r30, 0x83	; 131
   1ed42:	f8 07       	cpc	r31, r24
   1ed44:	c9 f7       	brne	.-14     	; 0x1ed38 <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1ed46:	0b dc       	rcall	.-2026   	; 0x1e55e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ed48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
   1ed4c:	83 ff       	sbrs	r24, 3
   1ed4e:	96 c0       	rjmp	.+300    	; 0x1ee7c <USB_Device_ProcessControlRequest+0x154>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1ed50:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
   1ed54:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <USB_ControlRequest+0x1>
   1ed58:	96 30       	cpi	r25, 0x06	; 6
   1ed5a:	e1 f1       	breq	.+120    	; 0x1edd4 <USB_Device_ProcessControlRequest+0xac>
   1ed5c:	28 f4       	brcc	.+10     	; 0x1ed68 <USB_Device_ProcessControlRequest+0x40>
   1ed5e:	99 23       	and	r25, r25
   1ed60:	51 f0       	breq	.+20     	; 0x1ed76 <USB_Device_ProcessControlRequest+0x4e>
   1ed62:	95 30       	cpi	r25, 0x05	; 5
   1ed64:	b1 f0       	breq	.+44     	; 0x1ed92 <USB_Device_ProcessControlRequest+0x6a>
   1ed66:	8a c0       	rjmp	.+276    	; 0x1ee7c <USB_Device_ProcessControlRequest+0x154>
   1ed68:	98 30       	cpi	r25, 0x08	; 8
   1ed6a:	09 f4       	brne	.+2      	; 0x1ed6e <USB_Device_ProcessControlRequest+0x46>
   1ed6c:	55 c0       	rjmp	.+170    	; 0x1ee18 <USB_Device_ProcessControlRequest+0xf0>
   1ed6e:	99 30       	cpi	r25, 0x09	; 9
   1ed70:	09 f4       	brne	.+2      	; 0x1ed74 <USB_Device_ProcessControlRequest+0x4c>
   1ed72:	64 c0       	rjmp	.+200    	; 0x1ee3c <USB_Device_ProcessControlRequest+0x114>
   1ed74:	83 c0       	rjmp	.+262    	; 0x1ee7c <USB_Device_ProcessControlRequest+0x154>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1ed76:	8d 7f       	andi	r24, 0xFD	; 253
   1ed78:	80 38       	cpi	r24, 0x80	; 128
   1ed7a:	09 f0       	breq	.+2      	; 0x1ed7e <USB_Device_ProcessControlRequest+0x56>
   1ed7c:	7f c0       	rjmp	.+254    	; 0x1ee7c <USB_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ed7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ed82:	87 7f       	andi	r24, 0xF7	; 247
   1ed84:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1ed88:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
   1ed8c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1ed90:	4e c0       	rjmp	.+156    	; 0x1ee2e <USB_Device_ProcessControlRequest+0x106>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1ed92:	81 11       	cpse	r24, r1
   1ed94:	73 c0       	rjmp	.+230    	; 0x1ee7c <USB_Device_ProcessControlRequest+0x154>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
   1ed96:	10 91 7d 01 	lds	r17, 0x017D	; 0x80017d <USB_ControlRequest+0x2>
   1ed9a:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1ed9c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
   1eda0:	80 78       	andi	r24, 0x80	; 128
   1eda2:	81 2b       	or	r24, r17
   1eda4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1eda8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1edac:	87 7f       	andi	r24, 0xF7	; 247
   1edae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1edb2:	73 de       	rcall	.-794    	; 0x1ea9a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1edb4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
   1edb8:	80 ff       	sbrs	r24, 0
   1edba:	fc cf       	rjmp	.-8      	; 0x1edb4 <USB_Device_ProcessControlRequest+0x8c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
   1edbc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
   1edc0:	80 68       	ori	r24, 0x80	; 128
   1edc2:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1edc6:	11 11       	cpse	r17, r1
   1edc8:	02 c0       	rjmp	.+4      	; 0x1edce <USB_Device_ProcessControlRequest+0xa6>
   1edca:	82 e0       	ldi	r24, 0x02	; 2
   1edcc:	01 c0       	rjmp	.+2      	; 0x1edd0 <USB_Device_ProcessControlRequest+0xa8>
   1edce:	83 e0       	ldi	r24, 0x03	; 3
   1edd0:	8e bb       	out	0x1e, r24	; 30
   1edd2:	54 c0       	rjmp	.+168    	; 0x1ee7c <USB_Device_ProcessControlRequest+0x154>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1edd4:	80 58       	subi	r24, 0x80	; 128
   1edd6:	82 30       	cpi	r24, 0x02	; 2
   1edd8:	08 f0       	brcs	.+2      	; 0x1eddc <USB_Device_ProcessControlRequest+0xb4>
   1edda:	50 c0       	rjmp	.+160    	; 0x1ee7c <USB_Device_ProcessControlRequest+0x154>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1eddc:	60 91 7f 01 	lds	r22, 0x017F	; 0x80017f <USB_ControlRequest+0x4>
   1ede0:	70 91 80 01 	lds	r23, 0x0180	; 0x800180 <USB_ControlRequest+0x5>
   1ede4:	ae 01       	movw	r20, r28
   1ede6:	4f 5f       	subi	r20, 0xFF	; 255
   1ede8:	5f 4f       	sbci	r21, 0xFF	; 255
   1edea:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <USB_ControlRequest+0x2>
   1edee:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <USB_ControlRequest+0x3>
   1edf2:	b6 dd       	rcall	.-1172   	; 0x1e960 <CALLBACK_USB_GetDescriptor>
   1edf4:	bc 01       	movw	r22, r24
   1edf6:	89 2b       	or	r24, r25
   1edf8:	09 f4       	brne	.+2      	; 0x1edfc <USB_Device_ProcessControlRequest+0xd4>
   1edfa:	40 c0       	rjmp	.+128    	; 0x1ee7c <USB_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1edfc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ee00:	97 7f       	andi	r25, 0xF7	; 247
   1ee02:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1ee06:	89 81       	ldd	r24, Y+1	; 0x01
   1ee08:	9a 81       	ldd	r25, Y+2	; 0x02
   1ee0a:	dc dd       	rcall	.-1096   	; 0x1e9c4 <Endpoint_Write_Control_Stream_LE>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1ee0c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ee10:	8b 7f       	andi	r24, 0xFB	; 251
   1ee12:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ee16:	32 c0       	rjmp	.+100    	; 0x1ee7c <USB_Device_ProcessControlRequest+0x154>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1ee18:	80 38       	cpi	r24, 0x80	; 128
   1ee1a:	81 f5       	brne	.+96     	; 0x1ee7c <USB_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ee1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ee20:	87 7f       	andi	r24, 0xF7	; 247
   1ee22:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1ee26:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1ee2a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1ee2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ee32:	8e 7f       	andi	r24, 0xFE	; 254
   1ee34:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1ee38:	30 de       	rcall	.-928    	; 0x1ea9a <Endpoint_ClearStatusStage>
   1ee3a:	20 c0       	rjmp	.+64     	; 0x1ee7c <USB_Device_ProcessControlRequest+0x154>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1ee3c:	81 11       	cpse	r24, r1
   1ee3e:	1e c0       	rjmp	.+60     	; 0x1ee7c <USB_Device_ProcessControlRequest+0x154>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1ee40:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <USB_ControlRequest+0x2>
   1ee44:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <USB_ControlRequest+0x3>
   1ee48:	99 27       	eor	r25, r25
   1ee4a:	02 97       	sbiw	r24, 0x02	; 2
   1ee4c:	bc f4       	brge	.+46     	; 0x1ee7c <USB_Device_ProcessControlRequest+0x154>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ee4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ee52:	87 7f       	andi	r24, 0xF7	; 247
   1ee54:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1ee58:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <USB_ControlRequest+0x2>
   1ee5c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
   1ee60:	1c de       	rcall	.-968    	; 0x1ea9a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
   1ee62:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <USB_Device_ConfigurationNumber>
   1ee66:	81 11       	cpse	r24, r1
   1ee68:	06 c0       	rjmp	.+12     	; 0x1ee76 <USB_Device_ProcessControlRequest+0x14e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1ee6a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1ee6e:	87 fd       	sbrc	r24, 7
   1ee70:	02 c0       	rjmp	.+4      	; 0x1ee76 <USB_Device_ProcessControlRequest+0x14e>
   1ee72:	81 e0       	ldi	r24, 0x01	; 1
   1ee74:	01 c0       	rjmp	.+2      	; 0x1ee78 <USB_Device_ProcessControlRequest+0x150>
   1ee76:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
   1ee78:	8e bb       	out	0x1e, r24	; 30
   1ee7a:	14 d0       	rcall	.+40     	; 0x1eea4 <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ee7c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1ee80:	83 ff       	sbrs	r24, 3
   1ee82:	0a c0       	rjmp	.+20     	; 0x1ee98 <USB_Device_ProcessControlRequest+0x170>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ee84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ee88:	87 7f       	andi	r24, 0xF7	; 247
   1ee8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1ee8e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1ee92:	80 62       	ori	r24, 0x20	; 32
   1ee94:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
   1ee98:	0f 90       	pop	r0
   1ee9a:	0f 90       	pop	r0
   1ee9c:	df 91       	pop	r29
   1ee9e:	cf 91       	pop	r28
   1eea0:	1f 91       	pop	r17
   1eea2:	08 95       	ret

0001eea4 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
   1eea4:	08 95       	ret

0001eea6 <USB_USBTask>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
   1eea6:	8e b3       	in	r24, 0x1e	; 30
   1eea8:	88 23       	and	r24, r24
   1eeaa:	21 f0       	breq	.+8      	; 0x1eeb4 <USB_USBTask+0xe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1eeac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
   1eeb0:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
   1eeb2:	3a cf       	rjmp	.-396    	; 0x1ed28 <USB_Device_ProcessControlRequest>
   1eeb4:	08 95       	ret

0001eeb6 <eeprom_read_byte>:
   1eeb6:	f9 99       	sbic	0x1f, 1	; 31
   1eeb8:	fe cf       	rjmp	.-4      	; 0x1eeb6 <eeprom_read_byte>
   1eeba:	92 bd       	out	0x22, r25	; 34
   1eebc:	81 bd       	out	0x21, r24	; 33
   1eebe:	f8 9a       	sbi	0x1f, 0	; 31
   1eec0:	99 27       	eor	r25, r25
   1eec2:	80 b5       	in	r24, 0x20	; 32
   1eec4:	08 95       	ret

0001eec6 <eeprom_update_byte>:
   1eec6:	26 2f       	mov	r18, r22

0001eec8 <eeprom_update_r18>:
   1eec8:	f9 99       	sbic	0x1f, 1	; 31
   1eeca:	fe cf       	rjmp	.-4      	; 0x1eec8 <eeprom_update_r18>
   1eecc:	92 bd       	out	0x22, r25	; 34
   1eece:	81 bd       	out	0x21, r24	; 33
   1eed0:	f8 9a       	sbi	0x1f, 0	; 31
   1eed2:	01 97       	sbiw	r24, 0x01	; 1
   1eed4:	00 b4       	in	r0, 0x20	; 32
   1eed6:	02 16       	cp	r0, r18
   1eed8:	39 f0       	breq	.+14     	; 0x1eee8 <eeprom_update_r18+0x20>
   1eeda:	1f ba       	out	0x1f, r1	; 31
   1eedc:	20 bd       	out	0x20, r18	; 32
   1eede:	0f b6       	in	r0, 0x3f	; 63
   1eee0:	f8 94       	cli
   1eee2:	fa 9a       	sbi	0x1f, 2	; 31
   1eee4:	f9 9a       	sbi	0x1f, 1	; 31
   1eee6:	0f be       	out	0x3f, r0	; 63
   1eee8:	08 95       	ret

0001eeea <_exit>:
   1eeea:	f8 94       	cli

0001eeec <__stop_program>:
   1eeec:	ff cf       	rjmp	.-2      	; 0x1eeec <__stop_program>
