
at90bootloadercdcavr109dude.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  0001eed6  00000faa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .apitable_jumptable 00000018  0001ffe0  0001ffe0  00001062  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_signatures 00000008  0001fff8  0001fff8  0000107a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_trampolines 00000026  0001ffa0  0001ffa0  0000103c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .text         00000ed6  0001e000  0001e000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          0000000e  00800192  00800192  00001082  2**0
                  ALLOC
  6 .noinit       00000002  008001a0  008001a0  00001082  2**0
                  ALLOC
  7 .comment      00000030  00000000  00000000  00001082  2**0
                  CONTENTS, READONLY
  8 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010b4  2**2
                  CONTENTS, READONLY
  9 .debug_aranges 000002f0  00000000  00000000  000010f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000058e0  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b96  00000000  00000000  00006cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000788b  00000000  00000000  0000885e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000006dc  00000000  00000000  000100ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00017387  00000000  00000000  000107c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00002f6d  00000000  00000000  00027b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000408  00000000  00000000  0002aac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000070eb  00000000  00000000  0002aec8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .apitable_jumptable:

0001ffe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
   1ffe0:	df cf       	rjmp	.-66     	; 0x1ffa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
   1ffe2:	e0 cf       	rjmp	.-64     	; 0x1ffa4 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
   1ffe4:	e1 cf       	rjmp	.-62     	; 0x1ffa8 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
   1ffe6:	e2 cf       	rjmp	.-60     	; 0x1ffac <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
   1ffe8:	e3 cf       	rjmp	.-58     	; 0x1ffb0 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
   1ffea:	e4 cf       	rjmp	.-56     	; 0x1ffb4 <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
   1ffec:	e5 cf       	rjmp	.-54     	; 0x1ffb8 <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
   1ffee:	e6 cf       	rjmp	.-52     	; 0x1ffbc <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
   1fff0:	e6 cf       	rjmp	.-52     	; 0x1ffbe <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
   1fff2:	e6 cf       	rjmp	.-52     	; 0x1ffc0 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
   1fff4:	e6 cf       	rjmp	.-52     	; 0x1ffc2 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
   1fff6:	e6 cf       	rjmp	.-52     	; 0x1ffc4 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

0001fff8 <BootloaderAPI_Signatures>:
   1fff8:	00 e0       	ldi	r16, 0x00	; 0
   1fffa:	01 00       	.word	0x0001	; ????
   1fffc:	00 df       	rcall	.-512    	; 0x1fdfe <__data_load_end+0xe96>
   1fffe:	fb dc       	rcall	.-1546   	; 0x1f9f6 <__data_load_end+0xa8e>

Disassembly of section .apitable_trampolines:

0001ffa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
   1ffa0:	0c 94 b3 f0 	jmp	0x1e166	; 0x1e166 <BootloaderAPI_ErasePage>

0001ffa4 <BootloaderAPI_WritePage_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
   1ffa4:	0c 94 c7 f0 	jmp	0x1e18e	; 0x1e18e <BootloaderAPI_WritePage>

0001ffa8 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
   1ffa8:	0c 94 db f0 	jmp	0x1e1b6	; 0x1e1b6 <BootloaderAPI_FillWord>

0001ffac <BootloaderAPI_ReadSignature_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
   1ffac:	0c 94 ea f0 	jmp	0x1e1d4	; 0x1e1d4 <BootloaderAPI_ReadSignature>

0001ffb0 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
   1ffb0:	0c 94 f0 f0 	jmp	0x1e1e0	; 0x1e1e0 <BootloaderAPI_ReadFuse>

0001ffb4 <BootloaderAPI_ReadLock_Trampoline>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
   1ffb4:	0c 94 f6 f0 	jmp	0x1e1ec	; 0x1e1ec <BootloaderAPI_ReadLock>

0001ffb8 <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_WriteLock_Trampoline:
		jmp BootloaderAPI_WriteLock
   1ffb8:	0c 94 fd f0 	jmp	0x1e1fa	; 0x1e1fa <BootloaderAPI_WriteLock>

0001ffbc <BootloaderAPI_UNUSED1>:
	BootloaderAPI_UNUSED1:
		ret
   1ffbc:	08 95       	ret

0001ffbe <BootloaderAPI_UNUSED2>:
	BootloaderAPI_UNUSED2:
		ret
   1ffbe:	08 95       	ret

0001ffc0 <BootloaderAPI_UNUSED3>:
	BootloaderAPI_UNUSED3:
		ret
   1ffc0:	08 95       	ret

0001ffc2 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_UNUSED4:
		ret
   1ffc2:	08 95       	ret

0001ffc4 <BootloaderAPI_UNUSED5>:
	BootloaderAPI_UNUSED5:
		ret
   1ffc4:	08 95       	ret

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	4b c0       	rjmp	.+150    	; 0x1e098 <__ctors_end>
   1e002:	00 00       	nop
   1e004:	af c0       	rjmp	.+350    	; 0x1e164 <__bad_interrupt>
   1e006:	00 00       	nop
   1e008:	ad c0       	rjmp	.+346    	; 0x1e164 <__bad_interrupt>
   1e00a:	00 00       	nop
   1e00c:	ab c0       	rjmp	.+342    	; 0x1e164 <__bad_interrupt>
   1e00e:	00 00       	nop
   1e010:	a9 c0       	rjmp	.+338    	; 0x1e164 <__bad_interrupt>
   1e012:	00 00       	nop
   1e014:	a7 c0       	rjmp	.+334    	; 0x1e164 <__bad_interrupt>
   1e016:	00 00       	nop
   1e018:	a5 c0       	rjmp	.+330    	; 0x1e164 <__bad_interrupt>
   1e01a:	00 00       	nop
   1e01c:	a3 c0       	rjmp	.+326    	; 0x1e164 <__bad_interrupt>
   1e01e:	00 00       	nop
   1e020:	a1 c0       	rjmp	.+322    	; 0x1e164 <__bad_interrupt>
   1e022:	00 00       	nop
   1e024:	9f c0       	rjmp	.+318    	; 0x1e164 <__bad_interrupt>
   1e026:	00 00       	nop
   1e028:	58 c5       	rjmp	.+2736   	; 0x1eada <__vector_10>
   1e02a:	00 00       	nop
   1e02c:	9b c0       	rjmp	.+310    	; 0x1e164 <__bad_interrupt>
   1e02e:	00 00       	nop
   1e030:	99 c0       	rjmp	.+306    	; 0x1e164 <__bad_interrupt>
   1e032:	00 00       	nop
   1e034:	97 c0       	rjmp	.+302    	; 0x1e164 <__bad_interrupt>
   1e036:	00 00       	nop
   1e038:	95 c0       	rjmp	.+298    	; 0x1e164 <__bad_interrupt>
   1e03a:	00 00       	nop
   1e03c:	93 c0       	rjmp	.+294    	; 0x1e164 <__bad_interrupt>
   1e03e:	00 00       	nop
   1e040:	91 c0       	rjmp	.+290    	; 0x1e164 <__bad_interrupt>
   1e042:	00 00       	nop
   1e044:	8f c0       	rjmp	.+286    	; 0x1e164 <__bad_interrupt>
   1e046:	00 00       	nop
   1e048:	8d c0       	rjmp	.+282    	; 0x1e164 <__bad_interrupt>
   1e04a:	00 00       	nop
   1e04c:	8b c0       	rjmp	.+278    	; 0x1e164 <__bad_interrupt>
   1e04e:	00 00       	nop
   1e050:	a0 c3       	rjmp	.+1856   	; 0x1e792 <__vector_20>
   1e052:	00 00       	nop
   1e054:	87 c0       	rjmp	.+270    	; 0x1e164 <__bad_interrupt>
   1e056:	00 00       	nop
   1e058:	85 c0       	rjmp	.+266    	; 0x1e164 <__bad_interrupt>
   1e05a:	00 00       	nop
   1e05c:	83 c0       	rjmp	.+262    	; 0x1e164 <__bad_interrupt>
   1e05e:	00 00       	nop
   1e060:	81 c0       	rjmp	.+258    	; 0x1e164 <__bad_interrupt>
   1e062:	00 00       	nop
   1e064:	7f c0       	rjmp	.+254    	; 0x1e164 <__bad_interrupt>
   1e066:	00 00       	nop
   1e068:	7d c0       	rjmp	.+250    	; 0x1e164 <__bad_interrupt>
   1e06a:	00 00       	nop
   1e06c:	7b c0       	rjmp	.+246    	; 0x1e164 <__bad_interrupt>
   1e06e:	00 00       	nop
   1e070:	79 c0       	rjmp	.+242    	; 0x1e164 <__bad_interrupt>
   1e072:	00 00       	nop
   1e074:	77 c0       	rjmp	.+238    	; 0x1e164 <__bad_interrupt>
   1e076:	00 00       	nop
   1e078:	75 c0       	rjmp	.+234    	; 0x1e164 <__bad_interrupt>
   1e07a:	00 00       	nop
   1e07c:	73 c0       	rjmp	.+230    	; 0x1e164 <__bad_interrupt>
   1e07e:	00 00       	nop
   1e080:	71 c0       	rjmp	.+226    	; 0x1e164 <__bad_interrupt>
   1e082:	00 00       	nop
   1e084:	6f c0       	rjmp	.+222    	; 0x1e164 <__bad_interrupt>
   1e086:	00 00       	nop
   1e088:	6d c0       	rjmp	.+218    	; 0x1e164 <__bad_interrupt>
   1e08a:	00 00       	nop
   1e08c:	6b c0       	rjmp	.+214    	; 0x1e164 <__bad_interrupt>
   1e08e:	00 00       	nop
   1e090:	69 c0       	rjmp	.+210    	; 0x1e164 <__bad_interrupt>
   1e092:	00 00       	nop
   1e094:	67 c0       	rjmp	.+206    	; 0x1e164 <__bad_interrupt>
	...

0001e098 <__ctors_end>:
   1e098:	11 24       	eor	r1, r1
   1e09a:	1f be       	out	0x3f, r1	; 63
   1e09c:	cf ef       	ldi	r28, 0xFF	; 255
   1e09e:	d0 e2       	ldi	r29, 0x20	; 32
   1e0a0:	de bf       	out	0x3e, r29	; 62
   1e0a2:	cd bf       	out	0x3d, r28	; 61

0001e0a4 <Application_Jump_Check>:

		/* Re-enable JTAG debugging */
		JTAG_ENABLE();
	#else
		/* Check if the device's BOOTRST fuse is set */
		if (boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS) & FUSE_BOOTRST)
   1e0a4:	e3 e0       	ldi	r30, 0x03	; 3
   1e0a6:	f0 e0       	ldi	r31, 0x00	; 0
   1e0a8:	89 e0       	ldi	r24, 0x09	; 9
   1e0aa:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e0ae:	84 91       	lpm	r24, Z
   1e0b0:	8e 7f       	andi	r24, 0xFE	; 254
   1e0b2:	91 f0       	breq	.+36     	; 0x1e0d8 <Application_Jump_Check+0x34>
		{
			/* If the reset source was not an external reset or the key is correct, clear it and jump to the application */
			if (!(MCUSR & (1 << EXTRF)) || (MagicBootKey == MAGIC_BOOT_KEY))
   1e0b4:	04 b6       	in	r0, 0x34	; 52
   1e0b6:	01 fe       	sbrs	r0, 1
   1e0b8:	0a c0       	rjmp	.+20     	; 0x1e0ce <Application_Jump_Check+0x2a>
   1e0ba:	81 e0       	ldi	r24, 0x01	; 1
   1e0bc:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <__bss_end>
   1e0c0:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <__bss_end+0x1>
   1e0c4:	22 34       	cpi	r18, 0x42	; 66
   1e0c6:	3c 4d       	sbci	r19, 0xDC	; 220
   1e0c8:	19 f0       	breq	.+6      	; 0x1e0d0 <Application_Jump_Check+0x2c>
   1e0ca:	80 e0       	ldi	r24, 0x00	; 0
   1e0cc:	01 c0       	rjmp	.+2      	; 0x1e0d0 <Application_Jump_Check+0x2c>
			  JumpToApplication = true;
   1e0ce:	81 e0       	ldi	r24, 0x01	; 1

			/* Clear reset source */
			MCUSR &= ~(1 << EXTRF);
   1e0d0:	94 b7       	in	r25, 0x34	; 52
   1e0d2:	9d 7f       	andi	r25, 0xFD	; 253
   1e0d4:	94 bf       	out	0x34, r25	; 52
   1e0d6:	11 c0       	rjmp	.+34     	; 0x1e0fa <Application_Jump_Check+0x56>
		}
		else
		{
			/* If the reset source was the bootloader and the key is correct, clear it and jump to the application;
			 * this can happen in the HWBE fuse is set, and the HBE pin is low during the watchdog reset */
			if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
   1e0d8:	04 b6       	in	r0, 0x34	; 52
   1e0da:	03 fe       	sbrs	r0, 3
   1e0dc:	0a c0       	rjmp	.+20     	; 0x1e0f2 <Application_Jump_Check+0x4e>
   1e0de:	81 e0       	ldi	r24, 0x01	; 1
   1e0e0:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <__bss_end>
   1e0e4:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <__bss_end+0x1>
   1e0e8:	22 34       	cpi	r18, 0x42	; 66
   1e0ea:	3c 4d       	sbci	r19, 0xDC	; 220
   1e0ec:	19 f0       	breq	.+6      	; 0x1e0f4 <Application_Jump_Check+0x50>
   1e0ee:	80 e0       	ldi	r24, 0x00	; 0
   1e0f0:	01 c0       	rjmp	.+2      	; 0x1e0f4 <Application_Jump_Check+0x50>
 *  start key has been loaded into \ref MagicBootKey. If the bootloader started via the watchdog and the key is valid,
 *  this will force the user application to start via a software jump.
 */
void Application_Jump_Check(void)
{
	bool JumpToApplication = false;
   1e0f2:	80 e0       	ldi	r24, 0x00	; 0
			 * this can happen in the HWBE fuse is set, and the HBE pin is low during the watchdog reset */
			if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
				JumpToApplication = true;

			/* Clear reset source */
			MCUSR &= ~(1 << WDRF);
   1e0f4:	94 b7       	in	r25, 0x34	; 52
   1e0f6:	97 7f       	andi	r25, 0xF7	; 247
   1e0f8:	94 bf       	out	0x34, r25	; 52
		}
	#endif

	/* Don't run the user application if the reset vector is blank (no app loaded) */
	bool ApplicationValid = (pgm_read_word_near(0) != 0xFFFF);
   1e0fa:	20 e0       	ldi	r18, 0x00	; 0
   1e0fc:	30 e0       	ldi	r19, 0x00	; 0
   1e0fe:	f9 01       	movw	r30, r18
   1e100:	45 91       	lpm	r20, Z+
   1e102:	54 91       	lpm	r21, Z

	/* If a request has been made to jump to the user application, honor it */
	if (JumpToApplication && ApplicationValid)
   1e104:	88 23       	and	r24, r24
   1e106:	b9 f0       	breq	.+46     	; 0x1e136 <__do_copy_data>
   1e108:	4f 3f       	cpi	r20, 0xFF	; 255
   1e10a:	5f 4f       	sbci	r21, 0xFF	; 255
   1e10c:	a1 f0       	breq	.+40     	; 0x1e136 <__do_copy_data>
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1 << WDRF);
   1e10e:	84 b7       	in	r24, 0x34	; 52
   1e110:	87 7f       	andi	r24, 0xF7	; 247
   1e112:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
   1e114:	0f b6       	in	r0, 0x3f	; 63
   1e116:	f8 94       	cli
   1e118:	a8 95       	wdr
   1e11a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e11e:	88 61       	ori	r24, 0x18	; 24
   1e120:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e124:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e128:	0f be       	out	0x3f, r0	; 63
		wdt_disable();

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
   1e12a:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__bss_end+0x1>
   1e12e:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__bss_end>

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
   1e132:	f9 01       	movw	r30, r18
   1e134:	09 95       	icall

0001e136 <__do_copy_data>:
   1e136:	11 e0       	ldi	r17, 0x01	; 1
   1e138:	a0 e0       	ldi	r26, 0x00	; 0
   1e13a:	b1 e0       	ldi	r27, 0x01	; 1
   1e13c:	e6 ed       	ldi	r30, 0xD6	; 214
   1e13e:	fe ee       	ldi	r31, 0xEE	; 238
   1e140:	01 e0       	ldi	r16, 0x01	; 1
   1e142:	0b bf       	out	0x3b, r16	; 59
   1e144:	02 c0       	rjmp	.+4      	; 0x1e14a <__do_copy_data+0x14>
   1e146:	07 90       	elpm	r0, Z+
   1e148:	0d 92       	st	X+, r0
   1e14a:	a2 39       	cpi	r26, 0x92	; 146
   1e14c:	b1 07       	cpc	r27, r17
   1e14e:	d9 f7       	brne	.-10     	; 0x1e146 <__do_copy_data+0x10>

0001e150 <__do_clear_bss>:
   1e150:	21 e0       	ldi	r18, 0x01	; 1
   1e152:	a2 e9       	ldi	r26, 0x92	; 146
   1e154:	b1 e0       	ldi	r27, 0x01	; 1
   1e156:	01 c0       	rjmp	.+2      	; 0x1e15a <.do_clear_bss_start>

0001e158 <.do_clear_bss_loop>:
   1e158:	1d 92       	st	X+, r1

0001e15a <.do_clear_bss_start>:
   1e15a:	a0 3a       	cpi	r26, 0xA0	; 160
   1e15c:	b2 07       	cpc	r27, r18
   1e15e:	e1 f7       	brne	.-8      	; 0x1e158 <.do_clear_bss_loop>
   1e160:	88 d0       	rcall	.+272    	; 0x1e272 <main>
   1e162:	b7 c6       	rjmp	.+3438   	; 0x1eed2 <_exit>

0001e164 <__bad_interrupt>:
   1e164:	4d cf       	rjmp	.-358    	; 0x1e000 <__vectors>

0001e166 <BootloaderAPI_ErasePage>:

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	boot_page_erase_safe(Address);
   1e166:	07 b6       	in	r0, 0x37	; 55
   1e168:	00 fc       	sbrc	r0, 0
   1e16a:	fd cf       	rjmp	.-6      	; 0x1e166 <BootloaderAPI_ErasePage>
   1e16c:	f9 99       	sbic	0x1f, 1	; 31
   1e16e:	fe cf       	rjmp	.-4      	; 0x1e16c <BootloaderAPI_ErasePage+0x6>
   1e170:	23 e0       	ldi	r18, 0x03	; 3
   1e172:	fb 01       	movw	r30, r22
   1e174:	80 93 5b 00 	sts	0x005B, r24	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e178:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e17c:	e8 95       	spm
	boot_spm_busy_wait();
   1e17e:	07 b6       	in	r0, 0x37	; 55
   1e180:	00 fc       	sbrc	r0, 0
   1e182:	fd cf       	rjmp	.-6      	; 0x1e17e <BootloaderAPI_ErasePage+0x18>
	boot_rww_enable();
   1e184:	81 e1       	ldi	r24, 0x11	; 17
   1e186:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e18a:	e8 95       	spm
   1e18c:	08 95       	ret

0001e18e <BootloaderAPI_WritePage>:
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	boot_page_write_safe(Address);
   1e18e:	07 b6       	in	r0, 0x37	; 55
   1e190:	00 fc       	sbrc	r0, 0
   1e192:	fd cf       	rjmp	.-6      	; 0x1e18e <BootloaderAPI_WritePage>
   1e194:	f9 99       	sbic	0x1f, 1	; 31
   1e196:	fe cf       	rjmp	.-4      	; 0x1e194 <BootloaderAPI_WritePage+0x6>
   1e198:	25 e0       	ldi	r18, 0x05	; 5
   1e19a:	fb 01       	movw	r30, r22
   1e19c:	80 93 5b 00 	sts	0x005B, r24	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e1a0:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e1a4:	e8 95       	spm
	boot_spm_busy_wait();
   1e1a6:	07 b6       	in	r0, 0x37	; 55
   1e1a8:	00 fc       	sbrc	r0, 0
   1e1aa:	fd cf       	rjmp	.-6      	; 0x1e1a6 <BootloaderAPI_WritePage+0x18>
	boot_rww_enable();
   1e1ac:	81 e1       	ldi	r24, 0x11	; 17
   1e1ae:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e1b2:	e8 95       	spm
   1e1b4:	08 95       	ret

0001e1b6 <BootloaderAPI_FillWord>:
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
   1e1b6:	07 b6       	in	r0, 0x37	; 55
   1e1b8:	00 fc       	sbrc	r0, 0
   1e1ba:	fd cf       	rjmp	.-6      	; 0x1e1b6 <BootloaderAPI_FillWord>
   1e1bc:	f9 99       	sbic	0x1f, 1	; 31
   1e1be:	fe cf       	rjmp	.-4      	; 0x1e1bc <BootloaderAPI_FillWord+0x6>
   1e1c0:	21 e0       	ldi	r18, 0x01	; 1
   1e1c2:	0a 01       	movw	r0, r20
   1e1c4:	fb 01       	movw	r30, r22
   1e1c6:	80 93 5b 00 	sts	0x005B, r24	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e1ca:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e1ce:	e8 95       	spm
   1e1d0:	11 24       	eor	r1, r1
   1e1d2:	08 95       	ret

0001e1d4 <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
   1e1d4:	21 e2       	ldi	r18, 0x21	; 33
   1e1d6:	fc 01       	movw	r30, r24
   1e1d8:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e1dc:	84 91       	lpm	r24, Z
}
   1e1de:	08 95       	ret

0001e1e0 <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
   1e1e0:	29 e0       	ldi	r18, 0x09	; 9
   1e1e2:	fc 01       	movw	r30, r24
   1e1e4:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e1e8:	84 91       	lpm	r24, Z
}
   1e1ea:	08 95       	ret

0001e1ec <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
   1e1ec:	e1 e0       	ldi	r30, 0x01	; 1
   1e1ee:	f0 e0       	ldi	r31, 0x00	; 0
   1e1f0:	89 e0       	ldi	r24, 0x09	; 9
   1e1f2:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e1f6:	84 91       	lpm	r24, Z
}
   1e1f8:	08 95       	ret

0001e1fa <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
   1e1fa:	07 b6       	in	r0, 0x37	; 55
   1e1fc:	00 fc       	sbrc	r0, 0
   1e1fe:	fd cf       	rjmp	.-6      	; 0x1e1fa <BootloaderAPI_WriteLock>
   1e200:	f9 99       	sbic	0x1f, 1	; 31
   1e202:	fe cf       	rjmp	.-4      	; 0x1e200 <BootloaderAPI_WriteLock+0x6>
   1e204:	80 95       	com	r24
   1e206:	99 e0       	ldi	r25, 0x09	; 9
   1e208:	e1 e0       	ldi	r30, 0x01	; 1
   1e20a:	f0 e0       	ldi	r31, 0x00	; 0
   1e20c:	08 2e       	mov	r0, r24
   1e20e:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e212:	e8 95       	spm
   1e214:	08 95       	ret

0001e216 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e216:	84 e0       	ldi	r24, 0x04	; 4
   1e218:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1e21c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
   1e220:	85 fd       	sbrc	r24, 5
   1e222:	0d c0       	rjmp	.+26     	; 0x1e23e <FetchNextCommandByte+0x28>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e224:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e228:	8b 77       	andi	r24, 0x7B	; 123
   1e22a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e22e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
   1e232:	82 fd       	sbrc	r24, 2
   1e234:	f3 cf       	rjmp	.-26     	; 0x1e21c <FetchNextCommandByte+0x6>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e236:	8e b3       	in	r24, 0x1e	; 30
   1e238:	81 11       	cpse	r24, r1
   1e23a:	f9 cf       	rjmp	.-14     	; 0x1e22e <FetchNextCommandByte+0x18>
   1e23c:	02 c0       	rjmp	.+4      	; 0x1e242 <FetchNextCommandByte+0x2c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1e23e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
   1e242:	08 95       	ret

0001e244 <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e244:	93 e0       	ldi	r25, 0x03	; 3
   1e246:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1e24a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPADDR);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
   1e24e:	95 ff       	sbrs	r25, 5
   1e250:	03 c0       	rjmp	.+6      	; 0x1e258 <WriteNextResponseByte+0x14>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e252:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1e256:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e258:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e25c:	9e 77       	andi	r25, 0x7E	; 126
   1e25e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e262:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
   1e266:	90 fd       	sbrc	r25, 0
   1e268:	f4 cf       	rjmp	.-24     	; 0x1e252 <WriteNextResponseByte+0xe>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e26a:	9e b3       	in	r25, 0x1e	; 30
   1e26c:	91 11       	cpse	r25, r1
   1e26e:	f9 cf       	rjmp	.-14     	; 0x1e262 <WriteNextResponseByte+0x1e>
   1e270:	08 95       	ret

0001e272 <main>:

/** Configures all hardware required for the bootloader. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1e272:	84 b7       	in	r24, 0x34	; 52
   1e274:	87 7f       	andi	r24, 0xF7	; 247
   1e276:	84 bf       	out	0x34, r24	; 52
   1e278:	0f b6       	in	r0, 0x3f	; 63
   1e27a:	f8 94       	cli
   1e27c:	a8 95       	wdr
   1e27e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e282:	88 61       	ori	r24, 0x18	; 24
   1e284:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e288:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e28c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
   1e28e:	90 e0       	ldi	r25, 0x00	; 0
   1e290:	80 e8       	ldi	r24, 0x80	; 128
   1e292:	0f b6       	in	r0, 0x3f	; 63
   1e294:	f8 94       	cli
   1e296:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
   1e29a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
   1e29e:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1e2a0:	c1 e0       	ldi	r28, 0x01	; 1
   1e2a2:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1 << IVSEL);
   1e2a4:	82 e0       	ldi	r24, 0x02	; 2
   1e2a6:	85 bf       	out	0x35, r24	; 53

	/* Initialize the USB and other board hardware drivers */
	USB_Init();
   1e2a8:	fd d3       	rcall	.+2042   	; 0x1eaa4 <USB_Init>
	LEDs_Init();

	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
   1e2aa:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCCR1B = ((1 << CS11) | (1 << CS10));
   1e2ae:	83 e0       	ldi	r24, 0x03	; 3
   1e2b0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
   1e2b4:	78 94       	sei
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e2b6:	f3 e0       	ldi	r31, 0x03	; 3
   1e2b8:	cf 2e       	mov	r12, r31

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == MEMORY_TYPE_FLASH)
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
   1e2ba:	a5 e0       	ldi	r26, 0x05	; 5
   1e2bc:	da 2e       	mov	r13, r26
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
	}
	else if (Command == AVR109_COMMAND_ReadLowFuses)
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
   1e2be:	21 2c       	mov	r2, r1
   1e2c0:	31 2c       	mov	r3, r1
	LEDs_SetAllLEDs(LEDS_LED1);

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	while (RunBootloader)
   1e2c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1e2c6:	88 23       	and	r24, r24
   1e2c8:	09 f4       	brne	.+2      	; 0x1e2cc <main+0x5a>
   1e2ca:	47 c2       	rjmp	.+1166   	; 0x1e75a <main+0x4e8>
   1e2cc:	24 e0       	ldi	r18, 0x04	; 4
   1e2ce:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e2d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
   1e2d6:	82 ff       	sbrs	r24, 2
	  return;

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
   1e2d8:	3e c2       	rjmp	.+1148   	; 0x1e756 <main+0x4e4>
   1e2da:	9d df       	rcall	.-198    	; 0x1e216 <FetchNextCommandByte>
   1e2dc:	18 2f       	mov	r17, r24

	if (Command == AVR109_COMMAND_ExitBootloader)
   1e2de:	85 34       	cpi	r24, 0x45	; 69
   1e2e0:	19 f4       	brne	.+6      	; 0x1e2e8 <main+0x76>
	{
		RunBootloader = false;
   1e2e2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
   1e2e6:	07 c0       	rjmp	.+14     	; 0x1e2f6 <main+0x84>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if ((Command == AVR109_COMMAND_SetLED) || (Command == AVR109_COMMAND_ClearLED) ||
   1e2e8:	88 e8       	ldi	r24, 0x88	; 136
   1e2ea:	81 0f       	add	r24, r17
   1e2ec:	82 30       	cpi	r24, 0x02	; 2
   1e2ee:	10 f0       	brcs	.+4      	; 0x1e2f4 <main+0x82>
   1e2f0:	14 35       	cpi	r17, 0x54	; 84
	         (Command == AVR109_COMMAND_SelectDeviceType))
	{
		FetchNextCommandByte();
   1e2f2:	21 f4       	brne	.+8      	; 0x1e2fc <main+0x8a>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
   1e2f4:	90 df       	rcall	.-224    	; 0x1e216 <FetchNextCommandByte>
   1e2f6:	8d e0       	ldi	r24, 0x0D	; 13
   1e2f8:	a5 df       	rcall	.-182    	; 0x1e244 <WriteNextResponseByte>
   1e2fa:	05 c2       	rjmp	.+1034   	; 0x1e706 <main+0x494>
	}
	else if ((Command == AVR109_COMMAND_EnterProgrammingMode) || (Command == AVR109_COMMAND_LeaveProgrammingMode))
   1e2fc:	10 35       	cpi	r17, 0x50	; 80
   1e2fe:	d9 f3       	breq	.-10     	; 0x1e2f6 <main+0x84>
   1e300:	1c 34       	cpi	r17, 0x4C	; 76
   1e302:	c9 f3       	breq	.-14     	; 0x1e2f6 <main+0x84>
	{
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadPartCode)
   1e304:	14 37       	cpi	r17, 0x74	; 116
   1e306:	11 f4       	brne	.+4      	; 0x1e30c <main+0x9a>
	{
		/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
		WriteNextResponseByte(0x44);
   1e308:	84 e4       	ldi	r24, 0x44	; 68
   1e30a:	82 c0       	rjmp	.+260    	; 0x1e410 <main+0x19e>
		WriteNextResponseByte(0x00);
	}
	else if (Command == AVR109_COMMAND_ReadAutoAddressIncrement)
   1e30c:	11 36       	cpi	r17, 0x61	; 97
   1e30e:	11 f4       	brne	.+4      	; 0x1e314 <main+0xa2>
	{
		/* Indicate auto-address increment is supported */
		WriteNextResponseByte('Y');
   1e310:	89 e5       	ldi	r24, 0x59	; 89
	}
	else if (Command == AVR109_COMMAND_SetCurrentAddress)
   1e312:	f2 cf       	rjmp	.-28     	; 0x1e2f8 <main+0x86>
	{
		/* Set the current address to that given by the host (translate 16-bit word address to byte address) */
		CurrAddress   = (FetchNextCommandByte() << 9);
   1e314:	11 34       	cpi	r17, 0x41	; 65
   1e316:	91 f4       	brne	.+36     	; 0x1e33c <main+0xca>
   1e318:	7e df       	rcall	.-260    	; 0x1e216 <FetchNextCommandByte>
		CurrAddress  |= (FetchNextCommandByte() << 1);
   1e31a:	c8 2f       	mov	r28, r24
   1e31c:	7c df       	rcall	.-264    	; 0x1e216 <FetchNextCommandByte>
   1e31e:	2c 2f       	mov	r18, r28
   1e320:	30 e0       	ldi	r19, 0x00	; 0
   1e322:	32 2f       	mov	r19, r18
   1e324:	22 27       	eor	r18, r18
   1e326:	33 0f       	add	r19, r19
   1e328:	90 e0       	ldi	r25, 0x00	; 0
   1e32a:	88 0f       	add	r24, r24
   1e32c:	99 1f       	adc	r25, r25
   1e32e:	82 2b       	or	r24, r18
   1e330:	93 2b       	or	r25, r19
   1e332:	09 2e       	mov	r0, r25
   1e334:	00 0c       	add	r0, r0
   1e336:	aa 0b       	sbc	r26, r26
   1e338:	bb 0b       	sbc	r27, r27
   1e33a:	b9 c1       	rjmp	.+882    	; 0x1e6ae <main+0x43c>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderInterface)
   1e33c:	10 37       	cpi	r17, 0x70	; 112
   1e33e:	11 f4       	brne	.+4      	; 0x1e344 <main+0xd2>
	{
		/* Indicate serial programmer back to the host */
		WriteNextResponseByte('S');
   1e340:	83 e5       	ldi	r24, 0x53	; 83
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderIdentifier)
   1e342:	da cf       	rjmp	.-76     	; 0x1e2f8 <main+0x86>
   1e344:	13 35       	cpi	r17, 0x53	; 83
   1e346:	49 f4       	brne	.+18     	; 0x1e35a <main+0xe8>
   1e348:	c8 e0       	ldi	r28, 0x08	; 8
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
   1e34a:	d1 e0       	ldi	r29, 0x01	; 1
   1e34c:	89 91       	ld	r24, Y+
   1e34e:	7a df       	rcall	.-268    	; 0x1e244 <WriteNextResponseByte>
		WriteNextResponseByte('S');
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderIdentifier)
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
   1e350:	41 e0       	ldi	r20, 0x01	; 1
   1e352:	cf 30       	cpi	r28, 0x0F	; 15
   1e354:	d4 07       	cpc	r29, r20
   1e356:	d1 f7       	brne	.-12     	; 0x1e34c <main+0xda>
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == AVR109_COMMAND_ReadBootloaderSWVersion)
   1e358:	d6 c1       	rjmp	.+940    	; 0x1e706 <main+0x494>
   1e35a:	16 35       	cpi	r17, 0x56	; 86
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
   1e35c:	21 f4       	brne	.+8      	; 0x1e366 <main+0xf4>
   1e35e:	81 e3       	ldi	r24, 0x31	; 49
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
   1e360:	71 df       	rcall	.-286    	; 0x1e244 <WriteNextResponseByte>
   1e362:	80 e3       	ldi	r24, 0x30	; 48
	}
	else if (Command == AVR109_COMMAND_ReadSignature)
   1e364:	c9 cf       	rjmp	.-110    	; 0x1e2f8 <main+0x86>
   1e366:	13 37       	cpi	r17, 0x73	; 115
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
   1e368:	31 f4       	brne	.+12     	; 0x1e376 <main+0x104>
   1e36a:	82 e8       	ldi	r24, 0x82	; 130
   1e36c:	6b df       	rcall	.-298    	; 0x1e244 <WriteNextResponseByte>
		WriteNextResponseByte(AVR_SIGNATURE_2);
   1e36e:	87 e9       	ldi	r24, 0x97	; 151
   1e370:	69 df       	rcall	.-302    	; 0x1e244 <WriteNextResponseByte>
   1e372:	8e e1       	ldi	r24, 0x1E	; 30
		WriteNextResponseByte(AVR_SIGNATURE_1);
   1e374:	c1 cf       	rjmp	.-126    	; 0x1e2f8 <main+0x86>
   1e376:	15 36       	cpi	r17, 0x65	; 101
	}
	else if (Command == AVR109_COMMAND_EraseFLASH)
   1e378:	01 f5       	brne	.+64     	; 0x1e3ba <main+0x148>
   1e37a:	80 e0       	ldi	r24, 0x00	; 0
   1e37c:	90 e0       	ldi	r25, 0x00	; 0
   1e37e:	dc 01       	movw	r26, r24
   1e380:	fc 01       	movw	r30, r24
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
   1e382:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e386:	c0 92 57 00 	sts	0x0057, r12	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e38a:	e8 95       	spm
   1e38c:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
   1e38e:	00 fc       	sbrc	r0, 0
   1e390:	fd cf       	rjmp	.-6      	; 0x1e38c <main+0x11a>
   1e392:	fc 01       	movw	r30, r24
			boot_page_write(CurrFlashAddress);
   1e394:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e398:	d0 92 57 00 	sts	0x0057, r13	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e39c:	e8 95       	spm
   1e39e:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
   1e3a0:	00 fc       	sbrc	r0, 0
   1e3a2:	fd cf       	rjmp	.-6      	; 0x1e39e <main+0x12c>
   1e3a4:	9f 5f       	subi	r25, 0xFF	; 255
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == AVR109_COMMAND_EraseFLASH)
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
   1e3a6:	af 4f       	sbci	r26, 0xFF	; 255
   1e3a8:	bf 4f       	sbci	r27, 0xFF	; 255
   1e3aa:	81 15       	cp	r24, r1
   1e3ac:	50 ee       	ldi	r21, 0xE0	; 224
   1e3ae:	95 07       	cpc	r25, r21
   1e3b0:	51 e0       	ldi	r21, 0x01	; 1
   1e3b2:	a5 07       	cpc	r26, r21
   1e3b4:	b1 05       	cpc	r27, r1
   1e3b6:	21 f7       	brne	.-56     	; 0x1e380 <main+0x10e>
   1e3b8:	9e cf       	rjmp	.-196    	; 0x1e2f6 <main+0x84>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
	else if (Command == AVR109_COMMAND_WriteLockbits)
   1e3ba:	1c 36       	cpi	r17, 0x6C	; 108
   1e3bc:	51 f4       	brne	.+20     	; 0x1e3d2 <main+0x160>
	{
		/* Set the lock bits to those given by the host */
		boot_lock_bits_set(FetchNextCommandByte());
   1e3be:	2b df       	rcall	.-426    	; 0x1e216 <FetchNextCommandByte>
   1e3c0:	80 95       	com	r24
   1e3c2:	99 e0       	ldi	r25, 0x09	; 9
   1e3c4:	e1 e0       	ldi	r30, 0x01	; 1
   1e3c6:	f0 e0       	ldi	r31, 0x00	; 0
   1e3c8:	08 2e       	mov	r0, r24
   1e3ca:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e3ce:	e8 95       	spm
   1e3d0:	92 cf       	rjmp	.-220    	; 0x1e2f6 <main+0x84>
   1e3d2:	12 37       	cpi	r17, 0x72	; 114

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == AVR109_COMMAND_ReadLockbits)
   1e3d4:	21 f4       	brne	.+8      	; 0x1e3de <main+0x16c>
   1e3d6:	89 e0       	ldi	r24, 0x09	; 9
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
   1e3d8:	e1 e0       	ldi	r30, 0x01	; 1
   1e3da:	f0 e0       	ldi	r31, 0x00	; 0
   1e3dc:	10 c0       	rjmp	.+32     	; 0x1e3fe <main+0x18c>
   1e3de:	16 34       	cpi	r17, 0x46	; 70
	}
	else if (Command == AVR109_COMMAND_ReadLowFuses)
   1e3e0:	19 f4       	brne	.+6      	; 0x1e3e8 <main+0x176>
   1e3e2:	89 e0       	ldi	r24, 0x09	; 9
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
   1e3e4:	f1 01       	movw	r30, r2
   1e3e6:	0b c0       	rjmp	.+22     	; 0x1e3fe <main+0x18c>
   1e3e8:	1e 34       	cpi	r17, 0x4E	; 78
	}
	else if (Command == AVR109_COMMAND_ReadHighFuses)
   1e3ea:	21 f4       	brne	.+8      	; 0x1e3f4 <main+0x182>
   1e3ec:	89 e0       	ldi	r24, 0x09	; 9
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
   1e3ee:	e3 e0       	ldi	r30, 0x03	; 3
   1e3f0:	f0 e0       	ldi	r31, 0x00	; 0
   1e3f2:	05 c0       	rjmp	.+10     	; 0x1e3fe <main+0x18c>
   1e3f4:	11 35       	cpi	r17, 0x51	; 81
	}
	else if (Command == AVR109_COMMAND_ReadExtendedFuses)
   1e3f6:	39 f4       	brne	.+14     	; 0x1e406 <main+0x194>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
   1e3f8:	89 e0       	ldi	r24, 0x09	; 9
   1e3fa:	e2 e0       	ldi	r30, 0x02	; 2
   1e3fc:	f0 e0       	ldi	r31, 0x00	; 0
   1e3fe:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e402:	84 91       	lpm	r24, Z
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == AVR109_COMMAND_GetBlockWriteSupport)
   1e404:	79 cf       	rjmp	.-270    	; 0x1e2f8 <main+0x86>
   1e406:	12 36       	cpi	r17, 0x62	; 98
	{
		WriteNextResponseByte('Y');
   1e408:	31 f4       	brne	.+12     	; 0x1e416 <main+0x1a4>
   1e40a:	89 e5       	ldi	r24, 0x59	; 89

		/* Send block size to the host */
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
   1e40c:	1b df       	rcall	.-458    	; 0x1e244 <WriteNextResponseByte>
   1e40e:	81 e0       	ldi	r24, 0x01	; 1
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
   1e410:	19 df       	rcall	.-462    	; 0x1e244 <WriteNextResponseByte>
	}
	else if ((Command == AVR109_COMMAND_BlockWrite) || (Command == AVR109_COMMAND_BlockRead))
   1e412:	80 e0       	ldi	r24, 0x00	; 0
   1e414:	71 cf       	rjmp	.-286    	; 0x1e2f8 <main+0x86>
   1e416:	12 34       	cpi	r17, 0x42	; 66
   1e418:	19 f0       	breq	.+6      	; 0x1e420 <main+0x1ae>
   1e41a:	17 36       	cpi	r17, 0x67	; 103
	char     MemoryType;

	uint8_t  HighByte = 0;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
   1e41c:	09 f0       	breq	.+2      	; 0x1e420 <main+0x1ae>
   1e41e:	c9 c0       	rjmp	.+402    	; 0x1e5b2 <main+0x340>
   1e420:	fa de       	rcall	.-524    	; 0x1e216 <FetchNextCommandByte>
   1e422:	c8 2f       	mov	r28, r24
   1e424:	d0 e0       	ldi	r29, 0x00	; 0
   1e426:	dc 2f       	mov	r29, r28
	BlockSize |=  FetchNextCommandByte();
   1e428:	cc 27       	eor	r28, r28
   1e42a:	f5 de       	rcall	.-534    	; 0x1e216 <FetchNextCommandByte>
   1e42c:	c8 2b       	or	r28, r24

	MemoryType =  FetchNextCommandByte();
   1e42e:	f3 de       	rcall	.-538    	; 0x1e216 <FetchNextCommandByte>
   1e430:	08 2f       	mov	r16, r24
   1e432:	8b eb       	ldi	r24, 0xBB	; 187

	if ((MemoryType != MEMORY_TYPE_FLASH) && (MemoryType != MEMORY_TYPE_EEPROM))
   1e434:	80 0f       	add	r24, r16
   1e436:	82 30       	cpi	r24, 0x02	; 2
   1e438:	10 f0       	brcs	.+4      	; 0x1e43e <main+0x1cc>
   1e43a:	8f e3       	ldi	r24, 0x3F	; 63
	{
		/* Send error byte back to the host */
		WriteNextResponseByte('?');
   1e43c:	5d cf       	rjmp	.-326    	; 0x1e2f8 <main+0x86>
   1e43e:	17 36       	cpi	r17, 0x67	; 103

		return;
	}

	/* Check if command is to read a memory block */
	if (Command == AVR109_COMMAND_BlockRead)
   1e440:	09 f0       	breq	.+2      	; 0x1e444 <main+0x1d2>
   1e442:	40 c0       	rjmp	.+128    	; 0x1e4c4 <main+0x252>
   1e444:	f1 e1       	ldi	r31, 0x11	; 17
	{
		/* Re-enable RWW section */
		boot_rww_enable();
   1e446:	f0 93 57 00 	sts	0x0057, r31	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e44a:	e8 95       	spm
   1e44c:	f1 2c       	mov	r15, r1
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	uint8_t  HighByte = 0;
   1e44e:	20 97       	sbiw	r28, 0x00	; 0
	if (Command == AVR109_COMMAND_BlockRead)
	{
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
   1e450:	09 f4       	brne	.+2      	; 0x1e454 <main+0x1e2>
   1e452:	59 c1       	rjmp	.+690    	; 0x1e706 <main+0x494>
   1e454:	80 90 92 01 	lds	r8, 0x0192	; 0x800192 <__data_end>
   1e458:	90 90 93 01 	lds	r9, 0x0193	; 0x800193 <__data_end+0x1>
   1e45c:	a0 90 94 01 	lds	r10, 0x0194	; 0x800194 <__data_end+0x2>
   1e460:	b0 90 95 01 	lds	r11, 0x0195	; 0x800195 <__data_end+0x3>
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
   1e464:	d5 01       	movw	r26, r10
   1e466:	c4 01       	movw	r24, r8
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
   1e468:	06 34       	cpi	r16, 0x46	; 70
   1e46a:	b9 f4       	brne	.+46     	; 0x1e49a <main+0x228>
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
   1e46c:	8f 29       	or	r24, r15
   1e46e:	ab bf       	out	0x3b, r26	; 59
   1e470:	fc 01       	movw	r30, r24
   1e472:	87 91       	elpm	r24, Z+
   1e474:	e7 de       	rcall	.-562    	; 0x1e244 <WriteNextResponseByte>
   1e476:	ff 20       	and	r15, r15
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
   1e478:	69 f0       	breq	.+26     	; 0x1e494 <main+0x222>
   1e47a:	22 e0       	ldi	r18, 0x02	; 2
				  CurrAddress += 2;
   1e47c:	82 0e       	add	r8, r18
   1e47e:	91 1c       	adc	r9, r1
   1e480:	a1 1c       	adc	r10, r1
   1e482:	b1 1c       	adc	r11, r1
   1e484:	80 92 92 01 	sts	0x0192, r8	; 0x800192 <__data_end>
   1e488:	90 92 93 01 	sts	0x0193, r9	; 0x800193 <__data_end+0x1>
   1e48c:	a0 92 94 01 	sts	0x0194, r10	; 0x800194 <__data_end+0x2>
   1e490:	b0 92 95 01 	sts	0x0195, r11	; 0x800195 <__data_end+0x3>
   1e494:	41 e0       	ldi	r20, 0x01	; 1
   1e496:	f4 26       	eor	r15, r20
				HighByte = !HighByte;
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
   1e498:	13 c0       	rjmp	.+38     	; 0x1e4c0 <main+0x24e>
   1e49a:	b6 95       	lsr	r27
   1e49c:	a7 95       	ror	r26
   1e49e:	97 95       	ror	r25
   1e4a0:	87 95       	ror	r24
   1e4a2:	fd d4       	rcall	.+2554   	; 0x1ee9e <eeprom_read_byte>
   1e4a4:	cf de       	rcall	.-610    	; 0x1e244 <WriteNextResponseByte>
   1e4a6:	52 e0       	ldi	r21, 0x02	; 2

				/* Increment the address counter after use */
				CurrAddress += 2;
   1e4a8:	85 0e       	add	r8, r21
   1e4aa:	91 1c       	adc	r9, r1
   1e4ac:	a1 1c       	adc	r10, r1
   1e4ae:	b1 1c       	adc	r11, r1
   1e4b0:	80 92 92 01 	sts	0x0192, r8	; 0x800192 <__data_end>
   1e4b4:	90 92 93 01 	sts	0x0193, r9	; 0x800193 <__data_end+0x1>
   1e4b8:	a0 92 94 01 	sts	0x0194, r10	; 0x800194 <__data_end+0x2>
   1e4bc:	b0 92 95 01 	sts	0x0195, r11	; 0x800195 <__data_end+0x3>
   1e4c0:	21 97       	sbiw	r28, 0x01	; 1
   1e4c2:	c5 cf       	rjmp	.-118    	; 0x1e44e <main+0x1dc>
   1e4c4:	80 90 92 01 	lds	r8, 0x0192	; 0x800192 <__data_end>
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
   1e4c8:	90 90 93 01 	lds	r9, 0x0193	; 0x800193 <__data_end+0x1>
   1e4cc:	a0 90 94 01 	lds	r10, 0x0194	; 0x800194 <__data_end+0x2>
   1e4d0:	b0 90 95 01 	lds	r11, 0x0195	; 0x800195 <__data_end+0x3>
   1e4d4:	06 34       	cpi	r16, 0x46	; 70

		if (MemoryType == MEMORY_TYPE_FLASH)
   1e4d6:	49 f4       	brne	.+18     	; 0x1e4ea <main+0x278>
   1e4d8:	f4 01       	movw	r30, r8
		{
			boot_page_erase(PageStartAddress);
   1e4da:	a0 92 5b 00 	sts	0x005B, r10	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e4de:	c0 92 57 00 	sts	0x0057, r12	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e4e2:	e8 95       	spm
   1e4e4:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
   1e4e6:	00 fc       	sbrc	r0, 0
   1e4e8:	fd cf       	rjmp	.-6      	; 0x1e4e4 <main+0x272>
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == MEMORY_TYPE_FLASH)
   1e4ea:	e1 2c       	mov	r14, r1
   1e4ec:	f1 2c       	mov	r15, r1
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
   1e4ee:	20 97       	sbiw	r28, 0x00	; 0
   1e4f0:	09 f4       	brne	.+2      	; 0x1e4f4 <main+0x282>
   1e4f2:	52 c0       	rjmp	.+164    	; 0x1e598 <main+0x326>
		{
			if (MemoryType == MEMORY_TYPE_FLASH)
   1e4f4:	06 34       	cpi	r16, 0x46	; 70
   1e4f6:	61 f5       	brne	.+88     	; 0x1e550 <main+0x2de>
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
   1e4f8:	ff 20       	and	r15, r15
   1e4fa:	29 f1       	breq	.+74     	; 0x1e546 <main+0x2d4>
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
   1e4fc:	40 90 92 01 	lds	r4, 0x0192	; 0x800192 <__data_end>
   1e500:	50 90 93 01 	lds	r5, 0x0193	; 0x800193 <__data_end+0x1>
   1e504:	60 90 94 01 	lds	r6, 0x0194	; 0x800194 <__data_end+0x2>
   1e508:	70 90 95 01 	lds	r7, 0x0195	; 0x800195 <__data_end+0x3>
   1e50c:	84 de       	rcall	.-760    	; 0x1e216 <FetchNextCommandByte>
   1e50e:	2e 2d       	mov	r18, r14
   1e510:	30 e0       	ldi	r19, 0x00	; 0
   1e512:	f9 01       	movw	r30, r18
   1e514:	f8 2b       	or	r31, r24
   1e516:	cf 01       	movw	r24, r30
   1e518:	21 e0       	ldi	r18, 0x01	; 1
   1e51a:	0c 01       	movw	r0, r24
   1e51c:	f2 01       	movw	r30, r4
   1e51e:	60 92 5b 00 	sts	0x005B, r6	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e522:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e526:	e8 95       	spm
   1e528:	11 24       	eor	r1, r1

					/* Increment the address counter after use */
					CurrAddress += 2;
   1e52a:	42 e0       	ldi	r20, 0x02	; 2
   1e52c:	44 0e       	add	r4, r20
   1e52e:	51 1c       	adc	r5, r1
   1e530:	61 1c       	adc	r6, r1
   1e532:	71 1c       	adc	r7, r1
   1e534:	40 92 92 01 	sts	0x0192, r4	; 0x800192 <__data_end>
   1e538:	50 92 93 01 	sts	0x0193, r5	; 0x800193 <__data_end+0x1>
   1e53c:	60 92 94 01 	sts	0x0194, r6	; 0x800194 <__data_end+0x2>
   1e540:	70 92 95 01 	sts	0x0195, r7	; 0x800195 <__data_end+0x3>
				}
				else
				{
					LowByte = FetchNextCommandByte();
   1e544:	02 c0       	rjmp	.+4      	; 0x1e54a <main+0x2d8>
   1e546:	67 de       	rcall	.-818    	; 0x1e216 <FetchNextCommandByte>
   1e548:	e8 2e       	mov	r14, r24
   1e54a:	51 e0       	ldi	r21, 0x01	; 1
   1e54c:	f5 26       	eor	r15, r21
   1e54e:	22 c0       	rjmp	.+68     	; 0x1e594 <main+0x322>
				HighByte = !HighByte;
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_update_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
   1e550:	62 de       	rcall	.-828    	; 0x1e216 <FetchNextCommandByte>
   1e552:	68 2f       	mov	r22, r24
   1e554:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
   1e558:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
   1e55c:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <__data_end+0x2>
   1e560:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <__data_end+0x3>
   1e564:	b6 95       	lsr	r27
   1e566:	a7 95       	ror	r26
   1e568:	97 95       	ror	r25
   1e56a:	87 95       	ror	r24
   1e56c:	a0 d4       	rcall	.+2368   	; 0x1eeae <eeprom_update_byte>
   1e56e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>

				/* Increment the address counter after use */
				CurrAddress += 2;
   1e572:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
   1e576:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <__data_end+0x2>
   1e57a:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <__data_end+0x3>
   1e57e:	02 96       	adiw	r24, 0x02	; 2
   1e580:	a1 1d       	adc	r26, r1
   1e582:	b1 1d       	adc	r27, r1
   1e584:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
   1e588:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
   1e58c:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <__data_end+0x2>
   1e590:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <__data_end+0x3>
   1e594:	21 97       	sbiw	r28, 0x01	; 1
   1e596:	ab cf       	rjmp	.-170    	; 0x1e4ee <main+0x27c>
   1e598:	06 34       	cpi	r16, 0x46	; 70
   1e59a:	09 f0       	breq	.+2      	; 0x1e59e <main+0x32c>
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == MEMORY_TYPE_FLASH)
   1e59c:	ac ce       	rjmp	.-680    	; 0x1e2f6 <main+0x84>
   1e59e:	f4 01       	movw	r30, r8
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
   1e5a0:	a0 92 5b 00 	sts	0x005B, r10	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e5a4:	d0 92 57 00 	sts	0x0057, r13	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e5a8:	e8 95       	spm
   1e5aa:	07 b6       	in	r0, 0x37	; 55

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
   1e5ac:	00 fc       	sbrc	r0, 0
   1e5ae:	fd cf       	rjmp	.-6      	; 0x1e5aa <main+0x338>
   1e5b0:	a2 ce       	rjmp	.-700    	; 0x1e2f6 <main+0x84>
   1e5b2:	13 34       	cpi	r17, 0x43	; 67
		/* Delegate the block write/read to a separate function for clarity */
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == AVR109_COMMAND_FillFlashPageWordHigh)
   1e5b4:	a1 f4       	brne	.+40     	; 0x1e5de <main+0x36c>
   1e5b6:	80 90 92 01 	lds	r8, 0x0192	; 0x800192 <__data_end>
	{
		/* Write the high byte to the current flash page */
		boot_page_fill(CurrAddress, FetchNextCommandByte());
   1e5ba:	90 90 93 01 	lds	r9, 0x0193	; 0x800193 <__data_end+0x1>
   1e5be:	a0 90 94 01 	lds	r10, 0x0194	; 0x800194 <__data_end+0x2>
   1e5c2:	b0 90 95 01 	lds	r11, 0x0195	; 0x800195 <__data_end+0x3>
   1e5c6:	27 de       	rcall	.-946    	; 0x1e216 <FetchNextCommandByte>
   1e5c8:	90 e0       	ldi	r25, 0x00	; 0
   1e5ca:	21 e0       	ldi	r18, 0x01	; 1
   1e5cc:	0c 01       	movw	r0, r24
   1e5ce:	f4 01       	movw	r30, r8
   1e5d0:	a0 92 5b 00 	sts	0x005B, r10	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e5d4:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e5d8:	e8 95       	spm
   1e5da:	11 24       	eor	r1, r1
   1e5dc:	8c ce       	rjmp	.-744    	; 0x1e2f6 <main+0x84>
   1e5de:	13 36       	cpi	r17, 0x63	; 99

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_FillFlashPageWordLow)
   1e5e0:	21 f5       	brne	.+72     	; 0x1e62a <main+0x3b8>
   1e5e2:	80 90 92 01 	lds	r8, 0x0192	; 0x800192 <__data_end>
	{
		/* Write the low byte to the current flash page */
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
   1e5e6:	90 90 93 01 	lds	r9, 0x0193	; 0x800193 <__data_end+0x1>
   1e5ea:	a0 90 94 01 	lds	r10, 0x0194	; 0x800194 <__data_end+0x2>
   1e5ee:	b0 90 95 01 	lds	r11, 0x0195	; 0x800195 <__data_end+0x3>
   1e5f2:	11 de       	rcall	.-990    	; 0x1e216 <FetchNextCommandByte>
   1e5f4:	b5 01       	movw	r22, r10
   1e5f6:	a4 01       	movw	r20, r8
   1e5f8:	41 60       	ori	r20, 0x01	; 1
   1e5fa:	90 e0       	ldi	r25, 0x00	; 0
   1e5fc:	21 e0       	ldi	r18, 0x01	; 1
   1e5fe:	0c 01       	movw	r0, r24
   1e600:	fa 01       	movw	r30, r20
   1e602:	60 93 5b 00 	sts	0x005B, r22	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e606:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e60a:	e8 95       	spm
   1e60c:	11 24       	eor	r1, r1
   1e60e:	42 e0       	ldi	r20, 0x02	; 2
   1e610:	84 0e       	add	r8, r20

		/* Increment the address */
		CurrAddress += 2;
   1e612:	91 1c       	adc	r9, r1
   1e614:	a1 1c       	adc	r10, r1
   1e616:	b1 1c       	adc	r11, r1
   1e618:	80 92 92 01 	sts	0x0192, r8	; 0x800192 <__data_end>
   1e61c:	90 92 93 01 	sts	0x0193, r9	; 0x800193 <__data_end+0x1>
   1e620:	a0 92 94 01 	sts	0x0194, r10	; 0x800194 <__data_end+0x2>
   1e624:	b0 92 95 01 	sts	0x0195, r11	; 0x800195 <__data_end+0x3>
   1e628:	66 ce       	rjmp	.-820    	; 0x1e2f6 <main+0x84>
   1e62a:	1d 36       	cpi	r17, 0x6D	; 109
   1e62c:	91 f4       	brne	.+36     	; 0x1e652 <main+0x3e0>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_WriteFlashPage)
   1e62e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
	{
		/* Commit the flash page to memory */
		boot_page_write(CurrAddress);
   1e632:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
   1e636:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <__data_end+0x2>
   1e63a:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <__data_end+0x3>
   1e63e:	fc 01       	movw	r30, r24
   1e640:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e644:	d0 92 57 00 	sts	0x0057, r13	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e648:	e8 95       	spm
   1e64a:	07 b6       	in	r0, 0x37	; 55

		/* Wait until write operation has completed */
		boot_spm_busy_wait();
   1e64c:	00 fc       	sbrc	r0, 0
   1e64e:	fd cf       	rjmp	.-6      	; 0x1e64a <main+0x3d8>
   1e650:	52 ce       	rjmp	.-860    	; 0x1e2f6 <main+0x84>
   1e652:	12 35       	cpi	r17, 0x52	; 82

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadFLASHWord)
   1e654:	81 f4       	brne	.+32     	; 0x1e676 <main+0x404>
   1e656:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
   1e65a:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
   1e65e:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <__data_end+0x2>
   1e662:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <__data_end+0x3>
   1e666:	ab bf       	out	0x3b, r26	; 59
   1e668:	fc 01       	movw	r30, r24
   1e66a:	c7 91       	elpm	r28, Z+
   1e66c:	d6 91       	elpm	r29, Z
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
   1e66e:	8d 2f       	mov	r24, r29
   1e670:	e9 dd       	rcall	.-1070   	; 0x1e244 <WriteNextResponseByte>
   1e672:	8c 2f       	mov	r24, r28
		WriteNextResponseByte(ProgramWord & 0xFF);
   1e674:	41 ce       	rjmp	.-894    	; 0x1e2f8 <main+0x86>
   1e676:	14 34       	cpi	r17, 0x44	; 68
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == AVR109_COMMAND_WriteEEPROM)
   1e678:	19 f5       	brne	.+70     	; 0x1e6c0 <main+0x44e>
   1e67a:	cd dd       	rcall	.-1126   	; 0x1e216 <FetchNextCommandByte>
	{
		/* Read the byte from the endpoint and write it to the EEPROM */
		eeprom_update_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
   1e67c:	68 2f       	mov	r22, r24
   1e67e:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
   1e682:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
   1e686:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <__data_end+0x2>
   1e68a:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <__data_end+0x3>
   1e68e:	b6 95       	lsr	r27
   1e690:	a7 95       	ror	r26
   1e692:	97 95       	ror	r25
   1e694:	87 95       	ror	r24
   1e696:	0b d4       	rcall	.+2070   	; 0x1eeae <eeprom_update_byte>
   1e698:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
   1e69c:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>

		/* Increment the address after use */
		CurrAddress += 2;
   1e6a0:	a0 91 94 01 	lds	r26, 0x0194	; 0x800194 <__data_end+0x2>
   1e6a4:	b0 91 95 01 	lds	r27, 0x0195	; 0x800195 <__data_end+0x3>
   1e6a8:	02 96       	adiw	r24, 0x02	; 2
   1e6aa:	a1 1d       	adc	r26, r1
   1e6ac:	b1 1d       	adc	r27, r1
   1e6ae:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <__data_end>
   1e6b2:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <__data_end+0x1>
   1e6b6:	a0 93 94 01 	sts	0x0194, r26	; 0x800194 <__data_end+0x2>
   1e6ba:	b0 93 95 01 	sts	0x0195, r27	; 0x800195 <__data_end+0x3>
   1e6be:	1b ce       	rjmp	.-970    	; 0x1e2f6 <main+0x84>
   1e6c0:	14 36       	cpi	r17, 0x64	; 100

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == AVR109_COMMAND_ReadEEPROM)
   1e6c2:	f1 f4       	brne	.+60     	; 0x1e700 <main+0x48e>
   1e6c4:	80 90 92 01 	lds	r8, 0x0192	; 0x800192 <__data_end>
	{
		/* Read the EEPROM byte and write it to the endpoint */
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
   1e6c8:	90 90 93 01 	lds	r9, 0x0193	; 0x800193 <__data_end+0x1>
   1e6cc:	a0 90 94 01 	lds	r10, 0x0194	; 0x800194 <__data_end+0x2>
   1e6d0:	b0 90 95 01 	lds	r11, 0x0195	; 0x800195 <__data_end+0x3>
   1e6d4:	d5 01       	movw	r26, r10
   1e6d6:	c4 01       	movw	r24, r8
   1e6d8:	b6 95       	lsr	r27
   1e6da:	a7 95       	ror	r26
   1e6dc:	97 95       	ror	r25
   1e6de:	87 95       	ror	r24
   1e6e0:	de d3       	rcall	.+1980   	; 0x1ee9e <eeprom_read_byte>
   1e6e2:	b0 dd       	rcall	.-1184   	; 0x1e244 <WriteNextResponseByte>
   1e6e4:	52 e0       	ldi	r21, 0x02	; 2
   1e6e6:	85 0e       	add	r8, r21
   1e6e8:	91 1c       	adc	r9, r1

		/* Increment the address after use */
		CurrAddress += 2;
   1e6ea:	a1 1c       	adc	r10, r1
   1e6ec:	b1 1c       	adc	r11, r1
   1e6ee:	80 92 92 01 	sts	0x0192, r8	; 0x800192 <__data_end>
   1e6f2:	90 92 93 01 	sts	0x0193, r9	; 0x800193 <__data_end+0x1>
   1e6f6:	a0 92 94 01 	sts	0x0194, r10	; 0x800194 <__data_end+0x2>
   1e6fa:	b0 92 95 01 	sts	0x0195, r11	; 0x800195 <__data_end+0x3>
   1e6fe:	03 c0       	rjmp	.+6      	; 0x1e706 <main+0x494>
   1e700:	1b 31       	cpi	r17, 0x1B	; 27
   1e702:	09 f0       	breq	.+2      	; 0x1e706 <main+0x494>
   1e704:	9a ce       	rjmp	.-716    	; 0x1e43a <main+0x1c8>
	}
	#endif
	else if (Command != AVR109_COMMAND_Sync)
   1e706:	c0 92 e9 00 	sts	0x00E9, r12	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1e70a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e70e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1e712:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e714:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e718:	95 fd       	sbrc	r25, 5
   1e71a:	11 c0       	rjmp	.+34     	; 0x1e73e <main+0x4cc>
   1e71c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e720:	80 fd       	sbrc	r24, 0
   1e722:	04 c0       	rjmp	.+8      	; 0x1e72c <main+0x4ba>
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
	{
		while (!(Endpoint_IsINReady()))
   1e724:	8e b3       	in	r24, 0x1e	; 30
   1e726:	81 11       	cpse	r24, r1
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e728:	f9 cf       	rjmp	.-14     	; 0x1e71c <main+0x4aa>
   1e72a:	15 c0       	rjmp	.+42     	; 0x1e756 <main+0x4e4>
   1e72c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e730:	8e 77       	andi	r24, 0x7E	; 126
   1e732:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e736:	03 c0       	rjmp	.+6      	; 0x1e73e <main+0x4cc>
   1e738:	8e b3       	in	r24, 0x1e	; 30
   1e73a:	88 23       	and	r24, r24
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e73c:	61 f0       	breq	.+24     	; 0x1e756 <main+0x4e4>
   1e73e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e742:	80 ff       	sbrs	r24, 0
   1e744:	f9 cf       	rjmp	.-14     	; 0x1e738 <main+0x4c6>

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
   1e746:	84 e0       	ldi	r24, 0x04	; 4
   1e748:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e74c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e750:	8b 77       	andi	r24, 0x7B	; 123
   1e752:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e756:	8a d3       	rcall	.+1812   	; 0x1ee6c <USB_USBTask>
   1e758:	b4 cd       	rjmp	.-1176   	; 0x1e2c2 <main+0x50>
	GlobalInterruptEnable();

	while (RunBootloader)
	{
		CDC_Task();
		USB_USBTask();
   1e75a:	ef e9       	ldi	r30, 0x9F	; 159
   1e75c:	ff e0       	ldi	r31, 0x0F	; 15
   1e75e:	31 97       	sbiw	r30, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   1e760:	f1 f7       	brne	.-4      	; 0x1e75e <main+0x4ec>
   1e762:	00 c0       	rjmp	.+0      	; 0x1e764 <main+0x4f2>
   1e764:	00 00       	nop
   1e766:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
   1e76a:	81 60       	ori	r24, 0x01	; 1
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1e76c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
   1e770:	82 e4       	ldi	r24, 0x42	; 66
   1e772:	9c ed       	ldi	r25, 0xDC	; 220
   1e774:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <__bss_end+0x1>

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Unlock the forced application start mode of the bootloader if it is restarted */
	MagicBootKey = MAGIC_BOOT_KEY;
   1e778:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__bss_end>
   1e77c:	9c e0       	ldi	r25, 0x0C	; 12
   1e77e:	88 e1       	ldi	r24, 0x18	; 24
   1e780:	0f b6       	in	r0, 0x3f	; 63
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
   1e782:	f8 94       	cli
   1e784:	a8 95       	wdr
   1e786:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e78a:	0f be       	out	0x3f, r0	; 63
   1e78c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e790:	ff cf       	rjmp	.-2      	; 0x1e790 <main+0x51e>

0001e792 <__vector_20>:
   1e792:	1f 92       	push	r1
   1e794:	0f 92       	push	r0
   1e796:	0f b6       	in	r0, 0x3f	; 63
	TCCR1B = ((1 << CS11) | (1 << CS10));
}

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
   1e798:	0f 92       	push	r0
   1e79a:	11 24       	eor	r1, r1
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);
}
   1e79c:	0f 90       	pop	r0
   1e79e:	0f be       	out	0x3f, r0	; 63
   1e7a0:	0f 90       	pop	r0
   1e7a2:	1f 90       	pop	r1
   1e7a4:	18 95       	reti

0001e7a6 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1e7a6:	42 e0       	ldi	r20, 0x02	; 2
   1e7a8:	61 ec       	ldi	r22, 0xC1	; 193
   1e7aa:	82 e0       	ldi	r24, 0x02	; 2
   1e7ac:	0a d1       	rcall	.+532    	; 0x1e9c2 <Endpoint_ConfigureEndpoint_Prv>
   1e7ae:	42 e1       	ldi	r20, 0x12	; 18
   1e7b0:	61 e8       	ldi	r22, 0x81	; 129
   1e7b2:	83 e0       	ldi	r24, 0x03	; 3
   1e7b4:	06 d1       	rcall	.+524    	; 0x1e9c2 <Endpoint_ConfigureEndpoint_Prv>
   1e7b6:	42 e1       	ldi	r20, 0x12	; 18
   1e7b8:	60 e8       	ldi	r22, 0x80	; 128
   1e7ba:	84 e0       	ldi	r24, 0x04	; 4
   1e7bc:	02 c1       	rjmp	.+516    	; 0x1e9c2 <Endpoint_ConfigureEndpoint_Prv>

0001e7be <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Ignore any requests that aren't directed to the CDC interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
   1e7be:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <USB_ControlRequest>
   1e7c2:	98 2f       	mov	r25, r24
   1e7c4:	9f 77       	andi	r25, 0x7F	; 127
   1e7c6:	91 32       	cpi	r25, 0x21	; 33
   1e7c8:	99 f5       	brne	.+102    	; 0x1e830 <EVENT_USB_Device_ControlRequest+0x72>

	/* Activity - toggle indicator LEDs */
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
   1e7ca:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <USB_ControlRequest+0x1>
   1e7ce:	91 32       	cpi	r25, 0x21	; 33
   1e7d0:	29 f0       	breq	.+10     	; 0x1e7dc <EVENT_USB_Device_ControlRequest+0x1e>
   1e7d2:	92 32       	cpi	r25, 0x22	; 34
   1e7d4:	29 f1       	breq	.+74     	; 0x1e820 <EVENT_USB_Device_ControlRequest+0x62>
   1e7d6:	90 32       	cpi	r25, 0x20	; 32
   1e7d8:	59 f5       	brne	.+86     	; 0x1e830 <EVENT_USB_Device_ControlRequest+0x72>
   1e7da:	10 c0       	rjmp	.+32     	; 0x1e7fc <EVENT_USB_Device_ControlRequest+0x3e>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
   1e7dc:	81 3a       	cpi	r24, 0xA1	; 161
   1e7de:	41 f5       	brne	.+80     	; 0x1e830 <EVENT_USB_Device_ControlRequest+0x72>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e7e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e7e4:	87 7f       	andi	r24, 0xF7	; 247
   1e7e6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
   1e7ea:	67 e0       	ldi	r22, 0x07	; 7
   1e7ec:	70 e0       	ldi	r23, 0x00	; 0
   1e7ee:	81 e0       	ldi	r24, 0x01	; 1
   1e7f0:	91 e0       	ldi	r25, 0x01	; 1
   1e7f2:	51 d0       	rcall	.+162    	; 0x1e896 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e7f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e7f8:	8b 77       	andi	r24, 0x7B	; 123
   1e7fa:	0f c0       	rjmp	.+30     	; 0x1e81a <EVENT_USB_Device_ControlRequest+0x5c>
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   1e7fc:	81 32       	cpi	r24, 0x21	; 33
   1e7fe:	c1 f4       	brne	.+48     	; 0x1e830 <EVENT_USB_Device_ControlRequest+0x72>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e800:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e804:	87 7f       	andi	r24, 0xF7	; 247
   1e806:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
   1e80a:	67 e0       	ldi	r22, 0x07	; 7
   1e80c:	70 e0       	ldi	r23, 0x00	; 0
   1e80e:	81 e0       	ldi	r24, 0x01	; 1
   1e810:	91 e0       	ldi	r25, 0x01	; 1
   1e812:	9b d0       	rcall	.+310    	; 0x1e94a <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e814:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e818:	8e 77       	andi	r24, 0x7E	; 126
   1e81a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e81e:	08 95       	ret
				Endpoint_ClearIN();
			}

			break;
        case CDC_REQ_SetControlLineState:
	        if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   1e820:	81 32       	cpi	r24, 0x21	; 33
   1e822:	31 f4       	brne	.+12     	; 0x1e830 <EVENT_USB_Device_ControlRequest+0x72>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e824:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e828:	87 7f       	andi	r24, 0xF7	; 247
   1e82a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	        {
	            Endpoint_ClearSETUP();
	            Endpoint_ClearStatusStage();
   1e82e:	dd c0       	rjmp	.+442    	; 0x1e9ea <Endpoint_ClearStatusStage>
   1e830:	08 95       	ret

0001e832 <CALLBACK_USB_GetDescriptor>:
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
   1e832:	29 2f       	mov	r18, r25
   1e834:	30 e0       	ldi	r19, 0x00	; 0
   1e836:	22 30       	cpi	r18, 0x02	; 2
   1e838:	31 05       	cpc	r19, r1
   1e83a:	59 f0       	breq	.+22     	; 0x1e852 <CALLBACK_USB_GetDescriptor+0x20>
   1e83c:	23 30       	cpi	r18, 0x03	; 3
   1e83e:	31 05       	cpc	r19, r1
   1e840:	69 f0       	breq	.+26     	; 0x1e85c <CALLBACK_USB_GetDescriptor+0x2a>
   1e842:	21 30       	cpi	r18, 0x01	; 1
   1e844:	31 05       	cpc	r19, r1
   1e846:	f9 f4       	brne	.+62     	; 0x1e886 <CALLBACK_USB_GetDescriptor+0x54>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
   1e848:	82 e1       	ldi	r24, 0x12	; 18
   1e84a:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
   1e84c:	20 e8       	ldi	r18, 0x80	; 128
   1e84e:	31 e0       	ldi	r19, 0x01	; 1
   1e850:	1e c0       	rjmp	.+60     	; 0x1e88e <CALLBACK_USB_GetDescriptor+0x5c>
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
   1e852:	8e e3       	ldi	r24, 0x3E	; 62
   1e854:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
   1e856:	22 e4       	ldi	r18, 0x42	; 66
   1e858:	31 e0       	ldi	r19, 0x01	; 1
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
   1e85a:	19 c0       	rjmp	.+50     	; 0x1e88e <CALLBACK_USB_GetDescriptor+0x5c>
        case DTYPE_String:
            if (DescriptorNumber == STRING_ID_Language)
   1e85c:	88 23       	and	r24, r24
   1e85e:	49 f0       	breq	.+18     	; 0x1e872 <CALLBACK_USB_GetDescriptor+0x40>
            {
                Address = &LanguageString;
                Size    = LanguageString.Header.Size;
            }
            else if (DescriptorNumber == STRING_ID_Manufacturer)
   1e860:	81 30       	cpi	r24, 0x01	; 1
   1e862:	61 f0       	breq	.+24     	; 0x1e87c <CALLBACK_USB_GetDescriptor+0x4a>
            {
                Address = &ManufacturerString;
                Size    = ManufacturerString.Header.Size;
            }
            else if (DescriptorNumber == STRING_ID_Product)
   1e864:	82 30       	cpi	r24, 0x02	; 2
   1e866:	79 f4       	brne	.+30     	; 0x1e886 <CALLBACK_USB_GetDescriptor+0x54>
            {
                Address = &ProductString;
                Size    = ProductString.Header.Size;
   1e868:	82 e1       	ldi	r24, 0x12	; 18
   1e86a:	90 e0       	ldi	r25, 0x00	; 0
                Address = &ManufacturerString;
                Size    = ManufacturerString.Header.Size;
            }
            else if (DescriptorNumber == STRING_ID_Product)
            {
                Address = &ProductString;
   1e86c:	20 e1       	ldi	r18, 0x10	; 16
   1e86e:	31 e0       	ldi	r19, 0x01	; 1
   1e870:	0e c0       	rjmp	.+28     	; 0x1e88e <CALLBACK_USB_GetDescriptor+0x5c>
            break;
        case DTYPE_String:
            if (DescriptorNumber == STRING_ID_Language)
            {
                Address = &LanguageString;
                Size    = LanguageString.Header.Size;
   1e872:	84 e0       	ldi	r24, 0x04	; 4
   1e874:	90 e0       	ldi	r25, 0x00	; 0
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            if (DescriptorNumber == STRING_ID_Language)
            {
                Address = &LanguageString;
   1e876:	2e e3       	ldi	r18, 0x3E	; 62
   1e878:	31 e0       	ldi	r19, 0x01	; 1
   1e87a:	09 c0       	rjmp	.+18     	; 0x1e88e <CALLBACK_USB_GetDescriptor+0x5c>
                Size    = LanguageString.Header.Size;
            }
            else if (DescriptorNumber == STRING_ID_Manufacturer)
            {
                Address = &ManufacturerString;
                Size    = ManufacturerString.Header.Size;
   1e87c:	88 e1       	ldi	r24, 0x18	; 24
   1e87e:	90 e0       	ldi	r25, 0x00	; 0
                Address = &LanguageString;
                Size    = LanguageString.Header.Size;
            }
            else if (DescriptorNumber == STRING_ID_Manufacturer)
            {
                Address = &ManufacturerString;
   1e880:	24 e2       	ldi	r18, 0x24	; 36
   1e882:	31 e0       	ldi	r19, 0x01	; 1
   1e884:	04 c0       	rjmp	.+8      	; 0x1e88e <CALLBACK_USB_GetDescriptor+0x5c>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
   1e886:	80 e0       	ldi	r24, 0x00	; 0
   1e888:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
   1e88a:	20 e0       	ldi	r18, 0x00	; 0
   1e88c:	30 e0       	ldi	r19, 0x00	; 0
            }

            break;
    }

    *DescriptorAddress = Address;
   1e88e:	fa 01       	movw	r30, r20
   1e890:	31 83       	std	Z+1, r19	; 0x01
   1e892:	20 83       	st	Z, r18
    return Size;
}
   1e894:	08 95       	ret

0001e896 <Endpoint_Write_Control_Stream_LE>:
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1e896:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <USB_ControlRequest+0x6>
   1e89a:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <USB_ControlRequest+0x7>
   1e89e:	26 17       	cp	r18, r22
   1e8a0:	37 07       	cpc	r19, r23
   1e8a2:	48 f0       	brcs	.+18     	; 0x1e8b6 <Endpoint_Write_Control_Stream_LE+0x20>
   1e8a4:	61 15       	cp	r22, r1
   1e8a6:	71 05       	cpc	r23, r1
   1e8a8:	39 f4       	brne	.+14     	; 0x1e8b8 <Endpoint_Write_Control_Stream_LE+0x22>
   1e8aa:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e8ae:	2e 77       	andi	r18, 0x7E	; 126
   1e8b0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e8b4:	01 c0       	rjmp	.+2      	; 0x1e8b8 <Endpoint_Write_Control_Stream_LE+0x22>
   1e8b6:	b9 01       	movw	r22, r18
   1e8b8:	fc 01       	movw	r30, r24
   1e8ba:	20 e0       	ldi	r18, 0x00	; 0
   1e8bc:	61 15       	cp	r22, r1
   1e8be:	71 05       	cpc	r23, r1
   1e8c0:	61 f1       	breq	.+88     	; 0x1e91a <Endpoint_Write_Control_Stream_LE+0x84>
   1e8c2:	8e b3       	in	r24, 0x1e	; 30
   1e8c4:	88 23       	and	r24, r24
   1e8c6:	d9 f1       	breq	.+118    	; 0x1e93e <Endpoint_Write_Control_Stream_LE+0xa8>
   1e8c8:	85 30       	cpi	r24, 0x05	; 5
   1e8ca:	d9 f1       	breq	.+118    	; 0x1e942 <Endpoint_Write_Control_Stream_LE+0xac>
   1e8cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e8d0:	83 fd       	sbrc	r24, 3
   1e8d2:	39 c0       	rjmp	.+114    	; 0x1e946 <Endpoint_Write_Control_Stream_LE+0xb0>
   1e8d4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e8d8:	82 fd       	sbrc	r24, 2
   1e8da:	2b c0       	rjmp	.+86     	; 0x1e932 <Endpoint_Write_Control_Stream_LE+0x9c>
   1e8dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e8e0:	80 ff       	sbrs	r24, 0
   1e8e2:	ec cf       	rjmp	.-40     	; 0x1e8bc <Endpoint_Write_Control_Stream_LE+0x26>
   1e8e4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1e8e8:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
   1e8ec:	61 15       	cp	r22, r1
   1e8ee:	71 05       	cpc	r23, r1
   1e8f0:	51 f0       	breq	.+20     	; 0x1e906 <Endpoint_Write_Control_Stream_LE+0x70>
   1e8f2:	88 30       	cpi	r24, 0x08	; 8
   1e8f4:	91 05       	cpc	r25, r1
   1e8f6:	38 f4       	brcc	.+14     	; 0x1e906 <Endpoint_Write_Control_Stream_LE+0x70>
   1e8f8:	21 91       	ld	r18, Z+
   1e8fa:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1e8fe:	61 50       	subi	r22, 0x01	; 1
   1e900:	71 09       	sbc	r23, r1
   1e902:	01 96       	adiw	r24, 0x01	; 1
   1e904:	f3 cf       	rjmp	.-26     	; 0x1e8ec <Endpoint_Write_Control_Stream_LE+0x56>
   1e906:	21 e0       	ldi	r18, 0x01	; 1
   1e908:	08 97       	sbiw	r24, 0x08	; 8
   1e90a:	09 f0       	breq	.+2      	; 0x1e90e <Endpoint_Write_Control_Stream_LE+0x78>
   1e90c:	20 e0       	ldi	r18, 0x00	; 0
   1e90e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e912:	8e 77       	andi	r24, 0x7E	; 126
   1e914:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e918:	d1 cf       	rjmp	.-94     	; 0x1e8bc <Endpoint_Write_Control_Stream_LE+0x26>
   1e91a:	21 11       	cpse	r18, r1
   1e91c:	d2 cf       	rjmp	.-92     	; 0x1e8c2 <Endpoint_Write_Control_Stream_LE+0x2c>
   1e91e:	09 c0       	rjmp	.+18     	; 0x1e932 <Endpoint_Write_Control_Stream_LE+0x9c>
   1e920:	8e b3       	in	r24, 0x1e	; 30
   1e922:	88 23       	and	r24, r24
   1e924:	61 f0       	breq	.+24     	; 0x1e93e <Endpoint_Write_Control_Stream_LE+0xa8>
   1e926:	85 30       	cpi	r24, 0x05	; 5
   1e928:	61 f0       	breq	.+24     	; 0x1e942 <Endpoint_Write_Control_Stream_LE+0xac>
   1e92a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e92e:	83 fd       	sbrc	r24, 3
   1e930:	0a c0       	rjmp	.+20     	; 0x1e946 <Endpoint_Write_Control_Stream_LE+0xb0>
   1e932:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e936:	82 ff       	sbrs	r24, 2
   1e938:	f3 cf       	rjmp	.-26     	; 0x1e920 <Endpoint_Write_Control_Stream_LE+0x8a>
   1e93a:	80 e0       	ldi	r24, 0x00	; 0
   1e93c:	08 95       	ret
   1e93e:	82 e0       	ldi	r24, 0x02	; 2
   1e940:	08 95       	ret
   1e942:	83 e0       	ldi	r24, 0x03	; 3
   1e944:	08 95       	ret
   1e946:	81 e0       	ldi	r24, 0x01	; 1
   1e948:	08 95       	ret

0001e94a <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
   1e94a:	61 15       	cp	r22, r1
   1e94c:	71 05       	cpc	r23, r1
   1e94e:	29 f4       	brne	.+10     	; 0x1e95a <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e950:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e954:	2b 77       	andi	r18, 0x7B	; 123
   1e956:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
   1e95a:	fc 01       	movw	r30, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
   1e95c:	61 15       	cp	r22, r1
   1e95e:	71 05       	cpc	r23, r1
   1e960:	21 f1       	breq	.+72     	; 0x1e9aa <Endpoint_Read_Control_Stream_LE+0x60>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e962:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e964:	88 23       	and	r24, r24
   1e966:	49 f1       	breq	.+82     	; 0x1e9ba <Endpoint_Read_Control_Stream_LE+0x70>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e968:	85 30       	cpi	r24, 0x05	; 5
   1e96a:	49 f1       	breq	.+82     	; 0x1e9be <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e96c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1e970:	83 fd       	sbrc	r24, 3
   1e972:	21 c0       	rjmp	.+66     	; 0x1e9b6 <Endpoint_Read_Control_Stream_LE+0x6c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e974:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
   1e978:	82 ff       	sbrs	r24, 2
   1e97a:	f0 cf       	rjmp	.-32     	; 0x1e95c <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e97c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1e980:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			while (Length && Endpoint_BytesInEndpoint())
   1e984:	89 2b       	or	r24, r25
   1e986:	31 f0       	breq	.+12     	; 0x1e994 <Endpoint_Read_Control_Stream_LE+0x4a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1e988:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1e98c:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1e98e:	61 50       	subi	r22, 0x01	; 1
   1e990:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
   1e992:	a1 f7       	brne	.-24     	; 0x1e97c <Endpoint_Read_Control_Stream_LE+0x32>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e994:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e998:	8b 77       	andi	r24, 0x7B	; 123
   1e99a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e99e:	de cf       	rjmp	.-68     	; 0x1e95c <Endpoint_Read_Control_Stream_LE+0x12>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e9a0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e9a2:	88 23       	and	r24, r24
   1e9a4:	51 f0       	breq	.+20     	; 0x1e9ba <Endpoint_Read_Control_Stream_LE+0x70>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e9a6:	85 30       	cpi	r24, 0x05	; 5
   1e9a8:	51 f0       	breq	.+20     	; 0x1e9be <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e9aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
   1e9ae:	80 ff       	sbrs	r24, 0
   1e9b0:	f7 cf       	rjmp	.-18     	; 0x1e9a0 <Endpoint_Read_Control_Stream_LE+0x56>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1e9b2:	80 e0       	ldi	r24, 0x00	; 0
   1e9b4:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1e9b6:	81 e0       	ldi	r24, 0x01	; 1
   1e9b8:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1e9ba:	82 e0       	ldi	r24, 0x02	; 2
   1e9bc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1e9be:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1e9c0:	08 95       	ret

0001e9c2 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
   1e9c2:	8f 70       	andi	r24, 0x0F	; 15
   1e9c4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1e9c8:	eb ee       	ldi	r30, 0xEB	; 235
   1e9ca:	f0 e0       	ldi	r31, 0x00	; 0
   1e9cc:	80 81       	ld	r24, Z
   1e9ce:	81 60       	ori	r24, 0x01	; 1
   1e9d0:	80 83       	st	Z, r24
   1e9d2:	ed ee       	ldi	r30, 0xED	; 237
   1e9d4:	f0 e0       	ldi	r31, 0x00	; 0
   1e9d6:	10 82       	st	Z, r1
   1e9d8:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
   1e9dc:	40 83       	st	Z, r20
   1e9de:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
   1e9e2:	88 1f       	adc	r24, r24
   1e9e4:	88 27       	eor	r24, r24
   1e9e6:	88 1f       	adc	r24, r24
   1e9e8:	08 95       	ret

0001e9ea <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1e9ea:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <USB_ControlRequest>
   1e9ee:	87 ff       	sbrs	r24, 7
   1e9f0:	0f c0       	rjmp	.+30     	; 0x1ea10 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e9f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
   1e9f6:	82 fd       	sbrc	r24, 2
   1e9f8:	04 c0       	rjmp	.+8      	; 0x1ea02 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e9fa:	8e b3       	in	r24, 0x1e	; 30
   1e9fc:	81 11       	cpse	r24, r1
   1e9fe:	f9 cf       	rjmp	.-14     	; 0x1e9f2 <Endpoint_ClearStatusStage+0x8>
   1ea00:	10 c0       	rjmp	.+32     	; 0x1ea22 <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ea02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ea06:	8b 77       	andi	r24, 0x7B	; 123
   1ea08:	0a c0       	rjmp	.+20     	; 0x1ea1e <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ea0a:	8e b3       	in	r24, 0x1e	; 30
   1ea0c:	88 23       	and	r24, r24
   1ea0e:	49 f0       	breq	.+18     	; 0x1ea22 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ea10:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1ea14:	80 ff       	sbrs	r24, 0
   1ea16:	f9 cf       	rjmp	.-14     	; 0x1ea0a <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ea18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ea1c:	8e 77       	andi	r24, 0x7E	; 126
   1ea1e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ea22:	08 95       	ret

0001ea24 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
   1ea24:	0f 93       	push	r16
   1ea26:	1f 93       	push	r17
   1ea28:	cf 93       	push	r28
   1ea2a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1ea2c:	49 d0       	rcall	.+146    	; 0x1eac0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1ea2e:	50 d0       	rcall	.+160    	; 0x1ead0 <USB_INT_ClearAllInterrupts>
   1ea30:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1ea32:	d0 e0       	ldi	r29, 0x00	; 0
   1ea34:	88 81       	ld	r24, Y
   1ea36:	8f 77       	andi	r24, 0x7F	; 127
   1ea38:	88 83       	st	Y, r24
   1ea3a:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
   1ea3c:	80 68       	ori	r24, 0x80	; 128
   1ea3e:	88 83       	st	Y, r24
   1ea40:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1ea42:	8f 7d       	andi	r24, 0xDF	; 223
   1ea44:	88 83       	st	Y, r24
   1ea46:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1ea48:	f0 e0       	ldi	r31, 0x00	; 0
   1ea4a:	80 81       	ld	r24, Z
   1ea4c:	80 68       	ori	r24, 0x80	; 128
   1ea4e:	80 83       	st	Z, r24
   1ea50:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1ea52:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
   1ea54:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
   1ea58:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1ea5a:	10 e0       	ldi	r17, 0x00	; 0
   1ea5c:	f8 01       	movw	r30, r16
   1ea5e:	80 81       	ld	r24, Z
   1ea60:	8b 7f       	andi	r24, 0xFB	; 251
   1ea62:	80 83       	st	Z, r24
   1ea64:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1ea66:	81 60       	ori	r24, 0x01	; 1
   1ea68:	88 83       	st	Y, r24
   1ea6a:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1ea6c:	60 e0       	ldi	r22, 0x00	; 0
   1ea6e:	80 e0       	ldi	r24, 0x00	; 0
   1ea70:	a8 df       	rcall	.-176    	; 0x1e9c2 <Endpoint_ConfigureEndpoint_Prv>
   1ea72:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1ea74:	f0 e0       	ldi	r31, 0x00	; 0
   1ea76:	80 81       	ld	r24, Z
   1ea78:	8e 7f       	andi	r24, 0xFE	; 254
   1ea7a:	80 83       	st	Z, r24
   1ea7c:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1ea7e:	f0 e0       	ldi	r31, 0x00	; 0
   1ea80:	80 81       	ld	r24, Z
   1ea82:	81 60       	ori	r24, 0x01	; 1
   1ea84:	80 83       	st	Z, r24
   1ea86:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1ea88:	88 60       	ori	r24, 0x08	; 8
   1ea8a:	80 83       	st	Z, r24
   1ea8c:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1ea8e:	80 81       	ld	r24, Z
   1ea90:	8e 7f       	andi	r24, 0xFE	; 254
   1ea92:	80 83       	st	Z, r24
   1ea94:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
   1ea96:	80 61       	ori	r24, 0x10	; 16
   1ea98:	88 83       	st	Y, r24
   1ea9a:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1ea9c:	cf 91       	pop	r28
   1ea9e:	1f 91       	pop	r17
   1eaa0:	0f 91       	pop	r16
   1eaa2:	08 95       	ret

0001eaa4 <USB_Init>:
   1eaa4:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
   1eaa6:	f0 e0       	ldi	r31, 0x00	; 0
   1eaa8:	80 81       	ld	r24, Z
   1eaaa:	8f 7e       	andi	r24, 0xEF	; 239
   1eaac:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
   1eaae:	e7 ed       	ldi	r30, 0xD7	; 215
   1eab0:	f0 e0       	ldi	r31, 0x00	; 0
   1eab2:	80 81       	ld	r24, Z
   1eab4:	81 60       	ori	r24, 0x01	; 1
   1eab6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1eab8:	81 e0       	ldi	r24, 0x01	; 1
   1eaba:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <USB_IsInitialized>

	USB_ResetInterface();
   1eabe:	b2 cf       	rjmp	.-156    	; 0x1ea24 <USB_ResetInterface>

0001eac0 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1eac0:	e8 ed       	ldi	r30, 0xD8	; 216
   1eac2:	f0 e0       	ldi	r31, 0x00	; 0
   1eac4:	80 81       	ld	r24, Z
   1eac6:	8c 7f       	andi	r24, 0xFC	; 252
   1eac8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1eaca:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1eace:	08 95       	ret

0001ead0 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1ead0:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1ead4:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1ead8:	08 95       	ret

0001eada <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1eada:	1f 92       	push	r1
   1eadc:	0f 92       	push	r0
   1eade:	0f b6       	in	r0, 0x3f	; 63
   1eae0:	0f 92       	push	r0
   1eae2:	11 24       	eor	r1, r1
   1eae4:	0b b6       	in	r0, 0x3b	; 59
   1eae6:	0f 92       	push	r0
   1eae8:	2f 93       	push	r18
   1eaea:	3f 93       	push	r19
   1eaec:	4f 93       	push	r20
   1eaee:	5f 93       	push	r21
   1eaf0:	6f 93       	push	r22
   1eaf2:	7f 93       	push	r23
   1eaf4:	8f 93       	push	r24
   1eaf6:	9f 93       	push	r25
   1eaf8:	af 93       	push	r26
   1eafa:	bf 93       	push	r27
   1eafc:	ef 93       	push	r30
   1eafe:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1eb00:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1eb04:	80 ff       	sbrs	r24, 0
   1eb06:	1b c0       	rjmp	.+54     	; 0x1eb3e <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1eb08:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1eb0c:	80 ff       	sbrs	r24, 0
   1eb0e:	17 c0       	rjmp	.+46     	; 0x1eb3e <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1eb10:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
   1eb14:	8e 7f       	andi	r24, 0xFE	; 254
   1eb16:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1eb1a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1eb1e:	80 ff       	sbrs	r24, 0
   1eb20:	0b c0       	rjmp	.+22     	; 0x1eb38 <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1eb22:	84 e1       	ldi	r24, 0x14	; 20
   1eb24:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1eb26:	86 e1       	ldi	r24, 0x16	; 22
   1eb28:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1eb2a:	09 b4       	in	r0, 0x29	; 41
   1eb2c:	00 fe       	sbrs	r0, 0
   1eb2e:	fd cf       	rjmp	.-6      	; 0x1eb2a <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1eb30:	81 e0       	ldi	r24, 0x01	; 1
   1eb32:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1eb34:	9a d1       	rcall	.+820    	; 0x1ee6a <USB_Event_Stub>
   1eb36:	03 c0       	rjmp	.+6      	; 0x1eb3e <__vector_10+0x64>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1eb38:	19 bc       	out	0x29, r1	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
			EVENT_USB_Device_Disconnect();
   1eb3a:	1e ba       	out	0x1e, r1	; 30
   1eb3c:	96 d1       	rcall	.+812    	; 0x1ee6a <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1eb3e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1eb42:	80 ff       	sbrs	r24, 0
   1eb44:	17 c0       	rjmp	.+46     	; 0x1eb74 <__vector_10+0x9a>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1eb46:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1eb4a:	80 ff       	sbrs	r24, 0
   1eb4c:	13 c0       	rjmp	.+38     	; 0x1eb74 <__vector_10+0x9a>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1eb4e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1eb52:	8e 7f       	andi	r24, 0xFE	; 254
   1eb54:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1eb58:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1eb5c:	80 61       	ori	r24, 0x10	; 16
   1eb5e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
   1eb62:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1eb66:	80 62       	ori	r24, 0x20	; 32
   1eb68:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1eb6c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1eb6e:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
   1eb70:	8e bb       	out	0x1e, r24	; 30
   1eb72:	7b d1       	rcall	.+758    	; 0x1ee6a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1eb74:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1eb78:	84 ff       	sbrs	r24, 4
   1eb7a:	2e c0       	rjmp	.+92     	; 0x1ebd8 <__vector_10+0xfe>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1eb7c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1eb80:	84 ff       	sbrs	r24, 4
   1eb82:	2a c0       	rjmp	.+84     	; 0x1ebd8 <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1eb84:	84 e1       	ldi	r24, 0x14	; 20
   1eb86:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1eb88:	86 e1       	ldi	r24, 0x16	; 22
   1eb8a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1eb8c:	09 b4       	in	r0, 0x29	; 41
   1eb8e:	00 fe       	sbrs	r0, 0
   1eb90:	fd cf       	rjmp	.-6      	; 0x1eb8c <__vector_10+0xb2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1eb92:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1eb96:	8f 7d       	andi	r24, 0xDF	; 223
   1eb98:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1eb9c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1eba0:	8f 7e       	andi	r24, 0xEF	; 239
   1eba2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1eba6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1ebaa:	8f 7e       	andi	r24, 0xEF	; 239
   1ebac:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1ebb0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1ebb4:	81 60       	ori	r24, 0x01	; 1
   1ebb6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1ebba:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <USB_Device_ConfigurationNumber>
   1ebbe:	88 23       	and	r24, r24
   1ebc0:	11 f0       	breq	.+4      	; 0x1ebc6 <__vector_10+0xec>
		  USB_DeviceState = DEVICE_STATE_Configured;
   1ebc2:	84 e0       	ldi	r24, 0x04	; 4
   1ebc4:	07 c0       	rjmp	.+14     	; 0x1ebd4 <__vector_10+0xfa>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1ebc6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
   1ebca:	87 fd       	sbrc	r24, 7
   1ebcc:	02 c0       	rjmp	.+4      	; 0x1ebd2 <__vector_10+0xf8>
   1ebce:	81 e0       	ldi	r24, 0x01	; 1
   1ebd0:	01 c0       	rjmp	.+2      	; 0x1ebd4 <__vector_10+0xfa>
   1ebd2:	83 e0       	ldi	r24, 0x03	; 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1ebd4:	8e bb       	out	0x1e, r24	; 30
   1ebd6:	49 d1       	rcall	.+658    	; 0x1ee6a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1ebd8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1ebdc:	83 ff       	sbrs	r24, 3
   1ebde:	21 c0       	rjmp	.+66     	; 0x1ec22 <__vector_10+0x148>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1ebe0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1ebe4:	83 ff       	sbrs	r24, 3
   1ebe6:	1d c0       	rjmp	.+58     	; 0x1ec22 <__vector_10+0x148>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1ebe8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1ebec:	87 7f       	andi	r24, 0xF7	; 247
   1ebee:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1ebf2:	82 e0       	ldi	r24, 0x02	; 2
   1ebf4:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
   1ebf6:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1ebfa:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1ebfe:	8e 7f       	andi	r24, 0xFE	; 254
   1ec00:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1ec04:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1ec08:	8e 7f       	andi	r24, 0xFE	; 254
   1ec0a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1ec0e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1ec12:	80 61       	ori	r24, 0x10	; 16
   1ec14:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1ec18:	42 e0       	ldi	r20, 0x02	; 2
   1ec1a:	60 e0       	ldi	r22, 0x00	; 0
   1ec1c:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1ec1e:	d1 de       	rcall	.-606    	; 0x1e9c2 <Endpoint_ConfigureEndpoint_Prv>
   1ec20:	24 d1       	rcall	.+584    	; 0x1ee6a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1ec22:	ff 91       	pop	r31
   1ec24:	ef 91       	pop	r30
   1ec26:	bf 91       	pop	r27
   1ec28:	af 91       	pop	r26
   1ec2a:	9f 91       	pop	r25
   1ec2c:	8f 91       	pop	r24
   1ec2e:	7f 91       	pop	r23
   1ec30:	6f 91       	pop	r22
   1ec32:	5f 91       	pop	r21
   1ec34:	4f 91       	pop	r20
   1ec36:	3f 91       	pop	r19
   1ec38:	2f 91       	pop	r18
   1ec3a:	0f 90       	pop	r0
   1ec3c:	0b be       	out	0x3b, r0	; 59
   1ec3e:	0f 90       	pop	r0
   1ec40:	0f be       	out	0x3f, r0	; 63
   1ec42:	0f 90       	pop	r0
   1ec44:	1f 90       	pop	r1
   1ec46:	18 95       	reti

0001ec48 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1ec48:	1f 93       	push	r17
   1ec4a:	cf 93       	push	r28
   1ec4c:	df 93       	push	r29
   1ec4e:	00 d0       	rcall	.+0      	; 0x1ec50 <USB_Device_ProcessControlRequest+0x8>
   1ec50:	cd b7       	in	r28, 0x3d	; 61
   1ec52:	de b7       	in	r29, 0x3e	; 62
   1ec54:	e8 e9       	ldi	r30, 0x98	; 152
   1ec56:	f1 e0       	ldi	r31, 0x01	; 1
   1ec58:	80 ea       	ldi	r24, 0xA0	; 160
   1ec5a:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1ec5c:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1ec60:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1ec62:	8e 17       	cp	r24, r30
   1ec64:	9f 07       	cpc	r25, r31
   1ec66:	d1 f7       	brne	.-12     	; 0x1ec5c <USB_Device_ProcessControlRequest+0x14>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1ec68:	aa dd       	rcall	.-1196   	; 0x1e7be <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ec6a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
   1ec6e:	83 ff       	sbrs	r24, 3
   1ec70:	e8 c0       	rjmp	.+464    	; 0x1ee42 <USB_Device_ProcessControlRequest+0x1fa>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1ec72:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
   1ec76:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <USB_ControlRequest+0x1>
   1ec7a:	95 30       	cpi	r25, 0x05	; 5
   1ec7c:	09 f4       	brne	.+2      	; 0x1ec80 <USB_Device_ProcessControlRequest+0x38>
   1ec7e:	6f c0       	rjmp	.+222    	; 0x1ed5e <USB_Device_ProcessControlRequest+0x116>
   1ec80:	30 f4       	brcc	.+12     	; 0x1ec8e <USB_Device_ProcessControlRequest+0x46>
   1ec82:	91 30       	cpi	r25, 0x01	; 1
   1ec84:	71 f1       	breq	.+92     	; 0x1ece2 <USB_Device_ProcessControlRequest+0x9a>
   1ec86:	68 f0       	brcs	.+26     	; 0x1eca2 <USB_Device_ProcessControlRequest+0x5a>
   1ec88:	93 30       	cpi	r25, 0x03	; 3
   1ec8a:	59 f1       	breq	.+86     	; 0x1ece2 <USB_Device_ProcessControlRequest+0x9a>
   1ec8c:	da c0       	rjmp	.+436    	; 0x1ee42 <USB_Device_ProcessControlRequest+0x1fa>
   1ec8e:	98 30       	cpi	r25, 0x08	; 8
   1ec90:	09 f4       	brne	.+2      	; 0x1ec94 <USB_Device_ProcessControlRequest+0x4c>
   1ec92:	a8 c0       	rjmp	.+336    	; 0x1ede4 <USB_Device_ProcessControlRequest+0x19c>
   1ec94:	99 30       	cpi	r25, 0x09	; 9
   1ec96:	09 f4       	brne	.+2      	; 0x1ec9a <USB_Device_ProcessControlRequest+0x52>
   1ec98:	b4 c0       	rjmp	.+360    	; 0x1ee02 <USB_Device_ProcessControlRequest+0x1ba>
   1ec9a:	96 30       	cpi	r25, 0x06	; 6
   1ec9c:	09 f0       	breq	.+2      	; 0x1eca0 <USB_Device_ProcessControlRequest+0x58>
   1ec9e:	d1 c0       	rjmp	.+418    	; 0x1ee42 <USB_Device_ProcessControlRequest+0x1fa>
   1eca0:	7f c0       	rjmp	.+254    	; 0x1eda0 <USB_Device_ProcessControlRequest+0x158>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1eca2:	80 38       	cpi	r24, 0x80	; 128
   1eca4:	99 f0       	breq	.+38     	; 0x1eccc <USB_Device_ProcessControlRequest+0x84>
   1eca6:	82 38       	cpi	r24, 0x82	; 130
   1eca8:	09 f0       	breq	.+2      	; 0x1ecac <USB_Device_ProcessControlRequest+0x64>
   1ecaa:	cb c0       	rjmp	.+406    	; 0x1ee42 <USB_Device_ProcessControlRequest+0x1fa>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1ecac:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_ControlRequest+0x4>
   1ecb0:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
   1ecb2:	87 30       	cpi	r24, 0x07	; 7
   1ecb4:	08 f0       	brcs	.+2      	; 0x1ecb8 <USB_Device_ProcessControlRequest+0x70>
   1ecb6:	c5 c0       	rjmp	.+394    	; 0x1ee42 <USB_Device_ProcessControlRequest+0x1fa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ecb8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1ecbc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
   1ecc0:	85 fb       	bst	r24, 5
   1ecc2:	88 27       	eor	r24, r24
   1ecc4:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ecc6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1ecca:	01 c0       	rjmp	.+2      	; 0x1ecce <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
   1eccc:	80 e0       	ldi	r24, 0x00	; 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ecce:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ecd2:	97 7f       	andi	r25, 0xF7	; 247
   1ecd4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1ecd8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
   1ecdc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1ece0:	8c c0       	rjmp	.+280    	; 0x1edfa <USB_Device_ProcessControlRequest+0x1b2>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1ece2:	28 2f       	mov	r18, r24
   1ece4:	2d 7f       	andi	r18, 0xFD	; 253
   1ece6:	09 f0       	breq	.+2      	; 0x1ecea <USB_Device_ProcessControlRequest+0xa2>
   1ece8:	ac c0       	rjmp	.+344    	; 0x1ee42 <USB_Device_ProcessControlRequest+0x1fa>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
   1ecea:	82 30       	cpi	r24, 0x02	; 2
   1ecec:	09 f0       	breq	.+2      	; 0x1ecf0 <USB_Device_ProcessControlRequest+0xa8>
   1ecee:	a9 c0       	rjmp	.+338    	; 0x1ee42 <USB_Device_ProcessControlRequest+0x1fa>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1ecf0:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <USB_ControlRequest+0x2>
   1ecf4:	81 11       	cpse	r24, r1
   1ecf6:	2a c0       	rjmp	.+84     	; 0x1ed4c <USB_Device_ProcessControlRequest+0x104>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1ecf8:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_ControlRequest+0x4>
   1ecfc:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
   1ecfe:	2f ef       	ldi	r18, 0xFF	; 255
   1ed00:	28 0f       	add	r18, r24
   1ed02:	26 30       	cpi	r18, 0x06	; 6
   1ed04:	08 f0       	brcs	.+2      	; 0x1ed08 <USB_Device_ProcessControlRequest+0xc0>
   1ed06:	9d c0       	rjmp	.+314    	; 0x1ee42 <USB_Device_ProcessControlRequest+0x1fa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ed08:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1ed0c:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   1ed10:	20 ff       	sbrs	r18, 0
   1ed12:	1c c0       	rjmp	.+56     	; 0x1ed4c <USB_Device_ProcessControlRequest+0x104>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   1ed14:	93 30       	cpi	r25, 0x03	; 3
   1ed16:	21 f4       	brne	.+8      	; 0x1ed20 <USB_Device_ProcessControlRequest+0xd8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1ed18:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1ed1c:	80 62       	ori	r24, 0x20	; 32
   1ed1e:	14 c0       	rjmp	.+40     	; 0x1ed48 <USB_Device_ProcessControlRequest+0x100>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1ed20:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1ed24:	90 61       	ori	r25, 0x10	; 16
   1ed26:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1ed2a:	21 e0       	ldi	r18, 0x01	; 1
   1ed2c:	30 e0       	ldi	r19, 0x00	; 0
   1ed2e:	a9 01       	movw	r20, r18
   1ed30:	02 c0       	rjmp	.+4      	; 0x1ed36 <USB_Device_ProcessControlRequest+0xee>
   1ed32:	44 0f       	add	r20, r20
   1ed34:	55 1f       	adc	r21, r21
   1ed36:	8a 95       	dec	r24
   1ed38:	e2 f7       	brpl	.-8      	; 0x1ed32 <USB_Device_ProcessControlRequest+0xea>
   1ed3a:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
   1ed3e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1ed42:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1ed46:	88 60       	ori	r24, 0x08	; 8
   1ed48:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ed4c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ed50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ed54:	87 7f       	andi	r24, 0xF7	; 247
   1ed56:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1ed5a:	47 de       	rcall	.-882    	; 0x1e9ea <Endpoint_ClearStatusStage>
   1ed5c:	72 c0       	rjmp	.+228    	; 0x1ee42 <USB_Device_ProcessControlRequest+0x1fa>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1ed5e:	81 11       	cpse	r24, r1
   1ed60:	70 c0       	rjmp	.+224    	; 0x1ee42 <USB_Device_ProcessControlRequest+0x1fa>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
   1ed62:	10 91 9a 01 	lds	r17, 0x019A	; 0x80019a <USB_ControlRequest+0x2>
   1ed66:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1ed68:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
   1ed6c:	80 78       	andi	r24, 0x80	; 128
   1ed6e:	81 2b       	or	r24, r17
   1ed70:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
   1ed74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ed78:	87 7f       	andi	r24, 0xF7	; 247
   1ed7a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1ed7e:	35 de       	rcall	.-918    	; 0x1e9ea <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ed80:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
   1ed84:	80 ff       	sbrs	r24, 0
   1ed86:	fc cf       	rjmp	.-8      	; 0x1ed80 <USB_Device_ProcessControlRequest+0x138>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
   1ed88:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
   1ed8c:	80 68       	ori	r24, 0x80	; 128
   1ed8e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1ed92:	11 11       	cpse	r17, r1
   1ed94:	02 c0       	rjmp	.+4      	; 0x1ed9a <USB_Device_ProcessControlRequest+0x152>
   1ed96:	82 e0       	ldi	r24, 0x02	; 2
   1ed98:	01 c0       	rjmp	.+2      	; 0x1ed9c <USB_Device_ProcessControlRequest+0x154>
   1ed9a:	83 e0       	ldi	r24, 0x03	; 3
   1ed9c:	8e bb       	out	0x1e, r24	; 30
   1ed9e:	51 c0       	rjmp	.+162    	; 0x1ee42 <USB_Device_ProcessControlRequest+0x1fa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1eda0:	80 58       	subi	r24, 0x80	; 128
   1eda2:	82 30       	cpi	r24, 0x02	; 2
   1eda4:	08 f0       	brcs	.+2      	; 0x1eda8 <USB_Device_ProcessControlRequest+0x160>
   1eda6:	4d c0       	rjmp	.+154    	; 0x1ee42 <USB_Device_ProcessControlRequest+0x1fa>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1eda8:	60 91 9c 01 	lds	r22, 0x019C	; 0x80019c <USB_ControlRequest+0x4>
   1edac:	70 91 9d 01 	lds	r23, 0x019D	; 0x80019d <USB_ControlRequest+0x5>
   1edb0:	ae 01       	movw	r20, r28
   1edb2:	4f 5f       	subi	r20, 0xFF	; 255
   1edb4:	5f 4f       	sbci	r21, 0xFF	; 255
   1edb6:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <USB_ControlRequest+0x2>
   1edba:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <USB_ControlRequest+0x3>
   1edbe:	39 dd       	rcall	.-1422   	; 0x1e832 <CALLBACK_USB_GetDescriptor>
   1edc0:	bc 01       	movw	r22, r24
   1edc2:	89 2b       	or	r24, r25
   1edc4:	09 f4       	brne	.+2      	; 0x1edc8 <USB_Device_ProcessControlRequest+0x180>
   1edc6:	3d c0       	rjmp	.+122    	; 0x1ee42 <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1edc8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1edcc:	97 7f       	andi	r25, 0xF7	; 247
   1edce:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1edd2:	89 81       	ldd	r24, Y+1	; 0x01
   1edd4:	9a 81       	ldd	r25, Y+2	; 0x02
   1edd6:	5f dd       	rcall	.-1346   	; 0x1e896 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1edd8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1eddc:	8b 77       	andi	r24, 0x7B	; 123
   1edde:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ede2:	2f c0       	rjmp	.+94     	; 0x1ee42 <USB_Device_ProcessControlRequest+0x1fa>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1ede4:	80 38       	cpi	r24, 0x80	; 128
   1ede6:	69 f5       	brne	.+90     	; 0x1ee42 <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ede8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1edec:	87 7f       	andi	r24, 0xF7	; 247
   1edee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1edf2:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1edf6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1edfa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1edfe:	8e 77       	andi	r24, 0x7E	; 126
   1ee00:	aa cf       	rjmp	.-172    	; 0x1ed56 <USB_Device_ProcessControlRequest+0x10e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1ee02:	81 11       	cpse	r24, r1
   1ee04:	1e c0       	rjmp	.+60     	; 0x1ee42 <USB_Device_ProcessControlRequest+0x1fa>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1ee06:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <USB_ControlRequest+0x2>
   1ee0a:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <USB_ControlRequest+0x3>
   1ee0e:	99 27       	eor	r25, r25
   1ee10:	02 97       	sbiw	r24, 0x02	; 2
   1ee12:	bc f4       	brge	.+46     	; 0x1ee42 <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ee14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ee18:	87 7f       	andi	r24, 0xF7	; 247
   1ee1a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1ee1e:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <USB_ControlRequest+0x2>
   1ee22:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
   1ee26:	e1 dd       	rcall	.-1086   	; 0x1e9ea <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
   1ee28:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <USB_Device_ConfigurationNumber>
   1ee2c:	81 11       	cpse	r24, r1
   1ee2e:	06 c0       	rjmp	.+12     	; 0x1ee3c <USB_Device_ProcessControlRequest+0x1f4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1ee30:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1ee34:	87 fd       	sbrc	r24, 7
   1ee36:	02 c0       	rjmp	.+4      	; 0x1ee3c <USB_Device_ProcessControlRequest+0x1f4>
   1ee38:	81 e0       	ldi	r24, 0x01	; 1
   1ee3a:	01 c0       	rjmp	.+2      	; 0x1ee3e <USB_Device_ProcessControlRequest+0x1f6>
   1ee3c:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
   1ee3e:	8e bb       	out	0x1e, r24	; 30
   1ee40:	b2 dc       	rcall	.-1692   	; 0x1e7a6 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ee42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1ee46:	83 ff       	sbrs	r24, 3
   1ee48:	0a c0       	rjmp	.+20     	; 0x1ee5e <USB_Device_ProcessControlRequest+0x216>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ee4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ee4e:	87 7f       	andi	r24, 0xF7	; 247
   1ee50:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1ee54:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1ee58:	80 62       	ori	r24, 0x20	; 32
   1ee5a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
   1ee5e:	0f 90       	pop	r0
   1ee60:	0f 90       	pop	r0
   1ee62:	df 91       	pop	r29
   1ee64:	cf 91       	pop	r28
   1ee66:	1f 91       	pop	r17
   1ee68:	08 95       	ret

0001ee6a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
   1ee6a:	08 95       	ret

0001ee6c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1ee6c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ee6e:	8e b3       	in	r24, 0x1e	; 30
   1ee70:	88 23       	and	r24, r24
   1ee72:	99 f0       	breq	.+38     	; 0x1ee9a <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1ee74:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1ee78:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1ee7a:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
   1ee7e:	89 2f       	mov	r24, r25
   1ee80:	81 70       	andi	r24, 0x01	; 1
   1ee82:	90 fd       	sbrc	r25, 0
   1ee84:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1ee86:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ee88:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ee8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
   1ee90:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
   1ee92:	da de       	rcall	.-588    	; 0x1ec48 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ee94:	cf 70       	andi	r28, 0x0F	; 15
   1ee96:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
   1ee9a:	cf 91       	pop	r28
   1ee9c:	08 95       	ret

0001ee9e <eeprom_read_byte>:
   1ee9e:	f9 99       	sbic	0x1f, 1	; 31
   1eea0:	fe cf       	rjmp	.-4      	; 0x1ee9e <eeprom_read_byte>
   1eea2:	92 bd       	out	0x22, r25	; 34
   1eea4:	81 bd       	out	0x21, r24	; 33
   1eea6:	f8 9a       	sbi	0x1f, 0	; 31
   1eea8:	99 27       	eor	r25, r25
   1eeaa:	80 b5       	in	r24, 0x20	; 32
   1eeac:	08 95       	ret

0001eeae <eeprom_update_byte>:
   1eeae:	26 2f       	mov	r18, r22

0001eeb0 <eeprom_update_r18>:
   1eeb0:	f9 99       	sbic	0x1f, 1	; 31
   1eeb2:	fe cf       	rjmp	.-4      	; 0x1eeb0 <eeprom_update_r18>
   1eeb4:	92 bd       	out	0x22, r25	; 34
   1eeb6:	81 bd       	out	0x21, r24	; 33
   1eeb8:	f8 9a       	sbi	0x1f, 0	; 31
   1eeba:	01 97       	sbiw	r24, 0x01	; 1
   1eebc:	00 b4       	in	r0, 0x20	; 32
   1eebe:	02 16       	cp	r0, r18
   1eec0:	39 f0       	breq	.+14     	; 0x1eed0 <eeprom_update_r18+0x20>
   1eec2:	1f ba       	out	0x1f, r1	; 31
   1eec4:	20 bd       	out	0x20, r18	; 32
   1eec6:	0f b6       	in	r0, 0x3f	; 63
   1eec8:	f8 94       	cli
   1eeca:	fa 9a       	sbi	0x1f, 2	; 31
   1eecc:	f9 9a       	sbi	0x1f, 1	; 31
   1eece:	0f be       	out	0x3f, r0	; 63
   1eed0:	08 95       	ret

0001eed2 <_exit>:
   1eed2:	f8 94       	cli

0001eed4 <__stop_program>:
   1eed4:	ff cf       	rjmp	.-2      	; 0x1eed4 <__stop_program>
