
at90bootloaderhid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  0001e876  0000090a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000876  0001e000  0001e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080014a  0080014a  00000954  2**0
                  ALLOC
  3 .noinit       00000002  00800154  00800154  00000954  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000984  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000220  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004a0e  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a27  00000000  00000000  000055f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006ca4  00000000  00000000  00007019  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000630  00000000  00000000  0000dcc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000169cc  00000000  00000000  0000e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000029db  00000000  00000000  00024cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000330  00000000  00000000  00027697  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00006eba  00000000  00000000  000279c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	4b c0       	rjmp	.+150    	; 0x1e098 <__ctors_end>
   1e002:	00 00       	nop
   1e004:	85 c0       	rjmp	.+266    	; 0x1e110 <__bad_interrupt>
   1e006:	00 00       	nop
   1e008:	83 c0       	rjmp	.+262    	; 0x1e110 <__bad_interrupt>
   1e00a:	00 00       	nop
   1e00c:	81 c0       	rjmp	.+258    	; 0x1e110 <__bad_interrupt>
   1e00e:	00 00       	nop
   1e010:	7f c0       	rjmp	.+254    	; 0x1e110 <__bad_interrupt>
   1e012:	00 00       	nop
   1e014:	7d c0       	rjmp	.+250    	; 0x1e110 <__bad_interrupt>
   1e016:	00 00       	nop
   1e018:	7b c0       	rjmp	.+246    	; 0x1e110 <__bad_interrupt>
   1e01a:	00 00       	nop
   1e01c:	79 c0       	rjmp	.+242    	; 0x1e110 <__bad_interrupt>
   1e01e:	00 00       	nop
   1e020:	77 c0       	rjmp	.+238    	; 0x1e110 <__bad_interrupt>
   1e022:	00 00       	nop
   1e024:	75 c0       	rjmp	.+234    	; 0x1e110 <__bad_interrupt>
   1e026:	00 00       	nop
   1e028:	42 c2       	rjmp	.+1156   	; 0x1e4ae <__vector_10>
   1e02a:	00 00       	nop
   1e02c:	71 c0       	rjmp	.+226    	; 0x1e110 <__bad_interrupt>
   1e02e:	00 00       	nop
   1e030:	6f c0       	rjmp	.+222    	; 0x1e110 <__bad_interrupt>
   1e032:	00 00       	nop
   1e034:	6d c0       	rjmp	.+218    	; 0x1e110 <__bad_interrupt>
   1e036:	00 00       	nop
   1e038:	6b c0       	rjmp	.+214    	; 0x1e110 <__bad_interrupt>
   1e03a:	00 00       	nop
   1e03c:	69 c0       	rjmp	.+210    	; 0x1e110 <__bad_interrupt>
   1e03e:	00 00       	nop
   1e040:	67 c0       	rjmp	.+206    	; 0x1e110 <__bad_interrupt>
   1e042:	00 00       	nop
   1e044:	65 c0       	rjmp	.+202    	; 0x1e110 <__bad_interrupt>
   1e046:	00 00       	nop
   1e048:	63 c0       	rjmp	.+198    	; 0x1e110 <__bad_interrupt>
   1e04a:	00 00       	nop
   1e04c:	61 c0       	rjmp	.+194    	; 0x1e110 <__bad_interrupt>
   1e04e:	00 00       	nop
   1e050:	5f c0       	rjmp	.+190    	; 0x1e110 <__bad_interrupt>
   1e052:	00 00       	nop
   1e054:	5d c0       	rjmp	.+186    	; 0x1e110 <__bad_interrupt>
   1e056:	00 00       	nop
   1e058:	5b c0       	rjmp	.+182    	; 0x1e110 <__bad_interrupt>
   1e05a:	00 00       	nop
   1e05c:	59 c0       	rjmp	.+178    	; 0x1e110 <__bad_interrupt>
   1e05e:	00 00       	nop
   1e060:	57 c0       	rjmp	.+174    	; 0x1e110 <__bad_interrupt>
   1e062:	00 00       	nop
   1e064:	55 c0       	rjmp	.+170    	; 0x1e110 <__bad_interrupt>
   1e066:	00 00       	nop
   1e068:	53 c0       	rjmp	.+166    	; 0x1e110 <__bad_interrupt>
   1e06a:	00 00       	nop
   1e06c:	51 c0       	rjmp	.+162    	; 0x1e110 <__bad_interrupt>
   1e06e:	00 00       	nop
   1e070:	4f c0       	rjmp	.+158    	; 0x1e110 <__bad_interrupt>
   1e072:	00 00       	nop
   1e074:	4d c0       	rjmp	.+154    	; 0x1e110 <__bad_interrupt>
   1e076:	00 00       	nop
   1e078:	4b c0       	rjmp	.+150    	; 0x1e110 <__bad_interrupt>
   1e07a:	00 00       	nop
   1e07c:	49 c0       	rjmp	.+146    	; 0x1e110 <__bad_interrupt>
   1e07e:	00 00       	nop
   1e080:	47 c0       	rjmp	.+142    	; 0x1e110 <__bad_interrupt>
   1e082:	00 00       	nop
   1e084:	45 c0       	rjmp	.+138    	; 0x1e110 <__bad_interrupt>
   1e086:	00 00       	nop
   1e088:	43 c0       	rjmp	.+134    	; 0x1e110 <__bad_interrupt>
   1e08a:	00 00       	nop
   1e08c:	41 c0       	rjmp	.+130    	; 0x1e110 <__bad_interrupt>
   1e08e:	00 00       	nop
   1e090:	3f c0       	rjmp	.+126    	; 0x1e110 <__bad_interrupt>
   1e092:	00 00       	nop
   1e094:	3d c0       	rjmp	.+122    	; 0x1e110 <__bad_interrupt>
	...

0001e098 <__ctors_end>:
   1e098:	11 24       	eor	r1, r1
   1e09a:	1f be       	out	0x3f, r1	; 63
   1e09c:	cf ef       	ldi	r28, 0xFF	; 255
   1e09e:	d0 e2       	ldi	r29, 0x20	; 32
   1e0a0:	de bf       	out	0x3e, r29	; 62
   1e0a2:	cd bf       	out	0x3d, r28	; 61

0001e0a4 <Application_Jump_Check>:
 *  this will force the user application to start via a software jump.
 */
void Application_Jump_Check(void)
{
	/* If the reset source was the bootloader and the key is correct, clear it and jump to the application */
	if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
   1e0a4:	04 b6       	in	r0, 0x34	; 52
   1e0a6:	03 fe       	sbrs	r0, 3
   1e0a8:	1c c0       	rjmp	.+56     	; 0x1e0e2 <__do_copy_data>
   1e0aa:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__bss_end>
   1e0ae:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__bss_end+0x1>
   1e0b2:	82 34       	cpi	r24, 0x42	; 66
   1e0b4:	9c 4d       	sbci	r25, 0xDC	; 220
   1e0b6:	a9 f4       	brne	.+42     	; 0x1e0e2 <__do_copy_data>
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1 << WDRF);
   1e0b8:	84 b7       	in	r24, 0x34	; 52
   1e0ba:	87 7f       	andi	r24, 0xF7	; 247
   1e0bc:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
   1e0be:	0f b6       	in	r0, 0x3f	; 63
   1e0c0:	f8 94       	cli
   1e0c2:	a8 95       	wdr
   1e0c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e0c8:	88 61       	ori	r24, 0x18	; 24
   1e0ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e0ce:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e0d2:	0f be       	out	0x3f, r0	; 63
		wdt_disable();

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
   1e0d4:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <__bss_end+0x1>
   1e0d8:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__bss_end>

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
   1e0dc:	e0 e0       	ldi	r30, 0x00	; 0
   1e0de:	f0 e0       	ldi	r31, 0x00	; 0
   1e0e0:	09 95       	icall

0001e0e2 <__do_copy_data>:
   1e0e2:	11 e0       	ldi	r17, 0x01	; 1
   1e0e4:	a0 e0       	ldi	r26, 0x00	; 0
   1e0e6:	b1 e0       	ldi	r27, 0x01	; 1
   1e0e8:	e6 e7       	ldi	r30, 0x76	; 118
   1e0ea:	f8 ee       	ldi	r31, 0xE8	; 232
   1e0ec:	01 e0       	ldi	r16, 0x01	; 1
   1e0ee:	0b bf       	out	0x3b, r16	; 59
   1e0f0:	02 c0       	rjmp	.+4      	; 0x1e0f6 <__do_copy_data+0x14>
   1e0f2:	07 90       	elpm	r0, Z+
   1e0f4:	0d 92       	st	X+, r0
   1e0f6:	aa 34       	cpi	r26, 0x4A	; 74
   1e0f8:	b1 07       	cpc	r27, r17
   1e0fa:	d9 f7       	brne	.-10     	; 0x1e0f2 <__do_copy_data+0x10>

0001e0fc <__do_clear_bss>:
   1e0fc:	21 e0       	ldi	r18, 0x01	; 1
   1e0fe:	aa e4       	ldi	r26, 0x4A	; 74
   1e100:	b1 e0       	ldi	r27, 0x01	; 1
   1e102:	01 c0       	rjmp	.+2      	; 0x1e106 <.do_clear_bss_start>

0001e104 <.do_clear_bss_loop>:
   1e104:	1d 92       	st	X+, r1

0001e106 <.do_clear_bss_start>:
   1e106:	a4 35       	cpi	r26, 0x54	; 84
   1e108:	b2 07       	cpc	r27, r18
   1e10a:	e1 f7       	brne	.-8      	; 0x1e104 <.do_clear_bss_loop>
   1e10c:	02 d0       	rcall	.+4      	; 0x1e112 <main>
   1e10e:	b1 c3       	rjmp	.+1890   	; 0x1e872 <_exit>

0001e110 <__bad_interrupt>:
   1e110:	77 cf       	rjmp	.-274    	; 0x1e000 <__vectors>

0001e112 <main>:

/** Configures all hardware required for the bootloader. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1e112:	84 b7       	in	r24, 0x34	; 52
   1e114:	87 7f       	andi	r24, 0xF7	; 247
   1e116:	84 bf       	out	0x34, r24	; 52
   1e118:	0f b6       	in	r0, 0x3f	; 63
   1e11a:	f8 94       	cli
   1e11c:	a8 95       	wdr
   1e11e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e122:	88 61       	ori	r24, 0x18	; 24
   1e124:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e128:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e12c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
   1e12e:	90 e0       	ldi	r25, 0x00	; 0
   1e130:	80 e8       	ldi	r24, 0x80	; 128
   1e132:	0f b6       	in	r0, 0x3f	; 63
   1e134:	f8 94       	cli
   1e136:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
   1e13a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
   1e13e:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1e140:	81 e0       	ldi	r24, 0x01	; 1
   1e142:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
   1e144:	82 e0       	ldi	r24, 0x02	; 2
   1e146:	85 bf       	out	0x35, r24	; 53

	/* Initialize USB subsystem */
	USB_Init();
   1e148:	97 d1       	rcall	.+814    	; 0x1e478 <USB_Init>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
   1e14a:	78 94       	sei
	SetupHardware();

	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	while (RunBootloader)
   1e14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1e150:	88 23       	and	r24, r24
	  USB_USBTask();
   1e152:	11 f0       	breq	.+4      	; 0x1e158 <main+0x46>
   1e154:	75 d3       	rcall	.+1770   	; 0x1e840 <USB_USBTask>
   1e156:	fa cf       	rjmp	.-12     	; 0x1e14c <main+0x3a>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1e158:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
   1e15c:	81 60       	ori	r24, 0x01	; 1
   1e15e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Unlock the forced application start mode of the bootloader if it is restarted */
	MagicBootKey = MAGIC_BOOT_KEY;
   1e162:	82 e4       	ldi	r24, 0x42	; 66
   1e164:	9c ed       	ldi	r25, 0xDC	; 220
   1e166:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <__bss_end+0x1>
   1e16a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__bss_end>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
   1e16e:	9c e0       	ldi	r25, 0x0C	; 12
   1e170:	88 e1       	ldi	r24, 0x18	; 24
   1e172:	0f b6       	in	r0, 0x3f	; 63
   1e174:	f8 94       	cli
   1e176:	a8 95       	wdr
   1e178:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e17c:	0f be       	out	0x3f, r0	; 63
   1e17e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e182:	ff cf       	rjmp	.-2      	; 0x1e182 <main+0x70>

0001e184 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1e184:	42 e3       	ldi	r20, 0x32	; 50
   1e186:	61 ec       	ldi	r22, 0xC1	; 193
   1e188:	81 e0       	ldi	r24, 0x01	; 1
   1e18a:	05 c1       	rjmp	.+522    	; 0x1e396 <Endpoint_ConfigureEndpoint_Prv>

0001e18c <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
   1e18c:	cf 92       	push	r12
   1e18e:	df 92       	push	r13
   1e190:	ef 92       	push	r14
   1e192:	ff 92       	push	r15
	/* Ignore any requests that aren't directed to the HID interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
   1e194:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <USB_ControlRequest>
   1e198:	8f 77       	andi	r24, 0x7F	; 127
   1e19a:	81 32       	cpi	r24, 0x21	; 33
   1e19c:	09 f0       	breq	.+2      	; 0x1e1a0 <EVENT_USB_Device_ControlRequest+0x14>
   1e19e:	78 c0       	rjmp	.+240    	; 0x1e290 <EVENT_USB_Device_ControlRequest+0x104>
	{
		return;
	}

	/* Process HID specific control requests */
	switch (USB_ControlRequest.bRequest)
   1e1a0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <USB_ControlRequest+0x1>
   1e1a4:	89 30       	cpi	r24, 0x09	; 9
   1e1a6:	09 f0       	breq	.+2      	; 0x1e1aa <EVENT_USB_Device_ControlRequest+0x1e>
   1e1a8:	73 c0       	rjmp	.+230    	; 0x1e290 <EVENT_USB_Device_ControlRequest+0x104>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e1aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e1ae:	87 7f       	andi	r24, 0xF7	; 247
   1e1b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e1b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		case HID_REQ_SetReport:
			Endpoint_ClearSETUP();

			/* Wait until the command has been sent by the host */
			while (!(Endpoint_IsOUTReceived()));
   1e1b8:	82 ff       	sbrs	r24, 2
   1e1ba:	fc cf       	rjmp	.-8      	; 0x1e1b4 <EVENT_USB_Device_ControlRequest+0x28>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
   1e1bc:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
   1e1c0:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

				return Data.Value;
   1e1c4:	83 2f       	mov	r24, r19
   1e1c6:	92 2f       	mov	r25, r18

			/* Read in the write destination address */
			#if (FLASHEND > 0xFFFF)
			uint32_t PageAddress = ((uint32_t)Endpoint_Read_16_LE() << 8);
   1e1c8:	a0 e0       	ldi	r26, 0x00	; 0
   1e1ca:	b0 e0       	ldi	r27, 0x00	; 0
			uint16_t PageAddress = Endpoint_Read_16_LE();
			#endif

			/* Check if the command is a program page command, or a start application command */
			#if (FLASHEND > 0xFFFF)
			if ((uint16_t)(PageAddress >> 8) == COMMAND_STARTAPPLICATION)
   1e1cc:	44 27       	eor	r20, r20
   1e1ce:	58 2f       	mov	r21, r24
   1e1d0:	69 2f       	mov	r22, r25
   1e1d2:	7a 2f       	mov	r23, r26
   1e1d4:	01 96       	adiw	r24, 0x01	; 1
   1e1d6:	19 f4       	brne	.+6      	; 0x1e1de <EVENT_USB_Device_ControlRequest+0x52>
			#else
			if (PageAddress == COMMAND_STARTAPPLICATION)
			#endif
			{
				RunBootloader = false;
   1e1d8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
   1e1dc:	4f c0       	rjmp	.+158    	; 0x1e27c <EVENT_USB_Device_ControlRequest+0xf0>
			}
			else if (PageAddress < BOOT_START_ADDR)
   1e1de:	41 15       	cp	r20, r1
   1e1e0:	80 ee       	ldi	r24, 0xE0	; 224
   1e1e2:	58 07       	cpc	r21, r24
   1e1e4:	81 e0       	ldi	r24, 0x01	; 1
   1e1e6:	68 07       	cpc	r22, r24
   1e1e8:	71 05       	cpc	r23, r1
   1e1ea:	08 f0       	brcs	.+2      	; 0x1e1ee <EVENT_USB_Device_ControlRequest+0x62>
   1e1ec:	47 c0       	rjmp	.+142    	; 0x1e27c <EVENT_USB_Device_ControlRequest+0xf0>
			{
				/* Erase the given FLASH page, ready to be programmed */
				boot_page_erase(PageAddress);
   1e1ee:	83 e0       	ldi	r24, 0x03	; 3
   1e1f0:	fa 01       	movw	r30, r20
   1e1f2:	60 93 5b 00 	sts	0x005B, r22	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e1f6:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e1fa:	e8 95       	spm
				boot_spm_busy_wait();
   1e1fc:	07 b6       	in	r0, 0x37	; 55
   1e1fe:	00 fc       	sbrc	r0, 0
   1e200:	fd cf       	rjmp	.-6      	; 0x1e1fc <EVENT_USB_Device_ControlRequest+0x70>
   1e202:	80 e0       	ldi	r24, 0x00	; 0
   1e204:	90 e0       	ldi	r25, 0x00	; 0
						Endpoint_ClearOUT();
						while (!(Endpoint_IsOUTReceived()));
					}

					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
   1e206:	a1 e0       	ldi	r26, 0x01	; 1
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e208:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1e20c:	30 91 f3 00 	lds	r19, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>

				/* Write each of the FLASH page's bytes in sequence */
				for (uint8_t PageWord = 0; PageWord < (SPM_PAGESIZE / 2); PageWord++)
				{
					/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
					if (!(Endpoint_BytesInEndpoint()))
   1e210:	23 2b       	or	r18, r19
   1e212:	19 f1       	breq	.+70     	; 0x1e25a <EVENT_USB_Device_ControlRequest+0xce>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
   1e214:	f0 91 f1 00 	lds	r31, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Data.Bytes[1] = UEDATX;
   1e218:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

				return Data.Value;
   1e21c:	2f 2f       	mov	r18, r31
   1e21e:	3e 2f       	mov	r19, r30
						Endpoint_ClearOUT();
						while (!(Endpoint_IsOUTReceived()));
					}

					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
   1e220:	fc 01       	movw	r30, r24
   1e222:	ee 0f       	add	r30, r30
   1e224:	ff 1f       	adc	r31, r31
   1e226:	6a 01       	movw	r12, r20
   1e228:	7b 01       	movw	r14, r22
   1e22a:	ce 0e       	add	r12, r30
   1e22c:	df 1e       	adc	r13, r31
   1e22e:	e1 1c       	adc	r14, r1
   1e230:	f1 1c       	adc	r15, r1
   1e232:	09 01       	movw	r0, r18
   1e234:	f6 01       	movw	r30, r12
   1e236:	e0 92 5b 00 	sts	0x005B, r14	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e23a:	a0 93 57 00 	sts	0x0057, r26	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e23e:	e8 95       	spm
   1e240:	11 24       	eor	r1, r1
   1e242:	01 96       	adiw	r24, 0x01	; 1
				/* Erase the given FLASH page, ready to be programmed */
				boot_page_erase(PageAddress);
				boot_spm_busy_wait();

				/* Write each of the FLASH page's bytes in sequence */
				for (uint8_t PageWord = 0; PageWord < (SPM_PAGESIZE / 2); PageWord++)
   1e244:	80 38       	cpi	r24, 0x80	; 128
   1e246:	91 05       	cpc	r25, r1
   1e248:	f9 f6       	brne	.-66     	; 0x1e208 <EVENT_USB_Device_ControlRequest+0x7c>
					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
				}

				/* Write the filled FLASH page to memory */
				boot_page_write(PageAddress);
   1e24a:	85 e0       	ldi	r24, 0x05	; 5
   1e24c:	fa 01       	movw	r30, r20
   1e24e:	60 93 5b 00 	sts	0x005B, r22	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e252:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e256:	e8 95       	spm
   1e258:	0a c0       	rjmp	.+20     	; 0x1e26e <EVENT_USB_Device_ControlRequest+0xe2>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e25a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e25e:	2b 77       	andi	r18, 0x7B	; 123
   1e260:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e264:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				{
					/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
					if (!(Endpoint_BytesInEndpoint()))
					{
						Endpoint_ClearOUT();
						while (!(Endpoint_IsOUTReceived()));
   1e268:	22 ff       	sbrs	r18, 2
   1e26a:	fc cf       	rjmp	.-8      	; 0x1e264 <EVENT_USB_Device_ControlRequest+0xd8>
   1e26c:	d3 cf       	rjmp	.-90     	; 0x1e214 <EVENT_USB_Device_ControlRequest+0x88>
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
				}

				/* Write the filled FLASH page to memory */
				boot_page_write(PageAddress);
				boot_spm_busy_wait();
   1e26e:	07 b6       	in	r0, 0x37	; 55
   1e270:	00 fc       	sbrc	r0, 0
   1e272:	fd cf       	rjmp	.-6      	; 0x1e26e <EVENT_USB_Device_ControlRequest+0xe2>

				/* Re-enable RWW section */
				boot_rww_enable();
   1e274:	81 e1       	ldi	r24, 0x11	; 17
   1e276:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e27a:	e8 95       	spm
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e27c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e280:	8b 77       	andi	r24, 0x7B	; 123
   1e282:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			Endpoint_ClearOUT();

			Endpoint_ClearStatusStage();
			break;
	}
}
   1e286:	ff 90       	pop	r15
   1e288:	ef 90       	pop	r14
   1e28a:	df 90       	pop	r13
   1e28c:	cf 90       	pop	r12
				boot_rww_enable();
			}

			Endpoint_ClearOUT();

			Endpoint_ClearStatusStage();
   1e28e:	97 c0       	rjmp	.+302    	; 0x1e3be <Endpoint_ClearStatusStage>
			break;
	}
}
   1e290:	ff 90       	pop	r15
   1e292:	ef 90       	pop	r14
   1e294:	df 90       	pop	r13
   1e296:	cf 90       	pop	r12
   1e298:	08 95       	ret

0001e29a <CALLBACK_USB_GetDescriptor>:

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    /* If/Else If chain compiles slightly smaller than a switch case */
    if (DescriptorType == DTYPE_Device)
   1e29a:	91 30       	cpi	r25, 0x01	; 1
   1e29c:	59 f0       	breq	.+22     	; 0x1e2b4 <CALLBACK_USB_GetDescriptor+0x1a>
    {
        Address = &DeviceDescriptor;
        Size    = sizeof(USB_Descriptor_Device_t);
    }
    else if (DescriptorType == DTYPE_Configuration)
   1e29e:	92 30       	cpi	r25, 0x02	; 2
   1e2a0:	71 f0       	breq	.+28     	; 0x1e2be <CALLBACK_USB_GetDescriptor+0x24>
    {
        Address = &ConfigurationDescriptor;
        Size    = sizeof(USB_Descriptor_Configuration_t);
    }
    else if (DescriptorType == HID_DTYPE_HID)
   1e2a2:	91 32       	cpi	r25, 0x21	; 33
   1e2a4:	89 f0       	breq	.+34     	; 0x1e2c8 <CALLBACK_USB_GetDescriptor+0x2e>
    {
        Address = &ConfigurationDescriptor.HID_VendorHID;
        Size    = sizeof(USB_HID_Descriptor_HID_t);
    }
    else if (DescriptorType == HID_DTYPE_Report)
   1e2a6:	92 32       	cpi	r25, 0x22	; 34
   1e2a8:	a1 f4       	brne	.+40     	; 0x1e2d2 <CALLBACK_USB_GetDescriptor+0x38>
    {
        Address = &HIDReport;
        Size    = sizeof(HIDReport);
   1e2aa:	85 e1       	ldi	r24, 0x15	; 21
   1e2ac:	90 e0       	ldi	r25, 0x00	; 0
        Address = &ConfigurationDescriptor.HID_VendorHID;
        Size    = sizeof(USB_HID_Descriptor_HID_t);
    }
    else if (DescriptorType == HID_DTYPE_Report)
    {
        Address = &HIDReport;
   1e2ae:	25 e3       	ldi	r18, 0x35	; 53
   1e2b0:	31 e0       	ldi	r19, 0x01	; 1
   1e2b2:	13 c0       	rjmp	.+38     	; 0x1e2da <CALLBACK_USB_GetDescriptor+0x40>

    /* If/Else If chain compiles slightly smaller than a switch case */
    if (DescriptorType == DTYPE_Device)
    {
        Address = &DeviceDescriptor;
        Size    = sizeof(USB_Descriptor_Device_t);
   1e2b4:	82 e1       	ldi	r24, 0x12	; 18
   1e2b6:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    /* If/Else If chain compiles slightly smaller than a switch case */
    if (DescriptorType == DTYPE_Device)
    {
        Address = &DeviceDescriptor;
   1e2b8:	23 e2       	ldi	r18, 0x23	; 35
   1e2ba:	31 e0       	ldi	r19, 0x01	; 1
   1e2bc:	0e c0       	rjmp	.+28     	; 0x1e2da <CALLBACK_USB_GetDescriptor+0x40>
        Size    = sizeof(USB_Descriptor_Device_t);
    }
    else if (DescriptorType == DTYPE_Configuration)
    {
        Address = &ConfigurationDescriptor;
        Size    = sizeof(USB_Descriptor_Configuration_t);
   1e2be:	82 e2       	ldi	r24, 0x22	; 34
   1e2c0:	90 e0       	ldi	r25, 0x00	; 0
        Address = &DeviceDescriptor;
        Size    = sizeof(USB_Descriptor_Device_t);
    }
    else if (DescriptorType == DTYPE_Configuration)
    {
        Address = &ConfigurationDescriptor;
   1e2c2:	21 e0       	ldi	r18, 0x01	; 1
   1e2c4:	31 e0       	ldi	r19, 0x01	; 1
   1e2c6:	09 c0       	rjmp	.+18     	; 0x1e2da <CALLBACK_USB_GetDescriptor+0x40>
        Size    = sizeof(USB_Descriptor_Configuration_t);
    }
    else if (DescriptorType == HID_DTYPE_HID)
    {
        Address = &ConfigurationDescriptor.HID_VendorHID;
        Size    = sizeof(USB_HID_Descriptor_HID_t);
   1e2c8:	89 e0       	ldi	r24, 0x09	; 9
   1e2ca:	90 e0       	ldi	r25, 0x00	; 0
        Address = &ConfigurationDescriptor;
        Size    = sizeof(USB_Descriptor_Configuration_t);
    }
    else if (DescriptorType == HID_DTYPE_HID)
    {
        Address = &ConfigurationDescriptor.HID_VendorHID;
   1e2cc:	23 e1       	ldi	r18, 0x13	; 19
   1e2ce:	31 e0       	ldi	r19, 0x01	; 1
   1e2d0:	04 c0       	rjmp	.+8      	; 0x1e2da <CALLBACK_USB_GetDescriptor+0x40>
                                    const void** const DescriptorAddress)
{
    const uint8_t DescriptorType   = (wValue >> 8);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
   1e2d2:	80 e0       	ldi	r24, 0x00	; 0
   1e2d4:	90 e0       	ldi	r25, 0x00	; 0
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t DescriptorType   = (wValue >> 8);

    const void* Address = NULL;
   1e2d6:	20 e0       	ldi	r18, 0x00	; 0
   1e2d8:	30 e0       	ldi	r19, 0x00	; 0
    {
        Address = &HIDReport;
        Size    = sizeof(HIDReport);
    }

    *DescriptorAddress = Address;
   1e2da:	fa 01       	movw	r30, r20
   1e2dc:	31 83       	std	Z+1, r19	; 0x01
   1e2de:	20 83       	st	Z, r18
    return Size;
}
   1e2e0:	08 95       	ret

0001e2e2 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1e2e2:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <USB_ControlRequest+0x6>
   1e2e6:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <USB_ControlRequest+0x7>
   1e2ea:	26 17       	cp	r18, r22
   1e2ec:	37 07       	cpc	r19, r23
   1e2ee:	48 f0       	brcs	.+18     	; 0x1e302 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1e2f0:	61 15       	cp	r22, r1
   1e2f2:	71 05       	cpc	r23, r1
   1e2f4:	39 f4       	brne	.+14     	; 0x1e304 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e2f6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e2fa:	2e 77       	andi	r18, 0x7E	; 126
   1e2fc:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e300:	01 c0       	rjmp	.+2      	; 0x1e304 <Endpoint_Write_Control_Stream_LE+0x22>
   1e302:	b9 01       	movw	r22, r18
   1e304:	fc 01       	movw	r30, r24
   1e306:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1e308:	61 15       	cp	r22, r1
   1e30a:	71 05       	cpc	r23, r1
   1e30c:	61 f1       	breq	.+88     	; 0x1e366 <Endpoint_Write_Control_Stream_LE+0x84>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e30e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e310:	88 23       	and	r24, r24
   1e312:	d9 f1       	breq	.+118    	; 0x1e38a <Endpoint_Write_Control_Stream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e314:	85 30       	cpi	r24, 0x05	; 5
   1e316:	d9 f1       	breq	.+118    	; 0x1e38e <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e318:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1e31c:	83 fd       	sbrc	r24, 3
   1e31e:	39 c0       	rjmp	.+114    	; 0x1e392 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e320:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1e324:	82 fd       	sbrc	r24, 2
   1e326:	2b c0       	rjmp	.+86     	; 0x1e37e <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e328:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
   1e32c:	80 ff       	sbrs	r24, 0
   1e32e:	ec cf       	rjmp	.-40     	; 0x1e308 <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e330:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1e334:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1e338:	61 15       	cp	r22, r1
   1e33a:	71 05       	cpc	r23, r1
   1e33c:	51 f0       	breq	.+20     	; 0x1e352 <Endpoint_Write_Control_Stream_LE+0x70>
   1e33e:	88 30       	cpi	r24, 0x08	; 8
   1e340:	91 05       	cpc	r25, r1
   1e342:	38 f4       	brcc	.+14     	; 0x1e352 <Endpoint_Write_Control_Stream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1e344:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e346:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1e34a:	61 50       	subi	r22, 0x01	; 1
   1e34c:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
   1e34e:	01 96       	adiw	r24, 0x01	; 1
   1e350:	f3 cf       	rjmp	.-26     	; 0x1e338 <Endpoint_Write_Control_Stream_LE+0x56>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1e352:	21 e0       	ldi	r18, 0x01	; 1
   1e354:	08 97       	sbiw	r24, 0x08	; 8
   1e356:	09 f0       	breq	.+2      	; 0x1e35a <Endpoint_Write_Control_Stream_LE+0x78>
   1e358:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e35a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e35e:	8e 77       	andi	r24, 0x7E	; 126
   1e360:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e364:	d1 cf       	rjmp	.-94     	; 0x1e308 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1e366:	21 11       	cpse	r18, r1
   1e368:	d2 cf       	rjmp	.-92     	; 0x1e30e <Endpoint_Write_Control_Stream_LE+0x2c>
   1e36a:	09 c0       	rjmp	.+18     	; 0x1e37e <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e36c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e36e:	88 23       	and	r24, r24
   1e370:	61 f0       	breq	.+24     	; 0x1e38a <Endpoint_Write_Control_Stream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e372:	85 30       	cpi	r24, 0x05	; 5
   1e374:	61 f0       	breq	.+24     	; 0x1e38e <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e376:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1e37a:	83 fd       	sbrc	r24, 3
   1e37c:	0a c0       	rjmp	.+20     	; 0x1e392 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e37e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1e382:	82 ff       	sbrs	r24, 2
   1e384:	f3 cf       	rjmp	.-26     	; 0x1e36c <Endpoint_Write_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1e386:	80 e0       	ldi	r24, 0x00	; 0
   1e388:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1e38a:	82 e0       	ldi	r24, 0x02	; 2
   1e38c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1e38e:	83 e0       	ldi	r24, 0x03	; 3
   1e390:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1e392:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1e394:	08 95       	ret

0001e396 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
   1e396:	8f 70       	andi	r24, 0x0F	; 15
   1e398:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1e39c:	eb ee       	ldi	r30, 0xEB	; 235
   1e39e:	f0 e0       	ldi	r31, 0x00	; 0
   1e3a0:	80 81       	ld	r24, Z
   1e3a2:	81 60       	ori	r24, 0x01	; 1
   1e3a4:	80 83       	st	Z, r24
   1e3a6:	ed ee       	ldi	r30, 0xED	; 237
   1e3a8:	f0 e0       	ldi	r31, 0x00	; 0
   1e3aa:	10 82       	st	Z, r1
   1e3ac:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
   1e3b0:	40 83       	st	Z, r20
   1e3b2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
   1e3b6:	88 1f       	adc	r24, r24
   1e3b8:	88 27       	eor	r24, r24
   1e3ba:	88 1f       	adc	r24, r24
   1e3bc:	08 95       	ret

0001e3be <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1e3be:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <USB_ControlRequest>
   1e3c2:	87 ff       	sbrs	r24, 7
   1e3c4:	0f c0       	rjmp	.+30     	; 0x1e3e4 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e3c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
   1e3ca:	82 fd       	sbrc	r24, 2
   1e3cc:	04 c0       	rjmp	.+8      	; 0x1e3d6 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e3ce:	8e b3       	in	r24, 0x1e	; 30
   1e3d0:	81 11       	cpse	r24, r1
   1e3d2:	f9 cf       	rjmp	.-14     	; 0x1e3c6 <Endpoint_ClearStatusStage+0x8>
   1e3d4:	10 c0       	rjmp	.+32     	; 0x1e3f6 <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e3d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e3da:	8b 77       	andi	r24, 0x7B	; 123
   1e3dc:	0a c0       	rjmp	.+20     	; 0x1e3f2 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e3de:	8e b3       	in	r24, 0x1e	; 30
   1e3e0:	88 23       	and	r24, r24
   1e3e2:	49 f0       	breq	.+18     	; 0x1e3f6 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e3e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1e3e8:	80 ff       	sbrs	r24, 0
   1e3ea:	f9 cf       	rjmp	.-14     	; 0x1e3de <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e3ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e3f0:	8e 77       	andi	r24, 0x7E	; 126
   1e3f2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e3f6:	08 95       	ret

0001e3f8 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
   1e3f8:	0f 93       	push	r16
   1e3fa:	1f 93       	push	r17
   1e3fc:	cf 93       	push	r28
   1e3fe:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1e400:	49 d0       	rcall	.+146    	; 0x1e494 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1e402:	50 d0       	rcall	.+160    	; 0x1e4a4 <USB_INT_ClearAllInterrupts>
   1e404:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1e406:	d0 e0       	ldi	r29, 0x00	; 0
   1e408:	88 81       	ld	r24, Y
   1e40a:	8f 77       	andi	r24, 0x7F	; 127
   1e40c:	88 83       	st	Y, r24
   1e40e:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
   1e410:	80 68       	ori	r24, 0x80	; 128
   1e412:	88 83       	st	Y, r24
   1e414:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1e416:	8f 7d       	andi	r24, 0xDF	; 223
   1e418:	88 83       	st	Y, r24
   1e41a:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1e41c:	f0 e0       	ldi	r31, 0x00	; 0
   1e41e:	80 81       	ld	r24, Z
   1e420:	80 68       	ori	r24, 0x80	; 128
   1e422:	80 83       	st	Z, r24
   1e424:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1e426:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
   1e428:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
	USB_Device_ConfigurationNumber  = 0;
   1e42c:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1e42e:	10 e0       	ldi	r17, 0x00	; 0
   1e430:	f8 01       	movw	r30, r16
   1e432:	80 81       	ld	r24, Z
   1e434:	8b 7f       	andi	r24, 0xFB	; 251
   1e436:	80 83       	st	Z, r24
   1e438:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1e43a:	81 60       	ori	r24, 0x01	; 1
   1e43c:	88 83       	st	Y, r24
   1e43e:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1e440:	60 e0       	ldi	r22, 0x00	; 0
   1e442:	80 e0       	ldi	r24, 0x00	; 0
   1e444:	a8 df       	rcall	.-176    	; 0x1e396 <Endpoint_ConfigureEndpoint_Prv>
   1e446:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1e448:	f0 e0       	ldi	r31, 0x00	; 0
   1e44a:	80 81       	ld	r24, Z
   1e44c:	8e 7f       	andi	r24, 0xFE	; 254
   1e44e:	80 83       	st	Z, r24
   1e450:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1e452:	f0 e0       	ldi	r31, 0x00	; 0
   1e454:	80 81       	ld	r24, Z
   1e456:	81 60       	ori	r24, 0x01	; 1
   1e458:	80 83       	st	Z, r24
   1e45a:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1e45c:	88 60       	ori	r24, 0x08	; 8
   1e45e:	80 83       	st	Z, r24
   1e460:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1e462:	80 81       	ld	r24, Z
   1e464:	8e 7f       	andi	r24, 0xFE	; 254
   1e466:	80 83       	st	Z, r24
   1e468:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
   1e46a:	80 61       	ori	r24, 0x10	; 16
   1e46c:	88 83       	st	Y, r24
   1e46e:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1e470:	cf 91       	pop	r28
   1e472:	1f 91       	pop	r17
   1e474:	0f 91       	pop	r16
   1e476:	08 95       	ret

0001e478 <USB_Init>:
   1e478:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
   1e47a:	f0 e0       	ldi	r31, 0x00	; 0
   1e47c:	80 81       	ld	r24, Z
   1e47e:	8f 7e       	andi	r24, 0xEF	; 239
   1e480:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
   1e482:	e7 ed       	ldi	r30, 0xD7	; 215
   1e484:	f0 e0       	ldi	r31, 0x00	; 0
   1e486:	80 81       	ld	r24, Z
   1e488:	81 60       	ori	r24, 0x01	; 1
   1e48a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1e48c:	81 e0       	ldi	r24, 0x01	; 1
   1e48e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <USB_IsInitialized>

	USB_ResetInterface();
   1e492:	b2 cf       	rjmp	.-156    	; 0x1e3f8 <USB_ResetInterface>

0001e494 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1e494:	e8 ed       	ldi	r30, 0xD8	; 216
   1e496:	f0 e0       	ldi	r31, 0x00	; 0
   1e498:	80 81       	ld	r24, Z
   1e49a:	8c 7f       	andi	r24, 0xFC	; 252
   1e49c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1e49e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1e4a2:	08 95       	ret

0001e4a4 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1e4a4:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1e4a8:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1e4ac:	08 95       	ret

0001e4ae <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1e4ae:	1f 92       	push	r1
   1e4b0:	0f 92       	push	r0
   1e4b2:	0f b6       	in	r0, 0x3f	; 63
   1e4b4:	0f 92       	push	r0
   1e4b6:	11 24       	eor	r1, r1
   1e4b8:	0b b6       	in	r0, 0x3b	; 59
   1e4ba:	0f 92       	push	r0
   1e4bc:	2f 93       	push	r18
   1e4be:	3f 93       	push	r19
   1e4c0:	4f 93       	push	r20
   1e4c2:	5f 93       	push	r21
   1e4c4:	6f 93       	push	r22
   1e4c6:	7f 93       	push	r23
   1e4c8:	8f 93       	push	r24
   1e4ca:	9f 93       	push	r25
   1e4cc:	af 93       	push	r26
   1e4ce:	bf 93       	push	r27
   1e4d0:	ef 93       	push	r30
   1e4d2:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1e4d4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1e4d8:	80 ff       	sbrs	r24, 0
   1e4da:	1b c0       	rjmp	.+54     	; 0x1e512 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1e4dc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1e4e0:	80 ff       	sbrs	r24, 0
   1e4e2:	17 c0       	rjmp	.+46     	; 0x1e512 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1e4e4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
   1e4e8:	8e 7f       	andi	r24, 0xFE	; 254
   1e4ea:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1e4ee:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1e4f2:	80 ff       	sbrs	r24, 0
   1e4f4:	0b c0       	rjmp	.+22     	; 0x1e50c <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1e4f6:	84 e1       	ldi	r24, 0x14	; 20
   1e4f8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1e4fa:	86 e1       	ldi	r24, 0x16	; 22
   1e4fc:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1e4fe:	09 b4       	in	r0, 0x29	; 41
   1e500:	00 fe       	sbrs	r0, 0
   1e502:	fd cf       	rjmp	.-6      	; 0x1e4fe <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1e504:	81 e0       	ldi	r24, 0x01	; 1
   1e506:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1e508:	9a d1       	rcall	.+820    	; 0x1e83e <USB_Event_Stub>
   1e50a:	03 c0       	rjmp	.+6      	; 0x1e512 <__vector_10+0x64>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1e50c:	19 bc       	out	0x29, r1	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
			EVENT_USB_Device_Disconnect();
   1e50e:	1e ba       	out	0x1e, r1	; 30
   1e510:	96 d1       	rcall	.+812    	; 0x1e83e <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1e512:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1e516:	80 ff       	sbrs	r24, 0
   1e518:	17 c0       	rjmp	.+46     	; 0x1e548 <__vector_10+0x9a>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1e51a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1e51e:	80 ff       	sbrs	r24, 0
   1e520:	13 c0       	rjmp	.+38     	; 0x1e548 <__vector_10+0x9a>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1e522:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1e526:	8e 7f       	andi	r24, 0xFE	; 254
   1e528:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1e52c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1e530:	80 61       	ori	r24, 0x10	; 16
   1e532:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
   1e536:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1e53a:	80 62       	ori	r24, 0x20	; 32
   1e53c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1e540:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1e542:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
   1e544:	8e bb       	out	0x1e, r24	; 30
   1e546:	7b d1       	rcall	.+758    	; 0x1e83e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1e548:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1e54c:	84 ff       	sbrs	r24, 4
   1e54e:	2e c0       	rjmp	.+92     	; 0x1e5ac <__vector_10+0xfe>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1e550:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1e554:	84 ff       	sbrs	r24, 4
   1e556:	2a c0       	rjmp	.+84     	; 0x1e5ac <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1e558:	84 e1       	ldi	r24, 0x14	; 20
   1e55a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1e55c:	86 e1       	ldi	r24, 0x16	; 22
   1e55e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1e560:	09 b4       	in	r0, 0x29	; 41
   1e562:	00 fe       	sbrs	r0, 0
   1e564:	fd cf       	rjmp	.-6      	; 0x1e560 <__vector_10+0xb2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1e566:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1e56a:	8f 7d       	andi	r24, 0xDF	; 223
   1e56c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1e570:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1e574:	8f 7e       	andi	r24, 0xEF	; 239
   1e576:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1e57a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1e57e:	8f 7e       	andi	r24, 0xEF	; 239
   1e580:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1e584:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1e588:	81 60       	ori	r24, 0x01	; 1
   1e58a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1e58e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
   1e592:	88 23       	and	r24, r24
   1e594:	11 f0       	breq	.+4      	; 0x1e59a <__vector_10+0xec>
		  USB_DeviceState = DEVICE_STATE_Configured;
   1e596:	84 e0       	ldi	r24, 0x04	; 4
   1e598:	07 c0       	rjmp	.+14     	; 0x1e5a8 <__vector_10+0xfa>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1e59a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
   1e59e:	87 fd       	sbrc	r24, 7
   1e5a0:	02 c0       	rjmp	.+4      	; 0x1e5a6 <__vector_10+0xf8>
   1e5a2:	81 e0       	ldi	r24, 0x01	; 1
   1e5a4:	01 c0       	rjmp	.+2      	; 0x1e5a8 <__vector_10+0xfa>
   1e5a6:	83 e0       	ldi	r24, 0x03	; 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1e5a8:	8e bb       	out	0x1e, r24	; 30
   1e5aa:	49 d1       	rcall	.+658    	; 0x1e83e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1e5ac:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1e5b0:	83 ff       	sbrs	r24, 3
   1e5b2:	21 c0       	rjmp	.+66     	; 0x1e5f6 <__vector_10+0x148>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1e5b4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1e5b8:	83 ff       	sbrs	r24, 3
   1e5ba:	1d c0       	rjmp	.+58     	; 0x1e5f6 <__vector_10+0x148>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1e5bc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1e5c0:	87 7f       	andi	r24, 0xF7	; 247
   1e5c2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1e5c6:	82 e0       	ldi	r24, 0x02	; 2
   1e5c8:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
   1e5ca:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1e5ce:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1e5d2:	8e 7f       	andi	r24, 0xFE	; 254
   1e5d4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1e5d8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1e5dc:	8e 7f       	andi	r24, 0xFE	; 254
   1e5de:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1e5e2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1e5e6:	80 61       	ori	r24, 0x10	; 16
   1e5e8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1e5ec:	42 e0       	ldi	r20, 0x02	; 2
   1e5ee:	60 e0       	ldi	r22, 0x00	; 0
   1e5f0:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1e5f2:	d1 de       	rcall	.-606    	; 0x1e396 <Endpoint_ConfigureEndpoint_Prv>
   1e5f4:	24 d1       	rcall	.+584    	; 0x1e83e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1e5f6:	ff 91       	pop	r31
   1e5f8:	ef 91       	pop	r30
   1e5fa:	bf 91       	pop	r27
   1e5fc:	af 91       	pop	r26
   1e5fe:	9f 91       	pop	r25
   1e600:	8f 91       	pop	r24
   1e602:	7f 91       	pop	r23
   1e604:	6f 91       	pop	r22
   1e606:	5f 91       	pop	r21
   1e608:	4f 91       	pop	r20
   1e60a:	3f 91       	pop	r19
   1e60c:	2f 91       	pop	r18
   1e60e:	0f 90       	pop	r0
   1e610:	0b be       	out	0x3b, r0	; 59
   1e612:	0f 90       	pop	r0
   1e614:	0f be       	out	0x3f, r0	; 63
   1e616:	0f 90       	pop	r0
   1e618:	1f 90       	pop	r1
   1e61a:	18 95       	reti

0001e61c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1e61c:	1f 93       	push	r17
   1e61e:	cf 93       	push	r28
   1e620:	df 93       	push	r29
   1e622:	00 d0       	rcall	.+0      	; 0x1e624 <USB_Device_ProcessControlRequest+0x8>
   1e624:	cd b7       	in	r28, 0x3d	; 61
   1e626:	de b7       	in	r29, 0x3e	; 62
   1e628:	ec e4       	ldi	r30, 0x4C	; 76
   1e62a:	f1 e0       	ldi	r31, 0x01	; 1
   1e62c:	84 e5       	ldi	r24, 0x54	; 84
   1e62e:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1e630:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1e634:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1e636:	8e 17       	cp	r24, r30
   1e638:	9f 07       	cpc	r25, r31
   1e63a:	d1 f7       	brne	.-12     	; 0x1e630 <USB_Device_ProcessControlRequest+0x14>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1e63c:	a7 dd       	rcall	.-1202   	; 0x1e18c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e63e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
   1e642:	83 ff       	sbrs	r24, 3
   1e644:	e8 c0       	rjmp	.+464    	; 0x1e816 <USB_Device_ProcessControlRequest+0x1fa>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1e646:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
   1e64a:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <USB_ControlRequest+0x1>
   1e64e:	95 30       	cpi	r25, 0x05	; 5
   1e650:	09 f4       	brne	.+2      	; 0x1e654 <USB_Device_ProcessControlRequest+0x38>
   1e652:	6f c0       	rjmp	.+222    	; 0x1e732 <USB_Device_ProcessControlRequest+0x116>
   1e654:	30 f4       	brcc	.+12     	; 0x1e662 <USB_Device_ProcessControlRequest+0x46>
   1e656:	91 30       	cpi	r25, 0x01	; 1
   1e658:	71 f1       	breq	.+92     	; 0x1e6b6 <USB_Device_ProcessControlRequest+0x9a>
   1e65a:	68 f0       	brcs	.+26     	; 0x1e676 <USB_Device_ProcessControlRequest+0x5a>
   1e65c:	93 30       	cpi	r25, 0x03	; 3
   1e65e:	59 f1       	breq	.+86     	; 0x1e6b6 <USB_Device_ProcessControlRequest+0x9a>
   1e660:	da c0       	rjmp	.+436    	; 0x1e816 <USB_Device_ProcessControlRequest+0x1fa>
   1e662:	98 30       	cpi	r25, 0x08	; 8
   1e664:	09 f4       	brne	.+2      	; 0x1e668 <USB_Device_ProcessControlRequest+0x4c>
   1e666:	a8 c0       	rjmp	.+336    	; 0x1e7b8 <USB_Device_ProcessControlRequest+0x19c>
   1e668:	99 30       	cpi	r25, 0x09	; 9
   1e66a:	09 f4       	brne	.+2      	; 0x1e66e <USB_Device_ProcessControlRequest+0x52>
   1e66c:	b4 c0       	rjmp	.+360    	; 0x1e7d6 <USB_Device_ProcessControlRequest+0x1ba>
   1e66e:	96 30       	cpi	r25, 0x06	; 6
   1e670:	09 f0       	breq	.+2      	; 0x1e674 <USB_Device_ProcessControlRequest+0x58>
   1e672:	d1 c0       	rjmp	.+418    	; 0x1e816 <USB_Device_ProcessControlRequest+0x1fa>
   1e674:	7f c0       	rjmp	.+254    	; 0x1e774 <USB_Device_ProcessControlRequest+0x158>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1e676:	80 38       	cpi	r24, 0x80	; 128
   1e678:	99 f0       	breq	.+38     	; 0x1e6a0 <USB_Device_ProcessControlRequest+0x84>
   1e67a:	82 38       	cpi	r24, 0x82	; 130
   1e67c:	09 f0       	breq	.+2      	; 0x1e680 <USB_Device_ProcessControlRequest+0x64>
   1e67e:	cb c0       	rjmp	.+406    	; 0x1e816 <USB_Device_ProcessControlRequest+0x1fa>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1e680:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_ControlRequest+0x4>
   1e684:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
   1e686:	87 30       	cpi	r24, 0x07	; 7
   1e688:	08 f0       	brcs	.+2      	; 0x1e68c <USB_Device_ProcessControlRequest+0x70>
   1e68a:	c5 c0       	rjmp	.+394    	; 0x1e816 <USB_Device_ProcessControlRequest+0x1fa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e68c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1e690:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
   1e694:	85 fb       	bst	r24, 5
   1e696:	88 27       	eor	r24, r24
   1e698:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e69a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1e69e:	01 c0       	rjmp	.+2      	; 0x1e6a2 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
   1e6a0:	80 e0       	ldi	r24, 0x00	; 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e6a2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e6a6:	97 7f       	andi	r25, 0xF7	; 247
   1e6a8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1e6ac:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
   1e6b0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1e6b4:	8c c0       	rjmp	.+280    	; 0x1e7ce <USB_Device_ProcessControlRequest+0x1b2>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1e6b6:	28 2f       	mov	r18, r24
   1e6b8:	2d 7f       	andi	r18, 0xFD	; 253
   1e6ba:	09 f0       	breq	.+2      	; 0x1e6be <USB_Device_ProcessControlRequest+0xa2>
   1e6bc:	ac c0       	rjmp	.+344    	; 0x1e816 <USB_Device_ProcessControlRequest+0x1fa>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
   1e6be:	82 30       	cpi	r24, 0x02	; 2
   1e6c0:	09 f0       	breq	.+2      	; 0x1e6c4 <USB_Device_ProcessControlRequest+0xa8>
   1e6c2:	a9 c0       	rjmp	.+338    	; 0x1e816 <USB_Device_ProcessControlRequest+0x1fa>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1e6c4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <USB_ControlRequest+0x2>
   1e6c8:	81 11       	cpse	r24, r1
   1e6ca:	2a c0       	rjmp	.+84     	; 0x1e720 <USB_Device_ProcessControlRequest+0x104>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1e6cc:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_ControlRequest+0x4>
   1e6d0:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
   1e6d2:	2f ef       	ldi	r18, 0xFF	; 255
   1e6d4:	28 0f       	add	r18, r24
   1e6d6:	26 30       	cpi	r18, 0x06	; 6
   1e6d8:	08 f0       	brcs	.+2      	; 0x1e6dc <USB_Device_ProcessControlRequest+0xc0>
   1e6da:	9d c0       	rjmp	.+314    	; 0x1e816 <USB_Device_ProcessControlRequest+0x1fa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e6dc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1e6e0:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   1e6e4:	20 ff       	sbrs	r18, 0
   1e6e6:	1c c0       	rjmp	.+56     	; 0x1e720 <USB_Device_ProcessControlRequest+0x104>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   1e6e8:	93 30       	cpi	r25, 0x03	; 3
   1e6ea:	21 f4       	brne	.+8      	; 0x1e6f4 <USB_Device_ProcessControlRequest+0xd8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1e6ec:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1e6f0:	80 62       	ori	r24, 0x20	; 32
   1e6f2:	14 c0       	rjmp	.+40     	; 0x1e71c <USB_Device_ProcessControlRequest+0x100>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1e6f4:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1e6f8:	90 61       	ori	r25, 0x10	; 16
   1e6fa:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1e6fe:	21 e0       	ldi	r18, 0x01	; 1
   1e700:	30 e0       	ldi	r19, 0x00	; 0
   1e702:	a9 01       	movw	r20, r18
   1e704:	02 c0       	rjmp	.+4      	; 0x1e70a <USB_Device_ProcessControlRequest+0xee>
   1e706:	44 0f       	add	r20, r20
   1e708:	55 1f       	adc	r21, r21
   1e70a:	8a 95       	dec	r24
   1e70c:	e2 f7       	brpl	.-8      	; 0x1e706 <USB_Device_ProcessControlRequest+0xea>
   1e70e:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
   1e712:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1e716:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1e71a:	88 60       	ori	r24, 0x08	; 8
   1e71c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e720:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e724:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e728:	87 7f       	andi	r24, 0xF7	; 247
   1e72a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1e72e:	47 de       	rcall	.-882    	; 0x1e3be <Endpoint_ClearStatusStage>
   1e730:	72 c0       	rjmp	.+228    	; 0x1e816 <USB_Device_ProcessControlRequest+0x1fa>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1e732:	81 11       	cpse	r24, r1
   1e734:	70 c0       	rjmp	.+224    	; 0x1e816 <USB_Device_ProcessControlRequest+0x1fa>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
   1e736:	10 91 4e 01 	lds	r17, 0x014E	; 0x80014e <USB_ControlRequest+0x2>
   1e73a:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1e73c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
   1e740:	80 78       	andi	r24, 0x80	; 128
   1e742:	81 2b       	or	r24, r17
   1e744:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
   1e748:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e74c:	87 7f       	andi	r24, 0xF7	; 247
   1e74e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1e752:	35 de       	rcall	.-918    	; 0x1e3be <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e754:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
   1e758:	80 ff       	sbrs	r24, 0
   1e75a:	fc cf       	rjmp	.-8      	; 0x1e754 <USB_Device_ProcessControlRequest+0x138>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
   1e75c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
   1e760:	80 68       	ori	r24, 0x80	; 128
   1e762:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1e766:	11 11       	cpse	r17, r1
   1e768:	02 c0       	rjmp	.+4      	; 0x1e76e <USB_Device_ProcessControlRequest+0x152>
   1e76a:	82 e0       	ldi	r24, 0x02	; 2
   1e76c:	01 c0       	rjmp	.+2      	; 0x1e770 <USB_Device_ProcessControlRequest+0x154>
   1e76e:	83 e0       	ldi	r24, 0x03	; 3
   1e770:	8e bb       	out	0x1e, r24	; 30
   1e772:	51 c0       	rjmp	.+162    	; 0x1e816 <USB_Device_ProcessControlRequest+0x1fa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1e774:	80 58       	subi	r24, 0x80	; 128
   1e776:	82 30       	cpi	r24, 0x02	; 2
   1e778:	08 f0       	brcs	.+2      	; 0x1e77c <USB_Device_ProcessControlRequest+0x160>
   1e77a:	4d c0       	rjmp	.+154    	; 0x1e816 <USB_Device_ProcessControlRequest+0x1fa>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1e77c:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <USB_ControlRequest+0x4>
   1e780:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <USB_ControlRequest+0x5>
   1e784:	ae 01       	movw	r20, r28
   1e786:	4f 5f       	subi	r20, 0xFF	; 255
   1e788:	5f 4f       	sbci	r21, 0xFF	; 255
   1e78a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <USB_ControlRequest+0x2>
   1e78e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <USB_ControlRequest+0x3>
   1e792:	83 dd       	rcall	.-1274   	; 0x1e29a <CALLBACK_USB_GetDescriptor>
   1e794:	bc 01       	movw	r22, r24
   1e796:	89 2b       	or	r24, r25
   1e798:	09 f4       	brne	.+2      	; 0x1e79c <USB_Device_ProcessControlRequest+0x180>
   1e79a:	3d c0       	rjmp	.+122    	; 0x1e816 <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e79c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e7a0:	97 7f       	andi	r25, 0xF7	; 247
   1e7a2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1e7a6:	89 81       	ldd	r24, Y+1	; 0x01
   1e7a8:	9a 81       	ldd	r25, Y+2	; 0x02
   1e7aa:	9b dd       	rcall	.-1226   	; 0x1e2e2 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e7ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e7b0:	8b 77       	andi	r24, 0x7B	; 123
   1e7b2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e7b6:	2f c0       	rjmp	.+94     	; 0x1e816 <USB_Device_ProcessControlRequest+0x1fa>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1e7b8:	80 38       	cpi	r24, 0x80	; 128
   1e7ba:	69 f5       	brne	.+90     	; 0x1e816 <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e7bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e7c0:	87 7f       	andi	r24, 0xF7	; 247
   1e7c2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1e7c6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e7ca:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e7ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e7d2:	8e 77       	andi	r24, 0x7E	; 126
   1e7d4:	aa cf       	rjmp	.-172    	; 0x1e72a <USB_Device_ProcessControlRequest+0x10e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1e7d6:	81 11       	cpse	r24, r1
   1e7d8:	1e c0       	rjmp	.+60     	; 0x1e816 <USB_Device_ProcessControlRequest+0x1fa>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1e7da:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <USB_ControlRequest+0x2>
   1e7de:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <USB_ControlRequest+0x3>
   1e7e2:	99 27       	eor	r25, r25
   1e7e4:	02 97       	sbiw	r24, 0x02	; 2
   1e7e6:	bc f4       	brge	.+46     	; 0x1e816 <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e7e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e7ec:	87 7f       	andi	r24, 0xF7	; 247
   1e7ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1e7f2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <USB_ControlRequest+0x2>
   1e7f6:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>

	Endpoint_ClearStatusStage();
   1e7fa:	e1 dd       	rcall	.-1086   	; 0x1e3be <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
   1e7fc:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
   1e800:	81 11       	cpse	r24, r1
   1e802:	06 c0       	rjmp	.+12     	; 0x1e810 <USB_Device_ProcessControlRequest+0x1f4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1e804:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1e808:	87 fd       	sbrc	r24, 7
   1e80a:	02 c0       	rjmp	.+4      	; 0x1e810 <USB_Device_ProcessControlRequest+0x1f4>
   1e80c:	81 e0       	ldi	r24, 0x01	; 1
   1e80e:	01 c0       	rjmp	.+2      	; 0x1e812 <USB_Device_ProcessControlRequest+0x1f6>
   1e810:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
   1e812:	8e bb       	out	0x1e, r24	; 30
   1e814:	b7 dc       	rcall	.-1682   	; 0x1e184 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e816:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1e81a:	83 ff       	sbrs	r24, 3
   1e81c:	0a c0       	rjmp	.+20     	; 0x1e832 <USB_Device_ProcessControlRequest+0x216>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e81e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e822:	87 7f       	andi	r24, 0xF7	; 247
   1e824:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1e828:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1e82c:	80 62       	ori	r24, 0x20	; 32
   1e82e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
   1e832:	0f 90       	pop	r0
   1e834:	0f 90       	pop	r0
   1e836:	df 91       	pop	r29
   1e838:	cf 91       	pop	r28
   1e83a:	1f 91       	pop	r17
   1e83c:	08 95       	ret

0001e83e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
   1e83e:	08 95       	ret

0001e840 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1e840:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e842:	8e b3       	in	r24, 0x1e	; 30
   1e844:	88 23       	and	r24, r24
   1e846:	99 f0       	breq	.+38     	; 0x1e86e <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1e848:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1e84c:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1e84e:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
   1e852:	89 2f       	mov	r24, r25
   1e854:	81 70       	andi	r24, 0x01	; 1
   1e856:	90 fd       	sbrc	r25, 0
   1e858:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1e85a:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e85c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e860:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
   1e864:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
   1e866:	da de       	rcall	.-588    	; 0x1e61c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e868:	cf 70       	andi	r28, 0x0F	; 15
   1e86a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
   1e86e:	cf 91       	pop	r28
   1e870:	08 95       	ret

0001e872 <_exit>:
   1e872:	f8 94       	cli

0001e874 <__stop_program>:
   1e874:	ff cf       	rjmp	.-2      	; 0x1e874 <__stop_program>
