
leobootloaderprinter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  00007ebe  00000f92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .apitable_jumptable 00000018  00007fe0  00007fe0  00001082  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_signatures 00000008  00007ff8  00007ff8  0000109a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_trampolines 00000018  00007fa0  00007fa0  0000106a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .text         00000ebe  00007000  00007000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          00000018  008001d8  008001d8  000010a2  2**0
                  ALLOC
  6 .noinit       00000002  008001f0  008001f0  000010a2  2**0
                  ALLOC
  7 .comment      00000030  00000000  00000000  000010a2  2**0
                  CONTENTS, READONLY
  8 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010d4  2**2
                  CONTENTS, READONLY
  9 .debug_aranges 00000338  00000000  00000000  00001118  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00005dfa  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001df8  00000000  00000000  0000724a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008877  00000000  00000000  00009042  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000838  00000000  00000000  000118bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00017ba1  00000000  00000000  000120f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000037ab  00000000  00000000  00029c95  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000478  00000000  00000000  0002d440  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00007c91  00000000  00000000  0002d8b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .apitable_jumptable:

00007fe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
    7fe0:	df cf       	rjmp	.-66     	; 0x7fa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
    7fe2:	df cf       	rjmp	.-66     	; 0x7fa2 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
    7fe4:	df cf       	rjmp	.-66     	; 0x7fa4 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
    7fe6:	df cf       	rjmp	.-66     	; 0x7fa6 <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
    7fe8:	df cf       	rjmp	.-66     	; 0x7fa8 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
    7fea:	df cf       	rjmp	.-66     	; 0x7faa <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
    7fec:	df cf       	rjmp	.-66     	; 0x7fac <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
    7fee:	df cf       	rjmp	.-66     	; 0x7fae <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
    7ff0:	df cf       	rjmp	.-66     	; 0x7fb0 <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
    7ff2:	df cf       	rjmp	.-66     	; 0x7fb2 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
    7ff4:	df cf       	rjmp	.-66     	; 0x7fb4 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
    7ff6:	df cf       	rjmp	.-66     	; 0x7fb6 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

00007ff8 <BootloaderAPI_Signatures>:
    7ff8:	00 70       	andi	r16, 0x00	; 0
    7ffa:	00 00       	nop
    7ffc:	20 df       	rcall	.-448    	; 0x7e3e <USB_Device_ProcessControlRequest+0x1da>
    7ffe:	fb dc       	rcall	.-1546   	; 0x79f6 <Endpoint_WaitUntilReady+0xc>

Disassembly of section .apitable_trampolines:

00007fa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
    7fa0:	a1 c8       	rjmp	.-3774   	; 0x70e4 <BootloaderAPI_ErasePage>

00007fa2 <BootloaderAPI_WritePage_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
    7fa2:	d0 c8       	rjmp	.-3680   	; 0x7144 <BootloaderAPI_WritePage>

00007fa4 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
    7fa4:	ff c8       	rjmp	.-3586   	; 0x71a4 <BootloaderAPI_FillWord>

00007fa6 <BootloaderAPI_ReadSignature_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
    7fa6:	0b c9       	rjmp	.-3562   	; 0x71be <BootloaderAPI_ReadSignature>

00007fa8 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
    7fa8:	10 c9       	rjmp	.-3552   	; 0x71ca <BootloaderAPI_ReadFuse>

00007faa <BootloaderAPI_ReadLock_Trampoline>:
    7faa:	15 c9       	rjmp	.-3542   	; 0x71d6 <BootloaderAPI_ReadLock>

00007fac <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
    7fac:	1b c9       	rjmp	.-3530   	; 0x71e4 <BootloaderAPI_WriteLock>

00007fae <BootloaderAPI_UNUSED1>:
    7fae:	08 95       	ret

00007fb0 <BootloaderAPI_UNUSED2>:
	BootloaderAPI_WriteLock_Trampoline:
		jmp BootloaderAPI_WriteLock
    7fb0:	08 95       	ret

00007fb2 <BootloaderAPI_UNUSED3>:
    7fb2:	08 95       	ret

00007fb4 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_UNUSED1:
		ret
    7fb4:	08 95       	ret

00007fb6 <BootloaderAPI_UNUSED5>:
	BootloaderAPI_UNUSED2:
		ret
    7fb6:	08 95       	ret

Disassembly of section .text:

00007000 <__vectors>:
    7000:	55 c0       	rjmp	.+170    	; 0x70ac <__ctors_end>
    7002:	00 00       	nop
    7004:	6e c0       	rjmp	.+220    	; 0x70e2 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	6c c0       	rjmp	.+216    	; 0x70e2 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	6a c0       	rjmp	.+212    	; 0x70e2 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	68 c0       	rjmp	.+208    	; 0x70e2 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	66 c0       	rjmp	.+204    	; 0x70e2 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	64 c0       	rjmp	.+200    	; 0x70e2 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	62 c0       	rjmp	.+196    	; 0x70e2 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	60 c0       	rjmp	.+192    	; 0x70e2 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	5e c0       	rjmp	.+188    	; 0x70e2 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	6a c5       	rjmp	.+2772   	; 0x7afe <__vector_10>
    702a:	00 00       	nop
    702c:	5a c0       	rjmp	.+180    	; 0x70e2 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	58 c0       	rjmp	.+176    	; 0x70e2 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	56 c0       	rjmp	.+172    	; 0x70e2 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	54 c0       	rjmp	.+168    	; 0x70e2 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	52 c0       	rjmp	.+164    	; 0x70e2 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	50 c0       	rjmp	.+160    	; 0x70e2 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	4e c0       	rjmp	.+156    	; 0x70e2 <__bad_interrupt>
    7046:	00 00       	nop
    7048:	4c c0       	rjmp	.+152    	; 0x70e2 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	4a c0       	rjmp	.+148    	; 0x70e2 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	48 c0       	rjmp	.+144    	; 0x70e2 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	46 c0       	rjmp	.+140    	; 0x70e2 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	44 c0       	rjmp	.+136    	; 0x70e2 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	42 c0       	rjmp	.+132    	; 0x70e2 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	40 c0       	rjmp	.+128    	; 0x70e2 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	3e c0       	rjmp	.+124    	; 0x70e2 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	3c c0       	rjmp	.+120    	; 0x70e2 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	3a c0       	rjmp	.+116    	; 0x70e2 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	38 c0       	rjmp	.+112    	; 0x70e2 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	36 c0       	rjmp	.+108    	; 0x70e2 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	34 c0       	rjmp	.+104    	; 0x70e2 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	32 c0       	rjmp	.+100    	; 0x70e2 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	30 c0       	rjmp	.+96     	; 0x70e2 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	2e c0       	rjmp	.+92     	; 0x70e2 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	2c c0       	rjmp	.+88     	; 0x70e2 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	2a c0       	rjmp	.+84     	; 0x70e2 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	28 c0       	rjmp	.+80     	; 0x70e2 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	26 c0       	rjmp	.+76     	; 0x70e2 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	24 c0       	rjmp	.+72     	; 0x70e2 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	22 c0       	rjmp	.+68     	; 0x70e2 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	20 c0       	rjmp	.+64     	; 0x70e2 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	1e c0       	rjmp	.+60     	; 0x70e2 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	1c c0       	rjmp	.+56     	; 0x70e2 <__bad_interrupt>
	...

000070ac <__ctors_end>:
    70ac:	11 24       	eor	r1, r1
    70ae:	1f be       	out	0x3f, r1	; 63
    70b0:	cf ef       	ldi	r28, 0xFF	; 255
    70b2:	da e0       	ldi	r29, 0x0A	; 10
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	cd bf       	out	0x3d, r28	; 61

000070b8 <__do_copy_data>:
    70b8:	11 e0       	ldi	r17, 0x01	; 1
    70ba:	a0 e0       	ldi	r26, 0x00	; 0
    70bc:	b1 e0       	ldi	r27, 0x01	; 1
    70be:	ee eb       	ldi	r30, 0xBE	; 190
    70c0:	fe e7       	ldi	r31, 0x7E	; 126
    70c2:	02 c0       	rjmp	.+4      	; 0x70c8 <__do_copy_data+0x10>
    70c4:	05 90       	lpm	r0, Z+
    70c6:	0d 92       	st	X+, r0
    70c8:	a8 3d       	cpi	r26, 0xD8	; 216
    70ca:	b1 07       	cpc	r27, r17
    70cc:	d9 f7       	brne	.-10     	; 0x70c4 <__do_copy_data+0xc>

000070ce <__do_clear_bss>:
    70ce:	21 e0       	ldi	r18, 0x01	; 1
    70d0:	a8 ed       	ldi	r26, 0xD8	; 216
    70d2:	b1 e0       	ldi	r27, 0x01	; 1
    70d4:	01 c0       	rjmp	.+2      	; 0x70d8 <.do_clear_bss_start>

000070d6 <.do_clear_bss_loop>:
    70d6:	1d 92       	st	X+, r1

000070d8 <.do_clear_bss_start>:
    70d8:	a0 3f       	cpi	r26, 0xF0	; 240
    70da:	b2 07       	cpc	r27, r18
    70dc:	e1 f7       	brne	.-8      	; 0x70d6 <.do_clear_bss_loop>
    70de:	ba d0       	rcall	.+372    	; 0x7254 <main>
    70e0:	ec c6       	rjmp	.+3544   	; 0x7eba <_exit>

000070e2 <__bad_interrupt>:
    70e2:	8e cf       	rjmp	.-228    	; 0x7000 <__vectors>

000070e4 <BootloaderAPI_ErasePage>:

	return (Address < BOOT_START_ADDR) && PageAddressIsAligned;
}

void BootloaderAPI_ErasePage(const uint32_t Address)
{
    70e4:	0f 93       	push	r16
    70e6:	1f 93       	push	r17
{
	/* Determine if the given page address is correctly aligned to the
	   start of a flash page. */
	bool PageAddressIsAligned = !(Address & (SPM_PAGESIZE - 1));

	return (Address < BOOT_START_ADDR) && PageAddressIsAligned;
    70e8:	61 15       	cp	r22, r1
    70ea:	20 e7       	ldi	r18, 0x70	; 112
    70ec:	72 07       	cpc	r23, r18
    70ee:	81 05       	cpc	r24, r1
    70f0:	91 05       	cpc	r25, r1
    70f2:	70 f4       	brcc	.+28     	; 0x7110 <BootloaderAPI_ErasePage+0x2c>
    70f4:	41 e0       	ldi	r20, 0x01	; 1
    70f6:	8b 01       	movw	r16, r22
    70f8:	9c 01       	movw	r18, r24
    70fa:	0f 77       	andi	r16, 0x7F	; 127
    70fc:	11 27       	eor	r17, r17
    70fe:	22 27       	eor	r18, r18
    7100:	33 27       	eor	r19, r19
    7102:	01 2b       	or	r16, r17
    7104:	02 2b       	or	r16, r18
    7106:	03 2b       	or	r16, r19
    7108:	09 f0       	breq	.+2      	; 0x710c <BootloaderAPI_ErasePage+0x28>
    710a:	40 e0       	ldi	r20, 0x00	; 0
    710c:	24 2f       	mov	r18, r20
    710e:	01 c0       	rjmp	.+2      	; 0x7112 <BootloaderAPI_ErasePage+0x2e>
    7110:	20 e0       	ldi	r18, 0x00	; 0
}

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	if (! IsPageAddressValid(Address))
    7112:	20 ff       	sbrs	r18, 0
    7114:	14 c0       	rjmp	.+40     	; 0x713e <BootloaderAPI_ErasePage+0x5a>
		return;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    7116:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7118:	f8 94       	cli
	{
		boot_page_erase_safe(Address);
    711a:	07 b6       	in	r0, 0x37	; 55
    711c:	00 fc       	sbrc	r0, 0
    711e:	fd cf       	rjmp	.-6      	; 0x711a <BootloaderAPI_ErasePage+0x36>
    7120:	f9 99       	sbic	0x1f, 1	; 31
    7122:	fe cf       	rjmp	.-4      	; 0x7120 <BootloaderAPI_ErasePage+0x3c>
    7124:	33 e0       	ldi	r19, 0x03	; 3
    7126:	fb 01       	movw	r30, r22
    7128:	30 93 57 00 	sts	0x0057, r19	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    712c:	e8 95       	spm
		boot_spm_busy_wait();
    712e:	07 b6       	in	r0, 0x37	; 55
    7130:	00 fc       	sbrc	r0, 0
    7132:	fd cf       	rjmp	.-6      	; 0x712e <BootloaderAPI_ErasePage+0x4a>
		boot_rww_enable();
    7134:	91 e1       	ldi	r25, 0x11	; 17
    7136:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    713a:	e8 95       	spm
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    713c:	2f bf       	out	0x3f, r18	; 63
	}
}
    713e:	1f 91       	pop	r17
    7140:	0f 91       	pop	r16
    7142:	08 95       	ret

00007144 <BootloaderAPI_WritePage>:

void BootloaderAPI_WritePage(const uint32_t Address)
{
    7144:	0f 93       	push	r16
    7146:	1f 93       	push	r17
{
	/* Determine if the given page address is correctly aligned to the
	   start of a flash page. */
	bool PageAddressIsAligned = !(Address & (SPM_PAGESIZE - 1));

	return (Address < BOOT_START_ADDR) && PageAddressIsAligned;
    7148:	61 15       	cp	r22, r1
    714a:	20 e7       	ldi	r18, 0x70	; 112
    714c:	72 07       	cpc	r23, r18
    714e:	81 05       	cpc	r24, r1
    7150:	91 05       	cpc	r25, r1
    7152:	70 f4       	brcc	.+28     	; 0x7170 <BootloaderAPI_WritePage+0x2c>
    7154:	41 e0       	ldi	r20, 0x01	; 1
    7156:	8b 01       	movw	r16, r22
    7158:	9c 01       	movw	r18, r24
    715a:	0f 77       	andi	r16, 0x7F	; 127
    715c:	11 27       	eor	r17, r17
    715e:	22 27       	eor	r18, r18
    7160:	33 27       	eor	r19, r19
    7162:	01 2b       	or	r16, r17
    7164:	02 2b       	or	r16, r18
    7166:	03 2b       	or	r16, r19
    7168:	09 f0       	breq	.+2      	; 0x716c <BootloaderAPI_WritePage+0x28>
    716a:	40 e0       	ldi	r20, 0x00	; 0
    716c:	24 2f       	mov	r18, r20
    716e:	01 c0       	rjmp	.+2      	; 0x7172 <BootloaderAPI_WritePage+0x2e>
    7170:	20 e0       	ldi	r18, 0x00	; 0
	}
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	if (! IsPageAddressValid(Address))
    7172:	20 ff       	sbrs	r18, 0
    7174:	14 c0       	rjmp	.+40     	; 0x719e <BootloaderAPI_WritePage+0x5a>
		return;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    7176:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7178:	f8 94       	cli
	{
		boot_page_write_safe(Address);
    717a:	07 b6       	in	r0, 0x37	; 55
    717c:	00 fc       	sbrc	r0, 0
    717e:	fd cf       	rjmp	.-6      	; 0x717a <BootloaderAPI_WritePage+0x36>
    7180:	f9 99       	sbic	0x1f, 1	; 31
    7182:	fe cf       	rjmp	.-4      	; 0x7180 <BootloaderAPI_WritePage+0x3c>
    7184:	35 e0       	ldi	r19, 0x05	; 5
    7186:	fb 01       	movw	r30, r22
    7188:	30 93 57 00 	sts	0x0057, r19	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    718c:	e8 95       	spm
		boot_spm_busy_wait();
    718e:	07 b6       	in	r0, 0x37	; 55
    7190:	00 fc       	sbrc	r0, 0
    7192:	fd cf       	rjmp	.-6      	; 0x718e <BootloaderAPI_WritePage+0x4a>
		boot_rww_enable();
    7194:	91 e1       	ldi	r25, 0x11	; 17
    7196:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    719a:	e8 95       	spm
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    719c:	2f bf       	out	0x3f, r18	; 63
	}
}
    719e:	1f 91       	pop	r17
    71a0:	0f 91       	pop	r16
    71a2:	08 95       	ret

000071a4 <BootloaderAPI_FillWord>:

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
    71a4:	07 b6       	in	r0, 0x37	; 55
    71a6:	00 fc       	sbrc	r0, 0
    71a8:	fd cf       	rjmp	.-6      	; 0x71a4 <BootloaderAPI_FillWord>
    71aa:	f9 99       	sbic	0x1f, 1	; 31
    71ac:	fe cf       	rjmp	.-4      	; 0x71aa <BootloaderAPI_FillWord+0x6>
    71ae:	21 e0       	ldi	r18, 0x01	; 1
    71b0:	fb 01       	movw	r30, r22
    71b2:	0a 01       	movw	r0, r20
    71b4:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    71b8:	e8 95       	spm
    71ba:	11 24       	eor	r1, r1
    71bc:	08 95       	ret

000071be <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
    71be:	21 e2       	ldi	r18, 0x21	; 33
    71c0:	fc 01       	movw	r30, r24
    71c2:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    71c6:	84 91       	lpm	r24, Z
}
    71c8:	08 95       	ret

000071ca <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
    71ca:	29 e0       	ldi	r18, 0x09	; 9
    71cc:	fc 01       	movw	r30, r24
    71ce:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    71d2:	84 91       	lpm	r24, Z
}
    71d4:	08 95       	ret

000071d6 <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
    71d6:	e1 e0       	ldi	r30, 0x01	; 1
    71d8:	f0 e0       	ldi	r31, 0x00	; 0
    71da:	89 e0       	ldi	r24, 0x09	; 9
    71dc:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    71e0:	84 91       	lpm	r24, Z
}
    71e2:	08 95       	ret

000071e4 <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    71e4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    71e6:	f8 94       	cli
	{
		boot_lock_bits_set_safe(LockBits);
    71e8:	07 b6       	in	r0, 0x37	; 55
    71ea:	00 fc       	sbrc	r0, 0
    71ec:	fd cf       	rjmp	.-6      	; 0x71e8 <BootloaderAPI_WriteLock+0x4>
    71ee:	f9 99       	sbic	0x1f, 1	; 31
    71f0:	fe cf       	rjmp	.-4      	; 0x71ee <BootloaderAPI_WriteLock+0xa>
    71f2:	80 95       	com	r24
    71f4:	29 e0       	ldi	r18, 0x09	; 9
    71f6:	e1 e0       	ldi	r30, 0x01	; 1
    71f8:	f0 e0       	ldi	r31, 0x00	; 0
    71fa:	08 2e       	mov	r0, r24
    71fc:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    7200:	e8 95       	spm
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7202:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    7204:	08 95       	ret

00007206 <FlushPageIfRequired>:

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
    7206:	0f 93       	push	r16
    7208:	1f 93       	push	r17
    720a:	cf 93       	push	r28
    720c:	df 93       	push	r29
    720e:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <__data_end>
    7212:	88 23       	and	r24, r24
    7214:	d1 f0       	breq	.+52     	; 0x724a <FlushPageIfRequired+0x44>
    7216:	c0 91 e4 01 	lds	r28, 0x01E4	; 0x8001e4 <HEXParser+0xb>
    721a:	d0 91 e5 01 	lds	r29, 0x01E5	; 0x8001e5 <HEXParser+0xc>
    721e:	c0 78       	andi	r28, 0x80	; 128
    7220:	60 91 e0 01 	lds	r22, 0x01E0	; 0x8001e0 <HEXParser+0x7>
    7224:	70 91 e1 01 	lds	r23, 0x01E1	; 0x8001e1 <HEXParser+0x8>
    7228:	80 e0       	ldi	r24, 0x00	; 0
    722a:	90 e0       	ldi	r25, 0x00	; 0
    722c:	8e 01       	movw	r16, r28
    722e:	20 e0       	ldi	r18, 0x00	; 0
    7230:	30 e0       	ldi	r19, 0x00	; 0
    7232:	06 17       	cp	r16, r22
    7234:	17 07       	cpc	r17, r23
    7236:	28 07       	cpc	r18, r24
    7238:	39 07       	cpc	r19, r25
    723a:	39 f0       	breq	.+14     	; 0x724a <FlushPageIfRequired+0x44>
    723c:	83 df       	rcall	.-250    	; 0x7144 <BootloaderAPI_WritePage>
    723e:	d0 93 e1 01 	sts	0x01E1, r29	; 0x8001e1 <HEXParser+0x8>
    7242:	c0 93 e0 01 	sts	0x01E0, r28	; 0x8001e0 <HEXParser+0x7>
    7246:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__data_end>
    724a:	df 91       	pop	r29
    724c:	cf 91       	pop	r28
    724e:	1f 91       	pop	r17
    7250:	0f 91       	pop	r16
    7252:	08 95       	ret

00007254 <main>:

		/* Re-enable JTAG debugging */
		JTAG_ENABLE();
	#else
		/* Check if the device's BOOTRST fuse is set */
		if (!(BootloaderAPI_ReadFuse(GET_HIGH_FUSE_BITS) & ~FUSE_BOOTRST))
    7254:	83 e0       	ldi	r24, 0x03	; 3
    7256:	90 e0       	ldi	r25, 0x00	; 0
    7258:	b8 df       	rcall	.-144    	; 0x71ca <BootloaderAPI_ReadFuse>
    725a:	80 fd       	sbrc	r24, 0
    725c:	0f c0       	rjmp	.+30     	; 0x727c <main+0x28>
		{
			/* If the reset source was not an external reset or the key is correct, clear it and jump to the application */
			if (!(MCUSR & (1 << EXTRF)) || (MagicBootKey == MAGIC_BOOT_KEY))
			  JumpToApplication = true;
    725e:	81 e0       	ldi	r24, 0x01	; 1
	#else
		/* Check if the device's BOOTRST fuse is set */
		if (!(BootloaderAPI_ReadFuse(GET_HIGH_FUSE_BITS) & ~FUSE_BOOTRST))
		{
			/* If the reset source was not an external reset or the key is correct, clear it and jump to the application */
			if (!(MCUSR & (1 << EXTRF)) || (MagicBootKey == MAGIC_BOOT_KEY))
    7260:	04 b6       	in	r0, 0x34	; 52
    7262:	01 fe       	sbrs	r0, 1
    7264:	08 c0       	rjmp	.+16     	; 0x7276 <main+0x22>
    7266:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <__bss_end>
    726a:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <__bss_end+0x1>
    726e:	22 34       	cpi	r18, 0x42	; 66
    7270:	3c 4d       	sbci	r19, 0xDC	; 220
    7272:	09 f0       	breq	.+2      	; 0x7276 <main+0x22>
    7274:	80 e0       	ldi	r24, 0x00	; 0
			  JumpToApplication = true;

			/* Clear reset source */
			MCUSR &= ~(1 << EXTRF);
    7276:	94 b7       	in	r25, 0x34	; 52
    7278:	9d 7f       	andi	r25, 0xFD	; 253
    727a:	0e c0       	rjmp	.+28     	; 0x7298 <main+0x44>
		}
		else
		{
			/* If the reset source was the bootloader and the key is correct, clear it and jump to the application;
			 * this can happen in the HWBE fuse is set, and the HBE pin is low during the watchdog reset */
			if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
    727c:	04 b6       	in	r0, 0x34	; 52
    727e:	03 fe       	sbrs	r0, 3
    7280:	08 c0       	rjmp	.+16     	; 0x7292 <main+0x3e>
    7282:	81 e0       	ldi	r24, 0x01	; 1
    7284:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <__bss_end>
    7288:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <__bss_end+0x1>
    728c:	22 34       	cpi	r18, 0x42	; 66
    728e:	3c 4d       	sbci	r19, 0xDC	; 220
    7290:	09 f0       	breq	.+2      	; 0x7294 <main+0x40>
{

    
    	//modified by Dreg
    
bool JumpToApplication = false;
    7292:	80 e0       	ldi	r24, 0x00	; 0
			 * this can happen in the HWBE fuse is set, and the HBE pin is low during the watchdog reset */
			if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
				JumpToApplication = true;

			/* Clear reset source */
			MCUSR &= ~(1 << WDRF);
    7294:	94 b7       	in	r25, 0x34	; 52
    7296:	97 7f       	andi	r25, 0xF7	; 247
    7298:	94 bf       	out	0x34, r25	; 52
		}
	#endif

	/* Don't run the user application if the reset vector is blank (no app loaded) */
	bool ApplicationValid = (pgm_read_word_near(0) != 0xFFFF);
    729a:	20 e0       	ldi	r18, 0x00	; 0
    729c:	30 e0       	ldi	r19, 0x00	; 0
    729e:	f9 01       	movw	r30, r18
    72a0:	45 91       	lpm	r20, Z+
    72a2:	54 91       	lpm	r21, Z

	/* If a request has been made to jump to the user application, honor it */
	if (JumpToApplication && ApplicationValid)
    72a4:	88 23       	and	r24, r24
    72a6:	b9 f0       	breq	.+46     	; 0x72d6 <main+0x82>
    72a8:	4f 3f       	cpi	r20, 0xFF	; 255
    72aa:	5f 4f       	sbci	r21, 0xFF	; 255
    72ac:	a1 f0       	breq	.+40     	; 0x72d6 <main+0x82>
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1 << WDRF);
    72ae:	84 b7       	in	r24, 0x34	; 52
    72b0:	87 7f       	andi	r24, 0xF7	; 247
    72b2:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    72b4:	0f b6       	in	r0, 0x3f	; 63
    72b6:	f8 94       	cli
    72b8:	a8 95       	wdr
    72ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    72be:	88 61       	ori	r24, 0x18	; 24
    72c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    72c4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    72c8:	0f be       	out	0x3f, r0	; 63
		wdt_disable();

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
    72ca:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <__bss_end+0x1>
    72ce:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <__bss_end>

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
    72d2:	f9 01       	movw	r30, r18
    72d4:	09 95       	icall

/** Configures the board hardware and chip peripherals for the demo's functionality. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    72d6:	84 b7       	in	r24, 0x34	; 52
    72d8:	87 7f       	andi	r24, 0xF7	; 247
    72da:	84 bf       	out	0x34, r24	; 52
    72dc:	0f b6       	in	r0, 0x3f	; 63
    72de:	f8 94       	cli
    72e0:	a8 95       	wdr
    72e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    72e6:	88 61       	ori	r24, 0x18	; 24
    72e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    72ec:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    72f0:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    72f2:	90 e0       	ldi	r25, 0x00	; 0
    72f4:	80 e8       	ldi	r24, 0x80	; 128
    72f6:	0f b6       	in	r0, 0x3f	; 63
    72f8:	f8 94       	cli
    72fa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
    72fe:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
    7302:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    7304:	81 e0       	ldi	r24, 0x01	; 1
    7306:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
    7308:	82 e0       	ldi	r24, 0x02	; 2

	/* Hardware Initialization */
	//LEDs_Init();
	USB_Init();
    730a:	85 bf       	out	0x35, r24	; 53
    730c:	db d3       	rcall	.+1974   	; 0x7ac4 <USB_Init>
		((void (*)(void))0x0000)();
	}
            
    SetupHardware();
    
    asm volatile ("sbi 0x10,0");
    730e:	80 9a       	sbi	0x10, 0	; 16
    asm volatile ("cbi 0x11,0");
    7310:	88 98       	cbi	0x11, 0	; 17
    asm volatile ("sbi 0x10,1");
    7312:	81 9a       	sbi	0x10, 1	; 16
    asm volatile ("sbi 0x11,1");
    7314:	89 9a       	sbi	0x11, 1	; 17
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    7316:	78 94       	sei
		HEXParser.CurrAddress  = HEXParser.CurrBaseAddress;
		HEXParser.ReadMSB      = false;

		/* ASCII ':' indicates the start of a new HEX record */
		if (ReadCharacter == ':')
		  HEXParser.ParserState = HEX_PARSE_STATE_BYTE_COUNT;
    7318:	ff 24       	eor	r15, r15
    731a:	f3 94       	inc	r15
    731c:	01 e0       	ldi	r16, 0x01	; 1
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_LOW;
			break;

		case HEX_PARSE_STATE_ADDRESS_LOW:
			HEXParser.CurrAddress += HEXParser.Data;
			HEXParser.ParserState  = HEX_PARSE_STATE_RECORD_TYPE;
    731e:	34 e0       	ldi	r19, 0x04	; 4
    7320:	e3 2e       	mov	r14, r19
			break;

		case HEX_PARSE_STATE_RECORD_TYPE:
			HEXParser.RecordType   = HEXParser.Data;
			HEXParser.ParserState  = (HEXParser.DataRem ? HEX_PARSE_STATE_READ_DATA : HEX_PARSE_STATE_CHECKSUM);
    7322:	46 e0       	ldi	r20, 0x06	; 6
    7324:	d4 2e       	mov	r13, r20

	switch (HEXParser.ParserState)
	{
		case HEX_PARSE_STATE_BYTE_COUNT:
			HEXParser.DataRem      = HEXParser.Data;
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_HIGH;
    7326:	52 e0       	ldi	r21, 0x02	; 2
    7328:	c5 2e       	mov	r12, r21
			break;

		case HEX_PARSE_STATE_ADDRESS_HIGH:
			HEXParser.CurrAddress += ((uint16_t)HEXParser.Data << 8);
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_LOW;
    732a:	63 e0       	ldi	r22, 0x03	; 3
    732c:	b6 2e       	mov	r11, r22
    // -
    
	//LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();

	while (RunBootloader)
    732e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    7332:	88 23       	and	r24, r24
    7334:	09 f4       	brne	.+2      	; 0x7338 <main+0xe4>
    7336:	56 c0       	rjmp	.+172    	; 0x73e4 <main+0x190>
	{
		uint8_t BytesReceived = PRNT_Device_BytesReceived(&TextOnly_Printer_Interface);
    7338:	81 e0       	ldi	r24, 0x01	; 1
    733a:	91 e0       	ldi	r25, 0x01	; 1
    733c:	cc d1       	rcall	.+920    	; 0x76d6 <PRNT_Device_BytesReceived>

		if (BytesReceived)
    733e:	81 11       	cpse	r24, r1
			}

			//LEDs_SetAllLEDs(LEDMASK_USB_READY);
		}

		PRNT_Device_USBTask(&TextOnly_Printer_Interface);
    7340:	05 c0       	rjmp	.+10     	; 0x734c <main+0xf8>
    7342:	81 e0       	ldi	r24, 0x01	; 1
    7344:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
    7346:	7b d1       	rcall	.+758    	; 0x763e <PRNT_Device_USBTask>
    7348:	9f d5       	rcall	.+2878   	; 0x7e88 <USB_USBTask>
    734a:	f1 cf       	rjmp	.-30     	; 0x732e <main+0xda>
		{
			//LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

			while (BytesReceived--)
			{
				int16_t ReceivedByte = PRNT_Device_ReceiveByte(&TextOnly_Printer_Interface);
    734c:	18 2f       	mov	r17, r24
    734e:	81 e0       	ldi	r24, 0x01	; 1
    7350:	91 e0       	ldi	r25, 0x01	; 1
    7352:	e5 d1       	rcall	.+970    	; 0x771e <PRNT_Device_ReceiveByte>
 * \param[in] ReadCharacter  Next input ASCII byte of data to parse
 */
static void ParseIntelHEXByte(const char ReadCharacter)
{
	/* Reset the line parser while waiting for a new line to start */
	if ((HEXParser.ParserState == HEX_PARSE_STATE_WAIT_LINE) || (ReadCharacter == ':'))
    7354:	40 91 d9 01 	lds	r20, 0x01D9	; 0x8001d9 <HEXParser>
    7358:	44 23       	and	r20, r20
    735a:	11 f0       	breq	.+4      	; 0x7360 <main+0x10c>
    735c:	8a 33       	cpi	r24, 0x3A	; 58
    735e:	89 f4       	brne	.+34     	; 0x7382 <main+0x12e>
	{
		HEXParser.Checksum     = 0;
    7360:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <HEXParser+0x6>
		HEXParser.CurrAddress  = HEXParser.CurrBaseAddress;
    7364:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <HEXParser+0x9>
    7368:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <HEXParser+0xa>
    736c:	30 93 e5 01 	sts	0x01E5, r19	; 0x8001e5 <HEXParser+0xc>
    7370:	20 93 e4 01 	sts	0x01E4, r18	; 0x8001e4 <HEXParser+0xb>
		HEXParser.ReadMSB      = false;
    7374:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <HEXParser+0x3>

		/* ASCII ':' indicates the start of a new HEX record */
		if (ReadCharacter == ':')
    7378:	8a 33       	cpi	r24, 0x3A	; 58
    737a:	81 f5       	brne	.+96     	; 0x73dc <main+0x188>
		  HEXParser.ParserState = HEX_PARSE_STATE_BYTE_COUNT;
    737c:	00 93 d9 01 	sts	0x01D9, r16	; 0x8001d9 <HEXParser>
    7380:	2d c0       	rjmp	.+90     	; 0x73dc <main+0x188>
 * \return Integer converted value of the input ASCII encoded HEX byte of data, or -1 if the
 *         input is not valid ASCII encoded HEX.
 */
static int8_t HexToDecimal(const char Byte)
{
	if ((Byte >= 'A') && (Byte <= 'F'))
    7382:	9f eb       	ldi	r25, 0xBF	; 191
    7384:	98 0f       	add	r25, r24
    7386:	96 30       	cpi	r25, 0x06	; 6
    7388:	18 f4       	brcc	.+6      	; 0x7390 <main+0x13c>
	  return (10 + (Byte - 'A'));
    738a:	c9 ec       	ldi	r28, 0xC9	; 201
    738c:	c8 0f       	add	r28, r24
    738e:	04 c0       	rjmp	.+8      	; 0x7398 <main+0x144>
	else if ((Byte >= '0') && (Byte <= '9'))
    7390:	80 53       	subi	r24, 0x30	; 48
    7392:	8a 30       	cpi	r24, 0x0A	; 10
    7394:	18 f5       	brcc	.+70     	; 0x73dc <main+0x188>
	  return (Byte - '0');
    7396:	c8 2f       	mov	r28, r24
	int8_t ReadCharacterDec = HexToDecimal(ReadCharacter);
	if (ReadCharacterDec < 0)
	  return;

	/* Read and convert the next nibble of data from the current character */
	HEXParser.Data    = (HEXParser.Data << 4) | ReadCharacterDec;
    7398:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <HEXParser+0x2>
    739c:	e0 e1       	ldi	r30, 0x10	; 16
    739e:	9e 9f       	mul	r25, r30
    73a0:	90 01       	movw	r18, r0
    73a2:	11 24       	eor	r1, r1
    73a4:	2c 2b       	or	r18, r28
    73a6:	20 93 db 01 	sts	0x01DB, r18	; 0x8001db <HEXParser+0x2>
	HEXParser.ReadMSB = !HEXParser.ReadMSB;
    73aa:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <HEXParser+0x3>
    73ae:	8f 25       	eor	r24, r15
    73b0:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <HEXParser+0x3>

	/* Only process further when a full byte (two nibbles) have been read */
	if (HEXParser.ReadMSB)
    73b4:	81 11       	cpse	r24, r1
    73b6:	12 c0       	rjmp	.+36     	; 0x73dc <main+0x188>
    73b8:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <HEXParser+0x6>
	  return;

	/* Intel HEX checksum is for all fields except starting character and the
	 * checksum itself
	 */
	if (HEXParser.ParserState != HEX_PARSE_STATE_CHECKSUM)
    73bc:	46 30       	cpi	r20, 0x06	; 6
    73be:	09 f4       	brne	.+2      	; 0x73c2 <main+0x16e>
    73c0:	b3 c0       	rjmp	.+358    	; 0x7528 <main+0x2d4>
	  HEXParser.Checksum += HEXParser.Data;
    73c2:	82 0f       	add	r24, r18
    73c4:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <HEXParser+0x6>

	switch (HEXParser.ParserState)
    73c8:	43 30       	cpi	r20, 0x03	; 3
    73ca:	09 f4       	brne	.+2      	; 0x73ce <main+0x17a>
    73cc:	3a c0       	rjmp	.+116    	; 0x7442 <main+0x1ee>
    73ce:	a0 f5       	brcc	.+104    	; 0x7438 <main+0x1e4>
    73d0:	41 30       	cpi	r20, 0x01	; 1
    73d2:	f1 f4       	brne	.+60     	; 0x7410 <main+0x1bc>
	{
		case HEX_PARSE_STATE_BYTE_COUNT:
			HEXParser.DataRem      = HEXParser.Data;
    73d4:	20 93 de 01 	sts	0x01DE, r18	; 0x8001de <HEXParser+0x5>
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_HIGH;
    73d8:	c0 92 d9 01 	sts	0x01D9, r12	; 0x8001d9 <HEXParser>
    73dc:	11 50       	subi	r17, 0x01	; 1

		if (BytesReceived)
		{
			//LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

			while (BytesReceived--)
    73de:	09 f0       	breq	.+2      	; 0x73e2 <main+0x18e>
    73e0:	b6 cf       	rjmp	.-148    	; 0x734e <main+0xfa>
    73e2:	af cf       	rjmp	.-162    	; 0x7342 <main+0xee>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    73e4:	8f e9       	ldi	r24, 0x9F	; 159
    73e6:	9f e0       	ldi	r25, 0x0F	; 15
    73e8:	01 97       	sbiw	r24, 0x01	; 1
    73ea:	f1 f7       	brne	.-4      	; 0x73e8 <main+0x194>
    73ec:	00 c0       	rjmp	.+0      	; 0x73ee <main+0x19a>
    73ee:	00 00       	nop
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    73f0:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    73f4:	81 60       	ori	r24, 0x01	; 1
    73f6:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    73fa:	9c e0       	ldi	r25, 0x0C	; 12
    73fc:	88 e1       	ldi	r24, 0x18	; 24
    73fe:	0f b6       	in	r0, 0x3f	; 63
    7400:	f8 94       	cli
    7402:	a8 95       	wdr
    7404:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    7408:	0f be       	out	0x3f, r0	; 63
    740a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    740e:	ff cf       	rjmp	.-2      	; 0x740e <main+0x1ba>
	 * checksum itself
	 */
	if (HEXParser.ParserState != HEX_PARSE_STATE_CHECKSUM)
	  HEXParser.Checksum += HEXParser.Data;

	switch (HEXParser.ParserState)
    7410:	42 30       	cpi	r20, 0x02	; 2
    7412:	09 f0       	breq	.+2      	; 0x7416 <main+0x1c2>
    7414:	99 c0       	rjmp	.+306    	; 0x7548 <main+0x2f4>
			HEXParser.DataRem      = HEXParser.Data;
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_HIGH;
			break;

		case HEX_PARSE_STATE_ADDRESS_HIGH:
			HEXParser.CurrAddress += ((uint16_t)HEXParser.Data << 8);
    7416:	c2 2f       	mov	r28, r18
    7418:	d0 e0       	ldi	r29, 0x00	; 0
    741a:	dc 2f       	mov	r29, r28
    741c:	cc 27       	eor	r28, r28
    741e:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <HEXParser+0xb>
    7422:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <HEXParser+0xc>
    7426:	c2 0f       	add	r28, r18
    7428:	d3 1f       	adc	r29, r19
    742a:	d0 93 e5 01 	sts	0x01E5, r29	; 0x8001e5 <HEXParser+0xc>
    742e:	c0 93 e4 01 	sts	0x01E4, r28	; 0x8001e4 <HEXParser+0xb>
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_LOW;
    7432:	b0 92 d9 01 	sts	0x01D9, r11	; 0x8001d9 <HEXParser>
    7436:	d2 cf       	rjmp	.-92     	; 0x73dc <main+0x188>
	 * checksum itself
	 */
	if (HEXParser.ParserState != HEX_PARSE_STATE_CHECKSUM)
	  HEXParser.Checksum += HEXParser.Data;

	switch (HEXParser.ParserState)
    7438:	44 30       	cpi	r20, 0x04	; 4
    743a:	81 f0       	breq	.+32     	; 0x745c <main+0x208>
    743c:	45 30       	cpi	r20, 0x05	; 5
    743e:	d1 f0       	breq	.+52     	; 0x7474 <main+0x220>
    7440:	83 c0       	rjmp	.+262    	; 0x7548 <main+0x2f4>
			HEXParser.CurrAddress += ((uint16_t)HEXParser.Data << 8);
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_LOW;
			break;

		case HEX_PARSE_STATE_ADDRESS_LOW:
			HEXParser.CurrAddress += HEXParser.Data;
    7442:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <HEXParser+0xb>
    7446:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <HEXParser+0xc>
    744a:	82 0f       	add	r24, r18
    744c:	91 1d       	adc	r25, r1
    744e:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <HEXParser+0xc>
    7452:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <HEXParser+0xb>
			HEXParser.ParserState  = HEX_PARSE_STATE_RECORD_TYPE;
    7456:	e0 92 d9 01 	sts	0x01D9, r14	; 0x8001d9 <HEXParser>
    745a:	c0 cf       	rjmp	.-128    	; 0x73dc <main+0x188>
			break;

		case HEX_PARSE_STATE_RECORD_TYPE:
			HEXParser.RecordType   = HEXParser.Data;
    745c:	20 93 dd 01 	sts	0x01DD, r18	; 0x8001dd <HEXParser+0x4>
			HEXParser.ParserState  = (HEXParser.DataRem ? HEX_PARSE_STATE_READ_DATA : HEX_PARSE_STATE_CHECKSUM);
    7460:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <HEXParser+0x5>
    7464:	81 11       	cpse	r24, r1
    7466:	02 c0       	rjmp	.+4      	; 0x746c <main+0x218>
    7468:	86 e0       	ldi	r24, 0x06	; 6
    746a:	01 c0       	rjmp	.+2      	; 0x746e <main+0x21a>
    746c:	85 e0       	ldi	r24, 0x05	; 5
    746e:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <HEXParser>
    7472:	b4 cf       	rjmp	.-152    	; 0x73dc <main+0x188>
			break;

		case HEX_PARSE_STATE_READ_DATA:
			/* Track the number of read data bytes in the record */
			HEXParser.DataRem--;
    7474:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <HEXParser+0x5>
    7478:	81 50       	subi	r24, 0x01	; 1
    747a:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <HEXParser+0x5>

			/* Protect the bootloader against being written to */
			if (HEXParser.CurrAddress >= BOOT_START_ADDR)
    747e:	40 91 e4 01 	lds	r20, 0x01E4	; 0x8001e4 <HEXParser+0xb>
    7482:	50 91 e5 01 	lds	r21, 0x01E5	; 0x8001e5 <HEXParser+0xc>
    7486:	41 15       	cp	r20, r1
    7488:	50 47       	sbci	r21, 0x70	; 112
    748a:	28 f0       	brcs	.+10     	; 0x7496 <main+0x242>
			{
				HEXParser.ParserState = HEX_PARSE_STATE_WAIT_LINE;
    748c:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <HEXParser>
				PageDirty = false;
    7490:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__data_end>
    7494:	a3 cf       	rjmp	.-186    	; 0x73dc <main+0x188>
				return;
			}

			/* Wait for a machine word (two bytes) of data to be read */
			if (HEXParser.DataRem & 0x01)
    7496:	80 ff       	sbrs	r24, 0
    7498:	03 c0       	rjmp	.+6      	; 0x74a0 <main+0x24c>
			{
				HEXParser.PrevData = HEXParser.Data;
    749a:	20 93 da 01 	sts	0x01DA, r18	; 0x8001da <HEXParser+0x1>
    749e:	9e cf       	rjmp	.-196    	; 0x73dc <main+0x188>
				break;
			}

			/* Convert the last two received data bytes into a 16-bit word */
			uint16_t NewDataWord = ((uint16_t)HEXParser.Data << 8) | HEXParser.PrevData;
    74a0:	c2 2f       	mov	r28, r18
    74a2:	d0 e0       	ldi	r29, 0x00	; 0
    74a4:	dc 2f       	mov	r29, r28
    74a6:	cc 27       	eor	r28, r28
    74a8:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <HEXParser+0x1>
    74ac:	c8 2b       	or	r28, r24

			switch (HEXParser.RecordType)
    74ae:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <HEXParser+0x4>
    74b2:	82 30       	cpi	r24, 0x02	; 2
    74b4:	21 f1       	breq	.+72     	; 0x74fe <main+0x2aa>
    74b6:	84 30       	cpi	r24, 0x04	; 4
    74b8:	61 f1       	breq	.+88     	; 0x7512 <main+0x2be>
    74ba:	81 11       	cpse	r24, r1
    74bc:	2e c0       	rjmp	.+92     	; 0x751a <main+0x2c6>
			{
				case HEX_RECORD_TYPE_Data:
					/* If we are writing to a new page, we need to erase it first */
					if (!(PageDirty))
    74be:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <__data_end>
    74c2:	81 11       	cpse	r24, r1
    74c4:	09 c0       	rjmp	.+18     	; 0x74d8 <main+0x284>
					{
						BootloaderAPI_ErasePage(HEXParser.PageStartAddress);
    74c6:	60 91 e0 01 	lds	r22, 0x01E0	; 0x8001e0 <HEXParser+0x7>
    74ca:	70 91 e1 01 	lds	r23, 0x01E1	; 0x8001e1 <HEXParser+0x8>
    74ce:	80 e0       	ldi	r24, 0x00	; 0
    74d0:	90 e0       	ldi	r25, 0x00	; 0
    74d2:	08 de       	rcall	.-1008   	; 0x70e4 <BootloaderAPI_ErasePage>

						PageDirty = true;
    74d4:	00 93 d8 01 	sts	0x01D8, r16	; 0x8001d8 <__data_end>
					}

					/* Fill the FLASH memory buffer with the new word of data */
					BootloaderAPI_FillWord(HEXParser.CurrAddress, NewDataWord);
    74d8:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <HEXParser+0xb>
    74dc:	70 91 e5 01 	lds	r23, 0x01E5	; 0x8001e5 <HEXParser+0xc>
    74e0:	80 e0       	ldi	r24, 0x00	; 0
    74e2:	90 e0       	ldi	r25, 0x00	; 0
    74e4:	ae 01       	movw	r20, r28
    74e6:	5e de       	rcall	.-836    	; 0x71a4 <BootloaderAPI_FillWord>
					HEXParser.CurrAddress += 2;
    74e8:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <HEXParser+0xb>
    74ec:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <HEXParser+0xc>
    74f0:	02 96       	adiw	r24, 0x02	; 2
    74f2:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <HEXParser+0xc>
    74f6:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <HEXParser+0xb>

					/* Flush the FLASH page to physical memory if we are crossing a page boundary */
					FlushPageIfRequired();
    74fa:	85 de       	rcall	.-758    	; 0x7206 <FlushPageIfRequired>
    74fc:	0e c0       	rjmp	.+28     	; 0x751a <main+0x2c6>
					break;

				case HEX_RECORD_TYPE_ExtendedSegmentAddress:
					/* Extended address data - store the upper 12-bits of the new address */
					HEXParser.CurrBaseAddress = ((uint32_t)NewDataWord << 4);
    74fe:	84 e0       	ldi	r24, 0x04	; 4
    7500:	cc 0f       	add	r28, r28
    7502:	dd 1f       	adc	r29, r29
    7504:	8a 95       	dec	r24
    7506:	e1 f7       	brne	.-8      	; 0x7500 <main+0x2ac>
    7508:	d0 93 e3 01 	sts	0x01E3, r29	; 0x8001e3 <HEXParser+0xa>
    750c:	c0 93 e2 01 	sts	0x01E2, r28	; 0x8001e2 <HEXParser+0x9>
    7510:	04 c0       	rjmp	.+8      	; 0x751a <main+0x2c6>
					break;

				case HEX_RECORD_TYPE_ExtendedLinearAddress:
					/* Extended address data - store the upper 16-bits of the new address */
					HEXParser.CurrBaseAddress = ((uint32_t)NewDataWord << 16);
    7512:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <HEXParser+0xa>
    7516:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <HEXParser+0x9>
					break;
			}

			if (!HEXParser.DataRem)
    751a:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <HEXParser+0x5>
    751e:	81 11       	cpse	r24, r1
    7520:	5d cf       	rjmp	.-326    	; 0x73dc <main+0x188>
			  HEXParser.ParserState = HEX_PARSE_STATE_CHECKSUM;
    7522:	d0 92 d9 01 	sts	0x01D9, r13	; 0x8001d9 <HEXParser>
			break;

		case HEX_PARSE_STATE_CHECKSUM:
			/* Verify checksum of the completed record */
			if (HEXParser.Data != ((~HEXParser.Checksum + 1) & 0xFF))
    7526:	5a cf       	rjmp	.-332    	; 0x73dc <main+0x188>
    7528:	30 e0       	ldi	r19, 0x00	; 0
    752a:	81 95       	neg	r24
    752c:	90 e0       	ldi	r25, 0x00	; 0
    752e:	28 17       	cp	r18, r24
    7530:	39 07       	cpc	r19, r25
    7532:	09 f0       	breq	.+2      	; 0x7536 <main+0x2e2>
			  break;

			/* Flush the FLASH page to physical memory if we are crossing a page boundary */
			FlushPageIfRequired();
    7534:	53 cf       	rjmp	.-346    	; 0x73dc <main+0x188>
    7536:	67 de       	rcall	.-818    	; 0x7206 <FlushPageIfRequired>

			/* If end of the HEX file reached, the bootloader should exit at next opportunity */
			if (HEXParser.RecordType == HEX_RECORD_TYPE_EndOfFile)
    7538:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <HEXParser+0x4>
    753c:	81 30       	cpi	r24, 0x01	; 1
    753e:	09 f0       	breq	.+2      	; 0x7542 <main+0x2ee>
    7540:	4d cf       	rjmp	.-358    	; 0x73dc <main+0x188>
            {
			  RunBootloader = false;
    7542:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
    7546:	4a cf       	rjmp	.-364    	; 0x73dc <main+0x188>
            }
            
			break;

		default:
			HEXParser.ParserState = HEX_PARSE_STATE_WAIT_LINE;
    7548:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <HEXParser>
    754c:	47 cf       	rjmp	.-370    	; 0x73dc <main+0x188>

0000754e <EVENT_USB_Device_Connect>:
    754e:	08 95       	ret

00007550 <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs and stops the Printer management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
    7550:	08 95       	ret

00007552 <EVENT_USB_Device_ConfigurationChanged>:
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	/* Setup Printer Data Endpoints */
	ConfigSuccess &= PRNT_Device_ConfigureEndpoints(&TextOnly_Printer_Interface);
    7552:	81 e0       	ldi	r24, 0x01	; 1
    7554:	91 e0       	ldi	r25, 0x01	; 1
    7556:	34 d0       	rcall	.+104    	; 0x75c0 <PRNT_Device_ConfigureEndpoints>

	/* Reset the HEX parser upon successful connection to a host */
	HEXParser.ParserState = HEX_PARSE_STATE_WAIT_LINE;
    7558:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <HEXParser>
    755c:	08 95       	ret

0000755e <EVENT_USB_Device_ControlRequest>:
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	PRNT_Device_ProcessControlRequest(&TextOnly_Printer_Interface);
    755e:	81 e0       	ldi	r24, 0x01	; 1
    7560:	91 e0       	ldi	r25, 0x01	; 1
    7562:	0a c1       	rjmp	.+532    	; 0x7778 <PRNT_Device_ProcessControlRequest>

00007564 <CALLBACK_USB_GetDescriptor>:
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    7564:	29 2f       	mov	r18, r25
    7566:	33 27       	eor	r19, r19
    7568:	22 30       	cpi	r18, 0x02	; 2
    756a:	31 05       	cpc	r19, r1
    756c:	59 f0       	breq	.+22     	; 0x7584 <CALLBACK_USB_GetDescriptor+0x20>
    756e:	23 30       	cpi	r18, 0x03	; 3
    7570:	31 05       	cpc	r19, r1
    7572:	69 f0       	breq	.+26     	; 0x758e <CALLBACK_USB_GetDescriptor+0x2a>
    7574:	21 30       	cpi	r18, 0x01	; 1
    7576:	31 05       	cpc	r19, r1
    7578:	d9 f4       	brne	.+54     	; 0x75b0 <CALLBACK_USB_GetDescriptor+0x4c>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    757a:	82 e1       	ldi	r24, 0x12	; 18
    757c:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    757e:	26 ec       	ldi	r18, 0xC6	; 198
    7580:	31 e0       	ldi	r19, 0x01	; 1
    7582:	1a c0       	rjmp	.+52     	; 0x75b8 <CALLBACK_USB_GetDescriptor+0x54>
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    7584:	80 e2       	ldi	r24, 0x20	; 32
    7586:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    7588:	26 ea       	ldi	r18, 0xA6	; 166
    758a:	31 e0       	ldi	r19, 0x01	; 1
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    758c:	15 c0       	rjmp	.+42     	; 0x75b8 <CALLBACK_USB_GetDescriptor+0x54>
    758e:	99 27       	eor	r25, r25
    7590:	83 30       	cpi	r24, 0x03	; 3
    7592:	91 05       	cpc	r25, r1
    7594:	68 f4       	brcc	.+26     	; 0x75b0 <CALLBACK_USB_GetDescriptor+0x4c>
    7596:	fc 01       	movw	r30, r24
    7598:	ee 0f       	add	r30, r30
    759a:	ff 1f       	adc	r31, r31
    759c:	e2 5b       	subi	r30, 0xB2	; 178
    759e:	fe 4f       	sbci	r31, 0xFE	; 254
    75a0:	20 81       	ld	r18, Z
    75a2:	31 81       	ldd	r19, Z+1	; 0x01
    75a4:	fc 01       	movw	r30, r24
    75a6:	e5 5b       	subi	r30, 0xB5	; 181
    75a8:	fe 4f       	sbci	r31, 0xFE	; 254
    75aa:	80 81       	ld	r24, Z
    75ac:	90 e0       	ldi	r25, 0x00	; 0
    75ae:	04 c0       	rjmp	.+8      	; 0x75b8 <CALLBACK_USB_GetDescriptor+0x54>
    75b0:	80 e0       	ldi	r24, 0x00	; 0
    75b2:	90 e0       	ldi	r25, 0x00	; 0
    75b4:	20 e0       	ldi	r18, 0x00	; 0
    75b6:	30 e0       	ldi	r19, 0x00	; 0
            }

            break;
    }

    *DescriptorAddress = Address;
    75b8:	fa 01       	movw	r30, r20
    75ba:	31 83       	std	Z+1, r19	; 0x01
    75bc:	20 83       	st	Z, r18
    return Size;
}
    75be:	08 95       	ret

000075c0 <PRNT_Device_ConfigureEndpoints>:

void PRNT_Device_CreateBlockingStream(USB_ClassInfo_PRNT_Device_t* const PRNTInterfaceInfo,
                                      FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(PRNT_Device_putchar, PRNT_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, PRNTInterfaceInfo);
    75c0:	cf 93       	push	r28
    75c2:	df 93       	push	r29
    75c4:	ec 01       	movw	r28, r24
    75c6:	1e 86       	std	Y+14, r1	; 0x0e
    75c8:	1d 86       	std	Y+13, r1	; 0x0d
    75ca:	88 e1       	ldi	r24, 0x18	; 24
    75cc:	8d 87       	std	Y+13, r24	; 0x0d
    75ce:	82 e0       	ldi	r24, 0x02	; 2
    75d0:	8c 83       	std	Y+4, r24	; 0x04
    75d2:	89 87       	std	Y+9, r24	; 0x09
    75d4:	61 e0       	ldi	r22, 0x01	; 1
    75d6:	ce 01       	movw	r24, r28
    75d8:	01 96       	adiw	r24, 0x01	; 1
    75da:	ad d1       	rcall	.+858    	; 0x7936 <Endpoint_ConfigureEndpointTable>
    75dc:	88 23       	and	r24, r24
    75de:	31 f0       	breq	.+12     	; 0x75ec <PRNT_Device_ConfigureEndpoints+0x2c>
    75e0:	61 e0       	ldi	r22, 0x01	; 1
    75e2:	ce 01       	movw	r24, r28
    75e4:	06 96       	adiw	r24, 0x06	; 6
    75e6:	df 91       	pop	r29
    75e8:	cf 91       	pop	r28
    75ea:	a5 c1       	rjmp	.+842    	; 0x7936 <Endpoint_ConfigureEndpointTable>
    75ec:	80 e0       	ldi	r24, 0x00	; 0
    75ee:	df 91       	pop	r29
    75f0:	cf 91       	pop	r28
    75f2:	08 95       	ret

000075f4 <PRNT_Device_Flush>:
    75f4:	2e b3       	in	r18, 0x1e	; 30
    75f6:	24 30       	cpi	r18, 0x04	; 4
    75f8:	01 f5       	brne	.+64     	; 0x763a <PRNT_Device_Flush+0x46>
    75fa:	fc 01       	movw	r30, r24
    75fc:	81 81       	ldd	r24, Z+1	; 0x01
    75fe:	8f 70       	andi	r24, 0x0F	; 15
    7600:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    7604:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    7608:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    760c:	90 e0       	ldi	r25, 0x00	; 0
    760e:	92 2b       	or	r25, r18
    7610:	89 2b       	or	r24, r25
    7612:	89 f0       	breq	.+34     	; 0x7636 <PRNT_Device_Flush+0x42>
    7614:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7618:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    761c:	8e 77       	andi	r24, 0x7E	; 126
    761e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7622:	95 fd       	sbrc	r25, 5
    7624:	08 c0       	rjmp	.+16     	; 0x7636 <PRNT_Device_Flush+0x42>
    7626:	e1 d1       	rcall	.+962    	; 0x79ea <Endpoint_WaitUntilReady>
    7628:	81 11       	cpse	r24, r1
    762a:	08 c0       	rjmp	.+16     	; 0x763c <PRNT_Device_Flush+0x48>
    762c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7630:	8e 77       	andi	r24, 0x7E	; 126
    7632:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7636:	80 e0       	ldi	r24, 0x00	; 0
    7638:	08 95       	ret
    763a:	82 e0       	ldi	r24, 0x02	; 2
    763c:	08 95       	ret

0000763e <PRNT_Device_USBTask>:
    763e:	cf 93       	push	r28
    7640:	df 93       	push	r29
    7642:	2e b3       	in	r18, 0x1e	; 30
    7644:	24 30       	cpi	r18, 0x04	; 4
    7646:	09 f0       	breq	.+2      	; 0x764a <PRNT_Device_USBTask+0xc>
    7648:	43 c0       	rjmp	.+134    	; 0x76d0 <PRNT_Device_USBTask+0x92>
    764a:	ec 01       	movw	r28, r24
    764c:	89 81       	ldd	r24, Y+1	; 0x01
    764e:	8f 70       	andi	r24, 0x0F	; 15
    7650:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    7654:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7658:	80 ff       	sbrs	r24, 0
    765a:	02 c0       	rjmp	.+4      	; 0x7660 <PRNT_Device_USBTask+0x22>
    765c:	ce 01       	movw	r24, r28
    765e:	ca df       	rcall	.-108    	; 0x75f4 <PRNT_Device_Flush>
    7660:	8e 85       	ldd	r24, Y+14	; 0x0e
    7662:	88 23       	and	r24, r24
    7664:	a9 f1       	breq	.+106    	; 0x76d0 <PRNT_Device_USBTask+0x92>
    7666:	2e 81       	ldd	r18, Y+6	; 0x06
    7668:	2f 70       	andi	r18, 0x0F	; 15
    766a:	81 e0       	ldi	r24, 0x01	; 1
    766c:	90 e0       	ldi	r25, 0x00	; 0
    766e:	ac 01       	movw	r20, r24
    7670:	02 c0       	rjmp	.+4      	; 0x7676 <PRNT_Device_USBTask+0x38>
    7672:	44 0f       	add	r20, r20
    7674:	55 1f       	adc	r21, r21
    7676:	2a 95       	dec	r18
    7678:	e2 f7       	brpl	.-8      	; 0x7672 <PRNT_Device_USBTask+0x34>
    767a:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
    767e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
    7682:	29 81       	ldd	r18, Y+1	; 0x01
    7684:	2f 70       	andi	r18, 0x0F	; 15
    7686:	01 c0       	rjmp	.+2      	; 0x768a <PRNT_Device_USBTask+0x4c>
    7688:	88 0f       	add	r24, r24
    768a:	2a 95       	dec	r18
    768c:	ea f7       	brpl	.-6      	; 0x7688 <PRNT_Device_USBTask+0x4a>
    768e:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
    7692:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
    7696:	8e 81       	ldd	r24, Y+6	; 0x06
    7698:	8f 70       	andi	r24, 0x0F	; 15
    769a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    769e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    76a2:	80 61       	ori	r24, 0x10	; 16
    76a4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    76a8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    76ac:	88 60       	ori	r24, 0x08	; 8
    76ae:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    76b2:	89 81       	ldd	r24, Y+1	; 0x01
    76b4:	8f 70       	andi	r24, 0x0F	; 15
    76b6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    76ba:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    76be:	80 61       	ori	r24, 0x10	; 16
    76c0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    76c4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    76c8:	88 60       	ori	r24, 0x08	; 8
    76ca:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    76ce:	1e 86       	std	Y+14, r1	; 0x0e
    76d0:	df 91       	pop	r29
    76d2:	cf 91       	pop	r28
    76d4:	08 95       	ret

000076d6 <PRNT_Device_BytesReceived>:
    76d6:	2e b3       	in	r18, 0x1e	; 30
    76d8:	24 30       	cpi	r18, 0x04	; 4
    76da:	19 f0       	breq	.+6      	; 0x76e2 <PRNT_Device_BytesReceived+0xc>
    76dc:	80 e0       	ldi	r24, 0x00	; 0
    76de:	90 e0       	ldi	r25, 0x00	; 0
    76e0:	08 95       	ret
    76e2:	fc 01       	movw	r30, r24
    76e4:	86 81       	ldd	r24, Z+6	; 0x06
    76e6:	8f 70       	andi	r24, 0x0F	; 15
    76e8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    76ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    76f0:	82 ff       	sbrs	r24, 2
    76f2:	f4 cf       	rjmp	.-24     	; 0x76dc <PRNT_Device_BytesReceived+0x6>
    76f4:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    76f8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    76fc:	90 e0       	ldi	r25, 0x00	; 0
    76fe:	92 2b       	or	r25, r18
    7700:	00 97       	sbiw	r24, 0x00	; 0
    7702:	31 f4       	brne	.+12     	; 0x7710 <PRNT_Device_BytesReceived+0x3a>
    7704:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7708:	2b 77       	andi	r18, 0x7B	; 123
    770a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    770e:	08 95       	ret
    7710:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    7714:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    7718:	90 e0       	ldi	r25, 0x00	; 0
    771a:	92 2b       	or	r25, r18
    771c:	08 95       	ret

0000771e <PRNT_Device_ReceiveByte>:
    771e:	2e b3       	in	r18, 0x1e	; 30
    7720:	24 30       	cpi	r18, 0x04	; 4
    7722:	19 f0       	breq	.+6      	; 0x772a <PRNT_Device_ReceiveByte+0xc>
    7724:	8f ef       	ldi	r24, 0xFF	; 255
    7726:	9f ef       	ldi	r25, 0xFF	; 255
    7728:	08 95       	ret
    772a:	fc 01       	movw	r30, r24
    772c:	86 81       	ldd	r24, Z+6	; 0x06
    772e:	8f 70       	andi	r24, 0x0F	; 15
    7730:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    7734:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7738:	82 ff       	sbrs	r24, 2
    773a:	f4 cf       	rjmp	.-24     	; 0x7724 <PRNT_Device_ReceiveByte+0x6>
    773c:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    7740:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    7744:	90 e0       	ldi	r25, 0x00	; 0
    7746:	92 2b       	or	r25, r18
    7748:	89 2b       	or	r24, r25
    774a:	21 f0       	breq	.+8      	; 0x7754 <PRNT_Device_ReceiveByte+0x36>
    774c:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    7750:	30 e0       	ldi	r19, 0x00	; 0
    7752:	02 c0       	rjmp	.+4      	; 0x7758 <PRNT_Device_ReceiveByte+0x3a>
    7754:	2f ef       	ldi	r18, 0xFF	; 255
    7756:	3f ef       	ldi	r19, 0xFF	; 255
    7758:	40 91 f3 00 	lds	r20, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    775c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    7760:	90 e0       	ldi	r25, 0x00	; 0
    7762:	94 2b       	or	r25, r20
    7764:	89 2b       	or	r24, r25
    7766:	29 f4       	brne	.+10     	; 0x7772 <PRNT_Device_ReceiveByte+0x54>
    7768:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    776c:	8b 77       	andi	r24, 0x7B	; 123
    776e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7772:	c9 01       	movw	r24, r18
    7774:	08 95       	ret

00007776 <PRNT_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void PRNT_Device_Event_Stub(USB_ClassInfo_PRNT_Device_t* const PRNTInterfaceInfo)
{
    7776:	08 95       	ret

00007778 <PRNT_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_PRINTER_DRIVER
#define  __INCLUDE_FROM_PRINTER_DEVICE_C
#include "PrinterClassDevice.h"

void PRNT_Device_ProcessControlRequest(USB_ClassInfo_PRNT_Device_t* const PRNTInterfaceInfo)
{
    7778:	cf 93       	push	r28
    777a:	df 93       	push	r29
    777c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    777e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	if (!(Endpoint_IsSETUPReceived()))
    7782:	83 ff       	sbrs	r24, 3
    7784:	65 c0       	rjmp	.+202    	; 0x7850 <PRNT_Device_ProcessControlRequest+0xd8>
	  return;

	if (USB_ControlRequest.wIndex != PRNTInterfaceInfo->Config.InterfaceNumber)
    7786:	88 81       	ld	r24, Y
    7788:	90 e0       	ldi	r25, 0x00	; 0
    778a:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <USB_ControlRequest+0x4>
    778e:	30 91 ed 01 	lds	r19, 0x01ED	; 0x8001ed <USB_ControlRequest+0x5>
    7792:	28 17       	cp	r18, r24
    7794:	39 07       	cpc	r19, r25
    7796:	09 f0       	breq	.+2      	; 0x779a <PRNT_Device_ProcessControlRequest+0x22>
    7798:	5b c0       	rjmp	.+182    	; 0x7850 <PRNT_Device_ProcessControlRequest+0xd8>
	  return;

	switch (USB_ControlRequest.bRequest)
    779a:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest+0x1>
    779e:	81 30       	cpi	r24, 0x01	; 1
    77a0:	59 f1       	breq	.+86     	; 0x77f8 <PRNT_Device_ProcessControlRequest+0x80>
    77a2:	20 f0       	brcs	.+8      	; 0x77ac <PRNT_Device_ProcessControlRequest+0x34>
    77a4:	82 30       	cpi	r24, 0x02	; 2
    77a6:	09 f4       	brne	.+2      	; 0x77aa <PRNT_Device_ProcessControlRequest+0x32>
    77a8:	43 c0       	rjmp	.+134    	; 0x7830 <PRNT_Device_ProcessControlRequest+0xb8>
    77aa:	52 c0       	rjmp	.+164    	; 0x7850 <PRNT_Device_ProcessControlRequest+0xd8>
	{
		case PRNT_REQ_GetDeviceID:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    77ac:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_ControlRequest>
    77b0:	81 3a       	cpi	r24, 0xA1	; 161
    77b2:	09 f0       	breq	.+2      	; 0x77b6 <PRNT_Device_ProcessControlRequest+0x3e>
    77b4:	4d c0       	rjmp	.+154    	; 0x7850 <PRNT_Device_ProcessControlRequest+0xd8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    77b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    77ba:	87 7f       	andi	r24, 0xF7	; 247
    77bc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    77c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()))
    77c4:	80 fd       	sbrc	r24, 0
    77c6:	04 c0       	rjmp	.+8      	; 0x77d0 <PRNT_Device_ProcessControlRequest+0x58>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    77c8:	8e b3       	in	r24, 0x1e	; 30
    77ca:	81 11       	cpse	r24, r1
    77cc:	f9 cf       	rjmp	.-14     	; 0x77c0 <PRNT_Device_ProcessControlRequest+0x48>
    77ce:	40 c0       	rjmp	.+128    	; 0x7850 <PRNT_Device_ProcessControlRequest+0xd8>
					  return;
				}

				uint16_t IEEEStringLen = strlen(PRNTInterfaceInfo->Config.IEEE1284String);
    77d0:	ab 85       	ldd	r26, Y+11	; 0x0b
    77d2:	bc 85       	ldd	r27, Y+12	; 0x0c
    77d4:	fd 01       	movw	r30, r26
    77d6:	01 90       	ld	r0, Z+
    77d8:	00 20       	and	r0, r0
    77da:	e9 f7       	brne	.-6      	; 0x77d6 <PRNT_Device_ProcessControlRequest+0x5e>
    77dc:	31 97       	sbiw	r30, 0x01	; 1
    77de:	bf 01       	movw	r22, r30
    77e0:	6a 1b       	sub	r22, r26
    77e2:	7b 0b       	sbc	r23, r27
				Endpoint_Write_16_BE(IEEEStringLen + sizeof(uint16_t));
    77e4:	cb 01       	movw	r24, r22
    77e6:	02 96       	adiw	r24, 0x02	; 2
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_BE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_BE(const uint16_t Data)
			{
				UEDATX = (Data >> 8);
    77e8:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data & 0xFF);
    77ec:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				Endpoint_Write_Control_Stream_LE(PRNTInterfaceInfo->Config.IEEE1284String, IEEEStringLen);
    77f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    77f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    77f4:	30 d0       	rcall	.+96     	; 0x7856 <Endpoint_Write_Control_Stream_LE>
    77f6:	19 c0       	rjmp	.+50     	; 0x782a <PRNT_Device_ProcessControlRequest+0xb2>
				Endpoint_ClearStatusStage();
			}

			break;
		case PRNT_REQ_GetPortStatus:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    77f8:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_ControlRequest>
    77fc:	81 3a       	cpi	r24, 0xA1	; 161
    77fe:	41 f5       	brne	.+80     	; 0x7850 <PRNT_Device_ProcessControlRequest+0xd8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7800:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7804:	87 7f       	andi	r24, 0xF7	; 247
    7806:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    780a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()))
    780e:	80 fd       	sbrc	r24, 0
    7810:	04 c0       	rjmp	.+8      	; 0x781a <PRNT_Device_ProcessControlRequest+0xa2>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    7812:	8e b3       	in	r24, 0x1e	; 30
    7814:	81 11       	cpse	r24, r1
    7816:	f9 cf       	rjmp	.-14     	; 0x780a <PRNT_Device_ProcessControlRequest+0x92>
    7818:	1b c0       	rjmp	.+54     	; 0x7850 <PRNT_Device_ProcessControlRequest+0xd8>
					  return;
				}

				Endpoint_Write_8(PRNTInterfaceInfo->State.PortStatus);
    781a:	8d 85       	ldd	r24, Y+13	; 0x0d
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    781c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7820:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7824:	8e 77       	andi	r24, 0x7E	; 126
    7826:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				EVENT_PRNT_Device_SoftReset(PRNTInterfaceInfo);
			}

			break;
	}
}
    782a:	df 91       	pop	r29
				}

				Endpoint_Write_8(PRNTInterfaceInfo->State.PortStatus);
				Endpoint_ClearIN();

				Endpoint_ClearStatusStage();
    782c:	cf 91       	pop	r28
    782e:	c0 c0       	rjmp	.+384    	; 0x79b0 <Endpoint_ClearStatusStage>
			}

			break;
		case PRNT_REQ_SoftReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    7830:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_ControlRequest>
    7834:	81 32       	cpi	r24, 0x21	; 33
    7836:	61 f4       	brne	.+24     	; 0x7850 <PRNT_Device_ProcessControlRequest+0xd8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7838:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    783c:	87 7f       	andi	r24, 0xF7	; 247
    783e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    7842:	b6 d0       	rcall	.+364    	; 0x79b0 <Endpoint_ClearStatusStage>

				PRNTInterfaceInfo->State.IsPrinterReset = true;
    7844:	81 e0       	ldi	r24, 0x01	; 1
    7846:	8e 87       	std	Y+14, r24	; 0x0e
				EVENT_PRNT_Device_SoftReset(PRNTInterfaceInfo);
			}

			break;
	}
}
    7848:	ce 01       	movw	r24, r28
    784a:	df 91       	pop	r29
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				PRNTInterfaceInfo->State.IsPrinterReset = true;

				EVENT_PRNT_Device_SoftReset(PRNTInterfaceInfo);
    784c:	cf 91       	pop	r28
    784e:	93 cf       	rjmp	.-218    	; 0x7776 <PRNT_Device_Event_Stub>
			}

			break;
	}
}
    7850:	df 91       	pop	r29
    7852:	cf 91       	pop	r28
    7854:	08 95       	ret

00007856 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    7856:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <USB_ControlRequest+0x6>
    785a:	30 91 ef 01 	lds	r19, 0x01EF	; 0x8001ef <USB_ControlRequest+0x7>
    785e:	26 17       	cp	r18, r22
    7860:	37 07       	cpc	r19, r23
    7862:	48 f0       	brcs	.+18     	; 0x7876 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    7864:	61 15       	cp	r22, r1
    7866:	71 05       	cpc	r23, r1
    7868:	39 f4       	brne	.+14     	; 0x7878 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    786a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    786e:	2e 77       	andi	r18, 0x7E	; 126
    7870:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7874:	01 c0       	rjmp	.+2      	; 0x7878 <Endpoint_Write_Control_Stream_LE+0x22>
    7876:	b9 01       	movw	r22, r18
    7878:	fc 01       	movw	r30, r24
    787a:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    787c:	61 15       	cp	r22, r1
    787e:	71 05       	cpc	r23, r1
    7880:	71 f1       	breq	.+92     	; 0x78de <Endpoint_Write_Control_Stream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7882:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7884:	88 23       	and	r24, r24
    7886:	e9 f1       	breq	.+122    	; 0x7902 <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7888:	85 30       	cpi	r24, 0x05	; 5
    788a:	e9 f1       	breq	.+122    	; 0x7906 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    788c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7890:	83 fd       	sbrc	r24, 3
    7892:	3b c0       	rjmp	.+118    	; 0x790a <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7894:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    7898:	82 fd       	sbrc	r24, 2
    789a:	2d c0       	rjmp	.+90     	; 0x78f6 <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    789c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  break;

		if (Endpoint_IsINReady())
    78a0:	80 ff       	sbrs	r24, 0
    78a2:	ec cf       	rjmp	.-40     	; 0x787c <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    78a4:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    78a8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    78ac:	90 e0       	ldi	r25, 0x00	; 0
    78ae:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    78b0:	61 15       	cp	r22, r1
    78b2:	71 05       	cpc	r23, r1
    78b4:	51 f0       	breq	.+20     	; 0x78ca <Endpoint_Write_Control_Stream_LE+0x74>
    78b6:	88 30       	cpi	r24, 0x08	; 8
    78b8:	91 05       	cpc	r25, r1
    78ba:	38 f4       	brcc	.+14     	; 0x78ca <Endpoint_Write_Control_Stream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    78bc:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    78be:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    78c2:	61 50       	subi	r22, 0x01	; 1
    78c4:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    78c6:	01 96       	adiw	r24, 0x01	; 1
    78c8:	f3 cf       	rjmp	.-26     	; 0x78b0 <Endpoint_Write_Control_Stream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    78ca:	21 e0       	ldi	r18, 0x01	; 1
    78cc:	08 97       	sbiw	r24, 0x08	; 8
    78ce:	09 f0       	breq	.+2      	; 0x78d2 <Endpoint_Write_Control_Stream_LE+0x7c>
    78d0:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    78d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    78d6:	8e 77       	andi	r24, 0x7E	; 126
    78d8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    78dc:	cf cf       	rjmp	.-98     	; 0x787c <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    78de:	21 11       	cpse	r18, r1
    78e0:	d0 cf       	rjmp	.-96     	; 0x7882 <Endpoint_Write_Control_Stream_LE+0x2c>
    78e2:	09 c0       	rjmp	.+18     	; 0x78f6 <Endpoint_Write_Control_Stream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    78e4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    78e6:	88 23       	and	r24, r24
    78e8:	61 f0       	breq	.+24     	; 0x7902 <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    78ea:	85 30       	cpi	r24, 0x05	; 5
    78ec:	61 f0       	breq	.+24     	; 0x7906 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    78ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    78f2:	83 fd       	sbrc	r24, 3
    78f4:	0a c0       	rjmp	.+20     	; 0x790a <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    78f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    78fa:	82 ff       	sbrs	r24, 2
    78fc:	f3 cf       	rjmp	.-26     	; 0x78e4 <Endpoint_Write_Control_Stream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    78fe:	80 e0       	ldi	r24, 0x00	; 0
    7900:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7902:	82 e0       	ldi	r24, 0x02	; 2
    7904:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7906:	83 e0       	ldi	r24, 0x03	; 3
    7908:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    790a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    790c:	08 95       	ret

0000790e <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    790e:	8f 70       	andi	r24, 0x0F	; 15
    7910:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    7914:	eb ee       	ldi	r30, 0xEB	; 235
    7916:	f0 e0       	ldi	r31, 0x00	; 0
    7918:	80 81       	ld	r24, Z
    791a:	81 60       	ori	r24, 0x01	; 1
    791c:	80 83       	st	Z, r24
    791e:	ed ee       	ldi	r30, 0xED	; 237
    7920:	f0 e0       	ldi	r31, 0x00	; 0
    7922:	10 82       	st	Z, r1
    7924:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    7928:	40 83       	st	Z, r20
    792a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
    792e:	88 1f       	adc	r24, r24
    7930:	88 27       	eor	r24, r24
    7932:	88 1f       	adc	r24, r24
    7934:	08 95       	ret

00007936 <Endpoint_ConfigureEndpointTable>:
    7936:	0f 93       	push	r16
    7938:	1f 93       	push	r17
    793a:	cf 93       	push	r28
    793c:	df 93       	push	r29
    793e:	06 2f       	mov	r16, r22
    7940:	ec 01       	movw	r28, r24
    7942:	10 e0       	ldi	r17, 0x00	; 0
    7944:	10 17       	cp	r17, r16
    7946:	71 f1       	breq	.+92     	; 0x79a4 <Endpoint_ConfigureEndpointTable+0x6e>
    7948:	68 81       	ld	r22, Y
    794a:	61 11       	cpse	r22, r1
    794c:	03 c0       	rjmp	.+6      	; 0x7954 <Endpoint_ConfigureEndpointTable+0x1e>
    794e:	1f 5f       	subi	r17, 0xFF	; 255
    7950:	25 96       	adiw	r28, 0x05	; 5
    7952:	f8 cf       	rjmp	.-16     	; 0x7944 <Endpoint_ConfigureEndpointTable+0xe>
    7954:	2c 81       	ldd	r18, Y+4	; 0x04
    7956:	a9 81       	ldd	r26, Y+1	; 0x01
    7958:	ba 81       	ldd	r27, Y+2	; 0x02
    795a:	9b 81       	ldd	r25, Y+3	; 0x03
    795c:	86 2f       	mov	r24, r22
    795e:	8f 70       	andi	r24, 0x0F	; 15
    7960:	87 30       	cpi	r24, 0x07	; 7
    7962:	10 f0       	brcs	.+4      	; 0x7968 <Endpoint_ConfigureEndpointTable+0x32>
    7964:	80 e0       	ldi	r24, 0x00	; 0
    7966:	1f c0       	rjmp	.+62     	; 0x79a6 <Endpoint_ConfigureEndpointTable+0x70>
    7968:	22 30       	cpi	r18, 0x02	; 2
    796a:	10 f4       	brcc	.+4      	; 0x7970 <Endpoint_ConfigureEndpointTable+0x3a>
    796c:	42 e0       	ldi	r20, 0x02	; 2
    796e:	01 c0       	rjmp	.+2      	; 0x7972 <Endpoint_ConfigureEndpointTable+0x3c>
    7970:	46 e0       	ldi	r20, 0x06	; 6
    7972:	e8 e0       	ldi	r30, 0x08	; 8
    7974:	f0 e0       	ldi	r31, 0x00	; 0
    7976:	20 e0       	ldi	r18, 0x00	; 0
    7978:	ea 17       	cp	r30, r26
    797a:	fb 07       	cpc	r31, r27
    797c:	20 f4       	brcc	.+8      	; 0x7986 <Endpoint_ConfigureEndpointTable+0x50>
    797e:	2f 5f       	subi	r18, 0xFF	; 255
    7980:	ee 0f       	add	r30, r30
    7982:	ff 1f       	adc	r31, r31
    7984:	f9 cf       	rjmp	.-14     	; 0x7978 <Endpoint_ConfigureEndpointTable+0x42>
    7986:	22 95       	swap	r18
    7988:	20 7f       	andi	r18, 0xF0	; 240
    798a:	42 2b       	or	r20, r18
    798c:	50 e4       	ldi	r21, 0x40	; 64
    798e:	95 9f       	mul	r25, r21
    7990:	90 01       	movw	r18, r0
    7992:	11 24       	eor	r1, r1
    7994:	66 1f       	adc	r22, r22
    7996:	66 27       	eor	r22, r22
    7998:	66 1f       	adc	r22, r22
    799a:	62 2b       	or	r22, r18
    799c:	b8 df       	rcall	.-144    	; 0x790e <Endpoint_ConfigureEndpoint_Prv>
    799e:	81 11       	cpse	r24, r1
    79a0:	d6 cf       	rjmp	.-84     	; 0x794e <Endpoint_ConfigureEndpointTable+0x18>
    79a2:	e0 cf       	rjmp	.-64     	; 0x7964 <Endpoint_ConfigureEndpointTable+0x2e>
    79a4:	81 e0       	ldi	r24, 0x01	; 1
    79a6:	df 91       	pop	r29
    79a8:	cf 91       	pop	r28
    79aa:	1f 91       	pop	r17
    79ac:	0f 91       	pop	r16
    79ae:	08 95       	ret

000079b0 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    79b0:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_ControlRequest>
    79b4:	87 ff       	sbrs	r24, 7
    79b6:	0f c0       	rjmp	.+30     	; 0x79d6 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    79b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    79bc:	82 fd       	sbrc	r24, 2
    79be:	04 c0       	rjmp	.+8      	; 0x79c8 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    79c0:	8e b3       	in	r24, 0x1e	; 30
    79c2:	81 11       	cpse	r24, r1
    79c4:	f9 cf       	rjmp	.-14     	; 0x79b8 <Endpoint_ClearStatusStage+0x8>
    79c6:	10 c0       	rjmp	.+32     	; 0x79e8 <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    79c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    79cc:	8b 77       	andi	r24, 0x7B	; 123
    79ce:	0a c0       	rjmp	.+20     	; 0x79e4 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    79d0:	8e b3       	in	r24, 0x1e	; 30
    79d2:	88 23       	and	r24, r24
    79d4:	49 f0       	breq	.+18     	; 0x79e8 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    79d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    79da:	80 ff       	sbrs	r24, 0
    79dc:	f9 cf       	rjmp	.-14     	; 0x79d0 <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    79de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    79e2:	8e 77       	andi	r24, 0x7E	; 126
    79e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    79e8:	08 95       	ret

000079ea <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    79ea:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    79ee:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
    79f2:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    79f4:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    79f8:	84 2f       	mov	r24, r20
    79fa:	81 70       	andi	r24, 0x01	; 1
    79fc:	40 ff       	sbrs	r20, 0
    79fe:	22 c0       	rjmp	.+68     	; 0x7a44 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7a00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    7a04:	80 fd       	sbrc	r24, 0
    7a06:	1c c0       	rjmp	.+56     	; 0x7a40 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7a08:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7a0a:	88 23       	and	r24, r24
    7a0c:	99 f0       	breq	.+38     	; 0x7a34 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7a0e:	85 30       	cpi	r24, 0x05	; 5
    7a10:	99 f0       	breq	.+38     	; 0x7a38 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7a12:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    7a16:	85 fd       	sbrc	r24, 5
    7a18:	11 c0       	rjmp	.+34     	; 0x7a3c <Endpoint_WaitUntilReady+0x52>
    7a1a:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    7a1e:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    7a22:	24 17       	cp	r18, r20
    7a24:	35 07       	cpc	r19, r21
    7a26:	31 f3       	breq	.-52     	; 0x79f4 <Endpoint_WaitUntilReady+0xa>
    7a28:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    7a2a:	11 f0       	breq	.+4      	; 0x7a30 <Endpoint_WaitUntilReady+0x46>
    7a2c:	9a 01       	movw	r18, r20
    7a2e:	e2 cf       	rjmp	.-60     	; 0x79f4 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    7a30:	84 e0       	ldi	r24, 0x04	; 4
    7a32:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    7a34:	82 e0       	ldi	r24, 0x02	; 2
    7a36:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    7a38:	83 e0       	ldi	r24, 0x03	; 3
    7a3a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    7a3c:	81 e0       	ldi	r24, 0x01	; 1
    7a3e:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    7a40:	80 e0       	ldi	r24, 0x00	; 0
    7a42:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7a44:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    7a48:	42 ff       	sbrs	r20, 2
    7a4a:	de cf       	rjmp	.-68     	; 0x7a08 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    7a4c:	08 95       	ret

00007a4e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    7a4e:	0f 93       	push	r16
    7a50:	1f 93       	push	r17
    7a52:	cf 93       	push	r28
    7a54:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    7a56:	46 d0       	rcall	.+140    	; 0x7ae4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    7a58:	4d d0       	rcall	.+154    	; 0x7af4 <USB_INT_ClearAllInterrupts>
    7a5a:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    7a5c:	d0 e0       	ldi	r29, 0x00	; 0
    7a5e:	88 81       	ld	r24, Y
    7a60:	8f 77       	andi	r24, 0x7F	; 127
    7a62:	88 83       	st	Y, r24
    7a64:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    7a66:	80 68       	ori	r24, 0x80	; 128
    7a68:	88 83       	st	Y, r24
    7a6a:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    7a6c:	8f 7d       	andi	r24, 0xDF	; 223
    7a6e:	88 83       	st	Y, r24
    7a70:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7a72:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    7a74:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    7a78:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    7a7a:	10 e0       	ldi	r17, 0x00	; 0
    7a7c:	f8 01       	movw	r30, r16
    7a7e:	80 81       	ld	r24, Z
    7a80:	8b 7f       	andi	r24, 0xFB	; 251
    7a82:	80 83       	st	Z, r24
    7a84:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    7a86:	81 60       	ori	r24, 0x01	; 1
    7a88:	88 83       	st	Y, r24
    7a8a:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    7a8c:	60 e0       	ldi	r22, 0x00	; 0
    7a8e:	80 e0       	ldi	r24, 0x00	; 0
    7a90:	3e df       	rcall	.-388    	; 0x790e <Endpoint_ConfigureEndpoint_Prv>
    7a92:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7a94:	f0 e0       	ldi	r31, 0x00	; 0
    7a96:	80 81       	ld	r24, Z
    7a98:	8e 7f       	andi	r24, 0xFE	; 254
    7a9a:	80 83       	st	Z, r24
    7a9c:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7a9e:	f0 e0       	ldi	r31, 0x00	; 0
    7aa0:	80 81       	ld	r24, Z
    7aa2:	81 60       	ori	r24, 0x01	; 1
    7aa4:	80 83       	st	Z, r24
    7aa6:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    7aa8:	88 60       	ori	r24, 0x08	; 8
    7aaa:	80 83       	st	Z, r24
    7aac:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    7aae:	80 81       	ld	r24, Z
    7ab0:	8e 7f       	andi	r24, 0xFE	; 254
    7ab2:	80 83       	st	Z, r24
    7ab4:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    7ab6:	80 61       	ori	r24, 0x10	; 16
    7ab8:	88 83       	st	Y, r24
    7aba:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    7abc:	cf 91       	pop	r28
    7abe:	1f 91       	pop	r17
    7ac0:	0f 91       	pop	r16
    7ac2:	08 95       	ret

00007ac4 <USB_Init>:
    7ac4:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    7ac6:	f0 e0       	ldi	r31, 0x00	; 0
    7ac8:	80 81       	ld	r24, Z
    7aca:	8f 7e       	andi	r24, 0xEF	; 239
    7acc:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    7ace:	e7 ed       	ldi	r30, 0xD7	; 215
    7ad0:	f0 e0       	ldi	r31, 0x00	; 0
    7ad2:	80 81       	ld	r24, Z
    7ad4:	81 60       	ori	r24, 0x01	; 1
    7ad6:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    7ad8:	84 e0       	ldi	r24, 0x04	; 4
    7ada:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    7adc:	81 e0       	ldi	r24, 0x01	; 1
    7ade:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <USB_IsInitialized>

	USB_ResetInterface();
    7ae2:	b5 cf       	rjmp	.-150    	; 0x7a4e <USB_ResetInterface>

00007ae4 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    7ae4:	e8 ed       	ldi	r30, 0xD8	; 216
    7ae6:	f0 e0       	ldi	r31, 0x00	; 0
    7ae8:	80 81       	ld	r24, Z
    7aea:	8e 7f       	andi	r24, 0xFE	; 254
    7aec:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    7aee:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7af2:	08 95       	ret

00007af4 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    7af4:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    7af8:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    7afc:	08 95       	ret

00007afe <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    7afe:	1f 92       	push	r1
    7b00:	0f 92       	push	r0
    7b02:	0f b6       	in	r0, 0x3f	; 63
    7b04:	0f 92       	push	r0
    7b06:	11 24       	eor	r1, r1
    7b08:	2f 93       	push	r18
    7b0a:	3f 93       	push	r19
    7b0c:	4f 93       	push	r20
    7b0e:	5f 93       	push	r21
    7b10:	6f 93       	push	r22
    7b12:	7f 93       	push	r23
    7b14:	8f 93       	push	r24
    7b16:	9f 93       	push	r25
    7b18:	af 93       	push	r26
    7b1a:	bf 93       	push	r27
    7b1c:	ef 93       	push	r30
    7b1e:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    7b20:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    7b24:	80 ff       	sbrs	r24, 0
    7b26:	1b c0       	rjmp	.+54     	; 0x7b5e <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    7b28:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    7b2c:	80 ff       	sbrs	r24, 0
    7b2e:	17 c0       	rjmp	.+46     	; 0x7b5e <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    7b30:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
    7b34:	8e 7f       	andi	r24, 0xFE	; 254
    7b36:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    7b3a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    7b3e:	80 ff       	sbrs	r24, 0
    7b40:	0b c0       	rjmp	.+22     	; 0x7b58 <__vector_10+0x5a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7b42:	80 e1       	ldi	r24, 0x10	; 16
    7b44:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7b46:	82 e1       	ldi	r24, 0x12	; 18
    7b48:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    7b4a:	09 b4       	in	r0, 0x29	; 41
    7b4c:	00 fe       	sbrs	r0, 0
    7b4e:	fd cf       	rjmp	.-6      	; 0x7b4a <__vector_10+0x4c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    7b50:	81 e0       	ldi	r24, 0x01	; 1
    7b52:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    7b54:	fc dc       	rcall	.-1544   	; 0x754e <EVENT_USB_Device_Connect>
    7b56:	03 c0       	rjmp	.+6      	; 0x7b5e <__vector_10+0x60>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7b58:	19 bc       	out	0x29, r1	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
			EVENT_USB_Device_Disconnect();
    7b5a:	1e ba       	out	0x1e, r1	; 30
    7b5c:	f9 dc       	rcall	.-1550   	; 0x7550 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    7b5e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    7b62:	80 ff       	sbrs	r24, 0
    7b64:	17 c0       	rjmp	.+46     	; 0x7b94 <__vector_10+0x96>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    7b66:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7b6a:	80 ff       	sbrs	r24, 0
    7b6c:	13 c0       	rjmp	.+38     	; 0x7b94 <__vector_10+0x96>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7b6e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7b72:	8e 7f       	andi	r24, 0xFE	; 254
    7b74:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7b78:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7b7c:	80 61       	ori	r24, 0x10	; 16
    7b7e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    7b82:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    7b86:	80 62       	ori	r24, 0x20	; 32
    7b88:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7b8c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    7b8e:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
    7b90:	8e bb       	out	0x1e, r24	; 30
    7b92:	79 d1       	rcall	.+754    	; 0x7e86 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    7b94:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7b98:	84 ff       	sbrs	r24, 4
    7b9a:	2e c0       	rjmp	.+92     	; 0x7bf8 <__vector_10+0xfa>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    7b9c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7ba0:	84 ff       	sbrs	r24, 4
    7ba2:	2a c0       	rjmp	.+84     	; 0x7bf8 <__vector_10+0xfa>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7ba4:	80 e1       	ldi	r24, 0x10	; 16
    7ba6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7ba8:	82 e1       	ldi	r24, 0x12	; 18
    7baa:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7bac:	09 b4       	in	r0, 0x29	; 41
    7bae:	00 fe       	sbrs	r0, 0
    7bb0:	fd cf       	rjmp	.-6      	; 0x7bac <__vector_10+0xae>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    7bb2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    7bb6:	8f 7d       	andi	r24, 0xDF	; 223
    7bb8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    7bbc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    7bc0:	8f 7e       	andi	r24, 0xEF	; 239
    7bc2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    7bc6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7bca:	8f 7e       	andi	r24, 0xEF	; 239
    7bcc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7bd0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7bd4:	81 60       	ori	r24, 0x01	; 1
    7bd6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    7bda:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <USB_Device_ConfigurationNumber>
    7bde:	88 23       	and	r24, r24
    7be0:	11 f0       	breq	.+4      	; 0x7be6 <__vector_10+0xe8>
		  USB_DeviceState = DEVICE_STATE_Configured;
    7be2:	84 e0       	ldi	r24, 0x04	; 4
    7be4:	07 c0       	rjmp	.+14     	; 0x7bf4 <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7be6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    7bea:	87 fd       	sbrc	r24, 7
    7bec:	02 c0       	rjmp	.+4      	; 0x7bf2 <__vector_10+0xf4>
    7bee:	81 e0       	ldi	r24, 0x01	; 1
    7bf0:	01 c0       	rjmp	.+2      	; 0x7bf4 <__vector_10+0xf6>
    7bf2:	83 e0       	ldi	r24, 0x03	; 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7bf4:	8e bb       	out	0x1e, r24	; 30
    7bf6:	47 d1       	rcall	.+654    	; 0x7e86 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7bf8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    7bfc:	83 ff       	sbrs	r24, 3
    7bfe:	21 c0       	rjmp	.+66     	; 0x7c42 <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    7c00:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7c04:	83 ff       	sbrs	r24, 3
    7c06:	1d c0       	rjmp	.+58     	; 0x7c42 <__vector_10+0x144>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    7c08:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    7c0c:	87 7f       	andi	r24, 0xF7	; 247
    7c0e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    7c12:	82 e0       	ldi	r24, 0x02	; 2
    7c14:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    7c16:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7c1a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    7c1e:	8e 7f       	andi	r24, 0xFE	; 254
    7c20:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7c24:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7c28:	8e 7f       	andi	r24, 0xFE	; 254
    7c2a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7c2e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7c32:	80 61       	ori	r24, 0x10	; 16
    7c34:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    7c38:	42 e0       	ldi	r20, 0x02	; 2
    7c3a:	60 e0       	ldi	r22, 0x00	; 0
    7c3c:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7c3e:	67 de       	rcall	.-818    	; 0x790e <Endpoint_ConfigureEndpoint_Prv>
    7c40:	22 d1       	rcall	.+580    	; 0x7e86 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7c42:	ff 91       	pop	r31
    7c44:	ef 91       	pop	r30
    7c46:	bf 91       	pop	r27
    7c48:	af 91       	pop	r26
    7c4a:	9f 91       	pop	r25
    7c4c:	8f 91       	pop	r24
    7c4e:	7f 91       	pop	r23
    7c50:	6f 91       	pop	r22
    7c52:	5f 91       	pop	r21
    7c54:	4f 91       	pop	r20
    7c56:	3f 91       	pop	r19
    7c58:	2f 91       	pop	r18
    7c5a:	0f 90       	pop	r0
    7c5c:	0f be       	out	0x3f, r0	; 63
    7c5e:	0f 90       	pop	r0
    7c60:	1f 90       	pop	r1
    7c62:	18 95       	reti

00007c64 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7c64:	1f 93       	push	r17
    7c66:	cf 93       	push	r28
    7c68:	df 93       	push	r29
    7c6a:	00 d0       	rcall	.+0      	; 0x7c6c <USB_Device_ProcessControlRequest+0x8>
    7c6c:	cd b7       	in	r28, 0x3d	; 61
    7c6e:	de b7       	in	r29, 0x3e	; 62
    7c70:	e8 ee       	ldi	r30, 0xE8	; 232
    7c72:	f1 e0       	ldi	r31, 0x01	; 1
    7c74:	80 ef       	ldi	r24, 0xF0	; 240
    7c76:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7c78:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    7c7c:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7c7e:	8e 17       	cp	r24, r30
    7c80:	9f 07       	cpc	r25, r31
    7c82:	d1 f7       	brne	.-12     	; 0x7c78 <USB_Device_ProcessControlRequest+0x14>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    7c84:	6c dc       	rcall	.-1832   	; 0x755e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c86:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	if (Endpoint_IsSETUPReceived())
    7c8a:	83 ff       	sbrs	r24, 3
    7c8c:	e8 c0       	rjmp	.+464    	; 0x7e5e <USB_Device_ProcessControlRequest+0x1fa>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7c8e:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    7c92:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <USB_ControlRequest+0x1>
    7c96:	95 30       	cpi	r25, 0x05	; 5
    7c98:	09 f4       	brne	.+2      	; 0x7c9c <USB_Device_ProcessControlRequest+0x38>
    7c9a:	6f c0       	rjmp	.+222    	; 0x7d7a <USB_Device_ProcessControlRequest+0x116>
    7c9c:	30 f4       	brcc	.+12     	; 0x7caa <USB_Device_ProcessControlRequest+0x46>
    7c9e:	91 30       	cpi	r25, 0x01	; 1
    7ca0:	71 f1       	breq	.+92     	; 0x7cfe <USB_Device_ProcessControlRequest+0x9a>
    7ca2:	68 f0       	brcs	.+26     	; 0x7cbe <USB_Device_ProcessControlRequest+0x5a>
    7ca4:	93 30       	cpi	r25, 0x03	; 3
    7ca6:	59 f1       	breq	.+86     	; 0x7cfe <USB_Device_ProcessControlRequest+0x9a>
    7ca8:	da c0       	rjmp	.+436    	; 0x7e5e <USB_Device_ProcessControlRequest+0x1fa>
    7caa:	98 30       	cpi	r25, 0x08	; 8
    7cac:	09 f4       	brne	.+2      	; 0x7cb0 <USB_Device_ProcessControlRequest+0x4c>
    7cae:	a8 c0       	rjmp	.+336    	; 0x7e00 <USB_Device_ProcessControlRequest+0x19c>
    7cb0:	99 30       	cpi	r25, 0x09	; 9
    7cb2:	09 f4       	brne	.+2      	; 0x7cb6 <USB_Device_ProcessControlRequest+0x52>
    7cb4:	b4 c0       	rjmp	.+360    	; 0x7e1e <USB_Device_ProcessControlRequest+0x1ba>
    7cb6:	96 30       	cpi	r25, 0x06	; 6
    7cb8:	09 f0       	breq	.+2      	; 0x7cbc <USB_Device_ProcessControlRequest+0x58>
    7cba:	d1 c0       	rjmp	.+418    	; 0x7e5e <USB_Device_ProcessControlRequest+0x1fa>
    7cbc:	7f c0       	rjmp	.+254    	; 0x7dbc <USB_Device_ProcessControlRequest+0x158>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7cbe:	80 38       	cpi	r24, 0x80	; 128
    7cc0:	99 f0       	breq	.+38     	; 0x7ce8 <USB_Device_ProcessControlRequest+0x84>
    7cc2:	82 38       	cpi	r24, 0x82	; 130
    7cc4:	09 f0       	breq	.+2      	; 0x7cc8 <USB_Device_ProcessControlRequest+0x64>
    7cc6:	cb c0       	rjmp	.+406    	; 0x7e5e <USB_Device_ProcessControlRequest+0x1fa>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7cc8:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <USB_ControlRequest+0x4>
    7ccc:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    7cce:	87 30       	cpi	r24, 0x07	; 7
    7cd0:	08 f0       	brcs	.+2      	; 0x7cd4 <USB_Device_ProcessControlRequest+0x70>
    7cd2:	c5 c0       	rjmp	.+394    	; 0x7e5e <USB_Device_ProcessControlRequest+0x1fa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7cd4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7cd8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    7cdc:	85 fb       	bst	r24, 5
    7cde:	88 27       	eor	r24, r24
    7ce0:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7ce2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    7ce6:	01 c0       	rjmp	.+2      	; 0x7cea <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    7ce8:	80 e0       	ldi	r24, 0x00	; 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7cea:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7cee:	97 7f       	andi	r25, 0xF7	; 247
    7cf0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7cf4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 8);
    7cf8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    7cfc:	8c c0       	rjmp	.+280    	; 0x7e16 <USB_Device_ProcessControlRequest+0x1b2>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7cfe:	28 2f       	mov	r18, r24
    7d00:	2d 7f       	andi	r18, 0xFD	; 253
    7d02:	09 f0       	breq	.+2      	; 0x7d06 <USB_Device_ProcessControlRequest+0xa2>
    7d04:	ac c0       	rjmp	.+344    	; 0x7e5e <USB_Device_ProcessControlRequest+0x1fa>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    7d06:	82 30       	cpi	r24, 0x02	; 2
    7d08:	09 f0       	breq	.+2      	; 0x7d0c <USB_Device_ProcessControlRequest+0xa8>
    7d0a:	a9 c0       	rjmp	.+338    	; 0x7e5e <USB_Device_ProcessControlRequest+0x1fa>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7d0c:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <USB_ControlRequest+0x2>
    7d10:	81 11       	cpse	r24, r1
    7d12:	2a c0       	rjmp	.+84     	; 0x7d68 <USB_Device_ProcessControlRequest+0x104>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7d14:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <USB_ControlRequest+0x4>
    7d18:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    7d1a:	2f ef       	ldi	r18, 0xFF	; 255
    7d1c:	28 0f       	add	r18, r24
    7d1e:	26 30       	cpi	r18, 0x06	; 6
    7d20:	08 f0       	brcs	.+2      	; 0x7d24 <USB_Device_ProcessControlRequest+0xc0>
    7d22:	9d c0       	rjmp	.+314    	; 0x7e5e <USB_Device_ProcessControlRequest+0x1fa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7d24:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7d28:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7d2c:	20 ff       	sbrs	r18, 0
    7d2e:	1c c0       	rjmp	.+56     	; 0x7d68 <USB_Device_ProcessControlRequest+0x104>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7d30:	93 30       	cpi	r25, 0x03	; 3
    7d32:	21 f4       	brne	.+8      	; 0x7d3c <USB_Device_ProcessControlRequest+0xd8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7d34:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    7d38:	80 62       	ori	r24, 0x20	; 32
    7d3a:	14 c0       	rjmp	.+40     	; 0x7d64 <USB_Device_ProcessControlRequest+0x100>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7d3c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    7d40:	90 61       	ori	r25, 0x10	; 16
    7d42:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    7d46:	21 e0       	ldi	r18, 0x01	; 1
    7d48:	30 e0       	ldi	r19, 0x00	; 0
    7d4a:	a9 01       	movw	r20, r18
    7d4c:	02 c0       	rjmp	.+4      	; 0x7d52 <USB_Device_ProcessControlRequest+0xee>
    7d4e:	44 0f       	add	r20, r20
    7d50:	55 1f       	adc	r21, r21
    7d52:	8a 95       	dec	r24
    7d54:	e2 f7       	brpl	.-8      	; 0x7d4e <USB_Device_ProcessControlRequest+0xea>
    7d56:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
				UERST = 0;
    7d5a:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7d5e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    7d62:	88 60       	ori	r24, 0x08	; 8
    7d64:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7d68:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d6c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7d70:	87 7f       	andi	r24, 0xF7	; 247
    7d72:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7d76:	1c de       	rcall	.-968    	; 0x79b0 <Endpoint_ClearStatusStage>
    7d78:	72 c0       	rjmp	.+228    	; 0x7e5e <USB_Device_ProcessControlRequest+0x1fa>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7d7a:	81 11       	cpse	r24, r1
    7d7c:	70 c0       	rjmp	.+224    	; 0x7e5e <USB_Device_ProcessControlRequest+0x1fa>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    7d7e:	10 91 ea 01 	lds	r17, 0x01EA	; 0x8001ea <USB_ControlRequest+0x2>
    7d82:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7d84:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    7d88:	80 78       	andi	r24, 0x80	; 128
    7d8a:	81 2b       	or	r24, r17
    7d8c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    7d90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7d94:	87 7f       	andi	r24, 0xF7	; 247
    7d96:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7d9a:	0a de       	rcall	.-1004   	; 0x79b0 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7d9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	while (!(Endpoint_IsINReady()));
    7da0:	80 ff       	sbrs	r24, 0
    7da2:	fc cf       	rjmp	.-8      	; 0x7d9c <USB_Device_ProcessControlRequest+0x138>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    7da4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    7da8:	80 68       	ori	r24, 0x80	; 128
    7daa:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7dae:	11 11       	cpse	r17, r1
    7db0:	02 c0       	rjmp	.+4      	; 0x7db6 <USB_Device_ProcessControlRequest+0x152>
    7db2:	82 e0       	ldi	r24, 0x02	; 2
    7db4:	01 c0       	rjmp	.+2      	; 0x7db8 <USB_Device_ProcessControlRequest+0x154>
    7db6:	83 e0       	ldi	r24, 0x03	; 3
    7db8:	8e bb       	out	0x1e, r24	; 30
    7dba:	51 c0       	rjmp	.+162    	; 0x7e5e <USB_Device_ProcessControlRequest+0x1fa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7dbc:	80 58       	subi	r24, 0x80	; 128
    7dbe:	82 30       	cpi	r24, 0x02	; 2
    7dc0:	08 f0       	brcs	.+2      	; 0x7dc4 <USB_Device_ProcessControlRequest+0x160>
    7dc2:	4d c0       	rjmp	.+154    	; 0x7e5e <USB_Device_ProcessControlRequest+0x1fa>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7dc4:	60 91 ec 01 	lds	r22, 0x01EC	; 0x8001ec <USB_ControlRequest+0x4>
    7dc8:	70 91 ed 01 	lds	r23, 0x01ED	; 0x8001ed <USB_ControlRequest+0x5>
    7dcc:	ae 01       	movw	r20, r28
    7dce:	4f 5f       	subi	r20, 0xFF	; 255
    7dd0:	5f 4f       	sbci	r21, 0xFF	; 255
    7dd2:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <USB_ControlRequest+0x2>
    7dd6:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <USB_ControlRequest+0x3>
    7dda:	c4 db       	rcall	.-2168   	; 0x7564 <CALLBACK_USB_GetDescriptor>
    7ddc:	bc 01       	movw	r22, r24
    7dde:	89 2b       	or	r24, r25
    7de0:	09 f4       	brne	.+2      	; 0x7de4 <USB_Device_ProcessControlRequest+0x180>
    7de2:	3d c0       	rjmp	.+122    	; 0x7e5e <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7de4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7de8:	97 7f       	andi	r25, 0xF7	; 247
    7dea:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7dee:	89 81       	ldd	r24, Y+1	; 0x01
    7df0:	9a 81       	ldd	r25, Y+2	; 0x02
    7df2:	31 dd       	rcall	.-1438   	; 0x7856 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7df4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7df8:	8b 77       	andi	r24, 0x7B	; 123
    7dfa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7dfe:	2f c0       	rjmp	.+94     	; 0x7e5e <USB_Device_ProcessControlRequest+0x1fa>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7e00:	80 38       	cpi	r24, 0x80	; 128
    7e02:	69 f5       	brne	.+90     	; 0x7e5e <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7e08:	87 7f       	andi	r24, 0xF7	; 247
    7e0a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7e0e:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7e12:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7e16:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7e1a:	8e 77       	andi	r24, 0x7E	; 126
    7e1c:	aa cf       	rjmp	.-172    	; 0x7d72 <USB_Device_ProcessControlRequest+0x10e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7e1e:	81 11       	cpse	r24, r1
    7e20:	1e c0       	rjmp	.+60     	; 0x7e5e <USB_Device_ProcessControlRequest+0x1fa>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7e22:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <USB_ControlRequest+0x2>
    7e26:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <USB_ControlRequest+0x3>
    7e2a:	99 27       	eor	r25, r25
    7e2c:	02 97       	sbiw	r24, 0x02	; 2
    7e2e:	bc f4       	brge	.+46     	; 0x7e5e <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e30:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7e34:	87 7f       	andi	r24, 0xF7	; 247
    7e36:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7e3a:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <USB_ControlRequest+0x2>
    7e3e:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    7e42:	b6 dd       	rcall	.-1172   	; 0x79b0 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    7e44:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <USB_Device_ConfigurationNumber>
    7e48:	81 11       	cpse	r24, r1
    7e4a:	06 c0       	rjmp	.+12     	; 0x7e58 <USB_Device_ProcessControlRequest+0x1f4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7e4c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7e50:	87 fd       	sbrc	r24, 7
    7e52:	02 c0       	rjmp	.+4      	; 0x7e58 <USB_Device_ProcessControlRequest+0x1f4>
    7e54:	81 e0       	ldi	r24, 0x01	; 1
    7e56:	01 c0       	rjmp	.+2      	; 0x7e5a <USB_Device_ProcessControlRequest+0x1f6>
    7e58:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
    7e5a:	8e bb       	out	0x1e, r24	; 30
    7e5c:	7a db       	rcall	.-2316   	; 0x7552 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7e62:	83 ff       	sbrs	r24, 3
    7e64:	0a c0       	rjmp	.+20     	; 0x7e7a <USB_Device_ProcessControlRequest+0x216>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7e6a:	87 7f       	andi	r24, 0xF7	; 247
    7e6c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7e70:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    7e74:	80 62       	ori	r24, 0x20	; 32
    7e76:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    7e7a:	0f 90       	pop	r0
    7e7c:	0f 90       	pop	r0
    7e7e:	df 91       	pop	r29
    7e80:	cf 91       	pop	r28
    7e82:	1f 91       	pop	r17
    7e84:	08 95       	ret

00007e86 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    7e86:	08 95       	ret

00007e88 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7e88:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    7e8a:	8e b3       	in	r24, 0x1e	; 30
    7e8c:	88 23       	and	r24, r24
    7e8e:	99 f0       	breq	.+38     	; 0x7eb6 <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    7e90:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    7e94:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    7e96:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    7e9a:	89 2f       	mov	r24, r25
    7e9c:	81 70       	andi	r24, 0x01	; 1
    7e9e:	90 fd       	sbrc	r25, 0
    7ea0:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    7ea2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7ea4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7ea8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    7eac:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    7eae:	da de       	rcall	.-588    	; 0x7c64 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7eb0:	cf 70       	andi	r28, 0x0F	; 15
    7eb2:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    7eb6:	cf 91       	pop	r28
    7eb8:	08 95       	ret

00007eba <_exit>:
    7eba:	f8 94       	cli

00007ebc <__stop_program>:
    7ebc:	ff cf       	rjmp	.-2      	; 0x7ebc <__stop_program>
