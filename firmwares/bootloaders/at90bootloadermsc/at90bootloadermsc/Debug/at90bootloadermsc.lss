
at90bootloadermsc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000180  00800100  0001f506  000015da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .apitable_jumptable 00000018  0001ffe0  0001ffe0  00001780  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_signatures 00000008  0001fff8  0001fff8  00001798  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_trampolines 00000026  0001ffa0  0001ffa0  0000175a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .text         00001506  0001e000  0001e000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          0000000b  00800280  00800280  000017a0  2**0
                  ALLOC
  6 .noinit       00000002  0080028b  0080028b  000017a0  2**0
                  ALLOC
  7 .comment      00000030  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY
  8 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017d0  2**2
                  CONTENTS, READONLY
  9 .debug_aranges 00000390  00000000  00000000  00001810  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00006eba  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000236b  00000000  00000000  00008a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a3e6  00000000  00000000  0000adc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000964  00000000  00000000  000151ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00017bae  00000000  00000000  00015b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00003b3b  00000000  00000000  0002d6be  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000478  00000000  00000000  00031200  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000805b  00000000  00000000  00031678  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .apitable_jumptable:

0001ffe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
   1ffe0:	df cf       	rjmp	.-66     	; 0x1ffa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
   1ffe2:	e0 cf       	rjmp	.-64     	; 0x1ffa4 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
   1ffe4:	e1 cf       	rjmp	.-62     	; 0x1ffa8 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
   1ffe6:	e2 cf       	rjmp	.-60     	; 0x1ffac <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
   1ffe8:	e3 cf       	rjmp	.-58     	; 0x1ffb0 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
   1ffea:	e4 cf       	rjmp	.-56     	; 0x1ffb4 <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
   1ffec:	e5 cf       	rjmp	.-54     	; 0x1ffb8 <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
   1ffee:	e6 cf       	rjmp	.-52     	; 0x1ffbc <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
   1fff0:	e6 cf       	rjmp	.-52     	; 0x1ffbe <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
   1fff2:	e6 cf       	rjmp	.-52     	; 0x1ffc0 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
   1fff4:	e6 cf       	rjmp	.-52     	; 0x1ffc2 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
   1fff6:	e6 cf       	rjmp	.-52     	; 0x1ffc4 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

0001fff8 <BootloaderAPI_Signatures>:
   1fff8:	00 e0       	ldi	r16, 0x00	; 0
   1fffa:	01 00       	.word	0x0001	; ????
   1fffc:	30 df       	rcall	.-416    	; 0x1fe5e <__data_load_end+0x7d8>
   1fffe:	fb dc       	rcall	.-1546   	; 0x1f9f6 <__data_load_end+0x370>

Disassembly of section .apitable_trampolines:

0001ffa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
   1ffa0:	0c 94 b4 f0 	jmp	0x1e168	; 0x1e168 <BootloaderAPI_ErasePage>

0001ffa4 <BootloaderAPI_WritePage_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
   1ffa4:	0c 94 c8 f0 	jmp	0x1e190	; 0x1e190 <BootloaderAPI_WritePage>

0001ffa8 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
   1ffa8:	0c 94 dc f0 	jmp	0x1e1b8	; 0x1e1b8 <BootloaderAPI_FillWord>

0001ffac <BootloaderAPI_ReadSignature_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
   1ffac:	0c 94 eb f0 	jmp	0x1e1d6	; 0x1e1d6 <BootloaderAPI_ReadSignature>

0001ffb0 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
   1ffb0:	0c 94 f1 f0 	jmp	0x1e1e2	; 0x1e1e2 <BootloaderAPI_ReadFuse>

0001ffb4 <BootloaderAPI_ReadLock_Trampoline>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
   1ffb4:	0c 94 f7 f0 	jmp	0x1e1ee	; 0x1e1ee <BootloaderAPI_ReadLock>

0001ffb8 <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_WriteLock_Trampoline:
		jmp BootloaderAPI_WriteLock
   1ffb8:	0c 94 fe f0 	jmp	0x1e1fc	; 0x1e1fc <BootloaderAPI_WriteLock>

0001ffbc <BootloaderAPI_UNUSED1>:
	BootloaderAPI_UNUSED1:
		ret
   1ffbc:	08 95       	ret

0001ffbe <BootloaderAPI_UNUSED2>:
	BootloaderAPI_UNUSED2:
		ret
   1ffbe:	08 95       	ret

0001ffc0 <BootloaderAPI_UNUSED3>:
	BootloaderAPI_UNUSED3:
		ret
   1ffc0:	08 95       	ret

0001ffc2 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_UNUSED4:
		ret
   1ffc2:	08 95       	ret

0001ffc4 <BootloaderAPI_UNUSED5>:
	BootloaderAPI_UNUSED5:
		ret
   1ffc4:	08 95       	ret

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	4b c0       	rjmp	.+150    	; 0x1e098 <__ctors_end>
   1e002:	00 00       	nop
   1e004:	b0 c0       	rjmp	.+352    	; 0x1e166 <__bad_interrupt>
   1e006:	00 00       	nop
   1e008:	ae c0       	rjmp	.+348    	; 0x1e166 <__bad_interrupt>
   1e00a:	00 00       	nop
   1e00c:	ac c0       	rjmp	.+344    	; 0x1e166 <__bad_interrupt>
   1e00e:	00 00       	nop
   1e010:	aa c0       	rjmp	.+340    	; 0x1e166 <__bad_interrupt>
   1e012:	00 00       	nop
   1e014:	a8 c0       	rjmp	.+336    	; 0x1e166 <__bad_interrupt>
   1e016:	00 00       	nop
   1e018:	a6 c0       	rjmp	.+332    	; 0x1e166 <__bad_interrupt>
   1e01a:	00 00       	nop
   1e01c:	a4 c0       	rjmp	.+328    	; 0x1e166 <__bad_interrupt>
   1e01e:	00 00       	nop
   1e020:	a2 c0       	rjmp	.+324    	; 0x1e166 <__bad_interrupt>
   1e022:	00 00       	nop
   1e024:	a0 c0       	rjmp	.+320    	; 0x1e166 <__bad_interrupt>
   1e026:	00 00       	nop
   1e028:	0c 94 37 f8 	jmp	0x1f06e	; 0x1f06e <__vector_10>
   1e02c:	0c 94 f3 f8 	jmp	0x1f1e6	; 0x1f1e6 <__vector_11>
   1e030:	9a c0       	rjmp	.+308    	; 0x1e166 <__bad_interrupt>
   1e032:	00 00       	nop
   1e034:	98 c0       	rjmp	.+304    	; 0x1e166 <__bad_interrupt>
   1e036:	00 00       	nop
   1e038:	96 c0       	rjmp	.+300    	; 0x1e166 <__bad_interrupt>
   1e03a:	00 00       	nop
   1e03c:	94 c0       	rjmp	.+296    	; 0x1e166 <__bad_interrupt>
   1e03e:	00 00       	nop
   1e040:	92 c0       	rjmp	.+292    	; 0x1e166 <__bad_interrupt>
   1e042:	00 00       	nop
   1e044:	90 c0       	rjmp	.+288    	; 0x1e166 <__bad_interrupt>
   1e046:	00 00       	nop
   1e048:	8e c0       	rjmp	.+284    	; 0x1e166 <__bad_interrupt>
   1e04a:	00 00       	nop
   1e04c:	8c c0       	rjmp	.+280    	; 0x1e166 <__bad_interrupt>
   1e04e:	00 00       	nop
   1e050:	2d c1       	rjmp	.+602    	; 0x1e2ac <__vector_20>
   1e052:	00 00       	nop
   1e054:	88 c0       	rjmp	.+272    	; 0x1e166 <__bad_interrupt>
   1e056:	00 00       	nop
   1e058:	86 c0       	rjmp	.+268    	; 0x1e166 <__bad_interrupt>
   1e05a:	00 00       	nop
   1e05c:	84 c0       	rjmp	.+264    	; 0x1e166 <__bad_interrupt>
   1e05e:	00 00       	nop
   1e060:	82 c0       	rjmp	.+260    	; 0x1e166 <__bad_interrupt>
   1e062:	00 00       	nop
   1e064:	80 c0       	rjmp	.+256    	; 0x1e166 <__bad_interrupt>
   1e066:	00 00       	nop
   1e068:	7e c0       	rjmp	.+252    	; 0x1e166 <__bad_interrupt>
   1e06a:	00 00       	nop
   1e06c:	7c c0       	rjmp	.+248    	; 0x1e166 <__bad_interrupt>
   1e06e:	00 00       	nop
   1e070:	7a c0       	rjmp	.+244    	; 0x1e166 <__bad_interrupt>
   1e072:	00 00       	nop
   1e074:	78 c0       	rjmp	.+240    	; 0x1e166 <__bad_interrupt>
   1e076:	00 00       	nop
   1e078:	76 c0       	rjmp	.+236    	; 0x1e166 <__bad_interrupt>
   1e07a:	00 00       	nop
   1e07c:	74 c0       	rjmp	.+232    	; 0x1e166 <__bad_interrupt>
   1e07e:	00 00       	nop
   1e080:	72 c0       	rjmp	.+228    	; 0x1e166 <__bad_interrupt>
   1e082:	00 00       	nop
   1e084:	70 c0       	rjmp	.+224    	; 0x1e166 <__bad_interrupt>
   1e086:	00 00       	nop
   1e088:	6e c0       	rjmp	.+220    	; 0x1e166 <__bad_interrupt>
   1e08a:	00 00       	nop
   1e08c:	6c c0       	rjmp	.+216    	; 0x1e166 <__bad_interrupt>
   1e08e:	00 00       	nop
   1e090:	6a c0       	rjmp	.+212    	; 0x1e166 <__bad_interrupt>
   1e092:	00 00       	nop
   1e094:	68 c0       	rjmp	.+208    	; 0x1e166 <__bad_interrupt>
	...

0001e098 <__ctors_end>:
   1e098:	11 24       	eor	r1, r1
   1e09a:	1f be       	out	0x3f, r1	; 63
   1e09c:	cf ef       	ldi	r28, 0xFF	; 255
   1e09e:	d0 e2       	ldi	r29, 0x20	; 32
   1e0a0:	de bf       	out	0x3e, r29	; 62
   1e0a2:	cd bf       	out	0x3d, r28	; 61

0001e0a4 <Application_Jump_Check>:

		/* Re-enable JTAG debugging */
		JTAG_ENABLE();
	#else
		/* Check if the device's BOOTRST fuse is set */
		if (boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS) & FUSE_BOOTRST)
   1e0a4:	e3 e0       	ldi	r30, 0x03	; 3
   1e0a6:	f0 e0       	ldi	r31, 0x00	; 0
   1e0a8:	89 e0       	ldi	r24, 0x09	; 9
   1e0aa:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e0ae:	84 91       	lpm	r24, Z
   1e0b0:	8e 7f       	andi	r24, 0xFE	; 254
   1e0b2:	91 f0       	breq	.+36     	; 0x1e0d8 <Application_Jump_Check+0x34>
		{
			/* If the reset source was not an external reset or the key is correct, clear it and jump to the application */
			if (!(MCUSR & (1 << EXTRF)) || (MagicBootKey == MAGIC_BOOT_KEY))
   1e0b4:	04 b6       	in	r0, 0x34	; 52
   1e0b6:	01 fe       	sbrs	r0, 1
   1e0b8:	0a c0       	rjmp	.+20     	; 0x1e0ce <Application_Jump_Check+0x2a>
   1e0ba:	81 e0       	ldi	r24, 0x01	; 1
   1e0bc:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <__bss_end>
   1e0c0:	30 91 8c 02 	lds	r19, 0x028C	; 0x80028c <__bss_end+0x1>
   1e0c4:	22 34       	cpi	r18, 0x42	; 66
   1e0c6:	3c 4d       	sbci	r19, 0xDC	; 220
   1e0c8:	19 f0       	breq	.+6      	; 0x1e0d0 <Application_Jump_Check+0x2c>
   1e0ca:	80 e0       	ldi	r24, 0x00	; 0
   1e0cc:	01 c0       	rjmp	.+2      	; 0x1e0d0 <Application_Jump_Check+0x2c>
			  JumpToApplication = true;
   1e0ce:	81 e0       	ldi	r24, 0x01	; 1

			/* Clear reset source */
			MCUSR &= ~(1 << EXTRF);
   1e0d0:	94 b7       	in	r25, 0x34	; 52
   1e0d2:	9d 7f       	andi	r25, 0xFD	; 253
   1e0d4:	94 bf       	out	0x34, r25	; 52
   1e0d6:	11 c0       	rjmp	.+34     	; 0x1e0fa <Application_Jump_Check+0x56>
		}
		else
		{
			/* If the reset source was the bootloader and the key is correct, clear it and jump to the application;
			 * this can happen in the HWBE fuse is set, and the HBE pin is low during the watchdog reset */
			if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
   1e0d8:	04 b6       	in	r0, 0x34	; 52
   1e0da:	03 fe       	sbrs	r0, 3
   1e0dc:	0a c0       	rjmp	.+20     	; 0x1e0f2 <Application_Jump_Check+0x4e>
   1e0de:	81 e0       	ldi	r24, 0x01	; 1
   1e0e0:	20 91 8b 02 	lds	r18, 0x028B	; 0x80028b <__bss_end>
   1e0e4:	30 91 8c 02 	lds	r19, 0x028C	; 0x80028c <__bss_end+0x1>
   1e0e8:	22 34       	cpi	r18, 0x42	; 66
   1e0ea:	3c 4d       	sbci	r19, 0xDC	; 220
   1e0ec:	19 f0       	breq	.+6      	; 0x1e0f4 <Application_Jump_Check+0x50>
   1e0ee:	80 e0       	ldi	r24, 0x00	; 0
   1e0f0:	01 c0       	rjmp	.+2      	; 0x1e0f4 <Application_Jump_Check+0x50>
 *  start key has been loaded into \ref MagicBootKey. If the bootloader started via the watchdog and the key is valid,
 *  this will force the user application to start via a software jump.
 */
void Application_Jump_Check(void)
{
	bool JumpToApplication = false;
   1e0f2:	80 e0       	ldi	r24, 0x00	; 0
			 * this can happen in the HWBE fuse is set, and the HBE pin is low during the watchdog reset */
			if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
				JumpToApplication = true;

			/* Clear reset source */
			MCUSR &= ~(1 << WDRF);
   1e0f4:	94 b7       	in	r25, 0x34	; 52
   1e0f6:	97 7f       	andi	r25, 0xF7	; 247
   1e0f8:	94 bf       	out	0x34, r25	; 52
		}
	#endif

	/* Don't run the user application if the reset vector is blank (no app loaded) */
	bool ApplicationValid = (pgm_read_word_near(0) != 0xFFFF);
   1e0fa:	20 e0       	ldi	r18, 0x00	; 0
   1e0fc:	30 e0       	ldi	r19, 0x00	; 0
   1e0fe:	f9 01       	movw	r30, r18
   1e100:	45 91       	lpm	r20, Z+
   1e102:	54 91       	lpm	r21, Z

	/* If a request has been made to jump to the user application, honor it */
	if (JumpToApplication && ApplicationValid)
   1e104:	88 23       	and	r24, r24
   1e106:	b9 f0       	breq	.+46     	; 0x1e136 <__do_copy_data>
   1e108:	4f 3f       	cpi	r20, 0xFF	; 255
   1e10a:	5f 4f       	sbci	r21, 0xFF	; 255
   1e10c:	a1 f0       	breq	.+40     	; 0x1e136 <__do_copy_data>
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1 << WDRF);
   1e10e:	84 b7       	in	r24, 0x34	; 52
   1e110:	87 7f       	andi	r24, 0xF7	; 247
   1e112:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
   1e114:	0f b6       	in	r0, 0x3f	; 63
   1e116:	f8 94       	cli
   1e118:	a8 95       	wdr
   1e11a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e11e:	88 61       	ori	r24, 0x18	; 24
   1e120:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e124:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e128:	0f be       	out	0x3f, r0	; 63
		wdt_disable();

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
   1e12a:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <__bss_end+0x1>
   1e12e:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <__bss_end>

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
   1e132:	f9 01       	movw	r30, r18
   1e134:	09 95       	icall

0001e136 <__do_copy_data>:
   1e136:	12 e0       	ldi	r17, 0x02	; 2
   1e138:	a0 e0       	ldi	r26, 0x00	; 0
   1e13a:	b1 e0       	ldi	r27, 0x01	; 1
   1e13c:	e6 e0       	ldi	r30, 0x06	; 6
   1e13e:	f5 ef       	ldi	r31, 0xF5	; 245
   1e140:	01 e0       	ldi	r16, 0x01	; 1
   1e142:	0b bf       	out	0x3b, r16	; 59
   1e144:	02 c0       	rjmp	.+4      	; 0x1e14a <__do_copy_data+0x14>
   1e146:	07 90       	elpm	r0, Z+
   1e148:	0d 92       	st	X+, r0
   1e14a:	a0 38       	cpi	r26, 0x80	; 128
   1e14c:	b1 07       	cpc	r27, r17
   1e14e:	d9 f7       	brne	.-10     	; 0x1e146 <__do_copy_data+0x10>

0001e150 <__do_clear_bss>:
   1e150:	22 e0       	ldi	r18, 0x02	; 2
   1e152:	a0 e8       	ldi	r26, 0x80	; 128
   1e154:	b2 e0       	ldi	r27, 0x02	; 2
   1e156:	01 c0       	rjmp	.+2      	; 0x1e15a <.do_clear_bss_start>

0001e158 <.do_clear_bss_loop>:
   1e158:	1d 92       	st	X+, r1

0001e15a <.do_clear_bss_start>:
   1e15a:	ab 38       	cpi	r26, 0x8B	; 139
   1e15c:	b2 07       	cpc	r27, r18
   1e15e:	e1 f7       	brne	.-8      	; 0x1e158 <.do_clear_bss_loop>
   1e160:	5b d0       	rcall	.+182    	; 0x1e218 <main>
   1e162:	0c 94 81 fa 	jmp	0x1f502	; 0x1f502 <_exit>

0001e166 <__bad_interrupt>:
   1e166:	4c cf       	rjmp	.-360    	; 0x1e000 <__vectors>

0001e168 <BootloaderAPI_ErasePage>:

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	boot_page_erase_safe(Address);
   1e168:	07 b6       	in	r0, 0x37	; 55
   1e16a:	00 fc       	sbrc	r0, 0
   1e16c:	fd cf       	rjmp	.-6      	; 0x1e168 <BootloaderAPI_ErasePage>
   1e16e:	f9 99       	sbic	0x1f, 1	; 31
   1e170:	fe cf       	rjmp	.-4      	; 0x1e16e <BootloaderAPI_ErasePage+0x6>
   1e172:	23 e0       	ldi	r18, 0x03	; 3
   1e174:	fb 01       	movw	r30, r22
   1e176:	80 93 5b 00 	sts	0x005B, r24	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e17a:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e17e:	e8 95       	spm
	boot_spm_busy_wait();
   1e180:	07 b6       	in	r0, 0x37	; 55
   1e182:	00 fc       	sbrc	r0, 0
   1e184:	fd cf       	rjmp	.-6      	; 0x1e180 <BootloaderAPI_ErasePage+0x18>
	boot_rww_enable();
   1e186:	81 e1       	ldi	r24, 0x11	; 17
   1e188:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e18c:	e8 95       	spm
   1e18e:	08 95       	ret

0001e190 <BootloaderAPI_WritePage>:
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	boot_page_write_safe(Address);
   1e190:	07 b6       	in	r0, 0x37	; 55
   1e192:	00 fc       	sbrc	r0, 0
   1e194:	fd cf       	rjmp	.-6      	; 0x1e190 <BootloaderAPI_WritePage>
   1e196:	f9 99       	sbic	0x1f, 1	; 31
   1e198:	fe cf       	rjmp	.-4      	; 0x1e196 <BootloaderAPI_WritePage+0x6>
   1e19a:	25 e0       	ldi	r18, 0x05	; 5
   1e19c:	fb 01       	movw	r30, r22
   1e19e:	80 93 5b 00 	sts	0x005B, r24	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e1a2:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e1a6:	e8 95       	spm
	boot_spm_busy_wait();
   1e1a8:	07 b6       	in	r0, 0x37	; 55
   1e1aa:	00 fc       	sbrc	r0, 0
   1e1ac:	fd cf       	rjmp	.-6      	; 0x1e1a8 <BootloaderAPI_WritePage+0x18>
	boot_rww_enable();
   1e1ae:	81 e1       	ldi	r24, 0x11	; 17
   1e1b0:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e1b4:	e8 95       	spm
   1e1b6:	08 95       	ret

0001e1b8 <BootloaderAPI_FillWord>:
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
   1e1b8:	07 b6       	in	r0, 0x37	; 55
   1e1ba:	00 fc       	sbrc	r0, 0
   1e1bc:	fd cf       	rjmp	.-6      	; 0x1e1b8 <BootloaderAPI_FillWord>
   1e1be:	f9 99       	sbic	0x1f, 1	; 31
   1e1c0:	fe cf       	rjmp	.-4      	; 0x1e1be <BootloaderAPI_FillWord+0x6>
   1e1c2:	21 e0       	ldi	r18, 0x01	; 1
   1e1c4:	0a 01       	movw	r0, r20
   1e1c6:	fb 01       	movw	r30, r22
   1e1c8:	80 93 5b 00 	sts	0x005B, r24	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e1cc:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e1d0:	e8 95       	spm
   1e1d2:	11 24       	eor	r1, r1
   1e1d4:	08 95       	ret

0001e1d6 <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
   1e1d6:	21 e2       	ldi	r18, 0x21	; 33
   1e1d8:	fc 01       	movw	r30, r24
   1e1da:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e1de:	84 91       	lpm	r24, Z
}
   1e1e0:	08 95       	ret

0001e1e2 <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
   1e1e2:	29 e0       	ldi	r18, 0x09	; 9
   1e1e4:	fc 01       	movw	r30, r24
   1e1e6:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e1ea:	84 91       	lpm	r24, Z
}
   1e1ec:	08 95       	ret

0001e1ee <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
   1e1ee:	e1 e0       	ldi	r30, 0x01	; 1
   1e1f0:	f0 e0       	ldi	r31, 0x00	; 0
   1e1f2:	89 e0       	ldi	r24, 0x09	; 9
   1e1f4:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e1f8:	84 91       	lpm	r24, Z
}
   1e1fa:	08 95       	ret

0001e1fc <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
   1e1fc:	07 b6       	in	r0, 0x37	; 55
   1e1fe:	00 fc       	sbrc	r0, 0
   1e200:	fd cf       	rjmp	.-6      	; 0x1e1fc <BootloaderAPI_WriteLock>
   1e202:	f9 99       	sbic	0x1f, 1	; 31
   1e204:	fe cf       	rjmp	.-4      	; 0x1e202 <BootloaderAPI_WriteLock+0x6>
   1e206:	80 95       	com	r24
   1e208:	99 e0       	ldi	r25, 0x09	; 9
   1e20a:	e1 e0       	ldi	r30, 0x01	; 1
   1e20c:	f0 e0       	ldi	r31, 0x00	; 0
   1e20e:	08 2e       	mov	r0, r24
   1e210:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e214:	e8 95       	spm
   1e216:	08 95       	ret

0001e218 <main>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1e218:	84 b7       	in	r24, 0x34	; 52
   1e21a:	87 7f       	andi	r24, 0xF7	; 247
   1e21c:	84 bf       	out	0x34, r24	; 52
   1e21e:	0f b6       	in	r0, 0x3f	; 63
   1e220:	f8 94       	cli
   1e222:	a8 95       	wdr
   1e224:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e228:	88 61       	ori	r24, 0x18	; 24
   1e22a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e22e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e232:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
   1e234:	90 e0       	ldi	r25, 0x00	; 0
   1e236:	80 e8       	ldi	r24, 0x80	; 128
   1e238:	0f b6       	in	r0, 0x3f	; 63
   1e23a:	f8 94       	cli
   1e23c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
   1e240:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
   1e244:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1e246:	c1 e0       	ldi	r28, 0x01	; 1
   1e248:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1 << IVSEL);
   1e24a:	82 e0       	ldi	r24, 0x02	; 2
   1e24c:	85 bf       	out	0x35, r24	; 53

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
   1e24e:	f4 d6       	rcall	.+3560   	; 0x1f038 <USB_Init>

	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
   1e250:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCCR1B = ((1 << CS11) | (1 << CS10));
   1e254:	83 e0       	ldi	r24, 0x03	; 3
   1e256:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
   1e25a:	78 94       	sei
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();

	while (RunBootloader || TicksSinceLastCommand++ < 0xFF)
   1e25c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1e260:	88 23       	and	r24, r24
   1e262:	31 f0       	breq	.+12     	; 0x1e270 <main+0x58>
	{
		MS_Device_USBTask(&Disk_MS_Interface);
   1e264:	81 e0       	ldi	r24, 0x01	; 1
   1e266:	91 e0       	ldi	r25, 0x01	; 1
   1e268:	c7 d3       	rcall	.+1934   	; 0x1e9f8 <MS_Device_USBTask>
		USB_USBTask();
   1e26a:	0e 94 4e fa 	call	0x1f49c	; 0x1f49c <USB_USBTask>
   1e26e:	f6 cf       	rjmp	.-20     	; 0x1e25c <main+0x44>
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();

	while (RunBootloader || TicksSinceLastCommand++ < 0xFF)
   1e270:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <__data_end>
   1e274:	91 e0       	ldi	r25, 0x01	; 1
   1e276:	98 0f       	add	r25, r24
   1e278:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <__data_end>
   1e27c:	8f 3f       	cpi	r24, 0xFF	; 255
   1e27e:	91 f7       	brne	.-28     	; 0x1e264 <main+0x4c>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1e280:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
   1e284:	81 60       	ori	r24, 0x01	; 1
   1e286:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Unlock the forced application start mode of the bootloader if it is restarted */
	MagicBootKey = MAGIC_BOOT_KEY;
   1e28a:	82 e4       	ldi	r24, 0x42	; 66
   1e28c:	9c ed       	ldi	r25, 0xDC	; 220
   1e28e:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <__bss_end+0x1>
   1e292:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <__bss_end>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
   1e296:	9c e0       	ldi	r25, 0x0C	; 12
   1e298:	88 e1       	ldi	r24, 0x18	; 24
   1e29a:	0f b6       	in	r0, 0x3f	; 63
   1e29c:	f8 94       	cli
   1e29e:	a8 95       	wdr
   1e2a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e2a4:	0f be       	out	0x3f, r0	; 63
   1e2a6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e2aa:	ff cf       	rjmp	.-2      	; 0x1e2aa <main+0x92>

0001e2ac <__vector_20>:
	TCCR1B = ((1 << CS11) | (1 << CS10));
}

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
   1e2ac:	1f 92       	push	r1
   1e2ae:	0f 92       	push	r0
   1e2b0:	0f b6       	in	r0, 0x3f	; 63
   1e2b2:	0f 92       	push	r0
   1e2b4:	11 24       	eor	r1, r1
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);
}
   1e2b6:	0f 90       	pop	r0
   1e2b8:	0f be       	out	0x3f, r0	; 63
   1e2ba:	0f 90       	pop	r0
   1e2bc:	1f 90       	pop	r1
   1e2be:	18 95       	reti

0001e2c0 <EVENT_USB_Device_Connect>:
   1e2c0:	08 95       	ret

0001e2c2 <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs and stops the Mass Storage management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
   1e2c2:	08 95       	ret

0001e2c4 <EVENT_USB_Device_ConfigurationChanged>:
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	/* Setup Mass Storage Data Endpoints */
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
   1e2c4:	81 e0       	ldi	r24, 0x01	; 1
   1e2c6:	91 e0       	ldi	r25, 0x01	; 1
   1e2c8:	7a c3       	rjmp	.+1780   	; 0x1e9be <MS_Device_ConfigureEndpoints>

0001e2ca <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
   1e2ca:	81 e0       	ldi	r24, 0x01	; 1
   1e2cc:	91 e0       	ldi	r25, 0x01	; 1
   1e2ce:	36 c3       	rjmp	.+1644   	; 0x1e93c <MS_Device_ProcessControlRequest>

0001e2d0 <CALLBACK_MS_Device_SCSICommandReceived>:
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
   1e2d0:	6e d0       	rcall	.+220    	; 0x1e3ae <SCSI_DecodeSCSICommand>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	/* Signal that a command was processed, must not exit bootloader yet */
	TicksSinceLastCommand = 0;
   1e2d2:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <__data_end>

	return CommandSuccess;
}
   1e2d6:	08 95       	ret

0001e2d8 <CALLBACK_USB_GetDescriptor>:

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    /* If/Else If chain compiles slightly smaller than a switch case */
    if (DescriptorType == DTYPE_Device)
   1e2d8:	91 30       	cpi	r25, 0x01	; 1
   1e2da:	39 f0       	breq	.+14     	; 0x1e2ea <CALLBACK_USB_GetDescriptor+0x12>
    {
        Address = &DeviceDescriptor;
        Size    = sizeof(USB_Descriptor_Device_t);
    }
    else if (DescriptorType == DTYPE_Configuration)
   1e2dc:	92 30       	cpi	r25, 0x02	; 2
   1e2de:	51 f4       	brne	.+20     	; 0x1e2f4 <CALLBACK_USB_GetDescriptor+0x1c>
    {
        Address = &ConfigurationDescriptor;
        Size    = sizeof(USB_Descriptor_Configuration_t);
   1e2e0:	80 e2       	ldi	r24, 0x20	; 32
   1e2e2:	90 e0       	ldi	r25, 0x00	; 0
        Address = &DeviceDescriptor;
        Size    = sizeof(USB_Descriptor_Device_t);
    }
    else if (DescriptorType == DTYPE_Configuration)
    {
        Address = &ConfigurationDescriptor;
   1e2e4:	2c ee       	ldi	r18, 0xEC	; 236
   1e2e6:	31 e0       	ldi	r19, 0x01	; 1
   1e2e8:	09 c0       	rjmp	.+18     	; 0x1e2fc <CALLBACK_USB_GetDescriptor+0x24>

    /* If/Else If chain compiles slightly smaller than a switch case */
    if (DescriptorType == DTYPE_Device)
    {
        Address = &DeviceDescriptor;
        Size    = sizeof(USB_Descriptor_Device_t);
   1e2ea:	82 e1       	ldi	r24, 0x12	; 18
   1e2ec:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    /* If/Else If chain compiles slightly smaller than a switch case */
    if (DescriptorType == DTYPE_Device)
    {
        Address = &DeviceDescriptor;
   1e2ee:	2c e0       	ldi	r18, 0x0C	; 12
   1e2f0:	32 e0       	ldi	r19, 0x02	; 2
   1e2f2:	04 c0       	rjmp	.+8      	; 0x1e2fc <CALLBACK_USB_GetDescriptor+0x24>
                                    const void** const DescriptorAddress)
{
    const uint8_t DescriptorType = (wValue >> 8);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
   1e2f4:	80 e0       	ldi	r24, 0x00	; 0
   1e2f6:	90 e0       	ldi	r25, 0x00	; 0
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t DescriptorType = (wValue >> 8);

    const void* Address = NULL;
   1e2f8:	20 e0       	ldi	r18, 0x00	; 0
   1e2fa:	30 e0       	ldi	r19, 0x00	; 0
    {
        Address = &ConfigurationDescriptor;
        Size    = sizeof(USB_Descriptor_Configuration_t);
    }

    *DescriptorAddress = Address;
   1e2fc:	fa 01       	movw	r30, r20
   1e2fe:	31 83       	std	Z+1, r19	; 0x01
   1e300:	20 83       	st	Z, r18
    return Size;
}
   1e302:	08 95       	ret

0001e304 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
   1e304:	bf 92       	push	r11
   1e306:	cf 92       	push	r12
   1e308:	df 92       	push	r13
   1e30a:	ef 92       	push	r14
   1e30c:	ff 92       	push	r15
   1e30e:	0f 93       	push	r16
   1e310:	1f 93       	push	r17
   1e312:	cf 93       	push	r28
   1e314:	df 93       	push	r29
   1e316:	ec 01       	movw	r28, r24
	uint16_t BlockAddress;
	uint16_t TotalBlocks;

	/* Load in the 32-bit block address (SCSI uses big-endian, so have to reverse the byte order) */
	BlockAddress = SwapEndian_32(*(uint32_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[2]);
   1e318:	e8 a0       	ldd	r14, Y+32	; 0x20
   1e31a:	ff 8c       	ldd	r15, Y+31	; 0x1f

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
   1e31c:	0b a1       	ldd	r16, Y+35	; 0x23
   1e31e:	1a a1       	ldd	r17, Y+34	; 0x22

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
   1e320:	28 e1       	ldi	r18, 0x18	; 24
   1e322:	e2 16       	cp	r14, r18
   1e324:	21 e0       	ldi	r18, 0x01	; 1
   1e326:	f2 06       	cpc	r15, r18
   1e328:	68 f0       	brcs	.+26     	; 0x1e344 <SCSI_Command_ReadWrite_10+0x40>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
   1e32a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <SenseData+0x2>
   1e32e:	80 7f       	andi	r24, 0xF0	; 240
   1e330:	85 60       	ori	r24, 0x05	; 5
   1e332:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <SenseData+0x2>
   1e336:	81 e2       	ldi	r24, 0x21	; 33
   1e338:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <SenseData+0xc>
   1e33c:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <SenseData+0xd>
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
   1e340:	80 e0       	ldi	r24, 0x00	; 0
   1e342:	2b c0       	rjmp	.+86     	; 0x1e39a <SCSI_Command_ReadWrite_10+0x96>
   1e344:	b6 2e       	mov	r11, r22
   1e346:	67 01       	movw	r12, r14
	}

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	for (uint16_t i = 0; i < TotalBlocks; i++)
   1e348:	c6 01       	movw	r24, r12
   1e34a:	8e 19       	sub	r24, r14
   1e34c:	9f 09       	sbc	r25, r15
   1e34e:	80 17       	cp	r24, r16
   1e350:	91 07       	cpc	r25, r17
   1e352:	50 f4       	brcc	.+20     	; 0x1e368 <SCSI_Command_ReadWrite_10+0x64>
	{
		if (IsDataRead == DATA_READ)
		  VirtualFAT_ReadBlock(BlockAddress + i);
   1e354:	c6 01       	movw	r24, r12
	}

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	for (uint16_t i = 0; i < TotalBlocks; i++)
	{
		if (IsDataRead == DATA_READ)
   1e356:	bb 20       	and	r11, r11
   1e358:	11 f0       	breq	.+4      	; 0x1e35e <SCSI_Command_ReadWrite_10+0x5a>
		  VirtualFAT_ReadBlock(BlockAddress + i);
   1e35a:	18 d2       	rcall	.+1072   	; 0x1e78c <VirtualFAT_ReadBlock>
   1e35c:	01 c0       	rjmp	.+2      	; 0x1e360 <SCSI_Command_ReadWrite_10+0x5c>
		else
		  VirtualFAT_WriteBlock(BlockAddress + i);
   1e35e:	4c d1       	rcall	.+664    	; 0x1e5f8 <VirtualFAT_WriteBlock>
   1e360:	3f ef       	ldi	r19, 0xFF	; 255
   1e362:	c3 1a       	sub	r12, r19
   1e364:	d3 0a       	sbc	r13, r19
   1e366:	f0 cf       	rjmp	.-32     	; 0x1e348 <SCSI_Command_ReadWrite_10+0x44>
   1e368:	c8 01       	movw	r24, r16
	}

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * SECTOR_SIZE_BYTES);
   1e36a:	a0 e0       	ldi	r26, 0x00	; 0
   1e36c:	b0 e0       	ldi	r27, 0x00	; 0
   1e36e:	29 e0       	ldi	r18, 0x09	; 9
   1e370:	88 0f       	add	r24, r24
   1e372:	99 1f       	adc	r25, r25
   1e374:	aa 1f       	adc	r26, r26
   1e376:	bb 1f       	adc	r27, r27
   1e378:	2a 95       	dec	r18
   1e37a:	d1 f7       	brne	.-12     	; 0x1e370 <SCSI_Command_ReadWrite_10+0x6c>
   1e37c:	4c 89       	ldd	r20, Y+20	; 0x14
   1e37e:	5d 89       	ldd	r21, Y+21	; 0x15
   1e380:	6e 89       	ldd	r22, Y+22	; 0x16
   1e382:	7f 89       	ldd	r23, Y+23	; 0x17
   1e384:	8a 01       	movw	r16, r20
   1e386:	9b 01       	movw	r18, r22
   1e388:	08 1b       	sub	r16, r24
   1e38a:	19 0b       	sbc	r17, r25
   1e38c:	2a 0b       	sbc	r18, r26
   1e38e:	3b 0b       	sbc	r19, r27
   1e390:	0c 8b       	std	Y+20, r16	; 0x14
   1e392:	1d 8b       	std	Y+21, r17	; 0x15
   1e394:	2e 8b       	std	Y+22, r18	; 0x16
   1e396:	3f 8b       	std	Y+23, r19	; 0x17
   1e398:	81 e0       	ldi	r24, 0x01	; 1

	return true;
   1e39a:	df 91       	pop	r29
}
   1e39c:	cf 91       	pop	r28
   1e39e:	1f 91       	pop	r17
   1e3a0:	0f 91       	pop	r16
   1e3a2:	ff 90       	pop	r15
   1e3a4:	ef 90       	pop	r14
   1e3a6:	df 90       	pop	r13
   1e3a8:	cf 90       	pop	r12
   1e3aa:	bf 90       	pop	r11
   1e3ac:	08 95       	ret

0001e3ae <SCSI_DecodeSCSICommand>:
   1e3ae:	ef 92       	push	r14
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
   1e3b0:	ff 92       	push	r15
   1e3b2:	0f 93       	push	r16
   1e3b4:	1f 93       	push	r17
   1e3b6:	cf 93       	push	r28
   1e3b8:	df 93       	push	r29
   1e3ba:	ec 01       	movw	r28, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
   1e3bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1e3be:	8f 31       	cpi	r24, 0x1F	; 31
   1e3c0:	a0 f4       	brcc	.+40     	; 0x1e3ea <SCSI_DecodeSCSICommand+0x3c>
   1e3c2:	8d 31       	cpi	r24, 0x1D	; 29
   1e3c4:	08 f0       	brcs	.+2      	; 0x1e3c8 <SCSI_DecodeSCSICommand+0x1a>
   1e3c6:	bb c0       	rjmp	.+374    	; 0x1e53e <SCSI_DecodeSCSICommand+0x190>
   1e3c8:	82 31       	cpi	r24, 0x12	; 18
   1e3ca:	e9 f1       	breq	.+122    	; 0x1e446 <SCSI_DecodeSCSICommand+0x98>
   1e3cc:	38 f4       	brcc	.+14     	; 0x1e3dc <SCSI_DecodeSCSICommand+0x2e>
   1e3ce:	88 23       	and	r24, r24
   1e3d0:	09 f4       	brne	.+2      	; 0x1e3d4 <SCSI_DecodeSCSICommand+0x26>
   1e3d2:	b5 c0       	rjmp	.+362    	; 0x1e53e <SCSI_DecodeSCSICommand+0x190>
   1e3d4:	83 30       	cpi	r24, 0x03	; 3
   1e3d6:	09 f4       	brne	.+2      	; 0x1e3da <SCSI_DecodeSCSICommand+0x2c>
   1e3d8:	67 c0       	rjmp	.+206    	; 0x1e4a8 <SCSI_DecodeSCSICommand+0xfa>
   1e3da:	b6 c0       	rjmp	.+364    	; 0x1e548 <SCSI_DecodeSCSICommand+0x19a>
   1e3dc:	8a 31       	cpi	r24, 0x1A	; 26
   1e3de:	09 f4       	brne	.+2      	; 0x1e3e2 <SCSI_DecodeSCSICommand+0x34>
   1e3e0:	8d c0       	rjmp	.+282    	; 0x1e4fc <SCSI_DecodeSCSICommand+0x14e>
   1e3e2:	8b 31       	cpi	r24, 0x1B	; 27
   1e3e4:	09 f4       	brne	.+2      	; 0x1e3e8 <SCSI_DecodeSCSICommand+0x3a>
   1e3e6:	a3 c0       	rjmp	.+326    	; 0x1e52e <SCSI_DecodeSCSICommand+0x180>
   1e3e8:	af c0       	rjmp	.+350    	; 0x1e548 <SCSI_DecodeSCSICommand+0x19a>
   1e3ea:	88 32       	cpi	r24, 0x28	; 40
   1e3ec:	09 f4       	brne	.+2      	; 0x1e3f0 <SCSI_DecodeSCSICommand+0x42>
   1e3ee:	80 c0       	rjmp	.+256    	; 0x1e4f0 <SCSI_DecodeSCSICommand+0x142>
   1e3f0:	18 f5       	brcc	.+70     	; 0x1e438 <SCSI_DecodeSCSICommand+0x8a>
   1e3f2:	85 32       	cpi	r24, 0x25	; 37
   1e3f4:	09 f0       	breq	.+2      	; 0x1e3f8 <SCSI_DecodeSCSICommand+0x4a>
   1e3f6:	a8 c0       	rjmp	.+336    	; 0x1e548 <SCSI_DecodeSCSICommand+0x19a>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
   1e3f8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
   1e3fc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
   1e400:	81 e0       	ldi	r24, 0x01	; 1
   1e402:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data &  0xFF);
   1e406:	87 e1       	ldi	r24, 0x17	; 23
   1e408:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
   1e40c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
   1e410:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
   1e414:	82 e0       	ldi	r24, 0x02	; 2
   1e416:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data &  0xFF);
   1e41a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e41e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e422:	8e 77       	andi	r24, 0x7E	; 126
   1e424:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_32_BE(LUN_MEDIA_BLOCKS - 1);
	Endpoint_Write_32_BE(SECTOR_SIZE_BYTES);
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
   1e428:	8c 89       	ldd	r24, Y+20	; 0x14
   1e42a:	9d 89       	ldd	r25, Y+21	; 0x15
   1e42c:	ae 89       	ldd	r26, Y+22	; 0x16
   1e42e:	bf 89       	ldd	r27, Y+23	; 0x17
   1e430:	08 97       	sbiw	r24, 0x08	; 8
   1e432:	a1 09       	sbc	r26, r1
   1e434:	b1 09       	sbc	r27, r1
   1e436:	76 c0       	rjmp	.+236    	; 0x1e524 <SCSI_DecodeSCSICommand+0x176>
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
   1e438:	8a 32       	cpi	r24, 0x2A	; 42
   1e43a:	09 f4       	brne	.+2      	; 0x1e43e <SCSI_DecodeSCSICommand+0x90>
   1e43c:	57 c0       	rjmp	.+174    	; 0x1e4ec <SCSI_DecodeSCSICommand+0x13e>
   1e43e:	8f 32       	cpi	r24, 0x2F	; 47
   1e440:	09 f4       	brne	.+2      	; 0x1e444 <SCSI_DecodeSCSICommand+0x96>
   1e442:	7d c0       	rjmp	.+250    	; 0x1e53e <SCSI_DecodeSCSICommand+0x190>
   1e444:	81 c0       	rjmp	.+258    	; 0x1e548 <SCSI_DecodeSCSICommand+0x19a>
   1e446:	0f 8d       	ldd	r16, Y+31	; 0x1f
   1e448:	1e 8d       	ldd	r17, Y+30	; 0x1e
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
   1e44a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1e44c:	83 70       	andi	r24, 0x03	; 3
   1e44e:	19 f4       	brne	.+6      	; 0x1e456 <SCSI_DecodeSCSICommand+0xa8>
   1e450:	8d 8d       	ldd	r24, Y+29	; 0x1d
   1e452:	88 23       	and	r24, r24
   1e454:	41 f0       	breq	.+16     	; 0x1e466 <SCSI_DecodeSCSICommand+0xb8>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
   1e456:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <SenseData+0x2>
   1e45a:	80 7f       	andi	r24, 0xF0	; 240
   1e45c:	85 60       	ori	r24, 0x05	; 5
   1e45e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <SenseData+0x2>
   1e462:	84 e2       	ldi	r24, 0x24	; 36
   1e464:	78 c0       	rjmp	.+240    	; 0x1e556 <SCSI_DecodeSCSICommand+0x1a8>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
   1e466:	78 01       	movw	r14, r16
   1e468:	05 32       	cpi	r16, 0x25	; 37
   1e46a:	11 05       	cpc	r17, r1
   1e46c:	18 f0       	brcs	.+6      	; 0x1e474 <SCSI_DecodeSCSICommand+0xc6>
   1e46e:	84 e2       	ldi	r24, 0x24	; 36
   1e470:	e8 2e       	mov	r14, r24
   1e472:	f1 2c       	mov	r15, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
   1e474:	40 e0       	ldi	r20, 0x00	; 0
   1e476:	50 e0       	ldi	r21, 0x00	; 0
   1e478:	b7 01       	movw	r22, r14
   1e47a:	8e e1       	ldi	r24, 0x1E	; 30
   1e47c:	92 e0       	ldi	r25, 0x02	; 2
   1e47e:	10 d4       	rcall	.+2080   	; 0x1eca0 <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
   1e480:	60 e0       	ldi	r22, 0x00	; 0
   1e482:	70 e0       	ldi	r23, 0x00	; 0
   1e484:	c8 01       	movw	r24, r16
   1e486:	8e 19       	sub	r24, r14
   1e488:	9f 09       	sbc	r25, r15
   1e48a:	cb d3       	rcall	.+1942   	; 0x1ec22 <Endpoint_Null_Stream>
   1e48c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e490:	8e 77       	andi	r24, 0x7E	; 126
   1e492:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
   1e496:	8c 89       	ldd	r24, Y+20	; 0x14
   1e498:	9d 89       	ldd	r25, Y+21	; 0x15
   1e49a:	ae 89       	ldd	r26, Y+22	; 0x16
   1e49c:	bf 89       	ldd	r27, Y+23	; 0x17
   1e49e:	8e 19       	sub	r24, r14
   1e4a0:	9f 09       	sbc	r25, r15
   1e4a2:	a1 09       	sbc	r26, r1
   1e4a4:	b1 09       	sbc	r27, r1
   1e4a6:	3e c0       	rjmp	.+124    	; 0x1e524 <SCSI_DecodeSCSICommand+0x176>
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
   1e4a8:	1f 8d       	ldd	r17, Y+31	; 0x1f
	uint8_t BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
   1e4aa:	01 2f       	mov	r16, r17
   1e4ac:	13 31       	cpi	r17, 0x13	; 19
   1e4ae:	08 f0       	brcs	.+2      	; 0x1e4b2 <SCSI_DecodeSCSICommand+0x104>
   1e4b0:	02 e1       	ldi	r16, 0x12	; 18

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
   1e4b2:	e0 2e       	mov	r14, r16
   1e4b4:	f1 2c       	mov	r15, r1
   1e4b6:	40 e0       	ldi	r20, 0x00	; 0
   1e4b8:	50 e0       	ldi	r21, 0x00	; 0
   1e4ba:	b7 01       	movw	r22, r14
   1e4bc:	8a e3       	ldi	r24, 0x3A	; 58
   1e4be:	91 e0       	ldi	r25, 0x01	; 1
   1e4c0:	ef d3       	rcall	.+2014   	; 0x1eca0 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
   1e4c2:	81 2f       	mov	r24, r17
   1e4c4:	90 e0       	ldi	r25, 0x00	; 0
   1e4c6:	60 e0       	ldi	r22, 0x00	; 0
   1e4c8:	70 e0       	ldi	r23, 0x00	; 0
   1e4ca:	8e 19       	sub	r24, r14
   1e4cc:	9f 09       	sbc	r25, r15
   1e4ce:	a9 d3       	rcall	.+1874   	; 0x1ec22 <Endpoint_Null_Stream>
   1e4d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e4d4:	8e 77       	andi	r24, 0x7E	; 126
   1e4d6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
   1e4da:	8c 89       	ldd	r24, Y+20	; 0x14
   1e4dc:	9d 89       	ldd	r25, Y+21	; 0x15
   1e4de:	ae 89       	ldd	r26, Y+22	; 0x16
   1e4e0:	bf 89       	ldd	r27, Y+23	; 0x17
   1e4e2:	80 1b       	sub	r24, r16
   1e4e4:	91 09       	sbc	r25, r1
   1e4e6:	a1 09       	sbc	r26, r1
   1e4e8:	b1 09       	sbc	r27, r1
   1e4ea:	1c c0       	rjmp	.+56     	; 0x1e524 <SCSI_DecodeSCSICommand+0x176>
			break;
		case SCSI_CMD_READ_CAPACITY_10:
			CommandSuccess = SCSI_Command_Read_Capacity_10(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
   1e4ec:	60 e0       	ldi	r22, 0x00	; 0
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
   1e4ee:	01 c0       	rjmp	.+2      	; 0x1e4f2 <SCSI_DecodeSCSICommand+0x144>
   1e4f0:	61 e0       	ldi	r22, 0x01	; 1
   1e4f2:	ce 01       	movw	r24, r28
   1e4f4:	07 df       	rcall	.-498    	; 0x1e304 <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
   1e4f6:	88 23       	and	r24, r24
   1e4f8:	91 f1       	breq	.+100    	; 0x1e55e <SCSI_DecodeSCSICommand+0x1b0>
   1e4fa:	33 c0       	rjmp	.+102    	; 0x1e562 <SCSI_DecodeSCSICommand+0x1b4>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
   1e4fc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
   1e500:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
   1e504:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
   1e508:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e50c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e510:	8e 77       	andi	r24, 0x7E	; 126
   1e512:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	/* Send an empty header response indicating Write Protect flag is off */
	Endpoint_Write_32_LE(0);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
   1e516:	8c 89       	ldd	r24, Y+20	; 0x14
   1e518:	9d 89       	ldd	r25, Y+21	; 0x15
   1e51a:	ae 89       	ldd	r26, Y+22	; 0x16
   1e51c:	bf 89       	ldd	r27, Y+23	; 0x17
   1e51e:	04 97       	sbiw	r24, 0x04	; 4
   1e520:	a1 09       	sbc	r26, r1
   1e522:	b1 09       	sbc	r27, r1
   1e524:	8c 8b       	std	Y+20, r24	; 0x14
   1e526:	9d 8b       	std	Y+21, r25	; 0x15
   1e528:	ae 8b       	std	Y+22, r26	; 0x16
   1e52a:	bf 8b       	std	Y+23, r27	; 0x17
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
   1e52c:	1a c0       	rjmp	.+52     	; 0x1e562 <SCSI_DecodeSCSICommand+0x1b4>
		case SCSI_CMD_START_STOP_UNIT:
#if !defined(NO_APP_START_ON_EJECT)
			/* If the user ejected the volume, signal bootloader exit at next opportunity. */
			RunBootloader = ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[4] & 0x03) != 0x02);
   1e52e:	8f 8d       	ldd	r24, Y+31	; 0x1f
   1e530:	83 70       	andi	r24, 0x03	; 3
   1e532:	91 e0       	ldi	r25, 0x01	; 1
   1e534:	82 30       	cpi	r24, 0x02	; 2
   1e536:	09 f4       	brne	.+2      	; 0x1e53a <SCSI_DecodeSCSICommand+0x18c>
   1e538:	90 e0       	ldi	r25, 0x00	; 0
   1e53a:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
   1e53e:	1c 8a       	std	Y+20, r1	; 0x14
   1e540:	1d 8a       	std	Y+21, r1	; 0x15
   1e542:	1e 8a       	std	Y+22, r1	; 0x16
   1e544:	1f 8a       	std	Y+23, r1	; 0x17
			break;
   1e546:	0d c0       	rjmp	.+26     	; 0x1e562 <SCSI_DecodeSCSICommand+0x1b4>
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
   1e548:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <SenseData+0x2>
   1e54c:	80 7f       	andi	r24, 0xF0	; 240
   1e54e:	85 60       	ori	r24, 0x05	; 5
   1e550:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <SenseData+0x2>
   1e554:	80 e2       	ldi	r24, 0x20	; 32
   1e556:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <SenseData+0xc>
   1e55a:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <SenseData+0xd>
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
	}

	return false;
   1e55e:	80 e0       	ldi	r24, 0x00	; 0
   1e560:	0a c0       	rjmp	.+20     	; 0x1e576 <SCSI_DecodeSCSICommand+0x1c8>
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
   1e562:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <SenseData+0x2>
   1e566:	80 7f       	andi	r24, 0xF0	; 240
   1e568:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <SenseData+0x2>
   1e56c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <SenseData+0xc>
   1e570:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <SenseData+0xd>
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
   1e574:	81 e0       	ldi	r24, 0x01	; 1
	}

	return false;
}
   1e576:	df 91       	pop	r29
   1e578:	cf 91       	pop	r28
   1e57a:	1f 91       	pop	r17
   1e57c:	0f 91       	pop	r16
   1e57e:	ff 90       	pop	r15
   1e580:	ef 90       	pop	r14
   1e582:	08 95       	ret

0001e584 <ReadEEPROMByte>:
 *
 *  \return Read byte of EEPROM data.
 */
static uint8_t ReadEEPROMByte(const uint8_t* const Address)
{
	return eeprom_read_byte(Address);
   1e584:	a4 c7       	rjmp	.+3912   	; 0x1f4ce <eeprom_read_byte>

0001e586 <WriteEEPROMByte>:
 *  \param[in]  Data      New data to write to the EEPROM location
 */
static void WriteEEPROMByte(uint8_t* const Address,
                            const uint8_t Data)
{
	 eeprom_update_byte(Address, Data);
   1e586:	ab c7       	rjmp	.+3926   	; 0x1f4de <eeprom_update_byte>

0001e588 <UpdateFAT12ClusterChain>:
 *  \param[in]   ChainLength  Length of the chain to write, in clusters
 */
static void UpdateFAT12ClusterChain(uint8_t* const FATTable,
                                    const uint16_t Index,
                                    const uint8_t ChainLength)
{
   1e588:	0f 93       	push	r16
   1e58a:	1f 93       	push	r17
   1e58c:	cf 93       	push	r28
   1e58e:	df 93       	push	r29
	for (uint8_t i = 0; i < ChainLength; i++)
   1e590:	8b 01       	movw	r16, r22
   1e592:	60 e0       	ldi	r22, 0x00	; 0
   1e594:	70 e0       	ldi	r23, 0x00	; 0
	{
		uint16_t CurrentCluster = Index + i;
		uint16_t NextCluster    = CurrentCluster + 1;

		/* Mark last cluster as end of file */
		if (i == (ChainLength - 1))
   1e596:	a4 2f       	mov	r26, r20
   1e598:	b0 e0       	ldi	r27, 0x00	; 0
   1e59a:	11 97       	sbiw	r26, 0x01	; 1
 */
static void UpdateFAT12ClusterChain(uint8_t* const FATTable,
                                    const uint16_t Index,
                                    const uint8_t ChainLength)
{
	for (uint8_t i = 0; i < ChainLength; i++)
   1e59c:	64 17       	cp	r22, r20
   1e59e:	38 f5       	brcc	.+78     	; 0x1e5ee <UpdateFAT12ClusterChain+0x66>
   1e5a0:	e8 01       	movw	r28, r16
   1e5a2:	21 96       	adiw	r28, 0x01	; 1
	{
		uint16_t CurrentCluster = Index + i;
		uint16_t NextCluster    = CurrentCluster + 1;

		/* Mark last cluster as end of file */
		if (i == (ChainLength - 1))
   1e5a4:	a6 17       	cp	r26, r22
   1e5a6:	b7 07       	cpc	r27, r23
   1e5a8:	11 f0       	breq	.+4      	; 0x1e5ae <UpdateFAT12ClusterChain+0x26>
                                    const uint8_t ChainLength)
{
	for (uint8_t i = 0; i < ChainLength; i++)
	{
		uint16_t CurrentCluster = Index + i;
		uint16_t NextCluster    = CurrentCluster + 1;
   1e5aa:	9e 01       	movw	r18, r28
   1e5ac:	02 c0       	rjmp	.+4      	; 0x1e5b2 <UpdateFAT12ClusterChain+0x2a>

		/* Mark last cluster as end of file */
		if (i == (ChainLength - 1))
		  NextCluster = 0xFFF;
   1e5ae:	2f ef       	ldi	r18, 0xFF	; 255
   1e5b0:	3f e0       	ldi	r19, 0x0F	; 15
static void UpdateFAT12ClusterEntry(uint8_t* const FATTable,
                                    const uint16_t Index,
                                    const uint16_t ChainEntry)
{
	/* Calculate the starting offset of the cluster entry in the FAT12 table */
	uint8_t FATOffset   = (Index + (Index >> 1));
   1e5b2:	f8 01       	movw	r30, r16
   1e5b4:	f6 95       	lsr	r31
   1e5b6:	e7 95       	ror	r30
   1e5b8:	e0 0f       	add	r30, r16
   1e5ba:	f0 e0       	ldi	r31, 0x00	; 0

	/* Check if the start of the entry is at an upper nibble of the byte, fill
	 * out FAT12 entry as required */
	if (UpperNibble)
	{
		FATTable[FATOffset]     = (FATTable[FATOffset] & 0x0F) | ((ChainEntry & 0x0F) << 4);
   1e5bc:	e8 0f       	add	r30, r24
   1e5be:	f9 1f       	adc	r31, r25
	uint8_t FATOffset   = (Index + (Index >> 1));
	bool    UpperNibble = ((Index & 1) != 0);

	/* Check if the start of the entry is at an upper nibble of the byte, fill
	 * out FAT12 entry as required */
	if (UpperNibble)
   1e5c0:	00 ff       	sbrs	r16, 0
   1e5c2:	0d c0       	rjmp	.+26     	; 0x1e5de <UpdateFAT12ClusterChain+0x56>
	{
		FATTable[FATOffset]     = (FATTable[FATOffset] & 0x0F) | ((ChainEntry & 0x0F) << 4);
   1e5c4:	50 81       	ld	r21, Z
   1e5c6:	5f 70       	andi	r21, 0x0F	; 15
   1e5c8:	12 2f       	mov	r17, r18
   1e5ca:	12 95       	swap	r17
   1e5cc:	10 7f       	andi	r17, 0xF0	; 240
   1e5ce:	51 2b       	or	r21, r17
   1e5d0:	50 83       	st	Z, r21
		FATTable[FATOffset + 1] = (ChainEntry >> 4);
   1e5d2:	54 e0       	ldi	r21, 0x04	; 4
   1e5d4:	36 95       	lsr	r19
   1e5d6:	27 95       	ror	r18
   1e5d8:	5a 95       	dec	r21
   1e5da:	e1 f7       	brne	.-8      	; 0x1e5d4 <UpdateFAT12ClusterChain+0x4c>
   1e5dc:	03 c0       	rjmp	.+6      	; 0x1e5e4 <UpdateFAT12ClusterChain+0x5c>
	}
	else
	{
		FATTable[FATOffset]     = ChainEntry;
   1e5de:	20 83       	st	Z, r18
		FATTable[FATOffset + 1] = (FATTable[FATOffset] & 0xF0) | (ChainEntry >> 8);
   1e5e0:	20 7f       	andi	r18, 0xF0	; 240
   1e5e2:	23 2b       	or	r18, r19
   1e5e4:	21 83       	std	Z+1, r18	; 0x01
   1e5e6:	6f 5f       	subi	r22, 0xFF	; 255
   1e5e8:	7f 4f       	sbci	r23, 0xFF	; 255
   1e5ea:	8e 01       	movw	r16, r28
   1e5ec:	d7 cf       	rjmp	.-82     	; 0x1e59c <UpdateFAT12ClusterChain+0x14>
		if (i == (ChainLength - 1))
		  NextCluster = 0xFFF;

		UpdateFAT12ClusterEntry(FATTable, CurrentCluster, NextCluster);
	}
}
   1e5ee:	df 91       	pop	r29
   1e5f0:	cf 91       	pop	r28
   1e5f2:	1f 91       	pop	r17
   1e5f4:	0f 91       	pop	r16
   1e5f6:	08 95       	ret

0001e5f8 <VirtualFAT_WriteBlock>:
 *  Storage interface.
 *
 *  \param[in]  BlockNumber  Index of the block to write.
 */
void VirtualFAT_WriteBlock(const uint16_t BlockNumber)
{
   1e5f8:	4f 92       	push	r4
   1e5fa:	5f 92       	push	r5
   1e5fc:	6f 92       	push	r6
   1e5fe:	7f 92       	push	r7
   1e600:	8f 92       	push	r8
   1e602:	9f 92       	push	r9
   1e604:	af 92       	push	r10
   1e606:	bf 92       	push	r11
   1e608:	cf 92       	push	r12
   1e60a:	df 92       	push	r13
   1e60c:	ef 92       	push	r14
   1e60e:	ff 92       	push	r15
   1e610:	0f 93       	push	r16
   1e612:	1f 93       	push	r17
   1e614:	cf 93       	push	r28
   1e616:	df 93       	push	r29
   1e618:	cd b7       	in	r28, 0x3d	; 61
   1e61a:	de b7       	in	r29, 0x3e	; 62
   1e61c:	d2 50       	subi	r29, 0x02	; 2
   1e61e:	0f b6       	in	r0, 0x3f	; 63
   1e620:	f8 94       	cli
   1e622:	de bf       	out	0x3e, r29	; 62
   1e624:	0f be       	out	0x3f, r0	; 63
   1e626:	cd bf       	out	0x3d, r28	; 61
   1e628:	8c 01       	movw	r16, r24
	uint8_t BlockBuffer[SECTOR_SIZE_BYTES];

	/* Buffer the entire block to be written from the host */
	Endpoint_Read_Stream_LE(BlockBuffer, sizeof(BlockBuffer), NULL);
   1e62a:	40 e0       	ldi	r20, 0x00	; 0
   1e62c:	50 e0       	ldi	r21, 0x00	; 0
   1e62e:	60 e0       	ldi	r22, 0x00	; 0
   1e630:	72 e0       	ldi	r23, 0x02	; 2
   1e632:	ce 01       	movw	r24, r28
   1e634:	01 96       	adiw	r24, 0x01	; 1
   1e636:	7d d3       	rcall	.+1786   	; 0x1ed32 <Endpoint_Read_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e638:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e63c:	8b 77       	andi	r24, 0x7B	; 123
   1e63e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearOUT();

	switch (BlockNumber)
   1e642:	03 30       	cpi	r16, 0x03	; 3
   1e644:	11 05       	cpc	r17, r1
   1e646:	08 f4       	brcc	.+2      	; 0x1e64a <VirtualFAT_WriteBlock+0x52>
   1e648:	8a c0       	rjmp	.+276    	; 0x1e75e <VirtualFAT_WriteBlock+0x166>
   1e64a:	03 30       	cpi	r16, 0x03	; 3
   1e64c:	11 05       	cpc	r17, r1
   1e64e:	51 f4       	brne	.+20     	; 0x1e664 <VirtualFAT_WriteBlock+0x6c>

			break;

		case DISK_BLOCK_RootFilesBlock:
			/* Copy over the updated directory entries */
			memcpy(FirmwareFileEntries, BlockBuffer, sizeof(FirmwareFileEntries));
   1e650:	80 ea       	ldi	r24, 0xA0	; 160
   1e652:	fe 01       	movw	r30, r28
   1e654:	31 96       	adiw	r30, 0x01	; 1
   1e656:	ac e4       	ldi	r26, 0x4C	; 76
   1e658:	b1 e0       	ldi	r27, 0x01	; 1
   1e65a:	01 90       	ld	r0, Z+
   1e65c:	0d 92       	st	X+, r0
   1e65e:	8a 95       	dec	r24
   1e660:	e1 f7       	brne	.-8      	; 0x1e65a <VirtualFAT_WriteBlock+0x62>

			break;
   1e662:	7d c0       	rjmp	.+250    	; 0x1e75e <VirtualFAT_WriteBlock+0x166>
 */
static void ReadWriteFLASHFileBlock(const uint16_t BlockNumber,
                                    uint8_t* BlockBuffer,
                                    const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*FLASHFileStartCluster - 2) * SECTOR_PER_CLUSTER;
   1e664:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <FirmwareFileEntries+0x5a>
   1e668:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <FirmwareFileEntries+0x5b>
   1e66c:	81 50       	subi	r24, 0x01	; 1
   1e66e:	90 4c       	sbci	r25, 0xC0	; 192
   1e670:	88 0f       	add	r24, r24
   1e672:	99 1f       	adc	r25, r25
   1e674:	88 0f       	add	r24, r24
   1e676:	99 1f       	adc	r25, r25
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(FLASH_FILE_SIZE_BYTES) - 1);

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
   1e678:	08 17       	cp	r16, r24
   1e67a:	19 07       	cpc	r17, r25
   1e67c:	78 f4       	brcc	.+30     	; 0x1e69c <VirtualFAT_WriteBlock+0xa4>
 */
static void ReadWriteEEPROMFileBlock(const uint16_t BlockNumber,
                                     uint8_t* BlockBuffer,
                                     const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*EEPROMFileStartCluster - 2) * SECTOR_PER_CLUSTER;
   1e67e:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <FirmwareFileEntries+0x9a>
   1e682:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <FirmwareFileEntries+0x9b>
   1e686:	81 50       	subi	r24, 0x01	; 1
   1e688:	90 4c       	sbci	r25, 0xC0	; 192
   1e68a:	88 0f       	add	r24, r24
   1e68c:	99 1f       	adc	r25, r25
   1e68e:	88 0f       	add	r24, r24
   1e690:	99 1f       	adc	r25, r25
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(EEPROM_FILE_SIZE_BYTES) - 1);

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
   1e692:	08 17       	cp	r16, r24
   1e694:	19 07       	cpc	r17, r25
   1e696:	08 f0       	brcs	.+2      	; 0x1e69a <VirtualFAT_WriteBlock+0xa2>
   1e698:	44 c0       	rjmp	.+136    	; 0x1e722 <VirtualFAT_WriteBlock+0x12a>
   1e69a:	61 c0       	rjmp	.+194    	; 0x1e75e <VirtualFAT_WriteBlock+0x166>
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*FLASHFileStartCluster - 2) * SECTOR_PER_CLUSTER;
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(FLASH_FILE_SIZE_BYTES) - 1);

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
   1e69c:	9c 01       	movw	r18, r24
   1e69e:	21 51       	subi	r18, 0x11	; 17
   1e6a0:	3f 4f       	sbci	r19, 0xFF	; 255
   1e6a2:	20 17       	cp	r18, r16
   1e6a4:	31 07       	cpc	r19, r17
   1e6a6:	58 f3       	brcs	.-42     	; 0x1e67e <VirtualFAT_WriteBlock+0x86>
	  return;

	#if (FLASHEND > 0xFFFF)
	uint32_t FlashAddress = (uint32_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;
   1e6a8:	28 01       	movw	r4, r16
   1e6aa:	48 1a       	sub	r4, r24
   1e6ac:	59 0a       	sbc	r5, r25
   1e6ae:	61 2c       	mov	r6, r1
   1e6b0:	71 2c       	mov	r7, r1
   1e6b2:	29 e0       	ldi	r18, 0x09	; 9
   1e6b4:	44 0c       	add	r4, r4
   1e6b6:	55 1c       	adc	r5, r5
   1e6b8:	66 1c       	adc	r6, r6
   1e6ba:	77 1c       	adc	r7, r7
   1e6bc:	2a 95       	dec	r18
   1e6be:	d1 f7       	brne	.-12     	; 0x1e6b4 <VirtualFAT_WriteBlock+0xbc>
   1e6c0:	ce 01       	movw	r24, r28
   1e6c2:	01 96       	adiw	r24, 0x01	; 1
   1e6c4:	7c 01       	movw	r14, r24
   1e6c6:	6e 01       	movw	r12, r28
   1e6c8:	9f ef       	ldi	r25, 0xFF	; 255
   1e6ca:	c9 1a       	sub	r12, r25
   1e6cc:	9d ef       	ldi	r25, 0xFD	; 253
   1e6ce:	d9 0a       	sbc	r13, r25
	else
	{
		/* Write out the mapped block of data to the device's FLASH */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i += 2)
		{
			if ((FlashAddress % SPM_PAGESIZE) == 0)
   1e6d0:	41 10       	cpse	r4, r1
   1e6d2:	03 c0       	rjmp	.+6      	; 0x1e6da <VirtualFAT_WriteBlock+0xe2>
			{
				/* Erase the given FLASH page, ready to be programmed */
				BootloaderAPI_ErasePage(FlashAddress);
   1e6d4:	c3 01       	movw	r24, r6
   1e6d6:	b2 01       	movw	r22, r4
   1e6d8:	47 dd       	rcall	.-1394   	; 0x1e168 <BootloaderAPI_ErasePage>
			}

			/* Write the next data word to the FLASH page */
			BootloaderAPI_FillWord(FlashAddress, (BlockBuffer[i + 1] << 8) | BlockBuffer[i]);
   1e6da:	f7 01       	movw	r30, r14
   1e6dc:	41 81       	ldd	r20, Z+1	; 0x01
   1e6de:	50 e0       	ldi	r21, 0x00	; 0
   1e6e0:	54 2f       	mov	r21, r20
   1e6e2:	44 27       	eor	r20, r20
   1e6e4:	80 81       	ld	r24, Z
   1e6e6:	48 2b       	or	r20, r24
   1e6e8:	c3 01       	movw	r24, r6
   1e6ea:	b2 01       	movw	r22, r4
   1e6ec:	65 dd       	rcall	.-1334   	; 0x1e1b8 <BootloaderAPI_FillWord>
			FlashAddress += 2;
   1e6ee:	53 01       	movw	r10, r6
   1e6f0:	42 01       	movw	r8, r4
   1e6f2:	f2 e0       	ldi	r31, 0x02	; 2
   1e6f4:	8f 0e       	add	r8, r31
   1e6f6:	91 1c       	adc	r9, r1
   1e6f8:	a1 1c       	adc	r10, r1
   1e6fa:	b1 1c       	adc	r11, r1

			if ((FlashAddress % SPM_PAGESIZE) == 0)
   1e6fc:	81 10       	cpse	r8, r1
   1e6fe:	07 c0       	rjmp	.+14     	; 0x1e70e <VirtualFAT_WriteBlock+0x116>
			{
				/* Write the filled FLASH page to memory */
				BootloaderAPI_WritePage(FlashAddress - SPM_PAGESIZE);
   1e700:	c3 01       	movw	r24, r6
   1e702:	b2 01       	movw	r22, r4
   1e704:	6e 5f       	subi	r22, 0xFE	; 254
   1e706:	71 09       	sbc	r23, r1
   1e708:	81 09       	sbc	r24, r1
   1e70a:	91 09       	sbc	r25, r1
   1e70c:	41 dd       	rcall	.-1406   	; 0x1e190 <BootloaderAPI_WritePage>
   1e70e:	82 e0       	ldi	r24, 0x02	; 2
   1e710:	e8 0e       	add	r14, r24
   1e712:	f1 1c       	adc	r15, r1
		}
	}
	else
	{
		/* Write out the mapped block of data to the device's FLASH */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i += 2)
   1e714:	ce 14       	cp	r12, r14
   1e716:	df 04       	cpc	r13, r15
   1e718:	09 f4       	brne	.+2      	; 0x1e71c <VirtualFAT_WriteBlock+0x124>
   1e71a:	b1 cf       	rjmp	.-158    	; 0x1e67e <VirtualFAT_WriteBlock+0x86>
				BootloaderAPI_ErasePage(FlashAddress);
			}

			/* Write the next data word to the FLASH page */
			BootloaderAPI_FillWord(FlashAddress, (BlockBuffer[i + 1] << 8) | BlockBuffer[i]);
			FlashAddress += 2;
   1e71c:	24 01       	movw	r4, r8
   1e71e:	35 01       	movw	r6, r10
   1e720:	d7 cf       	rjmp	.-82     	; 0x1e6d0 <VirtualFAT_WriteBlock+0xd8>
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*EEPROMFileStartCluster - 2) * SECTOR_PER_CLUSTER;
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(EEPROM_FILE_SIZE_BYTES) - 1);

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
   1e722:	9c 01       	movw	r18, r24
   1e724:	29 5f       	subi	r18, 0xF9	; 249
   1e726:	3f 4f       	sbci	r19, 0xFF	; 255
   1e728:	20 17       	cp	r18, r16
   1e72a:	31 07       	cpc	r19, r17
   1e72c:	c0 f0       	brcs	.+48     	; 0x1e75e <VirtualFAT_WriteBlock+0x166>
	  return;

	uint16_t EEPROMAddress = (uint16_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;
   1e72e:	08 1b       	sub	r16, r24
   1e730:	19 0b       	sbc	r17, r25
   1e732:	10 2f       	mov	r17, r16
   1e734:	00 27       	eor	r16, r16
   1e736:	11 0f       	add	r17, r17
   1e738:	fe 01       	movw	r30, r28
   1e73a:	31 96       	adiw	r30, 0x01	; 1
   1e73c:	7f 01       	movw	r14, r30
   1e73e:	c1 2c       	mov	r12, r1
   1e740:	d1 2c       	mov	r13, r1
	}
	else
	{
		/* Write out the mapped block of data to the device's EEPROM */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
		  WriteEEPROMByte((uint8_t*)EEPROMAddress++, BlockBuffer[i]);
   1e742:	f7 01       	movw	r30, r14
   1e744:	61 91       	ld	r22, Z+
   1e746:	7f 01       	movw	r14, r30
   1e748:	c8 01       	movw	r24, r16
   1e74a:	8c 0d       	add	r24, r12
   1e74c:	9d 1d       	adc	r25, r13
   1e74e:	1b df       	rcall	.-458    	; 0x1e586 <WriteEEPROMByte>
		  BlockBuffer[i] = ReadEEPROMByte((uint8_t*)EEPROMAddress++);
	}
	else
	{
		/* Write out the mapped block of data to the device's EEPROM */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
   1e750:	ff ef       	ldi	r31, 0xFF	; 255
   1e752:	cf 1a       	sub	r12, r31
   1e754:	df 0a       	sbc	r13, r31
   1e756:	c1 14       	cp	r12, r1
   1e758:	82 e0       	ldi	r24, 0x02	; 2
   1e75a:	d8 06       	cpc	r13, r24
   1e75c:	91 f7       	brne	.-28     	; 0x1e742 <VirtualFAT_WriteBlock+0x14a>
			ReadWriteFLASHFileBlock(BlockNumber, BlockBuffer, false);
			ReadWriteEEPROMFileBlock(BlockNumber, BlockBuffer, false);

			break;
	}
}
   1e75e:	de 5f       	subi	r29, 0xFE	; 254
   1e760:	0f b6       	in	r0, 0x3f	; 63
   1e762:	f8 94       	cli
   1e764:	de bf       	out	0x3e, r29	; 62
   1e766:	0f be       	out	0x3f, r0	; 63
   1e768:	cd bf       	out	0x3d, r28	; 61
   1e76a:	df 91       	pop	r29
   1e76c:	cf 91       	pop	r28
   1e76e:	1f 91       	pop	r17
   1e770:	0f 91       	pop	r16
   1e772:	ff 90       	pop	r15
   1e774:	ef 90       	pop	r14
   1e776:	df 90       	pop	r13
   1e778:	cf 90       	pop	r12
   1e77a:	bf 90       	pop	r11
   1e77c:	af 90       	pop	r10
   1e77e:	9f 90       	pop	r9
   1e780:	8f 90       	pop	r8
   1e782:	7f 90       	pop	r7
   1e784:	6f 90       	pop	r6
   1e786:	5f 90       	pop	r5
   1e788:	4f 90       	pop	r4
   1e78a:	08 95       	ret

0001e78c <VirtualFAT_ReadBlock>:
 *  host via the USB Mass Storage interface.
 *
 *  \param[in]  BlockNumber  Index of the block to read.
 */
void VirtualFAT_ReadBlock(const uint16_t BlockNumber)
{
   1e78c:	8f 92       	push	r8
   1e78e:	9f 92       	push	r9
   1e790:	af 92       	push	r10
   1e792:	bf 92       	push	r11
   1e794:	cf 92       	push	r12
   1e796:	df 92       	push	r13
   1e798:	ef 92       	push	r14
   1e79a:	ff 92       	push	r15
   1e79c:	0f 93       	push	r16
   1e79e:	1f 93       	push	r17
   1e7a0:	cf 93       	push	r28
   1e7a2:	df 93       	push	r29
   1e7a4:	cd b7       	in	r28, 0x3d	; 61
   1e7a6:	de b7       	in	r29, 0x3e	; 62
   1e7a8:	d2 50       	subi	r29, 0x02	; 2
   1e7aa:	0f b6       	in	r0, 0x3f	; 63
   1e7ac:	f8 94       	cli
   1e7ae:	de bf       	out	0x3e, r29	; 62
   1e7b0:	0f be       	out	0x3f, r0	; 63
   1e7b2:	cd bf       	out	0x3d, r28	; 61
	uint8_t BlockBuffer[SECTOR_SIZE_BYTES];
	memset(BlockBuffer, 0x00, sizeof(BlockBuffer));
   1e7b4:	9e 01       	movw	r18, r28
   1e7b6:	2f 5f       	subi	r18, 0xFF	; 255
   1e7b8:	3f 4f       	sbci	r19, 0xFF	; 255
   1e7ba:	79 01       	movw	r14, r18
   1e7bc:	20 e0       	ldi	r18, 0x00	; 0
   1e7be:	32 e0       	ldi	r19, 0x02	; 2
   1e7c0:	f7 01       	movw	r30, r14
   1e7c2:	a9 01       	movw	r20, r18
   1e7c4:	11 92       	st	Z+, r1
   1e7c6:	41 50       	subi	r20, 0x01	; 1
   1e7c8:	50 40       	sbci	r21, 0x00	; 0
   1e7ca:	e1 f7       	brne	.-8      	; 0x1e7c4 <VirtualFAT_ReadBlock+0x38>

	switch (BlockNumber)
   1e7cc:	83 30       	cpi	r24, 0x03	; 3
   1e7ce:	91 05       	cpc	r25, r1
   1e7d0:	b8 f4       	brcc	.+46     	; 0x1e800 <VirtualFAT_ReadBlock+0x74>
   1e7d2:	01 97       	sbiw	r24, 0x01	; 1
   1e7d4:	08 f5       	brcc	.+66     	; 0x1e818 <VirtualFAT_ReadBlock+0x8c>
	{
		case DISK_BLOCK_BootBlock:
			memcpy(BlockBuffer, &BootBlock, sizeof(FATBootBlock_t));
   1e7d6:	8e e3       	ldi	r24, 0x3E	; 62
   1e7d8:	e2 e4       	ldi	r30, 0x42	; 66
   1e7da:	f2 e0       	ldi	r31, 0x02	; 2
   1e7dc:	d7 01       	movw	r26, r14
   1e7de:	01 90       	ld	r0, Z+
   1e7e0:	0d 92       	st	X+, r0
   1e7e2:	8a 95       	dec	r24
   1e7e4:	e1 f7       	brne	.-8      	; 0x1e7de <VirtualFAT_ReadBlock+0x52>

			/* Add the magic signature to the end of the block */
			BlockBuffer[SECTOR_SIZE_BYTES - 2] = 0x55;
   1e7e6:	85 e5       	ldi	r24, 0x55	; 85
   1e7e8:	c1 50       	subi	r28, 0x01	; 1
   1e7ea:	de 4f       	sbci	r29, 0xFE	; 254
   1e7ec:	88 83       	st	Y, r24
   1e7ee:	cf 5f       	subi	r28, 0xFF	; 255
   1e7f0:	d1 40       	sbci	r29, 0x01	; 1
			BlockBuffer[SECTOR_SIZE_BYTES - 1] = 0xAA;
   1e7f2:	8a ea       	ldi	r24, 0xAA	; 170
   1e7f4:	c0 50       	subi	r28, 0x00	; 0
   1e7f6:	de 4f       	sbci	r29, 0xFE	; 254
   1e7f8:	88 83       	st	Y, r24
   1e7fa:	c0 50       	subi	r28, 0x00	; 0
   1e7fc:	d2 40       	sbci	r29, 0x02	; 2

			break;
   1e7fe:	80 c0       	rjmp	.+256    	; 0x1e900 <VirtualFAT_ReadBlock+0x174>
void VirtualFAT_ReadBlock(const uint16_t BlockNumber)
{
	uint8_t BlockBuffer[SECTOR_SIZE_BYTES];
	memset(BlockBuffer, 0x00, sizeof(BlockBuffer));

	switch (BlockNumber)
   1e800:	83 30       	cpi	r24, 0x03	; 3
   1e802:	91 05       	cpc	r25, r1
   1e804:	e9 f4       	brne	.+58     	; 0x1e840 <VirtualFAT_ReadBlock+0xb4>
			UpdateFAT12ClusterChain(BlockBuffer, *EEPROMFileStartCluster, FILE_CLUSTERS(EEPROM_FILE_SIZE_BYTES));

			break;

		case DISK_BLOCK_RootFilesBlock:
			memcpy(BlockBuffer, FirmwareFileEntries, sizeof(FirmwareFileEntries));
   1e806:	80 ea       	ldi	r24, 0xA0	; 160
   1e808:	ec e4       	ldi	r30, 0x4C	; 76
   1e80a:	f1 e0       	ldi	r31, 0x01	; 1
   1e80c:	d7 01       	movw	r26, r14
   1e80e:	01 90       	ld	r0, Z+
   1e810:	0d 92       	st	X+, r0
   1e812:	8a 95       	dec	r24
   1e814:	e1 f7       	brne	.-8      	; 0x1e80e <VirtualFAT_ReadBlock+0x82>

			break;
   1e816:	74 c0       	rjmp	.+232    	; 0x1e900 <VirtualFAT_ReadBlock+0x174>
		FATTable[FATOffset]     = (FATTable[FATOffset] & 0x0F) | ((ChainEntry & 0x0F) << 4);
		FATTable[FATOffset + 1] = (ChainEntry >> 4);
	}
	else
	{
		FATTable[FATOffset]     = ChainEntry;
   1e818:	88 ef       	ldi	r24, 0xF8	; 248
   1e81a:	89 83       	std	Y+1, r24	; 0x01
		FATTable[FATOffset + 1] = (FATTable[FATOffset] & 0xF0) | (ChainEntry >> 8);
   1e81c:	8f ef       	ldi	r24, 0xFF	; 255
   1e81e:	8a 83       	std	Y+2, r24	; 0x02
	/* Check if the start of the entry is at an upper nibble of the byte, fill
	 * out FAT12 entry as required */
	if (UpperNibble)
	{
		FATTable[FATOffset]     = (FATTable[FATOffset] & 0x0F) | ((ChainEntry & 0x0F) << 4);
		FATTable[FATOffset + 1] = (ChainEntry >> 4);
   1e820:	8b 83       	std	Y+3, r24	; 0x03

			/* Cluster 1: Reserved */
			UpdateFAT12ClusterEntry(BlockBuffer, 1, 0xFFF);

			/* Cluster 2 onwards: Cluster chain of FLASH.BIN */
			UpdateFAT12ClusterChain(BlockBuffer, *FLASHFileStartCluster, FILE_CLUSTERS(FLASH_FILE_SIZE_BYTES));
   1e822:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <FirmwareFileEntries+0x5a>
   1e826:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <FirmwareFileEntries+0x5b>
   1e82a:	4c e3       	ldi	r20, 0x3C	; 60
   1e82c:	c7 01       	movw	r24, r14
   1e82e:	ac de       	rcall	.-680    	; 0x1e588 <UpdateFAT12ClusterChain>

			/* Cluster 2+n onwards: Cluster chain of EEPROM.BIN */
			UpdateFAT12ClusterChain(BlockBuffer, *EEPROMFileStartCluster, FILE_CLUSTERS(EEPROM_FILE_SIZE_BYTES));
   1e830:	60 91 e6 01 	lds	r22, 0x01E6	; 0x8001e6 <FirmwareFileEntries+0x9a>
   1e834:	70 91 e7 01 	lds	r23, 0x01E7	; 0x8001e7 <FirmwareFileEntries+0x9b>
   1e838:	42 e0       	ldi	r20, 0x02	; 2
   1e83a:	c7 01       	movw	r24, r14
   1e83c:	a5 de       	rcall	.-694    	; 0x1e588 <UpdateFAT12ClusterChain>

			break;
   1e83e:	60 c0       	rjmp	.+192    	; 0x1e900 <VirtualFAT_ReadBlock+0x174>
 */
static void ReadWriteFLASHFileBlock(const uint16_t BlockNumber,
                                    uint8_t* BlockBuffer,
                                    const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*FLASHFileStartCluster - 2) * SECTOR_PER_CLUSTER;
   1e840:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <FirmwareFileEntries+0x5a>
   1e844:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <FirmwareFileEntries+0x5b>
   1e848:	21 50       	subi	r18, 0x01	; 1
   1e84a:	30 4c       	sbci	r19, 0xC0	; 192
   1e84c:	22 0f       	add	r18, r18
   1e84e:	33 1f       	adc	r19, r19
   1e850:	22 0f       	add	r18, r18
   1e852:	33 1f       	adc	r19, r19
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(FLASH_FILE_SIZE_BYTES) - 1);

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
   1e854:	82 17       	cp	r24, r18
   1e856:	93 07       	cpc	r25, r19
   1e858:	70 f4       	brcc	.+28     	; 0x1e876 <VirtualFAT_ReadBlock+0xea>
 */
static void ReadWriteEEPROMFileBlock(const uint16_t BlockNumber,
                                     uint8_t* BlockBuffer,
                                     const bool Read)
{
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*EEPROMFileStartCluster - 2) * SECTOR_PER_CLUSTER;
   1e85a:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <FirmwareFileEntries+0x9a>
   1e85e:	30 91 e7 01 	lds	r19, 0x01E7	; 0x8001e7 <FirmwareFileEntries+0x9b>
   1e862:	21 50       	subi	r18, 0x01	; 1
   1e864:	30 4c       	sbci	r19, 0xC0	; 192
   1e866:	22 0f       	add	r18, r18
   1e868:	33 1f       	adc	r19, r19
   1e86a:	22 0f       	add	r18, r18
   1e86c:	33 1f       	adc	r19, r19
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(EEPROM_FILE_SIZE_BYTES) - 1);

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
   1e86e:	82 17       	cp	r24, r18
   1e870:	93 07       	cpc	r25, r19
   1e872:	40 f5       	brcc	.+80     	; 0x1e8c4 <VirtualFAT_ReadBlock+0x138>
   1e874:	45 c0       	rjmp	.+138    	; 0x1e900 <VirtualFAT_ReadBlock+0x174>
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*FLASHFileStartCluster - 2) * SECTOR_PER_CLUSTER;
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(FLASH_FILE_SIZE_BYTES) - 1);

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
   1e876:	a9 01       	movw	r20, r18
   1e878:	41 51       	subi	r20, 0x11	; 17
   1e87a:	5f 4f       	sbci	r21, 0xFF	; 255
   1e87c:	48 17       	cp	r20, r24
   1e87e:	59 07       	cpc	r21, r25
   1e880:	60 f3       	brcs	.-40     	; 0x1e85a <VirtualFAT_ReadBlock+0xce>
	  return;

	#if (FLASHEND > 0xFFFF)
	uint32_t FlashAddress = (uint32_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;
   1e882:	ac 01       	movw	r20, r24
   1e884:	42 1b       	sub	r20, r18
   1e886:	53 0b       	sbc	r21, r19
   1e888:	60 e0       	ldi	r22, 0x00	; 0
   1e88a:	70 e0       	ldi	r23, 0x00	; 0
   1e88c:	29 e0       	ldi	r18, 0x09	; 9
   1e88e:	44 0f       	add	r20, r20
   1e890:	55 1f       	adc	r21, r21
   1e892:	66 1f       	adc	r22, r22
   1e894:	77 1f       	adc	r23, r23
   1e896:	2a 95       	dec	r18
   1e898:	d1 f7       	brne	.-12     	; 0x1e88e <VirtualFAT_ReadBlock+0x102>
   1e89a:	d7 01       	movw	r26, r14
   1e89c:	9e 01       	movw	r18, r28
   1e89e:	2f 5f       	subi	r18, 0xFF	; 255
   1e8a0:	3d 4f       	sbci	r19, 0xFD	; 253
	{
		/* Read out the mapped block of data from the device's FLASH */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
		{
			#if (FLASHEND > 0xFFFF)
			  BlockBuffer[i] = pgm_read_byte_far(FlashAddress++);
   1e8a2:	4a 01       	movw	r8, r20
   1e8a4:	5b 01       	movw	r10, r22
   1e8a6:	ef ef       	ldi	r30, 0xFF	; 255
   1e8a8:	8e 1a       	sub	r8, r30
   1e8aa:	9e 0a       	sbc	r9, r30
   1e8ac:	ae 0a       	sbc	r10, r30
   1e8ae:	be 0a       	sbc	r11, r30
   1e8b0:	6b bf       	out	0x3b, r22	; 59
   1e8b2:	fa 01       	movw	r30, r20
   1e8b4:	47 91       	elpm	r20, Z+
   1e8b6:	4d 93       	st	X+, r20
   1e8b8:	b5 01       	movw	r22, r10
   1e8ba:	a4 01       	movw	r20, r8
	#endif

	if (Read)
	{
		/* Read out the mapped block of data from the device's FLASH */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
   1e8bc:	a2 17       	cp	r26, r18
   1e8be:	b3 07       	cpc	r27, r19
   1e8c0:	81 f7       	brne	.-32     	; 0x1e8a2 <VirtualFAT_ReadBlock+0x116>
   1e8c2:	cb cf       	rjmp	.-106    	; 0x1e85a <VirtualFAT_ReadBlock+0xce>
	uint16_t FileStartBlock = DISK_BLOCK_DataStartBlock + (*EEPROMFileStartCluster - 2) * SECTOR_PER_CLUSTER;
	uint16_t FileEndBlock   = FileStartBlock + (FILE_SECTORS(EEPROM_FILE_SIZE_BYTES) - 1);

	/* Range check the write request - abort if requested block is not within the
	 * virtual firmware file sector range */
	if (!((BlockNumber >= FileStartBlock) && (BlockNumber <= FileEndBlock)))
   1e8c4:	a9 01       	movw	r20, r18
   1e8c6:	49 5f       	subi	r20, 0xF9	; 249
   1e8c8:	5f 4f       	sbci	r21, 0xFF	; 255
   1e8ca:	48 17       	cp	r20, r24
   1e8cc:	59 07       	cpc	r21, r25
   1e8ce:	c0 f0       	brcs	.+48     	; 0x1e900 <VirtualFAT_ReadBlock+0x174>
	  return;

	uint16_t EEPROMAddress = (uint16_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;
   1e8d0:	8c 01       	movw	r16, r24
   1e8d2:	02 1b       	sub	r16, r18
   1e8d4:	13 0b       	sbc	r17, r19
   1e8d6:	10 2f       	mov	r17, r16
   1e8d8:	00 27       	eor	r16, r16
   1e8da:	11 0f       	add	r17, r17
   1e8dc:	5e 01       	movw	r10, r28
   1e8de:	ff ef       	ldi	r31, 0xFF	; 255
   1e8e0:	af 1a       	sub	r10, r31
   1e8e2:	fd ef       	ldi	r31, 0xFD	; 253
   1e8e4:	bf 0a       	sbc	r11, r31
   1e8e6:	67 01       	movw	r12, r14

	if (Read)
	{
		/* Read out the mapped block of data from the device's EEPROM */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
		  BlockBuffer[i] = ReadEEPROMByte((uint8_t*)EEPROMAddress++);
   1e8e8:	0e 19       	sub	r16, r14
   1e8ea:	1f 09       	sbc	r17, r15
   1e8ec:	c8 01       	movw	r24, r16
   1e8ee:	8c 0d       	add	r24, r12
   1e8f0:	9d 1d       	adc	r25, r13
   1e8f2:	48 de       	rcall	.-880    	; 0x1e584 <ReadEEPROMByte>
   1e8f4:	f6 01       	movw	r30, r12
   1e8f6:	81 93       	st	Z+, r24
   1e8f8:	6f 01       	movw	r12, r30
	uint16_t EEPROMAddress = (uint16_t)(BlockNumber - FileStartBlock) * SECTOR_SIZE_BYTES;

	if (Read)
	{
		/* Read out the mapped block of data from the device's EEPROM */
		for (uint16_t i = 0; i < SECTOR_SIZE_BYTES; i++)
   1e8fa:	ea 15       	cp	r30, r10
   1e8fc:	fb 05       	cpc	r31, r11
   1e8fe:	b1 f7       	brne	.-20     	; 0x1e8ec <VirtualFAT_ReadBlock+0x160>

			break;
	}

	/* Write the entire read block Buffer to the host */
	Endpoint_Write_Stream_LE(BlockBuffer, sizeof(BlockBuffer), NULL);
   1e900:	40 e0       	ldi	r20, 0x00	; 0
   1e902:	50 e0       	ldi	r21, 0x00	; 0
   1e904:	60 e0       	ldi	r22, 0x00	; 0
   1e906:	72 e0       	ldi	r23, 0x02	; 2
   1e908:	c7 01       	movw	r24, r14
   1e90a:	ca d1       	rcall	.+916    	; 0x1eca0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e90c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e910:	8e 77       	andi	r24, 0x7E	; 126
   1e912:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearIN();
}
   1e916:	de 5f       	subi	r29, 0xFE	; 254
   1e918:	0f b6       	in	r0, 0x3f	; 63
   1e91a:	f8 94       	cli
   1e91c:	de bf       	out	0x3e, r29	; 62
   1e91e:	0f be       	out	0x3f, r0	; 63
   1e920:	cd bf       	out	0x3d, r28	; 61
   1e922:	df 91       	pop	r29
   1e924:	cf 91       	pop	r28
   1e926:	1f 91       	pop	r17
   1e928:	0f 91       	pop	r16
   1e92a:	ff 90       	pop	r15
   1e92c:	ef 90       	pop	r14
   1e92e:	df 90       	pop	r13
   1e930:	cf 90       	pop	r12
   1e932:	bf 90       	pop	r11
   1e934:	af 90       	pop	r10
   1e936:	9f 90       	pop	r9
   1e938:	8f 90       	pop	r8
   1e93a:	08 95       	ret

0001e93c <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
   1e93c:	cf 93       	push	r28
   1e93e:	df 93       	push	r29
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e940:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
   1e944:	23 ff       	sbrs	r18, 3
   1e946:	38 c0       	rjmp	.+112    	; 0x1e9b8 <MS_Device_ProcessControlRequest+0x7c>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
   1e948:	fc 01       	movw	r30, r24
   1e94a:	20 81       	ld	r18, Z
   1e94c:	30 e0       	ldi	r19, 0x00	; 0
   1e94e:	40 91 87 02 	lds	r20, 0x0287	; 0x800287 <USB_ControlRequest+0x4>
   1e952:	50 91 88 02 	lds	r21, 0x0288	; 0x800288 <USB_ControlRequest+0x5>
   1e956:	42 17       	cp	r20, r18
   1e958:	53 07       	cpc	r21, r19
   1e95a:	71 f5       	brne	.+92     	; 0x1e9b8 <MS_Device_ProcessControlRequest+0x7c>
	  return;

	switch (USB_ControlRequest.bRequest)
   1e95c:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <USB_ControlRequest+0x1>
   1e960:	2e 3f       	cpi	r18, 0xFE	; 254
   1e962:	81 f0       	breq	.+32     	; 0x1e984 <MS_Device_ProcessControlRequest+0x48>
   1e964:	2f 3f       	cpi	r18, 0xFF	; 255
   1e966:	41 f5       	brne	.+80     	; 0x1e9b8 <MS_Device_ProcessControlRequest+0x7c>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   1e968:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <USB_ControlRequest>
   1e96c:	21 32       	cpi	r18, 0x21	; 33
   1e96e:	21 f5       	brne	.+72     	; 0x1e9b8 <MS_Device_ProcessControlRequest+0x7c>
   1e970:	ec 01       	movw	r28, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e972:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e976:	87 7f       	andi	r24, 0xF7	; 247
   1e978:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
   1e97c:	ce d2       	rcall	.+1436   	; 0x1ef1a <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
   1e97e:	81 e0       	ldi	r24, 0x01	; 1
   1e980:	88 af       	std	Y+56, r24	; 0x38
   1e982:	1a c0       	rjmp	.+52     	; 0x1e9b8 <MS_Device_ProcessControlRequest+0x7c>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
   1e984:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <USB_ControlRequest>
   1e988:	21 3a       	cpi	r18, 0xA1	; 161
   1e98a:	b1 f4       	brne	.+44     	; 0x1e9b8 <MS_Device_ProcessControlRequest+0x7c>
   1e98c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e990:	27 7f       	andi	r18, 0xF7	; 247
   1e992:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e996:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
   1e99a:	20 ff       	sbrs	r18, 0
   1e99c:	fc cf       	rjmp	.-8      	; 0x1e996 <MS_Device_ProcessControlRequest+0x5a>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
   1e99e:	fc 01       	movw	r30, r24
   1e9a0:	83 85       	ldd	r24, Z+11	; 0x0b
   1e9a2:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e9a4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e9a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e9ac:	8e 77       	andi	r24, 0x7E	; 126
   1e9ae:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
   1e9b2:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
   1e9b4:	cf 91       	pop	r28
   1e9b6:	b1 c2       	rjmp	.+1378   	; 0x1ef1a <Endpoint_ClearStatusStage>
			}

			break;
	}
}
   1e9b8:	df 91       	pop	r29
   1e9ba:	cf 91       	pop	r28
   1e9bc:	08 95       	ret

0001e9be <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
   1e9be:	cf 93       	push	r28
   1e9c0:	df 93       	push	r29
   1e9c2:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
   1e9c4:	fc 01       	movw	r30, r24
   1e9c6:	3c 96       	adiw	r30, 0x0c	; 12
   1e9c8:	8d e2       	ldi	r24, 0x2D	; 45
   1e9ca:	df 01       	movw	r26, r30
   1e9cc:	1d 92       	st	X+, r1
   1e9ce:	8a 95       	dec	r24
   1e9d0:	e9 f7       	brne	.-6      	; 0x1e9cc <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
   1e9d2:	82 e0       	ldi	r24, 0x02	; 2
   1e9d4:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
   1e9d6:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
   1e9d8:	61 e0       	ldi	r22, 0x01	; 1
   1e9da:	ce 01       	movw	r24, r28
   1e9dc:	01 96       	adiw	r24, 0x01	; 1
   1e9de:	60 d2       	rcall	.+1216   	; 0x1eea0 <Endpoint_ConfigureEndpointTable>
   1e9e0:	88 23       	and	r24, r24
   1e9e2:	31 f0       	breq	.+12     	; 0x1e9f0 <MS_Device_ConfigureEndpoints+0x32>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
   1e9e4:	61 e0       	ldi	r22, 0x01	; 1
   1e9e6:	ce 01       	movw	r24, r28
   1e9e8:	06 96       	adiw	r24, 0x06	; 6
	  return false;

	return true;
}
   1e9ea:	df 91       	pop	r29
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
   1e9ec:	cf 91       	pop	r28
   1e9ee:	58 c2       	rjmp	.+1200   	; 0x1eea0 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
   1e9f0:	80 e0       	ldi	r24, 0x00	; 0
   1e9f2:	df 91       	pop	r29
   1e9f4:	cf 91       	pop	r28
   1e9f6:	08 95       	ret

0001e9f8 <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
   1e9f8:	ef 92       	push	r14
   1e9fa:	ff 92       	push	r15
   1e9fc:	0f 93       	push	r16
   1e9fe:	1f 93       	push	r17
   1ea00:	cf 93       	push	r28
   1ea02:	df 93       	push	r29
   1ea04:	00 d0       	rcall	.+0      	; 0x1ea06 <MS_Device_USBTask+0xe>
   1ea06:	cd b7       	in	r28, 0x3d	; 61
   1ea08:	de b7       	in	r29, 0x3e	; 62
	if (USB_DeviceState != DEVICE_STATE_Configured)
   1ea0a:	2e b3       	in	r18, 0x1e	; 30
   1ea0c:	24 30       	cpi	r18, 0x04	; 4
   1ea0e:	09 f0       	breq	.+2      	; 0x1ea12 <MS_Device_USBTask+0x1a>
   1ea10:	ff c0       	rjmp	.+510    	; 0x1ec10 <MS_Device_USBTask+0x218>
   1ea12:	8c 01       	movw	r16, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ea14:	fc 01       	movw	r30, r24
   1ea16:	86 81       	ldd	r24, Z+6	; 0x06
   1ea18:	8f 70       	andi	r24, 0x0F	; 15
   1ea1a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ea1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
   1ea22:	82 ff       	sbrs	r24, 2
   1ea24:	bc c0       	rjmp	.+376    	; 0x1eb9e <MS_Device_USBTask+0x1a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ea26:	86 81       	ldd	r24, Z+6	; 0x06
   1ea28:	8f 70       	andi	r24, 0x0F	; 15
   1ea2a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
   1ea2e:	1a 82       	std	Y+2, r1	; 0x02
   1ea30:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
   1ea32:	78 01       	movw	r14, r16
   1ea34:	fc e0       	ldi	r31, 0x0C	; 12
   1ea36:	ef 0e       	add	r14, r31
   1ea38:	f1 1c       	adc	r15, r1
   1ea3a:	ae 01       	movw	r20, r28
   1ea3c:	4f 5f       	subi	r20, 0xFF	; 255
   1ea3e:	5f 4f       	sbci	r21, 0xFF	; 255
   1ea40:	6f e0       	ldi	r22, 0x0F	; 15
   1ea42:	70 e0       	ldi	r23, 0x00	; 0
   1ea44:	c7 01       	movw	r24, r14
   1ea46:	75 d1       	rcall	.+746    	; 0x1ed32 <Endpoint_Read_Stream_LE>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
   1ea48:	f8 01       	movw	r30, r16
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
   1ea4a:	85 30       	cpi	r24, 0x05	; 5
   1ea4c:	21 f4       	brne	.+8      	; 0x1ea56 <MS_Device_USBTask+0x5e>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
   1ea4e:	80 ad       	ldd	r24, Z+56	; 0x38
   1ea50:	88 23       	and	r24, r24
   1ea52:	99 f3       	breq	.-26     	; 0x1ea3a <MS_Device_USBTask+0x42>
   1ea54:	a4 c0       	rjmp	.+328    	; 0x1eb9e <MS_Device_USBTask+0x1a6>
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
   1ea56:	84 85       	ldd	r24, Z+12	; 0x0c
   1ea58:	95 85       	ldd	r25, Z+13	; 0x0d
   1ea5a:	a6 85       	ldd	r26, Z+14	; 0x0e
   1ea5c:	b7 85       	ldd	r27, Z+15	; 0x0f
   1ea5e:	85 35       	cpi	r24, 0x55	; 85
   1ea60:	93 45       	sbci	r25, 0x53	; 83
   1ea62:	a2 44       	sbci	r26, 0x42	; 66
   1ea64:	b3 44       	sbci	r27, 0x43	; 67
   1ea66:	61 f4       	brne	.+24     	; 0x1ea80 <MS_Device_USBTask+0x88>
   1ea68:	f8 01       	movw	r30, r16
   1ea6a:	91 8d       	ldd	r25, Z+25	; 0x19
   1ea6c:	83 85       	ldd	r24, Z+11	; 0x0b
   1ea6e:	98 17       	cp	r25, r24
   1ea70:	38 f4       	brcc	.+14     	; 0x1ea80 <MS_Device_USBTask+0x88>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
   1ea72:	80 8d       	ldd	r24, Z+24	; 0x18
   1ea74:	8f 71       	andi	r24, 0x1F	; 31
   1ea76:	21 f4       	brne	.+8      	; 0x1ea80 <MS_Device_USBTask+0x88>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
   1ea78:	82 8d       	ldd	r24, Z+26	; 0x1a
   1ea7a:	81 50       	subi	r24, 0x01	; 1
   1ea7c:	80 31       	cpi	r24, 0x10	; 16
   1ea7e:	80 f0       	brcs	.+32     	; 0x1eaa0 <MS_Device_USBTask+0xa8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1ea80:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1ea84:	80 62       	ori	r24, 0x20	; 32
   1ea86:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ea8a:	f8 01       	movw	r30, r16
   1ea8c:	81 81       	ldd	r24, Z+1	; 0x01
   1ea8e:	8f 70       	andi	r24, 0x0F	; 15
   1ea90:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1ea94:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1ea98:	80 62       	ori	r24, 0x20	; 32
   1ea9a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1ea9e:	7f c0       	rjmp	.+254    	; 0x1eb9e <MS_Device_USBTask+0x1a6>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
   1eaa0:	1a 82       	std	Y+2, r1	; 0x02
   1eaa2:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
   1eaa4:	78 01       	movw	r14, r16
   1eaa6:	fb e1       	ldi	r31, 0x1B	; 27
   1eaa8:	ef 0e       	add	r14, r31
   1eaaa:	f1 1c       	adc	r15, r1
   1eaac:	f8 01       	movw	r30, r16
   1eaae:	62 8d       	ldd	r22, Z+26	; 0x1a
   1eab0:	70 e0       	ldi	r23, 0x00	; 0
   1eab2:	ae 01       	movw	r20, r28
   1eab4:	4f 5f       	subi	r20, 0xFF	; 255
   1eab6:	5f 4f       	sbci	r21, 0xFF	; 255
   1eab8:	c7 01       	movw	r24, r14
   1eaba:	3b d1       	rcall	.+630    	; 0x1ed32 <Endpoint_Read_Stream_LE>
   1eabc:	85 30       	cpi	r24, 0x05	; 5
   1eabe:	29 f4       	brne	.+10     	; 0x1eaca <MS_Device_USBTask+0xd2>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
   1eac0:	f8 01       	movw	r30, r16
   1eac2:	80 ad       	ldd	r24, Z+56	; 0x38
   1eac4:	88 23       	and	r24, r24
   1eac6:	91 f3       	breq	.-28     	; 0x1eaac <MS_Device_USBTask+0xb4>
   1eac8:	6a c0       	rjmp	.+212    	; 0x1eb9e <MS_Device_USBTask+0x1a6>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1eaca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1eace:	8b 77       	andi	r24, 0x7B	; 123
   1ead0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
   1ead4:	f8 01       	movw	r30, r16
   1ead6:	80 8d       	ldd	r24, Z+24	; 0x18
   1ead8:	87 ff       	sbrs	r24, 7
   1eada:	04 c0       	rjmp	.+8      	; 0x1eae4 <MS_Device_USBTask+0xec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1eadc:	81 81       	ldd	r24, Z+1	; 0x01
   1eade:	8f 70       	andi	r24, 0x0F	; 15
   1eae0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
   1eae4:	c8 01       	movw	r24, r16
   1eae6:	f4 db       	rcall	.-2072   	; 0x1e2d0 <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
   1eae8:	91 e0       	ldi	r25, 0x01	; 1
   1eaea:	98 27       	eor	r25, r24
   1eaec:	f8 01       	movw	r30, r16
   1eaee:	97 ab       	std	Z+55, r25	; 0x37
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
   1eaf0:	45 e5       	ldi	r20, 0x55	; 85
   1eaf2:	53 e5       	ldi	r21, 0x53	; 83
   1eaf4:	62 e4       	ldi	r22, 0x42	; 66
   1eaf6:	73 e5       	ldi	r23, 0x53	; 83
   1eaf8:	43 a7       	std	Z+43, r20	; 0x2b
   1eafa:	54 a7       	std	Z+44, r21	; 0x2c
   1eafc:	65 a7       	std	Z+45, r22	; 0x2d
   1eafe:	76 a7       	std	Z+46, r23	; 0x2e
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
   1eb00:	40 89       	ldd	r20, Z+16	; 0x10
   1eb02:	51 89       	ldd	r21, Z+17	; 0x11
   1eb04:	62 89       	ldd	r22, Z+18	; 0x12
   1eb06:	73 89       	ldd	r23, Z+19	; 0x13
   1eb08:	47 a7       	std	Z+47, r20	; 0x2f
   1eb0a:	50 ab       	std	Z+48, r21	; 0x30
   1eb0c:	61 ab       	std	Z+49, r22	; 0x31
   1eb0e:	72 ab       	std	Z+50, r23	; 0x32
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
   1eb10:	44 89       	ldd	r20, Z+20	; 0x14
   1eb12:	55 89       	ldd	r21, Z+21	; 0x15
   1eb14:	66 89       	ldd	r22, Z+22	; 0x16
   1eb16:	77 89       	ldd	r23, Z+23	; 0x17
   1eb18:	43 ab       	std	Z+51, r20	; 0x33
   1eb1a:	54 ab       	std	Z+52, r21	; 0x34
   1eb1c:	65 ab       	std	Z+53, r22	; 0x35
   1eb1e:	76 ab       	std	Z+54, r23	; 0x36

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
   1eb20:	81 11       	cpse	r24, r1
   1eb22:	09 c0       	rjmp	.+18     	; 0x1eb36 <MS_Device_USBTask+0x13e>
   1eb24:	45 2b       	or	r20, r21
   1eb26:	46 2b       	or	r20, r22
   1eb28:	47 2b       	or	r20, r23
   1eb2a:	29 f0       	breq	.+10     	; 0x1eb36 <MS_Device_USBTask+0x13e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1eb2c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1eb30:	80 62       	ori	r24, 0x20	; 32
   1eb32:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1eb36:	f8 01       	movw	r30, r16
   1eb38:	86 81       	ldd	r24, Z+6	; 0x06
   1eb3a:	8f 70       	andi	r24, 0x0F	; 15
   1eb3c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1eb40:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
   1eb44:	f8 01       	movw	r30, r16

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
   1eb46:	85 ff       	sbrs	r24, 5
   1eb48:	04 c0       	rjmp	.+8      	; 0x1eb52 <MS_Device_USBTask+0x15a>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
   1eb4a:	80 ad       	ldd	r24, Z+56	; 0x38
   1eb4c:	88 23       	and	r24, r24
   1eb4e:	c1 f3       	breq	.-16     	; 0x1eb40 <MS_Device_USBTask+0x148>
   1eb50:	26 c0       	rjmp	.+76     	; 0x1eb9e <MS_Device_USBTask+0x1a6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1eb52:	81 81       	ldd	r24, Z+1	; 0x01
   1eb54:	8f 70       	andi	r24, 0x0F	; 15
   1eb56:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1eb5a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
   1eb5e:	85 ff       	sbrs	r24, 5
   1eb60:	05 c0       	rjmp	.+10     	; 0x1eb6c <MS_Device_USBTask+0x174>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
   1eb62:	f8 01       	movw	r30, r16
   1eb64:	80 ad       	ldd	r24, Z+56	; 0x38
   1eb66:	88 23       	and	r24, r24
   1eb68:	c1 f3       	breq	.-16     	; 0x1eb5a <MS_Device_USBTask+0x162>
   1eb6a:	19 c0       	rjmp	.+50     	; 0x1eb9e <MS_Device_USBTask+0x1a6>
		  return;
	}

	uint16_t BytesProcessed = 0;
   1eb6c:	1a 82       	std	Y+2, r1	; 0x02
   1eb6e:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
   1eb70:	78 01       	movw	r14, r16
   1eb72:	fb e2       	ldi	r31, 0x2B	; 43
   1eb74:	ef 0e       	add	r14, r31
   1eb76:	f1 1c       	adc	r15, r1
   1eb78:	ae 01       	movw	r20, r28
   1eb7a:	4f 5f       	subi	r20, 0xFF	; 255
   1eb7c:	5f 4f       	sbci	r21, 0xFF	; 255
   1eb7e:	6d e0       	ldi	r22, 0x0D	; 13
   1eb80:	70 e0       	ldi	r23, 0x00	; 0
   1eb82:	c7 01       	movw	r24, r14
   1eb84:	8d d0       	rcall	.+282    	; 0x1eca0 <Endpoint_Write_Stream_LE>
   1eb86:	85 30       	cpi	r24, 0x05	; 5
   1eb88:	29 f4       	brne	.+10     	; 0x1eb94 <MS_Device_USBTask+0x19c>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
   1eb8a:	f8 01       	movw	r30, r16
   1eb8c:	80 ad       	ldd	r24, Z+56	; 0x38
   1eb8e:	88 23       	and	r24, r24
   1eb90:	99 f3       	breq	.-26     	; 0x1eb78 <MS_Device_USBTask+0x180>
   1eb92:	05 c0       	rjmp	.+10     	; 0x1eb9e <MS_Device_USBTask+0x1a6>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1eb94:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1eb98:	8e 77       	andi	r24, 0x7E	; 126
   1eb9a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
   1eb9e:	f8 01       	movw	r30, r16
   1eba0:	80 ad       	ldd	r24, Z+56	; 0x38
   1eba2:	88 23       	and	r24, r24
   1eba4:	a9 f1       	breq	.+106    	; 0x1ec10 <MS_Device_USBTask+0x218>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1eba6:	26 81       	ldd	r18, Z+6	; 0x06
   1eba8:	2f 70       	andi	r18, 0x0F	; 15
   1ebaa:	81 e0       	ldi	r24, 0x01	; 1
   1ebac:	90 e0       	ldi	r25, 0x00	; 0
   1ebae:	ac 01       	movw	r20, r24
   1ebb0:	02 c0       	rjmp	.+4      	; 0x1ebb6 <MS_Device_USBTask+0x1be>
   1ebb2:	44 0f       	add	r20, r20
   1ebb4:	55 1f       	adc	r21, r21
   1ebb6:	2a 95       	dec	r18
   1ebb8:	e2 f7       	brpl	.-8      	; 0x1ebb2 <MS_Device_USBTask+0x1ba>
   1ebba:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
   1ebbe:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1ebc2:	21 81       	ldd	r18, Z+1	; 0x01
   1ebc4:	2f 70       	andi	r18, 0x0F	; 15
   1ebc6:	01 c0       	rjmp	.+2      	; 0x1ebca <MS_Device_USBTask+0x1d2>
   1ebc8:	88 0f       	add	r24, r24
   1ebca:	2a 95       	dec	r18
   1ebcc:	ea f7       	brpl	.-6      	; 0x1ebc8 <MS_Device_USBTask+0x1d0>
   1ebce:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
   1ebd2:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ebd6:	86 81       	ldd	r24, Z+6	; 0x06
   1ebd8:	8f 70       	andi	r24, 0x0F	; 15
   1ebda:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1ebde:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1ebe2:	80 61       	ori	r24, 0x10	; 16
   1ebe4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1ebe8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1ebec:	88 60       	ori	r24, 0x08	; 8
   1ebee:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ebf2:	81 81       	ldd	r24, Z+1	; 0x01
   1ebf4:	8f 70       	andi	r24, 0x0F	; 15
   1ebf6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1ebfa:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1ebfe:	80 61       	ori	r24, 0x10	; 16
   1ec00:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1ec04:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1ec08:	88 60       	ori	r24, 0x08	; 8
   1ec0a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
   1ec0e:	10 ae       	std	Z+56, r1	; 0x38
	}
}
   1ec10:	0f 90       	pop	r0
   1ec12:	0f 90       	pop	r0
   1ec14:	df 91       	pop	r29
   1ec16:	cf 91       	pop	r28
   1ec18:	1f 91       	pop	r17
   1ec1a:	0f 91       	pop	r16
   1ec1c:	ff 90       	pop	r15
   1ec1e:	ef 90       	pop	r14
   1ec20:	08 95       	ret

0001ec22 <Endpoint_Null_Stream>:
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
   1ec22:	ef 92       	push	r14
   1ec24:	ff 92       	push	r15
   1ec26:	0f 93       	push	r16
   1ec28:	1f 93       	push	r17
   1ec2a:	cf 93       	push	r28
   1ec2c:	df 93       	push	r29
   1ec2e:	ec 01       	movw	r28, r24
   1ec30:	8b 01       	movw	r16, r22
   1ec32:	90 d1       	rcall	.+800    	; 0x1ef54 <Endpoint_WaitUntilReady>
   1ec34:	81 11       	cpse	r24, r1
   1ec36:	2d c0       	rjmp	.+90     	; 0x1ec92 <Endpoint_Null_Stream+0x70>
   1ec38:	01 15       	cp	r16, r1
   1ec3a:	11 05       	cpc	r17, r1
   1ec3c:	29 f0       	breq	.+10     	; 0x1ec48 <Endpoint_Null_Stream+0x26>
   1ec3e:	f8 01       	movw	r30, r16
   1ec40:	80 81       	ld	r24, Z
   1ec42:	91 81       	ldd	r25, Z+1	; 0x01
   1ec44:	c8 1b       	sub	r28, r24
   1ec46:	d9 0b       	sbc	r29, r25
   1ec48:	e1 2c       	mov	r14, r1
   1ec4a:	f1 2c       	mov	r15, r1
   1ec4c:	20 97       	sbiw	r28, 0x00	; 0
   1ec4e:	01 f1       	breq	.+64     	; 0x1ec90 <Endpoint_Null_Stream+0x6e>
   1ec50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ec54:	85 fd       	sbrc	r24, 5
   1ec56:	15 c0       	rjmp	.+42     	; 0x1ec82 <Endpoint_Null_Stream+0x60>
   1ec58:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ec5c:	8e 77       	andi	r24, 0x7E	; 126
   1ec5e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ec62:	01 15       	cp	r16, r1
   1ec64:	11 05       	cpc	r17, r1
   1ec66:	49 f0       	breq	.+18     	; 0x1ec7a <Endpoint_Null_Stream+0x58>
   1ec68:	f8 01       	movw	r30, r16
   1ec6a:	80 81       	ld	r24, Z
   1ec6c:	91 81       	ldd	r25, Z+1	; 0x01
   1ec6e:	e8 0e       	add	r14, r24
   1ec70:	f9 1e       	adc	r15, r25
   1ec72:	f1 82       	std	Z+1, r15	; 0x01
   1ec74:	e0 82       	st	Z, r14
   1ec76:	85 e0       	ldi	r24, 0x05	; 5
   1ec78:	0c c0       	rjmp	.+24     	; 0x1ec92 <Endpoint_Null_Stream+0x70>
   1ec7a:	6c d1       	rcall	.+728    	; 0x1ef54 <Endpoint_WaitUntilReady>
   1ec7c:	88 23       	and	r24, r24
   1ec7e:	31 f3       	breq	.-52     	; 0x1ec4c <Endpoint_Null_Stream+0x2a>
   1ec80:	08 c0       	rjmp	.+16     	; 0x1ec92 <Endpoint_Null_Stream+0x70>
   1ec82:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1ec86:	21 97       	sbiw	r28, 0x01	; 1
   1ec88:	ff ef       	ldi	r31, 0xFF	; 255
   1ec8a:	ef 1a       	sub	r14, r31
   1ec8c:	ff 0a       	sbc	r15, r31
   1ec8e:	de cf       	rjmp	.-68     	; 0x1ec4c <Endpoint_Null_Stream+0x2a>
   1ec90:	80 e0       	ldi	r24, 0x00	; 0
   1ec92:	df 91       	pop	r29
   1ec94:	cf 91       	pop	r28
   1ec96:	1f 91       	pop	r17
   1ec98:	0f 91       	pop	r16
   1ec9a:	ff 90       	pop	r15
   1ec9c:	ef 90       	pop	r14
   1ec9e:	08 95       	ret

0001eca0 <Endpoint_Write_Stream_LE>:
   1eca0:	cf 92       	push	r12
   1eca2:	df 92       	push	r13
   1eca4:	ef 92       	push	r14
   1eca6:	ff 92       	push	r15
   1eca8:	0f 93       	push	r16
   1ecaa:	1f 93       	push	r17
   1ecac:	cf 93       	push	r28
   1ecae:	df 93       	push	r29
   1ecb0:	ec 01       	movw	r28, r24
   1ecb2:	8b 01       	movw	r16, r22
   1ecb4:	7a 01       	movw	r14, r20
   1ecb6:	4e d1       	rcall	.+668    	; 0x1ef54 <Endpoint_WaitUntilReady>
   1ecb8:	81 11       	cpse	r24, r1
   1ecba:	32 c0       	rjmp	.+100    	; 0x1ed20 <Endpoint_Write_Stream_LE+0x80>
   1ecbc:	e1 14       	cp	r14, r1
   1ecbe:	f1 04       	cpc	r15, r1
   1ecc0:	39 f0       	breq	.+14     	; 0x1ecd0 <Endpoint_Write_Stream_LE+0x30>
   1ecc2:	f7 01       	movw	r30, r14
   1ecc4:	80 81       	ld	r24, Z
   1ecc6:	91 81       	ldd	r25, Z+1	; 0x01
   1ecc8:	08 1b       	sub	r16, r24
   1ecca:	19 0b       	sbc	r17, r25
   1eccc:	c8 0f       	add	r28, r24
   1ecce:	d9 1f       	adc	r29, r25
   1ecd0:	c1 2c       	mov	r12, r1
   1ecd2:	d1 2c       	mov	r13, r1
   1ecd4:	01 15       	cp	r16, r1
   1ecd6:	11 05       	cpc	r17, r1
   1ecd8:	11 f1       	breq	.+68     	; 0x1ed1e <Endpoint_Write_Stream_LE+0x7e>
   1ecda:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ecde:	85 fd       	sbrc	r24, 5
   1ece0:	15 c0       	rjmp	.+42     	; 0x1ed0c <Endpoint_Write_Stream_LE+0x6c>
   1ece2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ece6:	8e 77       	andi	r24, 0x7E	; 126
   1ece8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ecec:	e1 14       	cp	r14, r1
   1ecee:	f1 04       	cpc	r15, r1
   1ecf0:	49 f0       	breq	.+18     	; 0x1ed04 <Endpoint_Write_Stream_LE+0x64>
   1ecf2:	f7 01       	movw	r30, r14
   1ecf4:	80 81       	ld	r24, Z
   1ecf6:	91 81       	ldd	r25, Z+1	; 0x01
   1ecf8:	c8 0e       	add	r12, r24
   1ecfa:	d9 1e       	adc	r13, r25
   1ecfc:	d1 82       	std	Z+1, r13	; 0x01
   1ecfe:	c0 82       	st	Z, r12
   1ed00:	85 e0       	ldi	r24, 0x05	; 5
   1ed02:	0e c0       	rjmp	.+28     	; 0x1ed20 <Endpoint_Write_Stream_LE+0x80>
   1ed04:	27 d1       	rcall	.+590    	; 0x1ef54 <Endpoint_WaitUntilReady>
   1ed06:	88 23       	and	r24, r24
   1ed08:	29 f3       	breq	.-54     	; 0x1ecd4 <Endpoint_Write_Stream_LE+0x34>
   1ed0a:	0a c0       	rjmp	.+20     	; 0x1ed20 <Endpoint_Write_Stream_LE+0x80>
   1ed0c:	89 91       	ld	r24, Y+
   1ed0e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1ed12:	01 50       	subi	r16, 0x01	; 1
   1ed14:	11 09       	sbc	r17, r1
   1ed16:	ff ef       	ldi	r31, 0xFF	; 255
   1ed18:	cf 1a       	sub	r12, r31
   1ed1a:	df 0a       	sbc	r13, r31
   1ed1c:	db cf       	rjmp	.-74     	; 0x1ecd4 <Endpoint_Write_Stream_LE+0x34>
   1ed1e:	80 e0       	ldi	r24, 0x00	; 0
   1ed20:	df 91       	pop	r29
   1ed22:	cf 91       	pop	r28
   1ed24:	1f 91       	pop	r17
   1ed26:	0f 91       	pop	r16
   1ed28:	ff 90       	pop	r15
   1ed2a:	ef 90       	pop	r14
   1ed2c:	df 90       	pop	r13
   1ed2e:	cf 90       	pop	r12
   1ed30:	08 95       	ret

0001ed32 <Endpoint_Read_Stream_LE>:
   1ed32:	cf 92       	push	r12
   1ed34:	df 92       	push	r13
   1ed36:	ef 92       	push	r14
   1ed38:	ff 92       	push	r15
   1ed3a:	0f 93       	push	r16
   1ed3c:	1f 93       	push	r17
   1ed3e:	cf 93       	push	r28
   1ed40:	df 93       	push	r29
   1ed42:	ec 01       	movw	r28, r24
   1ed44:	8b 01       	movw	r16, r22
   1ed46:	7a 01       	movw	r14, r20
   1ed48:	05 d1       	rcall	.+522    	; 0x1ef54 <Endpoint_WaitUntilReady>
   1ed4a:	81 11       	cpse	r24, r1
   1ed4c:	32 c0       	rjmp	.+100    	; 0x1edb2 <Endpoint_Read_Stream_LE+0x80>
   1ed4e:	e1 14       	cp	r14, r1
   1ed50:	f1 04       	cpc	r15, r1
   1ed52:	39 f0       	breq	.+14     	; 0x1ed62 <Endpoint_Read_Stream_LE+0x30>
   1ed54:	f7 01       	movw	r30, r14
   1ed56:	80 81       	ld	r24, Z
   1ed58:	91 81       	ldd	r25, Z+1	; 0x01
   1ed5a:	08 1b       	sub	r16, r24
   1ed5c:	19 0b       	sbc	r17, r25
   1ed5e:	c8 0f       	add	r28, r24
   1ed60:	d9 1f       	adc	r29, r25
   1ed62:	c1 2c       	mov	r12, r1
   1ed64:	d1 2c       	mov	r13, r1
   1ed66:	01 15       	cp	r16, r1
   1ed68:	11 05       	cpc	r17, r1
   1ed6a:	11 f1       	breq	.+68     	; 0x1edb0 <Endpoint_Read_Stream_LE+0x7e>
   1ed6c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ed70:	85 fd       	sbrc	r24, 5
   1ed72:	15 c0       	rjmp	.+42     	; 0x1ed9e <Endpoint_Read_Stream_LE+0x6c>
   1ed74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ed78:	8b 77       	andi	r24, 0x7B	; 123
   1ed7a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ed7e:	e1 14       	cp	r14, r1
   1ed80:	f1 04       	cpc	r15, r1
   1ed82:	49 f0       	breq	.+18     	; 0x1ed96 <Endpoint_Read_Stream_LE+0x64>
   1ed84:	f7 01       	movw	r30, r14
   1ed86:	80 81       	ld	r24, Z
   1ed88:	91 81       	ldd	r25, Z+1	; 0x01
   1ed8a:	c8 0e       	add	r12, r24
   1ed8c:	d9 1e       	adc	r13, r25
   1ed8e:	d1 82       	std	Z+1, r13	; 0x01
   1ed90:	c0 82       	st	Z, r12
   1ed92:	85 e0       	ldi	r24, 0x05	; 5
   1ed94:	0e c0       	rjmp	.+28     	; 0x1edb2 <Endpoint_Read_Stream_LE+0x80>
   1ed96:	de d0       	rcall	.+444    	; 0x1ef54 <Endpoint_WaitUntilReady>
   1ed98:	88 23       	and	r24, r24
   1ed9a:	29 f3       	breq	.-54     	; 0x1ed66 <Endpoint_Read_Stream_LE+0x34>
   1ed9c:	0a c0       	rjmp	.+20     	; 0x1edb2 <Endpoint_Read_Stream_LE+0x80>
   1ed9e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1eda2:	89 93       	st	Y+, r24
   1eda4:	01 50       	subi	r16, 0x01	; 1
   1eda6:	11 09       	sbc	r17, r1
   1eda8:	ff ef       	ldi	r31, 0xFF	; 255
   1edaa:	cf 1a       	sub	r12, r31
   1edac:	df 0a       	sbc	r13, r31
   1edae:	db cf       	rjmp	.-74     	; 0x1ed66 <Endpoint_Read_Stream_LE+0x34>
   1edb0:	80 e0       	ldi	r24, 0x00	; 0
   1edb2:	df 91       	pop	r29
   1edb4:	cf 91       	pop	r28
   1edb6:	1f 91       	pop	r17
   1edb8:	0f 91       	pop	r16
   1edba:	ff 90       	pop	r15
   1edbc:	ef 90       	pop	r14
   1edbe:	df 90       	pop	r13
   1edc0:	cf 90       	pop	r12
   1edc2:	08 95       	ret

0001edc4 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1edc4:	20 91 89 02 	lds	r18, 0x0289	; 0x800289 <USB_ControlRequest+0x6>
   1edc8:	30 91 8a 02 	lds	r19, 0x028A	; 0x80028a <USB_ControlRequest+0x7>
   1edcc:	26 17       	cp	r18, r22
   1edce:	37 07       	cpc	r19, r23
   1edd0:	48 f0       	brcs	.+18     	; 0x1ede4 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1edd2:	61 15       	cp	r22, r1
   1edd4:	71 05       	cpc	r23, r1
   1edd6:	39 f4       	brne	.+14     	; 0x1ede6 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1edd8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1eddc:	2e 77       	andi	r18, 0x7E	; 126
   1edde:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ede2:	01 c0       	rjmp	.+2      	; 0x1ede6 <Endpoint_Write_Control_Stream_LE+0x22>
   1ede4:	b9 01       	movw	r22, r18
   1ede6:	fc 01       	movw	r30, r24
   1ede8:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1edea:	61 15       	cp	r22, r1
   1edec:	71 05       	cpc	r23, r1
   1edee:	61 f1       	breq	.+88     	; 0x1ee48 <Endpoint_Write_Control_Stream_LE+0x84>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1edf0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1edf2:	88 23       	and	r24, r24
   1edf4:	d9 f1       	breq	.+118    	; 0x1ee6c <Endpoint_Write_Control_Stream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1edf6:	85 30       	cpi	r24, 0x05	; 5
   1edf8:	d9 f1       	breq	.+118    	; 0x1ee70 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1edfa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1edfe:	83 fd       	sbrc	r24, 3
   1ee00:	39 c0       	rjmp	.+114    	; 0x1ee74 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ee02:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1ee06:	82 fd       	sbrc	r24, 2
   1ee08:	2b c0       	rjmp	.+86     	; 0x1ee60 <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ee0a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
   1ee0e:	80 ff       	sbrs	r24, 0
   1ee10:	ec cf       	rjmp	.-40     	; 0x1edea <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1ee12:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1ee16:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1ee1a:	61 15       	cp	r22, r1
   1ee1c:	71 05       	cpc	r23, r1
   1ee1e:	51 f0       	breq	.+20     	; 0x1ee34 <Endpoint_Write_Control_Stream_LE+0x70>
   1ee20:	88 30       	cpi	r24, 0x08	; 8
   1ee22:	91 05       	cpc	r25, r1
   1ee24:	38 f4       	brcc	.+14     	; 0x1ee34 <Endpoint_Write_Control_Stream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1ee26:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1ee28:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1ee2c:	61 50       	subi	r22, 0x01	; 1
   1ee2e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
   1ee30:	01 96       	adiw	r24, 0x01	; 1
   1ee32:	f3 cf       	rjmp	.-26     	; 0x1ee1a <Endpoint_Write_Control_Stream_LE+0x56>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1ee34:	21 e0       	ldi	r18, 0x01	; 1
   1ee36:	08 97       	sbiw	r24, 0x08	; 8
   1ee38:	09 f0       	breq	.+2      	; 0x1ee3c <Endpoint_Write_Control_Stream_LE+0x78>
   1ee3a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ee3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ee40:	8e 77       	andi	r24, 0x7E	; 126
   1ee42:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ee46:	d1 cf       	rjmp	.-94     	; 0x1edea <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1ee48:	21 11       	cpse	r18, r1
   1ee4a:	d2 cf       	rjmp	.-92     	; 0x1edf0 <Endpoint_Write_Control_Stream_LE+0x2c>
   1ee4c:	09 c0       	rjmp	.+18     	; 0x1ee60 <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ee4e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ee50:	88 23       	and	r24, r24
   1ee52:	61 f0       	breq	.+24     	; 0x1ee6c <Endpoint_Write_Control_Stream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1ee54:	85 30       	cpi	r24, 0x05	; 5
   1ee56:	61 f0       	breq	.+24     	; 0x1ee70 <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ee58:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1ee5c:	83 fd       	sbrc	r24, 3
   1ee5e:	0a c0       	rjmp	.+20     	; 0x1ee74 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ee60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1ee64:	82 ff       	sbrs	r24, 2
   1ee66:	f3 cf       	rjmp	.-26     	; 0x1ee4e <Endpoint_Write_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1ee68:	80 e0       	ldi	r24, 0x00	; 0
   1ee6a:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1ee6c:	82 e0       	ldi	r24, 0x02	; 2
   1ee6e:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1ee70:	83 e0       	ldi	r24, 0x03	; 3
   1ee72:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1ee74:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1ee76:	08 95       	ret

0001ee78 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
   1ee78:	8f 70       	andi	r24, 0x0F	; 15
   1ee7a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1ee7e:	eb ee       	ldi	r30, 0xEB	; 235
   1ee80:	f0 e0       	ldi	r31, 0x00	; 0
   1ee82:	80 81       	ld	r24, Z
   1ee84:	81 60       	ori	r24, 0x01	; 1
   1ee86:	80 83       	st	Z, r24
   1ee88:	ed ee       	ldi	r30, 0xED	; 237
   1ee8a:	f0 e0       	ldi	r31, 0x00	; 0
   1ee8c:	10 82       	st	Z, r1
   1ee8e:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
   1ee92:	40 83       	st	Z, r20
   1ee94:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
   1ee98:	88 1f       	adc	r24, r24
   1ee9a:	88 27       	eor	r24, r24
   1ee9c:	88 1f       	adc	r24, r24
   1ee9e:	08 95       	ret

0001eea0 <Endpoint_ConfigureEndpointTable>:
   1eea0:	0f 93       	push	r16
   1eea2:	1f 93       	push	r17
   1eea4:	cf 93       	push	r28
   1eea6:	df 93       	push	r29
   1eea8:	06 2f       	mov	r16, r22
   1eeaa:	ec 01       	movw	r28, r24
   1eeac:	10 e0       	ldi	r17, 0x00	; 0
   1eeae:	10 17       	cp	r17, r16
   1eeb0:	71 f1       	breq	.+92     	; 0x1ef0e <Endpoint_ConfigureEndpointTable+0x6e>
   1eeb2:	68 81       	ld	r22, Y
   1eeb4:	61 11       	cpse	r22, r1
   1eeb6:	03 c0       	rjmp	.+6      	; 0x1eebe <Endpoint_ConfigureEndpointTable+0x1e>
   1eeb8:	1f 5f       	subi	r17, 0xFF	; 255
   1eeba:	25 96       	adiw	r28, 0x05	; 5
   1eebc:	f8 cf       	rjmp	.-16     	; 0x1eeae <Endpoint_ConfigureEndpointTable+0xe>
   1eebe:	2c 81       	ldd	r18, Y+4	; 0x04
   1eec0:	a9 81       	ldd	r26, Y+1	; 0x01
   1eec2:	ba 81       	ldd	r27, Y+2	; 0x02
   1eec4:	9b 81       	ldd	r25, Y+3	; 0x03
   1eec6:	86 2f       	mov	r24, r22
   1eec8:	8f 70       	andi	r24, 0x0F	; 15
   1eeca:	87 30       	cpi	r24, 0x07	; 7
   1eecc:	10 f0       	brcs	.+4      	; 0x1eed2 <Endpoint_ConfigureEndpointTable+0x32>
   1eece:	80 e0       	ldi	r24, 0x00	; 0
   1eed0:	1f c0       	rjmp	.+62     	; 0x1ef10 <Endpoint_ConfigureEndpointTable+0x70>
   1eed2:	22 30       	cpi	r18, 0x02	; 2
   1eed4:	10 f4       	brcc	.+4      	; 0x1eeda <Endpoint_ConfigureEndpointTable+0x3a>
   1eed6:	42 e0       	ldi	r20, 0x02	; 2
   1eed8:	01 c0       	rjmp	.+2      	; 0x1eedc <Endpoint_ConfigureEndpointTable+0x3c>
   1eeda:	46 e0       	ldi	r20, 0x06	; 6
   1eedc:	e8 e0       	ldi	r30, 0x08	; 8
   1eede:	f0 e0       	ldi	r31, 0x00	; 0
   1eee0:	20 e0       	ldi	r18, 0x00	; 0
   1eee2:	ea 17       	cp	r30, r26
   1eee4:	fb 07       	cpc	r31, r27
   1eee6:	20 f4       	brcc	.+8      	; 0x1eef0 <Endpoint_ConfigureEndpointTable+0x50>
   1eee8:	2f 5f       	subi	r18, 0xFF	; 255
   1eeea:	ee 0f       	add	r30, r30
   1eeec:	ff 1f       	adc	r31, r31
   1eeee:	f9 cf       	rjmp	.-14     	; 0x1eee2 <Endpoint_ConfigureEndpointTable+0x42>
   1eef0:	22 95       	swap	r18
   1eef2:	20 7f       	andi	r18, 0xF0	; 240
   1eef4:	42 2b       	or	r20, r18
   1eef6:	50 e4       	ldi	r21, 0x40	; 64
   1eef8:	95 9f       	mul	r25, r21
   1eefa:	90 01       	movw	r18, r0
   1eefc:	11 24       	eor	r1, r1
   1eefe:	66 1f       	adc	r22, r22
   1ef00:	66 27       	eor	r22, r22
   1ef02:	66 1f       	adc	r22, r22
   1ef04:	62 2b       	or	r22, r18
   1ef06:	b8 df       	rcall	.-144    	; 0x1ee78 <Endpoint_ConfigureEndpoint_Prv>
   1ef08:	81 11       	cpse	r24, r1
   1ef0a:	d6 cf       	rjmp	.-84     	; 0x1eeb8 <Endpoint_ConfigureEndpointTable+0x18>
   1ef0c:	e0 cf       	rjmp	.-64     	; 0x1eece <Endpoint_ConfigureEndpointTable+0x2e>
   1ef0e:	81 e0       	ldi	r24, 0x01	; 1
   1ef10:	df 91       	pop	r29
   1ef12:	cf 91       	pop	r28
   1ef14:	1f 91       	pop	r17
   1ef16:	0f 91       	pop	r16
   1ef18:	08 95       	ret

0001ef1a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1ef1a:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <USB_ControlRequest>
   1ef1e:	87 ff       	sbrs	r24, 7
   1ef20:	0f c0       	rjmp	.+30     	; 0x1ef40 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ef22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
   1ef26:	82 fd       	sbrc	r24, 2
   1ef28:	04 c0       	rjmp	.+8      	; 0x1ef32 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ef2a:	8e b3       	in	r24, 0x1e	; 30
   1ef2c:	81 11       	cpse	r24, r1
   1ef2e:	f9 cf       	rjmp	.-14     	; 0x1ef22 <Endpoint_ClearStatusStage+0x8>
   1ef30:	10 c0       	rjmp	.+32     	; 0x1ef52 <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ef32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ef36:	8b 77       	andi	r24, 0x7B	; 123
   1ef38:	0a c0       	rjmp	.+20     	; 0x1ef4e <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ef3a:	8e b3       	in	r24, 0x1e	; 30
   1ef3c:	88 23       	and	r24, r24
   1ef3e:	49 f0       	breq	.+18     	; 0x1ef52 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ef40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1ef44:	80 ff       	sbrs	r24, 0
   1ef46:	f9 cf       	rjmp	.-14     	; 0x1ef3a <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ef48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ef4c:	8e 77       	andi	r24, 0x7E	; 126
   1ef4e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ef52:	08 95       	ret

0001ef54 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
   1ef54:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
   1ef58:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
   1ef5c:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1ef5e:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
   1ef62:	84 2f       	mov	r24, r20
   1ef64:	81 70       	andi	r24, 0x01	; 1
   1ef66:	40 ff       	sbrs	r20, 0
   1ef68:	22 c0       	rjmp	.+68     	; 0x1efae <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ef6a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
   1ef6e:	80 fd       	sbrc	r24, 0
   1ef70:	1c c0       	rjmp	.+56     	; 0x1efaa <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ef72:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ef74:	88 23       	and	r24, r24
   1ef76:	99 f0       	breq	.+38     	; 0x1ef9e <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1ef78:	85 30       	cpi	r24, 0x05	; 5
   1ef7a:	99 f0       	breq	.+38     	; 0x1efa2 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1ef7c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
   1ef80:	85 fd       	sbrc	r24, 5
   1ef82:	11 c0       	rjmp	.+34     	; 0x1efa6 <Endpoint_WaitUntilReady+0x52>
   1ef84:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
   1ef88:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
   1ef8c:	24 17       	cp	r18, r20
   1ef8e:	35 07       	cpc	r19, r21
   1ef90:	31 f3       	breq	.-52     	; 0x1ef5e <Endpoint_WaitUntilReady+0xa>
   1ef92:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
   1ef94:	11 f0       	breq	.+4      	; 0x1ef9a <Endpoint_WaitUntilReady+0x46>
   1ef96:	9a 01       	movw	r18, r20
   1ef98:	e2 cf       	rjmp	.-60     	; 0x1ef5e <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
   1ef9a:	84 e0       	ldi	r24, 0x04	; 4
   1ef9c:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
   1ef9e:	82 e0       	ldi	r24, 0x02	; 2
   1efa0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
   1efa2:	83 e0       	ldi	r24, 0x03	; 3
   1efa4:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
   1efa6:	81 e0       	ldi	r24, 0x01	; 1
   1efa8:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
   1efaa:	80 e0       	ldi	r24, 0x00	; 0
   1efac:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1efae:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
   1efb2:	42 ff       	sbrs	r20, 2
   1efb4:	de cf       	rjmp	.-68     	; 0x1ef72 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
   1efb6:	08 95       	ret

0001efb8 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
   1efb8:	0f 93       	push	r16
   1efba:	1f 93       	push	r17
   1efbc:	cf 93       	push	r28
   1efbe:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1efc0:	49 d0       	rcall	.+146    	; 0x1f054 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1efc2:	50 d0       	rcall	.+160    	; 0x1f064 <USB_INT_ClearAllInterrupts>
   1efc4:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1efc6:	d0 e0       	ldi	r29, 0x00	; 0
   1efc8:	88 81       	ld	r24, Y
   1efca:	8f 77       	andi	r24, 0x7F	; 127
   1efcc:	88 83       	st	Y, r24
   1efce:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
   1efd0:	80 68       	ori	r24, 0x80	; 128
   1efd2:	88 83       	st	Y, r24
   1efd4:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1efd6:	8f 7d       	andi	r24, 0xDF	; 223
   1efd8:	88 83       	st	Y, r24
   1efda:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1efdc:	f0 e0       	ldi	r31, 0x00	; 0
   1efde:	80 81       	ld	r24, Z
   1efe0:	80 68       	ori	r24, 0x80	; 128
   1efe2:	80 83       	st	Z, r24
   1efe4:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1efe6:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
   1efe8:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
   1efec:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1efee:	10 e0       	ldi	r17, 0x00	; 0
   1eff0:	f8 01       	movw	r30, r16
   1eff2:	80 81       	ld	r24, Z
   1eff4:	8b 7f       	andi	r24, 0xFB	; 251
   1eff6:	80 83       	st	Z, r24
   1eff8:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1effa:	81 60       	ori	r24, 0x01	; 1
   1effc:	88 83       	st	Y, r24
   1effe:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1f000:	60 e0       	ldi	r22, 0x00	; 0
   1f002:	80 e0       	ldi	r24, 0x00	; 0
   1f004:	39 df       	rcall	.-398    	; 0x1ee78 <Endpoint_ConfigureEndpoint_Prv>
   1f006:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1f008:	f0 e0       	ldi	r31, 0x00	; 0
   1f00a:	80 81       	ld	r24, Z
   1f00c:	8e 7f       	andi	r24, 0xFE	; 254
   1f00e:	80 83       	st	Z, r24
   1f010:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1f012:	f0 e0       	ldi	r31, 0x00	; 0
   1f014:	80 81       	ld	r24, Z
   1f016:	81 60       	ori	r24, 0x01	; 1
   1f018:	80 83       	st	Z, r24
   1f01a:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1f01c:	88 60       	ori	r24, 0x08	; 8
   1f01e:	80 83       	st	Z, r24
   1f020:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1f022:	80 81       	ld	r24, Z
   1f024:	8e 7f       	andi	r24, 0xFE	; 254
   1f026:	80 83       	st	Z, r24
   1f028:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
   1f02a:	80 61       	ori	r24, 0x10	; 16
   1f02c:	88 83       	st	Y, r24
   1f02e:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1f030:	cf 91       	pop	r28
   1f032:	1f 91       	pop	r17
   1f034:	0f 91       	pop	r16
   1f036:	08 95       	ret

0001f038 <USB_Init>:
   1f038:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
   1f03a:	f0 e0       	ldi	r31, 0x00	; 0
   1f03c:	80 81       	ld	r24, Z
   1f03e:	8f 7e       	andi	r24, 0xEF	; 239
   1f040:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
   1f042:	e7 ed       	ldi	r30, 0xD7	; 215
   1f044:	f0 e0       	ldi	r31, 0x00	; 0
   1f046:	80 81       	ld	r24, Z
   1f048:	81 60       	ori	r24, 0x01	; 1
   1f04a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1f04c:	81 e0       	ldi	r24, 0x01	; 1
   1f04e:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <USB_IsInitialized>

	USB_ResetInterface();
   1f052:	b2 cf       	rjmp	.-156    	; 0x1efb8 <USB_ResetInterface>

0001f054 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1f054:	e8 ed       	ldi	r30, 0xD8	; 216
   1f056:	f0 e0       	ldi	r31, 0x00	; 0
   1f058:	80 81       	ld	r24, Z
   1f05a:	8c 7f       	andi	r24, 0xFC	; 252
   1f05c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1f05e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f062:	08 95       	ret

0001f064 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1f064:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1f068:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1f06c:	08 95       	ret

0001f06e <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1f06e:	1f 92       	push	r1
   1f070:	0f 92       	push	r0
   1f072:	0f b6       	in	r0, 0x3f	; 63
   1f074:	0f 92       	push	r0
   1f076:	11 24       	eor	r1, r1
   1f078:	0b b6       	in	r0, 0x3b	; 59
   1f07a:	0f 92       	push	r0
   1f07c:	2f 93       	push	r18
   1f07e:	3f 93       	push	r19
   1f080:	4f 93       	push	r20
   1f082:	5f 93       	push	r21
   1f084:	6f 93       	push	r22
   1f086:	7f 93       	push	r23
   1f088:	8f 93       	push	r24
   1f08a:	9f 93       	push	r25
   1f08c:	af 93       	push	r26
   1f08e:	bf 93       	push	r27
   1f090:	ef 93       	push	r30
   1f092:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1f094:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1f098:	80 ff       	sbrs	r24, 0
   1f09a:	1b c0       	rjmp	.+54     	; 0x1f0d2 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1f09c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1f0a0:	80 ff       	sbrs	r24, 0
   1f0a2:	17 c0       	rjmp	.+46     	; 0x1f0d2 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1f0a4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
   1f0a8:	8e 7f       	andi	r24, 0xFE	; 254
   1f0aa:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1f0ae:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1f0b2:	80 ff       	sbrs	r24, 0
   1f0b4:	0b c0       	rjmp	.+22     	; 0x1f0cc <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1f0b6:	84 e1       	ldi	r24, 0x14	; 20
   1f0b8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1f0ba:	86 e1       	ldi	r24, 0x16	; 22
   1f0bc:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1f0be:	09 b4       	in	r0, 0x29	; 41
   1f0c0:	00 fe       	sbrs	r0, 0
   1f0c2:	fd cf       	rjmp	.-6      	; 0x1f0be <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1f0c4:	81 e0       	ldi	r24, 0x01	; 1
   1f0c6:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1f0c8:	fb d8       	rcall	.-3594   	; 0x1e2c0 <EVENT_USB_Device_Connect>
   1f0ca:	03 c0       	rjmp	.+6      	; 0x1f0d2 <__vector_10+0x64>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f0cc:	19 bc       	out	0x29, r1	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
			EVENT_USB_Device_Disconnect();
   1f0ce:	1e ba       	out	0x1e, r1	; 30
   1f0d0:	f8 d8       	rcall	.-3600   	; 0x1e2c2 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1f0d2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1f0d6:	80 ff       	sbrs	r24, 0
   1f0d8:	17 c0       	rjmp	.+46     	; 0x1f108 <__vector_10+0x9a>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1f0da:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f0de:	80 ff       	sbrs	r24, 0
   1f0e0:	13 c0       	rjmp	.+38     	; 0x1f108 <__vector_10+0x9a>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1f0e2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f0e6:	8e 7f       	andi	r24, 0xFE	; 254
   1f0e8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1f0ec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f0f0:	80 61       	ori	r24, 0x10	; 16
   1f0f2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
   1f0f6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1f0fa:	80 62       	ori	r24, 0x20	; 32
   1f0fc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f100:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1f102:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
   1f104:	8e bb       	out	0x1e, r24	; 30
   1f106:	c9 d1       	rcall	.+914    	; 0x1f49a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1f108:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1f10c:	84 ff       	sbrs	r24, 4
   1f10e:	2e c0       	rjmp	.+92     	; 0x1f16c <__vector_10+0xfe>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1f110:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f114:	84 ff       	sbrs	r24, 4
   1f116:	2a c0       	rjmp	.+84     	; 0x1f16c <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1f118:	84 e1       	ldi	r24, 0x14	; 20
   1f11a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1f11c:	86 e1       	ldi	r24, 0x16	; 22
   1f11e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1f120:	09 b4       	in	r0, 0x29	; 41
   1f122:	00 fe       	sbrs	r0, 0
   1f124:	fd cf       	rjmp	.-6      	; 0x1f120 <__vector_10+0xb2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1f126:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1f12a:	8f 7d       	andi	r24, 0xDF	; 223
   1f12c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1f130:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1f134:	8f 7e       	andi	r24, 0xEF	; 239
   1f136:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1f13a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f13e:	8f 7e       	andi	r24, 0xEF	; 239
   1f140:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1f144:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f148:	81 60       	ori	r24, 0x01	; 1
   1f14a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1f14e:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <USB_Device_ConfigurationNumber>
   1f152:	88 23       	and	r24, r24
   1f154:	11 f0       	breq	.+4      	; 0x1f15a <__vector_10+0xec>
		  USB_DeviceState = DEVICE_STATE_Configured;
   1f156:	84 e0       	ldi	r24, 0x04	; 4
   1f158:	07 c0       	rjmp	.+14     	; 0x1f168 <__vector_10+0xfa>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1f15a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
   1f15e:	87 fd       	sbrc	r24, 7
   1f160:	02 c0       	rjmp	.+4      	; 0x1f166 <__vector_10+0xf8>
   1f162:	81 e0       	ldi	r24, 0x01	; 1
   1f164:	01 c0       	rjmp	.+2      	; 0x1f168 <__vector_10+0xfa>
   1f166:	83 e0       	ldi	r24, 0x03	; 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1f168:	8e bb       	out	0x1e, r24	; 30
   1f16a:	97 d1       	rcall	.+814    	; 0x1f49a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1f16c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1f170:	83 ff       	sbrs	r24, 3
   1f172:	26 c0       	rjmp	.+76     	; 0x1f1c0 <__vector_10+0x152>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1f174:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f178:	83 ff       	sbrs	r24, 3
   1f17a:	22 c0       	rjmp	.+68     	; 0x1f1c0 <__vector_10+0x152>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1f17c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1f180:	87 7f       	andi	r24, 0xF7	; 247
   1f182:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1f186:	82 e0       	ldi	r24, 0x02	; 2
   1f188:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
   1f18a:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1f18e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1f192:	8e 7f       	andi	r24, 0xFE	; 254
   1f194:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1f198:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f19c:	8e 7f       	andi	r24, 0xFE	; 254
   1f19e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1f1a2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1f1a6:	80 61       	ori	r24, 0x10	; 16
   1f1a8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1f1ac:	42 e0       	ldi	r20, 0x02	; 2
   1f1ae:	60 e0       	ldi	r22, 0x00	; 0
   1f1b0:	80 e0       	ldi	r24, 0x00	; 0
   1f1b2:	62 de       	rcall	.-828    	; 0x1ee78 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
   1f1b4:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
   1f1b8:	88 60       	ori	r24, 0x08	; 8
   1f1ba:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1f1be:	6d d1       	rcall	.+730    	; 0x1f49a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1f1c0:	ff 91       	pop	r31
   1f1c2:	ef 91       	pop	r30
   1f1c4:	bf 91       	pop	r27
   1f1c6:	af 91       	pop	r26
   1f1c8:	9f 91       	pop	r25
   1f1ca:	8f 91       	pop	r24
   1f1cc:	7f 91       	pop	r23
   1f1ce:	6f 91       	pop	r22
   1f1d0:	5f 91       	pop	r21
   1f1d2:	4f 91       	pop	r20
   1f1d4:	3f 91       	pop	r19
   1f1d6:	2f 91       	pop	r18
   1f1d8:	0f 90       	pop	r0
   1f1da:	0b be       	out	0x3b, r0	; 59
   1f1dc:	0f 90       	pop	r0
   1f1de:	0f be       	out	0x3f, r0	; 63
   1f1e0:	0f 90       	pop	r0
   1f1e2:	1f 90       	pop	r1
   1f1e4:	18 95       	reti

0001f1e6 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
   1f1e6:	1f 92       	push	r1
   1f1e8:	0f 92       	push	r0
   1f1ea:	0f b6       	in	r0, 0x3f	; 63
   1f1ec:	0f 92       	push	r0
   1f1ee:	11 24       	eor	r1, r1
   1f1f0:	0b b6       	in	r0, 0x3b	; 59
   1f1f2:	0f 92       	push	r0
   1f1f4:	2f 93       	push	r18
   1f1f6:	3f 93       	push	r19
   1f1f8:	4f 93       	push	r20
   1f1fa:	5f 93       	push	r21
   1f1fc:	6f 93       	push	r22
   1f1fe:	7f 93       	push	r23
   1f200:	8f 93       	push	r24
   1f202:	9f 93       	push	r25
   1f204:	af 93       	push	r26
   1f206:	bf 93       	push	r27
   1f208:	cf 93       	push	r28
   1f20a:	df 93       	push	r29
   1f20c:	ef 93       	push	r30
   1f20e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1f210:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1f214:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1f216:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
   1f21a:	d8 2f       	mov	r29, r24
   1f21c:	d1 70       	andi	r29, 0x01	; 1
   1f21e:	80 fd       	sbrc	r24, 0
   1f220:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f222:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
   1f226:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
   1f22a:	87 7f       	andi	r24, 0xF7	; 247
   1f22c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
   1f230:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
   1f232:	20 d0       	rcall	.+64     	; 0x1f274 <USB_Device_ProcessControlRequest>
   1f234:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
   1f238:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
   1f23c:	88 60       	ori	r24, 0x08	; 8
   1f23e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
   1f242:	cd 2b       	or	r28, r29
   1f244:	cf 70       	andi	r28, 0x0F	; 15
   1f246:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
   1f24a:	ff 91       	pop	r31
   1f24c:	ef 91       	pop	r30
   1f24e:	df 91       	pop	r29
   1f250:	cf 91       	pop	r28
   1f252:	bf 91       	pop	r27
   1f254:	af 91       	pop	r26
   1f256:	9f 91       	pop	r25
   1f258:	8f 91       	pop	r24
   1f25a:	7f 91       	pop	r23
   1f25c:	6f 91       	pop	r22
   1f25e:	5f 91       	pop	r21
   1f260:	4f 91       	pop	r20
   1f262:	3f 91       	pop	r19
   1f264:	2f 91       	pop	r18
   1f266:	0f 90       	pop	r0
   1f268:	0b be       	out	0x3b, r0	; 59
   1f26a:	0f 90       	pop	r0
   1f26c:	0f be       	out	0x3f, r0	; 63
   1f26e:	0f 90       	pop	r0
   1f270:	1f 90       	pop	r1
   1f272:	18 95       	reti

0001f274 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1f274:	1f 93       	push	r17
   1f276:	cf 93       	push	r28
   1f278:	df 93       	push	r29
   1f27a:	00 d0       	rcall	.+0      	; 0x1f27c <USB_Device_ProcessControlRequest+0x8>
   1f27c:	cd b7       	in	r28, 0x3d	; 61
   1f27e:	de b7       	in	r29, 0x3e	; 62
   1f280:	e3 e8       	ldi	r30, 0x83	; 131
   1f282:	f2 e0       	ldi	r31, 0x02	; 2
   1f284:	8b e8       	ldi	r24, 0x8B	; 139
   1f286:	92 e0       	ldi	r25, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1f288:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1f28c:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1f28e:	8e 17       	cp	r24, r30
   1f290:	9f 07       	cpc	r25, r31
   1f292:	d1 f7       	brne	.-12     	; 0x1f288 <USB_Device_ProcessControlRequest+0x14>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1f294:	1a d8       	rcall	.-4044   	; 0x1e2ca <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1f296:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
   1f29a:	83 ff       	sbrs	r24, 3
   1f29c:	ea c0       	rjmp	.+468    	; 0x1f472 <USB_Device_ProcessControlRequest+0x1fe>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1f29e:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
   1f2a2:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <USB_ControlRequest+0x1>
   1f2a6:	95 30       	cpi	r25, 0x05	; 5
   1f2a8:	09 f4       	brne	.+2      	; 0x1f2ac <USB_Device_ProcessControlRequest+0x38>
   1f2aa:	6f c0       	rjmp	.+222    	; 0x1f38a <USB_Device_ProcessControlRequest+0x116>
   1f2ac:	30 f4       	brcc	.+12     	; 0x1f2ba <USB_Device_ProcessControlRequest+0x46>
   1f2ae:	91 30       	cpi	r25, 0x01	; 1
   1f2b0:	71 f1       	breq	.+92     	; 0x1f30e <USB_Device_ProcessControlRequest+0x9a>
   1f2b2:	68 f0       	brcs	.+26     	; 0x1f2ce <USB_Device_ProcessControlRequest+0x5a>
   1f2b4:	93 30       	cpi	r25, 0x03	; 3
   1f2b6:	59 f1       	breq	.+86     	; 0x1f30e <USB_Device_ProcessControlRequest+0x9a>
   1f2b8:	dc c0       	rjmp	.+440    	; 0x1f472 <USB_Device_ProcessControlRequest+0x1fe>
   1f2ba:	98 30       	cpi	r25, 0x08	; 8
   1f2bc:	09 f4       	brne	.+2      	; 0x1f2c0 <USB_Device_ProcessControlRequest+0x4c>
   1f2be:	a9 c0       	rjmp	.+338    	; 0x1f412 <USB_Device_ProcessControlRequest+0x19e>
   1f2c0:	99 30       	cpi	r25, 0x09	; 9
   1f2c2:	09 f4       	brne	.+2      	; 0x1f2c6 <USB_Device_ProcessControlRequest+0x52>
   1f2c4:	b5 c0       	rjmp	.+362    	; 0x1f430 <USB_Device_ProcessControlRequest+0x1bc>
   1f2c6:	96 30       	cpi	r25, 0x06	; 6
   1f2c8:	09 f0       	breq	.+2      	; 0x1f2cc <USB_Device_ProcessControlRequest+0x58>
   1f2ca:	d3 c0       	rjmp	.+422    	; 0x1f472 <USB_Device_ProcessControlRequest+0x1fe>
   1f2cc:	7f c0       	rjmp	.+254    	; 0x1f3cc <USB_Device_ProcessControlRequest+0x158>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1f2ce:	80 38       	cpi	r24, 0x80	; 128
   1f2d0:	99 f0       	breq	.+38     	; 0x1f2f8 <USB_Device_ProcessControlRequest+0x84>
   1f2d2:	82 38       	cpi	r24, 0x82	; 130
   1f2d4:	09 f0       	breq	.+2      	; 0x1f2d8 <USB_Device_ProcessControlRequest+0x64>
   1f2d6:	cd c0       	rjmp	.+410    	; 0x1f472 <USB_Device_ProcessControlRequest+0x1fe>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1f2d8:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <USB_ControlRequest+0x4>
   1f2dc:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
   1f2de:	87 30       	cpi	r24, 0x07	; 7
   1f2e0:	08 f0       	brcs	.+2      	; 0x1f2e4 <USB_Device_ProcessControlRequest+0x70>
   1f2e2:	c7 c0       	rjmp	.+398    	; 0x1f472 <USB_Device_ProcessControlRequest+0x1fe>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f2e4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1f2e8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
   1f2ec:	85 fb       	bst	r24, 5
   1f2ee:	88 27       	eor	r24, r24
   1f2f0:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f2f2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1f2f6:	01 c0       	rjmp	.+2      	; 0x1f2fa <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
   1f2f8:	80 e0       	ldi	r24, 0x00	; 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f2fa:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f2fe:	97 7f       	andi	r25, 0xF7	; 247
   1f300:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1f304:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
   1f308:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1f30c:	8d c0       	rjmp	.+282    	; 0x1f428 <USB_Device_ProcessControlRequest+0x1b4>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1f30e:	28 2f       	mov	r18, r24
   1f310:	2d 7f       	andi	r18, 0xFD	; 253
   1f312:	09 f0       	breq	.+2      	; 0x1f316 <USB_Device_ProcessControlRequest+0xa2>
   1f314:	ae c0       	rjmp	.+348    	; 0x1f472 <USB_Device_ProcessControlRequest+0x1fe>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
   1f316:	82 30       	cpi	r24, 0x02	; 2
   1f318:	09 f0       	breq	.+2      	; 0x1f31c <USB_Device_ProcessControlRequest+0xa8>
   1f31a:	ab c0       	rjmp	.+342    	; 0x1f472 <USB_Device_ProcessControlRequest+0x1fe>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1f31c:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <USB_ControlRequest+0x2>
   1f320:	81 11       	cpse	r24, r1
   1f322:	2a c0       	rjmp	.+84     	; 0x1f378 <USB_Device_ProcessControlRequest+0x104>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1f324:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <USB_ControlRequest+0x4>
   1f328:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
   1f32a:	2f ef       	ldi	r18, 0xFF	; 255
   1f32c:	28 0f       	add	r18, r24
   1f32e:	26 30       	cpi	r18, 0x06	; 6
   1f330:	08 f0       	brcs	.+2      	; 0x1f334 <USB_Device_ProcessControlRequest+0xc0>
   1f332:	9f c0       	rjmp	.+318    	; 0x1f472 <USB_Device_ProcessControlRequest+0x1fe>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f334:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1f338:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   1f33c:	20 ff       	sbrs	r18, 0
   1f33e:	1c c0       	rjmp	.+56     	; 0x1f378 <USB_Device_ProcessControlRequest+0x104>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   1f340:	93 30       	cpi	r25, 0x03	; 3
   1f342:	21 f4       	brne	.+8      	; 0x1f34c <USB_Device_ProcessControlRequest+0xd8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1f344:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1f348:	80 62       	ori	r24, 0x20	; 32
   1f34a:	14 c0       	rjmp	.+40     	; 0x1f374 <USB_Device_ProcessControlRequest+0x100>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1f34c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1f350:	90 61       	ori	r25, 0x10	; 16
   1f352:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1f356:	21 e0       	ldi	r18, 0x01	; 1
   1f358:	30 e0       	ldi	r19, 0x00	; 0
   1f35a:	a9 01       	movw	r20, r18
   1f35c:	02 c0       	rjmp	.+4      	; 0x1f362 <USB_Device_ProcessControlRequest+0xee>
   1f35e:	44 0f       	add	r20, r20
   1f360:	55 1f       	adc	r21, r21
   1f362:	8a 95       	dec	r24
   1f364:	e2 f7       	brpl	.-8      	; 0x1f35e <USB_Device_ProcessControlRequest+0xea>
   1f366:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
   1f36a:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1f36e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1f372:	88 60       	ori	r24, 0x08	; 8
   1f374:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f378:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f37c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f380:	87 7f       	andi	r24, 0xF7	; 247
   1f382:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1f386:	c9 dd       	rcall	.-1134   	; 0x1ef1a <Endpoint_ClearStatusStage>
   1f388:	74 c0       	rjmp	.+232    	; 0x1f472 <USB_Device_ProcessControlRequest+0x1fe>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1f38a:	81 11       	cpse	r24, r1
   1f38c:	72 c0       	rjmp	.+228    	; 0x1f472 <USB_Device_ProcessControlRequest+0x1fe>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
   1f38e:	10 91 85 02 	lds	r17, 0x0285	; 0x800285 <USB_ControlRequest+0x2>
   1f392:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1f394:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
   1f398:	80 78       	andi	r24, 0x80	; 128
   1f39a:	81 2b       	or	r24, r17
   1f39c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
   1f3a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f3a4:	87 7f       	andi	r24, 0xF7	; 247
   1f3a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1f3aa:	b7 dd       	rcall	.-1170   	; 0x1ef1a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f3ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
   1f3b0:	80 ff       	sbrs	r24, 0
   1f3b2:	fc cf       	rjmp	.-8      	; 0x1f3ac <USB_Device_ProcessControlRequest+0x138>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
   1f3b4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
   1f3b8:	80 68       	ori	r24, 0x80	; 128
   1f3ba:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1f3be:	11 11       	cpse	r17, r1
   1f3c0:	02 c0       	rjmp	.+4      	; 0x1f3c6 <USB_Device_ProcessControlRequest+0x152>
   1f3c2:	82 e0       	ldi	r24, 0x02	; 2
   1f3c4:	01 c0       	rjmp	.+2      	; 0x1f3c8 <USB_Device_ProcessControlRequest+0x154>
   1f3c6:	83 e0       	ldi	r24, 0x03	; 3
   1f3c8:	8e bb       	out	0x1e, r24	; 30
   1f3ca:	53 c0       	rjmp	.+166    	; 0x1f472 <USB_Device_ProcessControlRequest+0x1fe>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1f3cc:	80 58       	subi	r24, 0x80	; 128
   1f3ce:	82 30       	cpi	r24, 0x02	; 2
   1f3d0:	08 f0       	brcs	.+2      	; 0x1f3d4 <USB_Device_ProcessControlRequest+0x160>
   1f3d2:	4f c0       	rjmp	.+158    	; 0x1f472 <USB_Device_ProcessControlRequest+0x1fe>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1f3d4:	60 91 87 02 	lds	r22, 0x0287	; 0x800287 <USB_ControlRequest+0x4>
   1f3d8:	70 91 88 02 	lds	r23, 0x0288	; 0x800288 <USB_ControlRequest+0x5>
   1f3dc:	ae 01       	movw	r20, r28
   1f3de:	4f 5f       	subi	r20, 0xFF	; 255
   1f3e0:	5f 4f       	sbci	r21, 0xFF	; 255
   1f3e2:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <USB_ControlRequest+0x2>
   1f3e6:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <USB_ControlRequest+0x3>
   1f3ea:	0e 94 6c f1 	call	0x1e2d8	; 0x1e2d8 <CALLBACK_USB_GetDescriptor>
   1f3ee:	bc 01       	movw	r22, r24
   1f3f0:	89 2b       	or	r24, r25
   1f3f2:	09 f4       	brne	.+2      	; 0x1f3f6 <USB_Device_ProcessControlRequest+0x182>
   1f3f4:	3e c0       	rjmp	.+124    	; 0x1f472 <USB_Device_ProcessControlRequest+0x1fe>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f3f6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f3fa:	97 7f       	andi	r25, 0xF7	; 247
   1f3fc:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1f400:	89 81       	ldd	r24, Y+1	; 0x01
   1f402:	9a 81       	ldd	r25, Y+2	; 0x02
   1f404:	df dc       	rcall	.-1602   	; 0x1edc4 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f406:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f40a:	8b 77       	andi	r24, 0x7B	; 123
   1f40c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f410:	30 c0       	rjmp	.+96     	; 0x1f472 <USB_Device_ProcessControlRequest+0x1fe>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1f412:	80 38       	cpi	r24, 0x80	; 128
   1f414:	71 f5       	brne	.+92     	; 0x1f472 <USB_Device_ProcessControlRequest+0x1fe>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f416:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f41a:	87 7f       	andi	r24, 0xF7	; 247
   1f41c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1f420:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f424:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f428:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f42c:	8e 77       	andi	r24, 0x7E	; 126
   1f42e:	a9 cf       	rjmp	.-174    	; 0x1f382 <USB_Device_ProcessControlRequest+0x10e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1f430:	81 11       	cpse	r24, r1
   1f432:	1f c0       	rjmp	.+62     	; 0x1f472 <USB_Device_ProcessControlRequest+0x1fe>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1f434:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <USB_ControlRequest+0x2>
   1f438:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <USB_ControlRequest+0x3>
   1f43c:	99 27       	eor	r25, r25
   1f43e:	02 97       	sbiw	r24, 0x02	; 2
   1f440:	c4 f4       	brge	.+48     	; 0x1f472 <USB_Device_ProcessControlRequest+0x1fe>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f442:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f446:	87 7f       	andi	r24, 0xF7	; 247
   1f448:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1f44c:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <USB_ControlRequest+0x2>
   1f450:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
   1f454:	62 dd       	rcall	.-1340   	; 0x1ef1a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
   1f456:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <USB_Device_ConfigurationNumber>
   1f45a:	81 11       	cpse	r24, r1
   1f45c:	06 c0       	rjmp	.+12     	; 0x1f46a <USB_Device_ProcessControlRequest+0x1f6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1f45e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1f462:	87 fd       	sbrc	r24, 7
   1f464:	02 c0       	rjmp	.+4      	; 0x1f46a <USB_Device_ProcessControlRequest+0x1f6>
   1f466:	81 e0       	ldi	r24, 0x01	; 1
   1f468:	01 c0       	rjmp	.+2      	; 0x1f46c <USB_Device_ProcessControlRequest+0x1f8>
   1f46a:	84 e0       	ldi	r24, 0x04	; 4
   1f46c:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
   1f46e:	0e 94 62 f1 	call	0x1e2c4	; 0x1e2c4 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1f472:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1f476:	83 ff       	sbrs	r24, 3
   1f478:	0a c0       	rjmp	.+20     	; 0x1f48e <USB_Device_ProcessControlRequest+0x21a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f47a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1f47e:	87 7f       	andi	r24, 0xF7	; 247
   1f480:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1f484:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1f488:	80 62       	ori	r24, 0x20	; 32
   1f48a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
   1f48e:	0f 90       	pop	r0
   1f490:	0f 90       	pop	r0
   1f492:	df 91       	pop	r29
   1f494:	cf 91       	pop	r28
   1f496:	1f 91       	pop	r17
   1f498:	08 95       	ret

0001f49a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
   1f49a:	08 95       	ret

0001f49c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1f49c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f49e:	8e b3       	in	r24, 0x1e	; 30
   1f4a0:	88 23       	and	r24, r24
   1f4a2:	99 f0       	breq	.+38     	; 0x1f4ca <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1f4a4:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1f4a8:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1f4aa:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
   1f4ae:	89 2f       	mov	r24, r25
   1f4b0:	81 70       	andi	r24, 0x01	; 1
   1f4b2:	90 fd       	sbrc	r25, 0
   1f4b4:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1f4b6:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f4b8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1f4bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
   1f4c0:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
   1f4c2:	d8 de       	rcall	.-592    	; 0x1f274 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f4c4:	cf 70       	andi	r28, 0x0F	; 15
   1f4c6:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
   1f4ca:	cf 91       	pop	r28
   1f4cc:	08 95       	ret

0001f4ce <eeprom_read_byte>:
   1f4ce:	f9 99       	sbic	0x1f, 1	; 31
   1f4d0:	fe cf       	rjmp	.-4      	; 0x1f4ce <eeprom_read_byte>
   1f4d2:	92 bd       	out	0x22, r25	; 34
   1f4d4:	81 bd       	out	0x21, r24	; 33
   1f4d6:	f8 9a       	sbi	0x1f, 0	; 31
   1f4d8:	99 27       	eor	r25, r25
   1f4da:	80 b5       	in	r24, 0x20	; 32
   1f4dc:	08 95       	ret

0001f4de <eeprom_update_byte>:
   1f4de:	26 2f       	mov	r18, r22

0001f4e0 <eeprom_update_r18>:
   1f4e0:	f9 99       	sbic	0x1f, 1	; 31
   1f4e2:	fe cf       	rjmp	.-4      	; 0x1f4e0 <eeprom_update_r18>
   1f4e4:	92 bd       	out	0x22, r25	; 34
   1f4e6:	81 bd       	out	0x21, r24	; 33
   1f4e8:	f8 9a       	sbi	0x1f, 0	; 31
   1f4ea:	01 97       	sbiw	r24, 0x01	; 1
   1f4ec:	00 b4       	in	r0, 0x20	; 32
   1f4ee:	02 16       	cp	r0, r18
   1f4f0:	39 f0       	breq	.+14     	; 0x1f500 <eeprom_update_r18+0x20>
   1f4f2:	1f ba       	out	0x1f, r1	; 31
   1f4f4:	20 bd       	out	0x20, r18	; 32
   1f4f6:	0f b6       	in	r0, 0x3f	; 63
   1f4f8:	f8 94       	cli
   1f4fa:	fa 9a       	sbi	0x1f, 2	; 31
   1f4fc:	f9 9a       	sbi	0x1f, 1	; 31
   1f4fe:	0f be       	out	0x3f, r0	; 63
   1f500:	08 95       	ret

0001f502 <_exit>:
   1f502:	f8 94       	cli

0001f504 <__stop_program>:
   1f504:	ff cf       	rjmp	.-2      	; 0x1f504 <__stop_program>
