
leobootloaderhid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  0000784e  000008e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000084e  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080014a  0080014a  0000092c  2**0
                  ALLOC
  3 .noinit       00000002  00800154  00800154  0000092c  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000095c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000220  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004887  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000189e  00000000  00000000  00005443  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006cb0  00000000  00000000  00006ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000061c  00000000  00000000  0000d994  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0001723b  00000000  00000000  0000dfb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000295a  00000000  00000000  000251eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000318  00000000  00000000  00027b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00007452  00000000  00000000  00027e5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	55 c0       	rjmp	.+170    	; 0x70ac <__ctors_end>
    7002:	00 00       	nop
    7004:	8d c0       	rjmp	.+282    	; 0x7120 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	8b c0       	rjmp	.+278    	; 0x7120 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	89 c0       	rjmp	.+274    	; 0x7120 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	87 c0       	rjmp	.+270    	; 0x7120 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	85 c0       	rjmp	.+266    	; 0x7120 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	83 c0       	rjmp	.+262    	; 0x7120 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	81 c0       	rjmp	.+258    	; 0x7120 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	7f c0       	rjmp	.+254    	; 0x7120 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	7d c0       	rjmp	.+250    	; 0x7120 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	32 c2       	rjmp	.+1124   	; 0x748e <__vector_10>
    702a:	00 00       	nop
    702c:	79 c0       	rjmp	.+242    	; 0x7120 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	77 c0       	rjmp	.+238    	; 0x7120 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	75 c0       	rjmp	.+234    	; 0x7120 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	73 c0       	rjmp	.+230    	; 0x7120 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	71 c0       	rjmp	.+226    	; 0x7120 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	6f c0       	rjmp	.+222    	; 0x7120 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	6d c0       	rjmp	.+218    	; 0x7120 <__bad_interrupt>
    7046:	00 00       	nop
    7048:	6b c0       	rjmp	.+214    	; 0x7120 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	69 c0       	rjmp	.+210    	; 0x7120 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	67 c0       	rjmp	.+206    	; 0x7120 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	65 c0       	rjmp	.+202    	; 0x7120 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	63 c0       	rjmp	.+198    	; 0x7120 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	61 c0       	rjmp	.+194    	; 0x7120 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	5f c0       	rjmp	.+190    	; 0x7120 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	5d c0       	rjmp	.+186    	; 0x7120 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	5b c0       	rjmp	.+182    	; 0x7120 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	59 c0       	rjmp	.+178    	; 0x7120 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	57 c0       	rjmp	.+174    	; 0x7120 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	55 c0       	rjmp	.+170    	; 0x7120 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	53 c0       	rjmp	.+166    	; 0x7120 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	51 c0       	rjmp	.+162    	; 0x7120 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	4f c0       	rjmp	.+158    	; 0x7120 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	4d c0       	rjmp	.+154    	; 0x7120 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	4b c0       	rjmp	.+150    	; 0x7120 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	49 c0       	rjmp	.+146    	; 0x7120 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	47 c0       	rjmp	.+142    	; 0x7120 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	45 c0       	rjmp	.+138    	; 0x7120 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	43 c0       	rjmp	.+134    	; 0x7120 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	41 c0       	rjmp	.+130    	; 0x7120 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	3f c0       	rjmp	.+126    	; 0x7120 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	3d c0       	rjmp	.+122    	; 0x7120 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	3b c0       	rjmp	.+118    	; 0x7120 <__bad_interrupt>
	...

000070ac <__ctors_end>:
    70ac:	11 24       	eor	r1, r1
    70ae:	1f be       	out	0x3f, r1	; 63
    70b0:	cf ef       	ldi	r28, 0xFF	; 255
    70b2:	da e0       	ldi	r29, 0x0A	; 10
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	cd bf       	out	0x3d, r28	; 61

000070b8 <Application_Jump_Check>:
 *  this will force the user application to start via a software jump.
 */
void Application_Jump_Check(void)
{
	/* If the reset source was the bootloader and the key is correct, clear it and jump to the application */
	if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
    70b8:	04 b6       	in	r0, 0x34	; 52
    70ba:	03 fe       	sbrs	r0, 3
    70bc:	1c c0       	rjmp	.+56     	; 0x70f6 <__do_copy_data>
    70be:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__bss_end>
    70c2:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <__bss_end+0x1>
    70c6:	82 34       	cpi	r24, 0x42	; 66
    70c8:	9c 4d       	sbci	r25, 0xDC	; 220
    70ca:	a9 f4       	brne	.+42     	; 0x70f6 <__do_copy_data>
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1 << WDRF);
    70cc:	84 b7       	in	r24, 0x34	; 52
    70ce:	87 7f       	andi	r24, 0xF7	; 247
    70d0:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    70d2:	0f b6       	in	r0, 0x3f	; 63
    70d4:	f8 94       	cli
    70d6:	a8 95       	wdr
    70d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    70dc:	88 61       	ori	r24, 0x18	; 24
    70de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    70e2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    70e6:	0f be       	out	0x3f, r0	; 63
		wdt_disable();

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
    70e8:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <__bss_end+0x1>
    70ec:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <__bss_end>

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
    70f0:	e0 e0       	ldi	r30, 0x00	; 0
    70f2:	f0 e0       	ldi	r31, 0x00	; 0
    70f4:	09 95       	icall

000070f6 <__do_copy_data>:
    70f6:	11 e0       	ldi	r17, 0x01	; 1
    70f8:	a0 e0       	ldi	r26, 0x00	; 0
    70fa:	b1 e0       	ldi	r27, 0x01	; 1
    70fc:	ee e4       	ldi	r30, 0x4E	; 78
    70fe:	f8 e7       	ldi	r31, 0x78	; 120
    7100:	02 c0       	rjmp	.+4      	; 0x7106 <__do_copy_data+0x10>
    7102:	05 90       	lpm	r0, Z+
    7104:	0d 92       	st	X+, r0
    7106:	aa 34       	cpi	r26, 0x4A	; 74
    7108:	b1 07       	cpc	r27, r17
    710a:	d9 f7       	brne	.-10     	; 0x7102 <__do_copy_data+0xc>

0000710c <__do_clear_bss>:
    710c:	21 e0       	ldi	r18, 0x01	; 1
    710e:	aa e4       	ldi	r26, 0x4A	; 74
    7110:	b1 e0       	ldi	r27, 0x01	; 1
    7112:	01 c0       	rjmp	.+2      	; 0x7116 <.do_clear_bss_start>

00007114 <.do_clear_bss_loop>:
    7114:	1d 92       	st	X+, r1

00007116 <.do_clear_bss_start>:
    7116:	a4 35       	cpi	r26, 0x54	; 84
    7118:	b2 07       	cpc	r27, r18
    711a:	e1 f7       	brne	.-8      	; 0x7114 <.do_clear_bss_loop>
    711c:	02 d0       	rcall	.+4      	; 0x7122 <main>
    711e:	95 c3       	rjmp	.+1834   	; 0x784a <_exit>

00007120 <__bad_interrupt>:
    7120:	6f cf       	rjmp	.-290    	; 0x7000 <__vectors>

00007122 <main>:

/** Configures all hardware required for the bootloader. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    7122:	84 b7       	in	r24, 0x34	; 52
    7124:	87 7f       	andi	r24, 0xF7	; 247
    7126:	84 bf       	out	0x34, r24	; 52
    7128:	0f b6       	in	r0, 0x3f	; 63
    712a:	f8 94       	cli
    712c:	a8 95       	wdr
    712e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    7132:	88 61       	ori	r24, 0x18	; 24
    7134:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    7138:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    713c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    713e:	90 e0       	ldi	r25, 0x00	; 0
    7140:	80 e8       	ldi	r24, 0x80	; 128
    7142:	0f b6       	in	r0, 0x3f	; 63
    7144:	f8 94       	cli
    7146:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
    714a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
    714e:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    7150:	81 e0       	ldi	r24, 0x01	; 1
    7152:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
    7154:	82 e0       	ldi	r24, 0x02	; 2
    7156:	85 bf       	out	0x35, r24	; 53

	/* Initialize USB subsystem */
	USB_Init();
    7158:	7d d1       	rcall	.+762    	; 0x7454 <USB_Init>
{
	/* Setup hardware required for the bootloader */
	SetupHardware();

    //modified by Dreg
    asm volatile ("sbi 0x10,0");
    715a:	80 9a       	sbi	0x10, 0	; 16
    asm volatile ("cbi 0x11,0");
    715c:	88 98       	cbi	0x11, 0	; 17
    asm volatile ("sbi 0x10,1");
    715e:	81 9a       	sbi	0x10, 1	; 16
    asm volatile ("sbi 0x11,1");
    7160:	89 9a       	sbi	0x11, 1	; 17
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    7162:	78 94       	sei
    // -
    
	/* Enable global interrupts so that the USB stack can function */
	GlobalInterruptEnable();

	while (RunBootloader)
    7164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    7168:	88 23       	and	r24, r24
	  USB_USBTask();
    716a:	11 f0       	breq	.+4      	; 0x7170 <main+0x4e>
    716c:	55 d3       	rcall	.+1706   	; 0x7818 <USB_USBTask>
    716e:	fa cf       	rjmp	.-12     	; 0x7164 <main+0x42>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    7170:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    7174:	81 60       	ori	r24, 0x01	; 1
    7176:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Unlock the forced application start mode of the bootloader if it is restarted */
	MagicBootKey = MAGIC_BOOT_KEY;
    717a:	82 e4       	ldi	r24, 0x42	; 66
    717c:	9c ed       	ldi	r25, 0xDC	; 220
    717e:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <__bss_end+0x1>
    7182:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__bss_end>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    7186:	9c e0       	ldi	r25, 0x0C	; 12
    7188:	88 e1       	ldi	r24, 0x18	; 24
    718a:	0f b6       	in	r0, 0x3f	; 63
    718c:	f8 94       	cli
    718e:	a8 95       	wdr
    7190:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    7194:	0f be       	out	0x3f, r0	; 63
    7196:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    719a:	ff cf       	rjmp	.-2      	; 0x719a <main+0x78>

0000719c <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    719c:	42 e3       	ldi	r20, 0x32	; 50
    719e:	61 ec       	ldi	r22, 0xC1	; 193
    71a0:	81 e0       	ldi	r24, 0x01	; 1
    71a2:	ec c0       	rjmp	.+472    	; 0x737c <Endpoint_ConfigureEndpoint_Prv>

000071a4 <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Ignore any requests that aren't directed to the HID interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    71a4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <USB_ControlRequest>
    71a8:	8f 77       	andi	r24, 0x7F	; 127
    71aa:	81 32       	cpi	r24, 0x21	; 33
    71ac:	09 f0       	breq	.+2      	; 0x71b0 <EVENT_USB_Device_ControlRequest+0xc>
    71ae:	65 c0       	rjmp	.+202    	; 0x727a <EVENT_USB_Device_ControlRequest+0xd6>
	{
		return;
	}

	/* Process HID specific control requests */
	switch (USB_ControlRequest.bRequest)
    71b0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <USB_ControlRequest+0x1>
    71b4:	89 30       	cpi	r24, 0x09	; 9
    71b6:	09 f0       	breq	.+2      	; 0x71ba <EVENT_USB_Device_ControlRequest+0x16>
    71b8:	60 c0       	rjmp	.+192    	; 0x727a <EVENT_USB_Device_ControlRequest+0xd6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    71ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    71be:	87 7f       	andi	r24, 0xF7	; 247
    71c0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    71c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	{
		case HID_REQ_SetReport:
			Endpoint_ClearSETUP();

			/* Wait until the command has been sent by the host */
			while (!(Endpoint_IsOUTReceived()));
    71c8:	82 ff       	sbrs	r24, 2
    71ca:	fc cf       	rjmp	.-8      	; 0x71c4 <EVENT_USB_Device_ControlRequest+0x20>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    71cc:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				Data.Bytes[1] = UEDATX;
    71d0:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>

				return Data.Value;
    71d4:	83 2f       	mov	r24, r19
    71d6:	92 2f       	mov	r25, r18

			/* Check if the command is a program page command, or a start application command */
			#if (FLASHEND > 0xFFFF)
			if ((uint16_t)(PageAddress >> 8) == COMMAND_STARTAPPLICATION)
			#else
			if (PageAddress == COMMAND_STARTAPPLICATION)
    71d8:	8f 3f       	cpi	r24, 0xFF	; 255
    71da:	2f ef       	ldi	r18, 0xFF	; 255
    71dc:	92 07       	cpc	r25, r18
    71de:	19 f4       	brne	.+6      	; 0x71e6 <EVENT_USB_Device_ControlRequest+0x42>
			#endif
			{
				RunBootloader = false;
    71e0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
    71e4:	44 c0       	rjmp	.+136    	; 0x726e <EVENT_USB_Device_ControlRequest+0xca>
			}
			else if (PageAddress < BOOT_START_ADDR)
    71e6:	81 15       	cp	r24, r1
    71e8:	e0 e7       	ldi	r30, 0x70	; 112
    71ea:	9e 07       	cpc	r25, r30
    71ec:	08 f0       	brcs	.+2      	; 0x71f0 <EVENT_USB_Device_ControlRequest+0x4c>
    71ee:	3f c0       	rjmp	.+126    	; 0x726e <EVENT_USB_Device_ControlRequest+0xca>
			{
				/* Erase the given FLASH page, ready to be programmed */
				boot_page_erase(PageAddress);
    71f0:	23 e0       	ldi	r18, 0x03	; 3
    71f2:	fc 01       	movw	r30, r24
    71f4:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    71f8:	e8 95       	spm
				boot_spm_busy_wait();
    71fa:	07 b6       	in	r0, 0x37	; 55
    71fc:	00 fc       	sbrc	r0, 0
    71fe:	fd cf       	rjmp	.-6      	; 0x71fa <EVENT_USB_Device_ControlRequest+0x56>
    7200:	40 e0       	ldi	r20, 0x00	; 0
    7202:	50 e0       	ldi	r21, 0x00	; 0
						Endpoint_ClearOUT();
						while (!(Endpoint_IsOUTReceived()));
					}

					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
    7204:	61 e0       	ldi	r22, 0x01	; 1
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7206:	70 91 f3 00 	lds	r23, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    720a:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>

				/* Write each of the FLASH page's bytes in sequence */
				for (uint8_t PageWord = 0; PageWord < (SPM_PAGESIZE / 2); PageWord++)
				{
					/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
					if (!(Endpoint_BytesInEndpoint()))
    720e:	30 e0       	ldi	r19, 0x00	; 0
    7210:	37 2b       	or	r19, r23
    7212:	23 2b       	or	r18, r19
    7214:	d9 f0       	breq	.+54     	; 0x724c <EVENT_USB_Device_ControlRequest+0xa8>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
    7216:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				Data.Bytes[1] = UEDATX;
    721a:	70 91 f1 00 	lds	r23, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>

				return Data.Value;
    721e:	2e 2f       	mov	r18, r30
    7220:	37 2f       	mov	r19, r23
						Endpoint_ClearOUT();
						while (!(Endpoint_IsOUTReceived()));
					}

					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
    7222:	fa 01       	movw	r30, r20
    7224:	ee 0f       	add	r30, r30
    7226:	ff 1f       	adc	r31, r31
    7228:	e8 0f       	add	r30, r24
    722a:	f9 1f       	adc	r31, r25
    722c:	09 01       	movw	r0, r18
    722e:	60 93 57 00 	sts	0x0057, r22	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    7232:	e8 95       	spm
    7234:	11 24       	eor	r1, r1
    7236:	4f 5f       	subi	r20, 0xFF	; 255
    7238:	5f 4f       	sbci	r21, 0xFF	; 255
				/* Erase the given FLASH page, ready to be programmed */
				boot_page_erase(PageAddress);
				boot_spm_busy_wait();

				/* Write each of the FLASH page's bytes in sequence */
				for (uint8_t PageWord = 0; PageWord < (SPM_PAGESIZE / 2); PageWord++)
    723a:	40 34       	cpi	r20, 0x40	; 64
    723c:	51 05       	cpc	r21, r1
    723e:	19 f7       	brne	.-58     	; 0x7206 <EVENT_USB_Device_ControlRequest+0x62>
					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
				}

				/* Write the filled FLASH page to memory */
				boot_page_write(PageAddress);
    7240:	25 e0       	ldi	r18, 0x05	; 5
    7242:	fc 01       	movw	r30, r24
    7244:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    7248:	e8 95       	spm
    724a:	0a c0       	rjmp	.+20     	; 0x7260 <EVENT_USB_Device_ControlRequest+0xbc>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    724c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7250:	2b 77       	andi	r18, 0x7B	; 123
    7252:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7256:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				{
					/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
					if (!(Endpoint_BytesInEndpoint()))
					{
						Endpoint_ClearOUT();
						while (!(Endpoint_IsOUTReceived()));
    725a:	22 ff       	sbrs	r18, 2
    725c:	fc cf       	rjmp	.-8      	; 0x7256 <EVENT_USB_Device_ControlRequest+0xb2>
    725e:	db cf       	rjmp	.-74     	; 0x7216 <EVENT_USB_Device_ControlRequest+0x72>
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
				}

				/* Write the filled FLASH page to memory */
				boot_page_write(PageAddress);
				boot_spm_busy_wait();
    7260:	07 b6       	in	r0, 0x37	; 55
    7262:	00 fc       	sbrc	r0, 0
    7264:	fd cf       	rjmp	.-6      	; 0x7260 <EVENT_USB_Device_ControlRequest+0xbc>

				/* Re-enable RWW section */
				boot_rww_enable();
    7266:	81 e1       	ldi	r24, 0x11	; 17
    7268:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    726c:	e8 95       	spm
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    726e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7272:	8b 77       	andi	r24, 0x7B	; 123
    7274:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			}

			Endpoint_ClearOUT();

			Endpoint_ClearStatusStage();
    7278:	95 c0       	rjmp	.+298    	; 0x73a4 <Endpoint_ClearStatusStage>
    727a:	08 95       	ret

0000727c <CALLBACK_USB_GetDescriptor>:

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    /* If/Else If chain compiles slightly smaller than a switch case */
    if (DescriptorType == DTYPE_Device)
    727c:	91 30       	cpi	r25, 0x01	; 1
    727e:	59 f0       	breq	.+22     	; 0x7296 <CALLBACK_USB_GetDescriptor+0x1a>
    {
        Address = &DeviceDescriptor;
        Size    = sizeof(USB_Descriptor_Device_t);
    }
    else if (DescriptorType == DTYPE_Configuration)
    7280:	92 30       	cpi	r25, 0x02	; 2
    7282:	71 f0       	breq	.+28     	; 0x72a0 <CALLBACK_USB_GetDescriptor+0x24>
    {
        Address = &ConfigurationDescriptor;
        Size    = sizeof(USB_Descriptor_Configuration_t);
    }
    else if (DescriptorType == HID_DTYPE_HID)
    7284:	91 32       	cpi	r25, 0x21	; 33
    7286:	89 f0       	breq	.+34     	; 0x72aa <CALLBACK_USB_GetDescriptor+0x2e>
    {
        Address = &ConfigurationDescriptor.HID_VendorHID;
        Size    = sizeof(USB_HID_Descriptor_HID_t);
    }
    else if (DescriptorType == HID_DTYPE_Report)
    7288:	92 32       	cpi	r25, 0x22	; 34
    728a:	a1 f4       	brne	.+40     	; 0x72b4 <CALLBACK_USB_GetDescriptor+0x38>
    {
        Address = &HIDReport;
        Size    = sizeof(HIDReport);
    728c:	85 e1       	ldi	r24, 0x15	; 21
    728e:	90 e0       	ldi	r25, 0x00	; 0
        Address = &ConfigurationDescriptor.HID_VendorHID;
        Size    = sizeof(USB_HID_Descriptor_HID_t);
    }
    else if (DescriptorType == HID_DTYPE_Report)
    {
        Address = &HIDReport;
    7290:	25 e3       	ldi	r18, 0x35	; 53
    7292:	31 e0       	ldi	r19, 0x01	; 1
    7294:	13 c0       	rjmp	.+38     	; 0x72bc <CALLBACK_USB_GetDescriptor+0x40>

    /* If/Else If chain compiles slightly smaller than a switch case */
    if (DescriptorType == DTYPE_Device)
    {
        Address = &DeviceDescriptor;
        Size    = sizeof(USB_Descriptor_Device_t);
    7296:	82 e1       	ldi	r24, 0x12	; 18
    7298:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    /* If/Else If chain compiles slightly smaller than a switch case */
    if (DescriptorType == DTYPE_Device)
    {
        Address = &DeviceDescriptor;
    729a:	23 e2       	ldi	r18, 0x23	; 35
    729c:	31 e0       	ldi	r19, 0x01	; 1
    729e:	0e c0       	rjmp	.+28     	; 0x72bc <CALLBACK_USB_GetDescriptor+0x40>
        Size    = sizeof(USB_Descriptor_Device_t);
    }
    else if (DescriptorType == DTYPE_Configuration)
    {
        Address = &ConfigurationDescriptor;
        Size    = sizeof(USB_Descriptor_Configuration_t);
    72a0:	82 e2       	ldi	r24, 0x22	; 34
    72a2:	90 e0       	ldi	r25, 0x00	; 0
        Address = &DeviceDescriptor;
        Size    = sizeof(USB_Descriptor_Device_t);
    }
    else if (DescriptorType == DTYPE_Configuration)
    {
        Address = &ConfigurationDescriptor;
    72a4:	21 e0       	ldi	r18, 0x01	; 1
    72a6:	31 e0       	ldi	r19, 0x01	; 1
    72a8:	09 c0       	rjmp	.+18     	; 0x72bc <CALLBACK_USB_GetDescriptor+0x40>
        Size    = sizeof(USB_Descriptor_Configuration_t);
    }
    else if (DescriptorType == HID_DTYPE_HID)
    {
        Address = &ConfigurationDescriptor.HID_VendorHID;
        Size    = sizeof(USB_HID_Descriptor_HID_t);
    72aa:	89 e0       	ldi	r24, 0x09	; 9
    72ac:	90 e0       	ldi	r25, 0x00	; 0
        Address = &ConfigurationDescriptor;
        Size    = sizeof(USB_Descriptor_Configuration_t);
    }
    else if (DescriptorType == HID_DTYPE_HID)
    {
        Address = &ConfigurationDescriptor.HID_VendorHID;
    72ae:	23 e1       	ldi	r18, 0x13	; 19
    72b0:	31 e0       	ldi	r19, 0x01	; 1
    72b2:	04 c0       	rjmp	.+8      	; 0x72bc <CALLBACK_USB_GetDescriptor+0x40>
                                    const void** const DescriptorAddress)
{
    const uint8_t DescriptorType   = (wValue >> 8);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
    72b4:	80 e0       	ldi	r24, 0x00	; 0
    72b6:	90 e0       	ldi	r25, 0x00	; 0
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t DescriptorType   = (wValue >> 8);

    const void* Address = NULL;
    72b8:	20 e0       	ldi	r18, 0x00	; 0
    72ba:	30 e0       	ldi	r19, 0x00	; 0
    {
        Address = &HIDReport;
        Size    = sizeof(HIDReport);
    }

    *DescriptorAddress = Address;
    72bc:	fa 01       	movw	r30, r20
    72be:	31 83       	std	Z+1, r19	; 0x01
    72c0:	20 83       	st	Z, r18
    return Size;
}
    72c2:	08 95       	ret

000072c4 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    72c4:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <USB_ControlRequest+0x6>
    72c8:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <USB_ControlRequest+0x7>
    72cc:	26 17       	cp	r18, r22
    72ce:	37 07       	cpc	r19, r23
    72d0:	48 f0       	brcs	.+18     	; 0x72e4 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    72d2:	61 15       	cp	r22, r1
    72d4:	71 05       	cpc	r23, r1
    72d6:	39 f4       	brne	.+14     	; 0x72e6 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    72d8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    72dc:	2e 77       	andi	r18, 0x7E	; 126
    72de:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    72e2:	01 c0       	rjmp	.+2      	; 0x72e6 <Endpoint_Write_Control_Stream_LE+0x22>
    72e4:	b9 01       	movw	r22, r18
    72e6:	fc 01       	movw	r30, r24
    72e8:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    72ea:	61 15       	cp	r22, r1
    72ec:	71 05       	cpc	r23, r1
    72ee:	71 f1       	breq	.+92     	; 0x734c <Endpoint_Write_Control_Stream_LE+0x88>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    72f0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    72f2:	88 23       	and	r24, r24
    72f4:	e9 f1       	breq	.+122    	; 0x7370 <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    72f6:	85 30       	cpi	r24, 0x05	; 5
    72f8:	e9 f1       	breq	.+122    	; 0x7374 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    72fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    72fe:	83 fd       	sbrc	r24, 3
    7300:	3b c0       	rjmp	.+118    	; 0x7378 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7302:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    7306:	82 fd       	sbrc	r24, 2
    7308:	2d c0       	rjmp	.+90     	; 0x7364 <Endpoint_Write_Control_Stream_LE+0xa0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    730a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  break;

		if (Endpoint_IsINReady())
    730e:	80 ff       	sbrs	r24, 0
    7310:	ec cf       	rjmp	.-40     	; 0x72ea <Endpoint_Write_Control_Stream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7312:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    7316:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    731a:	90 e0       	ldi	r25, 0x00	; 0
    731c:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    731e:	61 15       	cp	r22, r1
    7320:	71 05       	cpc	r23, r1
    7322:	51 f0       	breq	.+20     	; 0x7338 <Endpoint_Write_Control_Stream_LE+0x74>
    7324:	88 30       	cpi	r24, 0x08	; 8
    7326:	91 05       	cpc	r25, r1
    7328:	38 f4       	brcc	.+14     	; 0x7338 <Endpoint_Write_Control_Stream_LE+0x74>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    732a:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    732c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7330:	61 50       	subi	r22, 0x01	; 1
    7332:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    7334:	01 96       	adiw	r24, 0x01	; 1
    7336:	f3 cf       	rjmp	.-26     	; 0x731e <Endpoint_Write_Control_Stream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    7338:	21 e0       	ldi	r18, 0x01	; 1
    733a:	08 97       	sbiw	r24, 0x08	; 8
    733c:	09 f0       	breq	.+2      	; 0x7340 <Endpoint_Write_Control_Stream_LE+0x7c>
    733e:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7340:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7344:	8e 77       	andi	r24, 0x7E	; 126
    7346:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    734a:	cf cf       	rjmp	.-98     	; 0x72ea <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    734c:	21 11       	cpse	r18, r1
    734e:	d0 cf       	rjmp	.-96     	; 0x72f0 <Endpoint_Write_Control_Stream_LE+0x2c>
    7350:	09 c0       	rjmp	.+18     	; 0x7364 <Endpoint_Write_Control_Stream_LE+0xa0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7352:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7354:	88 23       	and	r24, r24
    7356:	61 f0       	breq	.+24     	; 0x7370 <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7358:	85 30       	cpi	r24, 0x05	; 5
    735a:	61 f0       	breq	.+24     	; 0x7374 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    735c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7360:	83 fd       	sbrc	r24, 3
    7362:	0a c0       	rjmp	.+20     	; 0x7378 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7364:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    7368:	82 ff       	sbrs	r24, 2
    736a:	f3 cf       	rjmp	.-26     	; 0x7352 <Endpoint_Write_Control_Stream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    736c:	80 e0       	ldi	r24, 0x00	; 0
    736e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    7370:	82 e0       	ldi	r24, 0x02	; 2
    7372:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    7374:	83 e0       	ldi	r24, 0x03	; 3
    7376:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    7378:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    737a:	08 95       	ret

0000737c <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    737c:	8f 70       	andi	r24, 0x0F	; 15
    737e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    7382:	eb ee       	ldi	r30, 0xEB	; 235
    7384:	f0 e0       	ldi	r31, 0x00	; 0
    7386:	80 81       	ld	r24, Z
    7388:	81 60       	ori	r24, 0x01	; 1
    738a:	80 83       	st	Z, r24
    738c:	ed ee       	ldi	r30, 0xED	; 237
    738e:	f0 e0       	ldi	r31, 0x00	; 0
    7390:	10 82       	st	Z, r1
    7392:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    7396:	40 83       	st	Z, r20
    7398:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
    739c:	88 1f       	adc	r24, r24
    739e:	88 27       	eor	r24, r24
    73a0:	88 1f       	adc	r24, r24
    73a2:	08 95       	ret

000073a4 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    73a4:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <USB_ControlRequest>
    73a8:	87 ff       	sbrs	r24, 7
    73aa:	0f c0       	rjmp	.+30     	; 0x73ca <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    73ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    73b0:	82 fd       	sbrc	r24, 2
    73b2:	04 c0       	rjmp	.+8      	; 0x73bc <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    73b4:	8e b3       	in	r24, 0x1e	; 30
    73b6:	81 11       	cpse	r24, r1
    73b8:	f9 cf       	rjmp	.-14     	; 0x73ac <Endpoint_ClearStatusStage+0x8>
    73ba:	10 c0       	rjmp	.+32     	; 0x73dc <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    73bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    73c0:	8b 77       	andi	r24, 0x7B	; 123
    73c2:	0a c0       	rjmp	.+20     	; 0x73d8 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    73c4:	8e b3       	in	r24, 0x1e	; 30
    73c6:	88 23       	and	r24, r24
    73c8:	49 f0       	breq	.+18     	; 0x73dc <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    73ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    73ce:	80 ff       	sbrs	r24, 0
    73d0:	f9 cf       	rjmp	.-14     	; 0x73c4 <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    73d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    73d6:	8e 77       	andi	r24, 0x7E	; 126
    73d8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    73dc:	08 95       	ret

000073de <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    73de:	0f 93       	push	r16
    73e0:	1f 93       	push	r17
    73e2:	cf 93       	push	r28
    73e4:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    73e6:	46 d0       	rcall	.+140    	; 0x7474 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    73e8:	4d d0       	rcall	.+154    	; 0x7484 <USB_INT_ClearAllInterrupts>
    73ea:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    73ec:	d0 e0       	ldi	r29, 0x00	; 0
    73ee:	88 81       	ld	r24, Y
    73f0:	8f 77       	andi	r24, 0x7F	; 127
    73f2:	88 83       	st	Y, r24
    73f4:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    73f6:	80 68       	ori	r24, 0x80	; 128
    73f8:	88 83       	st	Y, r24
    73fa:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    73fc:	8f 7d       	andi	r24, 0xDF	; 223
    73fe:	88 83       	st	Y, r24
    7400:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7402:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    7404:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
	USB_Device_ConfigurationNumber  = 0;
    7408:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    740a:	10 e0       	ldi	r17, 0x00	; 0
    740c:	f8 01       	movw	r30, r16
    740e:	80 81       	ld	r24, Z
    7410:	8b 7f       	andi	r24, 0xFB	; 251
    7412:	80 83       	st	Z, r24
    7414:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    7416:	81 60       	ori	r24, 0x01	; 1
    7418:	88 83       	st	Y, r24
    741a:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    741c:	60 e0       	ldi	r22, 0x00	; 0
    741e:	80 e0       	ldi	r24, 0x00	; 0
    7420:	ad df       	rcall	.-166    	; 0x737c <Endpoint_ConfigureEndpoint_Prv>
    7422:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7424:	f0 e0       	ldi	r31, 0x00	; 0
    7426:	80 81       	ld	r24, Z
    7428:	8e 7f       	andi	r24, 0xFE	; 254
    742a:	80 83       	st	Z, r24
    742c:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    742e:	f0 e0       	ldi	r31, 0x00	; 0
    7430:	80 81       	ld	r24, Z
    7432:	81 60       	ori	r24, 0x01	; 1
    7434:	80 83       	st	Z, r24
    7436:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    7438:	88 60       	ori	r24, 0x08	; 8
    743a:	80 83       	st	Z, r24
    743c:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    743e:	80 81       	ld	r24, Z
    7440:	8e 7f       	andi	r24, 0xFE	; 254
    7442:	80 83       	st	Z, r24
    7444:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    7446:	80 61       	ori	r24, 0x10	; 16
    7448:	88 83       	st	Y, r24
    744a:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    744c:	cf 91       	pop	r28
    744e:	1f 91       	pop	r17
    7450:	0f 91       	pop	r16
    7452:	08 95       	ret

00007454 <USB_Init>:
    7454:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    7456:	f0 e0       	ldi	r31, 0x00	; 0
    7458:	80 81       	ld	r24, Z
    745a:	8f 7e       	andi	r24, 0xEF	; 239
    745c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    745e:	e7 ed       	ldi	r30, 0xD7	; 215
    7460:	f0 e0       	ldi	r31, 0x00	; 0
    7462:	80 81       	ld	r24, Z
    7464:	81 60       	ori	r24, 0x01	; 1
    7466:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    7468:	84 e0       	ldi	r24, 0x04	; 4
    746a:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    746c:	81 e0       	ldi	r24, 0x01	; 1
    746e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <USB_IsInitialized>

	USB_ResetInterface();
    7472:	b5 cf       	rjmp	.-150    	; 0x73de <USB_ResetInterface>

00007474 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    7474:	e8 ed       	ldi	r30, 0xD8	; 216
    7476:	f0 e0       	ldi	r31, 0x00	; 0
    7478:	80 81       	ld	r24, Z
    747a:	8e 7f       	andi	r24, 0xFE	; 254
    747c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    747e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7482:	08 95       	ret

00007484 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    7484:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    7488:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    748c:	08 95       	ret

0000748e <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    748e:	1f 92       	push	r1
    7490:	0f 92       	push	r0
    7492:	0f b6       	in	r0, 0x3f	; 63
    7494:	0f 92       	push	r0
    7496:	11 24       	eor	r1, r1
    7498:	2f 93       	push	r18
    749a:	3f 93       	push	r19
    749c:	4f 93       	push	r20
    749e:	5f 93       	push	r21
    74a0:	6f 93       	push	r22
    74a2:	7f 93       	push	r23
    74a4:	8f 93       	push	r24
    74a6:	9f 93       	push	r25
    74a8:	af 93       	push	r26
    74aa:	bf 93       	push	r27
    74ac:	ef 93       	push	r30
    74ae:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    74b0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    74b4:	80 ff       	sbrs	r24, 0
    74b6:	1b c0       	rjmp	.+54     	; 0x74ee <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    74b8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    74bc:	80 ff       	sbrs	r24, 0
    74be:	17 c0       	rjmp	.+46     	; 0x74ee <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    74c0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
    74c4:	8e 7f       	andi	r24, 0xFE	; 254
    74c6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    74ca:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    74ce:	80 ff       	sbrs	r24, 0
    74d0:	0b c0       	rjmp	.+22     	; 0x74e8 <__vector_10+0x5a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    74d2:	80 e1       	ldi	r24, 0x10	; 16
    74d4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    74d6:	82 e1       	ldi	r24, 0x12	; 18
    74d8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    74da:	09 b4       	in	r0, 0x29	; 41
    74dc:	00 fe       	sbrs	r0, 0
    74de:	fd cf       	rjmp	.-6      	; 0x74da <__vector_10+0x4c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    74e0:	81 e0       	ldi	r24, 0x01	; 1
    74e2:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    74e4:	98 d1       	rcall	.+816    	; 0x7816 <USB_Event_Stub>
    74e6:	03 c0       	rjmp	.+6      	; 0x74ee <__vector_10+0x60>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    74e8:	19 bc       	out	0x29, r1	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
			EVENT_USB_Device_Disconnect();
    74ea:	1e ba       	out	0x1e, r1	; 30
    74ec:	94 d1       	rcall	.+808    	; 0x7816 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    74ee:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    74f2:	80 ff       	sbrs	r24, 0
    74f4:	17 c0       	rjmp	.+46     	; 0x7524 <__vector_10+0x96>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    74f6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    74fa:	80 ff       	sbrs	r24, 0
    74fc:	13 c0       	rjmp	.+38     	; 0x7524 <__vector_10+0x96>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    74fe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7502:	8e 7f       	andi	r24, 0xFE	; 254
    7504:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7508:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    750c:	80 61       	ori	r24, 0x10	; 16
    750e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    7512:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    7516:	80 62       	ori	r24, 0x20	; 32
    7518:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    751c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    751e:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
    7520:	8e bb       	out	0x1e, r24	; 30
    7522:	79 d1       	rcall	.+754    	; 0x7816 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    7524:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7528:	84 ff       	sbrs	r24, 4
    752a:	2e c0       	rjmp	.+92     	; 0x7588 <__vector_10+0xfa>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    752c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7530:	84 ff       	sbrs	r24, 4
    7532:	2a c0       	rjmp	.+84     	; 0x7588 <__vector_10+0xfa>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7534:	80 e1       	ldi	r24, 0x10	; 16
    7536:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7538:	82 e1       	ldi	r24, 0x12	; 18
    753a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    753c:	09 b4       	in	r0, 0x29	; 41
    753e:	00 fe       	sbrs	r0, 0
    7540:	fd cf       	rjmp	.-6      	; 0x753c <__vector_10+0xae>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    7542:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    7546:	8f 7d       	andi	r24, 0xDF	; 223
    7548:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    754c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    7550:	8f 7e       	andi	r24, 0xEF	; 239
    7552:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    7556:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    755a:	8f 7e       	andi	r24, 0xEF	; 239
    755c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7560:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7564:	81 60       	ori	r24, 0x01	; 1
    7566:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    756a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
    756e:	88 23       	and	r24, r24
    7570:	11 f0       	breq	.+4      	; 0x7576 <__vector_10+0xe8>
		  USB_DeviceState = DEVICE_STATE_Configured;
    7572:	84 e0       	ldi	r24, 0x04	; 4
    7574:	07 c0       	rjmp	.+14     	; 0x7584 <__vector_10+0xf6>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7576:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    757a:	87 fd       	sbrc	r24, 7
    757c:	02 c0       	rjmp	.+4      	; 0x7582 <__vector_10+0xf4>
    757e:	81 e0       	ldi	r24, 0x01	; 1
    7580:	01 c0       	rjmp	.+2      	; 0x7584 <__vector_10+0xf6>
    7582:	83 e0       	ldi	r24, 0x03	; 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7584:	8e bb       	out	0x1e, r24	; 30
    7586:	47 d1       	rcall	.+654    	; 0x7816 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7588:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    758c:	83 ff       	sbrs	r24, 3
    758e:	21 c0       	rjmp	.+66     	; 0x75d2 <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    7590:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    7594:	83 ff       	sbrs	r24, 3
    7596:	1d c0       	rjmp	.+58     	; 0x75d2 <__vector_10+0x144>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    7598:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    759c:	87 7f       	andi	r24, 0xF7	; 247
    759e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    75a2:	82 e0       	ldi	r24, 0x02	; 2
    75a4:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    75a6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__data_end>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    75aa:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    75ae:	8e 7f       	andi	r24, 0xFE	; 254
    75b0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    75b4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    75b8:	8e 7f       	andi	r24, 0xFE	; 254
    75ba:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    75be:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    75c2:	80 61       	ori	r24, 0x10	; 16
    75c4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    75c8:	42 e0       	ldi	r20, 0x02	; 2
    75ca:	60 e0       	ldi	r22, 0x00	; 0
    75cc:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    75ce:	d6 de       	rcall	.-596    	; 0x737c <Endpoint_ConfigureEndpoint_Prv>
    75d0:	22 d1       	rcall	.+580    	; 0x7816 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    75d2:	ff 91       	pop	r31
    75d4:	ef 91       	pop	r30
    75d6:	bf 91       	pop	r27
    75d8:	af 91       	pop	r26
    75da:	9f 91       	pop	r25
    75dc:	8f 91       	pop	r24
    75de:	7f 91       	pop	r23
    75e0:	6f 91       	pop	r22
    75e2:	5f 91       	pop	r21
    75e4:	4f 91       	pop	r20
    75e6:	3f 91       	pop	r19
    75e8:	2f 91       	pop	r18
    75ea:	0f 90       	pop	r0
    75ec:	0f be       	out	0x3f, r0	; 63
    75ee:	0f 90       	pop	r0
    75f0:	1f 90       	pop	r1
    75f2:	18 95       	reti

000075f4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    75f4:	1f 93       	push	r17
    75f6:	cf 93       	push	r28
    75f8:	df 93       	push	r29
    75fa:	00 d0       	rcall	.+0      	; 0x75fc <USB_Device_ProcessControlRequest+0x8>
    75fc:	cd b7       	in	r28, 0x3d	; 61
    75fe:	de b7       	in	r29, 0x3e	; 62
    7600:	ec e4       	ldi	r30, 0x4C	; 76
    7602:	f1 e0       	ldi	r31, 0x01	; 1
    7604:	84 e5       	ldi	r24, 0x54	; 84
    7606:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7608:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    760c:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    760e:	8e 17       	cp	r24, r30
    7610:	9f 07       	cpc	r25, r31
    7612:	d1 f7       	brne	.-12     	; 0x7608 <USB_Device_ProcessControlRequest+0x14>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    7614:	c7 dd       	rcall	.-1138   	; 0x71a4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7616:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	if (Endpoint_IsSETUPReceived())
    761a:	83 ff       	sbrs	r24, 3
    761c:	e8 c0       	rjmp	.+464    	; 0x77ee <USB_Device_ProcessControlRequest+0x1fa>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    761e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    7622:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <USB_ControlRequest+0x1>
    7626:	95 30       	cpi	r25, 0x05	; 5
    7628:	09 f4       	brne	.+2      	; 0x762c <USB_Device_ProcessControlRequest+0x38>
    762a:	6f c0       	rjmp	.+222    	; 0x770a <USB_Device_ProcessControlRequest+0x116>
    762c:	30 f4       	brcc	.+12     	; 0x763a <USB_Device_ProcessControlRequest+0x46>
    762e:	91 30       	cpi	r25, 0x01	; 1
    7630:	71 f1       	breq	.+92     	; 0x768e <USB_Device_ProcessControlRequest+0x9a>
    7632:	68 f0       	brcs	.+26     	; 0x764e <USB_Device_ProcessControlRequest+0x5a>
    7634:	93 30       	cpi	r25, 0x03	; 3
    7636:	59 f1       	breq	.+86     	; 0x768e <USB_Device_ProcessControlRequest+0x9a>
    7638:	da c0       	rjmp	.+436    	; 0x77ee <USB_Device_ProcessControlRequest+0x1fa>
    763a:	98 30       	cpi	r25, 0x08	; 8
    763c:	09 f4       	brne	.+2      	; 0x7640 <USB_Device_ProcessControlRequest+0x4c>
    763e:	a8 c0       	rjmp	.+336    	; 0x7790 <USB_Device_ProcessControlRequest+0x19c>
    7640:	99 30       	cpi	r25, 0x09	; 9
    7642:	09 f4       	brne	.+2      	; 0x7646 <USB_Device_ProcessControlRequest+0x52>
    7644:	b4 c0       	rjmp	.+360    	; 0x77ae <USB_Device_ProcessControlRequest+0x1ba>
    7646:	96 30       	cpi	r25, 0x06	; 6
    7648:	09 f0       	breq	.+2      	; 0x764c <USB_Device_ProcessControlRequest+0x58>
    764a:	d1 c0       	rjmp	.+418    	; 0x77ee <USB_Device_ProcessControlRequest+0x1fa>
    764c:	7f c0       	rjmp	.+254    	; 0x774c <USB_Device_ProcessControlRequest+0x158>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    764e:	80 38       	cpi	r24, 0x80	; 128
    7650:	99 f0       	breq	.+38     	; 0x7678 <USB_Device_ProcessControlRequest+0x84>
    7652:	82 38       	cpi	r24, 0x82	; 130
    7654:	09 f0       	breq	.+2      	; 0x7658 <USB_Device_ProcessControlRequest+0x64>
    7656:	cb c0       	rjmp	.+406    	; 0x77ee <USB_Device_ProcessControlRequest+0x1fa>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7658:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_ControlRequest+0x4>
    765c:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    765e:	87 30       	cpi	r24, 0x07	; 7
    7660:	08 f0       	brcs	.+2      	; 0x7664 <USB_Device_ProcessControlRequest+0x70>
    7662:	c5 c0       	rjmp	.+394    	; 0x77ee <USB_Device_ProcessControlRequest+0x1fa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7664:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7668:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    766c:	85 fb       	bst	r24, 5
    766e:	88 27       	eor	r24, r24
    7670:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7672:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    7676:	01 c0       	rjmp	.+2      	; 0x767a <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    7678:	80 e0       	ldi	r24, 0x00	; 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    767a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    767e:	97 7f       	andi	r25, 0xF7	; 247
    7680:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7684:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 8);
    7688:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    768c:	8c c0       	rjmp	.+280    	; 0x77a6 <USB_Device_ProcessControlRequest+0x1b2>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    768e:	28 2f       	mov	r18, r24
    7690:	2d 7f       	andi	r18, 0xFD	; 253
    7692:	09 f0       	breq	.+2      	; 0x7696 <USB_Device_ProcessControlRequest+0xa2>
    7694:	ac c0       	rjmp	.+344    	; 0x77ee <USB_Device_ProcessControlRequest+0x1fa>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    7696:	82 30       	cpi	r24, 0x02	; 2
    7698:	09 f0       	breq	.+2      	; 0x769c <USB_Device_ProcessControlRequest+0xa8>
    769a:	a9 c0       	rjmp	.+338    	; 0x77ee <USB_Device_ProcessControlRequest+0x1fa>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    769c:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <USB_ControlRequest+0x2>
    76a0:	81 11       	cpse	r24, r1
    76a2:	2a c0       	rjmp	.+84     	; 0x76f8 <USB_Device_ProcessControlRequest+0x104>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    76a4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USB_ControlRequest+0x4>
    76a8:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    76aa:	2f ef       	ldi	r18, 0xFF	; 255
    76ac:	28 0f       	add	r18, r24
    76ae:	26 30       	cpi	r18, 0x06	; 6
    76b0:	08 f0       	brcs	.+2      	; 0x76b4 <USB_Device_ProcessControlRequest+0xc0>
    76b2:	9d c0       	rjmp	.+314    	; 0x77ee <USB_Device_ProcessControlRequest+0x1fa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    76b4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    76b8:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    76bc:	20 ff       	sbrs	r18, 0
    76be:	1c c0       	rjmp	.+56     	; 0x76f8 <USB_Device_ProcessControlRequest+0x104>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    76c0:	93 30       	cpi	r25, 0x03	; 3
    76c2:	21 f4       	brne	.+8      	; 0x76cc <USB_Device_ProcessControlRequest+0xd8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    76c4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    76c8:	80 62       	ori	r24, 0x20	; 32
    76ca:	14 c0       	rjmp	.+40     	; 0x76f4 <USB_Device_ProcessControlRequest+0x100>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    76cc:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    76d0:	90 61       	ori	r25, 0x10	; 16
    76d2:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    76d6:	21 e0       	ldi	r18, 0x01	; 1
    76d8:	30 e0       	ldi	r19, 0x00	; 0
    76da:	a9 01       	movw	r20, r18
    76dc:	02 c0       	rjmp	.+4      	; 0x76e2 <USB_Device_ProcessControlRequest+0xee>
    76de:	44 0f       	add	r20, r20
    76e0:	55 1f       	adc	r21, r21
    76e2:	8a 95       	dec	r24
    76e4:	e2 f7       	brpl	.-8      	; 0x76de <USB_Device_ProcessControlRequest+0xea>
    76e6:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
				UERST = 0;
    76ea:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    76ee:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    76f2:	88 60       	ori	r24, 0x08	; 8
    76f4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    76f8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    76fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7700:	87 7f       	andi	r24, 0xF7	; 247
    7702:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7706:	4e de       	rcall	.-868    	; 0x73a4 <Endpoint_ClearStatusStage>
    7708:	72 c0       	rjmp	.+228    	; 0x77ee <USB_Device_ProcessControlRequest+0x1fa>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    770a:	81 11       	cpse	r24, r1
    770c:	70 c0       	rjmp	.+224    	; 0x77ee <USB_Device_ProcessControlRequest+0x1fa>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    770e:	10 91 4e 01 	lds	r17, 0x014E	; 0x80014e <USB_ControlRequest+0x2>
    7712:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7714:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    7718:	80 78       	andi	r24, 0x80	; 128
    771a:	81 2b       	or	r24, r17
    771c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    7720:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7724:	87 7f       	andi	r24, 0xF7	; 247
    7726:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    772a:	3c de       	rcall	.-904    	; 0x73a4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    772c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	while (!(Endpoint_IsINReady()));
    7730:	80 ff       	sbrs	r24, 0
    7732:	fc cf       	rjmp	.-8      	; 0x772c <USB_Device_ProcessControlRequest+0x138>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    7734:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    7738:	80 68       	ori	r24, 0x80	; 128
    773a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    773e:	11 11       	cpse	r17, r1
    7740:	02 c0       	rjmp	.+4      	; 0x7746 <USB_Device_ProcessControlRequest+0x152>
    7742:	82 e0       	ldi	r24, 0x02	; 2
    7744:	01 c0       	rjmp	.+2      	; 0x7748 <USB_Device_ProcessControlRequest+0x154>
    7746:	83 e0       	ldi	r24, 0x03	; 3
    7748:	8e bb       	out	0x1e, r24	; 30
    774a:	51 c0       	rjmp	.+162    	; 0x77ee <USB_Device_ProcessControlRequest+0x1fa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    774c:	80 58       	subi	r24, 0x80	; 128
    774e:	82 30       	cpi	r24, 0x02	; 2
    7750:	08 f0       	brcs	.+2      	; 0x7754 <USB_Device_ProcessControlRequest+0x160>
    7752:	4d c0       	rjmp	.+154    	; 0x77ee <USB_Device_ProcessControlRequest+0x1fa>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7754:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <USB_ControlRequest+0x4>
    7758:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <USB_ControlRequest+0x5>
    775c:	ae 01       	movw	r20, r28
    775e:	4f 5f       	subi	r20, 0xFF	; 255
    7760:	5f 4f       	sbci	r21, 0xFF	; 255
    7762:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <USB_ControlRequest+0x2>
    7766:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <USB_ControlRequest+0x3>
    776a:	88 dd       	rcall	.-1264   	; 0x727c <CALLBACK_USB_GetDescriptor>
    776c:	bc 01       	movw	r22, r24
    776e:	89 2b       	or	r24, r25
    7770:	09 f4       	brne	.+2      	; 0x7774 <USB_Device_ProcessControlRequest+0x180>
    7772:	3d c0       	rjmp	.+122    	; 0x77ee <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7774:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7778:	97 7f       	andi	r25, 0xF7	; 247
    777a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    777e:	89 81       	ldd	r24, Y+1	; 0x01
    7780:	9a 81       	ldd	r25, Y+2	; 0x02
    7782:	a0 dd       	rcall	.-1216   	; 0x72c4 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7784:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7788:	8b 77       	andi	r24, 0x7B	; 123
    778a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    778e:	2f c0       	rjmp	.+94     	; 0x77ee <USB_Device_ProcessControlRequest+0x1fa>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7790:	80 38       	cpi	r24, 0x80	; 128
    7792:	69 f5       	brne	.+90     	; 0x77ee <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7794:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    7798:	87 7f       	andi	r24, 0xF7	; 247
    779a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    779e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    77a2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    77a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    77aa:	8e 77       	andi	r24, 0x7E	; 126
    77ac:	aa cf       	rjmp	.-172    	; 0x7702 <USB_Device_ProcessControlRequest+0x10e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    77ae:	81 11       	cpse	r24, r1
    77b0:	1e c0       	rjmp	.+60     	; 0x77ee <USB_Device_ProcessControlRequest+0x1fa>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    77b2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <USB_ControlRequest+0x2>
    77b6:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <USB_ControlRequest+0x3>
    77ba:	99 27       	eor	r25, r25
    77bc:	02 97       	sbiw	r24, 0x02	; 2
    77be:	bc f4       	brge	.+46     	; 0x77ee <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    77c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    77c4:	87 7f       	andi	r24, 0xF7	; 247
    77c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    77ca:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <USB_ControlRequest+0x2>
    77ce:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__data_end>

	Endpoint_ClearStatusStage();
    77d2:	e8 dd       	rcall	.-1072   	; 0x73a4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    77d4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <__data_end>
    77d8:	81 11       	cpse	r24, r1
    77da:	06 c0       	rjmp	.+12     	; 0x77e8 <USB_Device_ProcessControlRequest+0x1f4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    77dc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    77e0:	87 fd       	sbrc	r24, 7
    77e2:	02 c0       	rjmp	.+4      	; 0x77e8 <USB_Device_ProcessControlRequest+0x1f4>
    77e4:	81 e0       	ldi	r24, 0x01	; 1
    77e6:	01 c0       	rjmp	.+2      	; 0x77ea <USB_Device_ProcessControlRequest+0x1f6>
    77e8:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
    77ea:	8e bb       	out	0x1e, r24	; 30
    77ec:	d7 dc       	rcall	.-1618   	; 0x719c <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    77ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    77f2:	83 ff       	sbrs	r24, 3
    77f4:	0a c0       	rjmp	.+20     	; 0x780a <USB_Device_ProcessControlRequest+0x216>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    77f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    77fa:	87 7f       	andi	r24, 0xF7	; 247
    77fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7800:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    7804:	80 62       	ori	r24, 0x20	; 32
    7806:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    780a:	0f 90       	pop	r0
    780c:	0f 90       	pop	r0
    780e:	df 91       	pop	r29
    7810:	cf 91       	pop	r28
    7812:	1f 91       	pop	r17
    7814:	08 95       	ret

00007816 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    7816:	08 95       	ret

00007818 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7818:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    781a:	8e b3       	in	r24, 0x1e	; 30
    781c:	88 23       	and	r24, r24
    781e:	99 f0       	breq	.+38     	; 0x7846 <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    7820:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    7824:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    7826:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    782a:	89 2f       	mov	r24, r25
    782c:	81 70       	andi	r24, 0x01	; 1
    782e:	90 fd       	sbrc	r25, 0
    7830:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    7832:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7834:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7838:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    783c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    783e:	da de       	rcall	.-588    	; 0x75f4 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7840:	cf 70       	andi	r28, 0x0F	; 15
    7842:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    7846:	cf 91       	pop	r28
    7848:	08 95       	ret

0000784a <_exit>:
    784a:	f8 94       	cli

0000784c <__stop_program>:
    784c:	ff cf       	rjmp	.-2      	; 0x784c <__stop_program>
