
at90bootloaderprinter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  0001ee42  00000f16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .apitable_jumptable 00000018  0001ffe0  0001ffe0  00001012  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_signatures 00000008  0001fff8  0001fff8  0000102a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_trampolines 00000026  0001ffa0  0001ffa0  00000fec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .text         00000e42  0001e000  0001e000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          0000001e  008001d6  008001d6  00001032  2**0
                  ALLOC
  6 .noinit       00000002  008001f4  008001f4  00001032  2**0
                  ALLOC
  7 .comment      00000030  00000000  00000000  00001032  2**0
                  CONTENTS, READONLY
  8 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY
  9 .debug_aranges 00000340  00000000  00000000  000010a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00005cce  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e92  00000000  00000000  000070b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008718  00000000  00000000  00008f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000828  00000000  00000000  00011660  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0001712d  00000000  00000000  00011e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000351e  00000000  00000000  00028fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000488  00000000  00000000  0002c4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000074fb  00000000  00000000  0002c960  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .apitable_jumptable:

0001ffe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
   1ffe0:	df cf       	rjmp	.-66     	; 0x1ffa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
   1ffe2:	e0 cf       	rjmp	.-64     	; 0x1ffa4 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
   1ffe4:	e1 cf       	rjmp	.-62     	; 0x1ffa8 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
   1ffe6:	e2 cf       	rjmp	.-60     	; 0x1ffac <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
   1ffe8:	e3 cf       	rjmp	.-58     	; 0x1ffb0 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
   1ffea:	e4 cf       	rjmp	.-56     	; 0x1ffb4 <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
   1ffec:	e5 cf       	rjmp	.-54     	; 0x1ffb8 <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPI_UNUSED1 ; UNUSED ENTRY 1
   1ffee:	e6 cf       	rjmp	.-52     	; 0x1ffbc <BootloaderAPI_UNUSED1>
	rjmp BootloaderAPI_UNUSED2 ; UNUSED ENTRY 2
   1fff0:	e6 cf       	rjmp	.-52     	; 0x1ffbe <BootloaderAPI_UNUSED2>
	rjmp BootloaderAPI_UNUSED3 ; UNUSED ENTRY 3
   1fff2:	e6 cf       	rjmp	.-52     	; 0x1ffc0 <BootloaderAPI_UNUSED3>
	rjmp BootloaderAPI_UNUSED4 ; UNUSED ENTRY 4
   1fff4:	e6 cf       	rjmp	.-52     	; 0x1ffc2 <BootloaderAPI_UNUSED4>
	rjmp BootloaderAPI_UNUSED5 ; UNUSED ENTRY 5
   1fff6:	e6 cf       	rjmp	.-52     	; 0x1ffc4 <BootloaderAPI_UNUSED5>

Disassembly of section .apitable_signatures:

0001fff8 <BootloaderAPI_Signatures>:
   1fff8:	00 e0       	ldi	r16, 0x00	; 0
   1fffa:	01 00       	.word	0x0001	; ????
   1fffc:	20 df       	rcall	.-448    	; 0x1fe3e <__data_load_end+0xf26>
   1fffe:	fb dc       	rcall	.-1546   	; 0x1f9f6 <__data_load_end+0xade>

Disassembly of section .apitable_trampolines:

0001ffa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
   1ffa0:	0c 94 6a f0 	jmp	0x1e0d4	; 0x1e0d4 <BootloaderAPI_ErasePage>

0001ffa4 <BootloaderAPI_WritePage_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
   1ffa4:	0c 94 7e f0 	jmp	0x1e0fc	; 0x1e0fc <BootloaderAPI_WritePage>

0001ffa8 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
   1ffa8:	0c 94 92 f0 	jmp	0x1e124	; 0x1e124 <BootloaderAPI_FillWord>

0001ffac <BootloaderAPI_ReadSignature_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
   1ffac:	0c 94 a1 f0 	jmp	0x1e142	; 0x1e142 <BootloaderAPI_ReadSignature>

0001ffb0 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
   1ffb0:	0c 94 a7 f0 	jmp	0x1e14e	; 0x1e14e <BootloaderAPI_ReadFuse>

0001ffb4 <BootloaderAPI_ReadLock_Trampoline>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
   1ffb4:	0c 94 ad f0 	jmp	0x1e15a	; 0x1e15a <BootloaderAPI_ReadLock>

0001ffb8 <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_WriteLock_Trampoline:
		jmp BootloaderAPI_WriteLock
   1ffb8:	0c 94 b4 f0 	jmp	0x1e168	; 0x1e168 <BootloaderAPI_WriteLock>

0001ffbc <BootloaderAPI_UNUSED1>:
	BootloaderAPI_UNUSED1:
		ret
   1ffbc:	08 95       	ret

0001ffbe <BootloaderAPI_UNUSED2>:
	BootloaderAPI_UNUSED2:
		ret
   1ffbe:	08 95       	ret

0001ffc0 <BootloaderAPI_UNUSED3>:
	BootloaderAPI_UNUSED3:
		ret
   1ffc0:	08 95       	ret

0001ffc2 <BootloaderAPI_UNUSED4>:
	BootloaderAPI_UNUSED4:
		ret
   1ffc2:	08 95       	ret

0001ffc4 <BootloaderAPI_UNUSED5>:
	BootloaderAPI_UNUSED5:
		ret
   1ffc4:	08 95       	ret

Disassembly of section .text:

0001e000 <__vectors>:
   1e000:	4b c0       	rjmp	.+150    	; 0x1e098 <__ctors_end>
   1e002:	00 00       	nop
   1e004:	66 c0       	rjmp	.+204    	; 0x1e0d2 <__bad_interrupt>
   1e006:	00 00       	nop
   1e008:	64 c0       	rjmp	.+200    	; 0x1e0d2 <__bad_interrupt>
   1e00a:	00 00       	nop
   1e00c:	62 c0       	rjmp	.+196    	; 0x1e0d2 <__bad_interrupt>
   1e00e:	00 00       	nop
   1e010:	60 c0       	rjmp	.+192    	; 0x1e0d2 <__bad_interrupt>
   1e012:	00 00       	nop
   1e014:	5e c0       	rjmp	.+188    	; 0x1e0d2 <__bad_interrupt>
   1e016:	00 00       	nop
   1e018:	5c c0       	rjmp	.+184    	; 0x1e0d2 <__bad_interrupt>
   1e01a:	00 00       	nop
   1e01c:	5a c0       	rjmp	.+180    	; 0x1e0d2 <__bad_interrupt>
   1e01e:	00 00       	nop
   1e020:	58 c0       	rjmp	.+176    	; 0x1e0d2 <__bad_interrupt>
   1e022:	00 00       	nop
   1e024:	56 c0       	rjmp	.+172    	; 0x1e0d2 <__bad_interrupt>
   1e026:	00 00       	nop
   1e028:	28 c5       	rjmp	.+2640   	; 0x1ea7a <__vector_10>
   1e02a:	00 00       	nop
   1e02c:	52 c0       	rjmp	.+164    	; 0x1e0d2 <__bad_interrupt>
   1e02e:	00 00       	nop
   1e030:	50 c0       	rjmp	.+160    	; 0x1e0d2 <__bad_interrupt>
   1e032:	00 00       	nop
   1e034:	4e c0       	rjmp	.+156    	; 0x1e0d2 <__bad_interrupt>
   1e036:	00 00       	nop
   1e038:	4c c0       	rjmp	.+152    	; 0x1e0d2 <__bad_interrupt>
   1e03a:	00 00       	nop
   1e03c:	4a c0       	rjmp	.+148    	; 0x1e0d2 <__bad_interrupt>
   1e03e:	00 00       	nop
   1e040:	48 c0       	rjmp	.+144    	; 0x1e0d2 <__bad_interrupt>
   1e042:	00 00       	nop
   1e044:	46 c0       	rjmp	.+140    	; 0x1e0d2 <__bad_interrupt>
   1e046:	00 00       	nop
   1e048:	44 c0       	rjmp	.+136    	; 0x1e0d2 <__bad_interrupt>
   1e04a:	00 00       	nop
   1e04c:	42 c0       	rjmp	.+132    	; 0x1e0d2 <__bad_interrupt>
   1e04e:	00 00       	nop
   1e050:	43 c2       	rjmp	.+1158   	; 0x1e4d8 <__vector_20>
   1e052:	00 00       	nop
   1e054:	3e c0       	rjmp	.+124    	; 0x1e0d2 <__bad_interrupt>
   1e056:	00 00       	nop
   1e058:	3c c0       	rjmp	.+120    	; 0x1e0d2 <__bad_interrupt>
   1e05a:	00 00       	nop
   1e05c:	3a c0       	rjmp	.+116    	; 0x1e0d2 <__bad_interrupt>
   1e05e:	00 00       	nop
   1e060:	38 c0       	rjmp	.+112    	; 0x1e0d2 <__bad_interrupt>
   1e062:	00 00       	nop
   1e064:	36 c0       	rjmp	.+108    	; 0x1e0d2 <__bad_interrupt>
   1e066:	00 00       	nop
   1e068:	34 c0       	rjmp	.+104    	; 0x1e0d2 <__bad_interrupt>
   1e06a:	00 00       	nop
   1e06c:	32 c0       	rjmp	.+100    	; 0x1e0d2 <__bad_interrupt>
   1e06e:	00 00       	nop
   1e070:	30 c0       	rjmp	.+96     	; 0x1e0d2 <__bad_interrupt>
   1e072:	00 00       	nop
   1e074:	2e c0       	rjmp	.+92     	; 0x1e0d2 <__bad_interrupt>
   1e076:	00 00       	nop
   1e078:	2c c0       	rjmp	.+88     	; 0x1e0d2 <__bad_interrupt>
   1e07a:	00 00       	nop
   1e07c:	2a c0       	rjmp	.+84     	; 0x1e0d2 <__bad_interrupt>
   1e07e:	00 00       	nop
   1e080:	28 c0       	rjmp	.+80     	; 0x1e0d2 <__bad_interrupt>
   1e082:	00 00       	nop
   1e084:	26 c0       	rjmp	.+76     	; 0x1e0d2 <__bad_interrupt>
   1e086:	00 00       	nop
   1e088:	24 c0       	rjmp	.+72     	; 0x1e0d2 <__bad_interrupt>
   1e08a:	00 00       	nop
   1e08c:	22 c0       	rjmp	.+68     	; 0x1e0d2 <__bad_interrupt>
   1e08e:	00 00       	nop
   1e090:	20 c0       	rjmp	.+64     	; 0x1e0d2 <__bad_interrupt>
   1e092:	00 00       	nop
   1e094:	1e c0       	rjmp	.+60     	; 0x1e0d2 <__bad_interrupt>
	...

0001e098 <__ctors_end>:
   1e098:	11 24       	eor	r1, r1
   1e09a:	1f be       	out	0x3f, r1	; 63
   1e09c:	cf ef       	ldi	r28, 0xFF	; 255
   1e09e:	d0 e2       	ldi	r29, 0x20	; 32
   1e0a0:	de bf       	out	0x3e, r29	; 62
   1e0a2:	cd bf       	out	0x3d, r28	; 61

0001e0a4 <__do_copy_data>:
   1e0a4:	11 e0       	ldi	r17, 0x01	; 1
   1e0a6:	a0 e0       	ldi	r26, 0x00	; 0
   1e0a8:	b1 e0       	ldi	r27, 0x01	; 1
   1e0aa:	e2 e4       	ldi	r30, 0x42	; 66
   1e0ac:	fe ee       	ldi	r31, 0xEE	; 238
   1e0ae:	01 e0       	ldi	r16, 0x01	; 1
   1e0b0:	0b bf       	out	0x3b, r16	; 59
   1e0b2:	02 c0       	rjmp	.+4      	; 0x1e0b8 <__do_copy_data+0x14>
   1e0b4:	07 90       	elpm	r0, Z+
   1e0b6:	0d 92       	st	X+, r0
   1e0b8:	a6 3d       	cpi	r26, 0xD6	; 214
   1e0ba:	b1 07       	cpc	r27, r17
   1e0bc:	d9 f7       	brne	.-10     	; 0x1e0b4 <__do_copy_data+0x10>

0001e0be <__do_clear_bss>:
   1e0be:	21 e0       	ldi	r18, 0x01	; 1
   1e0c0:	a6 ed       	ldi	r26, 0xD6	; 214
   1e0c2:	b1 e0       	ldi	r27, 0x01	; 1
   1e0c4:	01 c0       	rjmp	.+2      	; 0x1e0c8 <.do_clear_bss_start>

0001e0c6 <.do_clear_bss_loop>:
   1e0c6:	1d 92       	st	X+, r1

0001e0c8 <.do_clear_bss_start>:
   1e0c8:	a4 3f       	cpi	r26, 0xF4	; 244
   1e0ca:	b2 07       	cpc	r27, r18
   1e0cc:	e1 f7       	brne	.-8      	; 0x1e0c6 <.do_clear_bss_loop>
   1e0ce:	85 d0       	rcall	.+266    	; 0x1e1da <main>
   1e0d0:	b6 c6       	rjmp	.+3436   	; 0x1ee3e <_exit>

0001e0d2 <__bad_interrupt>:
   1e0d2:	96 cf       	rjmp	.-212    	; 0x1e000 <__vectors>

0001e0d4 <BootloaderAPI_ErasePage>:

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
	boot_page_erase_safe(Address);
   1e0d4:	07 b6       	in	r0, 0x37	; 55
   1e0d6:	00 fc       	sbrc	r0, 0
   1e0d8:	fd cf       	rjmp	.-6      	; 0x1e0d4 <BootloaderAPI_ErasePage>
   1e0da:	f9 99       	sbic	0x1f, 1	; 31
   1e0dc:	fe cf       	rjmp	.-4      	; 0x1e0da <BootloaderAPI_ErasePage+0x6>
   1e0de:	23 e0       	ldi	r18, 0x03	; 3
   1e0e0:	fb 01       	movw	r30, r22
   1e0e2:	80 93 5b 00 	sts	0x005B, r24	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e0e6:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e0ea:	e8 95       	spm
	boot_spm_busy_wait();
   1e0ec:	07 b6       	in	r0, 0x37	; 55
   1e0ee:	00 fc       	sbrc	r0, 0
   1e0f0:	fd cf       	rjmp	.-6      	; 0x1e0ec <BootloaderAPI_ErasePage+0x18>
	boot_rww_enable();
   1e0f2:	81 e1       	ldi	r24, 0x11	; 17
   1e0f4:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e0f8:	e8 95       	spm
   1e0fa:	08 95       	ret

0001e0fc <BootloaderAPI_WritePage>:
}

void BootloaderAPI_WritePage(const uint32_t Address)
{
	boot_page_write_safe(Address);
   1e0fc:	07 b6       	in	r0, 0x37	; 55
   1e0fe:	00 fc       	sbrc	r0, 0
   1e100:	fd cf       	rjmp	.-6      	; 0x1e0fc <BootloaderAPI_WritePage>
   1e102:	f9 99       	sbic	0x1f, 1	; 31
   1e104:	fe cf       	rjmp	.-4      	; 0x1e102 <BootloaderAPI_WritePage+0x6>
   1e106:	25 e0       	ldi	r18, 0x05	; 5
   1e108:	fb 01       	movw	r30, r22
   1e10a:	80 93 5b 00 	sts	0x005B, r24	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e10e:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e112:	e8 95       	spm
	boot_spm_busy_wait();
   1e114:	07 b6       	in	r0, 0x37	; 55
   1e116:	00 fc       	sbrc	r0, 0
   1e118:	fd cf       	rjmp	.-6      	; 0x1e114 <BootloaderAPI_WritePage+0x18>
	boot_rww_enable();
   1e11a:	81 e1       	ldi	r24, 0x11	; 17
   1e11c:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e120:	e8 95       	spm
   1e122:	08 95       	ret

0001e124 <BootloaderAPI_FillWord>:
}

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
	boot_page_fill_safe(Address, Word);
   1e124:	07 b6       	in	r0, 0x37	; 55
   1e126:	00 fc       	sbrc	r0, 0
   1e128:	fd cf       	rjmp	.-6      	; 0x1e124 <BootloaderAPI_FillWord>
   1e12a:	f9 99       	sbic	0x1f, 1	; 31
   1e12c:	fe cf       	rjmp	.-4      	; 0x1e12a <BootloaderAPI_FillWord+0x6>
   1e12e:	21 e0       	ldi	r18, 0x01	; 1
   1e130:	0a 01       	movw	r0, r20
   1e132:	fb 01       	movw	r30, r22
   1e134:	80 93 5b 00 	sts	0x005B, r24	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e138:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e13c:	e8 95       	spm
   1e13e:	11 24       	eor	r1, r1
   1e140:	08 95       	ret

0001e142 <BootloaderAPI_ReadSignature>:
}

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
   1e142:	21 e2       	ldi	r18, 0x21	; 33
   1e144:	fc 01       	movw	r30, r24
   1e146:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e14a:	84 91       	lpm	r24, Z
}
   1e14c:	08 95       	ret

0001e14e <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
   1e14e:	29 e0       	ldi	r18, 0x09	; 9
   1e150:	fc 01       	movw	r30, r24
   1e152:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e156:	84 91       	lpm	r24, Z
}
   1e158:	08 95       	ret

0001e15a <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
   1e15a:	e1 e0       	ldi	r30, 0x01	; 1
   1e15c:	f0 e0       	ldi	r31, 0x00	; 0
   1e15e:	89 e0       	ldi	r24, 0x09	; 9
   1e160:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e164:	84 91       	lpm	r24, Z
}
   1e166:	08 95       	ret

0001e168 <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
   1e168:	07 b6       	in	r0, 0x37	; 55
   1e16a:	00 fc       	sbrc	r0, 0
   1e16c:	fd cf       	rjmp	.-6      	; 0x1e168 <BootloaderAPI_WriteLock>
   1e16e:	f9 99       	sbic	0x1f, 1	; 31
   1e170:	fe cf       	rjmp	.-4      	; 0x1e16e <BootloaderAPI_WriteLock+0x6>
   1e172:	80 95       	com	r24
   1e174:	99 e0       	ldi	r25, 0x09	; 9
   1e176:	e1 e0       	ldi	r30, 0x01	; 1
   1e178:	f0 e0       	ldi	r31, 0x00	; 0
   1e17a:	08 2e       	mov	r0, r24
   1e17c:	90 93 57 00 	sts	0x0057, r25	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e180:	e8 95       	spm
   1e182:	08 95       	ret

0001e184 <FlushPageIfRequired.part.2>:

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;

		// cppcheck-suppress constStatement
		((void (*)(void))0x0000)();
   1e184:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <HEXParser+0xf>
   1e188:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <HEXParser+0x10>
   1e18c:	a0 91 e8 01 	lds	r26, 0x01E8	; 0x8001e8 <HEXParser+0x11>
   1e190:	b0 91 e9 01 	lds	r27, 0x01E9	; 0x8001e9 <HEXParser+0x12>
   1e194:	88 27       	eor	r24, r24
   1e196:	40 91 de 01 	lds	r20, 0x01DE	; 0x8001de <HEXParser+0x7>
   1e19a:	50 91 df 01 	lds	r21, 0x01DF	; 0x8001df <HEXParser+0x8>
   1e19e:	60 91 e0 01 	lds	r22, 0x01E0	; 0x8001e0 <HEXParser+0x9>
   1e1a2:	70 91 e1 01 	lds	r23, 0x01E1	; 0x8001e1 <HEXParser+0xa>
   1e1a6:	84 17       	cp	r24, r20
   1e1a8:	95 07       	cpc	r25, r21
   1e1aa:	a6 07       	cpc	r26, r22
   1e1ac:	b7 07       	cpc	r27, r23
   1e1ae:	a1 f0       	breq	.+40     	; 0x1e1d8 <FlushPageIfRequired.part.2+0x54>
   1e1b0:	25 e0       	ldi	r18, 0x05	; 5
   1e1b2:	fa 01       	movw	r30, r20
   1e1b4:	60 93 5b 00 	sts	0x005B, r22	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e1b8:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e1bc:	e8 95       	spm
   1e1be:	07 b6       	in	r0, 0x37	; 55
   1e1c0:	00 fc       	sbrc	r0, 0
   1e1c2:	fd cf       	rjmp	.-6      	; 0x1e1be <FlushPageIfRequired.part.2+0x3a>
   1e1c4:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <HEXParser+0x7>
   1e1c8:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <HEXParser+0x8>
   1e1cc:	a0 93 e0 01 	sts	0x01E0, r26	; 0x8001e0 <HEXParser+0x9>
   1e1d0:	b0 93 e1 01 	sts	0x01E1, r27	; 0x8001e1 <HEXParser+0xa>
   1e1d4:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <__data_end>
   1e1d8:	08 95       	ret

0001e1da <main>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1e1da:	84 b7       	in	r24, 0x34	; 52
   1e1dc:	87 7f       	andi	r24, 0xF7	; 247
   1e1de:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
   1e1e0:	0f b6       	in	r0, 0x3f	; 63
   1e1e2:	f8 94       	cli
   1e1e4:	a8 95       	wdr
   1e1e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e1ea:	88 61       	ori	r24, 0x18	; 24
   1e1ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e1f0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e1f4:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
   1e1f6:	90 e0       	ldi	r25, 0x00	; 0
   1e1f8:	80 e8       	ldi	r24, 0x80	; 128
   1e1fa:	0f b6       	in	r0, 0x3f	; 63
   1e1fc:	f8 94       	cli
   1e1fe:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
   1e202:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
   1e206:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1e208:	c1 e0       	ldi	r28, 0x01	; 1
   1e20a:	c5 bf       	out	0x35, r28	; 53
	MCUCR = (1 << IVSEL);
   1e20c:	82 e0       	ldi	r24, 0x02	; 2
   1e20e:	85 bf       	out	0x35, r24	; 53

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
   1e210:	19 d4       	rcall	.+2098   	; 0x1ea44 <USB_Init>

	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
   1e212:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCCR1B = ((1 << CS11) | (1 << CS10));
   1e216:	83 e0       	ldi	r24, 0x03	; 3
   1e218:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
   1e21c:	78 94       	sei
		HEXParser.CurrAddress  = HEXParser.CurrBaseAddress;
		HEXParser.ReadMSB      = false;

		/* ASCII ':' indicates the start of a new HEX record */
		if (ReadCharacter == ':')
		  HEXParser.ParserState = HEX_PARSE_STATE_BYTE_COUNT;
   1e21e:	d1 e0       	ldi	r29, 0x01	; 1
			{
				case HEX_RECORD_TYPE_Data:
					/* If we are writing to a new page, we need to erase it first */
					if (!(PageDirty))
					{
						boot_page_erase(HEXParser.PageStartAddress);
   1e220:	03 e0       	ldi	r16, 0x03	; 3
		HEXParser.CurrAddress  = HEXParser.CurrBaseAddress;
		HEXParser.ReadMSB      = false;

		/* ASCII ':' indicates the start of a new HEX record */
		if (ReadCharacter == ':')
		  HEXParser.ParserState = HEX_PARSE_STATE_BYTE_COUNT;
   1e222:	11 e0       	ldi	r17, 0x01	; 1
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_LOW;
			break;

		case HEX_PARSE_STATE_ADDRESS_LOW:
			HEXParser.CurrAddress += HEXParser.Data;
			HEXParser.ParserState  = HEX_PARSE_STATE_RECORD_TYPE;
   1e224:	a4 e0       	ldi	r26, 0x04	; 4
   1e226:	fa 2e       	mov	r15, r26
			break;

		case HEX_PARSE_STATE_RECORD_TYPE:
			HEXParser.RecordType   = HEXParser.Data;
			HEXParser.ParserState  = (HEXParser.DataRem ? HEX_PARSE_STATE_READ_DATA : HEX_PARSE_STATE_CHECKSUM);
   1e228:	b6 e0       	ldi	r27, 0x06	; 6
   1e22a:	eb 2e       	mov	r14, r27
			{
				case HEX_RECORD_TYPE_Data:
					/* If we are writing to a new page, we need to erase it first */
					if (!(PageDirty))
					{
						boot_page_erase(HEXParser.PageStartAddress);
   1e22c:	c3 e0       	ldi	r28, 0x03	; 3
   1e22e:	dc 2e       	mov	r13, r28

	switch (HEXParser.ParserState)
	{
		case HEX_PARSE_STATE_BYTE_COUNT:
			HEXParser.DataRem      = HEXParser.Data;
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_HIGH;
   1e230:	82 e0       	ldi	r24, 0x02	; 2
   1e232:	c8 2e       	mov	r12, r24
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();

	while (RunBootloader)
   1e234:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1e238:	88 23       	and	r24, r24
   1e23a:	09 f4       	brne	.+2      	; 0x1e23e <main+0x64>
   1e23c:	5d c0       	rjmp	.+186    	; 0x1e2f8 <main+0x11e>
	{
		uint8_t BytesReceived = PRNT_Device_BytesReceived(&TextOnly_Printer_Interface);
   1e23e:	81 e0       	ldi	r24, 0x01	; 1
   1e240:	91 e0       	ldi	r25, 0x01	; 1
   1e242:	16 d2       	rcall	.+1068   	; 0x1e670 <PRNT_Device_BytesReceived>

		if (BytesReceived)
   1e244:	81 11       	cpse	r24, r1
   1e246:	05 c0       	rjmp	.+10     	; 0x1e252 <main+0x78>
			}

			LEDs_SetAllLEDs(LEDMASK_USB_READY);
		}

		PRNT_Device_USBTask(&TextOnly_Printer_Interface);
   1e248:	81 e0       	ldi	r24, 0x01	; 1
   1e24a:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
   1e24c:	c5 d1       	rcall	.+906    	; 0x1e5d8 <PRNT_Device_USBTask>
   1e24e:	de d5       	rcall	.+3004   	; 0x1ee0c <USB_USBTask>
   1e250:	f1 cf       	rjmp	.-30     	; 0x1e234 <main+0x5a>
		{
			LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

			while (BytesReceived--)
			{
				int16_t ReceivedByte = PRNT_Device_ReceiveByte(&TextOnly_Printer_Interface);
   1e252:	c8 2f       	mov	r28, r24
   1e254:	81 e0       	ldi	r24, 0x01	; 1
   1e256:	91 e0       	ldi	r25, 0x01	; 1
   1e258:	2b d2       	rcall	.+1110   	; 0x1e6b0 <PRNT_Device_ReceiveByte>
 * \param[in] ReadCharacter  Next input ASCII byte of data to parse
 */
static void ParseIntelHEXByte(const char ReadCharacter)
{
	/* Reset the line parser while waiting for a new line to start */
	if ((HEXParser.ParserState == HEX_PARSE_STATE_WAIT_LINE) || (ReadCharacter == ':'))
   1e25a:	40 91 d7 01 	lds	r20, 0x01D7	; 0x8001d7 <HEXParser>
   1e25e:	44 23       	and	r20, r20
   1e260:	11 f0       	breq	.+4      	; 0x1e266 <main+0x8c>
   1e262:	8a 33       	cpi	r24, 0x3A	; 58
   1e264:	c9 f4       	brne	.+50     	; 0x1e298 <main+0xbe>
	{
		HEXParser.Checksum     = 0;
   1e266:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <HEXParser+0x6>
		HEXParser.CurrAddress  = HEXParser.CurrBaseAddress;
   1e26a:	40 91 e2 01 	lds	r20, 0x01E2	; 0x8001e2 <HEXParser+0xb>
   1e26e:	50 91 e3 01 	lds	r21, 0x01E3	; 0x8001e3 <HEXParser+0xc>
   1e272:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <HEXParser+0xd>
   1e276:	70 91 e5 01 	lds	r23, 0x01E5	; 0x8001e5 <HEXParser+0xe>
   1e27a:	40 93 e6 01 	sts	0x01E6, r20	; 0x8001e6 <HEXParser+0xf>
   1e27e:	50 93 e7 01 	sts	0x01E7, r21	; 0x8001e7 <HEXParser+0x10>
   1e282:	60 93 e8 01 	sts	0x01E8, r22	; 0x8001e8 <HEXParser+0x11>
   1e286:	70 93 e9 01 	sts	0x01E9, r23	; 0x8001e9 <HEXParser+0x12>
		HEXParser.ReadMSB      = false;
   1e28a:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <HEXParser+0x3>

		/* ASCII ':' indicates the start of a new HEX record */
		if (ReadCharacter == ':')
   1e28e:	8a 33       	cpi	r24, 0x3A	; 58
   1e290:	79 f5       	brne	.+94     	; 0x1e2f0 <main+0x116>
		  HEXParser.ParserState = HEX_PARSE_STATE_BYTE_COUNT;
   1e292:	10 93 d7 01 	sts	0x01D7, r17	; 0x8001d7 <HEXParser>
   1e296:	2c c0       	rjmp	.+88     	; 0x1e2f0 <main+0x116>
 * \return Integer converted value of the input ASCII encoded HEX byte of data, or -1 if the
 *         input is not valid ASCII encoded HEX.
 */
static int8_t HexToDecimal(const char Byte)
{
	if ((Byte >= 'A') && (Byte <= 'F'))
   1e298:	9f eb       	ldi	r25, 0xBF	; 191
   1e29a:	98 0f       	add	r25, r24
   1e29c:	96 30       	cpi	r25, 0x06	; 6
   1e29e:	10 f4       	brcc	.+4      	; 0x1e2a4 <main+0xca>
	  return (10 + (Byte - 'A'));
   1e2a0:	87 53       	subi	r24, 0x37	; 55
   1e2a2:	03 c0       	rjmp	.+6      	; 0x1e2aa <main+0xd0>
	else if ((Byte >= '0') && (Byte <= '9'))
   1e2a4:	80 53       	subi	r24, 0x30	; 48
   1e2a6:	8a 30       	cpi	r24, 0x0A	; 10
   1e2a8:	18 f5       	brcc	.+70     	; 0x1e2f0 <main+0x116>
	int8_t ReadCharacterDec = HexToDecimal(ReadCharacter);
	if (ReadCharacterDec < 0)
	  return;

	/* Read and convert the next nibble of data from the current character */
	HEXParser.Data    = (HEXParser.Data << 4) | ReadCharacterDec;
   1e2aa:	90 91 d9 01 	lds	r25, 0x01D9	; 0x8001d9 <HEXParser+0x2>
   1e2ae:	50 e1       	ldi	r21, 0x10	; 16
   1e2b0:	95 9f       	mul	r25, r21
   1e2b2:	90 01       	movw	r18, r0
   1e2b4:	11 24       	eor	r1, r1
   1e2b6:	28 2b       	or	r18, r24
   1e2b8:	20 93 d9 01 	sts	0x01D9, r18	; 0x8001d9 <HEXParser+0x2>
	HEXParser.ReadMSB = !HEXParser.ReadMSB;
   1e2bc:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <HEXParser+0x3>
   1e2c0:	8d 27       	eor	r24, r29
   1e2c2:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <HEXParser+0x3>

	/* Only process further when a full byte (two nibbles) have been read */
	if (HEXParser.ReadMSB)
   1e2c6:	81 11       	cpse	r24, r1
   1e2c8:	13 c0       	rjmp	.+38     	; 0x1e2f0 <main+0x116>
   1e2ca:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <HEXParser+0x6>
	  return;

	/* Intel HEX checksum is for all fields except starting character and the
	 * checksum itself
	 */
	if (HEXParser.ParserState != HEX_PARSE_STATE_CHECKSUM)
   1e2ce:	46 30       	cpi	r20, 0x06	; 6
   1e2d0:	09 f4       	brne	.+2      	; 0x1e2d4 <main+0xfa>
   1e2d2:	ec c0       	rjmp	.+472    	; 0x1e4ac <main+0x2d2>
	  HEXParser.Checksum += HEXParser.Data;
   1e2d4:	82 0f       	add	r24, r18
   1e2d6:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <HEXParser+0x6>

	switch (HEXParser.ParserState)
   1e2da:	43 30       	cpi	r20, 0x03	; 3
   1e2dc:	09 f4       	brne	.+2      	; 0x1e2e0 <main+0x106>
   1e2de:	44 c0       	rjmp	.+136    	; 0x1e368 <main+0x18e>
   1e2e0:	08 f0       	brcs	.+2      	; 0x1e2e4 <main+0x10a>
   1e2e2:	3d c0       	rjmp	.+122    	; 0x1e35e <main+0x184>
   1e2e4:	41 30       	cpi	r20, 0x01	; 1
   1e2e6:	f1 f4       	brne	.+60     	; 0x1e324 <main+0x14a>
	{
		case HEX_PARSE_STATE_BYTE_COUNT:
			HEXParser.DataRem      = HEXParser.Data;
   1e2e8:	20 93 dc 01 	sts	0x01DC, r18	; 0x8001dc <HEXParser+0x5>
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_HIGH;
   1e2ec:	c0 92 d7 01 	sts	0x01D7, r12	; 0x8001d7 <HEXParser>
   1e2f0:	c1 50       	subi	r28, 0x01	; 1

		if (BytesReceived)
		{
			LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

			while (BytesReceived--)
   1e2f2:	09 f0       	breq	.+2      	; 0x1e2f6 <main+0x11c>
   1e2f4:	af cf       	rjmp	.-162    	; 0x1e254 <main+0x7a>
   1e2f6:	a8 cf       	rjmp	.-176    	; 0x1e248 <main+0x6e>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1e2f8:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
   1e2fc:	81 60       	ori	r24, 0x01	; 1
   1e2fe:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Unlock the forced application start mode of the bootloader if it is restarted */
	MagicBootKey = MAGIC_BOOT_KEY;
   1e302:	82 e4       	ldi	r24, 0x42	; 66
   1e304:	9c ed       	ldi	r25, 0xDC	; 220
   1e306:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <__bss_end+0x1>
   1e30a:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <__bss_end>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
   1e30e:	9c e0       	ldi	r25, 0x0C	; 12
   1e310:	88 e1       	ldi	r24, 0x18	; 24
   1e312:	0f b6       	in	r0, 0x3f	; 63
   1e314:	f8 94       	cli
   1e316:	a8 95       	wdr
   1e318:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e31c:	0f be       	out	0x3f, r0	; 63
   1e31e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
   1e322:	ff cf       	rjmp	.-2      	; 0x1e322 <main+0x148>
	 * checksum itself
	 */
	if (HEXParser.ParserState != HEX_PARSE_STATE_CHECKSUM)
	  HEXParser.Checksum += HEXParser.Data;

	switch (HEXParser.ParserState)
   1e324:	42 30       	cpi	r20, 0x02	; 2
   1e326:	09 f0       	breq	.+2      	; 0x1e32a <main+0x150>
   1e328:	d4 c0       	rjmp	.+424    	; 0x1e4d2 <main+0x2f8>
			HEXParser.DataRem      = HEXParser.Data;
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_HIGH;
			break;

		case HEX_PARSE_STATE_ADDRESS_HIGH:
			HEXParser.CurrAddress += ((uint16_t)HEXParser.Data << 8);
   1e32a:	30 e0       	ldi	r19, 0x00	; 0
   1e32c:	32 2f       	mov	r19, r18
   1e32e:	22 27       	eor	r18, r18
   1e330:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <HEXParser+0xf>
   1e334:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <HEXParser+0x10>
   1e338:	a0 91 e8 01 	lds	r26, 0x01E8	; 0x8001e8 <HEXParser+0x11>
   1e33c:	b0 91 e9 01 	lds	r27, 0x01E9	; 0x8001e9 <HEXParser+0x12>
   1e340:	82 0f       	add	r24, r18
   1e342:	93 1f       	adc	r25, r19
   1e344:	a1 1d       	adc	r26, r1
   1e346:	b1 1d       	adc	r27, r1
   1e348:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <HEXParser+0xf>
   1e34c:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <HEXParser+0x10>
   1e350:	a0 93 e8 01 	sts	0x01E8, r26	; 0x8001e8 <HEXParser+0x11>
   1e354:	b0 93 e9 01 	sts	0x01E9, r27	; 0x8001e9 <HEXParser+0x12>
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_LOW;
   1e358:	d0 92 d7 01 	sts	0x01D7, r13	; 0x8001d7 <HEXParser>
   1e35c:	c9 cf       	rjmp	.-110    	; 0x1e2f0 <main+0x116>
	 * checksum itself
	 */
	if (HEXParser.ParserState != HEX_PARSE_STATE_CHECKSUM)
	  HEXParser.Checksum += HEXParser.Data;

	switch (HEXParser.ParserState)
   1e35e:	44 30       	cpi	r20, 0x04	; 4
   1e360:	d1 f0       	breq	.+52     	; 0x1e396 <main+0x1bc>
   1e362:	45 30       	cpi	r20, 0x05	; 5
   1e364:	21 f1       	breq	.+72     	; 0x1e3ae <main+0x1d4>
   1e366:	b5 c0       	rjmp	.+362    	; 0x1e4d2 <main+0x2f8>
			HEXParser.CurrAddress += ((uint16_t)HEXParser.Data << 8);
			HEXParser.ParserState  = HEX_PARSE_STATE_ADDRESS_LOW;
			break;

		case HEX_PARSE_STATE_ADDRESS_LOW:
			HEXParser.CurrAddress += HEXParser.Data;
   1e368:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <HEXParser+0xf>
   1e36c:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <HEXParser+0x10>
   1e370:	a0 91 e8 01 	lds	r26, 0x01E8	; 0x8001e8 <HEXParser+0x11>
   1e374:	b0 91 e9 01 	lds	r27, 0x01E9	; 0x8001e9 <HEXParser+0x12>
   1e378:	82 0f       	add	r24, r18
   1e37a:	91 1d       	adc	r25, r1
   1e37c:	a1 1d       	adc	r26, r1
   1e37e:	b1 1d       	adc	r27, r1
   1e380:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <HEXParser+0xf>
   1e384:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <HEXParser+0x10>
   1e388:	a0 93 e8 01 	sts	0x01E8, r26	; 0x8001e8 <HEXParser+0x11>
   1e38c:	b0 93 e9 01 	sts	0x01E9, r27	; 0x8001e9 <HEXParser+0x12>
			HEXParser.ParserState  = HEX_PARSE_STATE_RECORD_TYPE;
   1e390:	f0 92 d7 01 	sts	0x01D7, r15	; 0x8001d7 <HEXParser>
   1e394:	ad cf       	rjmp	.-166    	; 0x1e2f0 <main+0x116>
			break;

		case HEX_PARSE_STATE_RECORD_TYPE:
			HEXParser.RecordType   = HEXParser.Data;
   1e396:	20 93 db 01 	sts	0x01DB, r18	; 0x8001db <HEXParser+0x4>
			HEXParser.ParserState  = (HEXParser.DataRem ? HEX_PARSE_STATE_READ_DATA : HEX_PARSE_STATE_CHECKSUM);
   1e39a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <HEXParser+0x5>
   1e39e:	81 11       	cpse	r24, r1
   1e3a0:	02 c0       	rjmp	.+4      	; 0x1e3a6 <main+0x1cc>
   1e3a2:	86 e0       	ldi	r24, 0x06	; 6
   1e3a4:	01 c0       	rjmp	.+2      	; 0x1e3a8 <main+0x1ce>
   1e3a6:	85 e0       	ldi	r24, 0x05	; 5
   1e3a8:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <HEXParser>
   1e3ac:	a1 cf       	rjmp	.-190    	; 0x1e2f0 <main+0x116>
			break;

		case HEX_PARSE_STATE_READ_DATA:
			/* Track the number of read data bytes in the record */
			HEXParser.DataRem--;
   1e3ae:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <HEXParser+0x5>
   1e3b2:	81 50       	subi	r24, 0x01	; 1
   1e3b4:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <HEXParser+0x5>

			/* Protect the bootloader against being written to */
			if (HEXParser.CurrAddress >= BOOT_START_ADDR)
   1e3b8:	40 91 e6 01 	lds	r20, 0x01E6	; 0x8001e6 <HEXParser+0xf>
   1e3bc:	50 91 e7 01 	lds	r21, 0x01E7	; 0x8001e7 <HEXParser+0x10>
   1e3c0:	60 91 e8 01 	lds	r22, 0x01E8	; 0x8001e8 <HEXParser+0x11>
   1e3c4:	70 91 e9 01 	lds	r23, 0x01E9	; 0x8001e9 <HEXParser+0x12>
   1e3c8:	41 15       	cp	r20, r1
   1e3ca:	90 ee       	ldi	r25, 0xE0	; 224
   1e3cc:	59 07       	cpc	r21, r25
   1e3ce:	91 e0       	ldi	r25, 0x01	; 1
   1e3d0:	69 07       	cpc	r22, r25
   1e3d2:	71 05       	cpc	r23, r1
   1e3d4:	28 f0       	brcs	.+10     	; 0x1e3e0 <main+0x206>
			{
				HEXParser.ParserState = HEX_PARSE_STATE_WAIT_LINE;
   1e3d6:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <HEXParser>
				PageDirty = false;
   1e3da:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <__data_end>
   1e3de:	88 cf       	rjmp	.-240    	; 0x1e2f0 <main+0x116>
				return;
			}

			/* Wait for a machine word (two bytes) of data to be read */
			if (HEXParser.DataRem & 0x01)
   1e3e0:	80 ff       	sbrs	r24, 0
   1e3e2:	03 c0       	rjmp	.+6      	; 0x1e3ea <main+0x210>
			{
				HEXParser.PrevData = HEXParser.Data;
   1e3e4:	20 93 d8 01 	sts	0x01D8, r18	; 0x8001d8 <HEXParser+0x1>
   1e3e8:	83 cf       	rjmp	.-250    	; 0x1e2f0 <main+0x116>
				break;
			}

			/* Convert the last two received data bytes into a 16-bit word */
			uint16_t NewDataWord = ((uint16_t)HEXParser.Data << 8) | HEXParser.PrevData;
   1e3ea:	30 e0       	ldi	r19, 0x00	; 0
   1e3ec:	32 2f       	mov	r19, r18
   1e3ee:	22 27       	eor	r18, r18
   1e3f0:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <HEXParser+0x1>
   1e3f4:	28 2b       	or	r18, r24

			switch (HEXParser.RecordType)
   1e3f6:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <HEXParser+0x4>
   1e3fa:	82 30       	cpi	r24, 0x02	; 2
   1e3fc:	09 f4       	brne	.+2      	; 0x1e400 <main+0x226>
   1e3fe:	36 c0       	rjmp	.+108    	; 0x1e46c <main+0x292>
   1e400:	84 30       	cpi	r24, 0x04	; 4
   1e402:	09 f4       	brne	.+2      	; 0x1e406 <main+0x22c>
   1e404:	3e c0       	rjmp	.+124    	; 0x1e482 <main+0x2a8>
   1e406:	81 11       	cpse	r24, r1
   1e408:	4a c0       	rjmp	.+148    	; 0x1e49e <main+0x2c4>
			{
				case HEX_RECORD_TYPE_Data:
					/* If we are writing to a new page, we need to erase it first */
					if (!(PageDirty))
   1e40a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <__data_end>
   1e40e:	81 11       	cpse	r24, r1
   1e410:	13 c0       	rjmp	.+38     	; 0x1e438 <main+0x25e>
					{
						boot_page_erase(HEXParser.PageStartAddress);
   1e412:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <HEXParser+0x7>
   1e416:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <HEXParser+0x8>
   1e41a:	a0 91 e0 01 	lds	r26, 0x01E0	; 0x8001e0 <HEXParser+0x9>
   1e41e:	b0 91 e1 01 	lds	r27, 0x01E1	; 0x8001e1 <HEXParser+0xa>
   1e422:	fc 01       	movw	r30, r24
   1e424:	a0 93 5b 00 	sts	0x005B, r26	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e428:	00 93 57 00 	sts	0x0057, r16	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e42c:	e8 95       	spm
						boot_spm_busy_wait();
   1e42e:	07 b6       	in	r0, 0x37	; 55
   1e430:	00 fc       	sbrc	r0, 0
   1e432:	fd cf       	rjmp	.-6      	; 0x1e42e <main+0x254>

						PageDirty = true;
   1e434:	10 93 d6 01 	sts	0x01D6, r17	; 0x8001d6 <__data_end>
					}

					/* Fill the FLASH memory buffer with the new word of data */
					boot_page_fill(HEXParser.CurrAddress, NewDataWord);
   1e438:	09 01       	movw	r0, r18
   1e43a:	fa 01       	movw	r30, r20
   1e43c:	60 93 5b 00 	sts	0x005B, r22	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
   1e440:	d0 93 57 00 	sts	0x0057, r29	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
   1e444:	e8 95       	spm
   1e446:	11 24       	eor	r1, r1
					HEXParser.CurrAddress += 2;
   1e448:	4e 5f       	subi	r20, 0xFE	; 254
   1e44a:	5f 4f       	sbci	r21, 0xFF	; 255
   1e44c:	6f 4f       	sbci	r22, 0xFF	; 255
   1e44e:	7f 4f       	sbci	r23, 0xFF	; 255
   1e450:	40 93 e6 01 	sts	0x01E6, r20	; 0x8001e6 <HEXParser+0xf>
   1e454:	50 93 e7 01 	sts	0x01E7, r21	; 0x8001e7 <HEXParser+0x10>
   1e458:	60 93 e8 01 	sts	0x01E8, r22	; 0x8001e8 <HEXParser+0x11>
   1e45c:	70 93 e9 01 	sts	0x01E9, r23	; 0x8001e9 <HEXParser+0x12>
 * \note If a page flush occurs the global HEX parser state is updated.
 */
static void FlushPageIfRequired(void)
{
	/* Abort if no data has been buffered for writing to the current page */
	if (!PageDirty)
   1e460:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <__data_end>
   1e464:	88 23       	and	r24, r24
   1e466:	d9 f0       	breq	.+54     	; 0x1e49e <main+0x2c4>
   1e468:	8d de       	rcall	.-742    	; 0x1e184 <FlushPageIfRequired.part.2>
   1e46a:	19 c0       	rjmp	.+50     	; 0x1e49e <main+0x2c4>
					FlushPageIfRequired();
					break;

				case HEX_RECORD_TYPE_ExtendedSegmentAddress:
					/* Extended address data - store the upper 12-bits of the new address */
					HEXParser.CurrBaseAddress = ((uint32_t)NewDataWord << 4);
   1e46c:	c9 01       	movw	r24, r18
   1e46e:	a0 e0       	ldi	r26, 0x00	; 0
   1e470:	b0 e0       	ldi	r27, 0x00	; 0
   1e472:	34 e0       	ldi	r19, 0x04	; 4
   1e474:	88 0f       	add	r24, r24
   1e476:	99 1f       	adc	r25, r25
   1e478:	aa 1f       	adc	r26, r26
   1e47a:	bb 1f       	adc	r27, r27
   1e47c:	3a 95       	dec	r19
   1e47e:	d1 f7       	brne	.-12     	; 0x1e474 <main+0x29a>
   1e480:	06 c0       	rjmp	.+12     	; 0x1e48e <main+0x2b4>
					break;

				case HEX_RECORD_TYPE_ExtendedLinearAddress:
					/* Extended address data - store the upper 16-bits of the new address */
					HEXParser.CurrBaseAddress = ((uint32_t)NewDataWord << 16);
   1e482:	c9 01       	movw	r24, r18
   1e484:	a0 e0       	ldi	r26, 0x00	; 0
   1e486:	b0 e0       	ldi	r27, 0x00	; 0
   1e488:	dc 01       	movw	r26, r24
   1e48a:	99 27       	eor	r25, r25
   1e48c:	88 27       	eor	r24, r24
   1e48e:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <HEXParser+0xb>
   1e492:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <HEXParser+0xc>
   1e496:	a0 93 e4 01 	sts	0x01E4, r26	; 0x8001e4 <HEXParser+0xd>
   1e49a:	b0 93 e5 01 	sts	0x01E5, r27	; 0x8001e5 <HEXParser+0xe>
					break;
			}

			if (!HEXParser.DataRem)
   1e49e:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <HEXParser+0x5>
   1e4a2:	81 11       	cpse	r24, r1
   1e4a4:	25 cf       	rjmp	.-438    	; 0x1e2f0 <main+0x116>
			  HEXParser.ParserState = HEX_PARSE_STATE_CHECKSUM;
   1e4a6:	e0 92 d7 01 	sts	0x01D7, r14	; 0x8001d7 <HEXParser>
   1e4aa:	22 cf       	rjmp	.-444    	; 0x1e2f0 <main+0x116>
			break;

		case HEX_PARSE_STATE_CHECKSUM:
			/* Verify checksum of the completed record */
			if (HEXParser.Data != ((~HEXParser.Checksum + 1) & 0xFF))
   1e4ac:	30 e0       	ldi	r19, 0x00	; 0
   1e4ae:	81 95       	neg	r24
   1e4b0:	90 e0       	ldi	r25, 0x00	; 0
   1e4b2:	28 17       	cp	r18, r24
   1e4b4:	39 07       	cpc	r19, r25
   1e4b6:	09 f0       	breq	.+2      	; 0x1e4ba <main+0x2e0>
 * \note If a page flush occurs the global HEX parser state is updated.
 */
static void FlushPageIfRequired(void)
{
	/* Abort if no data has been buffered for writing to the current page */
	if (!PageDirty)
   1e4b8:	1b cf       	rjmp	.-458    	; 0x1e2f0 <main+0x116>
   1e4ba:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <__data_end>
   1e4be:	81 11       	cpse	r24, r1
   1e4c0:	61 de       	rcall	.-830    	; 0x1e184 <FlushPageIfRequired.part.2>

			/* Flush the FLASH page to physical memory if we are crossing a page boundary */
			FlushPageIfRequired();

			/* If end of the HEX file reached, the bootloader should exit at next opportunity */
			if (HEXParser.RecordType == HEX_RECORD_TYPE_EndOfFile)
   1e4c2:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <HEXParser+0x4>
   1e4c6:	81 30       	cpi	r24, 0x01	; 1
   1e4c8:	09 f0       	breq	.+2      	; 0x1e4cc <main+0x2f2>
   1e4ca:	12 cf       	rjmp	.-476    	; 0x1e2f0 <main+0x116>
			  RunBootloader = false;
   1e4cc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
   1e4d0:	0f cf       	rjmp	.-482    	; 0x1e2f0 <main+0x116>

			break;

		default:
			HEXParser.ParserState = HEX_PARSE_STATE_WAIT_LINE;
   1e4d2:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <HEXParser>
   1e4d6:	0c cf       	rjmp	.-488    	; 0x1e2f0 <main+0x116>

0001e4d8 <__vector_20>:
	TCCR1B = ((1 << CS11) | (1 << CS10));
}

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
   1e4d8:	1f 92       	push	r1
   1e4da:	0f 92       	push	r0
   1e4dc:	0f b6       	in	r0, 0x3f	; 63
   1e4de:	0f 92       	push	r0
   1e4e0:	11 24       	eor	r1, r1
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);
}
   1e4e2:	0f 90       	pop	r0
   1e4e4:	0f be       	out	0x3f, r0	; 63
   1e4e6:	0f 90       	pop	r0
   1e4e8:	1f 90       	pop	r1
   1e4ea:	18 95       	reti

0001e4ec <EVENT_USB_Device_Connect>:
   1e4ec:	08 95       	ret

0001e4ee <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs and stops the Printer management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
   1e4ee:	08 95       	ret

0001e4f0 <EVENT_USB_Device_ConfigurationChanged>:
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	/* Setup Printer Data Endpoints */
	ConfigSuccess &= PRNT_Device_ConfigureEndpoints(&TextOnly_Printer_Interface);
   1e4f0:	81 e0       	ldi	r24, 0x01	; 1
   1e4f2:	91 e0       	ldi	r25, 0x01	; 1
   1e4f4:	34 d0       	rcall	.+104    	; 0x1e55e <PRNT_Device_ConfigureEndpoints>

	/* Reset the HEX parser upon successful connection to a host */
	HEXParser.ParserState = HEX_PARSE_STATE_WAIT_LINE;
   1e4f6:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <HEXParser>
   1e4fa:	08 95       	ret

0001e4fc <EVENT_USB_Device_ControlRequest>:
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	PRNT_Device_ProcessControlRequest(&TextOnly_Printer_Interface);
   1e4fc:	81 e0       	ldi	r24, 0x01	; 1
   1e4fe:	91 e0       	ldi	r25, 0x01	; 1
   1e500:	00 c1       	rjmp	.+512    	; 0x1e702 <PRNT_Device_ProcessControlRequest>

0001e502 <CALLBACK_USB_GetDescriptor>:
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
   1e502:	29 2f       	mov	r18, r25
   1e504:	33 27       	eor	r19, r19
   1e506:	22 30       	cpi	r18, 0x02	; 2
   1e508:	31 05       	cpc	r19, r1
   1e50a:	59 f0       	breq	.+22     	; 0x1e522 <CALLBACK_USB_GetDescriptor+0x20>
   1e50c:	23 30       	cpi	r18, 0x03	; 3
   1e50e:	31 05       	cpc	r19, r1
   1e510:	69 f0       	breq	.+26     	; 0x1e52c <CALLBACK_USB_GetDescriptor+0x2a>
   1e512:	21 30       	cpi	r18, 0x01	; 1
   1e514:	31 05       	cpc	r19, r1
   1e516:	d9 f4       	brne	.+54     	; 0x1e54e <CALLBACK_USB_GetDescriptor+0x4c>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
   1e518:	82 e1       	ldi	r24, 0x12	; 18
   1e51a:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
   1e51c:	24 ec       	ldi	r18, 0xC4	; 196
   1e51e:	31 e0       	ldi	r19, 0x01	; 1
   1e520:	1a c0       	rjmp	.+52     	; 0x1e556 <CALLBACK_USB_GetDescriptor+0x54>
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
   1e522:	80 e2       	ldi	r24, 0x20	; 32
   1e524:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
   1e526:	24 ea       	ldi	r18, 0xA4	; 164
   1e528:	31 e0       	ldi	r19, 0x01	; 1
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
   1e52a:	15 c0       	rjmp	.+42     	; 0x1e556 <CALLBACK_USB_GetDescriptor+0x54>
   1e52c:	99 27       	eor	r25, r25
   1e52e:	83 30       	cpi	r24, 0x03	; 3
   1e530:	91 05       	cpc	r25, r1
   1e532:	68 f4       	brcc	.+26     	; 0x1e54e <CALLBACK_USB_GetDescriptor+0x4c>
   1e534:	fc 01       	movw	r30, r24
   1e536:	ee 0f       	add	r30, r30
   1e538:	ff 1f       	adc	r31, r31
   1e53a:	e2 5b       	subi	r30, 0xB2	; 178
   1e53c:	fe 4f       	sbci	r31, 0xFE	; 254
   1e53e:	20 81       	ld	r18, Z
   1e540:	31 81       	ldd	r19, Z+1	; 0x01
   1e542:	fc 01       	movw	r30, r24
   1e544:	e5 5b       	subi	r30, 0xB5	; 181
   1e546:	fe 4f       	sbci	r31, 0xFE	; 254
   1e548:	80 81       	ld	r24, Z
   1e54a:	90 e0       	ldi	r25, 0x00	; 0
   1e54c:	04 c0       	rjmp	.+8      	; 0x1e556 <CALLBACK_USB_GetDescriptor+0x54>
   1e54e:	80 e0       	ldi	r24, 0x00	; 0
   1e550:	90 e0       	ldi	r25, 0x00	; 0
   1e552:	20 e0       	ldi	r18, 0x00	; 0
   1e554:	30 e0       	ldi	r19, 0x00	; 0
            }

            break;
    }

    *DescriptorAddress = Address;
   1e556:	fa 01       	movw	r30, r20
   1e558:	31 83       	std	Z+1, r19	; 0x01
   1e55a:	20 83       	st	Z, r18
    return Size;
}
   1e55c:	08 95       	ret

0001e55e <PRNT_Device_ConfigureEndpoints>:

void PRNT_Device_CreateBlockingStream(USB_ClassInfo_PRNT_Device_t* const PRNTInterfaceInfo,
                                      FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(PRNT_Device_putchar, PRNT_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, PRNTInterfaceInfo);
   1e55e:	cf 93       	push	r28
   1e560:	df 93       	push	r29
   1e562:	ec 01       	movw	r28, r24
   1e564:	1e 86       	std	Y+14, r1	; 0x0e
   1e566:	1d 86       	std	Y+13, r1	; 0x0d
   1e568:	88 e1       	ldi	r24, 0x18	; 24
   1e56a:	8d 87       	std	Y+13, r24	; 0x0d
   1e56c:	82 e0       	ldi	r24, 0x02	; 2
   1e56e:	8c 83       	std	Y+4, r24	; 0x04
   1e570:	89 87       	std	Y+9, r24	; 0x09
   1e572:	61 e0       	ldi	r22, 0x01	; 1
   1e574:	ce 01       	movw	r24, r28
   1e576:	01 96       	adiw	r24, 0x01	; 1
   1e578:	99 d1       	rcall	.+818    	; 0x1e8ac <Endpoint_ConfigureEndpointTable>
   1e57a:	88 23       	and	r24, r24
   1e57c:	31 f0       	breq	.+12     	; 0x1e58a <PRNT_Device_ConfigureEndpoints+0x2c>
   1e57e:	61 e0       	ldi	r22, 0x01	; 1
   1e580:	ce 01       	movw	r24, r28
   1e582:	06 96       	adiw	r24, 0x06	; 6
   1e584:	df 91       	pop	r29
   1e586:	cf 91       	pop	r28
   1e588:	91 c1       	rjmp	.+802    	; 0x1e8ac <Endpoint_ConfigureEndpointTable>
   1e58a:	80 e0       	ldi	r24, 0x00	; 0
   1e58c:	df 91       	pop	r29
   1e58e:	cf 91       	pop	r28
   1e590:	08 95       	ret

0001e592 <PRNT_Device_Flush>:
   1e592:	2e b3       	in	r18, 0x1e	; 30
   1e594:	24 30       	cpi	r18, 0x04	; 4
   1e596:	f1 f4       	brne	.+60     	; 0x1e5d4 <PRNT_Device_Flush+0x42>
   1e598:	fc 01       	movw	r30, r24
   1e59a:	81 81       	ldd	r24, Z+1	; 0x01
   1e59c:	8f 70       	andi	r24, 0x0F	; 15
   1e59e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1e5a2:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1e5a6:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
   1e5aa:	89 2b       	or	r24, r25
   1e5ac:	89 f0       	breq	.+34     	; 0x1e5d0 <PRNT_Device_Flush+0x3e>
   1e5ae:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e5b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e5b6:	8e 77       	andi	r24, 0x7E	; 126
   1e5b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e5bc:	95 fd       	sbrc	r25, 5
   1e5be:	08 c0       	rjmp	.+16     	; 0x1e5d0 <PRNT_Device_Flush+0x3e>
   1e5c0:	cf d1       	rcall	.+926    	; 0x1e960 <Endpoint_WaitUntilReady>
   1e5c2:	81 11       	cpse	r24, r1
   1e5c4:	08 c0       	rjmp	.+16     	; 0x1e5d6 <PRNT_Device_Flush+0x44>
   1e5c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e5ca:	8e 77       	andi	r24, 0x7E	; 126
   1e5cc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e5d0:	80 e0       	ldi	r24, 0x00	; 0
   1e5d2:	08 95       	ret
   1e5d4:	82 e0       	ldi	r24, 0x02	; 2
   1e5d6:	08 95       	ret

0001e5d8 <PRNT_Device_USBTask>:
   1e5d8:	cf 93       	push	r28
   1e5da:	df 93       	push	r29
   1e5dc:	2e b3       	in	r18, 0x1e	; 30
   1e5de:	24 30       	cpi	r18, 0x04	; 4
   1e5e0:	09 f0       	breq	.+2      	; 0x1e5e4 <PRNT_Device_USBTask+0xc>
   1e5e2:	43 c0       	rjmp	.+134    	; 0x1e66a <PRNT_Device_USBTask+0x92>
   1e5e4:	ec 01       	movw	r28, r24
   1e5e6:	89 81       	ldd	r24, Y+1	; 0x01
   1e5e8:	8f 70       	andi	r24, 0x0F	; 15
   1e5ea:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1e5ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e5f2:	80 ff       	sbrs	r24, 0
   1e5f4:	02 c0       	rjmp	.+4      	; 0x1e5fa <PRNT_Device_USBTask+0x22>
   1e5f6:	ce 01       	movw	r24, r28
   1e5f8:	cc df       	rcall	.-104    	; 0x1e592 <PRNT_Device_Flush>
   1e5fa:	8e 85       	ldd	r24, Y+14	; 0x0e
   1e5fc:	88 23       	and	r24, r24
   1e5fe:	a9 f1       	breq	.+106    	; 0x1e66a <PRNT_Device_USBTask+0x92>
   1e600:	2e 81       	ldd	r18, Y+6	; 0x06
   1e602:	2f 70       	andi	r18, 0x0F	; 15
   1e604:	81 e0       	ldi	r24, 0x01	; 1
   1e606:	90 e0       	ldi	r25, 0x00	; 0
   1e608:	ac 01       	movw	r20, r24
   1e60a:	02 c0       	rjmp	.+4      	; 0x1e610 <PRNT_Device_USBTask+0x38>
   1e60c:	44 0f       	add	r20, r20
   1e60e:	55 1f       	adc	r21, r21
   1e610:	2a 95       	dec	r18
   1e612:	e2 f7       	brpl	.-8      	; 0x1e60c <PRNT_Device_USBTask+0x34>
   1e614:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
   1e618:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
   1e61c:	29 81       	ldd	r18, Y+1	; 0x01
   1e61e:	2f 70       	andi	r18, 0x0F	; 15
   1e620:	01 c0       	rjmp	.+2      	; 0x1e624 <PRNT_Device_USBTask+0x4c>
   1e622:	88 0f       	add	r24, r24
   1e624:	2a 95       	dec	r18
   1e626:	ea f7       	brpl	.-6      	; 0x1e622 <PRNT_Device_USBTask+0x4a>
   1e628:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
   1e62c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
   1e630:	8e 81       	ldd	r24, Y+6	; 0x06
   1e632:	8f 70       	andi	r24, 0x0F	; 15
   1e634:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1e638:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1e63c:	80 61       	ori	r24, 0x10	; 16
   1e63e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1e642:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1e646:	88 60       	ori	r24, 0x08	; 8
   1e648:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1e64c:	89 81       	ldd	r24, Y+1	; 0x01
   1e64e:	8f 70       	andi	r24, 0x0F	; 15
   1e650:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1e654:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1e658:	80 61       	ori	r24, 0x10	; 16
   1e65a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1e65e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1e662:	88 60       	ori	r24, 0x08	; 8
   1e664:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1e668:	1e 86       	std	Y+14, r1	; 0x0e
   1e66a:	df 91       	pop	r29
   1e66c:	cf 91       	pop	r28
   1e66e:	08 95       	ret

0001e670 <PRNT_Device_BytesReceived>:
   1e670:	2e b3       	in	r18, 0x1e	; 30
   1e672:	24 30       	cpi	r18, 0x04	; 4
   1e674:	19 f0       	breq	.+6      	; 0x1e67c <PRNT_Device_BytesReceived+0xc>
   1e676:	80 e0       	ldi	r24, 0x00	; 0
   1e678:	90 e0       	ldi	r25, 0x00	; 0
   1e67a:	08 95       	ret
   1e67c:	fc 01       	movw	r30, r24
   1e67e:	86 81       	ldd	r24, Z+6	; 0x06
   1e680:	8f 70       	andi	r24, 0x0F	; 15
   1e682:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1e686:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e68a:	82 ff       	sbrs	r24, 2
   1e68c:	f4 cf       	rjmp	.-24     	; 0x1e676 <PRNT_Device_BytesReceived+0x6>
   1e68e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1e692:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
   1e696:	00 97       	sbiw	r24, 0x00	; 0
   1e698:	31 f4       	brne	.+12     	; 0x1e6a6 <PRNT_Device_BytesReceived+0x36>
   1e69a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e69e:	2b 77       	andi	r18, 0x7B	; 123
   1e6a0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e6a4:	08 95       	ret
   1e6a6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1e6aa:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
   1e6ae:	08 95       	ret

0001e6b0 <PRNT_Device_ReceiveByte>:
   1e6b0:	2e b3       	in	r18, 0x1e	; 30
   1e6b2:	24 30       	cpi	r18, 0x04	; 4
   1e6b4:	19 f0       	breq	.+6      	; 0x1e6bc <PRNT_Device_ReceiveByte+0xc>
   1e6b6:	8f ef       	ldi	r24, 0xFF	; 255
   1e6b8:	9f ef       	ldi	r25, 0xFF	; 255
   1e6ba:	08 95       	ret
   1e6bc:	fc 01       	movw	r30, r24
   1e6be:	86 81       	ldd	r24, Z+6	; 0x06
   1e6c0:	8f 70       	andi	r24, 0x0F	; 15
   1e6c2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1e6c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e6ca:	82 ff       	sbrs	r24, 2
   1e6cc:	f4 cf       	rjmp	.-24     	; 0x1e6b6 <PRNT_Device_ReceiveByte+0x6>
   1e6ce:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1e6d2:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
   1e6d6:	89 2b       	or	r24, r25
   1e6d8:	21 f0       	breq	.+8      	; 0x1e6e2 <PRNT_Device_ReceiveByte+0x32>
   1e6da:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1e6de:	30 e0       	ldi	r19, 0x00	; 0
   1e6e0:	02 c0       	rjmp	.+4      	; 0x1e6e6 <PRNT_Device_ReceiveByte+0x36>
   1e6e2:	2f ef       	ldi	r18, 0xFF	; 255
   1e6e4:	3f ef       	ldi	r19, 0xFF	; 255
   1e6e6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1e6ea:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
   1e6ee:	89 2b       	or	r24, r25
   1e6f0:	29 f4       	brne	.+10     	; 0x1e6fc <PRNT_Device_ReceiveByte+0x4c>
   1e6f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e6f6:	8b 77       	andi	r24, 0x7B	; 123
   1e6f8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e6fc:	c9 01       	movw	r24, r18
   1e6fe:	08 95       	ret

0001e700 <PRNT_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void PRNT_Device_Event_Stub(void)
{
   1e700:	08 95       	ret

0001e702 <PRNT_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_PRINTER_DRIVER
#define  __INCLUDE_FROM_PRINTER_DEVICE_C
#include "PrinterClassDevice.h"

void PRNT_Device_ProcessControlRequest(USB_ClassInfo_PRNT_Device_t* const PRNTInterfaceInfo)
{
   1e702:	cf 93       	push	r28
   1e704:	df 93       	push	r29
   1e706:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e708:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
   1e70c:	83 ff       	sbrs	r24, 3
   1e70e:	5d c0       	rjmp	.+186    	; 0x1e7ca <PRNT_Device_ProcessControlRequest+0xc8>
	  return;

	if (USB_ControlRequest.wIndex != PRNTInterfaceInfo->Config.InterfaceNumber)
   1e710:	88 81       	ld	r24, Y
   1e712:	90 e0       	ldi	r25, 0x00	; 0
   1e714:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <USB_ControlRequest+0x4>
   1e718:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <USB_ControlRequest+0x5>
   1e71c:	28 17       	cp	r18, r24
   1e71e:	39 07       	cpc	r19, r25
   1e720:	09 f0       	breq	.+2      	; 0x1e724 <PRNT_Device_ProcessControlRequest+0x22>
   1e722:	53 c0       	rjmp	.+166    	; 0x1e7ca <PRNT_Device_ProcessControlRequest+0xc8>
	  return;

	switch (USB_ControlRequest.bRequest)
   1e724:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <USB_ControlRequest+0x1>
   1e728:	81 30       	cpi	r24, 0x01	; 1
   1e72a:	41 f1       	breq	.+80     	; 0x1e77c <PRNT_Device_ProcessControlRequest+0x7a>
   1e72c:	18 f0       	brcs	.+6      	; 0x1e734 <PRNT_Device_ProcessControlRequest+0x32>
   1e72e:	82 30       	cpi	r24, 0x02	; 2
   1e730:	e1 f1       	breq	.+120    	; 0x1e7aa <PRNT_Device_ProcessControlRequest+0xa8>
   1e732:	4b c0       	rjmp	.+150    	; 0x1e7ca <PRNT_Device_ProcessControlRequest+0xc8>
	{
		case PRNT_REQ_GetDeviceID:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
   1e734:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <USB_ControlRequest>
   1e738:	81 3a       	cpi	r24, 0xA1	; 161
   1e73a:	09 f0       	breq	.+2      	; 0x1e73e <PRNT_Device_ProcessControlRequest+0x3c>
   1e73c:	46 c0       	rjmp	.+140    	; 0x1e7ca <PRNT_Device_ProcessControlRequest+0xc8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e73e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e742:	87 7f       	andi	r24, 0xF7	; 247
   1e744:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e748:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()))
   1e74c:	80 fd       	sbrc	r24, 0
   1e74e:	04 c0       	rjmp	.+8      	; 0x1e758 <PRNT_Device_ProcessControlRequest+0x56>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e750:	8e b3       	in	r24, 0x1e	; 30
   1e752:	81 11       	cpse	r24, r1
   1e754:	f9 cf       	rjmp	.-14     	; 0x1e748 <PRNT_Device_ProcessControlRequest+0x46>
   1e756:	39 c0       	rjmp	.+114    	; 0x1e7ca <PRNT_Device_ProcessControlRequest+0xc8>
					  return;
				}

				uint16_t IEEEStringLen = strlen(PRNTInterfaceInfo->Config.IEEE1284String);
   1e758:	eb 85       	ldd	r30, Y+11	; 0x0b
   1e75a:	fc 85       	ldd	r31, Y+12	; 0x0c
   1e75c:	df 01       	movw	r26, r30
   1e75e:	0d 90       	ld	r0, X+
   1e760:	00 20       	and	r0, r0
   1e762:	e9 f7       	brne	.-6      	; 0x1e75e <PRNT_Device_ProcessControlRequest+0x5c>
   1e764:	11 97       	sbiw	r26, 0x01	; 1
   1e766:	bd 01       	movw	r22, r26
   1e768:	6e 1b       	sub	r22, r30
   1e76a:	7f 0b       	sbc	r23, r31
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_BE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_BE(const uint16_t Data)
			{
				UEDATX = (Data >> 8);
   1e76c:	70 93 f1 00 	sts	0x00F1, r23	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data & 0xFF);
   1e770:	60 93 f1 00 	sts	0x00F1, r22	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Endpoint_Write_16_BE(IEEEStringLen);
				Endpoint_Write_Control_Stream_LE(PRNTInterfaceInfo->Config.IEEE1284String, IEEEStringLen);
   1e774:	8b 85       	ldd	r24, Y+11	; 0x0b
   1e776:	9c 85       	ldd	r25, Y+12	; 0x0c
   1e778:	2b d0       	rcall	.+86     	; 0x1e7d0 <Endpoint_Write_Control_Stream_LE>
   1e77a:	14 c0       	rjmp	.+40     	; 0x1e7a4 <PRNT_Device_ProcessControlRequest+0xa2>
				Endpoint_ClearStatusStage();
			}

			break;
		case PRNT_REQ_GetPortStatus:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
   1e77c:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <USB_ControlRequest>
   1e780:	81 3a       	cpi	r24, 0xA1	; 161
   1e782:	19 f5       	brne	.+70     	; 0x1e7ca <PRNT_Device_ProcessControlRequest+0xc8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e784:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e788:	87 7f       	andi	r24, 0xF7	; 247
   1e78a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e78e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()))
   1e792:	80 fd       	sbrc	r24, 0
   1e794:	04 c0       	rjmp	.+8      	; 0x1e79e <PRNT_Device_ProcessControlRequest+0x9c>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e796:	8e b3       	in	r24, 0x1e	; 30
   1e798:	81 11       	cpse	r24, r1
   1e79a:	f9 cf       	rjmp	.-14     	; 0x1e78e <PRNT_Device_ProcessControlRequest+0x8c>
   1e79c:	16 c0       	rjmp	.+44     	; 0x1e7ca <PRNT_Device_ProcessControlRequest+0xc8>
					  return;
				}

				Endpoint_Write_8(PRNTInterfaceInfo->State.PortStatus);
   1e79e:	8d 85       	ldd	r24, Y+13	; 0x0d
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e7a0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				EVENT_PRNT_Device_SoftReset(PRNTInterfaceInfo);
			}

			break;
	}
}
   1e7a4:	df 91       	pop	r29
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				Endpoint_Write_8(PRNTInterfaceInfo->State.PortStatus);
				Endpoint_ClearStatusStage();
   1e7a6:	cf 91       	pop	r28
   1e7a8:	be c0       	rjmp	.+380    	; 0x1e926 <Endpoint_ClearStatusStage>
			}

			break;
		case PRNT_REQ_SoftReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   1e7aa:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <USB_ControlRequest>
   1e7ae:	81 32       	cpi	r24, 0x21	; 33
   1e7b0:	61 f4       	brne	.+24     	; 0x1e7ca <PRNT_Device_ProcessControlRequest+0xc8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e7b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e7b6:	87 7f       	andi	r24, 0xF7	; 247
   1e7b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
   1e7bc:	b4 d0       	rcall	.+360    	; 0x1e926 <Endpoint_ClearStatusStage>

				PRNTInterfaceInfo->State.IsPrinterReset = true;
   1e7be:	81 e0       	ldi	r24, 0x01	; 1
   1e7c0:	8e 87       	std	Y+14, r24	; 0x0e
				EVENT_PRNT_Device_SoftReset(PRNTInterfaceInfo);
			}

			break;
	}
}
   1e7c2:	ce 01       	movw	r24, r28
   1e7c4:	df 91       	pop	r29
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				PRNTInterfaceInfo->State.IsPrinterReset = true;

				EVENT_PRNT_Device_SoftReset(PRNTInterfaceInfo);
   1e7c6:	cf 91       	pop	r28
   1e7c8:	9b cf       	rjmp	.-202    	; 0x1e700 <PRNT_Device_Event_Stub>
			}

			break;
	}
}
   1e7ca:	df 91       	pop	r29
   1e7cc:	cf 91       	pop	r28
   1e7ce:	08 95       	ret

0001e7d0 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1e7d0:	20 91 f2 01 	lds	r18, 0x01F2	; 0x8001f2 <USB_ControlRequest+0x6>
   1e7d4:	30 91 f3 01 	lds	r19, 0x01F3	; 0x8001f3 <USB_ControlRequest+0x7>
   1e7d8:	26 17       	cp	r18, r22
   1e7da:	37 07       	cpc	r19, r23
   1e7dc:	48 f0       	brcs	.+18     	; 0x1e7f0 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1e7de:	61 15       	cp	r22, r1
   1e7e0:	71 05       	cpc	r23, r1
   1e7e2:	39 f4       	brne	.+14     	; 0x1e7f2 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e7e4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e7e8:	2e 77       	andi	r18, 0x7E	; 126
   1e7ea:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e7ee:	01 c0       	rjmp	.+2      	; 0x1e7f2 <Endpoint_Write_Control_Stream_LE+0x22>
   1e7f0:	b9 01       	movw	r22, r18
   1e7f2:	fc 01       	movw	r30, r24
   1e7f4:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1e7f6:	61 15       	cp	r22, r1
   1e7f8:	71 05       	cpc	r23, r1
   1e7fa:	61 f1       	breq	.+88     	; 0x1e854 <Endpoint_Write_Control_Stream_LE+0x84>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e7fc:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e7fe:	88 23       	and	r24, r24
   1e800:	d9 f1       	breq	.+118    	; 0x1e878 <Endpoint_Write_Control_Stream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e802:	85 30       	cpi	r24, 0x05	; 5
   1e804:	d9 f1       	breq	.+118    	; 0x1e87c <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e806:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1e80a:	83 fd       	sbrc	r24, 3
   1e80c:	39 c0       	rjmp	.+114    	; 0x1e880 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e80e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1e812:	82 fd       	sbrc	r24, 2
   1e814:	2b c0       	rjmp	.+86     	; 0x1e86c <Endpoint_Write_Control_Stream_LE+0x9c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e816:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
   1e81a:	80 ff       	sbrs	r24, 0
   1e81c:	ec cf       	rjmp	.-40     	; 0x1e7f6 <Endpoint_Write_Control_Stream_LE+0x26>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   1e81e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
   1e822:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1e826:	61 15       	cp	r22, r1
   1e828:	71 05       	cpc	r23, r1
   1e82a:	51 f0       	breq	.+20     	; 0x1e840 <Endpoint_Write_Control_Stream_LE+0x70>
   1e82c:	88 30       	cpi	r24, 0x08	; 8
   1e82e:	91 05       	cpc	r25, r1
   1e830:	38 f4       	brcc	.+14     	; 0x1e840 <Endpoint_Write_Control_Stream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1e832:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e834:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1e838:	61 50       	subi	r22, 0x01	; 1
   1e83a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
   1e83c:	01 96       	adiw	r24, 0x01	; 1
   1e83e:	f3 cf       	rjmp	.-26     	; 0x1e826 <Endpoint_Write_Control_Stream_LE+0x56>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1e840:	21 e0       	ldi	r18, 0x01	; 1
   1e842:	08 97       	sbiw	r24, 0x08	; 8
   1e844:	09 f0       	breq	.+2      	; 0x1e848 <Endpoint_Write_Control_Stream_LE+0x78>
   1e846:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e848:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e84c:	8e 77       	andi	r24, 0x7E	; 126
   1e84e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e852:	d1 cf       	rjmp	.-94     	; 0x1e7f6 <Endpoint_Write_Control_Stream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1e854:	21 11       	cpse	r18, r1
   1e856:	d2 cf       	rjmp	.-92     	; 0x1e7fc <Endpoint_Write_Control_Stream_LE+0x2c>
   1e858:	09 c0       	rjmp	.+18     	; 0x1e86c <Endpoint_Write_Control_Stream_LE+0x9c>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e85a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e85c:	88 23       	and	r24, r24
   1e85e:	61 f0       	breq	.+24     	; 0x1e878 <Endpoint_Write_Control_Stream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e860:	85 30       	cpi	r24, 0x05	; 5
   1e862:	61 f0       	breq	.+24     	; 0x1e87c <Endpoint_Write_Control_Stream_LE+0xac>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1e864:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1e868:	83 fd       	sbrc	r24, 3
   1e86a:	0a c0       	rjmp	.+20     	; 0x1e880 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e86c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1e870:	82 ff       	sbrs	r24, 2
   1e872:	f3 cf       	rjmp	.-26     	; 0x1e85a <Endpoint_Write_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1e874:	80 e0       	ldi	r24, 0x00	; 0
   1e876:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1e878:	82 e0       	ldi	r24, 0x02	; 2
   1e87a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1e87c:	83 e0       	ldi	r24, 0x03	; 3
   1e87e:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1e880:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1e882:	08 95       	ret

0001e884 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
   1e884:	8f 70       	andi	r24, 0x0F	; 15
   1e886:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1e88a:	eb ee       	ldi	r30, 0xEB	; 235
   1e88c:	f0 e0       	ldi	r31, 0x00	; 0
   1e88e:	80 81       	ld	r24, Z
   1e890:	81 60       	ori	r24, 0x01	; 1
   1e892:	80 83       	st	Z, r24
   1e894:	ed ee       	ldi	r30, 0xED	; 237
   1e896:	f0 e0       	ldi	r31, 0x00	; 0
   1e898:	10 82       	st	Z, r1
   1e89a:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
   1e89e:	40 83       	st	Z, r20
   1e8a0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
   1e8a4:	88 1f       	adc	r24, r24
   1e8a6:	88 27       	eor	r24, r24
   1e8a8:	88 1f       	adc	r24, r24
   1e8aa:	08 95       	ret

0001e8ac <Endpoint_ConfigureEndpointTable>:
   1e8ac:	0f 93       	push	r16
   1e8ae:	1f 93       	push	r17
   1e8b0:	cf 93       	push	r28
   1e8b2:	df 93       	push	r29
   1e8b4:	06 2f       	mov	r16, r22
   1e8b6:	ec 01       	movw	r28, r24
   1e8b8:	10 e0       	ldi	r17, 0x00	; 0
   1e8ba:	10 17       	cp	r17, r16
   1e8bc:	71 f1       	breq	.+92     	; 0x1e91a <Endpoint_ConfigureEndpointTable+0x6e>
   1e8be:	68 81       	ld	r22, Y
   1e8c0:	61 11       	cpse	r22, r1
   1e8c2:	03 c0       	rjmp	.+6      	; 0x1e8ca <Endpoint_ConfigureEndpointTable+0x1e>
   1e8c4:	1f 5f       	subi	r17, 0xFF	; 255
   1e8c6:	25 96       	adiw	r28, 0x05	; 5
   1e8c8:	f8 cf       	rjmp	.-16     	; 0x1e8ba <Endpoint_ConfigureEndpointTable+0xe>
   1e8ca:	2c 81       	ldd	r18, Y+4	; 0x04
   1e8cc:	a9 81       	ldd	r26, Y+1	; 0x01
   1e8ce:	ba 81       	ldd	r27, Y+2	; 0x02
   1e8d0:	9b 81       	ldd	r25, Y+3	; 0x03
   1e8d2:	86 2f       	mov	r24, r22
   1e8d4:	8f 70       	andi	r24, 0x0F	; 15
   1e8d6:	87 30       	cpi	r24, 0x07	; 7
   1e8d8:	10 f0       	brcs	.+4      	; 0x1e8de <Endpoint_ConfigureEndpointTable+0x32>
   1e8da:	80 e0       	ldi	r24, 0x00	; 0
   1e8dc:	1f c0       	rjmp	.+62     	; 0x1e91c <Endpoint_ConfigureEndpointTable+0x70>
   1e8de:	22 30       	cpi	r18, 0x02	; 2
   1e8e0:	10 f4       	brcc	.+4      	; 0x1e8e6 <Endpoint_ConfigureEndpointTable+0x3a>
   1e8e2:	42 e0       	ldi	r20, 0x02	; 2
   1e8e4:	01 c0       	rjmp	.+2      	; 0x1e8e8 <Endpoint_ConfigureEndpointTable+0x3c>
   1e8e6:	46 e0       	ldi	r20, 0x06	; 6
   1e8e8:	e8 e0       	ldi	r30, 0x08	; 8
   1e8ea:	f0 e0       	ldi	r31, 0x00	; 0
   1e8ec:	20 e0       	ldi	r18, 0x00	; 0
   1e8ee:	ea 17       	cp	r30, r26
   1e8f0:	fb 07       	cpc	r31, r27
   1e8f2:	20 f4       	brcc	.+8      	; 0x1e8fc <Endpoint_ConfigureEndpointTable+0x50>
   1e8f4:	2f 5f       	subi	r18, 0xFF	; 255
   1e8f6:	ee 0f       	add	r30, r30
   1e8f8:	ff 1f       	adc	r31, r31
   1e8fa:	f9 cf       	rjmp	.-14     	; 0x1e8ee <Endpoint_ConfigureEndpointTable+0x42>
   1e8fc:	22 95       	swap	r18
   1e8fe:	20 7f       	andi	r18, 0xF0	; 240
   1e900:	42 2b       	or	r20, r18
   1e902:	50 e4       	ldi	r21, 0x40	; 64
   1e904:	95 9f       	mul	r25, r21
   1e906:	90 01       	movw	r18, r0
   1e908:	11 24       	eor	r1, r1
   1e90a:	66 1f       	adc	r22, r22
   1e90c:	66 27       	eor	r22, r22
   1e90e:	66 1f       	adc	r22, r22
   1e910:	62 2b       	or	r22, r18
   1e912:	b8 df       	rcall	.-144    	; 0x1e884 <Endpoint_ConfigureEndpoint_Prv>
   1e914:	81 11       	cpse	r24, r1
   1e916:	d6 cf       	rjmp	.-84     	; 0x1e8c4 <Endpoint_ConfigureEndpointTable+0x18>
   1e918:	e0 cf       	rjmp	.-64     	; 0x1e8da <Endpoint_ConfigureEndpointTable+0x2e>
   1e91a:	81 e0       	ldi	r24, 0x01	; 1
   1e91c:	df 91       	pop	r29
   1e91e:	cf 91       	pop	r28
   1e920:	1f 91       	pop	r17
   1e922:	0f 91       	pop	r16
   1e924:	08 95       	ret

0001e926 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1e926:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <USB_ControlRequest>
   1e92a:	87 ff       	sbrs	r24, 7
   1e92c:	0f c0       	rjmp	.+30     	; 0x1e94c <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e92e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
   1e932:	82 fd       	sbrc	r24, 2
   1e934:	04 c0       	rjmp	.+8      	; 0x1e93e <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e936:	8e b3       	in	r24, 0x1e	; 30
   1e938:	81 11       	cpse	r24, r1
   1e93a:	f9 cf       	rjmp	.-14     	; 0x1e92e <Endpoint_ClearStatusStage+0x8>
   1e93c:	10 c0       	rjmp	.+32     	; 0x1e95e <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e93e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e942:	8b 77       	andi	r24, 0x7B	; 123
   1e944:	0a c0       	rjmp	.+20     	; 0x1e95a <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e946:	8e b3       	in	r24, 0x1e	; 30
   1e948:	88 23       	and	r24, r24
   1e94a:	49 f0       	breq	.+18     	; 0x1e95e <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e94c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1e950:	80 ff       	sbrs	r24, 0
   1e952:	f9 cf       	rjmp	.-14     	; 0x1e946 <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e954:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e958:	8e 77       	andi	r24, 0x7E	; 126
   1e95a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1e95e:	08 95       	ret

0001e960 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
   1e960:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
   1e964:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
   1e968:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1e96a:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
   1e96e:	84 2f       	mov	r24, r20
   1e970:	81 70       	andi	r24, 0x01	; 1
   1e972:	40 ff       	sbrs	r20, 0
   1e974:	22 c0       	rjmp	.+68     	; 0x1e9ba <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e976:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
   1e97a:	80 fd       	sbrc	r24, 0
   1e97c:	1c c0       	rjmp	.+56     	; 0x1e9b6 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1e97e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1e980:	88 23       	and	r24, r24
   1e982:	99 f0       	breq	.+38     	; 0x1e9aa <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1e984:	85 30       	cpi	r24, 0x05	; 5
   1e986:	99 f0       	breq	.+38     	; 0x1e9ae <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1e988:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
   1e98c:	85 fd       	sbrc	r24, 5
   1e98e:	11 c0       	rjmp	.+34     	; 0x1e9b2 <Endpoint_WaitUntilReady+0x52>
   1e990:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
   1e994:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
   1e998:	24 17       	cp	r18, r20
   1e99a:	35 07       	cpc	r19, r21
   1e99c:	31 f3       	breq	.-52     	; 0x1e96a <Endpoint_WaitUntilReady+0xa>
   1e99e:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
   1e9a0:	11 f0       	breq	.+4      	; 0x1e9a6 <Endpoint_WaitUntilReady+0x46>
   1e9a2:	9a 01       	movw	r18, r20
   1e9a4:	e2 cf       	rjmp	.-60     	; 0x1e96a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
   1e9a6:	84 e0       	ldi	r24, 0x04	; 4
   1e9a8:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
   1e9aa:	82 e0       	ldi	r24, 0x02	; 2
   1e9ac:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
   1e9ae:	83 e0       	ldi	r24, 0x03	; 3
   1e9b0:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
   1e9b2:	81 e0       	ldi	r24, 0x01	; 1
   1e9b4:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
   1e9b6:	80 e0       	ldi	r24, 0x00	; 0
   1e9b8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e9ba:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
   1e9be:	42 ff       	sbrs	r20, 2
   1e9c0:	de cf       	rjmp	.-68     	; 0x1e97e <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
   1e9c2:	08 95       	ret

0001e9c4 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
   1e9c4:	0f 93       	push	r16
   1e9c6:	1f 93       	push	r17
   1e9c8:	cf 93       	push	r28
   1e9ca:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1e9cc:	49 d0       	rcall	.+146    	; 0x1ea60 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1e9ce:	50 d0       	rcall	.+160    	; 0x1ea70 <USB_INT_ClearAllInterrupts>
   1e9d0:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1e9d2:	d0 e0       	ldi	r29, 0x00	; 0
   1e9d4:	88 81       	ld	r24, Y
   1e9d6:	8f 77       	andi	r24, 0x7F	; 127
   1e9d8:	88 83       	st	Y, r24
   1e9da:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
   1e9dc:	80 68       	ori	r24, 0x80	; 128
   1e9de:	88 83       	st	Y, r24
   1e9e0:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1e9e2:	8f 7d       	andi	r24, 0xDF	; 223
   1e9e4:	88 83       	st	Y, r24
   1e9e6:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1e9e8:	f0 e0       	ldi	r31, 0x00	; 0
   1e9ea:	80 81       	ld	r24, Z
   1e9ec:	80 68       	ori	r24, 0x80	; 128
   1e9ee:	80 83       	st	Z, r24
   1e9f0:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1e9f2:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
   1e9f4:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
   1e9f8:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1e9fa:	10 e0       	ldi	r17, 0x00	; 0
   1e9fc:	f8 01       	movw	r30, r16
   1e9fe:	80 81       	ld	r24, Z
   1ea00:	8b 7f       	andi	r24, 0xFB	; 251
   1ea02:	80 83       	st	Z, r24
   1ea04:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1ea06:	81 60       	ori	r24, 0x01	; 1
   1ea08:	88 83       	st	Y, r24
   1ea0a:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1ea0c:	60 e0       	ldi	r22, 0x00	; 0
   1ea0e:	80 e0       	ldi	r24, 0x00	; 0
   1ea10:	39 df       	rcall	.-398    	; 0x1e884 <Endpoint_ConfigureEndpoint_Prv>
   1ea12:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1ea14:	f0 e0       	ldi	r31, 0x00	; 0
   1ea16:	80 81       	ld	r24, Z
   1ea18:	8e 7f       	andi	r24, 0xFE	; 254
   1ea1a:	80 83       	st	Z, r24
   1ea1c:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1ea1e:	f0 e0       	ldi	r31, 0x00	; 0
   1ea20:	80 81       	ld	r24, Z
   1ea22:	81 60       	ori	r24, 0x01	; 1
   1ea24:	80 83       	st	Z, r24
   1ea26:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1ea28:	88 60       	ori	r24, 0x08	; 8
   1ea2a:	80 83       	st	Z, r24
   1ea2c:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1ea2e:	80 81       	ld	r24, Z
   1ea30:	8e 7f       	andi	r24, 0xFE	; 254
   1ea32:	80 83       	st	Z, r24
   1ea34:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
   1ea36:	80 61       	ori	r24, 0x10	; 16
   1ea38:	88 83       	st	Y, r24
   1ea3a:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1ea3c:	cf 91       	pop	r28
   1ea3e:	1f 91       	pop	r17
   1ea40:	0f 91       	pop	r16
   1ea42:	08 95       	ret

0001ea44 <USB_Init>:
   1ea44:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
   1ea46:	f0 e0       	ldi	r31, 0x00	; 0
   1ea48:	80 81       	ld	r24, Z
   1ea4a:	8f 7e       	andi	r24, 0xEF	; 239
   1ea4c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
   1ea4e:	e7 ed       	ldi	r30, 0xD7	; 215
   1ea50:	f0 e0       	ldi	r31, 0x00	; 0
   1ea52:	80 81       	ld	r24, Z
   1ea54:	81 60       	ori	r24, 0x01	; 1
   1ea56:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1ea58:	81 e0       	ldi	r24, 0x01	; 1
   1ea5a:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <USB_IsInitialized>

	USB_ResetInterface();
   1ea5e:	b2 cf       	rjmp	.-156    	; 0x1e9c4 <USB_ResetInterface>

0001ea60 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1ea60:	e8 ed       	ldi	r30, 0xD8	; 216
   1ea62:	f0 e0       	ldi	r31, 0x00	; 0
   1ea64:	80 81       	ld	r24, Z
   1ea66:	8c 7f       	andi	r24, 0xFC	; 252
   1ea68:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1ea6a:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1ea6e:	08 95       	ret

0001ea70 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1ea70:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1ea74:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1ea78:	08 95       	ret

0001ea7a <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1ea7a:	1f 92       	push	r1
   1ea7c:	0f 92       	push	r0
   1ea7e:	0f b6       	in	r0, 0x3f	; 63
   1ea80:	0f 92       	push	r0
   1ea82:	11 24       	eor	r1, r1
   1ea84:	0b b6       	in	r0, 0x3b	; 59
   1ea86:	0f 92       	push	r0
   1ea88:	2f 93       	push	r18
   1ea8a:	3f 93       	push	r19
   1ea8c:	4f 93       	push	r20
   1ea8e:	5f 93       	push	r21
   1ea90:	6f 93       	push	r22
   1ea92:	7f 93       	push	r23
   1ea94:	8f 93       	push	r24
   1ea96:	9f 93       	push	r25
   1ea98:	af 93       	push	r26
   1ea9a:	bf 93       	push	r27
   1ea9c:	ef 93       	push	r30
   1ea9e:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1eaa0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1eaa4:	80 ff       	sbrs	r24, 0
   1eaa6:	1b c0       	rjmp	.+54     	; 0x1eade <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1eaa8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1eaac:	80 ff       	sbrs	r24, 0
   1eaae:	17 c0       	rjmp	.+46     	; 0x1eade <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1eab0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
   1eab4:	8e 7f       	andi	r24, 0xFE	; 254
   1eab6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1eaba:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1eabe:	80 ff       	sbrs	r24, 0
   1eac0:	0b c0       	rjmp	.+22     	; 0x1ead8 <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1eac2:	84 e1       	ldi	r24, 0x14	; 20
   1eac4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1eac6:	86 e1       	ldi	r24, 0x16	; 22
   1eac8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1eaca:	09 b4       	in	r0, 0x29	; 41
   1eacc:	00 fe       	sbrs	r0, 0
   1eace:	fd cf       	rjmp	.-6      	; 0x1eaca <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1ead0:	81 e0       	ldi	r24, 0x01	; 1
   1ead2:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1ead4:	0b dd       	rcall	.-1514   	; 0x1e4ec <EVENT_USB_Device_Connect>
   1ead6:	03 c0       	rjmp	.+6      	; 0x1eade <__vector_10+0x64>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1ead8:	19 bc       	out	0x29, r1	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
			EVENT_USB_Device_Disconnect();
   1eada:	1e ba       	out	0x1e, r1	; 30
   1eadc:	08 dd       	rcall	.-1520   	; 0x1e4ee <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1eade:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1eae2:	80 ff       	sbrs	r24, 0
   1eae4:	17 c0       	rjmp	.+46     	; 0x1eb14 <__vector_10+0x9a>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1eae6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1eaea:	80 ff       	sbrs	r24, 0
   1eaec:	13 c0       	rjmp	.+38     	; 0x1eb14 <__vector_10+0x9a>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1eaee:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1eaf2:	8e 7f       	andi	r24, 0xFE	; 254
   1eaf4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1eaf8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1eafc:	80 61       	ori	r24, 0x10	; 16
   1eafe:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
   1eb02:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1eb06:	80 62       	ori	r24, 0x20	; 32
   1eb08:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1eb0c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1eb0e:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
   1eb10:	8e bb       	out	0x1e, r24	; 30
   1eb12:	7b d1       	rcall	.+758    	; 0x1ee0a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1eb14:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1eb18:	84 ff       	sbrs	r24, 4
   1eb1a:	2e c0       	rjmp	.+92     	; 0x1eb78 <__vector_10+0xfe>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1eb1c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1eb20:	84 ff       	sbrs	r24, 4
   1eb22:	2a c0       	rjmp	.+84     	; 0x1eb78 <__vector_10+0xfe>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1eb24:	84 e1       	ldi	r24, 0x14	; 20
   1eb26:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1eb28:	86 e1       	ldi	r24, 0x16	; 22
   1eb2a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1eb2c:	09 b4       	in	r0, 0x29	; 41
   1eb2e:	00 fe       	sbrs	r0, 0
   1eb30:	fd cf       	rjmp	.-6      	; 0x1eb2c <__vector_10+0xb2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1eb32:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
   1eb36:	8f 7d       	andi	r24, 0xDF	; 223
   1eb38:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1eb3c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1eb40:	8f 7e       	andi	r24, 0xEF	; 239
   1eb42:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1eb46:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1eb4a:	8f 7e       	andi	r24, 0xEF	; 239
   1eb4c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1eb50:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1eb54:	81 60       	ori	r24, 0x01	; 1
   1eb56:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1eb5a:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <USB_Device_ConfigurationNumber>
   1eb5e:	88 23       	and	r24, r24
   1eb60:	11 f0       	breq	.+4      	; 0x1eb66 <__vector_10+0xec>
		  USB_DeviceState = DEVICE_STATE_Configured;
   1eb62:	84 e0       	ldi	r24, 0x04	; 4
   1eb64:	07 c0       	rjmp	.+14     	; 0x1eb74 <__vector_10+0xfa>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1eb66:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
   1eb6a:	87 fd       	sbrc	r24, 7
   1eb6c:	02 c0       	rjmp	.+4      	; 0x1eb72 <__vector_10+0xf8>
   1eb6e:	81 e0       	ldi	r24, 0x01	; 1
   1eb70:	01 c0       	rjmp	.+2      	; 0x1eb74 <__vector_10+0xfa>
   1eb72:	83 e0       	ldi	r24, 0x03	; 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1eb74:	8e bb       	out	0x1e, r24	; 30
   1eb76:	49 d1       	rcall	.+658    	; 0x1ee0a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1eb78:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1eb7c:	83 ff       	sbrs	r24, 3
   1eb7e:	21 c0       	rjmp	.+66     	; 0x1ebc2 <__vector_10+0x148>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1eb80:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1eb84:	83 ff       	sbrs	r24, 3
   1eb86:	1d c0       	rjmp	.+58     	; 0x1ebc2 <__vector_10+0x148>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1eb88:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1eb8c:	87 7f       	andi	r24, 0xF7	; 247
   1eb8e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1eb92:	82 e0       	ldi	r24, 0x02	; 2
   1eb94:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
   1eb96:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1eb9a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
   1eb9e:	8e 7f       	andi	r24, 0xFE	; 254
   1eba0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1eba4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1eba8:	8e 7f       	andi	r24, 0xFE	; 254
   1ebaa:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1ebae:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
   1ebb2:	80 61       	ori	r24, 0x10	; 16
   1ebb4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   1ebb8:	42 e0       	ldi	r20, 0x02	; 2
   1ebba:	60 e0       	ldi	r22, 0x00	; 0
   1ebbc:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1ebbe:	62 de       	rcall	.-828    	; 0x1e884 <Endpoint_ConfigureEndpoint_Prv>
   1ebc0:	24 d1       	rcall	.+584    	; 0x1ee0a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1ebc2:	ff 91       	pop	r31
   1ebc4:	ef 91       	pop	r30
   1ebc6:	bf 91       	pop	r27
   1ebc8:	af 91       	pop	r26
   1ebca:	9f 91       	pop	r25
   1ebcc:	8f 91       	pop	r24
   1ebce:	7f 91       	pop	r23
   1ebd0:	6f 91       	pop	r22
   1ebd2:	5f 91       	pop	r21
   1ebd4:	4f 91       	pop	r20
   1ebd6:	3f 91       	pop	r19
   1ebd8:	2f 91       	pop	r18
   1ebda:	0f 90       	pop	r0
   1ebdc:	0b be       	out	0x3b, r0	; 59
   1ebde:	0f 90       	pop	r0
   1ebe0:	0f be       	out	0x3f, r0	; 63
   1ebe2:	0f 90       	pop	r0
   1ebe4:	1f 90       	pop	r1
   1ebe6:	18 95       	reti

0001ebe8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1ebe8:	1f 93       	push	r17
   1ebea:	cf 93       	push	r28
   1ebec:	df 93       	push	r29
   1ebee:	00 d0       	rcall	.+0      	; 0x1ebf0 <USB_Device_ProcessControlRequest+0x8>
   1ebf0:	cd b7       	in	r28, 0x3d	; 61
   1ebf2:	de b7       	in	r29, 0x3e	; 62
   1ebf4:	ec ee       	ldi	r30, 0xEC	; 236
   1ebf6:	f1 e0       	ldi	r31, 0x01	; 1
   1ebf8:	84 ef       	ldi	r24, 0xF4	; 244
   1ebfa:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1ebfc:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1ec00:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1ec02:	8e 17       	cp	r24, r30
   1ec04:	9f 07       	cpc	r25, r31
   1ec06:	d1 f7       	brne	.-12     	; 0x1ebfc <USB_Device_ProcessControlRequest+0x14>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1ec08:	79 dc       	rcall	.-1806   	; 0x1e4fc <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ec0a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
   1ec0e:	83 ff       	sbrs	r24, 3
   1ec10:	e8 c0       	rjmp	.+464    	; 0x1ede2 <USB_Device_ProcessControlRequest+0x1fa>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1ec12:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
   1ec16:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <USB_ControlRequest+0x1>
   1ec1a:	95 30       	cpi	r25, 0x05	; 5
   1ec1c:	09 f4       	brne	.+2      	; 0x1ec20 <USB_Device_ProcessControlRequest+0x38>
   1ec1e:	6f c0       	rjmp	.+222    	; 0x1ecfe <USB_Device_ProcessControlRequest+0x116>
   1ec20:	30 f4       	brcc	.+12     	; 0x1ec2e <USB_Device_ProcessControlRequest+0x46>
   1ec22:	91 30       	cpi	r25, 0x01	; 1
   1ec24:	71 f1       	breq	.+92     	; 0x1ec82 <USB_Device_ProcessControlRequest+0x9a>
   1ec26:	68 f0       	brcs	.+26     	; 0x1ec42 <USB_Device_ProcessControlRequest+0x5a>
   1ec28:	93 30       	cpi	r25, 0x03	; 3
   1ec2a:	59 f1       	breq	.+86     	; 0x1ec82 <USB_Device_ProcessControlRequest+0x9a>
   1ec2c:	da c0       	rjmp	.+436    	; 0x1ede2 <USB_Device_ProcessControlRequest+0x1fa>
   1ec2e:	98 30       	cpi	r25, 0x08	; 8
   1ec30:	09 f4       	brne	.+2      	; 0x1ec34 <USB_Device_ProcessControlRequest+0x4c>
   1ec32:	a8 c0       	rjmp	.+336    	; 0x1ed84 <USB_Device_ProcessControlRequest+0x19c>
   1ec34:	99 30       	cpi	r25, 0x09	; 9
   1ec36:	09 f4       	brne	.+2      	; 0x1ec3a <USB_Device_ProcessControlRequest+0x52>
   1ec38:	b4 c0       	rjmp	.+360    	; 0x1eda2 <USB_Device_ProcessControlRequest+0x1ba>
   1ec3a:	96 30       	cpi	r25, 0x06	; 6
   1ec3c:	09 f0       	breq	.+2      	; 0x1ec40 <USB_Device_ProcessControlRequest+0x58>
   1ec3e:	d1 c0       	rjmp	.+418    	; 0x1ede2 <USB_Device_ProcessControlRequest+0x1fa>
   1ec40:	7f c0       	rjmp	.+254    	; 0x1ed40 <USB_Device_ProcessControlRequest+0x158>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1ec42:	80 38       	cpi	r24, 0x80	; 128
   1ec44:	99 f0       	breq	.+38     	; 0x1ec6c <USB_Device_ProcessControlRequest+0x84>
   1ec46:	82 38       	cpi	r24, 0x82	; 130
   1ec48:	09 f0       	breq	.+2      	; 0x1ec4c <USB_Device_ProcessControlRequest+0x64>
   1ec4a:	cb c0       	rjmp	.+406    	; 0x1ede2 <USB_Device_ProcessControlRequest+0x1fa>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1ec4c:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <USB_ControlRequest+0x4>
   1ec50:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
   1ec52:	87 30       	cpi	r24, 0x07	; 7
   1ec54:	08 f0       	brcs	.+2      	; 0x1ec58 <USB_Device_ProcessControlRequest+0x70>
   1ec56:	c5 c0       	rjmp	.+394    	; 0x1ede2 <USB_Device_ProcessControlRequest+0x1fa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ec58:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1ec5c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
   1ec60:	85 fb       	bst	r24, 5
   1ec62:	88 27       	eor	r24, r24
   1ec64:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ec66:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1ec6a:	01 c0       	rjmp	.+2      	; 0x1ec6e <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
   1ec6c:	80 e0       	ldi	r24, 0x00	; 0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ec6e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ec72:	97 7f       	andi	r25, 0xF7	; 247
   1ec74:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1ec78:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
   1ec7c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
   1ec80:	8c c0       	rjmp	.+280    	; 0x1ed9a <USB_Device_ProcessControlRequest+0x1b2>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1ec82:	28 2f       	mov	r18, r24
   1ec84:	2d 7f       	andi	r18, 0xFD	; 253
   1ec86:	09 f0       	breq	.+2      	; 0x1ec8a <USB_Device_ProcessControlRequest+0xa2>
   1ec88:	ac c0       	rjmp	.+344    	; 0x1ede2 <USB_Device_ProcessControlRequest+0x1fa>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
   1ec8a:	82 30       	cpi	r24, 0x02	; 2
   1ec8c:	09 f0       	breq	.+2      	; 0x1ec90 <USB_Device_ProcessControlRequest+0xa8>
   1ec8e:	a9 c0       	rjmp	.+338    	; 0x1ede2 <USB_Device_ProcessControlRequest+0x1fa>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1ec90:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <USB_ControlRequest+0x2>
   1ec94:	81 11       	cpse	r24, r1
   1ec96:	2a c0       	rjmp	.+84     	; 0x1ecec <USB_Device_ProcessControlRequest+0x104>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1ec98:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <USB_ControlRequest+0x4>
   1ec9c:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
   1ec9e:	2f ef       	ldi	r18, 0xFF	; 255
   1eca0:	28 0f       	add	r18, r24
   1eca2:	26 30       	cpi	r18, 0x06	; 6
   1eca4:	08 f0       	brcs	.+2      	; 0x1eca8 <USB_Device_ProcessControlRequest+0xc0>
   1eca6:	9d c0       	rjmp	.+314    	; 0x1ede2 <USB_Device_ProcessControlRequest+0x1fa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1eca8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1ecac:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   1ecb0:	20 ff       	sbrs	r18, 0
   1ecb2:	1c c0       	rjmp	.+56     	; 0x1ecec <USB_Device_ProcessControlRequest+0x104>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   1ecb4:	93 30       	cpi	r25, 0x03	; 3
   1ecb6:	21 f4       	brne	.+8      	; 0x1ecc0 <USB_Device_ProcessControlRequest+0xd8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1ecb8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1ecbc:	80 62       	ori	r24, 0x20	; 32
   1ecbe:	14 c0       	rjmp	.+40     	; 0x1ece8 <USB_Device_ProcessControlRequest+0x100>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1ecc0:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1ecc4:	90 61       	ori	r25, 0x10	; 16
   1ecc6:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1ecca:	21 e0       	ldi	r18, 0x01	; 1
   1eccc:	30 e0       	ldi	r19, 0x00	; 0
   1ecce:	a9 01       	movw	r20, r18
   1ecd0:	02 c0       	rjmp	.+4      	; 0x1ecd6 <USB_Device_ProcessControlRequest+0xee>
   1ecd2:	44 0f       	add	r20, r20
   1ecd4:	55 1f       	adc	r21, r21
   1ecd6:	8a 95       	dec	r24
   1ecd8:	e2 f7       	brpl	.-8      	; 0x1ecd2 <USB_Device_ProcessControlRequest+0xea>
   1ecda:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
   1ecde:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1ece2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1ece6:	88 60       	ori	r24, 0x08	; 8
   1ece8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ecec:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ecf0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ecf4:	87 7f       	andi	r24, 0xF7	; 247
   1ecf6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1ecfa:	15 de       	rcall	.-982    	; 0x1e926 <Endpoint_ClearStatusStage>
   1ecfc:	72 c0       	rjmp	.+228    	; 0x1ede2 <USB_Device_ProcessControlRequest+0x1fa>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1ecfe:	81 11       	cpse	r24, r1
   1ed00:	70 c0       	rjmp	.+224    	; 0x1ede2 <USB_Device_ProcessControlRequest+0x1fa>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
   1ed02:	10 91 ee 01 	lds	r17, 0x01EE	; 0x8001ee <USB_ControlRequest+0x2>
   1ed06:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1ed08:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
   1ed0c:	80 78       	andi	r24, 0x80	; 128
   1ed0e:	81 2b       	or	r24, r17
   1ed10:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
   1ed14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ed18:	87 7f       	andi	r24, 0xF7	; 247
   1ed1a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1ed1e:	03 de       	rcall	.-1018   	; 0x1e926 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ed20:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
   1ed24:	80 ff       	sbrs	r24, 0
   1ed26:	fc cf       	rjmp	.-8      	; 0x1ed20 <USB_Device_ProcessControlRequest+0x138>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
   1ed28:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
   1ed2c:	80 68       	ori	r24, 0x80	; 128
   1ed2e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1ed32:	11 11       	cpse	r17, r1
   1ed34:	02 c0       	rjmp	.+4      	; 0x1ed3a <USB_Device_ProcessControlRequest+0x152>
   1ed36:	82 e0       	ldi	r24, 0x02	; 2
   1ed38:	01 c0       	rjmp	.+2      	; 0x1ed3c <USB_Device_ProcessControlRequest+0x154>
   1ed3a:	83 e0       	ldi	r24, 0x03	; 3
   1ed3c:	8e bb       	out	0x1e, r24	; 30
   1ed3e:	51 c0       	rjmp	.+162    	; 0x1ede2 <USB_Device_ProcessControlRequest+0x1fa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1ed40:	80 58       	subi	r24, 0x80	; 128
   1ed42:	82 30       	cpi	r24, 0x02	; 2
   1ed44:	08 f0       	brcs	.+2      	; 0x1ed48 <USB_Device_ProcessControlRequest+0x160>
   1ed46:	4d c0       	rjmp	.+154    	; 0x1ede2 <USB_Device_ProcessControlRequest+0x1fa>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1ed48:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <USB_ControlRequest+0x4>
   1ed4c:	70 91 f1 01 	lds	r23, 0x01F1	; 0x8001f1 <USB_ControlRequest+0x5>
   1ed50:	ae 01       	movw	r20, r28
   1ed52:	4f 5f       	subi	r20, 0xFF	; 255
   1ed54:	5f 4f       	sbci	r21, 0xFF	; 255
   1ed56:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <USB_ControlRequest+0x2>
   1ed5a:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <USB_ControlRequest+0x3>
   1ed5e:	d1 db       	rcall	.-2142   	; 0x1e502 <CALLBACK_USB_GetDescriptor>
   1ed60:	bc 01       	movw	r22, r24
   1ed62:	89 2b       	or	r24, r25
   1ed64:	09 f4       	brne	.+2      	; 0x1ed68 <USB_Device_ProcessControlRequest+0x180>
   1ed66:	3d c0       	rjmp	.+122    	; 0x1ede2 <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ed68:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ed6c:	97 7f       	andi	r25, 0xF7	; 247
   1ed6e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1ed72:	89 81       	ldd	r24, Y+1	; 0x01
   1ed74:	9a 81       	ldd	r25, Y+2	; 0x02
   1ed76:	2c dd       	rcall	.-1448   	; 0x1e7d0 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ed78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ed7c:	8b 77       	andi	r24, 0x7B	; 123
   1ed7e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ed82:	2f c0       	rjmp	.+94     	; 0x1ede2 <USB_Device_ProcessControlRequest+0x1fa>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1ed84:	80 38       	cpi	r24, 0x80	; 128
   1ed86:	69 f5       	brne	.+90     	; 0x1ede2 <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ed88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ed8c:	87 7f       	andi	r24, 0xF7	; 247
   1ed8e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1ed92:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1ed96:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ed9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1ed9e:	8e 77       	andi	r24, 0x7E	; 126
   1eda0:	aa cf       	rjmp	.-172    	; 0x1ecf6 <USB_Device_ProcessControlRequest+0x10e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1eda2:	81 11       	cpse	r24, r1
   1eda4:	1e c0       	rjmp	.+60     	; 0x1ede2 <USB_Device_ProcessControlRequest+0x1fa>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1eda6:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <USB_ControlRequest+0x2>
   1edaa:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <USB_ControlRequest+0x3>
   1edae:	99 27       	eor	r25, r25
   1edb0:	02 97       	sbiw	r24, 0x02	; 2
   1edb2:	bc f4       	brge	.+46     	; 0x1ede2 <USB_Device_ProcessControlRequest+0x1fa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1edb4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1edb8:	87 7f       	andi	r24, 0xF7	; 247
   1edba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1edbe:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <USB_ControlRequest+0x2>
   1edc2:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
   1edc6:	af dd       	rcall	.-1186   	; 0x1e926 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
   1edc8:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <USB_Device_ConfigurationNumber>
   1edcc:	81 11       	cpse	r24, r1
   1edce:	06 c0       	rjmp	.+12     	; 0x1eddc <USB_Device_ProcessControlRequest+0x1f4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1edd0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1edd4:	87 fd       	sbrc	r24, 7
   1edd6:	02 c0       	rjmp	.+4      	; 0x1eddc <USB_Device_ProcessControlRequest+0x1f4>
   1edd8:	81 e0       	ldi	r24, 0x01	; 1
   1edda:	01 c0       	rjmp	.+2      	; 0x1edde <USB_Device_ProcessControlRequest+0x1f6>
   1eddc:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
   1edde:	8e bb       	out	0x1e, r24	; 30
   1ede0:	87 db       	rcall	.-2290   	; 0x1e4f0 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ede2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1ede6:	83 ff       	sbrs	r24, 3
   1ede8:	0a c0       	rjmp	.+20     	; 0x1edfe <USB_Device_ProcessControlRequest+0x216>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1edea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
   1edee:	87 7f       	andi	r24, 0xF7	; 247
   1edf0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1edf4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
   1edf8:	80 62       	ori	r24, 0x20	; 32
   1edfa:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
   1edfe:	0f 90       	pop	r0
   1ee00:	0f 90       	pop	r0
   1ee02:	df 91       	pop	r29
   1ee04:	cf 91       	pop	r28
   1ee06:	1f 91       	pop	r17
   1ee08:	08 95       	ret

0001ee0a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
   1ee0a:	08 95       	ret

0001ee0c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1ee0c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ee0e:	8e b3       	in	r24, 0x1e	; 30
   1ee10:	88 23       	and	r24, r24
   1ee12:	99 f0       	breq	.+38     	; 0x1ee3a <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1ee14:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
   1ee18:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1ee1a:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
   1ee1e:	89 2f       	mov	r24, r25
   1ee20:	81 70       	andi	r24, 0x01	; 1
   1ee22:	90 fd       	sbrc	r25, 0
   1ee24:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1ee26:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ee28:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ee2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
   1ee30:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
   1ee32:	da de       	rcall	.-588    	; 0x1ebe8 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ee34:	cf 70       	andi	r28, 0x0F	; 15
   1ee36:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
   1ee3a:	cf 91       	pop	r28
   1ee3c:	08 95       	ret

0001ee3e <_exit>:
   1ee3e:	f8 94       	cli

0001ee40 <__stop_program>:
   1ee40:	ff cf       	rjmp	.-2      	; 0x1ee40 <__stop_program>
