
leospiflash.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  00000d60  00000df4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080021a  0080021a  00000f0e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b3e  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f0c  00000000  00000000  00002c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ee8  00000000  00000000  00003b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  00004a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000099fb  00000000  00000000  00004ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a76  00000000  00000000  0000e6e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000f159  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003c25  00000000  00000000  0000f231  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	59 c0       	rjmp	.+178    	; 0x130 <__vector_31>
  7e:	00 00       	nop
  80:	ce c0       	rjmp	.+412    	; 0x21e <__vector_32>
  82:	00 00       	nop
  84:	79 c0       	rjmp	.+242    	; 0x178 <__vector_33>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
	...

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	12 e0       	ldi	r17, 0x02	; 2
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e0 e6       	ldi	r30, 0x60	; 96
  c0:	fd e0       	ldi	r31, 0x0D	; 13
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 31       	cpi	r26, 0x1A	; 26
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	22 e0       	ldi	r18, 0x02	; 2
  d0:	aa e1       	ldi	r26, 0x1A	; 26
  d2:	b2 e0       	ldi	r27, 0x02	; 2
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a4 34       	cpi	r26, 0x44	; 68
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	08 d2       	rcall	.+1040   	; 0x4f0 <main>
  e0:	3d c6       	rjmp	.+3194   	; 0xd5c <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <SWU_RxByte>:
/*****************************************************************************/
/* Read Byte                                                                 */
/*****************************************************************************/
int SWU_RxByte(FILE* f)
{
    while ( !sRxDone );
  e4:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <sRxDone>
  e8:	88 23       	and	r24, r24
  ea:	e1 f3       	breq	.-8      	; 0xe4 <SWU_RxByte>

    sRxDone = 0;
  ec:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <sRxDone>

    return sRxData;
  f0:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <sRxData>
}
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret

000000f8 <SWU_TxByte>:
/*****************************************************************************/
/* Write Byte                                                                */
/*****************************************************************************/
int SWU_TxByte(char data, FILE* f)
{
    while (sTxCount);
  f8:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <sTxCount>
  fc:	91 11       	cpse	r25, r1
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <SWU_TxByte>

    sTxData = ~data;            /* !!! Write inverted data for stop bit generation */
 100:	80 95       	com	r24
 102:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <sTxData>
    sTxCount = 10;              /* Start(1) + data(8) + Stop(1) */
 106:	8a e0       	ldi	r24, 0x0A	; 10
 108:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <sTxCount>

    return 0;
}
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	08 95       	ret

00000112 <SWU_RxByte_echo>:
{
    rx_cb = cb;
}

int SWU_RxByte_echo(FILE* f)
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
    int byte;

    byte = SWU_RxByte(NULL);
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	e4 df       	rcall	.-56     	; 0xe4 <SWU_RxByte>
 11c:	c8 2f       	mov	r28, r24
 11e:	d9 2f       	mov	r29, r25
    SWU_TxByte((char) byte, NULL);
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	e9 df       	rcall	.-46     	; 0xf8 <SWU_TxByte>

    return byte;
}
 126:	8c 2f       	mov	r24, r28
 128:	9d 2f       	mov	r25, r29
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <__vector_31>:
        TIMSK1 = _BV(OCIE1A) | _BV(OCIE1B);
    }
}
#else //TIMER3:
ISR(TIMER3_CAPT_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
    /* Set OCR3B to read Rx */
    /* Output Compare B interrupt will occurs 1.5 BIT_TIME counter(time) later */
    OCR3B = ICR3 + (uint16_t)(BIT_TIME * 1.5);
 13e:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f8096>
 142:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f8097>
 146:	8d 53       	subi	r24, 0x3D	; 61
 148:	96 4f       	sbci	r25, 0xF6	; 246
 14a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7f809b>
 14e:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7f809a>
    /* Clear temporary variable */
    sRxTemp = 0;
 152:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__data_end>
    /* Set bit mask to read first bit */
    sRxMask = 1;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <sRxMask>
    /* Clear Output Compare B interrupt flag */
    TIFR3 = _BV(OCF3B);
 15c:	84 e0       	ldi	r24, 0x04	; 4
 15e:	88 bb       	out	0x18, r24	; 24

    /* If RX pin is low, It means start bit */
    if (!(SWU_PIN & _BV(SWU_RX)))
 160:	37 99       	sbic	0x06, 7	; 6
 162:	03 c0       	rjmp	.+6      	; 0x16a <__vector_31+0x3a>
    {
        /* Disable input capture(Detecting start bit), Enable Output Compare A(for Tx) / B(for Rx) interrupt */
        TIMSK3 = _BV(OCIE3A) | _BV(OCIE3B);
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7f8071>
    }
}
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_33>:
        TIMSK1 = _BV(ICIE1) | _BV(OCIE1A);  /* Enable input capture + COMPA interrupt */
    }
}
#else // TIMER3:
ISR(TIMER3_COMPB_vect)
{
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	2f 93       	push	r18
 184:	3f 93       	push	r19
 186:	4f 93       	push	r20
 188:	5f 93       	push	r21
 18a:	6f 93       	push	r22
 18c:	7f 93       	push	r23
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	af 93       	push	r26
 194:	bf 93       	push	r27
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
    if (sRxMask)
 19a:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <sRxMask>
 19e:	88 23       	and	r24, r24
 1a0:	b9 f0       	breq	.+46     	; 0x1d0 <__vector_33+0x58>
    {
        if (SWU_PIN & _BV(SWU_RX))
 1a2:	37 9b       	sbis	0x06, 7	; 6
 1a4:	07 c0       	rjmp	.+14     	; 0x1b4 <__vector_33+0x3c>
        {
            sRxTemp |= sRxMask;    /* if Rx input is high, write 1 to bit */
 1a6:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <sRxMask>
 1aa:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
 1ae:	89 2b       	or	r24, r25
 1b0:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <__data_end>
        }
        sRxMask <<= 1;     /* Shift 1 bit */
 1b4:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <sRxMask>
 1b8:	88 0f       	add	r24, r24
 1ba:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <sRxMask>
        OCR3B += BIT_TIME;  /* Set OCR3B to read next bit */
 1be:	ea e9       	ldi	r30, 0x9A	; 154
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	91 81       	ldd	r25, Z+1	; 0x01
 1c6:	8e 57       	subi	r24, 0x7E	; 126
 1c8:	99 4f       	sbci	r25, 0xF9	; 249
 1ca:	91 83       	std	Z+1, r25	; 0x01
 1cc:	80 83       	st	Z, r24
 1ce:	16 c0       	rjmp	.+44     	; 0x1fc <__vector_33+0x84>
    }
    else
    {
        if (NULL != rx_cb)
 1d0:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <rx_cb>
 1d4:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <rx_cb+0x1>
 1d8:	30 97       	sbiw	r30, 0x00	; 0
 1da:	21 f0       	breq	.+8      	; 0x1e4 <__vector_33+0x6c>
        {
            rx_cb(sRxTemp);
 1dc:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
 1e0:	09 95       	icall
 1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <__vector_33+0x7a>
        }
        else
        {
            sRxDone = 1;          /* Reading 8 bits is done */
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <sRxDone>
            sRxData = sRxTemp;   /* Store Rx data */
 1ea:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
 1ee:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <sRxData>
        }
        TIFR3 = _BV(ICF3);    /* Clear input capture interrupt flag to read new byte */
 1f2:	80 e2       	ldi	r24, 0x20	; 32
 1f4:	88 bb       	out	0x18, r24	; 24
        TIMSK3 = _BV(ICIE3) | _BV(OCIE3A);  /* Enable input capture + COMPA interrupt */
 1f6:	82 e2       	ldi	r24, 0x22	; 34
 1f8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7f8071>
    }
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	7f 91       	pop	r23
 20a:	6f 91       	pop	r22
 20c:	5f 91       	pop	r21
 20e:	4f 91       	pop	r20
 210:	3f 91       	pop	r19
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <__vector_32>:
        TCCR1A = OutputMode;
    }
}
#else // TIMER3:
ISR(TIMER3_COMPA_vect)
{
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
    uint8_t OutputMode;

    OCR3A += BIT_TIME;                              /* Set OCR3A to send next bit */
 230:	e8 e9       	ldi	r30, 0x98	; 152
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	91 81       	ldd	r25, Z+1	; 0x01
 238:	8e 57       	subi	r24, 0x7E	; 126
 23a:	99 4f       	sbci	r25, 0xF9	; 249
 23c:	91 83       	std	Z+1, r25	; 0x01
 23e:	80 83       	st	Z, r24

    if (sTxCount)                                   /* If there are bits to send */
 240:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <sTxCount>
 244:	88 23       	and	r24, r24
 246:	c9 f0       	breq	.+50     	; 0x27a <__vector_32+0x5c>
    {
        sTxCount--;                                 /* Decrease counter */
 248:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <sTxCount>
 24c:	81 50       	subi	r24, 0x01	; 1
 24e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <sTxCount>
        OutputMode = _BV(COM3A1);                   /* Set output as low */

        if (sTxCount != 9)                          /* If it's data bit */
 252:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <sTxCount>
 256:	89 30       	cpi	r24, 0x09	; 9
 258:	69 f0       	breq	.+26     	; 0x274 <__vector_32+0x56>
        {
            if (!(sTxData & 0x01))
 25a:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <sTxData>
 25e:	80 ff       	sbrs	r24, 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <__vector_32+0x48>
    OCR3A += BIT_TIME;                              /* Set OCR3A to send next bit */

    if (sTxCount)                                   /* If there are bits to send */
    {
        sTxCount--;                                 /* Decrease counter */
        OutputMode = _BV(COM3A1);                   /* Set output as low */
 262:	90 e8       	ldi	r25, 0x80	; 128
 264:	01 c0       	rjmp	.+2      	; 0x268 <__vector_32+0x4a>
        if (sTxCount != 9)                          /* If it's data bit */
        {
            if (!(sTxData & 0x01))
            {
                /* If bit is low, set output high (sTxData is inverted) */
                OutputMode = _BV(COM3A1) | _BV(COM3A0);
 266:	90 ec       	ldi	r25, 0xC0	; 192
            }
            sTxData >>= 1;
 268:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <sTxData>
 26c:	86 95       	lsr	r24
 26e:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <sTxData>
 272:	01 c0       	rjmp	.+2      	; 0x276 <__vector_32+0x58>
    OCR3A += BIT_TIME;                              /* Set OCR3A to send next bit */

    if (sTxCount)                                   /* If there are bits to send */
    {
        sTxCount--;                                 /* Decrease counter */
        OutputMode = _BV(COM3A1);                   /* Set output as low */
 274:	90 e8       	ldi	r25, 0x80	; 128
                OutputMode = _BV(COM3A1) | _BV(COM3A0);
            }
            sTxData >>= 1;
        }

        TCCR3A = OutputMode;
 276:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    }
}
 27a:	ff 91       	pop	r31
 27c:	ef 91       	pop	r30
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <SWU_Initialize>:
/* Enable Input Capture interrupt to receive data                            */
/*****************************************************************************/
void SWU_Initialize(void)
{
#ifndef DISABLE_FDEV_SETP
    fdev_setup_stream(&soft_uart, SWU_TxByte, SWU_RxByte, _FDEV_SETUP_RW);
 28c:	e1 e2       	ldi	r30, 0x21	; 33
 28e:	f2 e0       	ldi	r31, 0x02	; 2
 290:	2c e7       	ldi	r18, 0x7C	; 124
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	31 87       	std	Z+9, r19	; 0x09
 296:	20 87       	std	Z+8, r18	; 0x08
 298:	82 e7       	ldi	r24, 0x72	; 114
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	93 87       	std	Z+11, r25	; 0x0b
 29e:	82 87       	std	Z+10, r24	; 0x0a
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	83 83       	std	Z+3, r24	; 0x03
 2a4:	15 86       	std	Z+13, r1	; 0x0d
 2a6:	14 86       	std	Z+12, r1	; 0x0c
    fdev_setup_stream(&soft_uart_echo, SWU_TxByte, SWU_RxByte_echo, _FDEV_SETUP_RW);
 2a8:	e0 e3       	ldi	r30, 0x30	; 48
 2aa:	f2 e0       	ldi	r31, 0x02	; 2
 2ac:	31 87       	std	Z+9, r19	; 0x09
 2ae:	20 87       	std	Z+8, r18	; 0x08
 2b0:	29 e8       	ldi	r18, 0x89	; 137
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	33 87       	std	Z+11, r19	; 0x0b
 2b6:	22 87       	std	Z+10, r18	; 0x0a
 2b8:	83 83       	std	Z+3, r24	; 0x03
 2ba:	15 86       	std	Z+13, r1	; 0x0d
 2bc:	14 86       	std	Z+12, r1	; 0x0c
    SWU_DDR |= _BV(SWU_TX);                 /* Set TX pin as output */

    sei();                                  /* Enable global interrupt */
#else // TIMER3
    /* Output Compare A interrupt is called immediately after initialization */
    OCR3A = TCNT3 + 1;
 2be:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f8094>
 2c2:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f8095>
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
 2cc:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
    /* Set output mode, set OC3A high(Idle), Timer3 mode 0 */
    TCCR3A = _BV(COM3A1) | _BV(COM3A0);
 2d0:	80 ec       	ldi	r24, 0xC0	; 192
 2d2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    /* Input capture noise canceler, falling edge detection, no prescaling */
    TCCR3B = _BV(ICNC3) | _BV(CS30);
 2d6:	81 e8       	ldi	r24, 0x81	; 129
 2d8:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
    /* Clear capture flag */
    TIFR3 = _BV(ICF3);
 2dc:	80 e2       	ldi	r24, 0x20	; 32
 2de:	88 bb       	out	0x18, r24	; 24
    /* Enable input capture interrupt(Detect start bit) + Output comapre A match interrupt(Tx) */
    TIMSK3 = _BV(ICIE3) | _BV(OCIE3A);
 2e0:	82 e2       	ldi	r24, 0x22	; 34
 2e2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7f8071>

    sTxCount = 0;                           /* No Tx Data */
 2e6:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <sTxCount>
    sRxDone = 0;                            /* No Rx Data */
 2ea:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <sRxDone>
    SWU_DDR |= _BV(SWU_TX);                 /* Set TX pin as output */
 2ee:	87 b1       	in	r24, 0x07	; 7
 2f0:	80 64       	ori	r24, 0x40	; 64
 2f2:	87 b9       	out	0x07, r24	; 7

    sei();
 2f4:	78 94       	sei
 2f6:	08 95       	ret

000002f8 <SPI_init>:
#define SPI_FAST() SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);


void SPI_init(void)
{
    CS_DDR |= CS; // SD card circuit select as output
 2f8:	84 b1       	in	r24, 0x04	; 4
 2fa:	81 60       	ori	r24, 0x01	; 1
 2fc:	84 b9       	out	0x04, r24	; 4
    DDRB |= MOSI + SCK; // MOSI and SCK as outputs
 2fe:	84 b1       	in	r24, 0x04	; 4
 300:	86 60       	ori	r24, 0x06	; 6
 302:	84 b9       	out	0x04, r24	; 4
    PORTB |= MISO; // pullup in MISO, might not be needed
 304:	85 b1       	in	r24, 0x05	; 5
 306:	88 60       	ori	r24, 0x08	; 8
 308:	85 b9       	out	0x05, r24	; 5
 30a:	08 95       	ret

0000030c <SPI_write>:
}

unsigned char SPI_write(uint8_t ch)
{
    SPDR = ch;
 30c:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF))) {}
 30e:	0d b4       	in	r0, 0x2d	; 45
 310:	07 fe       	sbrs	r0, 7
 312:	fd cf       	rjmp	.-6      	; 0x30e <SPI_write+0x2>
    return SPDR;
 314:	8e b5       	in	r24, 0x2e	; 46
}
 316:	08 95       	ret

00000318 <ioinit>:

void ioinit (void)
{
    //pull up
    PORTB = 0b11111111;
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	85 b9       	out	0x05, r24	; 5
    PORTC = 0b11111111;
 31c:	88 b9       	out	0x08, r24	; 8
    PORTD = 0b11111111;
 31e:	8b b9       	out	0x0b, r24	; 11
    PORTF = 0b11111111;
 320:	81 bb       	out	0x11, r24	; 17
 322:	08 95       	ret

00000324 <getMemStatus>:


uint8_t getMemStatus()
{
    uint8_t out;
    CS_DISABLE();
 324:	85 b1       	in	r24, 0x05	; 5
 326:	81 60       	ori	r24, 0x01	; 1
 328:	85 b9       	out	0x05, r24	; 5
    CS_ENABLE();
 32a:	85 b1       	in	r24, 0x05	; 5
 32c:	8e 7f       	andi	r24, 0xFE	; 254
 32e:	85 b9       	out	0x05, r24	; 5

    SPI_write(0x05);
 330:	85 e0       	ldi	r24, 0x05	; 5
 332:	ec df       	rcall	.-40     	; 0x30c <SPI_write>
    out = SPI_write(0x00);
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	ea df       	rcall	.-44     	; 0x30c <SPI_write>
    CS_DISABLE();
 338:	95 b1       	in	r25, 0x05	; 5
 33a:	91 60       	ori	r25, 0x01	; 1
 33c:	95 b9       	out	0x05, r25	; 5
    return out;
}
 33e:	08 95       	ret

00000340 <memRead256ToStdOut>:




void memRead256ToStdOut(uint32_t address)
{
 340:	df 92       	push	r13
 342:	ef 92       	push	r14
 344:	ff 92       	push	r15
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
 352:	60 97       	sbiw	r28, 0x10	; 16
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	f8 94       	cli
 358:	de bf       	out	0x3e, r29	; 62
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	cd bf       	out	0x3d, r28	; 61
 35e:	16 2f       	mov	r17, r22
 360:	07 2f       	mov	r16, r23
 362:	f8 2e       	mov	r15, r24
    uint8_t data[16];
    while ((getMemStatus() & MEM_STAT_BUSY)) {}
 364:	df df       	rcall	.-66     	; 0x324 <getMemStatus>
 366:	80 fd       	sbrc	r24, 0
 368:	fd cf       	rjmp	.-6      	; 0x364 <memRead256ToStdOut+0x24>

    CS_DISABLE();
 36a:	85 b1       	in	r24, 0x05	; 5
 36c:	81 60       	ori	r24, 0x01	; 1
 36e:	85 b9       	out	0x05, r24	; 5
    CS_ENABLE();
 370:	85 b1       	in	r24, 0x05	; 5
 372:	8e 7f       	andi	r24, 0xFE	; 254
 374:	85 b9       	out	0x05, r24	; 5
    SPI_write(READ);
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	c9 df       	rcall	.-110    	; 0x30c <SPI_write>
    SPI_write(address >> 16);
 37a:	8f 2d       	mov	r24, r15
 37c:	c7 df       	rcall	.-114    	; 0x30c <SPI_write>
    SPI_write(address >> 8);
 37e:	80 2f       	mov	r24, r16
 380:	c5 df       	rcall	.-118    	; 0x30c <SPI_write>
    SPI_write(address);
 382:	81 2f       	mov	r24, r17
 384:	c3 df       	rcall	.-122    	; 0x30c <SPI_write>
 386:	d1 2c       	mov	r13, r1

    for (uint8_t i = 0; i < 16; i++)
 388:	3e c0       	rjmp	.+124    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
    {
        for (uint8_t j = 0; j < 16; j++)
        {
            data[j] = SPI_write(0x00);
 38a:	e1 2e       	mov	r14, r17
 38c:	f1 2c       	mov	r15, r1
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	bd df       	rcall	.-134    	; 0x30c <SPI_write>
 392:	e1 e0       	ldi	r30, 0x01	; 1
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	ec 0f       	add	r30, r28
 398:	fd 1f       	adc	r31, r29
 39a:	ee 0d       	add	r30, r14
 39c:	ff 1d       	adc	r31, r15
 39e:	80 83       	st	Z, r24
 3a0:	1f 92       	push	r1
            printf("%02x ", data[j]);
 3a2:	8f 93       	push	r24
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	9f 93       	push	r25
 3aa:	8f 93       	push	r24
 3ac:	bd d1       	rcall	.+890    	; 0x728 <printf>
 3ae:	1f 5f       	subi	r17, 0xFF	; 255
    SPI_write(address >> 8);
    SPI_write(address);

    for (uint8_t i = 0; i < 16; i++)
    {
        for (uint8_t j = 0; j < 16; j++)
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	0f 90       	pop	r0
 3b8:	01 c0       	rjmp	.+2      	; 0x3bc <memRead256ToStdOut+0x7c>
 3ba:	10 e0       	ldi	r17, 0x00	; 0
 3bc:	10 31       	cpi	r17, 0x10	; 16
 3be:	28 f3       	brcs	.-54     	; 0x38a <memRead256ToStdOut+0x4a>
        {
            data[j] = SPI_write(0x00);
            printf("%02x ", data[j]);
        }

        printf("  ");
 3c0:	86 e0       	ldi	r24, 0x06	; 6
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	9f 93       	push	r25
 3c6:	8f 93       	push	r24
 3c8:	af d1       	rcall	.+862    	; 0x728 <printf>
 3ca:	0f 90       	pop	r0

        for (uint8_t j = 0; j < 16; j++)
 3cc:	0f 90       	pop	r0
 3ce:	f1 2c       	mov	r15, r1
 3d0:	13 c0       	rjmp	.+38     	; 0x3f8 <memRead256ToStdOut+0xb8>
 3d2:	e1 e0       	ldi	r30, 0x01	; 1
        {
            if (isprint(data[j]))
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	ec 0f       	add	r30, r28
 3d8:	fd 1f       	adc	r31, r29
 3da:	ef 0d       	add	r30, r15
 3dc:	f1 1d       	adc	r31, r1
 3de:	00 81       	ld	r16, Z
 3e0:	10 e0       	ldi	r17, 0x00	; 0
 3e2:	c8 01       	movw	r24, r16
 3e4:	94 d1       	rcall	.+808    	; 0x70e <isprint>
 3e6:	89 2b       	or	r24, r25
            {
                printf("%c", data[j]);
 3e8:	19 f0       	breq	.+6      	; 0x3f0 <memRead256ToStdOut+0xb0>
 3ea:	c8 01       	movw	r24, r16
 3ec:	b0 d1       	rcall	.+864    	; 0x74e <putchar>
            }
            else
            {
                printf(".");
 3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <memRead256ToStdOut+0xb6>
 3f0:	8e e2       	ldi	r24, 0x2E	; 46
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	ac d1       	rcall	.+856    	; 0x74e <putchar>
            printf("%02x ", data[j]);
        }

        printf("  ");

        for (uint8_t j = 0; j < 16; j++)
 3f6:	f3 94       	inc	r15
 3f8:	8f e0       	ldi	r24, 0x0F	; 15
 3fa:	8f 15       	cp	r24, r15
 3fc:	50 f7       	brcc	.-44     	; 0x3d2 <memRead256ToStdOut+0x92>
            else
            {
                printf(".");
            }
        }
        printf("\r\n");
 3fe:	8d e9       	ldi	r24, 0x9D	; 157
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	aa d1       	rcall	.+852    	; 0x758 <puts>
 404:	d3 94       	inc	r13
    SPI_write(READ);
    SPI_write(address >> 16);
    SPI_write(address >> 8);
    SPI_write(address);

    for (uint8_t i = 0; i < 16; i++)
 406:	8f e0       	ldi	r24, 0x0F	; 15
 408:	8d 15       	cp	r24, r13
 40a:	b8 f6       	brcc	.-82     	; 0x3ba <memRead256ToStdOut+0x7a>
 40c:	85 b1       	in	r24, 0x05	; 5
            }
        }
        printf("\r\n");
    }

    CS_DISABLE();
 40e:	81 60       	ori	r24, 0x01	; 1
 410:	85 b9       	out	0x05, r24	; 5
 412:	60 96       	adiw	r28, 0x10	; 16
    return;
}
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	f8 94       	cli
 418:	de bf       	out	0x3e, r29	; 62
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	cd bf       	out	0x3d, r28	; 61
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	1f 91       	pop	r17
 424:	0f 91       	pop	r16
 426:	ff 90       	pop	r15
 428:	ef 90       	pop	r14
 42a:	df 90       	pop	r13
 42c:	08 95       	ret

0000042e <memEnableWrite>:
 42e:	89 e0       	ldi	r24, 0x09	; 9

void memEnableWrite()
{
    printf("Enabling Write\r\n");
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	92 d1       	rcall	.+804    	; 0x758 <puts>
    CS_DISABLE();
 434:	85 b1       	in	r24, 0x05	; 5
 436:	81 60       	ori	r24, 0x01	; 1
 438:	85 b9       	out	0x05, r24	; 5
    CS_ENABLE();
 43a:	85 b1       	in	r24, 0x05	; 5
 43c:	8e 7f       	andi	r24, 0xFE	; 254
 43e:	85 b9       	out	0x05, r24	; 5

    SPI_write(0x06);
 440:	86 e0       	ldi	r24, 0x06	; 6

    while (!(getMemStatus() & MEM_STAT_WEN)) {}
 442:	64 df       	rcall	.-312    	; 0x30c <SPI_write>
 444:	6f df       	rcall	.-290    	; 0x324 <getMemStatus>
 446:	81 ff       	sbrs	r24, 1
 448:	fd cf       	rjmp	.-6      	; 0x444 <memEnableWrite+0x16>

    CS_DISABLE();
 44a:	85 b1       	in	r24, 0x05	; 5
 44c:	81 60       	ori	r24, 0x01	; 1
 44e:	85 b9       	out	0x05, r24	; 5
 450:	08 95       	ret

00000452 <memWrite256>:
    return;
}

void memWrite256(uint32_t address, uint8_t* data)
{
 452:	ff 92       	push	r15
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	c6 2f       	mov	r28, r22
 45e:	d7 2f       	mov	r29, r23
 460:	f8 2e       	mov	r15, r24
 462:	8a 01       	movw	r16, r20
    while ((getMemStatus() & MEM_STAT_BUSY)) {}
 464:	5f df       	rcall	.-322    	; 0x324 <getMemStatus>
 466:	80 fd       	sbrc	r24, 0
 468:	fd cf       	rjmp	.-6      	; 0x464 <memWrite256+0x12>

    memEnableWrite();
 46a:	e1 df       	rcall	.-62     	; 0x42e <memEnableWrite>
 46c:	85 b1       	in	r24, 0x05	; 5

    CS_DISABLE();
 46e:	81 60       	ori	r24, 0x01	; 1
 470:	85 b9       	out	0x05, r24	; 5
 472:	85 b1       	in	r24, 0x05	; 5
    CS_ENABLE();
 474:	8e 7f       	andi	r24, 0xFE	; 254
 476:	85 b9       	out	0x05, r24	; 5

    SPI_write(0x02);
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	48 df       	rcall	.-368    	; 0x30c <SPI_write>
    SPI_write(address >> 16);
 47c:	8f 2d       	mov	r24, r15
 47e:	46 df       	rcall	.-372    	; 0x30c <SPI_write>
    SPI_write(address >> 8);
 480:	8d 2f       	mov	r24, r29
 482:	44 df       	rcall	.-376    	; 0x30c <SPI_write>
 484:	8c 2f       	mov	r24, r28
    SPI_write(address);
 486:	42 df       	rcall	.-380    	; 0x30c <SPI_write>
 488:	c0 e0       	ldi	r28, 0x00	; 0
 48a:	d0 e0       	ldi	r29, 0x00	; 0


    for (uint16_t i = 0; i < 256; i++)
 48c:	05 c0       	rjmp	.+10     	; 0x498 <memWrite256+0x46>
 48e:	f8 01       	movw	r30, r16
    {
        SPI_write(*data);
 490:	81 91       	ld	r24, Z+
 492:	8f 01       	movw	r16, r30
 494:	3b df       	rcall	.-394    	; 0x30c <SPI_write>
 496:	21 96       	adiw	r28, 0x01	; 1
 498:	cf 3f       	cpi	r28, 0xFF	; 255
    SPI_write(address >> 16);
    SPI_write(address >> 8);
    SPI_write(address);


    for (uint16_t i = 0; i < 256; i++)
 49a:	d1 05       	cpc	r29, r1
 49c:	c1 f3       	breq	.-16     	; 0x48e <memWrite256+0x3c>
 49e:	b8 f3       	brcs	.-18     	; 0x48e <memWrite256+0x3c>
 4a0:	85 b1       	in	r24, 0x05	; 5
 4a2:	81 60       	ori	r24, 0x01	; 1
    {
        SPI_write(*data);
        data++;
    }

    CS_DISABLE();
 4a4:	85 b9       	out	0x05, r24	; 5
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
    return;

}
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	ff 90       	pop	r15
 4b0:	08 95       	ret

000004b2 <memEraseSector>:
 4b2:	1f 93       	push	r17
 4b4:	cf 93       	push	r28

void memEraseSector(uint32_t address)
{
 4b6:	df 93       	push	r29
 4b8:	c6 2f       	mov	r28, r22
 4ba:	d7 2f       	mov	r29, r23
 4bc:	18 2f       	mov	r17, r24
    while ((getMemStatus() & MEM_STAT_BUSY)) {}
 4be:	32 df       	rcall	.-412    	; 0x324 <getMemStatus>
 4c0:	80 fd       	sbrc	r24, 0
 4c2:	fd cf       	rjmp	.-6      	; 0x4be <memEraseSector+0xc>

    memEnableWrite();
 4c4:	b4 df       	rcall	.-152    	; 0x42e <memEnableWrite>
 4c6:	85 b1       	in	r24, 0x05	; 5



    CS_DISABLE();
 4c8:	81 60       	ori	r24, 0x01	; 1
 4ca:	85 b9       	out	0x05, r24	; 5
 4cc:	85 b1       	in	r24, 0x05	; 5
    CS_ENABLE();
 4ce:	8e 7f       	andi	r24, 0xFE	; 254
 4d0:	85 b9       	out	0x05, r24	; 5

    SPI_write(0x20);
 4d2:	80 e2       	ldi	r24, 0x20	; 32
 4d4:	1b df       	rcall	.-458    	; 0x30c <SPI_write>
    SPI_write(address >> 16);
 4d6:	81 2f       	mov	r24, r17
 4d8:	19 df       	rcall	.-462    	; 0x30c <SPI_write>
    SPI_write(address >> 8);
 4da:	8d 2f       	mov	r24, r29
 4dc:	17 df       	rcall	.-466    	; 0x30c <SPI_write>
 4de:	8c 2f       	mov	r24, r28
    SPI_write(address);
 4e0:	15 df       	rcall	.-470    	; 0x30c <SPI_write>
 4e2:	85 b1       	in	r24, 0x05	; 5
 4e4:	81 60       	ori	r24, 0x01	; 1


    CS_DISABLE();
 4e6:	85 b9       	out	0x05, r24	; 5
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
    return;
}
 4ec:	1f 91       	pop	r17
 4ee:	08 95       	ret

000004f0 <main>:
 4f0:	ef 92       	push	r14
 4f2:	ff 92       	push	r15


int main(int argc, char** argv)
{
 4f4:	0f 93       	push	r16
 4f6:	1f 93       	push	r17
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
 500:	da 95       	dec	r29
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	f8 94       	cli
 506:	de bf       	out	0x3e, r29	; 62
 508:	0f be       	out	0x3f, r0	; 63
 50a:	cd bf       	out	0x3d, r28	; 61
    MCUSR &= ~_BV(WDRF);
 50c:	84 b7       	in	r24, 0x34	; 52
 50e:	87 7f       	andi	r24, 0xF7	; 247
 510:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	a8 95       	wdr
 518:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 51c:	88 61       	ori	r24, 0x18	; 24
 51e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 522:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 526:	0f be       	out	0x3f, r0	; 63
    wdt_disable();

    CLKPR = (1 << CLKPCE);
 528:	e1 e6       	ldi	r30, 0x61	; 97
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 e8       	ldi	r24, 0x80	; 128
 52e:	80 83       	st	Z, r24
    CLKPR = 0;
 530:	10 82       	st	Z, r1

    ioinit();
 532:	f2 de       	rcall	.-540    	; 0x318 <ioinit>

    SWU_Initialize();
 534:	ab de       	rcall	.-682    	; 0x28c <SWU_Initialize>
 536:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 538:	33 ed       	ldi	r19, 0xD3	; 211
 53a:	80 e3       	ldi	r24, 0x30	; 48
 53c:	21 50       	subi	r18, 0x01	; 1
 53e:	30 40       	sbci	r19, 0x00	; 0
 540:	80 40       	sbci	r24, 0x00	; 0
 542:	e1 f7       	brne	.-8      	; 0x53c <main+0x4c>
 544:	00 c0       	rjmp	.+0      	; 0x546 <main+0x56>
 546:	00 00       	nop
 548:	ee e3       	ldi	r30, 0x3E	; 62

    _delay_ms(1000);

    stdin = stdout = &soft_uart;
 54a:	f2 e0       	ldi	r31, 0x02	; 2
 54c:	81 e2       	ldi	r24, 0x21	; 33
 54e:	92 e0       	ldi	r25, 0x02	; 2
 550:	93 83       	std	Z+3, r25	; 0x03
 552:	82 83       	std	Z+2, r24	; 0x02
 554:	91 83       	std	Z+1, r25	; 0x01
 556:	80 83       	st	Z, r24
 558:	89 e1       	ldi	r24, 0x19	; 25

    printf("\r\n\r\nAT90SWUART version: %s\r\n\r\n", AT90SWUART_VER_STR);
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	9f 93       	push	r25
 55e:	8f 93       	push	r24
 560:	8b e1       	ldi	r24, 0x1B	; 27
 562:	91 e0       	ldi	r25, 0x01	; 1
 564:	9f 93       	push	r25
 566:	8f 93       	push	r24
 568:	df d0       	rcall	.+446    	; 0x728 <printf>

    SPI_init();
 56a:	c6 de       	rcall	.-628    	; 0x2f8 <SPI_init>
 56c:	82 e5       	ldi	r24, 0x52	; 82

    SPI_SLOW();
 56e:	8c bd       	out	0x2c, r24	; 44
 570:	85 b1       	in	r24, 0x05	; 5

    CS_DISABLE();
 572:	81 60       	ori	r24, 0x01	; 1
 574:	85 b9       	out	0x05, r24	; 5
 576:	85 b1       	in	r24, 0x05	; 5
    CS_ENABLE();
 578:	8e 7f       	andi	r24, 0xFE	; 254
 57a:	85 b9       	out	0x05, r24	; 5
    SPI_write(RELEASE);
 57c:	8b ea       	ldi	r24, 0xAB	; 171
 57e:	c6 de       	rcall	.-628    	; 0x30c <SPI_write>
 580:	85 b1       	in	r24, 0x05	; 5
    CS_DISABLE();
 582:	81 60       	ori	r24, 0x01	; 1
 584:	85 b9       	out	0x05, r24	; 5
 586:	9f ef       	ldi	r25, 0xFF	; 255
 588:	e9 e6       	ldi	r30, 0x69	; 105
 58a:	f8 e1       	ldi	r31, 0x18	; 24
 58c:	91 50       	subi	r25, 0x01	; 1
 58e:	e0 40       	sbci	r30, 0x00	; 0
 590:	f0 40       	sbci	r31, 0x00	; 0
 592:	e1 f7       	brne	.-8      	; 0x58c <main+0x9c>
 594:	00 c0       	rjmp	.+0      	; 0x596 <main+0xa6>
 596:	00 00       	nop
 598:	85 b1       	in	r24, 0x05	; 5
    _delay_ms(500);

    uint8_t manuf;
    uint16_t id;

    CS_DISABLE();
 59a:	81 60       	ori	r24, 0x01	; 1
 59c:	85 b9       	out	0x05, r24	; 5
    CS_ENABLE();
 59e:	85 b1       	in	r24, 0x05	; 5
 5a0:	8e 7f       	andi	r24, 0xFE	; 254
    SPI_write(R_JEDEC_ID);
 5a2:	85 b9       	out	0x05, r24	; 5
 5a4:	8f e9       	ldi	r24, 0x9F	; 159
    manuf = SPI_write(0x00);
 5a6:	b2 de       	rcall	.-668    	; 0x30c <SPI_write>
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	b0 de       	rcall	.-672    	; 0x30c <SPI_write>
    id = SPI_write(0x00) << 8;
 5ac:	f8 2e       	mov	r15, r24
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	ad de       	rcall	.-678    	; 0x30c <SPI_write>
 5b2:	00 e0       	ldi	r16, 0x00	; 0
 5b4:	18 2f       	mov	r17, r24
    id |= SPI_write(0x00);
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	a9 de       	rcall	.-686    	; 0x30c <SPI_write>
 5ba:	08 2b       	or	r16, r24
 5bc:	85 b1       	in	r24, 0x05	; 5
    CS_DISABLE();
 5be:	81 60       	ori	r24, 0x01	; 1
 5c0:	85 b9       	out	0x05, r24	; 5

    printf("\r\nMANUF=0x%X , ID=0x%X\r\n", manuf, id);
 5c2:	1f 93       	push	r17
 5c4:	0f 93       	push	r16
 5c6:	1f 92       	push	r1
 5c8:	ff 92       	push	r15
 5ca:	8a e3       	ldi	r24, 0x3A	; 58
 5cc:	91 e0       	ldi	r25, 0x01	; 1
 5ce:	9f 93       	push	r25
 5d0:	8f 93       	push	r24
 5d2:	aa d0       	rcall	.+340    	; 0x728 <printf>
 5d4:	0f b6       	in	r0, 0x3f	; 63
    if (manuf == WINBOND_MANUF)
 5d6:	f8 94       	cli
 5d8:	de bf       	out	0x3e, r29	; 62
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	cd bf       	out	0x3d, r28	; 61
 5de:	3f ee       	ldi	r19, 0xEF	; 239
 5e0:	f3 12       	cpse	r15, r19
 5e2:	78 c0       	rjmp	.+240    	; 0x6d4 <main+0x1e4>
    {
        printf("OK! WINBOND_MANUF\r\n");
 5e4:	83 e5       	ldi	r24, 0x53	; 83
 5e6:	91 e0       	ldi	r25, 0x01	; 1
 5e8:	b7 d0       	rcall	.+366    	; 0x758 <puts>
        if (id == W25Q512JVFIM_ID)
 5ea:	00 32       	cpi	r16, 0x20	; 32
 5ec:	10 47       	sbci	r17, 0x70	; 112
 5ee:	09 f0       	breq	.+2      	; 0x5f2 <main+0x102>
 5f0:	6d c0       	rjmp	.+218    	; 0x6cc <main+0x1dc>
        {
            printf("OK! W25Q512JVFIM\r\n");
 5f2:	86 e6       	ldi	r24, 0x66	; 102
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	b0 d0       	rcall	.+352    	; 0x758 <puts>
 5f8:	8d e9       	ldi	r24, 0x9D	; 157
    else
    {
        printf("ERROR! WINBOND_MANUF\r\n");
        return;
    }
    printf("\r\n");
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	ad d0       	rcall	.+346    	; 0x758 <puts>
 5fe:	92 de       	rcall	.-732    	; 0x324 <getMemStatus>

    printf("Status: 0x%02x\r\n", getMemStatus());
 600:	1f 92       	push	r1
 602:	8f 93       	push	r24
 604:	0f 2e       	mov	r0, r31
 606:	f8 e7       	ldi	r31, 0x78	; 120
 608:	ef 2e       	mov	r14, r31
 60a:	f1 e0       	ldi	r31, 0x01	; 1
 60c:	ff 2e       	mov	r15, r31
 60e:	f0 2d       	mov	r31, r0
 610:	ff 92       	push	r15
 612:	ef 92       	push	r14
 614:	89 d0       	rcall	.+274    	; 0x728 <printf>

    printf("\r\n0 address content:\r\n");
 616:	89 e8       	ldi	r24, 0x89	; 137
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	9e d0       	rcall	.+316    	; 0x758 <puts>
    memRead256ToStdOut(0);
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	cb 01       	movw	r24, r22
 622:	8e de       	rcall	.-740    	; 0x340 <memRead256ToStdOut>

    printf("\r\nerasing 0 address content\r\n");
 624:	8f e9       	ldi	r24, 0x9F	; 159
 626:	91 e0       	ldi	r25, 0x01	; 1
 628:	97 d0       	rcall	.+302    	; 0x758 <puts>
 62a:	60 e0       	ldi	r22, 0x00	; 0
    memEraseSector(0);
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	cb 01       	movw	r24, r22
 630:	40 df       	rcall	.-384    	; 0x4b2 <memEraseSector>
 632:	89 e8       	ldi	r24, 0x89	; 137
 634:	91 e0       	ldi	r25, 0x01	; 1

    printf("\r\n0 address content:\r\n");
 636:	90 d0       	rcall	.+288    	; 0x758 <puts>
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	70 e0       	ldi	r23, 0x00	; 0
    memRead256ToStdOut(0);
 63c:	cb 01       	movw	r24, r22
 63e:	80 de       	rcall	.-768    	; 0x340 <memRead256ToStdOut>
 640:	8e 01       	movw	r16, r28
 642:	0f 5f       	subi	r16, 0xFF	; 255

    unsigned char buff[256] = { 0 };
 644:	1f 4f       	sbci	r17, 0xFF	; 255
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	f8 01       	movw	r30, r16
 64c:	9c 01       	movw	r18, r24
 64e:	11 92       	st	Z+, r1
 650:	21 50       	subi	r18, 0x01	; 1
 652:	30 40       	sbci	r19, 0x00	; 0
 654:	e1 f7       	brne	.-8      	; 0x64e <main+0x15e>
    memset(buff, eeprom_read_byte((uint8_t*)0x69), sizeof(buff));
 656:	89 e6       	ldi	r24, 0x69	; 105
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	33 d3       	rcall	.+1638   	; 0xcc2 <eeprom_read_byte>
 65c:	68 2f       	mov	r22, r24
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	40 e0       	ldi	r20, 0x00	; 0
 662:	51 e0       	ldi	r21, 0x01	; 1
 664:	c8 01       	movw	r24, r16
 666:	59 d0       	rcall	.+178    	; 0x71a <memset>
 668:	89 e6       	ldi	r24, 0x69	; 105
    eeprom_write_byte((uint8_t*)0x69, eeprom_read_byte((uint8_t*)0x69) + 1);
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	2a d3       	rcall	.+1620   	; 0xcc2 <eeprom_read_byte>
 66e:	61 e0       	ldi	r22, 0x01	; 1
 670:	68 0f       	add	r22, r24
 672:	89 e6       	ldi	r24, 0x69	; 105
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	2d d3       	rcall	.+1626   	; 0xcd2 <eeprom_write_byte>
 678:	89 e0       	ldi	r24, 0x09	; 9
    strcpy(buff, "Hi Dreg!");
 67a:	ec eb       	ldi	r30, 0xBC	; 188
 67c:	f1 e0       	ldi	r31, 0x01	; 1
 67e:	d8 01       	movw	r26, r16
 680:	01 90       	ld	r0, Z+
 682:	0d 92       	st	X+, r0
    printf("\r\nwriting '%s' to 0 address\r\n", buff);
 684:	8a 95       	dec	r24
 686:	e1 f7       	brne	.-8      	; 0x680 <main+0x190>
 688:	1f 93       	push	r17
 68a:	0f 93       	push	r16
 68c:	85 ec       	ldi	r24, 0xC5	; 197
 68e:	91 e0       	ldi	r25, 0x01	; 1
 690:	9f 93       	push	r25
    memWrite256(0, buff);
 692:	8f 93       	push	r24
 694:	49 d0       	rcall	.+146    	; 0x728 <printf>
 696:	a8 01       	movw	r20, r16
 698:	60 e0       	ldi	r22, 0x00	; 0
 69a:	70 e0       	ldi	r23, 0x00	; 0

    printf("\r\n0 address content:\r\n");
 69c:	cb 01       	movw	r24, r22
 69e:	d9 de       	rcall	.-590    	; 0x452 <memWrite256>
 6a0:	89 e8       	ldi	r24, 0x89	; 137
    memRead256ToStdOut(0);
 6a2:	91 e0       	ldi	r25, 0x01	; 1
 6a4:	59 d0       	rcall	.+178    	; 0x758 <puts>
 6a6:	60 e0       	ldi	r22, 0x00	; 0
 6a8:	70 e0       	ldi	r23, 0x00	; 0
 6aa:	cb 01       	movw	r24, r22

    printf("\r\n");
 6ac:	49 de       	rcall	.-878    	; 0x340 <memRead256ToStdOut>
 6ae:	8d e9       	ldi	r24, 0x9D	; 157
 6b0:	91 e0       	ldi	r25, 0x01	; 1
 6b2:	52 d0       	rcall	.+164    	; 0x758 <puts>

    printf("Status: 0x%02x\r\n", getMemStatus());
 6b4:	37 de       	rcall	.-914    	; 0x324 <getMemStatus>
 6b6:	1f 92       	push	r1
 6b8:	8f 93       	push	r24
 6ba:	ff 92       	push	r15
 6bc:	ef 92       	push	r14
 6be:	34 d0       	rcall	.+104    	; 0x728 <printf>
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	f8 94       	cli
 6c4:	de bf       	out	0x3e, r29	; 62
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	cd bf       	out	0x3d, r28	; 61
 6ca:	08 c0       	rjmp	.+16     	; 0x6dc <main+0x1ec>
 6cc:	83 ee       	ldi	r24, 0xE3	; 227
 6ce:	91 e0       	ldi	r25, 0x01	; 1
        {
            printf("OK! W25Q512JVFIM\r\n");
        }
        else
        {
            printf("ERROR NOT W25Q512JVFIM DETECTED\r\n");
 6d0:	43 d0       	rcall	.+134    	; 0x758 <puts>
 6d2:	0e c0       	rjmp	.+28     	; 0x6f0 <main+0x200>
 6d4:	84 e0       	ldi	r24, 0x04	; 4
 6d6:	92 e0       	ldi	r25, 0x02	; 2
            return;
 6d8:	3f d0       	rcall	.+126    	; 0x758 <puts>
        }
    }
    else
    {
        printf("ERROR! WINBOND_MANUF\r\n");
 6da:	0a c0       	rjmp	.+20     	; 0x6f0 <main+0x200>
 6dc:	9f ef       	ldi	r25, 0xFF	; 255
 6de:	e3 ed       	ldi	r30, 0xD3	; 211
 6e0:	f0 e3       	ldi	r31, 0x30	; 48
        return;
 6e2:	91 50       	subi	r25, 0x01	; 1
 6e4:	e0 40       	sbci	r30, 0x00	; 0
 6e6:	f0 40       	sbci	r31, 0x00	; 0
 6e8:	e1 f7       	brne	.-8      	; 0x6e2 <main+0x1f2>
 6ea:	00 c0       	rjmp	.+0      	; 0x6ec <main+0x1fc>
 6ec:	00 00       	nop
 6ee:	f6 cf       	rjmp	.-20     	; 0x6dc <main+0x1ec>
 6f0:	d3 95       	inc	r29
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	f8 94       	cli
 6f6:	de bf       	out	0x3e, r29	; 62
    {

        _delay_ms(1000);
    }

}
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	cd bf       	out	0x3d, r28	; 61
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	1f 91       	pop	r17
 702:	0f 91       	pop	r16
 704:	ff 90       	pop	r15
 706:	ef 90       	pop	r14
 708:	08 95       	ret

0000070a <isgraph>:
 70a:	80 32       	cpi	r24, 0x20	; 32
 70c:	09 f0       	breq	.+2      	; 0x710 <isprint+0x2>

0000070e <isprint>:
 70e:	91 11       	cpse	r25, r1
 710:	25 c2       	rjmp	.+1098   	; 0xb5c <__ctype_isfalse>
 712:	80 52       	subi	r24, 0x20	; 32
 714:	8f 55       	subi	r24, 0x5F	; 95
 716:	e0 f7       	brcc	.-8      	; 0x710 <isprint+0x2>
 718:	08 95       	ret

0000071a <memset>:
 71a:	dc 01       	movw	r26, r24
 71c:	01 c0       	rjmp	.+2      	; 0x720 <memset+0x6>
 71e:	6d 93       	st	X+, r22
 720:	41 50       	subi	r20, 0x01	; 1
 722:	50 40       	sbci	r21, 0x00	; 0
 724:	e0 f7       	brcc	.-8      	; 0x71e <memset+0x4>
 726:	08 95       	ret

00000728 <printf>:
 728:	a0 e0       	ldi	r26, 0x00	; 0
 72a:	b0 e0       	ldi	r27, 0x00	; 0
 72c:	e9 e9       	ldi	r30, 0x99	; 153
 72e:	f3 e0       	ldi	r31, 0x03	; 3
 730:	ee c2       	rjmp	.+1500   	; 0xd0e <__prologue_saves__+0x20>
 732:	ae 01       	movw	r20, r28
 734:	4b 5f       	subi	r20, 0xFB	; 251
 736:	5f 4f       	sbci	r21, 0xFF	; 255
 738:	fa 01       	movw	r30, r20
 73a:	61 91       	ld	r22, Z+
 73c:	71 91       	ld	r23, Z+
 73e:	af 01       	movw	r20, r30
 740:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <__iob+0x2>
 744:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <__iob+0x3>
 748:	37 d0       	rcall	.+110    	; 0x7b8 <vfprintf>
 74a:	e2 e0       	ldi	r30, 0x02	; 2
 74c:	fc c2       	rjmp	.+1528   	; 0xd46 <__epilogue_restores__+0x20>

0000074e <putchar>:
 74e:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <__iob+0x2>
 752:	70 91 41 02 	lds	r23, 0x0241	; 0x800241 <__iob+0x3>
 756:	1b c2       	rjmp	.+1078   	; 0xb8e <fputc>

00000758 <puts>:
 758:	0f 93       	push	r16
 75a:	1f 93       	push	r17
 75c:	cf 93       	push	r28
 75e:	df 93       	push	r29
 760:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <__iob+0x2>
 764:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <__iob+0x3>
 768:	23 81       	ldd	r18, Z+3	; 0x03
 76a:	21 ff       	sbrs	r18, 1
 76c:	1b c0       	rjmp	.+54     	; 0x7a4 <puts+0x4c>
 76e:	8c 01       	movw	r16, r24
 770:	d0 e0       	ldi	r29, 0x00	; 0
 772:	c0 e0       	ldi	r28, 0x00	; 0
 774:	f8 01       	movw	r30, r16
 776:	81 91       	ld	r24, Z+
 778:	8f 01       	movw	r16, r30
 77a:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <__iob+0x2>
 77e:	70 91 41 02 	lds	r23, 0x0241	; 0x800241 <__iob+0x3>
 782:	db 01       	movw	r26, r22
 784:	18 96       	adiw	r26, 0x08	; 8
 786:	ed 91       	ld	r30, X+
 788:	fc 91       	ld	r31, X
 78a:	19 97       	sbiw	r26, 0x09	; 9
 78c:	88 23       	and	r24, r24
 78e:	31 f0       	breq	.+12     	; 0x79c <puts+0x44>
 790:	09 95       	icall
 792:	89 2b       	or	r24, r25
 794:	79 f3       	breq	.-34     	; 0x774 <puts+0x1c>
 796:	df ef       	ldi	r29, 0xFF	; 255
 798:	cf ef       	ldi	r28, 0xFF	; 255
 79a:	ec cf       	rjmp	.-40     	; 0x774 <puts+0x1c>
 79c:	8a e0       	ldi	r24, 0x0A	; 10
 79e:	09 95       	icall
 7a0:	89 2b       	or	r24, r25
 7a2:	19 f0       	breq	.+6      	; 0x7aa <puts+0x52>
 7a4:	8f ef       	ldi	r24, 0xFF	; 255
 7a6:	9f ef       	ldi	r25, 0xFF	; 255
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <puts+0x56>
 7aa:	8d 2f       	mov	r24, r29
 7ac:	9c 2f       	mov	r25, r28
 7ae:	df 91       	pop	r29
 7b0:	cf 91       	pop	r28
 7b2:	1f 91       	pop	r17
 7b4:	0f 91       	pop	r16
 7b6:	08 95       	ret

000007b8 <vfprintf>:
 7b8:	ab e0       	ldi	r26, 0x0B	; 11
 7ba:	b0 e0       	ldi	r27, 0x00	; 0
 7bc:	e1 ee       	ldi	r30, 0xE1	; 225
 7be:	f3 e0       	ldi	r31, 0x03	; 3
 7c0:	96 c2       	rjmp	.+1324   	; 0xcee <__prologue_saves__>
 7c2:	6c 01       	movw	r12, r24
 7c4:	7b 01       	movw	r14, r22
 7c6:	8a 01       	movw	r16, r20
 7c8:	fc 01       	movw	r30, r24
 7ca:	17 82       	std	Z+7, r1	; 0x07
 7cc:	16 82       	std	Z+6, r1	; 0x06
 7ce:	83 81       	ldd	r24, Z+3	; 0x03
 7d0:	81 ff       	sbrs	r24, 1
 7d2:	bf c1       	rjmp	.+894    	; 0xb52 <__stack+0x53>
 7d4:	ce 01       	movw	r24, r28
 7d6:	01 96       	adiw	r24, 0x01	; 1
 7d8:	3c 01       	movw	r6, r24
 7da:	f6 01       	movw	r30, r12
 7dc:	93 81       	ldd	r25, Z+3	; 0x03
 7de:	f7 01       	movw	r30, r14
 7e0:	93 fd       	sbrc	r25, 3
 7e2:	85 91       	lpm	r24, Z+
 7e4:	93 ff       	sbrs	r25, 3
 7e6:	81 91       	ld	r24, Z+
 7e8:	7f 01       	movw	r14, r30
 7ea:	88 23       	and	r24, r24
 7ec:	09 f4       	brne	.+2      	; 0x7f0 <vfprintf+0x38>
 7ee:	ad c1       	rjmp	.+858    	; 0xb4a <__stack+0x4b>
 7f0:	85 32       	cpi	r24, 0x25	; 37
 7f2:	39 f4       	brne	.+14     	; 0x802 <vfprintf+0x4a>
 7f4:	93 fd       	sbrc	r25, 3
 7f6:	85 91       	lpm	r24, Z+
 7f8:	93 ff       	sbrs	r25, 3
 7fa:	81 91       	ld	r24, Z+
 7fc:	7f 01       	movw	r14, r30
 7fe:	85 32       	cpi	r24, 0x25	; 37
 800:	21 f4       	brne	.+8      	; 0x80a <vfprintf+0x52>
 802:	b6 01       	movw	r22, r12
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	c3 d1       	rcall	.+902    	; 0xb8e <fputc>
 808:	e8 cf       	rjmp	.-48     	; 0x7da <vfprintf+0x22>
 80a:	91 2c       	mov	r9, r1
 80c:	21 2c       	mov	r2, r1
 80e:	31 2c       	mov	r3, r1
 810:	ff e1       	ldi	r31, 0x1F	; 31
 812:	f3 15       	cp	r31, r3
 814:	d8 f0       	brcs	.+54     	; 0x84c <vfprintf+0x94>
 816:	8b 32       	cpi	r24, 0x2B	; 43
 818:	79 f0       	breq	.+30     	; 0x838 <vfprintf+0x80>
 81a:	38 f4       	brcc	.+14     	; 0x82a <vfprintf+0x72>
 81c:	80 32       	cpi	r24, 0x20	; 32
 81e:	79 f0       	breq	.+30     	; 0x83e <vfprintf+0x86>
 820:	83 32       	cpi	r24, 0x23	; 35
 822:	a1 f4       	brne	.+40     	; 0x84c <vfprintf+0x94>
 824:	23 2d       	mov	r18, r3
 826:	20 61       	ori	r18, 0x10	; 16
 828:	1d c0       	rjmp	.+58     	; 0x864 <vfprintf+0xac>
 82a:	8d 32       	cpi	r24, 0x2D	; 45
 82c:	61 f0       	breq	.+24     	; 0x846 <vfprintf+0x8e>
 82e:	80 33       	cpi	r24, 0x30	; 48
 830:	69 f4       	brne	.+26     	; 0x84c <vfprintf+0x94>
 832:	23 2d       	mov	r18, r3
 834:	21 60       	ori	r18, 0x01	; 1
 836:	16 c0       	rjmp	.+44     	; 0x864 <vfprintf+0xac>
 838:	83 2d       	mov	r24, r3
 83a:	82 60       	ori	r24, 0x02	; 2
 83c:	38 2e       	mov	r3, r24
 83e:	e3 2d       	mov	r30, r3
 840:	e4 60       	ori	r30, 0x04	; 4
 842:	3e 2e       	mov	r3, r30
 844:	2a c0       	rjmp	.+84     	; 0x89a <vfprintf+0xe2>
 846:	f3 2d       	mov	r31, r3
 848:	f8 60       	ori	r31, 0x08	; 8
 84a:	1d c0       	rjmp	.+58     	; 0x886 <vfprintf+0xce>
 84c:	37 fc       	sbrc	r3, 7
 84e:	2d c0       	rjmp	.+90     	; 0x8aa <vfprintf+0xf2>
 850:	20 ed       	ldi	r18, 0xD0	; 208
 852:	28 0f       	add	r18, r24
 854:	2a 30       	cpi	r18, 0x0A	; 10
 856:	40 f0       	brcs	.+16     	; 0x868 <vfprintf+0xb0>
 858:	8e 32       	cpi	r24, 0x2E	; 46
 85a:	b9 f4       	brne	.+46     	; 0x88a <vfprintf+0xd2>
 85c:	36 fc       	sbrc	r3, 6
 85e:	75 c1       	rjmp	.+746    	; 0xb4a <__stack+0x4b>
 860:	23 2d       	mov	r18, r3
 862:	20 64       	ori	r18, 0x40	; 64
 864:	32 2e       	mov	r3, r18
 866:	19 c0       	rjmp	.+50     	; 0x89a <vfprintf+0xe2>
 868:	36 fe       	sbrs	r3, 6
 86a:	06 c0       	rjmp	.+12     	; 0x878 <vfprintf+0xc0>
 86c:	8a e0       	ldi	r24, 0x0A	; 10
 86e:	98 9e       	mul	r9, r24
 870:	20 0d       	add	r18, r0
 872:	11 24       	eor	r1, r1
 874:	92 2e       	mov	r9, r18
 876:	11 c0       	rjmp	.+34     	; 0x89a <vfprintf+0xe2>
 878:	ea e0       	ldi	r30, 0x0A	; 10
 87a:	2e 9e       	mul	r2, r30
 87c:	20 0d       	add	r18, r0
 87e:	11 24       	eor	r1, r1
 880:	22 2e       	mov	r2, r18
 882:	f3 2d       	mov	r31, r3
 884:	f0 62       	ori	r31, 0x20	; 32
 886:	3f 2e       	mov	r3, r31
 888:	08 c0       	rjmp	.+16     	; 0x89a <vfprintf+0xe2>
 88a:	8c 36       	cpi	r24, 0x6C	; 108
 88c:	21 f4       	brne	.+8      	; 0x896 <vfprintf+0xde>
 88e:	83 2d       	mov	r24, r3
 890:	80 68       	ori	r24, 0x80	; 128
 892:	38 2e       	mov	r3, r24
 894:	02 c0       	rjmp	.+4      	; 0x89a <vfprintf+0xe2>
 896:	88 36       	cpi	r24, 0x68	; 104
 898:	41 f4       	brne	.+16     	; 0x8aa <vfprintf+0xf2>
 89a:	f7 01       	movw	r30, r14
 89c:	93 fd       	sbrc	r25, 3
 89e:	85 91       	lpm	r24, Z+
 8a0:	93 ff       	sbrs	r25, 3
 8a2:	81 91       	ld	r24, Z+
 8a4:	7f 01       	movw	r14, r30
 8a6:	81 11       	cpse	r24, r1
 8a8:	b3 cf       	rjmp	.-154    	; 0x810 <vfprintf+0x58>
 8aa:	98 2f       	mov	r25, r24
 8ac:	9f 7d       	andi	r25, 0xDF	; 223
 8ae:	95 54       	subi	r25, 0x45	; 69
 8b0:	93 30       	cpi	r25, 0x03	; 3
 8b2:	28 f4       	brcc	.+10     	; 0x8be <vfprintf+0x106>
 8b4:	0c 5f       	subi	r16, 0xFC	; 252
 8b6:	1f 4f       	sbci	r17, 0xFF	; 255
 8b8:	9f e3       	ldi	r25, 0x3F	; 63
 8ba:	99 83       	std	Y+1, r25	; 0x01
 8bc:	0d c0       	rjmp	.+26     	; 0x8d8 <vfprintf+0x120>
 8be:	83 36       	cpi	r24, 0x63	; 99
 8c0:	31 f0       	breq	.+12     	; 0x8ce <vfprintf+0x116>
 8c2:	83 37       	cpi	r24, 0x73	; 115
 8c4:	71 f0       	breq	.+28     	; 0x8e2 <vfprintf+0x12a>
 8c6:	83 35       	cpi	r24, 0x53	; 83
 8c8:	09 f0       	breq	.+2      	; 0x8cc <vfprintf+0x114>
 8ca:	55 c0       	rjmp	.+170    	; 0x976 <vfprintf+0x1be>
 8cc:	20 c0       	rjmp	.+64     	; 0x90e <vfprintf+0x156>
 8ce:	f8 01       	movw	r30, r16
 8d0:	80 81       	ld	r24, Z
 8d2:	89 83       	std	Y+1, r24	; 0x01
 8d4:	0e 5f       	subi	r16, 0xFE	; 254
 8d6:	1f 4f       	sbci	r17, 0xFF	; 255
 8d8:	88 24       	eor	r8, r8
 8da:	83 94       	inc	r8
 8dc:	91 2c       	mov	r9, r1
 8de:	53 01       	movw	r10, r6
 8e0:	12 c0       	rjmp	.+36     	; 0x906 <vfprintf+0x14e>
 8e2:	28 01       	movw	r4, r16
 8e4:	f2 e0       	ldi	r31, 0x02	; 2
 8e6:	4f 0e       	add	r4, r31
 8e8:	51 1c       	adc	r5, r1
 8ea:	f8 01       	movw	r30, r16
 8ec:	a0 80       	ld	r10, Z
 8ee:	b1 80       	ldd	r11, Z+1	; 0x01
 8f0:	36 fe       	sbrs	r3, 6
 8f2:	03 c0       	rjmp	.+6      	; 0x8fa <vfprintf+0x142>
 8f4:	69 2d       	mov	r22, r9
 8f6:	70 e0       	ldi	r23, 0x00	; 0
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <vfprintf+0x146>
 8fa:	6f ef       	ldi	r22, 0xFF	; 255
 8fc:	7f ef       	ldi	r23, 0xFF	; 255
 8fe:	c5 01       	movw	r24, r10
 900:	3b d1       	rcall	.+630    	; 0xb78 <strnlen>
 902:	4c 01       	movw	r8, r24
 904:	82 01       	movw	r16, r4
 906:	f3 2d       	mov	r31, r3
 908:	ff 77       	andi	r31, 0x7F	; 127
 90a:	3f 2e       	mov	r3, r31
 90c:	15 c0       	rjmp	.+42     	; 0x938 <vfprintf+0x180>
 90e:	28 01       	movw	r4, r16
 910:	22 e0       	ldi	r18, 0x02	; 2
 912:	42 0e       	add	r4, r18
 914:	51 1c       	adc	r5, r1
 916:	f8 01       	movw	r30, r16
 918:	a0 80       	ld	r10, Z
 91a:	b1 80       	ldd	r11, Z+1	; 0x01
 91c:	36 fe       	sbrs	r3, 6
 91e:	03 c0       	rjmp	.+6      	; 0x926 <vfprintf+0x16e>
 920:	69 2d       	mov	r22, r9
 922:	70 e0       	ldi	r23, 0x00	; 0
 924:	02 c0       	rjmp	.+4      	; 0x92a <vfprintf+0x172>
 926:	6f ef       	ldi	r22, 0xFF	; 255
 928:	7f ef       	ldi	r23, 0xFF	; 255
 92a:	c5 01       	movw	r24, r10
 92c:	1a d1       	rcall	.+564    	; 0xb62 <strnlen_P>
 92e:	4c 01       	movw	r8, r24
 930:	f3 2d       	mov	r31, r3
 932:	f0 68       	ori	r31, 0x80	; 128
 934:	3f 2e       	mov	r3, r31
 936:	82 01       	movw	r16, r4
 938:	33 fc       	sbrc	r3, 3
 93a:	19 c0       	rjmp	.+50     	; 0x96e <vfprintf+0x1b6>
 93c:	82 2d       	mov	r24, r2
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	88 16       	cp	r8, r24
 942:	99 06       	cpc	r9, r25
 944:	a0 f4       	brcc	.+40     	; 0x96e <vfprintf+0x1b6>
 946:	b6 01       	movw	r22, r12
 948:	80 e2       	ldi	r24, 0x20	; 32
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	20 d1       	rcall	.+576    	; 0xb8e <fputc>
 94e:	2a 94       	dec	r2
 950:	f5 cf       	rjmp	.-22     	; 0x93c <vfprintf+0x184>
 952:	f5 01       	movw	r30, r10
 954:	37 fc       	sbrc	r3, 7
 956:	85 91       	lpm	r24, Z+
 958:	37 fe       	sbrs	r3, 7
 95a:	81 91       	ld	r24, Z+
 95c:	5f 01       	movw	r10, r30
 95e:	b6 01       	movw	r22, r12
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	15 d1       	rcall	.+554    	; 0xb8e <fputc>
 964:	21 10       	cpse	r2, r1
 966:	2a 94       	dec	r2
 968:	21 e0       	ldi	r18, 0x01	; 1
 96a:	82 1a       	sub	r8, r18
 96c:	91 08       	sbc	r9, r1
 96e:	81 14       	cp	r8, r1
 970:	91 04       	cpc	r9, r1
 972:	79 f7       	brne	.-34     	; 0x952 <vfprintf+0x19a>
 974:	e1 c0       	rjmp	.+450    	; 0xb38 <__stack+0x39>
 976:	84 36       	cpi	r24, 0x64	; 100
 978:	11 f0       	breq	.+4      	; 0x97e <vfprintf+0x1c6>
 97a:	89 36       	cpi	r24, 0x69	; 105
 97c:	39 f5       	brne	.+78     	; 0x9cc <vfprintf+0x214>
 97e:	f8 01       	movw	r30, r16
 980:	37 fe       	sbrs	r3, 7
 982:	07 c0       	rjmp	.+14     	; 0x992 <vfprintf+0x1da>
 984:	60 81       	ld	r22, Z
 986:	71 81       	ldd	r23, Z+1	; 0x01
 988:	82 81       	ldd	r24, Z+2	; 0x02
 98a:	93 81       	ldd	r25, Z+3	; 0x03
 98c:	0c 5f       	subi	r16, 0xFC	; 252
 98e:	1f 4f       	sbci	r17, 0xFF	; 255
 990:	08 c0       	rjmp	.+16     	; 0x9a2 <vfprintf+0x1ea>
 992:	60 81       	ld	r22, Z
 994:	71 81       	ldd	r23, Z+1	; 0x01
 996:	07 2e       	mov	r0, r23
 998:	00 0c       	add	r0, r0
 99a:	88 0b       	sbc	r24, r24
 99c:	99 0b       	sbc	r25, r25
 99e:	0e 5f       	subi	r16, 0xFE	; 254
 9a0:	1f 4f       	sbci	r17, 0xFF	; 255
 9a2:	f3 2d       	mov	r31, r3
 9a4:	ff 76       	andi	r31, 0x6F	; 111
 9a6:	3f 2e       	mov	r3, r31
 9a8:	97 ff       	sbrs	r25, 7
 9aa:	09 c0       	rjmp	.+18     	; 0x9be <vfprintf+0x206>
 9ac:	90 95       	com	r25
 9ae:	80 95       	com	r24
 9b0:	70 95       	com	r23
 9b2:	61 95       	neg	r22
 9b4:	7f 4f       	sbci	r23, 0xFF	; 255
 9b6:	8f 4f       	sbci	r24, 0xFF	; 255
 9b8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ba:	f0 68       	ori	r31, 0x80	; 128
 9bc:	3f 2e       	mov	r3, r31
 9be:	2a e0       	ldi	r18, 0x0A	; 10
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	a3 01       	movw	r20, r6
 9c4:	20 d1       	rcall	.+576    	; 0xc06 <__ultoa_invert>
 9c6:	88 2e       	mov	r8, r24
 9c8:	86 18       	sub	r8, r6
 9ca:	44 c0       	rjmp	.+136    	; 0xa54 <__DATA_REGION_LENGTH__+0x54>
 9cc:	85 37       	cpi	r24, 0x75	; 117
 9ce:	31 f4       	brne	.+12     	; 0x9dc <vfprintf+0x224>
 9d0:	23 2d       	mov	r18, r3
 9d2:	2f 7e       	andi	r18, 0xEF	; 239
 9d4:	b2 2e       	mov	r11, r18
 9d6:	2a e0       	ldi	r18, 0x0A	; 10
 9d8:	30 e0       	ldi	r19, 0x00	; 0
 9da:	25 c0       	rjmp	.+74     	; 0xa26 <__DATA_REGION_LENGTH__+0x26>
 9dc:	93 2d       	mov	r25, r3
 9de:	99 7f       	andi	r25, 0xF9	; 249
 9e0:	b9 2e       	mov	r11, r25
 9e2:	8f 36       	cpi	r24, 0x6F	; 111
 9e4:	c1 f0       	breq	.+48     	; 0xa16 <__DATA_REGION_LENGTH__+0x16>
 9e6:	18 f4       	brcc	.+6      	; 0x9ee <vfprintf+0x236>
 9e8:	88 35       	cpi	r24, 0x58	; 88
 9ea:	79 f0       	breq	.+30     	; 0xa0a <__DATA_REGION_LENGTH__+0xa>
 9ec:	ae c0       	rjmp	.+348    	; 0xb4a <__stack+0x4b>
 9ee:	80 37       	cpi	r24, 0x70	; 112
 9f0:	19 f0       	breq	.+6      	; 0x9f8 <vfprintf+0x240>
 9f2:	88 37       	cpi	r24, 0x78	; 120
 9f4:	21 f0       	breq	.+8      	; 0x9fe <vfprintf+0x246>
 9f6:	a9 c0       	rjmp	.+338    	; 0xb4a <__stack+0x4b>
 9f8:	e9 2f       	mov	r30, r25
 9fa:	e0 61       	ori	r30, 0x10	; 16
 9fc:	be 2e       	mov	r11, r30
 9fe:	b4 fe       	sbrs	r11, 4
 a00:	0d c0       	rjmp	.+26     	; 0xa1c <__DATA_REGION_LENGTH__+0x1c>
 a02:	fb 2d       	mov	r31, r11
 a04:	f4 60       	ori	r31, 0x04	; 4
 a06:	bf 2e       	mov	r11, r31
 a08:	09 c0       	rjmp	.+18     	; 0xa1c <__DATA_REGION_LENGTH__+0x1c>
 a0a:	34 fe       	sbrs	r3, 4
 a0c:	0a c0       	rjmp	.+20     	; 0xa22 <__DATA_REGION_LENGTH__+0x22>
 a0e:	29 2f       	mov	r18, r25
 a10:	26 60       	ori	r18, 0x06	; 6
 a12:	b2 2e       	mov	r11, r18
 a14:	06 c0       	rjmp	.+12     	; 0xa22 <__DATA_REGION_LENGTH__+0x22>
 a16:	28 e0       	ldi	r18, 0x08	; 8
 a18:	30 e0       	ldi	r19, 0x00	; 0
 a1a:	05 c0       	rjmp	.+10     	; 0xa26 <__DATA_REGION_LENGTH__+0x26>
 a1c:	20 e1       	ldi	r18, 0x10	; 16
 a1e:	30 e0       	ldi	r19, 0x00	; 0
 a20:	02 c0       	rjmp	.+4      	; 0xa26 <__DATA_REGION_LENGTH__+0x26>
 a22:	20 e1       	ldi	r18, 0x10	; 16
 a24:	32 e0       	ldi	r19, 0x02	; 2
 a26:	f8 01       	movw	r30, r16
 a28:	b7 fe       	sbrs	r11, 7
 a2a:	07 c0       	rjmp	.+14     	; 0xa3a <__DATA_REGION_LENGTH__+0x3a>
 a2c:	60 81       	ld	r22, Z
 a2e:	71 81       	ldd	r23, Z+1	; 0x01
 a30:	82 81       	ldd	r24, Z+2	; 0x02
 a32:	93 81       	ldd	r25, Z+3	; 0x03
 a34:	0c 5f       	subi	r16, 0xFC	; 252
 a36:	1f 4f       	sbci	r17, 0xFF	; 255
 a38:	06 c0       	rjmp	.+12     	; 0xa46 <__DATA_REGION_LENGTH__+0x46>
 a3a:	60 81       	ld	r22, Z
 a3c:	71 81       	ldd	r23, Z+1	; 0x01
 a3e:	80 e0       	ldi	r24, 0x00	; 0
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	0e 5f       	subi	r16, 0xFE	; 254
 a44:	1f 4f       	sbci	r17, 0xFF	; 255
 a46:	a3 01       	movw	r20, r6
 a48:	de d0       	rcall	.+444    	; 0xc06 <__ultoa_invert>
 a4a:	88 2e       	mov	r8, r24
 a4c:	86 18       	sub	r8, r6
 a4e:	fb 2d       	mov	r31, r11
 a50:	ff 77       	andi	r31, 0x7F	; 127
 a52:	3f 2e       	mov	r3, r31
 a54:	36 fe       	sbrs	r3, 6
 a56:	0d c0       	rjmp	.+26     	; 0xa72 <__DATA_REGION_LENGTH__+0x72>
 a58:	23 2d       	mov	r18, r3
 a5a:	2e 7f       	andi	r18, 0xFE	; 254
 a5c:	a2 2e       	mov	r10, r18
 a5e:	89 14       	cp	r8, r9
 a60:	58 f4       	brcc	.+22     	; 0xa78 <__DATA_REGION_LENGTH__+0x78>
 a62:	34 fe       	sbrs	r3, 4
 a64:	0b c0       	rjmp	.+22     	; 0xa7c <__DATA_REGION_LENGTH__+0x7c>
 a66:	32 fc       	sbrc	r3, 2
 a68:	09 c0       	rjmp	.+18     	; 0xa7c <__DATA_REGION_LENGTH__+0x7c>
 a6a:	83 2d       	mov	r24, r3
 a6c:	8e 7e       	andi	r24, 0xEE	; 238
 a6e:	a8 2e       	mov	r10, r24
 a70:	05 c0       	rjmp	.+10     	; 0xa7c <__DATA_REGION_LENGTH__+0x7c>
 a72:	b8 2c       	mov	r11, r8
 a74:	a3 2c       	mov	r10, r3
 a76:	03 c0       	rjmp	.+6      	; 0xa7e <__DATA_REGION_LENGTH__+0x7e>
 a78:	b8 2c       	mov	r11, r8
 a7a:	01 c0       	rjmp	.+2      	; 0xa7e <__DATA_REGION_LENGTH__+0x7e>
 a7c:	b9 2c       	mov	r11, r9
 a7e:	a4 fe       	sbrs	r10, 4
 a80:	0f c0       	rjmp	.+30     	; 0xaa0 <__DATA_REGION_LENGTH__+0xa0>
 a82:	fe 01       	movw	r30, r28
 a84:	e8 0d       	add	r30, r8
 a86:	f1 1d       	adc	r31, r1
 a88:	80 81       	ld	r24, Z
 a8a:	80 33       	cpi	r24, 0x30	; 48
 a8c:	21 f4       	brne	.+8      	; 0xa96 <__DATA_REGION_LENGTH__+0x96>
 a8e:	9a 2d       	mov	r25, r10
 a90:	99 7e       	andi	r25, 0xE9	; 233
 a92:	a9 2e       	mov	r10, r25
 a94:	09 c0       	rjmp	.+18     	; 0xaa8 <__DATA_REGION_LENGTH__+0xa8>
 a96:	a2 fe       	sbrs	r10, 2
 a98:	06 c0       	rjmp	.+12     	; 0xaa6 <__DATA_REGION_LENGTH__+0xa6>
 a9a:	b3 94       	inc	r11
 a9c:	b3 94       	inc	r11
 a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__DATA_REGION_LENGTH__+0xa8>
 aa0:	8a 2d       	mov	r24, r10
 aa2:	86 78       	andi	r24, 0x86	; 134
 aa4:	09 f0       	breq	.+2      	; 0xaa8 <__DATA_REGION_LENGTH__+0xa8>
 aa6:	b3 94       	inc	r11
 aa8:	a3 fc       	sbrc	r10, 3
 aaa:	10 c0       	rjmp	.+32     	; 0xacc <__DATA_REGION_LENGTH__+0xcc>
 aac:	a0 fe       	sbrs	r10, 0
 aae:	06 c0       	rjmp	.+12     	; 0xabc <__DATA_REGION_LENGTH__+0xbc>
 ab0:	b2 14       	cp	r11, r2
 ab2:	80 f4       	brcc	.+32     	; 0xad4 <__DATA_REGION_LENGTH__+0xd4>
 ab4:	28 0c       	add	r2, r8
 ab6:	92 2c       	mov	r9, r2
 ab8:	9b 18       	sub	r9, r11
 aba:	0d c0       	rjmp	.+26     	; 0xad6 <__DATA_REGION_LENGTH__+0xd6>
 abc:	b2 14       	cp	r11, r2
 abe:	58 f4       	brcc	.+22     	; 0xad6 <__DATA_REGION_LENGTH__+0xd6>
 ac0:	b6 01       	movw	r22, r12
 ac2:	80 e2       	ldi	r24, 0x20	; 32
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	63 d0       	rcall	.+198    	; 0xb8e <fputc>
 ac8:	b3 94       	inc	r11
 aca:	f8 cf       	rjmp	.-16     	; 0xabc <__DATA_REGION_LENGTH__+0xbc>
 acc:	b2 14       	cp	r11, r2
 ace:	18 f4       	brcc	.+6      	; 0xad6 <__DATA_REGION_LENGTH__+0xd6>
 ad0:	2b 18       	sub	r2, r11
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <__DATA_REGION_LENGTH__+0xd8>
 ad4:	98 2c       	mov	r9, r8
 ad6:	21 2c       	mov	r2, r1
 ad8:	a4 fe       	sbrs	r10, 4
 ada:	0f c0       	rjmp	.+30     	; 0xafa <__DATA_REGION_LENGTH__+0xfa>
 adc:	b6 01       	movw	r22, r12
 ade:	80 e3       	ldi	r24, 0x30	; 48
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	55 d0       	rcall	.+170    	; 0xb8e <fputc>
 ae4:	a2 fe       	sbrs	r10, 2
 ae6:	16 c0       	rjmp	.+44     	; 0xb14 <__stack+0x15>
 ae8:	a1 fc       	sbrc	r10, 1
 aea:	03 c0       	rjmp	.+6      	; 0xaf2 <__DATA_REGION_LENGTH__+0xf2>
 aec:	88 e7       	ldi	r24, 0x78	; 120
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <__DATA_REGION_LENGTH__+0xf6>
 af2:	88 e5       	ldi	r24, 0x58	; 88
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	b6 01       	movw	r22, r12
 af8:	0c c0       	rjmp	.+24     	; 0xb12 <__stack+0x13>
 afa:	8a 2d       	mov	r24, r10
 afc:	86 78       	andi	r24, 0x86	; 134
 afe:	51 f0       	breq	.+20     	; 0xb14 <__stack+0x15>
 b00:	a1 fe       	sbrs	r10, 1
 b02:	02 c0       	rjmp	.+4      	; 0xb08 <__stack+0x9>
 b04:	8b e2       	ldi	r24, 0x2B	; 43
 b06:	01 c0       	rjmp	.+2      	; 0xb0a <__stack+0xb>
 b08:	80 e2       	ldi	r24, 0x20	; 32
 b0a:	a7 fc       	sbrc	r10, 7
 b0c:	8d e2       	ldi	r24, 0x2D	; 45
 b0e:	b6 01       	movw	r22, r12
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	3d d0       	rcall	.+122    	; 0xb8e <fputc>
 b14:	89 14       	cp	r8, r9
 b16:	30 f4       	brcc	.+12     	; 0xb24 <__stack+0x25>
 b18:	b6 01       	movw	r22, r12
 b1a:	80 e3       	ldi	r24, 0x30	; 48
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	37 d0       	rcall	.+110    	; 0xb8e <fputc>
 b20:	9a 94       	dec	r9
 b22:	f8 cf       	rjmp	.-16     	; 0xb14 <__stack+0x15>
 b24:	8a 94       	dec	r8
 b26:	f3 01       	movw	r30, r6
 b28:	e8 0d       	add	r30, r8
 b2a:	f1 1d       	adc	r31, r1
 b2c:	80 81       	ld	r24, Z
 b2e:	b6 01       	movw	r22, r12
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	2d d0       	rcall	.+90     	; 0xb8e <fputc>
 b34:	81 10       	cpse	r8, r1
 b36:	f6 cf       	rjmp	.-20     	; 0xb24 <__stack+0x25>
 b38:	22 20       	and	r2, r2
 b3a:	09 f4       	brne	.+2      	; 0xb3e <__stack+0x3f>
 b3c:	4e ce       	rjmp	.-868    	; 0x7da <vfprintf+0x22>
 b3e:	b6 01       	movw	r22, r12
 b40:	80 e2       	ldi	r24, 0x20	; 32
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	24 d0       	rcall	.+72     	; 0xb8e <fputc>
 b46:	2a 94       	dec	r2
 b48:	f7 cf       	rjmp	.-18     	; 0xb38 <__stack+0x39>
 b4a:	f6 01       	movw	r30, r12
 b4c:	86 81       	ldd	r24, Z+6	; 0x06
 b4e:	97 81       	ldd	r25, Z+7	; 0x07
 b50:	02 c0       	rjmp	.+4      	; 0xb56 <__stack+0x57>
 b52:	8f ef       	ldi	r24, 0xFF	; 255
 b54:	9f ef       	ldi	r25, 0xFF	; 255
 b56:	2b 96       	adiw	r28, 0x0b	; 11
 b58:	e2 e1       	ldi	r30, 0x12	; 18
 b5a:	e5 c0       	rjmp	.+458    	; 0xd26 <__epilogue_restores__>

00000b5c <__ctype_isfalse>:
 b5c:	99 27       	eor	r25, r25
 b5e:	88 27       	eor	r24, r24

00000b60 <__ctype_istrue>:
 b60:	08 95       	ret

00000b62 <strnlen_P>:
 b62:	fc 01       	movw	r30, r24
 b64:	05 90       	lpm	r0, Z+
 b66:	61 50       	subi	r22, 0x01	; 1
 b68:	70 40       	sbci	r23, 0x00	; 0
 b6a:	01 10       	cpse	r0, r1
 b6c:	d8 f7       	brcc	.-10     	; 0xb64 <strnlen_P+0x2>
 b6e:	80 95       	com	r24
 b70:	90 95       	com	r25
 b72:	8e 0f       	add	r24, r30
 b74:	9f 1f       	adc	r25, r31
 b76:	08 95       	ret

00000b78 <strnlen>:
 b78:	fc 01       	movw	r30, r24
 b7a:	61 50       	subi	r22, 0x01	; 1
 b7c:	70 40       	sbci	r23, 0x00	; 0
 b7e:	01 90       	ld	r0, Z+
 b80:	01 10       	cpse	r0, r1
 b82:	d8 f7       	brcc	.-10     	; 0xb7a <strnlen+0x2>
 b84:	80 95       	com	r24
 b86:	90 95       	com	r25
 b88:	8e 0f       	add	r24, r30
 b8a:	9f 1f       	adc	r25, r31
 b8c:	08 95       	ret

00000b8e <fputc>:
 b8e:	0f 93       	push	r16
 b90:	1f 93       	push	r17
 b92:	cf 93       	push	r28
 b94:	df 93       	push	r29
 b96:	fb 01       	movw	r30, r22
 b98:	23 81       	ldd	r18, Z+3	; 0x03
 b9a:	21 fd       	sbrc	r18, 1
 b9c:	03 c0       	rjmp	.+6      	; 0xba4 <fputc+0x16>
 b9e:	8f ef       	ldi	r24, 0xFF	; 255
 ba0:	9f ef       	ldi	r25, 0xFF	; 255
 ba2:	2c c0       	rjmp	.+88     	; 0xbfc <fputc+0x6e>
 ba4:	22 ff       	sbrs	r18, 2
 ba6:	16 c0       	rjmp	.+44     	; 0xbd4 <fputc+0x46>
 ba8:	46 81       	ldd	r20, Z+6	; 0x06
 baa:	57 81       	ldd	r21, Z+7	; 0x07
 bac:	24 81       	ldd	r18, Z+4	; 0x04
 bae:	35 81       	ldd	r19, Z+5	; 0x05
 bb0:	42 17       	cp	r20, r18
 bb2:	53 07       	cpc	r21, r19
 bb4:	44 f4       	brge	.+16     	; 0xbc6 <fputc+0x38>
 bb6:	a0 81       	ld	r26, Z
 bb8:	b1 81       	ldd	r27, Z+1	; 0x01
 bba:	9d 01       	movw	r18, r26
 bbc:	2f 5f       	subi	r18, 0xFF	; 255
 bbe:	3f 4f       	sbci	r19, 0xFF	; 255
 bc0:	31 83       	std	Z+1, r19	; 0x01
 bc2:	20 83       	st	Z, r18
 bc4:	8c 93       	st	X, r24
 bc6:	26 81       	ldd	r18, Z+6	; 0x06
 bc8:	37 81       	ldd	r19, Z+7	; 0x07
 bca:	2f 5f       	subi	r18, 0xFF	; 255
 bcc:	3f 4f       	sbci	r19, 0xFF	; 255
 bce:	37 83       	std	Z+7, r19	; 0x07
 bd0:	26 83       	std	Z+6, r18	; 0x06
 bd2:	14 c0       	rjmp	.+40     	; 0xbfc <fputc+0x6e>
 bd4:	8b 01       	movw	r16, r22
 bd6:	ec 01       	movw	r28, r24
 bd8:	fb 01       	movw	r30, r22
 bda:	00 84       	ldd	r0, Z+8	; 0x08
 bdc:	f1 85       	ldd	r31, Z+9	; 0x09
 bde:	e0 2d       	mov	r30, r0
 be0:	09 95       	icall
 be2:	89 2b       	or	r24, r25
 be4:	e1 f6       	brne	.-72     	; 0xb9e <fputc+0x10>
 be6:	d8 01       	movw	r26, r16
 be8:	16 96       	adiw	r26, 0x06	; 6
 bea:	8d 91       	ld	r24, X+
 bec:	9c 91       	ld	r25, X
 bee:	17 97       	sbiw	r26, 0x07	; 7
 bf0:	01 96       	adiw	r24, 0x01	; 1
 bf2:	17 96       	adiw	r26, 0x07	; 7
 bf4:	9c 93       	st	X, r25
 bf6:	8e 93       	st	-X, r24
 bf8:	16 97       	sbiw	r26, 0x06	; 6
 bfa:	ce 01       	movw	r24, r28
 bfc:	df 91       	pop	r29
 bfe:	cf 91       	pop	r28
 c00:	1f 91       	pop	r17
 c02:	0f 91       	pop	r16
 c04:	08 95       	ret

00000c06 <__ultoa_invert>:
 c06:	fa 01       	movw	r30, r20
 c08:	aa 27       	eor	r26, r26
 c0a:	28 30       	cpi	r18, 0x08	; 8
 c0c:	51 f1       	breq	.+84     	; 0xc62 <__ultoa_invert+0x5c>
 c0e:	20 31       	cpi	r18, 0x10	; 16
 c10:	81 f1       	breq	.+96     	; 0xc72 <__ultoa_invert+0x6c>
 c12:	e8 94       	clt
 c14:	6f 93       	push	r22
 c16:	6e 7f       	andi	r22, 0xFE	; 254
 c18:	6e 5f       	subi	r22, 0xFE	; 254
 c1a:	7f 4f       	sbci	r23, 0xFF	; 255
 c1c:	8f 4f       	sbci	r24, 0xFF	; 255
 c1e:	9f 4f       	sbci	r25, 0xFF	; 255
 c20:	af 4f       	sbci	r26, 0xFF	; 255
 c22:	b1 e0       	ldi	r27, 0x01	; 1
 c24:	3e d0       	rcall	.+124    	; 0xca2 <__ultoa_invert+0x9c>
 c26:	b4 e0       	ldi	r27, 0x04	; 4
 c28:	3c d0       	rcall	.+120    	; 0xca2 <__ultoa_invert+0x9c>
 c2a:	67 0f       	add	r22, r23
 c2c:	78 1f       	adc	r23, r24
 c2e:	89 1f       	adc	r24, r25
 c30:	9a 1f       	adc	r25, r26
 c32:	a1 1d       	adc	r26, r1
 c34:	68 0f       	add	r22, r24
 c36:	79 1f       	adc	r23, r25
 c38:	8a 1f       	adc	r24, r26
 c3a:	91 1d       	adc	r25, r1
 c3c:	a1 1d       	adc	r26, r1
 c3e:	6a 0f       	add	r22, r26
 c40:	71 1d       	adc	r23, r1
 c42:	81 1d       	adc	r24, r1
 c44:	91 1d       	adc	r25, r1
 c46:	a1 1d       	adc	r26, r1
 c48:	20 d0       	rcall	.+64     	; 0xc8a <__ultoa_invert+0x84>
 c4a:	09 f4       	brne	.+2      	; 0xc4e <__ultoa_invert+0x48>
 c4c:	68 94       	set
 c4e:	3f 91       	pop	r19
 c50:	2a e0       	ldi	r18, 0x0A	; 10
 c52:	26 9f       	mul	r18, r22
 c54:	11 24       	eor	r1, r1
 c56:	30 19       	sub	r19, r0
 c58:	30 5d       	subi	r19, 0xD0	; 208
 c5a:	31 93       	st	Z+, r19
 c5c:	de f6       	brtc	.-74     	; 0xc14 <__ultoa_invert+0xe>
 c5e:	cf 01       	movw	r24, r30
 c60:	08 95       	ret
 c62:	46 2f       	mov	r20, r22
 c64:	47 70       	andi	r20, 0x07	; 7
 c66:	40 5d       	subi	r20, 0xD0	; 208
 c68:	41 93       	st	Z+, r20
 c6a:	b3 e0       	ldi	r27, 0x03	; 3
 c6c:	0f d0       	rcall	.+30     	; 0xc8c <__ultoa_invert+0x86>
 c6e:	c9 f7       	brne	.-14     	; 0xc62 <__ultoa_invert+0x5c>
 c70:	f6 cf       	rjmp	.-20     	; 0xc5e <__ultoa_invert+0x58>
 c72:	46 2f       	mov	r20, r22
 c74:	4f 70       	andi	r20, 0x0F	; 15
 c76:	40 5d       	subi	r20, 0xD0	; 208
 c78:	4a 33       	cpi	r20, 0x3A	; 58
 c7a:	18 f0       	brcs	.+6      	; 0xc82 <__ultoa_invert+0x7c>
 c7c:	49 5d       	subi	r20, 0xD9	; 217
 c7e:	31 fd       	sbrc	r19, 1
 c80:	40 52       	subi	r20, 0x20	; 32
 c82:	41 93       	st	Z+, r20
 c84:	02 d0       	rcall	.+4      	; 0xc8a <__ultoa_invert+0x84>
 c86:	a9 f7       	brne	.-22     	; 0xc72 <__ultoa_invert+0x6c>
 c88:	ea cf       	rjmp	.-44     	; 0xc5e <__ultoa_invert+0x58>
 c8a:	b4 e0       	ldi	r27, 0x04	; 4
 c8c:	a6 95       	lsr	r26
 c8e:	97 95       	ror	r25
 c90:	87 95       	ror	r24
 c92:	77 95       	ror	r23
 c94:	67 95       	ror	r22
 c96:	ba 95       	dec	r27
 c98:	c9 f7       	brne	.-14     	; 0xc8c <__ultoa_invert+0x86>
 c9a:	00 97       	sbiw	r24, 0x00	; 0
 c9c:	61 05       	cpc	r22, r1
 c9e:	71 05       	cpc	r23, r1
 ca0:	08 95       	ret
 ca2:	9b 01       	movw	r18, r22
 ca4:	ac 01       	movw	r20, r24
 ca6:	0a 2e       	mov	r0, r26
 ca8:	06 94       	lsr	r0
 caa:	57 95       	ror	r21
 cac:	47 95       	ror	r20
 cae:	37 95       	ror	r19
 cb0:	27 95       	ror	r18
 cb2:	ba 95       	dec	r27
 cb4:	c9 f7       	brne	.-14     	; 0xca8 <__ultoa_invert+0xa2>
 cb6:	62 0f       	add	r22, r18
 cb8:	73 1f       	adc	r23, r19
 cba:	84 1f       	adc	r24, r20
 cbc:	95 1f       	adc	r25, r21
 cbe:	a0 1d       	adc	r26, r0
 cc0:	08 95       	ret

00000cc2 <eeprom_read_byte>:
 cc2:	f9 99       	sbic	0x1f, 1	; 31
 cc4:	fe cf       	rjmp	.-4      	; 0xcc2 <eeprom_read_byte>
 cc6:	92 bd       	out	0x22, r25	; 34
 cc8:	81 bd       	out	0x21, r24	; 33
 cca:	f8 9a       	sbi	0x1f, 0	; 31
 ccc:	99 27       	eor	r25, r25
 cce:	80 b5       	in	r24, 0x20	; 32
 cd0:	08 95       	ret

00000cd2 <eeprom_write_byte>:
 cd2:	26 2f       	mov	r18, r22

00000cd4 <eeprom_write_r18>:
 cd4:	f9 99       	sbic	0x1f, 1	; 31
 cd6:	fe cf       	rjmp	.-4      	; 0xcd4 <eeprom_write_r18>
 cd8:	1f ba       	out	0x1f, r1	; 31
 cda:	92 bd       	out	0x22, r25	; 34
 cdc:	81 bd       	out	0x21, r24	; 33
 cde:	20 bd       	out	0x20, r18	; 32
 ce0:	0f b6       	in	r0, 0x3f	; 63
 ce2:	f8 94       	cli
 ce4:	fa 9a       	sbi	0x1f, 2	; 31
 ce6:	f9 9a       	sbi	0x1f, 1	; 31
 ce8:	0f be       	out	0x3f, r0	; 63
 cea:	01 96       	adiw	r24, 0x01	; 1
 cec:	08 95       	ret

00000cee <__prologue_saves__>:
 cee:	2f 92       	push	r2
 cf0:	3f 92       	push	r3
 cf2:	4f 92       	push	r4
 cf4:	5f 92       	push	r5
 cf6:	6f 92       	push	r6
 cf8:	7f 92       	push	r7
 cfa:	8f 92       	push	r8
 cfc:	9f 92       	push	r9
 cfe:	af 92       	push	r10
 d00:	bf 92       	push	r11
 d02:	cf 92       	push	r12
 d04:	df 92       	push	r13
 d06:	ef 92       	push	r14
 d08:	ff 92       	push	r15
 d0a:	0f 93       	push	r16
 d0c:	1f 93       	push	r17
 d0e:	cf 93       	push	r28
 d10:	df 93       	push	r29
 d12:	cd b7       	in	r28, 0x3d	; 61
 d14:	de b7       	in	r29, 0x3e	; 62
 d16:	ca 1b       	sub	r28, r26
 d18:	db 0b       	sbc	r29, r27
 d1a:	0f b6       	in	r0, 0x3f	; 63
 d1c:	f8 94       	cli
 d1e:	de bf       	out	0x3e, r29	; 62
 d20:	0f be       	out	0x3f, r0	; 63
 d22:	cd bf       	out	0x3d, r28	; 61
 d24:	09 94       	ijmp

00000d26 <__epilogue_restores__>:
 d26:	2a 88       	ldd	r2, Y+18	; 0x12
 d28:	39 88       	ldd	r3, Y+17	; 0x11
 d2a:	48 88       	ldd	r4, Y+16	; 0x10
 d2c:	5f 84       	ldd	r5, Y+15	; 0x0f
 d2e:	6e 84       	ldd	r6, Y+14	; 0x0e
 d30:	7d 84       	ldd	r7, Y+13	; 0x0d
 d32:	8c 84       	ldd	r8, Y+12	; 0x0c
 d34:	9b 84       	ldd	r9, Y+11	; 0x0b
 d36:	aa 84       	ldd	r10, Y+10	; 0x0a
 d38:	b9 84       	ldd	r11, Y+9	; 0x09
 d3a:	c8 84       	ldd	r12, Y+8	; 0x08
 d3c:	df 80       	ldd	r13, Y+7	; 0x07
 d3e:	ee 80       	ldd	r14, Y+6	; 0x06
 d40:	fd 80       	ldd	r15, Y+5	; 0x05
 d42:	0c 81       	ldd	r16, Y+4	; 0x04
 d44:	1b 81       	ldd	r17, Y+3	; 0x03
 d46:	aa 81       	ldd	r26, Y+2	; 0x02
 d48:	b9 81       	ldd	r27, Y+1	; 0x01
 d4a:	ce 0f       	add	r28, r30
 d4c:	d1 1d       	adc	r29, r1
 d4e:	0f b6       	in	r0, 0x3f	; 63
 d50:	f8 94       	cli
 d52:	de bf       	out	0x3e, r29	; 62
 d54:	0f be       	out	0x3f, r0	; 63
 d56:	cd bf       	out	0x3d, r28	; 61
 d58:	ed 01       	movw	r28, r26
 d5a:	08 95       	ret

00000d5c <_exit>:
 d5c:	f8 94       	cli

00000d5e <__stop_program>:
 d5e:	ff cf       	rjmp	.-2      	; 0xd5e <__stop_program>
