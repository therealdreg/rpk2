
recver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000218  00800100  00003250  000032e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003250  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000182  00800318  00800318  000034fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000034fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000352c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008c8  00000000  00000000  0000356c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012990  00000000  00000000  00003e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000043ad  00000000  00000000  000167c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004ed9  00000000  00000000  0001ab71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ae0  00000000  00000000  0001fa4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004b28  00000000  00000000  0002152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007f14  00000000  00000000  00026054  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000920  00000000  00000000  0002df68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 01 	jmp	0x298	; 0x298 <__ctors_end>
       4:	0c 94 5f 14 	jmp	0x28be	; 0x28be <__vector_1>
       8:	0c 94 86 14 	jmp	0x290c	; 0x290c <__vector_2>
       c:	0c 94 ad 14 	jmp	0x295a	; 0x295a <__vector_3>
      10:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__vector_4>
      14:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      18:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      1c:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__vector_7>
      20:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      24:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      28:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__vector_10>
      2c:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__vector_11>
      30:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      34:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      38:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      3c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      40:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      44:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      48:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      4c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      50:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      54:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      58:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      5c:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__vector_23>
      60:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      64:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <__vector_25>
      68:	0c 94 86 04 	jmp	0x90c	; 0x90c <__vector_26>
      6c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      70:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      74:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      78:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      7c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      80:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      84:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      88:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      8c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      90:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      94:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      98:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      9c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      a0:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      a4:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      a8:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      ac:	71 0b       	sbc	r23, r17
      ae:	74 0b       	sbc	r23, r20
      b0:	63 0b       	sbc	r22, r19
      b2:	67 0b       	sbc	r22, r23
      b4:	6d 0b       	sbc	r22, r29
      b6:	95 0b       	sbc	r25, r21
      b8:	95 0b       	sbc	r25, r21
      ba:	95 0b       	sbc	r25, r21
      bc:	78 0b       	sbc	r23, r24
      be:	7c 0b       	sbc	r23, r28
      c0:	80 0b       	sbc	r24, r16
      c2:	86 0b       	sbc	r24, r22
      c4:	8a 0b       	sbc	r24, r26
      c6:	95 0b       	sbc	r25, r21
      c8:	90 0b       	sbc	r25, r16

000000ca <USB_DeviceDescriptorIAD>:
      ca:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      da:	03 01                                               ..

000000dc <STRING_MANUFACTURER>:
      dc:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000e8 <STRING_PRODUCT>:
      e8:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000000f9 <STRING_LANGUAGE>:
      f9:	04 03 09 04                                         ....

000000fd <digital_pin_to_timer_PGM>:
      fd:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

0000011c <digital_pin_to_bit_mask_PGM>:
     11c:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     12c:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

0000013b <digital_pin_to_port_PGM>:
     13b:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     14b:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

0000015a <port_to_output_PGM>:
     15a:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000168 <port_to_mode_PGM>:
     168:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000176 <_ZL18MODEM_CONFIG_TABLE>:
     176:	00 3e 80 00 52 f4 f4 d0 00 34 15 00 4f f4 f4 d0     .>..R....4..O...
     186:	00 1a 0b 00 9d f4 f4 d0 00 0d 05 01 3b f4 f4 d0     ............;...
     196:	00 06 83 02 75 f3 f3 d0 00 03 41 04 ea f2 f2 d0     ....u.....A.....
     1a6:	00 02 2c 07 ae e2 e2 d0 00 01 00 08 00 e1 e1 d0     ..,.............
     1b6:	00 00 80 10 00 e0 e0 d0 00 02 40 03 33 42 42 d0     ..........@.3BB.
     1c6:	01 3e 80 00 52 f4 f5 d0 01 34 15 00 4f f4 f4 d0     .>..R....4..O...
     1d6:	01 1a 0b 00 9d f4 f4 d0 01 0d 05 01 3b f4 f4 d0     ............;...
     1e6:	01 06 83 02 75 f3 f3 d0 01 03 41 04 ea f2 f2 d0     ....u.....A.....
     1f6:	01 02 2c 07 ae e2 e2 d0 01 01 00 08 00 e1 e1 d0     ..,.............
     206:	01 00 80 10 00 e0 e0 d0 01 02 40 03 33 42 42 d0     ..........@.3BB.
     216:	08 7d 00 00 10 88 88 d0 08 68 2b 00 10 f1 f1 d0     .}.......h+.....
     226:	08 34 15 00 10 f5 f5 d0 08 1a 0b 00 10 f4 f4 d0     .4..............
     236:	08 0d 05 00 10 f3 f3 d0 08 06 83 00 10 f2 f2 d0     ................
     246:	08 03 e8 00 10 e2 e2 d0                             ........

0000024e <_cdcInterface>:
     24e:	08 0b 00 02 02 02 00 00 09 04 00 00 01 02 02 00     ................
     25e:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     26e:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     27e:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
	...

00000290 <__ctors_start>:
     290:	a7 01       	movw	r20, r14
     292:	b6 04       	cpc	r11, r6
     294:	ca 0d       	add	r28, r10
     296:	5f 13       	cpse	r21, r31

00000298 <__ctors_end>:
     298:	11 24       	eor	r1, r1
     29a:	1f be       	out	0x3f, r1	; 63
     29c:	cf ef       	ldi	r28, 0xFF	; 255
     29e:	da e0       	ldi	r29, 0x0A	; 10
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	cd bf       	out	0x3d, r28	; 61

000002a4 <__do_copy_data>:
     2a4:	13 e0       	ldi	r17, 0x03	; 3
     2a6:	a0 e0       	ldi	r26, 0x00	; 0
     2a8:	b1 e0       	ldi	r27, 0x01	; 1
     2aa:	e0 e5       	ldi	r30, 0x50	; 80
     2ac:	f2 e3       	ldi	r31, 0x32	; 50
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <__do_copy_data+0x10>
     2b0:	05 90       	lpm	r0, Z+
     2b2:	0d 92       	st	X+, r0
     2b4:	a8 31       	cpi	r26, 0x18	; 24
     2b6:	b1 07       	cpc	r27, r17
     2b8:	d9 f7       	brne	.-10     	; 0x2b0 <__do_copy_data+0xc>

000002ba <__do_clear_bss>:
     2ba:	24 e0       	ldi	r18, 0x04	; 4
     2bc:	a8 e1       	ldi	r26, 0x18	; 24
     2be:	b3 e0       	ldi	r27, 0x03	; 3
     2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <.do_clear_bss_start>

000002c2 <.do_clear_bss_loop>:
     2c2:	1d 92       	st	X+, r1

000002c4 <.do_clear_bss_start>:
     2c4:	aa 39       	cpi	r26, 0x9A	; 154
     2c6:	b2 07       	cpc	r27, r18
     2c8:	e1 f7       	brne	.-8      	; 0x2c2 <.do_clear_bss_loop>

000002ca <__do_global_ctors>:
     2ca:	11 e0       	ldi	r17, 0x01	; 1
     2cc:	cc e4       	ldi	r28, 0x4C	; 76
     2ce:	d1 e0       	ldi	r29, 0x01	; 1
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <__do_global_ctors+0x10>
     2d2:	21 97       	sbiw	r28, 0x01	; 1
     2d4:	fe 01       	movw	r30, r28
     2d6:	0e 94 2b 18 	call	0x3056	; 0x3056 <__tablejump2__>
     2da:	c8 34       	cpi	r28, 0x48	; 72
     2dc:	d1 07       	cpc	r29, r17
     2de:	c9 f7       	brne	.-14     	; 0x2d2 <__do_global_ctors+0x8>
     2e0:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <main>
     2e4:	0c 94 26 19 	jmp	0x324c	; 0x324c <_exit>

000002e8 <__bad_interrupt>:
     2e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002ec <_Z18switch_usb_to_at90v>:

int16_t packetnum = 0;  // packet counter, we increment per xmission

void switch_usb_to_at90(void)
{
    set_bit(DDRD, DDD7);
     2ec:	57 9a       	sbi	0x0a, 7	; 10
    delay(500);
     2ee:	64 ef       	ldi	r22, 0xF4	; 244
     2f0:	71 e0       	ldi	r23, 0x01	; 1
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 c7 0a 	call	0x158e	; 0x158e <delay>
    clear_bit(PORTD, PD7);
     2fa:	5f 98       	cbi	0x0b, 7	; 11
    delay(500);
     2fc:	64 ef       	ldi	r22, 0xF4	; 244
     2fe:	71 e0       	ldi	r23, 0x01	; 1
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 c7 0a 	call	0x158e	; 0x158e <delay>
    clear_bit(PORTF, PF1);
     308:	89 98       	cbi	0x11, 1	; 17
    delay(500);
     30a:	64 ef       	ldi	r22, 0xF4	; 244
     30c:	71 e0       	ldi	r23, 0x01	; 1
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 c7 0a 	call	0x158e	; 0x158e <delay>
    set_bit(DDRF, DDF0);
     316:	80 9a       	sbi	0x10, 0	; 16
    delay(500);
     318:	64 ef       	ldi	r22, 0xF4	; 244
     31a:	71 e0       	ldi	r23, 0x01	; 1
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 c7 0a 	call	0x158e	; 0x158e <delay>
    set_bit(PORTF, PF0);
     324:	88 9a       	sbi	0x11, 0	; 17
    delay(500);
     326:	64 ef       	ldi	r22, 0xF4	; 244
     328:	71 e0       	ldi	r23, 0x01	; 1
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 c7 0a 	call	0x158e	; 0x158e <delay>
    set_bit(DDRF, DDF1);
     332:	81 9a       	sbi	0x10, 1	; 16
    delay(500);
     334:	64 ef       	ldi	r22, 0xF4	; 244
     336:	71 e0       	ldi	r23, 0x01	; 1
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 c7 0a 	call	0x158e	; 0x158e <delay>
    set_bit(PORTF, PF1);
     340:	89 9a       	sbi	0x11, 1	; 17
    delay(500);
     342:	64 ef       	ldi	r22, 0xF4	; 244
     344:	71 e0       	ldi	r23, 0x01	; 1
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <delay>

0000034e <_GLOBAL__sub_I__Z5Blinkhhhh>:
#define RFM69_CS      7 
#define RFM69_RST     4  
#define LED_1           8
#define LED_2           9

RH_RF69 rf69(RFM69_CS, RFM69_INT);
     34e:	2b e2       	ldi	r18, 0x2B	; 43
     350:	34 e0       	ldi	r19, 0x04	; 4
     352:	43 e0       	ldi	r20, 0x03	; 3
     354:	67 e0       	ldi	r22, 0x07	; 7
     356:	88 e1       	ldi	r24, 0x18	; 24
     358:	93 e0       	ldi	r25, 0x03	; 3
     35a:	0c 94 2c 0e 	jmp	0x1c58	; 0x1c58 <_ZN7RH_RF69C1EhhR12RHGenericSPI>

0000035e <setup>:
    set_bit(PORTF, PF1);
    delay(500);
}

void setup() 
{
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	60 97       	sbiw	r28, 0x10	; 16
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	f8 94       	cli
     370:	de bf       	out	0x3e, r29	; 62
     372:	0f be       	out	0x3f, r0	; 63
     374:	cd bf       	out	0x3d, r28	; 61
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     376:	26 e0       	ldi	r18, 0x06	; 6
     378:	40 e8       	ldi	r20, 0x80	; 128
     37a:	55 e2       	ldi	r21, 0x25	; 37
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	8b e7       	ldi	r24, 0x7B	; 123
     382:	93 e0       	ldi	r25, 0x03	; 3
     384:	0e 94 ef 03 	call	0x7de	; 0x7de <_ZN14HardwareSerial5beginEmh>
  Serial1.begin(9600);
  //while (!Serial) { delay(1); }   // wait until serial console is open, remove if not tethered to computer

 switch_usb_to_at90();
     388:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z18switch_usb_to_at90v>
    
 pinMode(A5, OUTPUT);     
     38c:	61 e0       	ldi	r22, 0x01	; 1
     38e:	87 e1       	ldi	r24, 0x17	; 23
     390:	0e 94 96 0b 	call	0x172c	; 0x172c <pinMode>
 digitalWrite(A5, HIGH);
     394:	61 e0       	ldi	r22, 0x01	; 1
     396:	87 e1       	ldi	r24, 0x17	; 23
     398:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>

  pinMode(LED_1, OUTPUT);
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	88 e0       	ldi	r24, 0x08	; 8
     3a0:	0e 94 96 0b 	call	0x172c	; 0x172c <pinMode>
  pinMode(LED_2, OUTPUT);
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	89 e0       	ldi	r24, 0x09	; 9
     3a8:	0e 94 96 0b 	call	0x172c	; 0x172c <pinMode>
      
  pinMode(RFM69_RST, OUTPUT);
     3ac:	61 e0       	ldi	r22, 0x01	; 1
     3ae:	84 e0       	ldi	r24, 0x04	; 4
     3b0:	0e 94 96 0b 	call	0x172c	; 0x172c <pinMode>
  digitalWrite(RFM69_RST, LOW);
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	84 e0       	ldi	r24, 0x04	; 4
     3b8:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>

  Serial1.println("\r\n\r\nArduino Leonardo RFM69 RX Test!");
     3bc:	61 e3       	ldi	r22, 0x31	; 49
     3be:	71 e0       	ldi	r23, 0x01	; 1
     3c0:	8b e7       	ldi	r24, 0x7B	; 123
     3c2:	93 e0       	ldi	r25, 0x03	; 3
     3c4:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN5Print7printlnEPKc>
  Serial1.println();
     3c8:	8b e7       	ldi	r24, 0x7B	; 123
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZN5Print7printlnEv>

  // manual reset
  digitalWrite(RFM69_RST, HIGH);
     3d0:	61 e0       	ldi	r22, 0x01	; 1
     3d2:	84 e0       	ldi	r24, 0x04	; 4
     3d4:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
  delay(10);
     3d8:	6a e0       	ldi	r22, 0x0A	; 10
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 c7 0a 	call	0x158e	; 0x158e <delay>
  digitalWrite(RFM69_RST, LOW);
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	84 e0       	ldi	r24, 0x04	; 4
     3e8:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
  delay(10);
     3ec:	6a e0       	ldi	r22, 0x0A	; 10
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 c7 0a 	call	0x158e	; 0x158e <delay>
  
  if (!rf69.init()) {
     3f8:	88 e1       	ldi	r24, 0x18	; 24
     3fa:	93 e0       	ldi	r25, 0x03	; 3
     3fc:	0e 94 5d 11 	call	0x22ba	; 0x22ba <_ZN7RH_RF694initEv>
     400:	81 11       	cpse	r24, r1
     402:	07 c0       	rjmp	.+14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
    Serial1.println("RFM69 radio init failed");
     404:	65 e5       	ldi	r22, 0x55	; 85
     406:	71 e0       	ldi	r23, 0x01	; 1
     408:	8b e7       	ldi	r24, 0x7B	; 123
     40a:	93 e0       	ldi	r25, 0x03	; 3
     40c:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN5Print7printlnEPKc>
     410:	ff cf       	rjmp	.-2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
    while (1);
  }
  Serial1.println("RFM69 radio init OK!");
     412:	6d e6       	ldi	r22, 0x6D	; 109
     414:	71 e0       	ldi	r23, 0x01	; 1
     416:	8b e7       	ldi	r24, 0x7B	; 123
     418:	93 e0       	ldi	r25, 0x03	; 3
     41a:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN5Print7printlnEPKc>
  
  // Defaults after init are 434.0MHz, modulation GFSK_Rb250Fd250, +13dbM (for low power module)
  // No encryption
  if (!rf69.setFrequency(RF69_FREQ)) {
     41e:	0d ec       	ldi	r16, 0xCD	; 205
     420:	1c ec       	ldi	r17, 0xCC	; 204
     422:	2c e4       	ldi	r18, 0x4C	; 76
     424:	3d e3       	ldi	r19, 0x3D	; 61
     426:	40 e0       	ldi	r20, 0x00	; 0
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	69 ed       	ldi	r22, 0xD9	; 217
     42c:	73 e4       	ldi	r23, 0x43	; 67
     42e:	88 e1       	ldi	r24, 0x18	; 24
     430:	93 e0       	ldi	r25, 0x03	; 3
     432:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <_ZN7RH_RF6912setFrequencyEff>
     436:	81 11       	cpse	r24, r1
     438:	06 c0       	rjmp	.+12     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
    Serial1.println("setFrequency failed");
     43a:	62 e8       	ldi	r22, 0x82	; 130
     43c:	71 e0       	ldi	r23, 0x01	; 1
     43e:	8b e7       	ldi	r24, 0x7B	; 123
     440:	93 e0       	ldi	r25, 0x03	; 3
     442:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN5Print7printlnEPKc>
  }

  // If you are using a high power RF69 eg RFM69HW, you *must* set a Tx power with the
  // ishighpowermodule flag set like this:
  rf69.setTxPower(20, true);  // range from 14-20 for power, 2nd arg must be true for 69HCW
     446:	41 e0       	ldi	r20, 0x01	; 1
     448:	64 e1       	ldi	r22, 0x14	; 20
     44a:	88 e1       	ldi	r24, 0x18	; 24
     44c:	93 e0       	ldi	r25, 0x03	; 3
     44e:	0e 94 87 10 	call	0x210e	; 0x210e <_ZN7RH_RF6910setTxPowerEab>

  // The encryption key has to be the same as the one in the server
  uint8_t key[] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
     452:	80 e1       	ldi	r24, 0x10	; 16
     454:	e1 e2       	ldi	r30, 0x21	; 33
     456:	f1 e0       	ldi	r31, 0x01	; 1
     458:	de 01       	movw	r26, r28
     45a:	11 96       	adiw	r26, 0x01	; 1
     45c:	01 90       	ld	r0, Z+
     45e:	0d 92       	st	X+, r0
     460:	8a 95       	dec	r24
     462:	e1 f7       	brne	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
  rf69.setEncryptionKey(key);
     464:	be 01       	movw	r22, r28
     466:	6f 5f       	subi	r22, 0xFF	; 255
     468:	7f 4f       	sbci	r23, 0xFF	; 255
     46a:	88 e1       	ldi	r24, 0x18	; 24
     46c:	93 e0       	ldi	r25, 0x03	; 3
     46e:	0e 94 42 11 	call	0x2284	; 0x2284 <_ZN7RH_RF6916setEncryptionKeyEPh>
  


  Serial1.print("RFM69 radio @");  Serial1.print((int)RF69_FREQ);  Serial1.println(" MHz");
     472:	66 e9       	ldi	r22, 0x96	; 150
     474:	71 e0       	ldi	r23, 0x01	; 1
     476:	8b e7       	ldi	r24, 0x7B	; 123
     478:	93 e0       	ldi	r25, 0x03	; 3
     47a:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN5Print5printEPKc>
     47e:	4a e0       	ldi	r20, 0x0A	; 10
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	62 eb       	ldi	r22, 0xB2	; 178
     484:	71 e0       	ldi	r23, 0x01	; 1
     486:	8b e7       	ldi	r24, 0x7B	; 123
     488:	93 e0       	ldi	r25, 0x03	; 3
     48a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN5Print5printEii>
     48e:	64 ea       	ldi	r22, 0xA4	; 164
     490:	71 e0       	ldi	r23, 0x01	; 1
     492:	8b e7       	ldi	r24, 0x7B	; 123
     494:	93 e0       	ldi	r25, 0x03	; 3
     496:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN5Print7printlnEPKc>
}
     49a:	60 96       	adiw	r28, 0x10	; 16
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	08 95       	ret

000004b0 <loop>:


void loop() {
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	c3 55       	subi	r28, 0x53	; 83
     4ba:	d1 09       	sbc	r29, r1
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	f8 94       	cli
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	cd bf       	out	0x3d, r28	; 61
 if (rf69.available()) {
     4c6:	88 e1       	ldi	r24, 0x18	; 24
     4c8:	93 e0       	ldi	r25, 0x03	; 3
     4ca:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <_ZN7RH_RF699availableEv>
     4ce:	88 23       	and	r24, r24
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <loop+0x24>
     4d2:	a1 c0       	rjmp	.+322    	; 0x616 <loop+0x166>
    // Should be a message for us now   
    uint8_t buf[RH_RF69_MAX_MESSAGE_LEN];
    uint8_t len = sizeof(buf);
     4d4:	8c e3       	ldi	r24, 0x3C	; 60
     4d6:	64 96       	adiw	r28, 0x14	; 20
     4d8:	8f af       	std	Y+63, r24	; 0x3f
     4da:	64 97       	sbiw	r28, 0x14	; 20
    if (rf69.recv(buf, &len)) {
     4dc:	ae 01       	movw	r20, r28
     4de:	4d 5a       	subi	r20, 0xAD	; 173
     4e0:	5f 4f       	sbci	r21, 0xFF	; 255
     4e2:	be 01       	movw	r22, r28
     4e4:	6f 5f       	subi	r22, 0xFF	; 255
     4e6:	7f 4f       	sbci	r23, 0xFF	; 255
     4e8:	88 e1       	ldi	r24, 0x18	; 24
     4ea:	93 e0       	ldi	r25, 0x03	; 3
     4ec:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <_ZN7RH_RF694recvEPhS0_>
     4f0:	88 23       	and	r24, r24
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <loop+0x46>
     4f4:	8a c0       	rjmp	.+276    	; 0x60a <loop+0x15a>
      if (!len) return;
     4f6:	64 96       	adiw	r28, 0x14	; 20
     4f8:	8f ad       	ldd	r24, Y+63	; 0x3f
     4fa:	64 97       	sbiw	r28, 0x14	; 20
     4fc:	88 23       	and	r24, r24
     4fe:	09 f4       	brne	.+2      	; 0x502 <loop+0x52>
     500:	8a c0       	rjmp	.+276    	; 0x616 <loop+0x166>
      buf[len] = 0;
     502:	e1 e0       	ldi	r30, 0x01	; 1
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	ec 0f       	add	r30, r28
     508:	fd 1f       	adc	r31, r29
     50a:	e8 0f       	add	r30, r24
     50c:	f1 1d       	adc	r31, r1
     50e:	10 82       	st	Z, r1
      Serial1.print("Received [");
     510:	69 ea       	ldi	r22, 0xA9	; 169
     512:	71 e0       	ldi	r23, 0x01	; 1
     514:	8b e7       	ldi	r24, 0x7B	; 123
     516:	93 e0       	ldi	r25, 0x03	; 3
     518:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN5Print5printEPKc>
      Serial1.print(len);
     51c:	4a e0       	ldi	r20, 0x0A	; 10
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	64 96       	adiw	r28, 0x14	; 20
     522:	6f ad       	ldd	r22, Y+63	; 0x3f
     524:	64 97       	sbiw	r28, 0x14	; 20
     526:	8b e7       	ldi	r24, 0x7B	; 123
     528:	93 e0       	ldi	r25, 0x03	; 3
     52a:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN5Print5printEhi>
      Serial1.print("]: ");
     52e:	64 eb       	ldi	r22, 0xB4	; 180
     530:	71 e0       	ldi	r23, 0x01	; 1
     532:	8b e7       	ldi	r24, 0x7B	; 123
     534:	93 e0       	ldi	r25, 0x03	; 3
     536:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN5Print5printEPKc>
      Serial1.println((char*)buf);
     53a:	be 01       	movw	r22, r28
     53c:	6f 5f       	subi	r22, 0xFF	; 255
     53e:	7f 4f       	sbci	r23, 0xFF	; 255
     540:	8b e7       	ldi	r24, 0x7B	; 123
     542:	93 e0       	ldi	r25, 0x03	; 3
     544:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN5Print7printlnEPKc>
      Serial1.print("RSSI: ");
     548:	68 eb       	ldi	r22, 0xB8	; 184
     54a:	71 e0       	ldi	r23, 0x01	; 1
     54c:	8b e7       	ldi	r24, 0x7B	; 123
     54e:	93 e0       	ldi	r25, 0x03	; 3
     550:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN5Print5printEPKc>
      Serial1.println(rf69.lastRssi(), DEC);
     554:	88 e1       	ldi	r24, 0x18	; 24
     556:	93 e0       	ldi	r25, 0x03	; 3
     558:	0e 94 25 0c 	call	0x184a	; 0x184a <_ZN15RHGenericDriver8lastRssiEv>
     55c:	4a e0       	ldi	r20, 0x0A	; 10
     55e:	50 e0       	ldi	r21, 0x00	; 0
     560:	bc 01       	movw	r22, r24
     562:	8b e7       	ldi	r24, 0x7B	; 123
     564:	93 e0       	ldi	r25, 0x03	; 3
     566:	0e 94 01 06 	call	0xc02	; 0xc02 <_ZN5Print7printlnEii>

      if (strstr((char *)buf, "Hello World")) {
     56a:	6f eb       	ldi	r22, 0xBF	; 191
     56c:	71 e0       	ldi	r23, 0x01	; 1
     56e:	ce 01       	movw	r24, r28
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	0e 94 04 19 	call	0x3208	; 0x3208 <strstr>
     576:	89 2b       	or	r24, r25
     578:	09 f4       	brne	.+2      	; 0x57c <loop+0xcc>
     57a:	4d c0       	rjmp	.+154    	; 0x616 <loop+0x166>
        // Send a reply!
        uint8_t data[] = "And hello back to you";
     57c:	86 e1       	ldi	r24, 0x16	; 22
     57e:	e7 ee       	ldi	r30, 0xE7	; 231
     580:	f1 e0       	ldi	r31, 0x01	; 1
     582:	de 01       	movw	r26, r28
     584:	dd 96       	adiw	r26, 0x3d	; 61
     586:	01 90       	ld	r0, Z+
     588:	0d 92       	st	X+, r0
     58a:	8a 95       	dec	r24
     58c:	e1 f7       	brne	.-8      	; 0x586 <loop+0xd6>
        rf69.send(data, sizeof(data));
     58e:	46 e1       	ldi	r20, 0x16	; 22
     590:	be 01       	movw	r22, r28
     592:	63 5c       	subi	r22, 0xC3	; 195
     594:	7f 4f       	sbci	r23, 0xFF	; 255
     596:	88 e1       	ldi	r24, 0x18	; 24
     598:	93 e0       	ldi	r25, 0x03	; 3
     59a:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <_ZN7RH_RF694sendEPKhh>
        rf69.waitPacketSent();
     59e:	88 e1       	ldi	r24, 0x18	; 24
     5a0:	93 e0       	ldi	r25, 0x03	; 3
     5a2:	0e 94 4f 0c 	call	0x189e	; 0x189e <_ZN15RHGenericDriver14waitPacketSentEv>
        Serial1.println("Sent a reply");
     5a6:	6b ec       	ldi	r22, 0xCB	; 203
     5a8:	71 e0       	ldi	r23, 0x01	; 1
     5aa:	8b e7       	ldi	r24, 0x7B	; 123
     5ac:	93 e0       	ldi	r25, 0x03	; 3
     5ae:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN5Print7printlnEPKc>
        
        digitalWrite(LED_1,HIGH);
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	88 e0       	ldi	r24, 0x08	; 8
     5b6:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ba:	2f ef       	ldi	r18, 0xFF	; 255
     5bc:	81 ee       	ldi	r24, 0xE1	; 225
     5be:	94 e0       	ldi	r25, 0x04	; 4
     5c0:	21 50       	subi	r18, 0x01	; 1
     5c2:	80 40       	sbci	r24, 0x00	; 0
     5c4:	90 40       	sbci	r25, 0x00	; 0
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <loop+0x110>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <loop+0x11a>
     5ca:	00 00       	nop
        _delay_ms(100);
        digitalWrite(LED_2,HIGH);
     5cc:	61 e0       	ldi	r22, 0x01	; 1
     5ce:	89 e0       	ldi	r24, 0x09	; 9
     5d0:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
     5d4:	2f ef       	ldi	r18, 0xFF	; 255
     5d6:	81 ee       	ldi	r24, 0xE1	; 225
     5d8:	94 e0       	ldi	r25, 0x04	; 4
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	80 40       	sbci	r24, 0x00	; 0
     5de:	90 40       	sbci	r25, 0x00	; 0
     5e0:	e1 f7       	brne	.-8      	; 0x5da <loop+0x12a>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <loop+0x134>
     5e4:	00 00       	nop
        _delay_ms(100);
        digitalWrite(LED_1,LOW);
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	88 e0       	ldi	r24, 0x08	; 8
     5ea:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
     5ee:	2f ef       	ldi	r18, 0xFF	; 255
     5f0:	81 ee       	ldi	r24, 0xE1	; 225
     5f2:	94 e0       	ldi	r25, 0x04	; 4
     5f4:	21 50       	subi	r18, 0x01	; 1
     5f6:	80 40       	sbci	r24, 0x00	; 0
     5f8:	90 40       	sbci	r25, 0x00	; 0
     5fa:	e1 f7       	brne	.-8      	; 0x5f4 <loop+0x144>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <loop+0x14e>
     5fe:	00 00       	nop
        _delay_ms(100);
        digitalWrite(LED_2,LOW);
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	89 e0       	ldi	r24, 0x09	; 9
     604:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
     608:	06 c0       	rjmp	.+12     	; 0x616 <loop+0x166>
        
      }
    } else {
      Serial1.println("Receive failed");
     60a:	68 ed       	ldi	r22, 0xD8	; 216
     60c:	71 e0       	ldi	r23, 0x01	; 1
     60e:	8b e7       	ldi	r24, 0x7B	; 123
     610:	93 e0       	ldi	r25, 0x03	; 3
     612:	0e 94 43 05 	call	0xa86	; 0xa86 <_ZN5Print7printlnEPKc>
    }
  }
}
     616:	cd 5a       	subi	r28, 0xAD	; 173
     618:	df 4f       	sbci	r29, 0xFF	; 255
     61a:	0f b6       	in	r0, 0x3f	; 63
     61c:	f8 94       	cli
     61e:	de bf       	out	0x3e, r29	; 62
     620:	0f be       	out	0x3f, r0	; 63
     622:	cd bf       	out	0x3d, r28	; 61
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	08 95       	ret

0000062a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     62a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     62c:	91 8d       	ldd	r25, Z+25	; 0x19
     62e:	22 8d       	ldd	r18, Z+26	; 0x1a
     630:	89 2f       	mov	r24, r25
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	80 5c       	subi	r24, 0xC0	; 192
     636:	9f 4f       	sbci	r25, 0xFF	; 255
     638:	82 1b       	sub	r24, r18
     63a:	91 09       	sbc	r25, r1
}
     63c:	8f 73       	andi	r24, 0x3F	; 63
     63e:	99 27       	eor	r25, r25
     640:	08 95       	ret

00000642 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     642:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     644:	91 8d       	ldd	r25, Z+25	; 0x19
     646:	82 8d       	ldd	r24, Z+26	; 0x1a
     648:	98 17       	cp	r25, r24
     64a:	31 f0       	breq	.+12     	; 0x658 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     64c:	82 8d       	ldd	r24, Z+26	; 0x1a
     64e:	e8 0f       	add	r30, r24
     650:	f1 1d       	adc	r31, r1
     652:	85 8d       	ldd	r24, Z+29	; 0x1d
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     658:	8f ef       	ldi	r24, 0xFF	; 255
     65a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     65c:	08 95       	ret

0000065e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     65e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     660:	91 8d       	ldd	r25, Z+25	; 0x19
     662:	82 8d       	ldd	r24, Z+26	; 0x1a
     664:	98 17       	cp	r25, r24
     666:	61 f0       	breq	.+24     	; 0x680 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     668:	82 8d       	ldd	r24, Z+26	; 0x1a
     66a:	df 01       	movw	r26, r30
     66c:	a8 0f       	add	r26, r24
     66e:	b1 1d       	adc	r27, r1
     670:	5d 96       	adiw	r26, 0x1d	; 29
     672:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     674:	92 8d       	ldd	r25, Z+26	; 0x1a
     676:	9f 5f       	subi	r25, 0xFF	; 255
     678:	9f 73       	andi	r25, 0x3F	; 63
     67a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     680:	8f ef       	ldi	r24, 0xFF	; 255
     682:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     684:	08 95       	ret

00000686 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     686:	fc 01       	movw	r30, r24
     688:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     68a:	44 8d       	ldd	r20, Z+28	; 0x1c
     68c:	25 2f       	mov	r18, r21
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	84 2f       	mov	r24, r20
     692:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     694:	82 1b       	sub	r24, r18
     696:	93 0b       	sbc	r25, r19
     698:	54 17       	cp	r21, r20
     69a:	10 f0       	brcs	.+4      	; 0x6a0 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     69c:	cf 96       	adiw	r24, 0x3f	; 63
     69e:	08 95       	ret
  return tail - head - 1;
     6a0:	01 97       	sbiw	r24, 0x01	; 1
}
     6a2:	08 95       	ret

000006a4 <_Z14serialEventRunv>:
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     6a4:	8c ea       	ldi	r24, 0xAC	; 172
     6a6:	94 e0       	ldi	r25, 0x04	; 4
     6a8:	89 2b       	or	r24, r25
     6aa:	49 f0       	breq	.+18     	; 0x6be <_Z14serialEventRunv+0x1a>
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	89 2b       	or	r24, r25
     6b2:	29 f0       	breq	.+10     	; 0x6be <_Z14serialEventRunv+0x1a>
     6b4:	0e 94 ac 04 	call	0x958	; 0x958 <_Z17Serial1_availablev>
     6b8:	81 11       	cpse	r24, r1
     6ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     6be:	08 95       	ret

000006c0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     6c0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     6c2:	84 8d       	ldd	r24, Z+28	; 0x1c
     6c4:	df 01       	movw	r26, r30
     6c6:	a8 0f       	add	r26, r24
     6c8:	b1 1d       	adc	r27, r1
     6ca:	a3 5a       	subi	r26, 0xA3	; 163
     6cc:	bf 4f       	sbci	r27, 0xFF	; 255
     6ce:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     6d0:	84 8d       	ldd	r24, Z+28	; 0x1c
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	01 96       	adiw	r24, 0x01	; 1
     6d6:	8f 73       	andi	r24, 0x3F	; 63
     6d8:	99 27       	eor	r25, r25
     6da:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     6dc:	a6 89       	ldd	r26, Z+22	; 0x16
     6de:	b7 89       	ldd	r27, Z+23	; 0x17
     6e0:	2c 93       	st	X, r18
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     6e2:	a0 89       	ldd	r26, Z+16	; 0x10
     6e4:	b1 89       	ldd	r27, Z+17	; 0x11
     6e6:	8c 91       	ld	r24, X
     6e8:	82 74       	andi	r24, 0x42	; 66
     6ea:	8c 93       	st	X, r24
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     6ec:	93 8d       	ldd	r25, Z+27	; 0x1b
     6ee:	84 8d       	ldd	r24, Z+28	; 0x1c
     6f0:	98 13       	cpse	r25, r24
     6f2:	06 c0       	rjmp	.+12     	; 0x700 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     6f4:	02 88       	ldd	r0, Z+18	; 0x12
     6f6:	f3 89       	ldd	r31, Z+19	; 0x13
     6f8:	e0 2d       	mov	r30, r0
     6fa:	80 81       	ld	r24, Z
     6fc:	8f 7d       	andi	r24, 0xDF	; 223
     6fe:	80 83       	st	Z, r24
     700:	08 95       	ret

00000702 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	ec 01       	movw	r28, r24
  _written = true;
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     714:	9b 8d       	ldd	r25, Y+27	; 0x1b
     716:	8c 8d       	ldd	r24, Y+28	; 0x1c
     718:	98 13       	cpse	r25, r24
     71a:	05 c0       	rjmp	.+10     	; 0x726 <_ZN14HardwareSerial5writeEh+0x24>
     71c:	e8 89       	ldd	r30, Y+16	; 0x10
     71e:	f9 89       	ldd	r31, Y+17	; 0x11
     720:	80 81       	ld	r24, Z
     722:	85 fd       	sbrc	r24, 5
     724:	26 c0       	rjmp	.+76     	; 0x772 <_ZN14HardwareSerial5writeEh+0x70>
     726:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     728:	0b 8d       	ldd	r16, Y+27	; 0x1b
     72a:	10 e0       	ldi	r17, 0x00	; 0
     72c:	0f 5f       	subi	r16, 0xFF	; 255
     72e:	1f 4f       	sbci	r17, 0xFF	; 255
     730:	0f 73       	andi	r16, 0x3F	; 63
     732:	11 27       	eor	r17, r17
     734:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     736:	8c 8d       	ldd	r24, Y+28	; 0x1c
     738:	e8 12       	cpse	r14, r24
     73a:	0c c0       	rjmp	.+24     	; 0x754 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	07 fc       	sbrc	r0, 7
     740:	fa cf       	rjmp	.-12     	; 0x736 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     742:	e8 89       	ldd	r30, Y+16	; 0x10
     744:	f9 89       	ldd	r31, Y+17	; 0x11
     746:	80 81       	ld	r24, Z
     748:	85 ff       	sbrs	r24, 5
     74a:	f5 cf       	rjmp	.-22     	; 0x736 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     74c:	ce 01       	movw	r24, r28
     74e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     752:	f1 cf       	rjmp	.-30     	; 0x736 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     754:	8b 8d       	ldd	r24, Y+27	; 0x1b
     756:	fe 01       	movw	r30, r28
     758:	e8 0f       	add	r30, r24
     75a:	f1 1d       	adc	r31, r1
     75c:	e3 5a       	subi	r30, 0xA3	; 163
     75e:	ff 4f       	sbci	r31, 0xFF	; 255
     760:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     762:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     764:	f8 94       	cli
    _tx_buffer_head = i;
     766:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     768:	ea 89       	ldd	r30, Y+18	; 0x12
     76a:	fb 89       	ldd	r31, Y+19	; 0x13
     76c:	80 81       	ld	r24, Z
     76e:	80 62       	ori	r24, 0x20	; 32
     770:	09 c0       	rjmp	.+18     	; 0x784 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     772:	9f b7       	in	r25, 0x3f	; 63
     774:	f8 94       	cli
      *_udr = c;
     776:	ee 89       	ldd	r30, Y+22	; 0x16
     778:	ff 89       	ldd	r31, Y+23	; 0x17
     77a:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     77c:	e8 89       	ldd	r30, Y+16	; 0x10
     77e:	f9 89       	ldd	r31, Y+17	; 0x11
     780:	80 81       	ld	r24, Z
     782:	82 74       	andi	r24, 0x42	; 66
     784:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     786:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	1f 91       	pop	r17
     792:	0f 91       	pop	r16
     794:	ff 90       	pop	r15
     796:	ef 90       	pop	r14
     798:	08 95       	ret

0000079a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     7a0:	88 8d       	ldd	r24, Y+24	; 0x18
     7a2:	88 23       	and	r24, r24
     7a4:	c9 f0       	breq	.+50     	; 0x7d8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     7a6:	ea 89       	ldd	r30, Y+18	; 0x12
     7a8:	fb 89       	ldd	r31, Y+19	; 0x13
     7aa:	80 81       	ld	r24, Z
     7ac:	85 fd       	sbrc	r24, 5
     7ae:	05 c0       	rjmp	.+10     	; 0x7ba <_ZN14HardwareSerial5flushEv+0x20>
     7b0:	a8 89       	ldd	r26, Y+16	; 0x10
     7b2:	b9 89       	ldd	r27, Y+17	; 0x11
     7b4:	8c 91       	ld	r24, X
     7b6:	86 fd       	sbrc	r24, 6
     7b8:	0f c0       	rjmp	.+30     	; 0x7d8 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	07 fc       	sbrc	r0, 7
     7be:	f5 cf       	rjmp	.-22     	; 0x7aa <_ZN14HardwareSerial5flushEv+0x10>
     7c0:	80 81       	ld	r24, Z
     7c2:	85 ff       	sbrs	r24, 5
     7c4:	f2 cf       	rjmp	.-28     	; 0x7aa <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     7c6:	a8 89       	ldd	r26, Y+16	; 0x10
     7c8:	b9 89       	ldd	r27, Y+17	; 0x11
     7ca:	8c 91       	ld	r24, X
     7cc:	85 ff       	sbrs	r24, 5
     7ce:	ed cf       	rjmp	.-38     	; 0x7aa <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     7d0:	ce 01       	movw	r24, r28
     7d2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     7d6:	e7 cf       	rjmp	.-50     	; 0x7a6 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	1f 93       	push	r17
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	ec 01       	movw	r28, r24
     7ee:	6a 01       	movw	r12, r20
     7f0:	7b 01       	movw	r14, r22
     7f2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     7f4:	e8 89       	ldd	r30, Y+16	; 0x10
     7f6:	f9 89       	ldd	r31, Y+17	; 0x11
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     7fc:	41 15       	cp	r20, r1
     7fe:	51 4e       	sbci	r21, 0xE1	; 225
     800:	61 05       	cpc	r22, r1
     802:	71 05       	cpc	r23, r1
     804:	b1 f0       	breq	.+44     	; 0x832 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	79 e0       	ldi	r23, 0x09	; 9
     80a:	8d e3       	ldi	r24, 0x3D	; 61
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	a7 01       	movw	r20, r14
     810:	96 01       	movw	r18, r12
     812:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__udivmodsi4>
     816:	da 01       	movw	r26, r20
     818:	c9 01       	movw	r24, r18
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	a1 09       	sbc	r26, r1
     81e:	b1 09       	sbc	r27, r1
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     82a:	21 15       	cp	r18, r1
     82c:	80 e1       	ldi	r24, 0x10	; 16
     82e:	38 07       	cpc	r19, r24
     830:	a8 f0       	brcs	.+42     	; 0x85c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     832:	e8 89       	ldd	r30, Y+16	; 0x10
     834:	f9 89       	ldd	r31, Y+17	; 0x11
     836:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     838:	60 e8       	ldi	r22, 0x80	; 128
     83a:	74 e8       	ldi	r23, 0x84	; 132
     83c:	8e e1       	ldi	r24, 0x1E	; 30
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	a7 01       	movw	r20, r14
     842:	96 01       	movw	r18, r12
     844:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__udivmodsi4>
     848:	da 01       	movw	r26, r20
     84a:	c9 01       	movw	r24, r18
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	a1 09       	sbc	r26, r1
     850:	b1 09       	sbc	r27, r1
     852:	b6 95       	lsr	r27
     854:	a7 95       	ror	r26
     856:	97 95       	ror	r25
     858:	87 95       	ror	r24
     85a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     85c:	ec 85       	ldd	r30, Y+12	; 0x0c
     85e:	fd 85       	ldd	r31, Y+13	; 0x0d
     860:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     862:	ee 85       	ldd	r30, Y+14	; 0x0e
     864:	ff 85       	ldd	r31, Y+15	; 0x0f
     866:	20 83       	st	Z, r18

  _written = false;
     868:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     86a:	ec 89       	ldd	r30, Y+20	; 0x14
     86c:	fd 89       	ldd	r31, Y+21	; 0x15
     86e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     870:	ea 89       	ldd	r30, Y+18	; 0x12
     872:	fb 89       	ldd	r31, Y+19	; 0x13
     874:	80 81       	ld	r24, Z
     876:	80 61       	ori	r24, 0x10	; 16
     878:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     87a:	ea 89       	ldd	r30, Y+18	; 0x12
     87c:	fb 89       	ldd	r31, Y+19	; 0x13
     87e:	80 81       	ld	r24, Z
     880:	88 60       	ori	r24, 0x08	; 8
     882:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     884:	ea 89       	ldd	r30, Y+18	; 0x12
     886:	fb 89       	ldd	r31, Y+19	; 0x13
     888:	80 81       	ld	r24, Z
     88a:	80 68       	ori	r24, 0x80	; 128
     88c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     88e:	ea 89       	ldd	r30, Y+18	; 0x12
     890:	fb 89       	ldd	r31, Y+19	; 0x13
     892:	80 81       	ld	r24, Z
     894:	8f 7d       	andi	r24, 0xDF	; 223
     896:	80 83       	st	Z, r24
}
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	ff 90       	pop	r15
     8a0:	ef 90       	pop	r14
     8a2:	df 90       	pop	r13
     8a4:	cf 90       	pop	r12
     8a6:	08 95       	ret

000008a8 <__vector_25>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     8a8:	1f 92       	push	r1
     8aa:	0f 92       	push	r0
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	0f 92       	push	r0
     8b0:	11 24       	eor	r1, r1
     8b2:	2f 93       	push	r18
     8b4:	8f 93       	push	r24
     8b6:	9f 93       	push	r25
     8b8:	ef 93       	push	r30
     8ba:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     8bc:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <Serial1+0x10>
     8c0:	f0 91 8c 03 	lds	r31, 0x038C	; 0x80038c <Serial1+0x11>
     8c4:	80 81       	ld	r24, Z
     8c6:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <Serial1+0x16>
     8ca:	f0 91 92 03 	lds	r31, 0x0392	; 0x800392 <Serial1+0x17>
     8ce:	82 fd       	sbrc	r24, 2
     8d0:	12 c0       	rjmp	.+36     	; 0x8f6 <__vector_25+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     8d2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     8d4:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <Serial1+0x19>
     8d8:	8f 5f       	subi	r24, 0xFF	; 255
     8da:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     8dc:	20 91 95 03 	lds	r18, 0x0395	; 0x800395 <Serial1+0x1a>
     8e0:	82 17       	cp	r24, r18
     8e2:	51 f0       	breq	.+20     	; 0x8f8 <__vector_25+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     8e4:	e0 91 94 03 	lds	r30, 0x0394	; 0x800394 <Serial1+0x19>
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	e5 58       	subi	r30, 0x85	; 133
     8ec:	fc 4f       	sbci	r31, 0xFC	; 252
     8ee:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     8f0:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <Serial1+0x19>
     8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <__vector_25+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     8f6:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
     8f8:	ff 91       	pop	r31
     8fa:	ef 91       	pop	r30
     8fc:	9f 91       	pop	r25
     8fe:	8f 91       	pop	r24
     900:	2f 91       	pop	r18
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0
     908:	1f 90       	pop	r1
     90a:	18 95       	reti

0000090c <__vector_26>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     90c:	1f 92       	push	r1
     90e:	0f 92       	push	r0
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	0f 92       	push	r0
     914:	11 24       	eor	r1, r1
     916:	2f 93       	push	r18
     918:	3f 93       	push	r19
     91a:	4f 93       	push	r20
     91c:	5f 93       	push	r21
     91e:	6f 93       	push	r22
     920:	7f 93       	push	r23
     922:	8f 93       	push	r24
     924:	9f 93       	push	r25
     926:	af 93       	push	r26
     928:	bf 93       	push	r27
     92a:	ef 93       	push	r30
     92c:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
     92e:	8b e7       	ldi	r24, 0x7B	; 123
     930:	93 e0       	ldi	r25, 0x03	; 3
     932:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     936:	ff 91       	pop	r31
     938:	ef 91       	pop	r30
     93a:	bf 91       	pop	r27
     93c:	af 91       	pop	r26
     93e:	9f 91       	pop	r25
     940:	8f 91       	pop	r24
     942:	7f 91       	pop	r23
     944:	6f 91       	pop	r22
     946:	5f 91       	pop	r21
     948:	4f 91       	pop	r20
     94a:	3f 91       	pop	r19
     94c:	2f 91       	pop	r18
     94e:	0f 90       	pop	r0
     950:	0f be       	out	0x3f, r0	; 63
     952:	0f 90       	pop	r0
     954:	1f 90       	pop	r1
     956:	18 95       	reti

00000958 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
     958:	8b e7       	ldi	r24, 0x7B	; 123
     95a:	93 e0       	ldi	r25, 0x03	; 3
     95c:	0e 94 15 03 	call	0x62a	; 0x62a <_ZN14HardwareSerial9availableEv>
     960:	21 e0       	ldi	r18, 0x01	; 1
     962:	89 2b       	or	r24, r25
     964:	09 f4       	brne	.+2      	; 0x968 <_Z17Serial1_availablev+0x10>
     966:	20 e0       	ldi	r18, 0x00	; 0
}
     968:	82 2f       	mov	r24, r18
     96a:	08 95       	ret

0000096c <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     96c:	eb e7       	ldi	r30, 0x7B	; 123
     96e:	f3 e0       	ldi	r31, 0x03	; 3
     970:	13 82       	std	Z+3, r1	; 0x03
     972:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     974:	88 ee       	ldi	r24, 0xE8	; 232
     976:	93 e0       	ldi	r25, 0x03	; 3
     978:	a0 e0       	ldi	r26, 0x00	; 0
     97a:	b0 e0       	ldi	r27, 0x00	; 0
     97c:	84 83       	std	Z+4, r24	; 0x04
     97e:	95 83       	std	Z+5, r25	; 0x05
     980:	a6 83       	std	Z+6, r26	; 0x06
     982:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	92 e0       	ldi	r25, 0x02	; 2
     988:	91 83       	std	Z+1, r25	; 0x01
     98a:	80 83       	st	Z, r24
     98c:	8d ec       	ldi	r24, 0xCD	; 205
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	95 87       	std	Z+13, r25	; 0x0d
     992:	84 87       	std	Z+12, r24	; 0x0c
     994:	8c ec       	ldi	r24, 0xCC	; 204
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	97 87       	std	Z+15, r25	; 0x0f
     99a:	86 87       	std	Z+14, r24	; 0x0e
     99c:	88 ec       	ldi	r24, 0xC8	; 200
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	91 8b       	std	Z+17, r25	; 0x11
     9a2:	80 8b       	std	Z+16, r24	; 0x10
     9a4:	89 ec       	ldi	r24, 0xC9	; 201
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	93 8b       	std	Z+19, r25	; 0x13
     9aa:	82 8b       	std	Z+18, r24	; 0x12
     9ac:	8a ec       	ldi	r24, 0xCA	; 202
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	95 8b       	std	Z+21, r25	; 0x15
     9b2:	84 8b       	std	Z+20, r24	; 0x14
     9b4:	8e ec       	ldi	r24, 0xCE	; 206
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	97 8b       	std	Z+23, r25	; 0x17
     9ba:	86 8b       	std	Z+22, r24	; 0x16
     9bc:	11 8e       	std	Z+25, r1	; 0x19
     9be:	12 8e       	std	Z+26, r1	; 0x1a
     9c0:	13 8e       	std	Z+27, r1	; 0x1b
     9c2:	14 8e       	std	Z+28, r1	; 0x1c
     9c4:	08 95       	ret

000009c6 <initVariant>:
     9c6:	08 95       	ret

000009c8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     9c8:	0e 94 03 0b 	call	0x1606	; 0x1606 <init>

	initVariant();
     9cc:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
     9d0:	88 e1       	ldi	r24, 0x18	; 24
     9d2:	94 e0       	ldi	r25, 0x04	; 4
     9d4:	0e 94 39 0a 	call	0x1472	; 0x1472 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
     9d8:	0e 94 af 01 	call	0x35e	; 0x35e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     9dc:	c2 e5       	ldi	r28, 0x52	; 82
     9de:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
     9e0:	0e 94 58 02 	call	0x4b0	; 0x4b0 <loop>
		if (serialEventRun) serialEventRun();
     9e4:	20 97       	sbiw	r28, 0x00	; 0
     9e6:	e1 f3       	breq	.-8      	; 0x9e0 <main+0x18>
     9e8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_Z14serialEventRunv>
     9ec:	f9 cf       	rjmp	.-14     	; 0x9e0 <main+0x18>

000009ee <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	6c 01       	movw	r12, r24
     a00:	7a 01       	movw	r14, r20
     a02:	8b 01       	movw	r16, r22
     a04:	c0 e0       	ldi	r28, 0x00	; 0
     a06:	d0 e0       	ldi	r29, 0x00	; 0
     a08:	ce 15       	cp	r28, r14
     a0a:	df 05       	cpc	r29, r15
     a0c:	81 f0       	breq	.+32     	; 0xa2e <__DATA_REGION_LENGTH__+0x2e>
     a0e:	d8 01       	movw	r26, r16
     a10:	6d 91       	ld	r22, X+
     a12:	8d 01       	movw	r16, r26
     a14:	d6 01       	movw	r26, r12
     a16:	ed 91       	ld	r30, X+
     a18:	fc 91       	ld	r31, X
     a1a:	01 90       	ld	r0, Z+
     a1c:	f0 81       	ld	r31, Z
     a1e:	e0 2d       	mov	r30, r0
     a20:	c6 01       	movw	r24, r12
     a22:	09 95       	icall
     a24:	89 2b       	or	r24, r25
     a26:	11 f0       	breq	.+4      	; 0xa2c <__DATA_REGION_LENGTH__+0x2c>
     a28:	21 96       	adiw	r28, 0x01	; 1
     a2a:	ee cf       	rjmp	.-36     	; 0xa08 <__DATA_REGION_LENGTH__+0x8>
     a2c:	7e 01       	movw	r14, r28
     a2e:	c7 01       	movw	r24, r14
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	ff 90       	pop	r15
     a3a:	ef 90       	pop	r14
     a3c:	df 90       	pop	r13
     a3e:	cf 90       	pop	r12
     a40:	08 95       	ret

00000a42 <_ZN5Print5writeEPKc>:
     a42:	61 15       	cp	r22, r1
     a44:	71 05       	cpc	r23, r1
     a46:	79 f0       	breq	.+30     	; 0xa66 <_ZN5Print5writeEPKc+0x24>
     a48:	fb 01       	movw	r30, r22
     a4a:	01 90       	ld	r0, Z+
     a4c:	00 20       	and	r0, r0
     a4e:	e9 f7       	brne	.-6      	; 0xa4a <_ZN5Print5writeEPKc+0x8>
     a50:	31 97       	sbiw	r30, 0x01	; 1
     a52:	af 01       	movw	r20, r30
     a54:	46 1b       	sub	r20, r22
     a56:	57 0b       	sbc	r21, r23
     a58:	dc 01       	movw	r26, r24
     a5a:	ed 91       	ld	r30, X+
     a5c:	fc 91       	ld	r31, X
     a5e:	02 80       	ldd	r0, Z+2	; 0x02
     a60:	f3 81       	ldd	r31, Z+3	; 0x03
     a62:	e0 2d       	mov	r30, r0
     a64:	09 94       	ijmp
     a66:	80 e0       	ldi	r24, 0x00	; 0
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	08 95       	ret

00000a6c <_ZN5Print5printEPKc>:
     a6c:	0c 94 21 05 	jmp	0xa42	; 0xa42 <_ZN5Print5writeEPKc>

00000a70 <_ZN5Print5printEc>:
     a70:	dc 01       	movw	r26, r24
     a72:	ed 91       	ld	r30, X+
     a74:	fc 91       	ld	r31, X
     a76:	01 90       	ld	r0, Z+
     a78:	f0 81       	ld	r31, Z
     a7a:	e0 2d       	mov	r30, r0
     a7c:	09 94       	ijmp

00000a7e <_ZN5Print7printlnEv>:
     a7e:	6f e0       	ldi	r22, 0x0F	; 15
     a80:	72 e0       	ldi	r23, 0x02	; 2
     a82:	0c 94 21 05 	jmp	0xa42	; 0xa42 <_ZN5Print5writeEPKc>

00000a86 <_ZN5Print7printlnEPKc>:
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	ec 01       	movw	r28, r24
     a90:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN5Print5writeEPKc>
     a94:	8c 01       	movw	r16, r24
     a96:	ce 01       	movw	r24, r28
     a98:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZN5Print7printlnEv>
     a9c:	80 0f       	add	r24, r16
     a9e:	91 1f       	adc	r25, r17
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	08 95       	ret

00000aaa <_ZN5Print11printNumberEmh>:
     aaa:	8f 92       	push	r8
     aac:	9f 92       	push	r9
     aae:	af 92       	push	r10
     ab0:	bf 92       	push	r11
     ab2:	ef 92       	push	r14
     ab4:	ff 92       	push	r15
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
     ac2:	a1 97       	sbiw	r28, 0x21	; 33
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	f8 94       	cli
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	cd bf       	out	0x3d, r28	; 61
     ace:	7c 01       	movw	r14, r24
     ad0:	fa 01       	movw	r30, r20
     ad2:	cb 01       	movw	r24, r22
     ad4:	19 a2       	std	Y+33, r1	; 0x21
     ad6:	22 30       	cpi	r18, 0x02	; 2
     ad8:	08 f4       	brcc	.+2      	; 0xadc <_ZN5Print11printNumberEmh+0x32>
     ada:	2a e0       	ldi	r18, 0x0A	; 10
     adc:	8e 01       	movw	r16, r28
     ade:	0f 5d       	subi	r16, 0xDF	; 223
     ae0:	1f 4f       	sbci	r17, 0xFF	; 255
     ae2:	82 2e       	mov	r8, r18
     ae4:	91 2c       	mov	r9, r1
     ae6:	a1 2c       	mov	r10, r1
     ae8:	b1 2c       	mov	r11, r1
     aea:	bf 01       	movw	r22, r30
     aec:	a5 01       	movw	r20, r10
     aee:	94 01       	movw	r18, r8
     af0:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__udivmodsi4>
     af4:	f9 01       	movw	r30, r18
     af6:	ca 01       	movw	r24, r20
     af8:	01 50       	subi	r16, 0x01	; 1
     afa:	11 09       	sbc	r17, r1
     afc:	6a 30       	cpi	r22, 0x0A	; 10
     afe:	10 f4       	brcc	.+4      	; 0xb04 <__stack+0x5>
     b00:	60 5d       	subi	r22, 0xD0	; 208
     b02:	01 c0       	rjmp	.+2      	; 0xb06 <__stack+0x7>
     b04:	69 5c       	subi	r22, 0xC9	; 201
     b06:	d8 01       	movw	r26, r16
     b08:	6c 93       	st	X, r22
     b0a:	23 2b       	or	r18, r19
     b0c:	24 2b       	or	r18, r20
     b0e:	25 2b       	or	r18, r21
     b10:	61 f7       	brne	.-40     	; 0xaea <_ZN5Print11printNumberEmh+0x40>
     b12:	b8 01       	movw	r22, r16
     b14:	c7 01       	movw	r24, r14
     b16:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN5Print5writeEPKc>
     b1a:	a1 96       	adiw	r28, 0x21	; 33
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	f8 94       	cli
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	0f be       	out	0x3f, r0	; 63
     b24:	cd bf       	out	0x3d, r28	; 61
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	1f 91       	pop	r17
     b2c:	0f 91       	pop	r16
     b2e:	ff 90       	pop	r15
     b30:	ef 90       	pop	r14
     b32:	bf 90       	pop	r11
     b34:	af 90       	pop	r10
     b36:	9f 90       	pop	r9
     b38:	8f 90       	pop	r8
     b3a:	08 95       	ret

00000b3c <_ZN5Print5printEmi>:
     b3c:	21 15       	cp	r18, r1
     b3e:	31 05       	cpc	r19, r1
     b40:	41 f4       	brne	.+16     	; 0xb52 <_ZN5Print5printEmi+0x16>
     b42:	dc 01       	movw	r26, r24
     b44:	ed 91       	ld	r30, X+
     b46:	fc 91       	ld	r31, X
     b48:	01 90       	ld	r0, Z+
     b4a:	f0 81       	ld	r31, Z
     b4c:	e0 2d       	mov	r30, r0
     b4e:	64 2f       	mov	r22, r20
     b50:	09 94       	ijmp
     b52:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <_ZN5Print11printNumberEmh>

00000b56 <_ZN5Print5printEhi>:
     b56:	9a 01       	movw	r18, r20
     b58:	46 2f       	mov	r20, r22
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <_ZN5Print5printEmi>

00000b64 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     b64:	cf 92       	push	r12
     b66:	df 92       	push	r13
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
  if (base == 0) {
     b74:	21 15       	cp	r18, r1
     b76:	31 05       	cpc	r19, r1
     b78:	81 f4       	brne	.+32     	; 0xb9a <_ZN5Print5printEli+0x36>
    return write(n);
     b7a:	dc 01       	movw	r26, r24
     b7c:	ed 91       	ld	r30, X+
     b7e:	fc 91       	ld	r31, X
     b80:	01 90       	ld	r0, Z+
     b82:	f0 81       	ld	r31, Z
     b84:	e0 2d       	mov	r30, r0
     b86:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	df 90       	pop	r13
     b96:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     b98:	09 94       	ijmp
  } else if (base == 10) {
     b9a:	2a 30       	cpi	r18, 0x0A	; 10
     b9c:	31 05       	cpc	r19, r1
     b9e:	01 f5       	brne	.+64     	; 0xbe0 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     ba0:	77 ff       	sbrs	r23, 7
     ba2:	1d c0       	rjmp	.+58     	; 0xbde <_ZN5Print5printEli+0x7a>
     ba4:	6a 01       	movw	r12, r20
     ba6:	7b 01       	movw	r14, r22
     ba8:	ec 01       	movw	r28, r24
      int t = print('-');
     baa:	6d e2       	ldi	r22, 0x2D	; 45
     bac:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print5printEc>
     bb0:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     bb2:	44 27       	eor	r20, r20
     bb4:	55 27       	eor	r21, r21
     bb6:	ba 01       	movw	r22, r20
     bb8:	4c 19       	sub	r20, r12
     bba:	5d 09       	sbc	r21, r13
     bbc:	6e 09       	sbc	r22, r14
     bbe:	7f 09       	sbc	r23, r15
     bc0:	2a e0       	ldi	r18, 0x0A	; 10
     bc2:	ce 01       	movw	r24, r28
     bc4:	0e 94 55 05 	call	0xaaa	; 0xaaa <_ZN5Print11printNumberEmh>
     bc8:	80 0f       	add	r24, r16
     bca:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	ff 90       	pop	r15
     bd6:	ef 90       	pop	r14
     bd8:	df 90       	pop	r13
     bda:	cf 90       	pop	r12
     bdc:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     bde:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     bf0:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <_ZN5Print11printNumberEmh>

00000bf4 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     bf4:	9a 01       	movw	r18, r20
  return print((long) n, base);
     bf6:	ab 01       	movw	r20, r22
     bf8:	77 0f       	add	r23, r23
     bfa:	66 0b       	sbc	r22, r22
     bfc:	77 0b       	sbc	r23, r23
     bfe:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <_ZN5Print5printEli>

00000c02 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     c0c:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN5Print5printEii>
     c10:	8c 01       	movw	r16, r24
  n += println();
     c12:	ce 01       	movw	r24, r28
     c14:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZN5Print7printlnEv>
  return n;
}
     c18:	80 0f       	add	r24, r16
     c1a:	91 1f       	adc	r25, r17
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	08 95       	ret

00000c26 <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
     c26:	61 50       	subi	r22, 0x01	; 1
     c28:	30 f0       	brcs	.+12     	; 0xc36 <_ZL4RecvPVhh+0x10>
     c2a:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     c2e:	fc 01       	movw	r30, r24
     c30:	20 83       	st	Z, r18
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	f8 cf       	rjmp	.-16     	; 0xc26 <_ZL4RecvPVhh>
     c36:	28 98       	cbi	0x05, 0	; 5
     c38:	84 e6       	ldi	r24, 0x64	; 100
     c3a:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <RxLEDPulse>
     c3e:	08 95       	ret

00000c40 <_ZL11SendControlh>:
     c40:	40 91 1b 04 	lds	r20, 0x041B	; 0x80041b <_ZL6_cmark>
     c44:	50 91 1c 04 	lds	r21, 0x041C	; 0x80041c <_ZL6_cmark+0x1>
     c48:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <_ZL5_cend>
     c4c:	30 91 1a 04 	lds	r19, 0x041A	; 0x80041a <_ZL5_cend+0x1>
     c50:	42 17       	cp	r20, r18
     c52:	53 07       	cpc	r21, r19
     c54:	b4 f4       	brge	.+44     	; 0xc82 <_ZL11SendControlh+0x42>
     c56:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c5a:	95 70       	andi	r25, 0x05	; 5
     c5c:	e1 f3       	breq	.-8      	; 0xc56 <_ZL11SendControlh+0x16>
     c5e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c62:	92 fd       	sbrc	r25, 2
     c64:	19 c0       	rjmp	.+50     	; 0xc98 <_ZL11SendControlh+0x58>
     c66:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     c6a:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <_ZL6_cmark>
     c6e:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <_ZL6_cmark+0x1>
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	8f 73       	andi	r24, 0x3F	; 63
     c76:	99 27       	eor	r25, r25
     c78:	89 2b       	or	r24, r25
     c7a:	19 f4       	brne	.+6      	; 0xc82 <_ZL11SendControlh+0x42>
     c7c:	8e ef       	ldi	r24, 0xFE	; 254
     c7e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c82:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <_ZL6_cmark>
     c86:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <_ZL6_cmark+0x1>
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <_ZL6_cmark+0x1>
     c90:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <_ZL6_cmark>
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	08 95       	ret
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	08 95       	ret

00000c9c <_ZL24USB_SendStringDescriptorPKhhh>:
     c9c:	df 92       	push	r13
     c9e:	ef 92       	push	r14
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	d8 2e       	mov	r13, r24
     cac:	f9 2e       	mov	r15, r25
     cae:	e4 2e       	mov	r14, r20
     cb0:	06 2f       	mov	r16, r22
     cb2:	10 e0       	ldi	r17, 0x00	; 0
     cb4:	c8 01       	movw	r24, r16
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	88 0f       	add	r24, r24
     cba:	0e 94 20 06 	call	0xc40	; 0xc40 <_ZL11SendControlh>
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	0e 94 20 06 	call	0xc40	; 0xc40 <_ZL11SendControlh>
     cc4:	cd 2d       	mov	r28, r13
     cc6:	df 2d       	mov	r29, r15
     cc8:	0c 0f       	add	r16, r28
     cca:	1d 1f       	adc	r17, r29
     ccc:	c0 17       	cp	r28, r16
     cce:	d1 07       	cpc	r29, r17
     cd0:	89 f0       	breq	.+34     	; 0xcf4 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
     cd2:	e7 fe       	sbrs	r14, 7
     cd4:	03 c0       	rjmp	.+6      	; 0xcdc <_ZL24USB_SendStringDescriptorPKhhh+0x40>
     cd6:	fe 01       	movw	r30, r28
     cd8:	84 91       	lpm	r24, Z
     cda:	01 c0       	rjmp	.+2      	; 0xcde <_ZL24USB_SendStringDescriptorPKhhh+0x42>
     cdc:	88 81       	ld	r24, Y
     cde:	0e 94 20 06 	call	0xc40	; 0xc40 <_ZL11SendControlh>
     ce2:	f8 2e       	mov	r15, r24
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	0e 94 20 06 	call	0xc40	; 0xc40 <_ZL11SendControlh>
     cea:	8f 21       	and	r24, r15
     cec:	21 96       	adiw	r28, 0x01	; 1
     cee:	81 11       	cpse	r24, r1
     cf0:	ed cf       	rjmp	.-38     	; 0xccc <_ZL24USB_SendStringDescriptorPKhhh+0x30>
     cf2:	01 c0       	rjmp	.+2      	; 0xcf6 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	df 90       	pop	r13
     d04:	08 95       	ret

00000d06 <_ZL15USB_ClockEnablev>:
     d06:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
     d0a:	81 60       	ori	r24, 0x01	; 1
     d0c:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
     d10:	80 ea       	ldi	r24, 0xA0	; 160
     d12:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     d16:	89 b5       	in	r24, 0x29	; 41
     d18:	80 61       	ori	r24, 0x10	; 16
     d1a:	89 bd       	out	0x29, r24	; 41
     d1c:	89 b5       	in	r24, 0x29	; 41
     d1e:	82 60       	ori	r24, 0x02	; 2
     d20:	89 bd       	out	0x29, r24	; 41
     d22:	09 b4       	in	r0, 0x29	; 41
     d24:	00 fe       	sbrs	r0, 0
     d26:	fd cf       	rjmp	.-6      	; 0xd22 <_ZL15USB_ClockEnablev+0x1c>
     d28:	61 e0       	ldi	r22, 0x01	; 1
     d2a:	70 e0       	ldi	r23, 0x00	; 0
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	0e 94 c7 0a 	call	0x158e	; 0x158e <delay>
     d34:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     d38:	8f 7c       	andi	r24, 0xCF	; 207
     d3a:	80 61       	ori	r24, 0x10	; 16
     d3c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     d40:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     d44:	80 7f       	andi	r24, 0xF0	; 240
     d46:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     d4a:	08 95       	ret

00000d4c <_ZL14SendInterfacesv>:
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	1f 92       	push	r1
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	19 82       	std	Y+1, r1	; 0x01
     d58:	ce 01       	movw	r24, r28
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	0e 94 c6 12 	call	0x258c	; 0x258c <_Z16CDC_GetInterfacePh>
     d60:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <_Z12PluggableUSBv>
     d64:	be 01       	movw	r22, r28
     d66:	6f 5f       	subi	r22, 0xFF	; 255
     d68:	7f 4f       	sbci	r23, 0xFF	; 255
     d6a:	0e 94 75 13 	call	0x26ea	; 0x26ea <_ZN13PluggableUSB_12getInterfaceEPh>
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	0f 90       	pop	r0
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <_ZN6LockEPC1Eh>:
     d78:	2f b7       	in	r18, 0x3f	; 63
     d7a:	fc 01       	movw	r30, r24
     d7c:	20 83       	st	Z, r18
     d7e:	f8 94       	cli
     d80:	67 70       	andi	r22, 0x07	; 7
     d82:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     d86:	08 95       	ret

00000d88 <_Z13USB_Availableh>:
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	1f 92       	push	r1
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	68 2f       	mov	r22, r24
     d94:	ce 01       	movw	r24, r28
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	0e 94 bc 06 	call	0xd78	; 0xd78 <_ZN6LockEPC1Eh>
     d9c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     da0:	99 81       	ldd	r25, Y+1	; 0x01
     da2:	9f bf       	out	0x3f, r25	; 63
     da4:	0f 90       	pop	r0
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <_Z8USB_RecvhPvi>:
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	1f 92       	push	r1
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <_usbConfiguration>
     dc2:	99 23       	and	r25, r25
     dc4:	11 f0       	breq	.+4      	; 0xdca <_Z8USB_RecvhPvi+0x1e>
     dc6:	57 ff       	sbrs	r21, 7
     dc8:	03 c0       	rjmp	.+6      	; 0xdd0 <_Z8USB_RecvhPvi+0x24>
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	9f ef       	ldi	r25, 0xFF	; 255
     dce:	29 c0       	rjmp	.+82     	; 0xe22 <_Z8USB_RecvhPvi+0x76>
     dd0:	8a 01       	movw	r16, r20
     dd2:	7b 01       	movw	r14, r22
     dd4:	68 2f       	mov	r22, r24
     dd6:	ce 01       	movw	r24, r28
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	0e 94 bc 06 	call	0xd78	; 0xd78 <_ZN6LockEPC1Eh>
     dde:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	02 17       	cp	r16, r18
     de6:	13 07       	cpc	r17, r19
     de8:	0c f4       	brge	.+2      	; 0xdec <_Z8USB_RecvhPvi+0x40>
     dea:	98 01       	movw	r18, r16
     dec:	82 2f       	mov	r24, r18
     dee:	f7 01       	movw	r30, r14
     df0:	94 e6       	ldi	r25, 0x64	; 100
     df2:	81 50       	subi	r24, 0x01	; 1
     df4:	38 f0       	brcs	.+14     	; 0xe04 <_Z8USB_RecvhPvi+0x58>
     df6:	28 98       	cbi	0x05, 0	; 5
     df8:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <RxLEDPulse>
     dfc:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     e00:	41 93       	st	Z+, r20
     e02:	f7 cf       	rjmp	.-18     	; 0xdf2 <_Z8USB_RecvhPvi+0x46>
     e04:	21 15       	cp	r18, r1
     e06:	31 05       	cpc	r19, r1
     e08:	21 f0       	breq	.+8      	; 0xe12 <_Z8USB_RecvhPvi+0x66>
     e0a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     e0e:	88 23       	and	r24, r24
     e10:	21 f0       	breq	.+8      	; 0xe1a <_Z8USB_RecvhPvi+0x6e>
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	8f bf       	out	0x3f, r24	; 63
     e16:	c9 01       	movw	r24, r18
     e18:	04 c0       	rjmp	.+8      	; 0xe22 <_Z8USB_RecvhPvi+0x76>
     e1a:	8b e6       	ldi	r24, 0x6B	; 107
     e1c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     e20:	f8 cf       	rjmp	.-16     	; 0xe12 <_Z8USB_RecvhPvi+0x66>
     e22:	0f 90       	pop	r0
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	ff 90       	pop	r15
     e2e:	ef 90       	pop	r14
     e30:	08 95       	ret

00000e32 <_Z8USB_Recvh>:
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	1f 92       	push	r1
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	41 e0       	ldi	r20, 0x01	; 1
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	be 01       	movw	r22, r28
     e42:	6f 5f       	subi	r22, 0xFF	; 255
     e44:	7f 4f       	sbci	r23, 0xFF	; 255
     e46:	0e 94 d6 06 	call	0xdac	; 0xdac <_Z8USB_RecvhPvi>
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	19 f4       	brne	.+6      	; 0xe54 <_Z8USB_Recvh+0x22>
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <_Z8USB_Recvh+0x26>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	9f ef       	ldi	r25, 0xFF	; 255
     e58:	0f 90       	pop	r0
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret

00000e60 <_Z13USB_SendSpaceh>:
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	1f 92       	push	r1
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	68 2f       	mov	r22, r24
     e6c:	ce 01       	movw	r24, r28
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	0e 94 bc 06 	call	0xd78	; 0xd78 <_ZN6LockEPC1Eh>
     e74:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     e78:	89 2f       	mov	r24, r25
     e7a:	80 72       	andi	r24, 0x20	; 32
     e7c:	95 ff       	sbrs	r25, 5
     e7e:	04 c0       	rjmp	.+8      	; 0xe88 <_Z13USB_SendSpaceh+0x28>
     e80:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     e84:	80 e4       	ldi	r24, 0x40	; 64
     e86:	89 1b       	sub	r24, r25
     e88:	99 81       	ldd	r25, Y+1	; 0x01
     e8a:	9f bf       	out	0x3f, r25	; 63
     e8c:	0f 90       	pop	r0
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	08 95       	ret

00000e94 <_Z8USB_SendhPKvi>:
     e94:	5f 92       	push	r5
     e96:	6f 92       	push	r6
     e98:	7f 92       	push	r7
     e9a:	8f 92       	push	r8
     e9c:	9f 92       	push	r9
     e9e:	af 92       	push	r10
     ea0:	bf 92       	push	r11
     ea2:	cf 92       	push	r12
     ea4:	df 92       	push	r13
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	1f 92       	push	r1
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	98 2e       	mov	r9, r24
     eba:	6b 01       	movw	r12, r22
     ebc:	b4 2e       	mov	r11, r20
     ebe:	05 2f       	mov	r16, r21
     ec0:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <_usbConfiguration>
     ec4:	81 11       	cpse	r24, r1
     ec6:	03 c0       	rjmp	.+6      	; 0xece <_Z8USB_SendhPKvi+0x3a>
     ec8:	8f ef       	ldi	r24, 0xFF	; 255
     eca:	9f ef       	ldi	r25, 0xFF	; 255
     ecc:	77 c0       	rjmp	.+238    	; 0xfbc <_Z8USB_SendhPKvi+0x128>
     ece:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <_usbSuspendState>
     ed2:	80 ff       	sbrs	r24, 0
     ed4:	05 c0       	rjmp	.+10     	; 0xee0 <_Z8USB_SendhPKvi+0x4c>
     ed6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     eda:	82 60       	ori	r24, 0x02	; 2
     edc:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     ee0:	eb 2c       	mov	r14, r11
     ee2:	f0 2e       	mov	r15, r16
     ee4:	a1 2c       	mov	r10, r1
     ee6:	8a ef       	ldi	r24, 0xFA	; 250
     ee8:	88 2e       	mov	r8, r24
     eea:	89 2d       	mov	r24, r9
     eec:	80 72       	andi	r24, 0x20	; 32
     eee:	68 2e       	mov	r6, r24
     ef0:	89 2d       	mov	r24, r9
     ef2:	80 74       	andi	r24, 0x40	; 64
     ef4:	58 2e       	mov	r5, r24
     ef6:	9a e3       	ldi	r25, 0x3A	; 58
     ef8:	79 2e       	mov	r7, r25
     efa:	e1 14       	cp	r14, r1
     efc:	f1 04       	cpc	r15, r1
     efe:	19 f4       	brne	.+6      	; 0xf06 <_Z8USB_SendhPKvi+0x72>
     f00:	aa 20       	and	r10, r10
     f02:	09 f4       	brne	.+2      	; 0xf06 <_Z8USB_SendhPKvi+0x72>
     f04:	55 c0       	rjmp	.+170    	; 0xfb0 <_Z8USB_SendhPKvi+0x11c>
     f06:	89 2d       	mov	r24, r9
     f08:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z13USB_SendSpaceh>
     f0c:	18 2f       	mov	r17, r24
     f0e:	81 11       	cpse	r24, r1
     f10:	0a c0       	rjmp	.+20     	; 0xf26 <_Z8USB_SendhPKvi+0x92>
     f12:	8a 94       	dec	r8
     f14:	88 20       	and	r8, r8
     f16:	c1 f2       	breq	.-80     	; 0xec8 <_Z8USB_SendhPKvi+0x34>
     f18:	61 e0       	ldi	r22, 0x01	; 1
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 c7 0a 	call	0x158e	; 0x158e <delay>
     f24:	ea cf       	rjmp	.-44     	; 0xefa <_Z8USB_SendhPKvi+0x66>
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	e8 16       	cp	r14, r24
     f2a:	f9 06       	cpc	r15, r25
     f2c:	0c f4       	brge	.+2      	; 0xf30 <_Z8USB_SendhPKvi+0x9c>
     f2e:	1e 2d       	mov	r17, r14
     f30:	69 2d       	mov	r22, r9
     f32:	ce 01       	movw	r24, r28
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	0e 94 bc 06 	call	0xd78	; 0xd78 <_ZN6LockEPC1Eh>
     f3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f3e:	85 ff       	sbrs	r24, 5
     f40:	34 c0       	rjmp	.+104    	; 0xfaa <_Z8USB_SendhPKvi+0x116>
     f42:	81 2f       	mov	r24, r17
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	e8 1a       	sub	r14, r24
     f48:	f9 0a       	sbc	r15, r25
     f4a:	66 20       	and	r6, r6
     f4c:	29 f0       	breq	.+10     	; 0xf58 <_Z8USB_SendhPKvi+0xc4>
     f4e:	11 50       	subi	r17, 0x01	; 1
     f50:	a0 f0       	brcs	.+40     	; 0xf7a <_Z8USB_SendhPKvi+0xe6>
     f52:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     f56:	fb cf       	rjmp	.-10     	; 0xf4e <_Z8USB_SendhPKvi+0xba>
     f58:	f6 01       	movw	r30, r12
     f5a:	97 fe       	sbrs	r9, 7
     f5c:	0a c0       	rjmp	.+20     	; 0xf72 <_Z8USB_SendhPKvi+0xde>
     f5e:	11 50       	subi	r17, 0x01	; 1
     f60:	50 f0       	brcs	.+20     	; 0xf76 <_Z8USB_SendhPKvi+0xe2>
     f62:	24 91       	lpm	r18, Z
     f64:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     f68:	31 96       	adiw	r30, 0x01	; 1
     f6a:	f9 cf       	rjmp	.-14     	; 0xf5e <_Z8USB_SendhPKvi+0xca>
     f6c:	21 91       	ld	r18, Z+
     f6e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     f72:	11 50       	subi	r17, 0x01	; 1
     f74:	d8 f7       	brcc	.-10     	; 0xf6c <_Z8USB_SendhPKvi+0xd8>
     f76:	c8 0e       	add	r12, r24
     f78:	d9 1e       	adc	r13, r25
     f7a:	aa 20       	and	r10, r10
     f7c:	19 f0       	breq	.+6      	; 0xf84 <_Z8USB_SendhPKvi+0xf0>
     f7e:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f82:	0b c0       	rjmp	.+22     	; 0xf9a <_Z8USB_SendhPKvi+0x106>
     f84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f88:	85 fd       	sbrc	r24, 5
     f8a:	09 c0       	rjmp	.+18     	; 0xf9e <_Z8USB_SendhPKvi+0x10a>
     f8c:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f90:	aa 24       	eor	r10, r10
     f92:	a3 94       	inc	r10
     f94:	e1 14       	cp	r14, r1
     f96:	f1 04       	cpc	r15, r1
     f98:	41 f0       	breq	.+16     	; 0xfaa <_Z8USB_SendhPKvi+0x116>
     f9a:	a1 2c       	mov	r10, r1
     f9c:	06 c0       	rjmp	.+12     	; 0xfaa <_Z8USB_SendhPKvi+0x116>
     f9e:	e1 14       	cp	r14, r1
     fa0:	f1 04       	cpc	r15, r1
     fa2:	19 f4       	brne	.+6      	; 0xfaa <_Z8USB_SendhPKvi+0x116>
     fa4:	51 10       	cpse	r5, r1
     fa6:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	8f bf       	out	0x3f, r24	; 63
     fae:	a5 cf       	rjmp	.-182    	; 0xefa <_Z8USB_SendhPKvi+0x66>
     fb0:	5d 98       	cbi	0x0b, 5	; 11
     fb2:	84 e6       	ldi	r24, 0x64	; 100
     fb4:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <TxLEDPulse>
     fb8:	8b 2d       	mov	r24, r11
     fba:	90 2f       	mov	r25, r16
     fbc:	0f 90       	pop	r0
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	df 90       	pop	r13
     fcc:	cf 90       	pop	r12
     fce:	bf 90       	pop	r11
     fd0:	af 90       	pop	r10
     fd2:	9f 90       	pop	r9
     fd4:	8f 90       	pop	r8
     fd6:	7f 90       	pop	r7
     fd8:	6f 90       	pop	r6
     fda:	5f 90       	pop	r5
     fdc:	08 95       	ret

00000fde <_Z11InitControli>:
     fde:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     fe2:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <_ZL6_cmark+0x1>
     fe6:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <_ZL6_cmark>
     fea:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <_ZL5_cend+0x1>
     fee:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <_ZL5_cend>
     ff2:	08 95       	ret

00000ff4 <_Z15USB_SendControlhPKvi>:
     ff4:	df 92       	push	r13
     ff6:	ef 92       	push	r14
     ff8:	ff 92       	push	r15
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	d8 2e       	mov	r13, r24
    1004:	8a 01       	movw	r16, r20
    1006:	7b 01       	movw	r14, r22
    1008:	e4 0e       	add	r14, r20
    100a:	f5 1e       	adc	r15, r21
    100c:	eb 01       	movw	r28, r22
    100e:	ce 15       	cp	r28, r14
    1010:	df 05       	cpc	r29, r15
    1012:	71 f0       	breq	.+28     	; 0x1030 <_Z15USB_SendControlhPKvi+0x3c>
    1014:	d7 fe       	sbrs	r13, 7
    1016:	03 c0       	rjmp	.+6      	; 0x101e <_Z15USB_SendControlhPKvi+0x2a>
    1018:	fe 01       	movw	r30, r28
    101a:	84 91       	lpm	r24, Z
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <_Z15USB_SendControlhPKvi+0x2c>
    101e:	88 81       	ld	r24, Y
    1020:	0e 94 20 06 	call	0xc40	; 0xc40 <_ZL11SendControlh>
    1024:	21 96       	adiw	r28, 0x01	; 1
    1026:	81 11       	cpse	r24, r1
    1028:	f2 cf       	rjmp	.-28     	; 0x100e <_Z15USB_SendControlhPKvi+0x1a>
    102a:	8f ef       	ldi	r24, 0xFF	; 255
    102c:	9f ef       	ldi	r25, 0xFF	; 255
    102e:	01 c0       	rjmp	.+2      	; 0x1032 <_Z15USB_SendControlhPKvi+0x3e>
    1030:	c8 01       	movw	r24, r16
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	08 95       	ret

00001042 <_Z15USB_RecvControlPvi>:
    1042:	af 92       	push	r10
    1044:	bf 92       	push	r11
    1046:	df 92       	push	r13
    1048:	ef 92       	push	r14
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	5c 01       	movw	r10, r24
    1056:	8b 01       	movw	r16, r22
    1058:	eb 01       	movw	r28, r22
    105a:	9b ef       	ldi	r25, 0xFB	; 251
    105c:	d9 2e       	mov	r13, r25
    105e:	20 97       	sbiw	r28, 0x00	; 0
    1060:	c1 f0       	breq	.+48     	; 0x1092 <_Z15USB_RecvControlPvi+0x50>
    1062:	7e 01       	movw	r14, r28
    1064:	c1 34       	cpi	r28, 0x41	; 65
    1066:	d1 05       	cpc	r29, r1
    1068:	1c f0       	brlt	.+6      	; 0x1070 <_Z15USB_RecvControlPvi+0x2e>
    106a:	80 e4       	ldi	r24, 0x40	; 64
    106c:	e8 2e       	mov	r14, r24
    106e:	f1 2c       	mov	r15, r1
    1070:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1074:	82 ff       	sbrs	r24, 2
    1076:	fc cf       	rjmp	.-8      	; 0x1070 <_Z15USB_RecvControlPvi+0x2e>
    1078:	c8 01       	movw	r24, r16
    107a:	8c 1b       	sub	r24, r28
    107c:	9d 0b       	sbc	r25, r29
    107e:	6e 2d       	mov	r22, r14
    1080:	8a 0d       	add	r24, r10
    1082:	9b 1d       	adc	r25, r11
    1084:	0e 94 13 06 	call	0xc26	; 0xc26 <_ZL4RecvPVhh>
    1088:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    108c:	ce 19       	sub	r28, r14
    108e:	df 09       	sbc	r29, r15
    1090:	e6 cf       	rjmp	.-52     	; 0x105e <_Z15USB_RecvControlPvi+0x1c>
    1092:	c8 01       	movw	r24, r16
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	ff 90       	pop	r15
    109e:	ef 90       	pop	r14
    10a0:	df 90       	pop	r13
    10a2:	bf 90       	pop	r11
    10a4:	af 90       	pop	r10
    10a6:	08 95       	ret

000010a8 <__vector_11>:
    10a8:	1f 92       	push	r1
    10aa:	0f 92       	push	r0
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	0f 92       	push	r0
    10b0:	11 24       	eor	r1, r1
    10b2:	cf 92       	push	r12
    10b4:	df 92       	push	r13
    10b6:	ef 92       	push	r14
    10b8:	ff 92       	push	r15
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	2f 93       	push	r18
    10c0:	3f 93       	push	r19
    10c2:	4f 93       	push	r20
    10c4:	5f 93       	push	r21
    10c6:	6f 93       	push	r22
    10c8:	7f 93       	push	r23
    10ca:	8f 93       	push	r24
    10cc:	9f 93       	push	r25
    10ce:	af 93       	push	r26
    10d0:	bf 93       	push	r27
    10d2:	ef 93       	push	r30
    10d4:	ff 93       	push	r31
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	6c 97       	sbiw	r28, 0x1c	; 28
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    10e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    10ec:	83 ff       	sbrs	r24, 3
    10ee:	17 c1       	rjmp	.+558    	; 0x131e <__vector_11+0x276>
    10f0:	68 e0       	ldi	r22, 0x08	; 8
    10f2:	ce 01       	movw	r24, r28
    10f4:	45 96       	adiw	r24, 0x15	; 21
    10f6:	0e 94 13 06 	call	0xc26	; 0xc26 <_ZL4RecvPVhh>
    10fa:	82 ef       	ldi	r24, 0xF2	; 242
    10fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1100:	8d 89       	ldd	r24, Y+21	; 0x15
    1102:	87 ff       	sbrs	r24, 7
    1104:	05 c0       	rjmp	.+10     	; 0x1110 <__vector_11+0x68>
    1106:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    110a:	90 ff       	sbrs	r25, 0
    110c:	fc cf       	rjmp	.-8      	; 0x1106 <__vector_11+0x5e>
    110e:	03 c0       	rjmp	.+6      	; 0x1116 <__vector_11+0x6e>
    1110:	9e ef       	ldi	r25, 0xFE	; 254
    1112:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1116:	98 2f       	mov	r25, r24
    1118:	90 76       	andi	r25, 0x60	; 96
    111a:	09 f0       	breq	.+2      	; 0x111e <__vector_11+0x76>
    111c:	d8 c0       	rjmp	.+432    	; 0x12ce <__vector_11+0x226>
    111e:	9e 89       	ldd	r25, Y+22	; 0x16
    1120:	4f 89       	ldd	r20, Y+23	; 0x17
    1122:	58 8d       	ldd	r21, Y+24	; 0x18
    1124:	2f 89       	ldd	r18, Y+23	; 0x17
    1126:	18 8d       	ldd	r17, Y+24	; 0x18
    1128:	91 11       	cpse	r25, r1
    112a:	0c c0       	rjmp	.+24     	; 0x1144 <__vector_11+0x9c>
    112c:	80 38       	cpi	r24, 0x80	; 128
    112e:	29 f4       	brne	.+10     	; 0x113a <__vector_11+0x92>
    1130:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <_usbCurrentStatus>
    1134:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1138:	02 c0       	rjmp	.+4      	; 0x113e <__vector_11+0x96>
    113a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    113e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1142:	e6 c0       	rjmp	.+460    	; 0x1310 <__vector_11+0x268>
    1144:	91 30       	cpi	r25, 0x01	; 1
    1146:	51 f4       	brne	.+20     	; 0x115c <__vector_11+0xb4>
    1148:	81 11       	cpse	r24, r1
    114a:	e2 c0       	rjmp	.+452    	; 0x1310 <__vector_11+0x268>
    114c:	41 30       	cpi	r20, 0x01	; 1
    114e:	51 05       	cpc	r21, r1
    1150:	09 f0       	breq	.+2      	; 0x1154 <__vector_11+0xac>
    1152:	de c0       	rjmp	.+444    	; 0x1310 <__vector_11+0x268>
    1154:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <_usbCurrentStatus>
    1158:	8d 7f       	andi	r24, 0xFD	; 253
    115a:	0b c0       	rjmp	.+22     	; 0x1172 <__vector_11+0xca>
    115c:	93 30       	cpi	r25, 0x03	; 3
    115e:	61 f4       	brne	.+24     	; 0x1178 <__vector_11+0xd0>
    1160:	81 11       	cpse	r24, r1
    1162:	d6 c0       	rjmp	.+428    	; 0x1310 <__vector_11+0x268>
    1164:	41 30       	cpi	r20, 0x01	; 1
    1166:	51 05       	cpc	r21, r1
    1168:	09 f0       	breq	.+2      	; 0x116c <__vector_11+0xc4>
    116a:	d2 c0       	rjmp	.+420    	; 0x1310 <__vector_11+0x268>
    116c:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <_usbCurrentStatus>
    1170:	82 60       	ori	r24, 0x02	; 2
    1172:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <_usbCurrentStatus>
    1176:	cc c0       	rjmp	.+408    	; 0x1310 <__vector_11+0x268>
    1178:	95 30       	cpi	r25, 0x05	; 5
    117a:	49 f4       	brne	.+18     	; 0x118e <__vector_11+0xe6>
    117c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1180:	80 ff       	sbrs	r24, 0
    1182:	fc cf       	rjmp	.-8      	; 0x117c <__vector_11+0xd4>
    1184:	82 2f       	mov	r24, r18
    1186:	80 68       	ori	r24, 0x80	; 128
    1188:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    118c:	c1 c0       	rjmp	.+386    	; 0x1310 <__vector_11+0x268>
    118e:	96 30       	cpi	r25, 0x06	; 6
    1190:	09 f0       	breq	.+2      	; 0x1194 <__vector_11+0xec>
    1192:	70 c0       	rjmp	.+224    	; 0x1274 <__vector_11+0x1cc>
    1194:	eb 8c       	ldd	r14, Y+27	; 0x1b
    1196:	fc 8c       	ldd	r15, Y+28	; 0x1c
    1198:	12 30       	cpi	r17, 0x02	; 2
    119a:	69 f5       	brne	.+90     	; 0x11f6 <__vector_11+0x14e>
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 ef 07 	call	0xfde	; 0xfde <_Z11InitControli>
    11a4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <_ZL14SendInterfacesv>
    11a8:	99 e0       	ldi	r25, 0x09	; 9
    11aa:	9e 01       	movw	r18, r28
    11ac:	2f 5f       	subi	r18, 0xFF	; 255
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	69 01       	movw	r12, r18
    11b2:	f9 01       	movw	r30, r18
    11b4:	29 2f       	mov	r18, r25
    11b6:	11 92       	st	Z+, r1
    11b8:	2a 95       	dec	r18
    11ba:	e9 f7       	brne	.-6      	; 0x11b6 <__vector_11+0x10e>
    11bc:	99 83       	std	Y+1, r25	; 0x01
    11be:	1a 83       	std	Y+2, r17	; 0x02
    11c0:	91 e0       	ldi	r25, 0x01	; 1
    11c2:	9e 83       	std	Y+6, r25	; 0x06
    11c4:	90 ea       	ldi	r25, 0xA0	; 160
    11c6:	98 87       	std	Y+8, r25	; 0x08
    11c8:	9a ef       	ldi	r25, 0xFA	; 250
    11ca:	99 87       	std	Y+9, r25	; 0x09
    11cc:	20 91 1b 04 	lds	r18, 0x041B	; 0x80041b <_ZL6_cmark>
    11d0:	30 91 1c 04 	lds	r19, 0x041C	; 0x80041c <_ZL6_cmark+0x1>
    11d4:	27 5f       	subi	r18, 0xF7	; 247
    11d6:	3f 4f       	sbci	r19, 0xFF	; 255
    11d8:	3c 83       	std	Y+4, r19	; 0x04
    11da:	2b 83       	std	Y+3, r18	; 0x03
    11dc:	8d 83       	std	Y+5, r24	; 0x05
    11de:	c7 01       	movw	r24, r14
    11e0:	0e 94 ef 07 	call	0xfde	; 0xfde <_Z11InitControli>
    11e4:	49 e0       	ldi	r20, 0x09	; 9
    11e6:	50 e0       	ldi	r21, 0x00	; 0
    11e8:	b6 01       	movw	r22, r12
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	0e 94 fa 07 	call	0xff4	; 0xff4 <_Z15USB_SendControlhPKvi>
    11f0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <_ZL14SendInterfacesv>
    11f4:	8d c0       	rjmp	.+282    	; 0x1310 <__vector_11+0x268>
    11f6:	c7 01       	movw	r24, r14
    11f8:	0e 94 ef 07 	call	0xfde	; 0xfde <_Z11InitControli>
    11fc:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <_Z12PluggableUSBv>
    1200:	be 01       	movw	r22, r28
    1202:	6b 5e       	subi	r22, 0xEB	; 235
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	0e 94 9e 13 	call	0x273c	; 0x273c <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	19 f0       	breq	.+6      	; 0x1214 <__vector_11+0x16c>
    120e:	0c f0       	brlt	.+2      	; 0x1212 <__vector_11+0x16a>
    1210:	7f c0       	rjmp	.+254    	; 0x1310 <__vector_11+0x268>
    1212:	82 c0       	rjmp	.+260    	; 0x1318 <__vector_11+0x270>
    1214:	11 30       	cpi	r17, 0x01	; 1
    1216:	09 f4       	brne	.+2      	; 0x121a <__vector_11+0x172>
    1218:	70 c0       	rjmp	.+224    	; 0x12fa <__vector_11+0x252>
    121a:	13 30       	cpi	r17, 0x03	; 3
    121c:	09 f0       	breq	.+2      	; 0x1220 <__vector_11+0x178>
    121e:	7c c0       	rjmp	.+248    	; 0x1318 <__vector_11+0x270>
    1220:	8f 89       	ldd	r24, Y+23	; 0x17
    1222:	88 23       	and	r24, r24
    1224:	09 f4       	brne	.+2      	; 0x1228 <__vector_11+0x180>
    1226:	6c c0       	rjmp	.+216    	; 0x1300 <__vector_11+0x258>
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	29 f4       	brne	.+10     	; 0x1236 <__vector_11+0x18e>
    122c:	40 e8       	ldi	r20, 0x80	; 128
    122e:	60 e1       	ldi	r22, 0x10	; 16
    1230:	88 ee       	ldi	r24, 0xE8	; 232
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	06 c0       	rjmp	.+12     	; 0x1242 <__vector_11+0x19a>
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	39 f4       	brne	.+14     	; 0x1248 <__vector_11+0x1a0>
    123a:	40 e8       	ldi	r20, 0x80	; 128
    123c:	6b e0       	ldi	r22, 0x0B	; 11
    123e:	8c ed       	ldi	r24, 0xDC	; 220
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_ZL24USB_SendStringDescriptorPKhhh>
    1246:	56 c0       	rjmp	.+172    	; 0x12f4 <__vector_11+0x24c>
    1248:	83 30       	cpi	r24, 0x03	; 3
    124a:	09 f0       	breq	.+2      	; 0x124e <__vector_11+0x1a6>
    124c:	65 c0       	rjmp	.+202    	; 0x1318 <__vector_11+0x270>
    124e:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <_Z12PluggableUSBv>
    1252:	8e 01       	movw	r16, r28
    1254:	0f 5f       	subi	r16, 0xFF	; 255
    1256:	1f 4f       	sbci	r17, 0xFF	; 255
    1258:	b8 01       	movw	r22, r16
    125a:	0e 94 bd 13 	call	0x277a	; 0x277a <_ZN13PluggableUSB_12getShortNameEPc>
    125e:	f8 01       	movw	r30, r16
    1260:	01 90       	ld	r0, Z+
    1262:	00 20       	and	r0, r0
    1264:	e9 f7       	brne	.-6      	; 0x1260 <__vector_11+0x1b8>
    1266:	31 97       	sbiw	r30, 0x01	; 1
    1268:	bf 01       	movw	r22, r30
    126a:	60 1b       	sub	r22, r16
    126c:	71 0b       	sbc	r23, r17
    126e:	40 e0       	ldi	r20, 0x00	; 0
    1270:	c8 01       	movw	r24, r16
    1272:	e7 cf       	rjmp	.-50     	; 0x1242 <__vector_11+0x19a>
    1274:	97 30       	cpi	r25, 0x07	; 7
    1276:	09 f4       	brne	.+2      	; 0x127a <__vector_11+0x1d2>
    1278:	4f c0       	rjmp	.+158    	; 0x1318 <__vector_11+0x270>
    127a:	98 30       	cpi	r25, 0x08	; 8
    127c:	21 f4       	brne	.+8      	; 0x1286 <__vector_11+0x1de>
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1284:	45 c0       	rjmp	.+138    	; 0x1310 <__vector_11+0x268>
    1286:	99 30       	cpi	r25, 0x09	; 9
    1288:	09 f0       	breq	.+2      	; 0x128c <__vector_11+0x1e4>
    128a:	42 c0       	rjmp	.+132    	; 0x1310 <__vector_11+0x268>
    128c:	83 70       	andi	r24, 0x03	; 3
    128e:	09 f0       	breq	.+2      	; 0x1292 <__vector_11+0x1ea>
    1290:	43 c0       	rjmp	.+134    	; 0x1318 <__vector_11+0x270>
    1292:	e5 e0       	ldi	r30, 0x05	; 5
    1294:	f1 e0       	ldi	r31, 0x01	; 1
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	31 e0       	ldi	r19, 0x01	; 1
    129a:	96 e3       	ldi	r25, 0x36	; 54
    129c:	20 81       	ld	r18, Z
    129e:	21 11       	cpse	r18, r1
    12a0:	09 c0       	rjmp	.+18     	; 0x12b4 <__vector_11+0x20c>
    12a2:	8e e7       	ldi	r24, 0x7E	; 126
    12a4:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
    12a8:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
    12ac:	8f 89       	ldd	r24, Y+23	; 0x17
    12ae:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <_usbConfiguration>
    12b2:	2e c0       	rjmp	.+92     	; 0x1310 <__vector_11+0x268>
    12b4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    12b8:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    12bc:	21 91       	ld	r18, Z+
    12be:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    12c2:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    12c6:	8f 5f       	subi	r24, 0xFF	; 255
    12c8:	87 30       	cpi	r24, 0x07	; 7
    12ca:	41 f7       	brne	.-48     	; 0x129c <__vector_11+0x1f4>
    12cc:	ea cf       	rjmp	.-44     	; 0x12a2 <__vector_11+0x1fa>
    12ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12d2:	0e 94 ef 07 	call	0xfde	; 0xfde <_Z11InitControli>
    12d6:	89 8d       	ldd	r24, Y+25	; 0x19
    12d8:	81 11       	cpse	r24, r1
    12da:	05 c0       	rjmp	.+10     	; 0x12e6 <__vector_11+0x23e>
    12dc:	ce 01       	movw	r24, r28
    12de:	45 96       	adiw	r24, 0x15	; 21
    12e0:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <_Z9CDC_SetupR8USBSetup>
    12e4:	07 c0       	rjmp	.+14     	; 0x12f4 <__vector_11+0x24c>
    12e6:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <_Z12PluggableUSBv>
    12ea:	be 01       	movw	r22, r28
    12ec:	6b 5e       	subi	r22, 0xEB	; 235
    12ee:	7f 4f       	sbci	r23, 0xFF	; 255
    12f0:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <_ZN13PluggableUSB_5setupER8USBSetup>
    12f4:	88 23       	and	r24, r24
    12f6:	81 f0       	breq	.+32     	; 0x1318 <__vector_11+0x270>
    12f8:	0b c0       	rjmp	.+22     	; 0x1310 <__vector_11+0x268>
    12fa:	6a ec       	ldi	r22, 0xCA	; 202
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <__vector_11+0x25c>
    1300:	69 ef       	ldi	r22, 0xF9	; 249
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	fb 01       	movw	r30, r22
    1306:	44 91       	lpm	r20, Z
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	80 e8       	ldi	r24, 0x80	; 128
    130c:	0e 94 fa 07 	call	0xff4	; 0xff4 <_Z15USB_SendControlhPKvi>
    1310:	8e ef       	ldi	r24, 0xFE	; 254
    1312:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1316:	03 c0       	rjmp	.+6      	; 0x131e <__vector_11+0x276>
    1318:	81 e2       	ldi	r24, 0x21	; 33
    131a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    131e:	6c 96       	adiw	r28, 0x1c	; 28
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	ff 91       	pop	r31
    1330:	ef 91       	pop	r30
    1332:	bf 91       	pop	r27
    1334:	af 91       	pop	r26
    1336:	9f 91       	pop	r25
    1338:	8f 91       	pop	r24
    133a:	7f 91       	pop	r23
    133c:	6f 91       	pop	r22
    133e:	5f 91       	pop	r21
    1340:	4f 91       	pop	r20
    1342:	3f 91       	pop	r19
    1344:	2f 91       	pop	r18
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	df 90       	pop	r13
    1350:	cf 90       	pop	r12
    1352:	0f 90       	pop	r0
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	0f 90       	pop	r0
    1358:	1f 90       	pop	r1
    135a:	18 95       	reti

0000135c <_Z9USB_Flushh>:
    135c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1360:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1364:	88 23       	and	r24, r24
    1366:	19 f0       	breq	.+6      	; 0x136e <_Z9USB_Flushh+0x12>
    1368:	8a e3       	ldi	r24, 0x3A	; 58
    136a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    136e:	08 95       	ret

00001370 <__vector_10>:
    1370:	1f 92       	push	r1
    1372:	0f 92       	push	r0
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	0f 92       	push	r0
    1378:	11 24       	eor	r1, r1
    137a:	2f 93       	push	r18
    137c:	3f 93       	push	r19
    137e:	4f 93       	push	r20
    1380:	5f 93       	push	r21
    1382:	6f 93       	push	r22
    1384:	7f 93       	push	r23
    1386:	8f 93       	push	r24
    1388:	9f 93       	push	r25
    138a:	af 93       	push	r26
    138c:	bf 93       	push	r27
    138e:	cf 93       	push	r28
    1390:	ef 93       	push	r30
    1392:	ff 93       	push	r31
    1394:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1398:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    139c:	83 7f       	andi	r24, 0xF3	; 243
    139e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    13a2:	c3 ff       	sbrs	r28, 3
    13a4:	0f c0       	rjmp	.+30     	; 0x13c4 <__vector_10+0x54>
    13a6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    13b0:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    13b4:	82 e3       	ldi	r24, 0x32	; 50
    13b6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    13ba:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <_usbConfiguration>
    13be:	88 e0       	ldi	r24, 0x08	; 8
    13c0:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    13c4:	c2 ff       	sbrs	r28, 2
    13c6:	19 c0       	rjmp	.+50     	; 0x13fa <__vector_10+0x8a>
    13c8:	83 e0       	ldi	r24, 0x03	; 3
    13ca:	0e 94 ae 09 	call	0x135c	; 0x135c <_Z9USB_Flushh>
    13ce:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <TxLEDPulse>
    13d2:	88 23       	and	r24, r24
    13d4:	39 f0       	breq	.+14     	; 0x13e4 <__vector_10+0x74>
    13d6:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <TxLEDPulse>
    13da:	81 50       	subi	r24, 0x01	; 1
    13dc:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <TxLEDPulse>
    13e0:	88 23       	and	r24, r24
    13e2:	89 f1       	breq	.+98     	; 0x1446 <__vector_10+0xd6>
    13e4:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <RxLEDPulse>
    13e8:	88 23       	and	r24, r24
    13ea:	39 f0       	breq	.+14     	; 0x13fa <__vector_10+0x8a>
    13ec:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <RxLEDPulse>
    13f0:	81 50       	subi	r24, 0x01	; 1
    13f2:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <RxLEDPulse>
    13f6:	88 23       	and	r24, r24
    13f8:	41 f1       	breq	.+80     	; 0x144a <__vector_10+0xda>
    13fa:	c4 ff       	sbrs	r28, 4
    13fc:	10 c0       	rjmp	.+32     	; 0x141e <__vector_10+0xae>
    13fe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1402:	8e 7e       	andi	r24, 0xEE	; 238
    1404:	81 60       	ori	r24, 0x01	; 1
    1406:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    140a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    140e:	8f 7e       	andi	r24, 0xEF	; 239
    1410:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1414:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <_usbSuspendState>
    1418:	8e 7e       	andi	r24, 0xEE	; 238
    141a:	80 61       	ori	r24, 0x10	; 16
    141c:	11 c0       	rjmp	.+34     	; 0x1440 <__vector_10+0xd0>
    141e:	c0 ff       	sbrs	r28, 0
    1420:	16 c0       	rjmp	.+44     	; 0x144e <__vector_10+0xde>
    1422:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1426:	8e 7e       	andi	r24, 0xEE	; 238
    1428:	80 61       	ori	r24, 0x10	; 16
    142a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    142e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1432:	8e 7e       	andi	r24, 0xEE	; 238
    1434:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1438:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <_usbSuspendState>
    143c:	8e 7e       	andi	r24, 0xEE	; 238
    143e:	81 60       	ori	r24, 0x01	; 1
    1440:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <_usbSuspendState>
    1444:	04 c0       	rjmp	.+8      	; 0x144e <__vector_10+0xde>
    1446:	5d 9a       	sbi	0x0b, 5	; 11
    1448:	cd cf       	rjmp	.-102    	; 0x13e4 <__vector_10+0x74>
    144a:	28 9a       	sbi	0x05, 0	; 5
    144c:	d6 cf       	rjmp	.-84     	; 0x13fa <__vector_10+0x8a>
    144e:	ff 91       	pop	r31
    1450:	ef 91       	pop	r30
    1452:	cf 91       	pop	r28
    1454:	bf 91       	pop	r27
    1456:	af 91       	pop	r26
    1458:	9f 91       	pop	r25
    145a:	8f 91       	pop	r24
    145c:	7f 91       	pop	r23
    145e:	6f 91       	pop	r22
    1460:	5f 91       	pop	r21
    1462:	4f 91       	pop	r20
    1464:	3f 91       	pop	r19
    1466:	2f 91       	pop	r18
    1468:	0f 90       	pop	r0
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	0f 90       	pop	r0
    146e:	1f 90       	pop	r1
    1470:	18 95       	reti

00001472 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    1472:	10 92 1f 04 	sts	0x041F, r1	; 0x80041f <_usbConfiguration>
	_usbCurrentStatus = 0;
    1476:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <_usbCurrentStatus>
	_usbSuspendState = 0;
    147a:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <_usbSuspendState>
	USB_ClockEnable();
    147e:	0e 94 83 06 	call	0xd06	; 0xd06 <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    1482:	e1 ee       	ldi	r30, 0xE1	; 225
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	8e 7e       	andi	r24, 0xEE	; 238
    148a:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    148c:	8d e0       	ldi	r24, 0x0D	; 13
    148e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
	
	TX_RX_LED_INIT;
    1492:	55 9a       	sbi	0x0a, 5	; 10
    1494:	20 9a       	sbi	0x04, 0	; 4
    1496:	08 95       	ret

00001498 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1498:	1f 92       	push	r1
    149a:	0f 92       	push	r0
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	0f 92       	push	r0
    14a0:	11 24       	eor	r1, r1
    14a2:	2f 93       	push	r18
    14a4:	3f 93       	push	r19
    14a6:	8f 93       	push	r24
    14a8:	9f 93       	push	r25
    14aa:	af 93       	push	r26
    14ac:	bf 93       	push	r27
    14ae:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <timer0_millis>
    14b2:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <timer0_millis+0x1>
    14b6:	a0 91 25 04 	lds	r26, 0x0425	; 0x800425 <timer0_millis+0x2>
    14ba:	b0 91 26 04 	lds	r27, 0x0426	; 0x800426 <timer0_millis+0x3>
    14be:	30 91 22 04 	lds	r19, 0x0422	; 0x800422 <timer0_fract>
    14c2:	23 e0       	ldi	r18, 0x03	; 3
    14c4:	23 0f       	add	r18, r19
    14c6:	2d 37       	cpi	r18, 0x7D	; 125
    14c8:	20 f4       	brcc	.+8      	; 0x14d2 <__vector_23+0x3a>
    14ca:	01 96       	adiw	r24, 0x01	; 1
    14cc:	a1 1d       	adc	r26, r1
    14ce:	b1 1d       	adc	r27, r1
    14d0:	05 c0       	rjmp	.+10     	; 0x14dc <__vector_23+0x44>
    14d2:	26 e8       	ldi	r18, 0x86	; 134
    14d4:	23 0f       	add	r18, r19
    14d6:	02 96       	adiw	r24, 0x02	; 2
    14d8:	a1 1d       	adc	r26, r1
    14da:	b1 1d       	adc	r27, r1
    14dc:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <timer0_fract>
    14e0:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <timer0_millis>
    14e4:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <timer0_millis+0x1>
    14e8:	a0 93 25 04 	sts	0x0425, r26	; 0x800425 <timer0_millis+0x2>
    14ec:	b0 93 26 04 	sts	0x0426, r27	; 0x800426 <timer0_millis+0x3>
    14f0:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <timer0_overflow_count>
    14f4:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <timer0_overflow_count+0x1>
    14f8:	a0 91 29 04 	lds	r26, 0x0429	; 0x800429 <timer0_overflow_count+0x2>
    14fc:	b0 91 2a 04 	lds	r27, 0x042A	; 0x80042a <timer0_overflow_count+0x3>
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	a1 1d       	adc	r26, r1
    1504:	b1 1d       	adc	r27, r1
    1506:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <timer0_overflow_count>
    150a:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <timer0_overflow_count+0x1>
    150e:	a0 93 29 04 	sts	0x0429, r26	; 0x800429 <timer0_overflow_count+0x2>
    1512:	b0 93 2a 04 	sts	0x042A, r27	; 0x80042a <timer0_overflow_count+0x3>
    1516:	bf 91       	pop	r27
    1518:	af 91       	pop	r26
    151a:	9f 91       	pop	r25
    151c:	8f 91       	pop	r24
    151e:	3f 91       	pop	r19
    1520:	2f 91       	pop	r18
    1522:	0f 90       	pop	r0
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	0f 90       	pop	r0
    1528:	1f 90       	pop	r1
    152a:	18 95       	reti

0000152c <millis>:
    152c:	2f b7       	in	r18, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	60 91 23 04 	lds	r22, 0x0423	; 0x800423 <timer0_millis>
    1534:	70 91 24 04 	lds	r23, 0x0424	; 0x800424 <timer0_millis+0x1>
    1538:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <timer0_millis+0x2>
    153c:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <timer0_millis+0x3>
    1540:	2f bf       	out	0x3f, r18	; 63
    1542:	08 95       	ret

00001544 <micros>:
    1544:	3f b7       	in	r19, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <timer0_overflow_count>
    154c:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <timer0_overflow_count+0x1>
    1550:	a0 91 29 04 	lds	r26, 0x0429	; 0x800429 <timer0_overflow_count+0x2>
    1554:	b0 91 2a 04 	lds	r27, 0x042A	; 0x80042a <timer0_overflow_count+0x3>
    1558:	26 b5       	in	r18, 0x26	; 38
    155a:	a8 9b       	sbis	0x15, 0	; 21
    155c:	05 c0       	rjmp	.+10     	; 0x1568 <micros+0x24>
    155e:	2f 3f       	cpi	r18, 0xFF	; 255
    1560:	19 f0       	breq	.+6      	; 0x1568 <micros+0x24>
    1562:	01 96       	adiw	r24, 0x01	; 1
    1564:	a1 1d       	adc	r26, r1
    1566:	b1 1d       	adc	r27, r1
    1568:	3f bf       	out	0x3f, r19	; 63
    156a:	ba 2f       	mov	r27, r26
    156c:	a9 2f       	mov	r26, r25
    156e:	98 2f       	mov	r25, r24
    1570:	88 27       	eor	r24, r24
    1572:	82 0f       	add	r24, r18
    1574:	91 1d       	adc	r25, r1
    1576:	a1 1d       	adc	r26, r1
    1578:	b1 1d       	adc	r27, r1
    157a:	bc 01       	movw	r22, r24
    157c:	cd 01       	movw	r24, r26
    157e:	42 e0       	ldi	r20, 0x02	; 2
    1580:	66 0f       	add	r22, r22
    1582:	77 1f       	adc	r23, r23
    1584:	88 1f       	adc	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	4a 95       	dec	r20
    158a:	d1 f7       	brne	.-12     	; 0x1580 <micros+0x3c>
    158c:	08 95       	ret

0000158e <delay>:
    158e:	8f 92       	push	r8
    1590:	9f 92       	push	r9
    1592:	af 92       	push	r10
    1594:	bf 92       	push	r11
    1596:	cf 92       	push	r12
    1598:	df 92       	push	r13
    159a:	ef 92       	push	r14
    159c:	ff 92       	push	r15
    159e:	6b 01       	movw	r12, r22
    15a0:	7c 01       	movw	r14, r24
    15a2:	0e 94 a2 0a 	call	0x1544	; 0x1544 <micros>
    15a6:	4b 01       	movw	r8, r22
    15a8:	5c 01       	movw	r10, r24
    15aa:	c1 14       	cp	r12, r1
    15ac:	d1 04       	cpc	r13, r1
    15ae:	e1 04       	cpc	r14, r1
    15b0:	f1 04       	cpc	r15, r1
    15b2:	01 f1       	breq	.+64     	; 0x15f4 <delay+0x66>
    15b4:	0e 94 74 13 	call	0x26e8	; 0x26e8 <yield>
    15b8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <micros>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	88 19       	sub	r24, r8
    15c2:	99 09       	sbc	r25, r9
    15c4:	aa 09       	sbc	r26, r10
    15c6:	bb 09       	sbc	r27, r11
    15c8:	88 3e       	cpi	r24, 0xE8	; 232
    15ca:	93 40       	sbci	r25, 0x03	; 3
    15cc:	a1 05       	cpc	r26, r1
    15ce:	b1 05       	cpc	r27, r1
    15d0:	60 f3       	brcs	.-40     	; 0x15aa <delay+0x1c>
    15d2:	21 e0       	ldi	r18, 0x01	; 1
    15d4:	c2 1a       	sub	r12, r18
    15d6:	d1 08       	sbc	r13, r1
    15d8:	e1 08       	sbc	r14, r1
    15da:	f1 08       	sbc	r15, r1
    15dc:	88 ee       	ldi	r24, 0xE8	; 232
    15de:	88 0e       	add	r8, r24
    15e0:	83 e0       	ldi	r24, 0x03	; 3
    15e2:	98 1e       	adc	r9, r24
    15e4:	a1 1c       	adc	r10, r1
    15e6:	b1 1c       	adc	r11, r1
    15e8:	c1 14       	cp	r12, r1
    15ea:	d1 04       	cpc	r13, r1
    15ec:	e1 04       	cpc	r14, r1
    15ee:	f1 04       	cpc	r15, r1
    15f0:	19 f7       	brne	.-58     	; 0x15b8 <delay+0x2a>
    15f2:	db cf       	rjmp	.-74     	; 0x15aa <delay+0x1c>
    15f4:	ff 90       	pop	r15
    15f6:	ef 90       	pop	r14
    15f8:	df 90       	pop	r13
    15fa:	cf 90       	pop	r12
    15fc:	bf 90       	pop	r11
    15fe:	af 90       	pop	r10
    1600:	9f 90       	pop	r9
    1602:	8f 90       	pop	r8
    1604:	08 95       	ret

00001606 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1606:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1608:	84 b5       	in	r24, 0x24	; 36
    160a:	82 60       	ori	r24, 0x02	; 2
    160c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    160e:	84 b5       	in	r24, 0x24	; 36
    1610:	81 60       	ori	r24, 0x01	; 1
    1612:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1614:	85 b5       	in	r24, 0x25	; 37
    1616:	82 60       	ori	r24, 0x02	; 2
    1618:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    161a:	85 b5       	in	r24, 0x25	; 37
    161c:	81 60       	ori	r24, 0x01	; 1
    161e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1620:	ee e6       	ldi	r30, 0x6E	; 110
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	81 60       	ori	r24, 0x01	; 1
    1628:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    162a:	e1 e8       	ldi	r30, 0x81	; 129
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1630:	80 81       	ld	r24, Z
    1632:	82 60       	ori	r24, 0x02	; 2
    1634:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1636:	80 81       	ld	r24, Z
    1638:	81 60       	ori	r24, 0x01	; 1
    163a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    163c:	e0 e8       	ldi	r30, 0x80	; 128
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	81 60       	ori	r24, 0x01	; 1
    1644:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1646:	e1 e9       	ldi	r30, 0x91	; 145
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	82 60       	ori	r24, 0x02	; 2
    164e:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1650:	80 81       	ld	r24, Z
    1652:	81 60       	ori	r24, 0x01	; 1
    1654:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1656:	e0 e9       	ldi	r30, 0x90	; 144
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	81 60       	ori	r24, 0x01	; 1
    165e:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    1660:	e1 ec       	ldi	r30, 0xC1	; 193
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	84 60       	ori	r24, 0x04	; 4
    1668:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    166a:	80 81       	ld	r24, Z
    166c:	82 60       	ori	r24, 0x02	; 2
    166e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1670:	80 81       	ld	r24, Z
    1672:	81 60       	ori	r24, 0x01	; 1
    1674:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    1676:	e3 ec       	ldi	r30, 0xC3	; 195
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	81 60       	ori	r24, 0x01	; 1
    167e:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    1680:	e0 ec       	ldi	r30, 0xC0	; 192
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	82 60       	ori	r24, 0x02	; 2
    1688:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    168a:	e2 ec       	ldi	r30, 0xC2	; 194
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	81 60       	ori	r24, 0x01	; 1
    1692:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1694:	ea e7       	ldi	r30, 0x7A	; 122
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	84 60       	ori	r24, 0x04	; 4
    169c:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    169e:	80 81       	ld	r24, Z
    16a0:	82 60       	ori	r24, 0x02	; 2
    16a2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    16a4:	80 81       	ld	r24, Z
    16a6:	81 60       	ori	r24, 0x01	; 1
    16a8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    16aa:	80 81       	ld	r24, Z
    16ac:	80 68       	ori	r24, 0x80	; 128
    16ae:	80 83       	st	Z, r24
    16b0:	08 95       	ret

000016b2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	fc 01       	movw	r30, r24
    16b6:	31 97       	sbiw	r30, 0x01	; 1
    16b8:	ef 30       	cpi	r30, 0x0F	; 15
    16ba:	f1 05       	cpc	r31, r1
    16bc:	b0 f5       	brcc	.+108    	; 0x172a <turnOffPWM+0x78>
    16be:	ea 5a       	subi	r30, 0xAA	; 170
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    16c6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    16ca:	8f 77       	andi	r24, 0x7F	; 127
    16cc:	03 c0       	rjmp	.+6      	; 0x16d4 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    16ce:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    16d2:	8f 7d       	andi	r24, 0xDF	; 223
    16d4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    16d8:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    16da:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    16de:	87 7f       	andi	r24, 0xF7	; 247
    16e0:	f9 cf       	rjmp	.-14     	; 0x16d4 <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    16e2:	84 b5       	in	r24, 0x24	; 36
    16e4:	8f 77       	andi	r24, 0x7F	; 127
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    16e8:	84 b5       	in	r24, 0x24	; 36
    16ea:	8f 7d       	andi	r24, 0xDF	; 223
    16ec:	84 bd       	out	0x24, r24	; 36
    16ee:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    16f0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    16f4:	8f 77       	andi	r24, 0x7F	; 127
    16f6:	07 c0       	rjmp	.+14     	; 0x1706 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    16f8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    16fc:	8f 7d       	andi	r24, 0xDF	; 223
    16fe:	03 c0       	rjmp	.+6      	; 0x1706 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1700:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    1704:	87 7f       	andi	r24, 0xF7	; 247
    1706:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    170a:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    170c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1710:	8f 77       	andi	r24, 0x7F	; 127
    1712:	03 c0       	rjmp	.+6      	; 0x171a <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1714:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1718:	8f 7d       	andi	r24, 0xDF	; 223
    171a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    171e:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    1720:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1724:	87 7f       	andi	r24, 0xF7	; 247
    1726:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    172a:	08 95       	ret

0000172c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	fc 01       	movw	r30, r24
    1734:	e4 5e       	subi	r30, 0xE4	; 228
    1736:	fe 4f       	sbci	r31, 0xFE	; 254
    1738:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    173a:	fc 01       	movw	r30, r24
    173c:	e5 5c       	subi	r30, 0xC5	; 197
    173e:	fe 4f       	sbci	r31, 0xFE	; 254
    1740:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1742:	88 23       	and	r24, r24
    1744:	61 f1       	breq	.+88     	; 0x179e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	fc 01       	movw	r30, r24
    174e:	e8 59       	subi	r30, 0x98	; 152
    1750:	fe 4f       	sbci	r31, 0xFE	; 254
    1752:	c5 91       	lpm	r28, Z+
    1754:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1756:	fc 01       	movw	r30, r24
    1758:	e6 5a       	subi	r30, 0xA6	; 166
    175a:	fe 4f       	sbci	r31, 0xFE	; 254
    175c:	a5 91       	lpm	r26, Z+
    175e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1760:	61 11       	cpse	r22, r1
    1762:	09 c0       	rjmp	.+18     	; 0x1776 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1764:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1766:	f8 94       	cli
		*reg &= ~bit;
    1768:	88 81       	ld	r24, Y
    176a:	20 95       	com	r18
    176c:	82 23       	and	r24, r18
    176e:	88 83       	st	Y, r24
		*out &= ~bit;
    1770:	ec 91       	ld	r30, X
    1772:	2e 23       	and	r18, r30
    1774:	0b c0       	rjmp	.+22     	; 0x178c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1776:	62 30       	cpi	r22, 0x02	; 2
    1778:	61 f4       	brne	.+24     	; 0x1792 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    177a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    177c:	f8 94       	cli
		*reg &= ~bit;
    177e:	88 81       	ld	r24, Y
    1780:	32 2f       	mov	r19, r18
    1782:	30 95       	com	r19
    1784:	83 23       	and	r24, r19
    1786:	88 83       	st	Y, r24
		*out |= bit;
    1788:	ec 91       	ld	r30, X
    178a:	2e 2b       	or	r18, r30
    178c:	2c 93       	st	X, r18
		SREG = oldSREG;
    178e:	9f bf       	out	0x3f, r25	; 63
    1790:	06 c0       	rjmp	.+12     	; 0x179e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1792:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1794:	f8 94       	cli
		*reg |= bit;
    1796:	e8 81       	ld	r30, Y
    1798:	2e 2b       	or	r18, r30
    179a:	28 83       	st	Y, r18
		SREG = oldSREG;
    179c:	8f bf       	out	0x3f, r24	; 63
	}
}
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	f9 01       	movw	r30, r18
    17b0:	e3 50       	subi	r30, 0x03	; 3
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    17b6:	f9 01       	movw	r30, r18
    17b8:	e4 5e       	subi	r30, 0xE4	; 228
    17ba:	fe 4f       	sbci	r31, 0xFE	; 254
    17bc:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    17be:	f9 01       	movw	r30, r18
    17c0:	e5 5c       	subi	r30, 0xC5	; 197
    17c2:	fe 4f       	sbci	r31, 0xFE	; 254
    17c4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    17c6:	cc 23       	and	r28, r28
    17c8:	c1 f0       	breq	.+48     	; 0x17fa <digitalWrite+0x56>
    17ca:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    17cc:	81 11       	cpse	r24, r1
    17ce:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <turnOffPWM>

	out = portOutputRegister(port);
    17d2:	ec 2f       	mov	r30, r28
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	ee 0f       	add	r30, r30
    17d8:	ff 1f       	adc	r31, r31
    17da:	e6 5a       	subi	r30, 0xA6	; 166
    17dc:	fe 4f       	sbci	r31, 0xFE	; 254
    17de:	a5 91       	lpm	r26, Z+
    17e0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    17e2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    17e4:	f8 94       	cli

	if (val == LOW) {
    17e6:	11 11       	cpse	r17, r1
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <digitalWrite+0x4e>
		*out &= ~bit;
    17ea:	8c 91       	ld	r24, X
    17ec:	d0 95       	com	r29
    17ee:	d8 23       	and	r29, r24
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <digitalWrite+0x52>
	} else {
		*out |= bit;
    17f2:	ec 91       	ld	r30, X
    17f4:	de 2b       	or	r29, r30
    17f6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    17f8:	9f bf       	out	0x3f, r25	; 63
}
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	08 95       	ret

00001802 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	08 95       	ret

00001806 <_ZN15RHGenericDriver14setPromiscuousEb>:
    return false;
}

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
    1806:	fc 01       	movw	r30, r24
    1808:	64 83       	std	Z+4, r22	; 0x04
    180a:	08 95       	ret

0000180c <_ZN15RHGenericDriver14setThisAddressEh>:
}

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
    180c:	fc 01       	movw	r30, r24
    180e:	63 83       	std	Z+3, r22	; 0x03
    1810:	08 95       	ret

00001812 <_ZN15RHGenericDriver11setHeaderToEh>:
}

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
    1812:	fc 01       	movw	r30, r24
    1814:	61 87       	std	Z+9, r22	; 0x09
    1816:	08 95       	ret

00001818 <_ZN15RHGenericDriver13setHeaderFromEh>:
}

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
    1818:	fc 01       	movw	r30, r24
    181a:	62 87       	std	Z+10, r22	; 0x0a
    181c:	08 95       	ret

0000181e <_ZN15RHGenericDriver11setHeaderIdEh>:
}

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
    181e:	fc 01       	movw	r30, r24
    1820:	63 87       	std	Z+11, r22	; 0x0b
    1822:	08 95       	ret

00001824 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:
}

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    1824:	fc 01       	movw	r30, r24
    _txHeaderFlags &= ~clear;
    _txHeaderFlags |= set;
    1826:	40 95       	com	r20
    1828:	94 85       	ldd	r25, Z+12	; 0x0c
    182a:	49 23       	and	r20, r25
    182c:	64 2b       	or	r22, r20
    182e:	64 87       	std	Z+12, r22	; 0x0c
    1830:	08 95       	ret

00001832 <_ZN15RHGenericDriver8headerToEv>:
}

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
    1832:	fc 01       	movw	r30, r24
    1834:	85 81       	ldd	r24, Z+5	; 0x05
}
    1836:	08 95       	ret

00001838 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
    1838:	fc 01       	movw	r30, r24
    183a:	86 81       	ldd	r24, Z+6	; 0x06
}
    183c:	08 95       	ret

0000183e <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
    183e:	fc 01       	movw	r30, r24
    1840:	87 81       	ldd	r24, Z+7	; 0x07
}
    1842:	08 95       	ret

00001844 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
    1844:	fc 01       	movw	r30, r24
    1846:	80 85       	ldd	r24, Z+8	; 0x08
}
    1848:	08 95       	ret

0000184a <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
    184a:	fc 01       	movw	r30, r24
    184c:	85 85       	ldd	r24, Z+13	; 0x0d
    184e:	96 85       	ldd	r25, Z+14	; 0x0e
}
    1850:	08 95       	ret

00001852 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
    1852:	fc 01       	movw	r30, r24
    1854:	82 81       	ldd	r24, Z+2	; 0x02
}
    1856:	08 95       	ret

00001858 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
    1858:	fc 01       	movw	r30, r24
    185a:	62 83       	std	Z+2, r22	; 0x02
    185c:	08 95       	ret

0000185e <_ZN15RHGenericDriver15isChannelActiveEv>:
}

bool  RHGenericDriver::sleep()
{
    return false;
}
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	08 95       	ret

00001862 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
    1862:	fc 01       	movw	r30, r24
    1864:	87 85       	ldd	r24, Z+15	; 0x0f
    1866:	90 89       	ldd	r25, Z+16	; 0x10
}
    1868:	08 95       	ret

0000186a <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
    186a:	fc 01       	movw	r30, r24
    186c:	81 89       	ldd	r24, Z+17	; 0x11
    186e:	92 89       	ldd	r25, Z+18	; 0x12
}
    1870:	08 95       	ret

00001872 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
    1872:	fc 01       	movw	r30, r24
    1874:	83 89       	ldd	r24, Z+19	; 0x13
    1876:	94 89       	ldd	r25, Z+20	; 0x14
}
    1878:	08 95       	ret

0000187a <_ZN15RHGenericDriver13waitAvailableEv>:
    return true;
}

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	ec 01       	movw	r28, r24
    while (!available())
    1880:	e8 81       	ld	r30, Y
    1882:	f9 81       	ldd	r31, Y+1	; 0x01
    1884:	02 80       	ldd	r0, Z+2	; 0x02
    1886:	f3 81       	ldd	r31, Z+3	; 0x03
    1888:	e0 2d       	mov	r30, r0
    188a:	ce 01       	movw	r24, r28
    188c:	09 95       	icall
    188e:	81 11       	cpse	r24, r1
    1890:	03 c0       	rjmp	.+6      	; 0x1898 <_ZN15RHGenericDriver13waitAvailableEv+0x1e>
	YIELD;
    1892:	0e 94 74 13 	call	0x26e8	; 0x26e8 <yield>
}

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
    while (!available())
    1896:	f4 cf       	rjmp	.-24     	; 0x1880 <_ZN15RHGenericDriver13waitAvailableEv+0x6>
	YIELD;
}
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	08 95       	ret

0000189e <_ZN15RHGenericDriver14waitPacketSentEv>:
    }
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	ec 01       	movw	r28, r24
    while (_mode == RHModeTx)
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	83 30       	cpi	r24, 0x03	; 3
    18a8:	19 f4       	brne	.+6      	; 0x18b0 <_ZN15RHGenericDriver14waitPacketSentEv+0x12>
	YIELD; // Wait for any previous transmit to finish
    18aa:	0e 94 74 13 	call	0x26e8	; 0x26e8 <yield>
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
    18ae:	fa cf       	rjmp	.-12     	; 0x18a4 <_ZN15RHGenericDriver14waitPacketSentEv+0x6>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <_ZN15RHGenericDriver20waitAvailableTimeoutEj>:

// Blocks until a valid message is received or timeout expires
// Return true if there is a message available
// Works correctly even on millis() rollover
bool RHGenericDriver::waitAvailableTimeout(uint16_t timeout)
{
    18b8:	8f 92       	push	r8
    18ba:	9f 92       	push	r9
    18bc:	af 92       	push	r10
    18be:	bf 92       	push	r11
    18c0:	cf 92       	push	r12
    18c2:	df 92       	push	r13
    18c4:	ef 92       	push	r14
    18c6:	ff 92       	push	r15
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
    18cc:	ec 01       	movw	r28, r24
    18ce:	6b 01       	movw	r12, r22
    unsigned long starttime = millis();
    18d0:	0e 94 96 0a 	call	0x152c	; 0x152c <millis>
    18d4:	4b 01       	movw	r8, r22
    18d6:	5c 01       	movw	r10, r24
    while ((millis() - starttime) < timeout)
    18d8:	e1 2c       	mov	r14, r1
    18da:	f1 2c       	mov	r15, r1
    18dc:	0e 94 96 0a 	call	0x152c	; 0x152c <millis>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	88 19       	sub	r24, r8
    18e6:	99 09       	sbc	r25, r9
    18e8:	aa 09       	sbc	r26, r10
    18ea:	bb 09       	sbc	r27, r11
    18ec:	8c 15       	cp	r24, r12
    18ee:	9d 05       	cpc	r25, r13
    18f0:	ae 05       	cpc	r26, r14
    18f2:	bf 05       	cpc	r27, r15
    18f4:	60 f4       	brcc	.+24     	; 0x190e <_ZN15RHGenericDriver20waitAvailableTimeoutEj+0x56>
    {
        if (available())
    18f6:	e8 81       	ld	r30, Y
    18f8:	f9 81       	ldd	r31, Y+1	; 0x01
    18fa:	02 80       	ldd	r0, Z+2	; 0x02
    18fc:	f3 81       	ldd	r31, Z+3	; 0x03
    18fe:	e0 2d       	mov	r30, r0
    1900:	ce 01       	movw	r24, r28
    1902:	09 95       	icall
    1904:	81 11       	cpse	r24, r1
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <_ZN15RHGenericDriver20waitAvailableTimeoutEj+0x58>
	{
           return true;
	}
	YIELD;
    1908:	0e 94 74 13 	call	0x26e8	; 0x26e8 <yield>
// Return true if there is a message available
// Works correctly even on millis() rollover
bool RHGenericDriver::waitAvailableTimeout(uint16_t timeout)
{
    unsigned long starttime = millis();
    while ((millis() - starttime) < timeout)
    190c:	e7 cf       	rjmp	.-50     	; 0x18dc <_ZN15RHGenericDriver20waitAvailableTimeoutEj+0x24>
	{
           return true;
	}
	YIELD;
    }
    return false;
    190e:	80 e0       	ldi	r24, 0x00	; 0
}
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	ff 90       	pop	r15
    1916:	ef 90       	pop	r14
    1918:	df 90       	pop	r13
    191a:	cf 90       	pop	r12
    191c:	bf 90       	pop	r11
    191e:	af 90       	pop	r10
    1920:	9f 90       	pop	r9
    1922:	8f 90       	pop	r8
    1924:	08 95       	ret

00001926 <_ZN15RHGenericDriver14waitPacketSentEj>:
	YIELD; // Wait for any previous transmit to finish
    return true;
}

bool RHGenericDriver::waitPacketSent(uint16_t timeout)
{
    1926:	8f 92       	push	r8
    1928:	9f 92       	push	r9
    192a:	af 92       	push	r10
    192c:	bf 92       	push	r11
    192e:	cf 92       	push	r12
    1930:	df 92       	push	r13
    1932:	ef 92       	push	r14
    1934:	ff 92       	push	r15
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	ec 01       	movw	r28, r24
    193c:	6b 01       	movw	r12, r22
    unsigned long starttime = millis();
    193e:	0e 94 96 0a 	call	0x152c	; 0x152c <millis>
    1942:	4b 01       	movw	r8, r22
    1944:	5c 01       	movw	r10, r24
    while ((millis() - starttime) < timeout)
    1946:	e1 2c       	mov	r14, r1
    1948:	f1 2c       	mov	r15, r1
    194a:	0e 94 96 0a 	call	0x152c	; 0x152c <millis>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	88 19       	sub	r24, r8
    1954:	99 09       	sbc	r25, r9
    1956:	aa 09       	sbc	r26, r10
    1958:	bb 09       	sbc	r27, r11
    195a:	8c 15       	cp	r24, r12
    195c:	9d 05       	cpc	r25, r13
    195e:	ae 05       	cpc	r26, r14
    1960:	bf 05       	cpc	r27, r15
    1962:	30 f4       	brcc	.+12     	; 0x1970 <_ZN15RHGenericDriver14waitPacketSentEj+0x4a>
    {
        if (_mode != RHModeTx) // Any previous transmit finished?
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	83 30       	cpi	r24, 0x03	; 3
    1968:	29 f4       	brne	.+10     	; 0x1974 <_ZN15RHGenericDriver14waitPacketSentEj+0x4e>
           return true;
	YIELD;
    196a:	0e 94 74 13 	call	0x26e8	; 0x26e8 <yield>
}

bool RHGenericDriver::waitPacketSent(uint16_t timeout)
{
    unsigned long starttime = millis();
    while ((millis() - starttime) < timeout)
    196e:	ed cf       	rjmp	.-38     	; 0x194a <_ZN15RHGenericDriver14waitPacketSentEj+0x24>
    {
        if (_mode != RHModeTx) // Any previous transmit finished?
           return true;
	YIELD;
    }
    return false;
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <_ZN15RHGenericDriver14waitPacketSentEj+0x50>
{
    unsigned long starttime = millis();
    while ((millis() - starttime) < timeout)
    {
        if (_mode != RHModeTx) // Any previous transmit finished?
           return true;
    1974:	81 e0       	ldi	r24, 0x01	; 1
	YIELD;
    }
    return false;
}
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	ff 90       	pop	r15
    197c:	ef 90       	pop	r14
    197e:	df 90       	pop	r13
    1980:	cf 90       	pop	r12
    1982:	bf 90       	pop	r11
    1984:	af 90       	pop	r10
    1986:	9f 90       	pop	r9
    1988:	8f 90       	pop	r8
    198a:	08 95       	ret

0000198c <_ZN15RHGenericDriver7waitCADEv>:

// Wait until no channel activity detected or timeout
bool RHGenericDriver::waitCAD()
{
    198c:	cf 92       	push	r12
    198e:	df 92       	push	r13
    1990:	ef 92       	push	r14
    1992:	ff 92       	push	r15
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    if (!_cad_timeout)
    1998:	fc 01       	movw	r30, r24
    199a:	26 89       	ldd	r18, Z+22	; 0x16
    199c:	37 89       	ldd	r19, Z+23	; 0x17
    199e:	23 2b       	or	r18, r19
    19a0:	91 f1       	breq	.+100    	; 0x1a06 <_ZN15RHGenericDriver7waitCADEv+0x7a>
    19a2:	ec 01       	movw	r28, r24
    // Wait for any channel activity to finish or timeout
    // Sophisticated DCF function...
    // DCF : BackoffTime = random() x aSlotTime
    // 100 - 1000 ms
    // 10 sec timeout
    unsigned long t = millis();
    19a4:	0e 94 96 0a 	call	0x152c	; 0x152c <millis>
    19a8:	6b 01       	movw	r12, r22
    19aa:	7c 01       	movw	r14, r24
    while (isChannelActive())
    19ac:	e8 81       	ld	r30, Y
    19ae:	f9 81       	ldd	r31, Y+1	; 0x01
    19b0:	04 88       	ldd	r0, Z+20	; 0x14
    19b2:	f5 89       	ldd	r31, Z+21	; 0x15
    19b4:	e0 2d       	mov	r30, r0
    19b6:	ce 01       	movw	r24, r28
    19b8:	09 95       	icall
    19ba:	88 23       	and	r24, r24
    19bc:	21 f1       	breq	.+72     	; 0x1a06 <_ZN15RHGenericDriver7waitCADEv+0x7a>
    {
         if (millis() - t > _cad_timeout) 
    19be:	0e 94 96 0a 	call	0x152c	; 0x152c <millis>
    19c2:	ab 01       	movw	r20, r22
    19c4:	bc 01       	movw	r22, r24
    19c6:	4c 19       	sub	r20, r12
    19c8:	5d 09       	sbc	r21, r13
    19ca:	6e 09       	sbc	r22, r14
    19cc:	7f 09       	sbc	r23, r15
    19ce:	8e 89       	ldd	r24, Y+22	; 0x16
    19d0:	9f 89       	ldd	r25, Y+23	; 0x17
    19d2:	a0 e0       	ldi	r26, 0x00	; 0
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	84 17       	cp	r24, r20
    19d8:	95 07       	cpc	r25, r21
    19da:	a6 07       	cpc	r26, r22
    19dc:	b7 07       	cpc	r27, r23
    19de:	a8 f0       	brcs	.+42     	; 0x1a0a <_ZN15RHGenericDriver7waitCADEv+0x7e>
	     return false;
#if (RH_PLATFORM == RH_PLATFORM_STM32) // stdlib on STMF103 gets confused if random is redefined
	 delay(_random(1, 10) * 100);
#else
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
    19e0:	2a e0       	ldi	r18, 0x0A	; 10
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	50 e0       	ldi	r21, 0x00	; 0
    19e8:	61 e0       	ldi	r22, 0x01	; 1
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <_Z6randomll>
    19f4:	9b 01       	movw	r18, r22
    19f6:	ac 01       	movw	r20, r24
    19f8:	a4 e6       	ldi	r26, 0x64	; 100
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	0e 94 31 18 	call	0x3062	; 0x3062 <__muluhisi3>
    1a00:	0e 94 c7 0a 	call	0x158e	; 0x158e <delay>
    1a04:	d3 cf       	rjmp	.-90     	; 0x19ac <_ZN15RHGenericDriver7waitCADEv+0x20>

// Wait until no channel activity detected or timeout
bool RHGenericDriver::waitCAD()
{
    if (!_cad_timeout)
	return true;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	01 c0       	rjmp	.+2      	; 0x1a0c <_ZN15RHGenericDriver7waitCADEv+0x80>
    // 10 sec timeout
    unsigned long t = millis();
    while (isChannelActive())
    {
         if (millis() - t > _cad_timeout) 
	     return false;
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
#endif
    }

    return true;
}
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	ff 90       	pop	r15
    1a12:	ef 90       	pop	r14
    1a14:	df 90       	pop	r13
    1a16:	cf 90       	pop	r12
    1a18:	08 95       	ret

00001a1a <_ZN15RHGenericDriverC1Ev>:
// Copyright (C) 2014 Mike McCauley
// $Id: RHGenericDriver.cpp,v 1.23 2018/02/11 23:57:18 mikem Exp $

#include <RHGenericDriver.h>

RHGenericDriver::RHGenericDriver()
    1a1a:	fc 01       	movw	r30, r24
    _txHeaderId(0),
    _txHeaderFlags(0),
    _rxBad(0),
    _rxGood(0),
    _txGood(0),
    _cad_timeout(0)
    1a1c:	82 e2       	ldi	r24, 0x22	; 34
    1a1e:	92 e0       	ldi	r25, 0x02	; 2
    1a20:	91 83       	std	Z+1, r25	; 0x01
    1a22:	80 83       	st	Z, r24
    1a24:	12 82       	std	Z+2, r1	; 0x02
    1a26:	8f ef       	ldi	r24, 0xFF	; 255
    1a28:	83 83       	std	Z+3, r24	; 0x03
    1a2a:	81 87       	std	Z+9, r24	; 0x09
    1a2c:	82 87       	std	Z+10, r24	; 0x0a
    1a2e:	13 86       	std	Z+11, r1	; 0x0b
    1a30:	14 86       	std	Z+12, r1	; 0x0c
    1a32:	10 8a       	std	Z+16, r1	; 0x10
    1a34:	17 86       	std	Z+15, r1	; 0x0f
    1a36:	12 8a       	std	Z+18, r1	; 0x12
    1a38:	11 8a       	std	Z+17, r1	; 0x11
    1a3a:	14 8a       	std	Z+20, r1	; 0x14
    1a3c:	13 8a       	std	Z+19, r1	; 0x13
    1a3e:	17 8a       	std	Z+23, r1	; 0x17
    1a40:	16 8a       	std	Z+22, r1	; 0x16
    1a42:	08 95       	ret

00001a44 <_ZN13RHHardwareSPI8transferEh>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    1a44:	6e bd       	out	0x2e, r22	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    1a46:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    1a48:	0d b4       	in	r0, 0x2d	; 45
    1a4a:	07 fe       	sbrs	r0, 7
    1a4c:	fd cf       	rjmp	.-6      	; 0x1a48 <_ZN13RHHardwareSPI8transferEh+0x4>
    return SPDR;
    1a4e:	8e b5       	in	r24, 0x2e	; 46
}

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
    return SPI.transfer(data);
}
    1a50:	08 95       	ret

00001a52 <_ZN13RHHardwareSPI15attachInterruptEv>:
    SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((clockDiv >> 2) & SPI_2XCLOCK_MASK);
  }
  // These undocumented functions should not be used.  SPI.transfer()
  // polls the hardware flag which is automatically cleared as the
  // AVR responds to SPI's interrupt
  inline static void attachInterrupt() { SPCR |= _BV(SPIE); }
    1a52:	8c b5       	in	r24, 0x2c	; 44
    1a54:	80 68       	ori	r24, 0x80	; 128
    1a56:	8c bd       	out	0x2c, r24	; 44
    1a58:	08 95       	ret

00001a5a <_ZN13RHHardwareSPI15detachInterruptEv>:
  inline static void detachInterrupt() { SPCR &= ~_BV(SPIE); }
    1a5a:	8c b5       	in	r24, 0x2c	; 44
    1a5c:	8f 77       	andi	r24, 0x7F	; 127
    1a5e:	8c bd       	out	0x2c, r24	; 44
    1a60:	08 95       	ret

00001a62 <_ZN13RHHardwareSPI16beginTransactionEv>:
{
    return SPI.end();
}

void RHHardwareSPI::beginTransaction()
{
    1a62:	fc 01       	movw	r30, r24
    1a64:	45 81       	ldd	r20, Z+5	; 0x05
    1a66:	36 81       	ldd	r19, Z+6	; 0x06

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    1a68:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZN8SPIClass13interruptModeE>
    1a6c:	88 23       	and	r24, r24
    1a6e:	99 f0       	breq	.+38     	; 0x1a96 <_ZN13RHHardwareSPI16beginTransactionEv+0x34>
      uint8_t sreg = SREG;
    1a70:	2f b7       	in	r18, 0x3f	; 63
      noInterrupts();
    1a72:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1a74:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZN8SPIClass13interruptModeE>
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	59 f4       	brne	.+22     	; 0x1a92 <_ZN13RHHardwareSPI16beginTransactionEv+0x30>
        interruptSave = SPI_AVR_EIMSK;
    1a7c:	8d b3       	in	r24, 0x1d	; 29
    1a7e:	80 93 39 04 	sts	0x0439, r24	; 0x800439 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    1a82:	9d b3       	in	r25, 0x1d	; 29
    1a84:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <_ZN8SPIClass13interruptMaskE>
    1a88:	80 95       	com	r24
    1a8a:	89 23       	and	r24, r25
    1a8c:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    1a8e:	2f bf       	out	0x3f, r18	; 63
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <_ZN13RHHardwareSPI16beginTransactionEv+0x34>
      } else
      #endif
      {
        interruptSave = sreg;
    1a92:	20 93 39 04 	sts	0x0439, r18	; 0x800439 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    1a96:	4c bd       	out	0x2c, r20	; 44
    SPSR = settings.spsr;
    1a98:	3d bd       	out	0x2d, r19	; 45
    1a9a:	08 95       	ret

00001a9c <_ZN13RHHardwareSPI14usingInterruptEh>:
    SPI.endTransaction();
#endif
}

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
    1a9c:	08 95       	ret

00001a9e <_ZN13RHHardwareSPI5beginEv>:
    SPI.detachInterrupt();
#endif
}
    
void RHHardwareSPI::begin() 
{
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	fc 01       	movw	r30, r24
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
    1aa4:	82 81       	ldd	r24, Z+2	; 0x02
    1aa6:	84 30       	cpi	r24, 0x04	; 4
    1aa8:	59 f0       	breq	.+22     	; 0x1ac0 <_ZN13RHHardwareSPI5beginEv+0x22>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
    1aaa:	83 30       	cpi	r24, 0x03	; 3
    1aac:	71 f0       	breq	.+28     	; 0x1aca <_ZN13RHHardwareSPI5beginEv+0x2c>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
    1aae:	82 30       	cpi	r24, 0x02	; 2
    1ab0:	89 f0       	breq	.+34     	; 0x1ad4 <_ZN13RHHardwareSPI5beginEv+0x36>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	a1 f0       	breq	.+40     	; 0x1ade <_ZN13RHHardwareSPI5beginEv+0x40>
       frequency = 2000000;
   else
       frequency = 1000000;
    1ab6:	40 e4       	ldi	r20, 0x40	; 64
    1ab8:	52 e4       	ldi	r21, 0x42	; 66
    1aba:	6f e0       	ldi	r22, 0x0F	; 15
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	13 c0       	rjmp	.+38     	; 0x1ae6 <_ZN13RHHardwareSPI5beginEv+0x48>
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
       frequency = 16000000;
    1ac0:	40 e0       	ldi	r20, 0x00	; 0
    1ac2:	54 e2       	ldi	r21, 0x24	; 36
    1ac4:	64 ef       	ldi	r22, 0xF4	; 244
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	0e c0       	rjmp	.+28     	; 0x1ae6 <_ZN13RHHardwareSPI5beginEv+0x48>
   else if (_frequency == Frequency8MHz)
       frequency = 8000000;
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	52 e1       	ldi	r21, 0x12	; 18
    1ace:	6a e7       	ldi	r22, 0x7A	; 122
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	09 c0       	rjmp	.+18     	; 0x1ae6 <_ZN13RHHardwareSPI5beginEv+0x48>
   else if (_frequency == Frequency4MHz)
       frequency = 4000000;
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	59 e0       	ldi	r21, 0x09	; 9
    1ad8:	6d e3       	ldi	r22, 0x3D	; 61
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	04 c0       	rjmp	.+8      	; 0x1ae6 <_ZN13RHHardwareSPI5beginEv+0x48>
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
    1ade:	40 e8       	ldi	r20, 0x80	; 128
    1ae0:	54 e8       	ldi	r21, 0x84	; 132
    1ae2:	6e e1       	ldi	r22, 0x1E	; 30
    1ae4:	70 e0       	ldi	r23, 0x00	; 0
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;

    uint8_t dataMode;
    if (_dataMode == DataMode0)
    1ae6:	84 81       	ldd	r24, Z+4	; 0x04
    1ae8:	88 23       	and	r24, r24
    1aea:	61 f0       	breq	.+24     	; 0x1b04 <_ZN13RHHardwareSPI5beginEv+0x66>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	31 f0       	breq	.+12     	; 0x1afc <_ZN13RHHardwareSPI5beginEv+0x5e>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
    1af0:	82 30       	cpi	r24, 0x02	; 2
    1af2:	31 f0       	breq	.+12     	; 0x1b00 <_ZN13RHHardwareSPI5beginEv+0x62>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
    1af4:	83 30       	cpi	r24, 0x03	; 3
    1af6:	31 f4       	brne	.+12     	; 0x1b04 <_ZN13RHHardwareSPI5beginEv+0x66>
	dataMode = SPI_MODE3;
    1af8:	9c e0       	ldi	r25, 0x0C	; 12
    1afa:	05 c0       	rjmp	.+10     	; 0x1b06 <_ZN13RHHardwareSPI5beginEv+0x68>

    uint8_t dataMode;
    if (_dataMode == DataMode0)
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
	dataMode = SPI_MODE1;
    1afc:	94 e0       	ldi	r25, 0x04	; 4
    1afe:	03 c0       	rjmp	.+6      	; 0x1b06 <_ZN13RHHardwareSPI5beginEv+0x68>
    else if (_dataMode == DataMode2)
	dataMode = SPI_MODE2;
    1b00:	98 e0       	ldi	r25, 0x08	; 8
    1b02:	01 c0       	rjmp	.+2      	; 0x1b06 <_ZN13RHHardwareSPI5beginEv+0x68>
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	00 e0       	ldi	r16, 0x00	; 0
    1b08:	12 e1       	ldi	r17, 0x12	; 18
    1b0a:	2a e7       	ldi	r18, 0x7A	; 122
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    1b10:	40 17       	cp	r20, r16
    1b12:	51 07       	cpc	r21, r17
    1b14:	62 07       	cpc	r22, r18
    1b16:	73 07       	cpc	r23, r19
    1b18:	40 f4       	brcc	.+16     	; 0x1b2a <_ZN13RHHardwareSPI5beginEv+0x8c>
        clockSetting /= 2;
    1b1a:	36 95       	lsr	r19
    1b1c:	27 95       	ror	r18
    1b1e:	17 95       	ror	r17
    1b20:	07 95       	ror	r16
        clockDiv++;
    1b22:	8f 5f       	subi	r24, 0xFF	; 255
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    1b24:	86 30       	cpi	r24, 0x06	; 6
    1b26:	a1 f7       	brne	.-24     	; 0x1b10 <_ZN13RHHardwareSPI5beginEv+0x72>
      }
    }

    // Compensate for the duplicate fosc/64
    if (clockDiv == 6)
    clockDiv = 7;
    1b28:	87 e0       	ldi	r24, 0x07	; 7

    // Invert the SPI2X bit
    clockDiv ^= 0x1;
    1b2a:	21 e0       	ldi	r18, 0x01	; 1
    1b2c:	28 27       	eor	r18, r24

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    1b2e:	83 81       	ldd	r24, Z+3	; 0x03
    1b30:	81 30       	cpi	r24, 0x01	; 1
    1b32:	11 f0       	breq	.+4      	; 0x1b38 <_ZN13RHHardwareSPI5beginEv+0x9a>
    1b34:	80 e5       	ldi	r24, 0x50	; 80
    1b36:	01 c0       	rjmp	.+2      	; 0x1b3a <_ZN13RHHardwareSPI5beginEv+0x9c>
    1b38:	80 e7       	ldi	r24, 0x70	; 112

    // Save the settings for use in transactions
   _settings = SPISettings(frequency, bitOrder, dataMode);
    1b3a:	32 2f       	mov	r19, r18
    1b3c:	36 95       	lsr	r19
    1b3e:	93 2b       	or	r25, r19
    1b40:	98 2b       	or	r25, r24
    1b42:	95 83       	std	Z+5, r25	; 0x05
    1b44:	21 70       	andi	r18, 0x01	; 1
    1b46:	26 83       	std	Z+6, r18	; 0x06
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    else
	dataMode = SPI_MODE0;

    // Save the settings for use in transactions
   _settings = SPISettings(frequency, bitOrder, dataMode);
   SPI.begin();
    1b4c:	0c 94 0e 12 	jmp	0x241c	; 0x241c <_ZN8SPIClass5beginEv>

00001b50 <_ZN13RHHardwareSPI3endEv>:
#endif // SPI_HAS_TRANSACTION
}

void RHHardwareSPI::end() 
{
    return SPI.end();
    1b50:	0c 94 44 12 	jmp	0x2488	; 0x2488 <_ZN8SPIClass3endEv>

00001b54 <_ZN13RHHardwareSPI14endTransactionEv>:
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    1b54:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <_ZN8SPIClass13interruptModeE>
    1b58:	88 23       	and	r24, r24
    1b5a:	61 f0       	breq	.+24     	; 0x1b74 <_ZN13RHHardwareSPI14endTransactionEv+0x20>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    1b5c:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    1b5e:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1b60:	20 91 3b 04 	lds	r18, 0x043B	; 0x80043b <_ZN8SPIClass13interruptModeE>
    1b64:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <_ZN8SPIClass13interruptSaveE>
    1b68:	21 30       	cpi	r18, 0x01	; 1
    1b6a:	19 f4       	brne	.+6      	; 0x1b72 <_ZN13RHHardwareSPI14endTransactionEv+0x1e>
        SPI_AVR_EIMSK = interruptSave;
    1b6c:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    1b6e:	9f bf       	out	0x3f, r25	; 63
    1b70:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
    1b72:	8f bf       	out	0x3f, r24	; 63
    1b74:	08 95       	ret

00001b76 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
    1b7a:	ec 01       	movw	r28, r24
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
    1b7c:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
    1b80:	8e e5       	ldi	r24, 0x5E	; 94
    1b82:	92 e0       	ldi	r25, 0x02	; 2
    1b84:	99 83       	std	Y+1, r25	; 0x01
    1b86:	88 83       	st	Y, r24
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    1b88:	80 e5       	ldi	r24, 0x50	; 80
    1b8a:	8d 83       	std	Y+5, r24	; 0x05
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    1b8c:	1e 82       	std	Y+6, r1	; 0x06
{
}
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	08 95       	ret

00001b94 <_GLOBAL__sub_I_hardware_spi>:
// $Id: RHHardwareSPI.cpp,v 1.20 2018/02/11 23:57:18 mikem Exp $

#include <RHHardwareSPI.h>

// Declare a single default instance of the hardware SPI interface class
RHHardwareSPI hardware_spi;
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	8b e2       	ldi	r24, 0x2B	; 43
    1b9c:	94 e0       	ldi	r25, 0x04	; 4
    1b9e:	0c 94 bb 0d 	jmp	0x1b76	; 0x1b76 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>

00001ba2 <_ZN7RH_RF6916maxMessageLengthEv>:
    printRegister(RH_RF69_REG_58_TESTLNA);
    printRegister(RH_RF69_REG_6F_TESTDAGC);
    printRegister(RH_RF69_REG_71_TESTAFC);

    return true;
}
    1ba2:	8c e3       	ldi	r24, 0x3C	; 60
    1ba4:	08 95       	ret

00001ba6 <_ZN7RH_RF6916setEncryptionKeyEPh.part.4.constprop.5>:
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	ec 01       	movw	r28, r24
    1bac:	6d e3       	ldi	r22, 0x3D	; 61
    1bae:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <_ZN11RHSPIDriver7spiReadEh>
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	4e 7f       	andi	r20, 0xFE	; 254
    1bb6:	6d e3       	ldi	r22, 0x3D	; 61
    1bb8:	ce 01       	movw	r24, r28
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>

00001bc2 <_ZN7RH_RF694recvEPhS0_>:
    1bc2:	cf 92       	push	r12
    1bc4:	df 92       	push	r13
    1bc6:	ef 92       	push	r14
    1bc8:	ff 92       	push	r15
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	cf 93       	push	r28
    1bd0:	df 93       	push	r29
    1bd2:	ec 01       	movw	r28, r24
    1bd4:	6b 01       	movw	r12, r22
    1bd6:	8a 01       	movw	r16, r20
    1bd8:	e8 81       	ld	r30, Y
    1bda:	f9 81       	ldd	r31, Y+1	; 0x01
    1bdc:	02 80       	ldd	r0, Z+2	; 0x02
    1bde:	f3 81       	ldd	r31, Z+3	; 0x03
    1be0:	e0 2d       	mov	r30, r0
    1be2:	09 95       	icall
    1be4:	f8 2e       	mov	r15, r24
    1be6:	88 23       	and	r24, r24
    1be8:	e1 f0       	breq	.+56     	; 0x1c22 <_ZN7RH_RF694recvEPhS0_+0x60>
    1bea:	c1 14       	cp	r12, r1
    1bec:	d1 04       	cpc	r13, r1
    1bee:	b1 f0       	breq	.+44     	; 0x1c1c <_ZN7RH_RF694recvEPhS0_+0x5a>
    1bf0:	01 15       	cp	r16, r1
    1bf2:	11 05       	cpc	r17, r1
    1bf4:	99 f0       	breq	.+38     	; 0x1c1c <_ZN7RH_RF694recvEPhS0_+0x5a>
    1bf6:	ef b6       	in	r14, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	89 a1       	ldd	r24, Y+33	; 0x21
    1bfc:	f8 01       	movw	r30, r16
    1bfe:	90 81       	ld	r25, Z
    1c00:	89 17       	cp	r24, r25
    1c02:	10 f4       	brcc	.+4      	; 0x1c08 <_ZN7RH_RF694recvEPhS0_+0x46>
    1c04:	89 a1       	ldd	r24, Y+33	; 0x21
    1c06:	80 83       	st	Z, r24
    1c08:	f8 01       	movw	r30, r16
    1c0a:	40 81       	ld	r20, Z
    1c0c:	50 e0       	ldi	r21, 0x00	; 0
    1c0e:	be 01       	movw	r22, r28
    1c10:	6e 5d       	subi	r22, 0xDE	; 222
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
    1c14:	c6 01       	movw	r24, r12
    1c16:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <memcpy>
    1c1a:	ef be       	out	0x3f, r14	; 63
    1c1c:	c2 5a       	subi	r28, 0xA2	; 162
    1c1e:	df 4f       	sbci	r29, 0xFF	; 255
    1c20:	18 82       	st	Y, r1
    1c22:	8f 2d       	mov	r24, r15
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	1f 91       	pop	r17
    1c2a:	0f 91       	pop	r16
    1c2c:	ff 90       	pop	r15
    1c2e:	ef 90       	pop	r14
    1c30:	df 90       	pop	r13
    1c32:	cf 90       	pop	r12
    1c34:	08 95       	ret

00001c36 <_ZN7RH_RF695sleepEv>:
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	22 81       	ldd	r18, Z+2	; 0x02
    1c3e:	21 30       	cpi	r18, 0x01	; 1
    1c40:	39 f0       	breq	.+14     	; 0x1c50 <_ZN7RH_RF695sleepEv+0x1a>
    1c42:	ec 01       	movw	r28, r24
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	61 e0       	ldi	r22, 0x01	; 1
    1c48:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	8a 83       	std	Y+2, r24	; 0x02
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	08 95       	ret

00001c58 <_ZN7RH_RF69C1EhhR12RHGenericSPI>:
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	ec 01       	movw	r28, r24
    1c60:	14 2f       	mov	r17, r20
    1c62:	a9 01       	movw	r20, r18
    1c64:	0e 94 93 15 	call	0x2b26	; 0x2b26 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
    1c68:	88 e7       	ldi	r24, 0x78	; 120
    1c6a:	92 e0       	ldi	r25, 0x02	; 2
    1c6c:	99 83       	std	Y+1, r25	; 0x01
    1c6e:	88 83       	st	Y, r24
    1c70:	1c 8f       	std	Y+28, r17	; 0x1c
    1c72:	84 e0       	ldi	r24, 0x04	; 4
    1c74:	8e 8f       	std	Y+30, r24	; 0x1e
    1c76:	8f ef       	ldi	r24, 0xFF	; 255
    1c78:	8d 8f       	std	Y+29, r24	; 0x1d
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	08 95       	ret

00001c82 <_ZN7RH_RF698readFifoEv>:
    1c82:	ef 92       	push	r14
    1c84:	ff 92       	push	r15
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	ec 01       	movw	r28, r24
    1c90:	ff b6       	in	r15, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c98:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
    1c9c:	88 8d       	ldd	r24, Y+24	; 0x18
    1c9e:	99 8d       	ldd	r25, Y+25	; 0x19
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	ed 91       	ld	r30, X+
    1ca4:	fc 91       	ld	r31, X
    1ca6:	00 88       	ldd	r0, Z+16	; 0x10
    1ca8:	f1 89       	ldd	r31, Z+17	; 0x11
    1caa:	e0 2d       	mov	r30, r0
    1cac:	09 95       	icall
    1cae:	88 8d       	ldd	r24, Y+24	; 0x18
    1cb0:	99 8d       	ldd	r25, Y+25	; 0x19
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	ed 91       	ld	r30, X+
    1cb6:	fc 91       	ld	r31, X
    1cb8:	01 90       	ld	r0, Z+
    1cba:	f0 81       	ld	r31, Z
    1cbc:	e0 2d       	mov	r30, r0
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	09 95       	icall
    1cc2:	88 8d       	ldd	r24, Y+24	; 0x18
    1cc4:	99 8d       	ldd	r25, Y+25	; 0x19
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	ed 91       	ld	r30, X+
    1cca:	fc 91       	ld	r31, X
    1ccc:	01 90       	ld	r0, Z+
    1cce:	f0 81       	ld	r31, Z
    1cd0:	e0 2d       	mov	r30, r0
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	09 95       	icall
    1cd6:	08 2f       	mov	r16, r24
    1cd8:	8c ef       	ldi	r24, 0xFC	; 252
    1cda:	80 0f       	add	r24, r16
    1cdc:	8d 33       	cpi	r24, 0x3D	; 61
    1cde:	00 f5       	brcc	.+64     	; 0x1d20 <_ZN7RH_RF698readFifoEv+0x9e>
    1ce0:	88 8d       	ldd	r24, Y+24	; 0x18
    1ce2:	99 8d       	ldd	r25, Y+25	; 0x19
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	ed 91       	ld	r30, X+
    1ce8:	fc 91       	ld	r31, X
    1cea:	01 90       	ld	r0, Z+
    1cec:	f0 81       	ld	r31, Z
    1cee:	e0 2d       	mov	r30, r0
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	09 95       	icall
    1cf4:	8d 83       	std	Y+5, r24	; 0x05
    1cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf8:	81 11       	cpse	r24, r1
    1cfa:	27 c0       	rjmp	.+78     	; 0x1d4a <_ZN7RH_RF698readFifoEv+0xc8>
    1cfc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	98 17       	cp	r25, r24
    1d02:	19 f1       	breq	.+70     	; 0x1d4a <_ZN7RH_RF698readFifoEv+0xc8>
    1d04:	8d 81       	ldd	r24, Y+5	; 0x05
    1d06:	8f 3f       	cpi	r24, 0xFF	; 255
    1d08:	59 f4       	brne	.+22     	; 0x1d20 <_ZN7RH_RF698readFifoEv+0x9e>
    1d0a:	1f c0       	rjmp	.+62     	; 0x1d4a <_ZN7RH_RF698readFifoEv+0xc8>
    1d0c:	89 89       	ldd	r24, Y+17	; 0x11
    1d0e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d10:	01 96       	adiw	r24, 0x01	; 1
    1d12:	9a 8b       	std	Y+18, r25	; 0x12
    1d14:	89 8b       	std	Y+17, r24	; 0x11
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e2 5a       	subi	r30, 0xA2	; 162
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	80 83       	st	Z, r24
    1d20:	61 e0       	ldi	r22, 0x01	; 1
    1d22:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d24:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
    1d28:	88 8d       	ldd	r24, Y+24	; 0x18
    1d2a:	99 8d       	ldd	r25, Y+25	; 0x19
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	ed 91       	ld	r30, X+
    1d30:	fc 91       	ld	r31, X
    1d32:	02 88       	ldd	r0, Z+18	; 0x12
    1d34:	f3 89       	ldd	r31, Z+19	; 0x13
    1d36:	e0 2d       	mov	r30, r0
    1d38:	09 95       	icall
    1d3a:	ff be       	out	0x3f, r15	; 63
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	1f 91       	pop	r17
    1d42:	0f 91       	pop	r16
    1d44:	ff 90       	pop	r15
    1d46:	ef 90       	pop	r14
    1d48:	08 95       	ret
    1d4a:	88 8d       	ldd	r24, Y+24	; 0x18
    1d4c:	99 8d       	ldd	r25, Y+25	; 0x19
    1d4e:	dc 01       	movw	r26, r24
    1d50:	ed 91       	ld	r30, X+
    1d52:	fc 91       	ld	r31, X
    1d54:	01 90       	ld	r0, Z+
    1d56:	f0 81       	ld	r31, Z
    1d58:	e0 2d       	mov	r30, r0
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
    1d5c:	09 95       	icall
    1d5e:	8e 83       	std	Y+6, r24	; 0x06
    1d60:	88 8d       	ldd	r24, Y+24	; 0x18
    1d62:	99 8d       	ldd	r25, Y+25	; 0x19
    1d64:	dc 01       	movw	r26, r24
    1d66:	ed 91       	ld	r30, X+
    1d68:	fc 91       	ld	r31, X
    1d6a:	01 90       	ld	r0, Z+
    1d6c:	f0 81       	ld	r31, Z
    1d6e:	e0 2d       	mov	r30, r0
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	09 95       	icall
    1d74:	8f 83       	std	Y+7, r24	; 0x07
    1d76:	88 8d       	ldd	r24, Y+24	; 0x18
    1d78:	99 8d       	ldd	r25, Y+25	; 0x19
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	ed 91       	ld	r30, X+
    1d7e:	fc 91       	ld	r31, X
    1d80:	01 90       	ld	r0, Z+
    1d82:	f0 81       	ld	r31, Z
    1d84:	e0 2d       	mov	r30, r0
    1d86:	60 e0       	ldi	r22, 0x00	; 0
    1d88:	09 95       	icall
    1d8a:	88 87       	std	Y+8, r24	; 0x08
    1d8c:	19 a2       	std	Y+33, r1	; 0x21
    1d8e:	10 e0       	ldi	r17, 0x00	; 0
    1d90:	04 50       	subi	r16, 0x04	; 4
    1d92:	11 09       	sbc	r17, r1
    1d94:	89 a1       	ldd	r24, Y+33	; 0x21
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	80 17       	cp	r24, r16
    1d9a:	91 07       	cpc	r25, r17
    1d9c:	0c f0       	brlt	.+2      	; 0x1da0 <_ZN7RH_RF698readFifoEv+0x11e>
    1d9e:	b6 cf       	rjmp	.-148    	; 0x1d0c <_ZN7RH_RF698readFifoEv+0x8a>
    1da0:	e9 a0       	ldd	r14, Y+33	; 0x21
    1da2:	88 8d       	ldd	r24, Y+24	; 0x18
    1da4:	99 8d       	ldd	r25, Y+25	; 0x19
    1da6:	dc 01       	movw	r26, r24
    1da8:	ed 91       	ld	r30, X+
    1daa:	fc 91       	ld	r31, X
    1dac:	01 90       	ld	r0, Z+
    1dae:	f0 81       	ld	r31, Z
    1db0:	e0 2d       	mov	r30, r0
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	09 95       	icall
    1db6:	fe 01       	movw	r30, r28
    1db8:	ee 0d       	add	r30, r14
    1dba:	f1 1d       	adc	r31, r1
    1dbc:	82 a3       	std	Z+34, r24	; 0x22
    1dbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc0:	8f 5f       	subi	r24, 0xFF	; 255
    1dc2:	89 a3       	std	Y+33, r24	; 0x21
    1dc4:	e7 cf       	rjmp	.-50     	; 0x1d94 <_ZN7RH_RF698readFifoEv+0x112>

00001dc6 <_ZN7RH_RF6912setFrequencyEff>:
    1dc6:	cf 92       	push	r12
    1dc8:	df 92       	push	r13
    1dca:	ef 92       	push	r14
    1dcc:	ff 92       	push	r15
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	ec 01       	movw	r28, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	ba 01       	movw	r22, r20
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	34 e2       	ldi	r19, 0x24	; 36
    1ddc:	44 e7       	ldi	r20, 0x74	; 116
    1dde:	59 e4       	ldi	r21, 0x49	; 73
    1de0:	0e 94 7d 17 	call	0x2efa	; 0x2efa <__mulsf3>
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	34 e2       	ldi	r19, 0x24	; 36
    1de8:	44 e7       	ldi	r20, 0x74	; 116
    1dea:	52 e4       	ldi	r21, 0x42	; 66
    1dec:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__divsf3>
    1df0:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <__fixunssfsi>
    1df4:	6b 01       	movw	r12, r22
    1df6:	7c 01       	movw	r14, r24
    1df8:	a7 01       	movw	r20, r14
    1dfa:	66 27       	eor	r22, r22
    1dfc:	77 27       	eor	r23, r23
    1dfe:	67 e0       	ldi	r22, 0x07	; 7
    1e00:	ce 01       	movw	r24, r28
    1e02:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    1e06:	77 27       	eor	r23, r23
    1e08:	6f 2d       	mov	r22, r15
    1e0a:	5e 2d       	mov	r21, r14
    1e0c:	4d 2d       	mov	r20, r13
    1e0e:	68 e0       	ldi	r22, 0x08	; 8
    1e10:	ce 01       	movw	r24, r28
    1e12:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    1e16:	4c 2d       	mov	r20, r12
    1e18:	69 e0       	ldi	r22, 0x09	; 9
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	ff 90       	pop	r15
    1e28:	ef 90       	pop	r14
    1e2a:	df 90       	pop	r13
    1e2c:	cf 90       	pop	r12
    1e2e:	08 95       	ret

00001e30 <_ZN7RH_RF699setOpModeEh>:
    1e30:	1f 93       	push	r17
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	ec 01       	movw	r28, r24
    1e38:	16 2f       	mov	r17, r22
    1e3a:	61 e0       	ldi	r22, 0x01	; 1
    1e3c:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <_ZN11RHSPIDriver7spiReadEh>
    1e40:	41 2f       	mov	r20, r17
    1e42:	4c 71       	andi	r20, 0x1C	; 28
    1e44:	83 7e       	andi	r24, 0xE3	; 227
    1e46:	48 2b       	or	r20, r24
    1e48:	61 e0       	ldi	r22, 0x01	; 1
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    1e50:	67 e2       	ldi	r22, 0x27	; 39
    1e52:	ce 01       	movw	r24, r28
    1e54:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <_ZN11RHSPIDriver7spiReadEh>
    1e58:	87 ff       	sbrs	r24, 7
    1e5a:	fa cf       	rjmp	.-12     	; 0x1e50 <_ZN7RH_RF699setOpModeEh+0x20>
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	1f 91       	pop	r17
    1e62:	08 95       	ret

00001e64 <_ZN7RH_RF6911setModeIdleEv>:
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	fc 01       	movw	r30, r24
    1e6a:	22 81       	ldd	r18, Z+2	; 0x02
    1e6c:	22 30       	cpi	r18, 0x02	; 2
    1e6e:	a1 f0       	breq	.+40     	; 0x1e98 <_ZN7RH_RF6911setModeIdleEv+0x34>
    1e70:	ec 01       	movw	r28, r24
    1e72:	80 a1       	ldd	r24, Z+32	; 0x20
    1e74:	82 31       	cpi	r24, 0x12	; 18
    1e76:	54 f0       	brlt	.+20     	; 0x1e8c <_ZN7RH_RF6911setModeIdleEv+0x28>
    1e78:	45 e5       	ldi	r20, 0x55	; 85
    1e7a:	6a e5       	ldi	r22, 0x5A	; 90
    1e7c:	cf 01       	movw	r24, r30
    1e7e:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    1e82:	40 e7       	ldi	r20, 0x70	; 112
    1e84:	6c e5       	ldi	r22, 0x5C	; 92
    1e86:	ce 01       	movw	r24, r28
    1e88:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    1e8c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1e8e:	ce 01       	movw	r24, r28
    1e90:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZN7RH_RF699setOpModeEh>
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	8a 83       	std	Y+2, r24	; 0x02
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	08 95       	ret

00001e9e <_ZN7RH_RF6915handleInterruptEv>:
    1e9e:	1f 93       	push	r17
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	ec 01       	movw	r28, r24
    1ea6:	68 e2       	ldi	r22, 0x28	; 40
    1ea8:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <_ZN11RHSPIDriver7spiReadEh>
    1eac:	18 2f       	mov	r17, r24
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	83 30       	cpi	r24, 0x03	; 3
    1eb2:	11 f4       	brne	.+4      	; 0x1eb8 <_ZN7RH_RF6915handleInterruptEv+0x1a>
    1eb4:	13 fd       	sbrc	r17, 3
    1eb6:	23 c0       	rjmp	.+70     	; 0x1efe <_ZN7RH_RF6915handleInterruptEv+0x60>
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	84 30       	cpi	r24, 0x04	; 4
    1ebc:	49 f5       	brne	.+82     	; 0x1f10 <_ZN7RH_RF6915handleInterruptEv+0x72>
    1ebe:	12 ff       	sbrs	r17, 2
    1ec0:	27 c0       	rjmp	.+78     	; 0x1f10 <_ZN7RH_RF6915handleInterruptEv+0x72>
    1ec2:	64 e2       	ldi	r22, 0x24	; 36
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <_ZN11RHSPIDriver7spiReadEh>
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	95 95       	asr	r25
    1ece:	87 95       	ror	r24
    1ed0:	91 95       	neg	r25
    1ed2:	81 95       	neg	r24
    1ed4:	91 09       	sbc	r25, r1
    1ed6:	9e 87       	std	Y+14, r25	; 0x0e
    1ed8:	8d 87       	std	Y+13, r24	; 0x0d
    1eda:	0e 94 96 0a 	call	0x152c	; 0x152c <millis>
    1ede:	fe 01       	movw	r30, r28
    1ee0:	e1 5a       	subi	r30, 0xA1	; 161
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	60 83       	st	Z, r22
    1ee6:	71 83       	std	Z+1, r23	; 0x01
    1ee8:	82 83       	std	Z+2, r24	; 0x02
    1eea:	93 83       	std	Z+3, r25	; 0x03
    1eec:	ce 01       	movw	r24, r28
    1eee:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <_ZN7RH_RF6911setModeIdleEv>
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	1f 91       	pop	r17
    1efa:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <_ZN7RH_RF698readFifoEv>
    1efe:	ce 01       	movw	r24, r28
    1f00:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <_ZN7RH_RF6911setModeIdleEv>
    1f04:	8b 89       	ldd	r24, Y+19	; 0x13
    1f06:	9c 89       	ldd	r25, Y+20	; 0x14
    1f08:	01 96       	adiw	r24, 0x01	; 1
    1f0a:	9c 8b       	std	Y+20, r25	; 0x14
    1f0c:	8b 8b       	std	Y+19, r24	; 0x13
    1f0e:	d4 cf       	rjmp	.-88     	; 0x1eb8 <_ZN7RH_RF6915handleInterruptEv+0x1a>
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	1f 91       	pop	r17
    1f16:	08 95       	ret

00001f18 <_ZN7RH_RF694isr0Ev>:
    1f18:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <_ZN7RH_RF6919_deviceForInterruptE>
    1f1c:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <_ZN7RH_RF6919_deviceForInterruptE+0x1>
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	11 f0       	breq	.+4      	; 0x1f28 <_ZN7RH_RF694isr0Ev+0x10>
    1f24:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <_ZN7RH_RF6915handleInterruptEv>
    1f28:	08 95       	ret

00001f2a <_ZN7RH_RF694isr1Ev>:
    1f2a:	80 91 35 04 	lds	r24, 0x0435	; 0x800435 <_ZN7RH_RF6919_deviceForInterruptE+0x2>
    1f2e:	90 91 36 04 	lds	r25, 0x0436	; 0x800436 <_ZN7RH_RF6919_deviceForInterruptE+0x3>
    1f32:	00 97       	sbiw	r24, 0x00	; 0
    1f34:	11 f0       	breq	.+4      	; 0x1f3a <_ZN7RH_RF694isr1Ev+0x10>
    1f36:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <_ZN7RH_RF6915handleInterruptEv>
    1f3a:	08 95       	ret

00001f3c <_ZN7RH_RF694isr2Ev>:
    1f3c:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <_ZN7RH_RF6919_deviceForInterruptE+0x4>
    1f40:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <_ZN7RH_RF6919_deviceForInterruptE+0x5>
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	11 f0       	breq	.+4      	; 0x1f4c <_ZN7RH_RF694isr2Ev+0x10>
    1f48:	0c 94 4f 0f 	jmp	0x1e9e	; 0x1e9e <_ZN7RH_RF6915handleInterruptEv>
    1f4c:	08 95       	ret

00001f4e <_ZN7RH_RF699setModeRxEv>:
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    1f52:	fc 01       	movw	r30, r24
    1f54:	22 81       	ldd	r18, Z+2	; 0x02
    1f56:	24 30       	cpi	r18, 0x04	; 4
    1f58:	c9 f0       	breq	.+50     	; 0x1f8c <_ZN7RH_RF699setModeRxEv+0x3e>
    1f5a:	ec 01       	movw	r28, r24
    1f5c:	80 a1       	ldd	r24, Z+32	; 0x20
    1f5e:	82 31       	cpi	r24, 0x12	; 18
    1f60:	54 f0       	brlt	.+20     	; 0x1f76 <_ZN7RH_RF699setModeRxEv+0x28>
    1f62:	45 e5       	ldi	r20, 0x55	; 85
    1f64:	6a e5       	ldi	r22, 0x5A	; 90
    1f66:	cf 01       	movw	r24, r30
    1f68:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    1f6c:	40 e7       	ldi	r20, 0x70	; 112
    1f6e:	6c e5       	ldi	r22, 0x5C	; 92
    1f70:	ce 01       	movw	r24, r28
    1f72:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    1f76:	40 e4       	ldi	r20, 0x40	; 64
    1f78:	65 e2       	ldi	r22, 0x25	; 37
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    1f80:	60 e1       	ldi	r22, 0x10	; 16
    1f82:	ce 01       	movw	r24, r28
    1f84:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZN7RH_RF699setOpModeEh>
    1f88:	84 e0       	ldi	r24, 0x04	; 4
    1f8a:	8a 83       	std	Y+2, r24	; 0x02
    1f8c:	df 91       	pop	r29
    1f8e:	cf 91       	pop	r28
    1f90:	08 95       	ret

00001f92 <_ZN7RH_RF699availableEv>:
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	fc 01       	movw	r30, r24
    1f98:	22 81       	ldd	r18, Z+2	; 0x02
    1f9a:	23 30       	cpi	r18, 0x03	; 3
    1f9c:	39 f0       	breq	.+14     	; 0x1fac <_ZN7RH_RF699availableEv+0x1a>
    1f9e:	ec 01       	movw	r28, r24
    1fa0:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <_ZN7RH_RF699setModeRxEv>
    1fa4:	c2 5a       	subi	r28, 0xA2	; 162
    1fa6:	df 4f       	sbci	r29, 0xFF	; 255
    1fa8:	88 81       	ld	r24, Y
    1faa:	01 c0       	rjmp	.+2      	; 0x1fae <_ZN7RH_RF699availableEv+0x1c>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	df 91       	pop	r29
    1fb0:	cf 91       	pop	r28
    1fb2:	08 95       	ret

00001fb4 <_ZN7RH_RF699setModeTxEv>:
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	fc 01       	movw	r30, r24
    1fba:	22 81       	ldd	r18, Z+2	; 0x02
    1fbc:	23 30       	cpi	r18, 0x03	; 3
    1fbe:	c9 f0       	breq	.+50     	; 0x1ff2 <_ZN7RH_RF699setModeTxEv+0x3e>
    1fc0:	ec 01       	movw	r28, r24
    1fc2:	80 a1       	ldd	r24, Z+32	; 0x20
    1fc4:	82 31       	cpi	r24, 0x12	; 18
    1fc6:	54 f0       	brlt	.+20     	; 0x1fdc <_ZN7RH_RF699setModeTxEv+0x28>
    1fc8:	4d e5       	ldi	r20, 0x5D	; 93
    1fca:	6a e5       	ldi	r22, 0x5A	; 90
    1fcc:	cf 01       	movw	r24, r30
    1fce:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    1fd2:	4c e7       	ldi	r20, 0x7C	; 124
    1fd4:	6c e5       	ldi	r22, 0x5C	; 92
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    1fdc:	40 e0       	ldi	r20, 0x00	; 0
    1fde:	65 e2       	ldi	r22, 0x25	; 37
    1fe0:	ce 01       	movw	r24, r28
    1fe2:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    1fe6:	6c e0       	ldi	r22, 0x0C	; 12
    1fe8:	ce 01       	movw	r24, r28
    1fea:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <_ZN7RH_RF699setOpModeEh>
    1fee:	83 e0       	ldi	r24, 0x03	; 3
    1ff0:	8a 83       	std	Y+2, r24	; 0x02
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	08 95       	ret

00001ff8 <_ZN7RH_RF694sendEPKhh>:
    1ff8:	bf 92       	push	r11
    1ffa:	cf 92       	push	r12
    1ffc:	df 92       	push	r13
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	ec 01       	movw	r28, r24
    200c:	b6 2e       	mov	r11, r22
    200e:	c7 2e       	mov	r12, r23
    2010:	14 2f       	mov	r17, r20
    2012:	4d 33       	cpi	r20, 0x3D	; 61
    2014:	10 f0       	brcs	.+4      	; 0x201a <_ZN7RH_RF694sendEPKhh+0x22>
    2016:	00 e0       	ldi	r16, 0x00	; 0
    2018:	6f c0       	rjmp	.+222    	; 0x20f8 <_ZN7RH_RF694sendEPKhh+0x100>
    201a:	e8 81       	ld	r30, Y
    201c:	f9 81       	ldd	r31, Y+1	; 0x01
    201e:	04 84       	ldd	r0, Z+12	; 0x0c
    2020:	f5 85       	ldd	r31, Z+13	; 0x0d
    2022:	e0 2d       	mov	r30, r0
    2024:	09 95       	icall
    2026:	ce 01       	movw	r24, r28
    2028:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <_ZN7RH_RF6911setModeIdleEv>
    202c:	e8 81       	ld	r30, Y
    202e:	f9 81       	ldd	r31, Y+1	; 0x01
    2030:	02 88       	ldd	r0, Z+18	; 0x12
    2032:	f3 89       	ldd	r31, Z+19	; 0x13
    2034:	e0 2d       	mov	r30, r0
    2036:	ce 01       	movw	r24, r28
    2038:	09 95       	icall
    203a:	08 2f       	mov	r16, r24
    203c:	88 23       	and	r24, r24
    203e:	59 f3       	breq	.-42     	; 0x2016 <_ZN7RH_RF694sendEPKhh+0x1e>
    2040:	df b6       	in	r13, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	60 e0       	ldi	r22, 0x00	; 0
    2046:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2048:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
    204c:	88 8d       	ldd	r24, Y+24	; 0x18
    204e:	99 8d       	ldd	r25, Y+25	; 0x19
    2050:	dc 01       	movw	r26, r24
    2052:	ed 91       	ld	r30, X+
    2054:	fc 91       	ld	r31, X
    2056:	01 90       	ld	r0, Z+
    2058:	f0 81       	ld	r31, Z
    205a:	e0 2d       	mov	r30, r0
    205c:	60 e8       	ldi	r22, 0x80	; 128
    205e:	09 95       	icall
    2060:	88 8d       	ldd	r24, Y+24	; 0x18
    2062:	99 8d       	ldd	r25, Y+25	; 0x19
    2064:	dc 01       	movw	r26, r24
    2066:	ed 91       	ld	r30, X+
    2068:	fc 91       	ld	r31, X
    206a:	01 90       	ld	r0, Z+
    206c:	f0 81       	ld	r31, Z
    206e:	e0 2d       	mov	r30, r0
    2070:	64 e0       	ldi	r22, 0x04	; 4
    2072:	61 0f       	add	r22, r17
    2074:	09 95       	icall
    2076:	88 8d       	ldd	r24, Y+24	; 0x18
    2078:	99 8d       	ldd	r25, Y+25	; 0x19
    207a:	dc 01       	movw	r26, r24
    207c:	ed 91       	ld	r30, X+
    207e:	fc 91       	ld	r31, X
    2080:	01 90       	ld	r0, Z+
    2082:	f0 81       	ld	r31, Z
    2084:	e0 2d       	mov	r30, r0
    2086:	69 85       	ldd	r22, Y+9	; 0x09
    2088:	09 95       	icall
    208a:	88 8d       	ldd	r24, Y+24	; 0x18
    208c:	99 8d       	ldd	r25, Y+25	; 0x19
    208e:	dc 01       	movw	r26, r24
    2090:	ed 91       	ld	r30, X+
    2092:	fc 91       	ld	r31, X
    2094:	01 90       	ld	r0, Z+
    2096:	f0 81       	ld	r31, Z
    2098:	e0 2d       	mov	r30, r0
    209a:	6a 85       	ldd	r22, Y+10	; 0x0a
    209c:	09 95       	icall
    209e:	88 8d       	ldd	r24, Y+24	; 0x18
    20a0:	99 8d       	ldd	r25, Y+25	; 0x19
    20a2:	dc 01       	movw	r26, r24
    20a4:	ed 91       	ld	r30, X+
    20a6:	fc 91       	ld	r31, X
    20a8:	01 90       	ld	r0, Z+
    20aa:	f0 81       	ld	r31, Z
    20ac:	e0 2d       	mov	r30, r0
    20ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b0:	09 95       	icall
    20b2:	88 8d       	ldd	r24, Y+24	; 0x18
    20b4:	99 8d       	ldd	r25, Y+25	; 0x19
    20b6:	dc 01       	movw	r26, r24
    20b8:	ed 91       	ld	r30, X+
    20ba:	fc 91       	ld	r31, X
    20bc:	01 90       	ld	r0, Z+
    20be:	f0 81       	ld	r31, Z
    20c0:	e0 2d       	mov	r30, r0
    20c2:	6c 85       	ldd	r22, Y+12	; 0x0c
    20c4:	09 95       	icall
    20c6:	eb 2c       	mov	r14, r11
    20c8:	fc 2c       	mov	r15, r12
    20ca:	11 50       	subi	r17, 0x01	; 1
    20cc:	68 f0       	brcs	.+26     	; 0x20e8 <_ZN7RH_RF694sendEPKhh+0xf0>
    20ce:	88 8d       	ldd	r24, Y+24	; 0x18
    20d0:	99 8d       	ldd	r25, Y+25	; 0x19
    20d2:	f7 01       	movw	r30, r14
    20d4:	61 91       	ld	r22, Z+
    20d6:	7f 01       	movw	r14, r30
    20d8:	dc 01       	movw	r26, r24
    20da:	ed 91       	ld	r30, X+
    20dc:	fc 91       	ld	r31, X
    20de:	01 90       	ld	r0, Z+
    20e0:	f0 81       	ld	r31, Z
    20e2:	e0 2d       	mov	r30, r0
    20e4:	09 95       	icall
    20e6:	f1 cf       	rjmp	.-30     	; 0x20ca <_ZN7RH_RF694sendEPKhh+0xd2>
    20e8:	61 e0       	ldi	r22, 0x01	; 1
    20ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20ec:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
    20f0:	df be       	out	0x3f, r13	; 63
    20f2:	ce 01       	movw	r24, r28
    20f4:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <_ZN7RH_RF699setModeTxEv>
    20f8:	80 2f       	mov	r24, r16
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	1f 91       	pop	r17
    2100:	0f 91       	pop	r16
    2102:	ff 90       	pop	r15
    2104:	ef 90       	pop	r14
    2106:	df 90       	pop	r13
    2108:	cf 90       	pop	r12
    210a:	bf 90       	pop	r11
    210c:	08 95       	ret

0000210e <_ZN7RH_RF6910setTxPowerEab>:
    210e:	fc 01       	movw	r30, r24
    2110:	60 a3       	std	Z+32, r22	; 0x20
    2112:	44 23       	and	r20, r20
    2114:	99 f0       	breq	.+38     	; 0x213c <_ZN7RH_RF6910setTxPowerEab+0x2e>
    2116:	6e 3f       	cpi	r22, 0xFE	; 254
    2118:	14 f4       	brge	.+4      	; 0x211e <_ZN7RH_RF6910setTxPowerEab+0x10>
    211a:	8e ef       	ldi	r24, 0xFE	; 254
    211c:	80 a3       	std	Z+32, r24	; 0x20
    211e:	40 a1       	ldd	r20, Z+32	; 0x20
    2120:	4e 30       	cpi	r20, 0x0E	; 14
    2122:	24 f4       	brge	.+8      	; 0x212c <_ZN7RH_RF6910setTxPowerEab+0x1e>
    2124:	4e 5e       	subi	r20, 0xEE	; 238
    2126:	4f 71       	andi	r20, 0x1F	; 31
    2128:	40 64       	ori	r20, 0x40	; 64
    212a:	15 c0       	rjmp	.+42     	; 0x2156 <_ZN7RH_RF6910setTxPowerEab+0x48>
    212c:	42 31       	cpi	r20, 0x12	; 18
    212e:	1c f0       	brlt	.+6      	; 0x2136 <_ZN7RH_RF6910setTxPowerEab+0x28>
    2130:	45 5f       	subi	r20, 0xF5	; 245
    2132:	4f 71       	andi	r20, 0x1F	; 31
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <_ZN7RH_RF6910setTxPowerEab+0x2a>
    2136:	42 5f       	subi	r20, 0xF2	; 242
    2138:	40 66       	ori	r20, 0x60	; 96
    213a:	0d c0       	rjmp	.+26     	; 0x2156 <_ZN7RH_RF6910setTxPowerEab+0x48>
    213c:	6e 3e       	cpi	r22, 0xEE	; 238
    213e:	14 f4       	brge	.+4      	; 0x2144 <_ZN7RH_RF6910setTxPowerEab+0x36>
    2140:	8e ee       	ldi	r24, 0xEE	; 238
    2142:	80 a3       	std	Z+32, r24	; 0x20
    2144:	80 a1       	ldd	r24, Z+32	; 0x20
    2146:	8e 30       	cpi	r24, 0x0E	; 14
    2148:	14 f0       	brlt	.+4      	; 0x214e <_ZN7RH_RF6910setTxPowerEab+0x40>
    214a:	8d e0       	ldi	r24, 0x0D	; 13
    214c:	80 a3       	std	Z+32, r24	; 0x20
    214e:	40 a1       	ldd	r20, Z+32	; 0x20
    2150:	4e 5e       	subi	r20, 0xEE	; 238
    2152:	4f 71       	andi	r20, 0x1F	; 31
    2154:	40 68       	ori	r20, 0x80	; 128
    2156:	61 e1       	ldi	r22, 0x11	; 17
    2158:	cf 01       	movw	r24, r30
    215a:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>

0000215e <_ZN7RH_RF6917setModemRegistersEPKNS_11ModemConfigE>:
    215e:	0f 93       	push	r16
    2160:	1f 93       	push	r17
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	ec 01       	movw	r28, r24
    2168:	8b 01       	movw	r16, r22
    216a:	25 e0       	ldi	r18, 0x05	; 5
    216c:	ab 01       	movw	r20, r22
    216e:	62 e0       	ldi	r22, 0x02	; 2
    2170:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    2174:	a8 01       	movw	r20, r16
    2176:	4b 5f       	subi	r20, 0xFB	; 251
    2178:	5f 4f       	sbci	r21, 0xFF	; 255
    217a:	22 e0       	ldi	r18, 0x02	; 2
    217c:	69 e1       	ldi	r22, 0x19	; 25
    217e:	ce 01       	movw	r24, r28
    2180:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    2184:	f8 01       	movw	r30, r16
    2186:	47 81       	ldd	r20, Z+7	; 0x07
    2188:	67 e3       	ldi	r22, 0x37	; 55
    218a:	ce 01       	movw	r24, r28
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>

00002198 <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE>:
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	28 97       	sbiw	r28, 0x08	; 8
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	70 e0       	ldi	r23, 0x00	; 0
    21b2:	6c 31       	cpi	r22, 0x1C	; 28
    21b4:	71 05       	cpc	r23, r1
    21b6:	b4 f4       	brge	.+44     	; 0x21e4 <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE+0x4c>
    21b8:	8c 01       	movw	r16, r24
    21ba:	83 e0       	ldi	r24, 0x03	; 3
    21bc:	66 0f       	add	r22, r22
    21be:	77 1f       	adc	r23, r23
    21c0:	8a 95       	dec	r24
    21c2:	e1 f7       	brne	.-8      	; 0x21bc <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE+0x24>
    21c4:	6a 58       	subi	r22, 0x8A	; 138
    21c6:	7e 4f       	sbci	r23, 0xFE	; 254
    21c8:	48 e0       	ldi	r20, 0x08	; 8
    21ca:	50 e0       	ldi	r21, 0x00	; 0
    21cc:	ce 01       	movw	r24, r28
    21ce:	01 96       	adiw	r24, 0x01	; 1
    21d0:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <memcpy_P>
    21d4:	be 01       	movw	r22, r28
    21d6:	6f 5f       	subi	r22, 0xFF	; 255
    21d8:	7f 4f       	sbci	r23, 0xFF	; 255
    21da:	c8 01       	movw	r24, r16
    21dc:	0e 94 af 10 	call	0x215e	; 0x215e <_ZN7RH_RF6917setModemRegistersEPKNS_11ModemConfigE>
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	01 c0       	rjmp	.+2      	; 0x21e6 <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE+0x4e>
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	28 96       	adiw	r28, 0x08	; 8
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	1f 91       	pop	r17
    21f8:	0f 91       	pop	r16
    21fa:	08 95       	ret

000021fc <_ZN7RH_RF6917setPreambleLengthEj>:
    21fc:	1f 93       	push	r17
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	ec 01       	movw	r28, r24
    2204:	16 2f       	mov	r17, r22
    2206:	47 2f       	mov	r20, r23
    2208:	6c e2       	ldi	r22, 0x2C	; 44
    220a:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    220e:	41 2f       	mov	r20, r17
    2210:	6d e2       	ldi	r22, 0x2D	; 45
    2212:	ce 01       	movw	r24, r28
    2214:	df 91       	pop	r29
    2216:	cf 91       	pop	r28
    2218:	1f 91       	pop	r17
    221a:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>

0000221e <_ZN7RH_RF6912setSyncWordsEPKhh>:
    221e:	ef 92       	push	r14
    2220:	ff 92       	push	r15
    2222:	0f 93       	push	r16
    2224:	1f 93       	push	r17
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	8c 01       	movw	r16, r24
    222c:	7b 01       	movw	r14, r22
    222e:	c4 2f       	mov	r28, r20
    2230:	6e e2       	ldi	r22, 0x2E	; 46
    2232:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <_ZN11RHSPIDriver7spiReadEh>
    2236:	d8 2f       	mov	r29, r24
    2238:	e1 14       	cp	r14, r1
    223a:	f1 04       	cpc	r15, r1
    223c:	61 f0       	breq	.+24     	; 0x2256 <_ZN7RH_RF6912setSyncWordsEPKhh+0x38>
    223e:	8f ef       	ldi	r24, 0xFF	; 255
    2240:	8c 0f       	add	r24, r28
    2242:	84 30       	cpi	r24, 0x04	; 4
    2244:	40 f4       	brcc	.+16     	; 0x2256 <_ZN7RH_RF6912setSyncWordsEPKhh+0x38>
    2246:	2c 2f       	mov	r18, r28
    2248:	a7 01       	movw	r20, r14
    224a:	6f e2       	ldi	r22, 0x2F	; 47
    224c:	c8 01       	movw	r24, r16
    224e:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    2252:	d0 68       	ori	r29, 0x80	; 128
    2254:	01 c0       	rjmp	.+2      	; 0x2258 <_ZN7RH_RF6912setSyncWordsEPKhh+0x3a>
    2256:	df 77       	andi	r29, 0x7F	; 127
    2258:	2c 2f       	mov	r18, r28
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	21 50       	subi	r18, 0x01	; 1
    225e:	31 09       	sbc	r19, r1
    2260:	83 e0       	ldi	r24, 0x03	; 3
    2262:	22 0f       	add	r18, r18
    2264:	33 1f       	adc	r19, r19
    2266:	8a 95       	dec	r24
    2268:	e1 f7       	brne	.-8      	; 0x2262 <_ZN7RH_RF6912setSyncWordsEPKhh+0x44>
    226a:	d7 7c       	andi	r29, 0xC7	; 199
    226c:	4d 2f       	mov	r20, r29
    226e:	42 2b       	or	r20, r18
    2270:	6e e2       	ldi	r22, 0x2E	; 46
    2272:	c8 01       	movw	r24, r16
    2274:	df 91       	pop	r29
    2276:	cf 91       	pop	r28
    2278:	1f 91       	pop	r17
    227a:	0f 91       	pop	r16
    227c:	ff 90       	pop	r15
    227e:	ef 90       	pop	r14
    2280:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>

00002284 <_ZN7RH_RF6916setEncryptionKeyEPh>:
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	61 15       	cp	r22, r1
    228a:	71 05       	cpc	r23, r1
    228c:	91 f0       	breq	.+36     	; 0x22b2 <_ZN7RH_RF6916setEncryptionKeyEPh+0x2e>
    228e:	ab 01       	movw	r20, r22
    2290:	ec 01       	movw	r28, r24
    2292:	20 e1       	ldi	r18, 0x10	; 16
    2294:	6e e3       	ldi	r22, 0x3E	; 62
    2296:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    229a:	6d e3       	ldi	r22, 0x3D	; 61
    229c:	ce 01       	movw	r24, r28
    229e:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <_ZN11RHSPIDriver7spiReadEh>
    22a2:	48 2f       	mov	r20, r24
    22a4:	41 60       	ori	r20, 0x01	; 1
    22a6:	6d e3       	ldi	r22, 0x3D	; 61
    22a8:	ce 01       	movw	r24, r28
    22aa:	df 91       	pop	r29
    22ac:	cf 91       	pop	r28
    22ae:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    22b2:	df 91       	pop	r29
    22b4:	cf 91       	pop	r28
    22b6:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <_ZN7RH_RF6916setEncryptionKeyEPh.part.4.constprop.5>

000022ba <_ZN7RH_RF694initEv>:
{
    _idleMode = idleMode;
}

bool RH_RF69::init()
{
    22ba:	df 92       	push	r13
    22bc:	ef 92       	push	r14
    22be:	ff 92       	push	r15
    22c0:	0f 93       	push	r16
    22c2:	1f 93       	push	r17
    22c4:	cf 93       	push	r28
    22c6:	df 93       	push	r29
    22c8:	00 d0       	rcall	.+0      	; 0x22ca <_ZN7RH_RF694initEv+0x10>
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	7c 01       	movw	r14, r24
    if (!RHSPIDriver::init())
    22d0:	0e 94 75 15 	call	0x2aea	; 0x2aea <_ZN11RHSPIDriver4initEv>
    22d4:	d8 2e       	mov	r13, r24
    22d6:	81 11       	cpse	r24, r1
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <_ZN7RH_RF694initEv+0x24>
	return false;
    22da:	d1 2c       	mov	r13, r1
    22dc:	94 c0       	rjmp	.+296    	; 0x2406 <_ZN7RH_RF694initEv+0x14c>

    // Determine the interrupt number that corresponds to the interruptPin
    int interruptNumber = digitalPinToInterrupt(_interruptPin);
    22de:	f7 01       	movw	r30, r14
    22e0:	84 8d       	ldd	r24, Z+28	; 0x1c
    22e2:	88 23       	and	r24, r24
    22e4:	51 f0       	breq	.+20     	; 0x22fa <_ZN7RH_RF694initEv+0x40>
    22e6:	81 30       	cpi	r24, 0x01	; 1
    22e8:	51 f0       	breq	.+20     	; 0x22fe <_ZN7RH_RF694initEv+0x44>
    22ea:	82 30       	cpi	r24, 0x02	; 2
    22ec:	51 f0       	breq	.+20     	; 0x2302 <_ZN7RH_RF694initEv+0x48>
    22ee:	83 30       	cpi	r24, 0x03	; 3
    22f0:	51 f0       	breq	.+20     	; 0x2306 <_ZN7RH_RF694initEv+0x4c>
    22f2:	87 30       	cpi	r24, 0x07	; 7
    22f4:	91 f7       	brne	.-28     	; 0x22da <_ZN7RH_RF694initEv+0x20>
    22f6:	14 e0       	ldi	r17, 0x04	; 4
    22f8:	07 c0       	rjmp	.+14     	; 0x2308 <_ZN7RH_RF694initEv+0x4e>
    22fa:	12 e0       	ldi	r17, 0x02	; 2
    22fc:	05 c0       	rjmp	.+10     	; 0x2308 <_ZN7RH_RF694initEv+0x4e>
    22fe:	13 e0       	ldi	r17, 0x03	; 3
    2300:	03 c0       	rjmp	.+6      	; 0x2308 <_ZN7RH_RF694initEv+0x4e>
    2302:	11 e0       	ldi	r17, 0x01	; 1
    2304:	01 c0       	rjmp	.+2      	; 0x2308 <_ZN7RH_RF694initEv+0x4e>
    2306:	10 e0       	ldi	r17, 0x00	; 0
#ifdef RH_ATTACHINTERRUPT_TAKES_PIN_NUMBER
    interruptNumber = _interruptPin;
#endif

    // Tell the low level SPI interface we will use SPI within this interrupt
    spiUsingInterrupt(interruptNumber);
    2308:	61 2f       	mov	r22, r17
    230a:	c7 01       	movw	r24, r14
    230c:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <_ZN11RHSPIDriver17spiUsingInterruptEh>

    // Get the device type and check it
    // This also tests whether we are really connected to a device
    // My test devices return 0x24
    _deviceType = spiRead(RH_RF69_REG_10_VERSION);
    2310:	60 e1       	ldi	r22, 0x10	; 16
    2312:	c7 01       	movw	r24, r14
    2314:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <_ZN11RHSPIDriver7spiReadEh>
    2318:	f7 01       	movw	r30, r14
    231a:	87 8f       	std	Z+31, r24	; 0x1f
    if (_deviceType == 00 ||
    231c:	81 50       	subi	r24, 0x01	; 1
    231e:	8e 3f       	cpi	r24, 0xFE	; 254
    2320:	e0 f6       	brcc	.-72     	; 0x22da <_ZN7RH_RF694initEv+0x20>
	return false;

    // Add by Adrien van den Bossche <vandenbo@univ-tlse2.fr> for Teensy
    // ARM M4 requires the below. else pin interrupt doesn't work properly.
    // On all other platforms, its innocuous, belt and braces
    pinMode(_interruptPin, INPUT);
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	f7 01       	movw	r30, r14
    2326:	84 8d       	ldd	r24, Z+28	; 0x1c
    2328:	0e 94 96 0b 	call	0x172c	; 0x172c <pinMode>
    // Since there are a limited number of interrupt glue functions isr*() available,
    // we can only support a limited number of devices simultaneously
    // ON some devices, notably most Arduinos, the interrupt pin passed in is actuallt the
    // interrupt number. You have to figure out the interruptnumber-to-interruptpin mapping
    // yourself based on knwledge of what Arduino board you are running on.
    if (_myInterruptIndex == 0xff)
    232c:	f7 01       	movw	r30, r14
    232e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2330:	8f 3f       	cpi	r24, 0xFF	; 255
    2332:	49 f4       	brne	.+18     	; 0x2346 <_ZN7RH_RF694initEv+0x8c>
    {
	// First run, no interrupt allocated yet
	if (_interruptCount <= RH_RF69_NUM_INTERRUPTS)
    2334:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <_ZN7RH_RF6915_interruptCountE>
    2338:	84 30       	cpi	r24, 0x04	; 4
    233a:	78 f6       	brcc	.-98     	; 0x22da <_ZN7RH_RF694initEv+0x20>
	    _myInterruptIndex = _interruptCount++;
    233c:	91 e0       	ldi	r25, 0x01	; 1
    233e:	98 0f       	add	r25, r24
    2340:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <_ZN7RH_RF6915_interruptCountE>
    2344:	85 8f       	std	Z+29, r24	; 0x1d
	else
	    return false; // Too many devices, not enough interrupt vectors
    }
    _deviceForInterrupt[_myInterruptIndex] = this;
    2346:	f7 01       	movw	r30, r14
    2348:	85 8d       	ldd	r24, Z+29	; 0x1d
    234a:	e8 2f       	mov	r30, r24
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	ee 0f       	add	r30, r30
    2350:	ff 1f       	adc	r31, r31
    2352:	ed 5c       	subi	r30, 0xCD	; 205
    2354:	fb 4f       	sbci	r31, 0xFB	; 251
    2356:	f1 82       	std	Z+1, r15	; 0x01
    2358:	e0 82       	st	Z, r14
    if (_myInterruptIndex == 0)
    235a:	81 11       	cpse	r24, r1
    235c:	05 c0       	rjmp	.+10     	; 0x2368 <_ZN7RH_RF694initEv+0xae>
	attachInterrupt(interruptNumber, isr0, RISING);
    235e:	43 e0       	ldi	r20, 0x03	; 3
    2360:	50 e0       	ldi	r21, 0x00	; 0
    2362:	6c e8       	ldi	r22, 0x8C	; 140
    2364:	7f e0       	ldi	r23, 0x0F	; 15
    2366:	0e c0       	rjmp	.+28     	; 0x2384 <_ZN7RH_RF694initEv+0xca>
    else if (_myInterruptIndex == 1)
    2368:	81 30       	cpi	r24, 0x01	; 1
    236a:	29 f4       	brne	.+10     	; 0x2376 <_ZN7RH_RF694initEv+0xbc>
	attachInterrupt(interruptNumber, isr1, RISING);
    236c:	43 e0       	ldi	r20, 0x03	; 3
    236e:	50 e0       	ldi	r21, 0x00	; 0
    2370:	65 e9       	ldi	r22, 0x95	; 149
    2372:	7f e0       	ldi	r23, 0x0F	; 15
    2374:	07 c0       	rjmp	.+14     	; 0x2384 <_ZN7RH_RF694initEv+0xca>
    else if (_myInterruptIndex == 2)
    2376:	82 30       	cpi	r24, 0x02	; 2
    2378:	09 f0       	breq	.+2      	; 0x237c <_ZN7RH_RF694initEv+0xc2>
    237a:	af cf       	rjmp	.-162    	; 0x22da <_ZN7RH_RF694initEv+0x20>
	attachInterrupt(interruptNumber, isr2, RISING);
    237c:	43 e0       	ldi	r20, 0x03	; 3
    237e:	50 e0       	ldi	r21, 0x00	; 0
    2380:	6e e9       	ldi	r22, 0x9E	; 158
    2382:	7f e0       	ldi	r23, 0x0F	; 15
    2384:	81 2f       	mov	r24, r17
    2386:	0e 94 0f 14 	call	0x281e	; 0x281e <attachInterrupt>
    else
	return false; // Too many devices, not enough interrupt vectors

    setModeIdle();
    238a:	c7 01       	movw	r24, r14
    238c:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <_ZN7RH_RF6911setModeIdleEv>
    // 2 CRC CCITT octets computed on the header, length and data (this in the modem config data)
    // 0 to 60 bytes data
    // RSSI Threshold -114dBm
    // We dont use the RH_RF69s address filtering: instead we prepend our own headers to the beginning
    // of the RH_RF69 payload
    spiWrite(RH_RF69_REG_3C_FIFOTHRESH, RH_RF69_FIFOTHRESH_TXSTARTCONDITION_NOTEMPTY | 0x0f); // thresh 15 is default
    2390:	4f e8       	ldi	r20, 0x8F	; 143
    2392:	6c e3       	ldi	r22, 0x3C	; 60
    2394:	c7 01       	movw	r24, r14
    2396:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    // SYNCCONFIG is default. SyncSize is set later by setSyncWords()
//    spiWrite(RH_RF69_REG_2E_SYNCCONFIG, RH_RF69_SYNCCONFIG_SYNCON); // auto, tolerance 0
    // PAYLOADLENGTH is default
//    spiWrite(RH_RF69_REG_38_PAYLOADLENGTH, RH_RF69_FIFO_SIZE); // max size only for RX
    // PACKETCONFIG 2 is default
    spiWrite(RH_RF69_REG_6F_TESTDAGC, RH_RF69_TESTDAGC_CONTINUOUSDAGC_IMPROVED_LOWBETAOFF);
    239a:	40 e3       	ldi	r20, 0x30	; 48
    239c:	6f e6       	ldi	r22, 0x6F	; 111
    239e:	c7 01       	movw	r24, r14
    23a0:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    // If high power boost set previously, disable it
    spiWrite(RH_RF69_REG_5A_TESTPA1, RH_RF69_TESTPA1_NORMAL);
    23a4:	45 e5       	ldi	r20, 0x55	; 85
    23a6:	6a e5       	ldi	r22, 0x5A	; 90
    23a8:	c7 01       	movw	r24, r14
    23aa:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_NORMAL);
    23ae:	40 e7       	ldi	r20, 0x70	; 112
    23b0:	6c e5       	ldi	r22, 0x5C	; 92
    23b2:	c7 01       	movw	r24, r14
    23b4:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <_ZN11RHSPIDriver8spiWriteEhh>

    // The following can be changed later by the user if necessary.
    // Set up default configuration
    uint8_t syncwords[] = { 0x2d, 0xd4 };
    23b8:	8d e2       	ldi	r24, 0x2D	; 45
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	84 ed       	ldi	r24, 0xD4	; 212
    23be:	8a 83       	std	Y+2, r24	; 0x02
    setSyncWords(syncwords, sizeof(syncwords)); // Same as RF22's
    23c0:	42 e0       	ldi	r20, 0x02	; 2
    23c2:	be 01       	movw	r22, r28
    23c4:	6f 5f       	subi	r22, 0xFF	; 255
    23c6:	7f 4f       	sbci	r23, 0xFF	; 255
    23c8:	c7 01       	movw	r24, r14
    23ca:	0e 94 0f 11 	call	0x221e	; 0x221e <_ZN7RH_RF6912setSyncWordsEPKhh>
    // Reasonably fast and reliable default speed and modulation
    setModemConfig(GFSK_Rb250Fd250);
    23ce:	62 e1       	ldi	r22, 0x12	; 18
    23d0:	c7 01       	movw	r24, r14
    23d2:	0e 94 cc 10 	call	0x2198	; 0x2198 <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE>

    // 3 would be sufficient, but this is the same as RF22's
    setPreambleLength(4);
    23d6:	64 e0       	ldi	r22, 0x04	; 4
    23d8:	70 e0       	ldi	r23, 0x00	; 0
    23da:	c7 01       	movw	r24, r14
    23dc:	0e 94 fe 10 	call	0x21fc	; 0x21fc <_ZN7RH_RF6917setPreambleLengthEj>
    // An innocuous ISM frequency, same as RF22's
    setFrequency(434.0);
    23e0:	0d ec       	ldi	r16, 0xCD	; 205
    23e2:	1c ec       	ldi	r17, 0xCC	; 204
    23e4:	2c e4       	ldi	r18, 0x4C	; 76
    23e6:	3d e3       	ldi	r19, 0x3D	; 61
    23e8:	40 e0       	ldi	r20, 0x00	; 0
    23ea:	50 e0       	ldi	r21, 0x00	; 0
    23ec:	69 ed       	ldi	r22, 0xD9	; 217
    23ee:	73 e4       	ldi	r23, 0x43	; 67
    23f0:	c7 01       	movw	r24, r14
    23f2:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <_ZN7RH_RF6912setFrequencyEff>
    23f6:	c7 01       	movw	r24, r14
    23f8:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <_ZN7RH_RF6916setEncryptionKeyEPh.part.4.constprop.5>
    // No encryption
    setEncryptionKey(NULL);
    // +13dBm, same as power-on default
    setTxPower(13);
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	6d e0       	ldi	r22, 0x0D	; 13
    2400:	c7 01       	movw	r24, r14
    2402:	0e 94 87 10 	call	0x210e	; 0x210e <_ZN7RH_RF6910setTxPowerEab>

    return true;
}
    2406:	8d 2d       	mov	r24, r13
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	1f 91       	pop	r17
    2412:	0f 91       	pop	r16
    2414:	ff 90       	pop	r15
    2416:	ef 90       	pop	r14
    2418:	df 90       	pop	r13
    241a:	08 95       	ret

0000241c <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    241c:	cf 93       	push	r28
  uint8_t sreg = SREG;
    241e:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    2420:	f8 94       	cli
  if (!initialized) {
    2422:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <_ZN8SPIClass11initializedE>
    2426:	81 11       	cpse	r24, r1
    2428:	27 c0       	rjmp	.+78     	; 0x2478 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    242a:	ec e4       	ldi	r30, 0x4C	; 76
    242c:	f1 e0       	ldi	r31, 0x01	; 1
    242e:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    2430:	ed e2       	ldi	r30, 0x2D	; 45
    2432:	f1 e0       	ldi	r31, 0x01	; 1
    2434:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    2436:	e8 2f       	mov	r30, r24
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	ee 0f       	add	r30, r30
    243c:	ff 1f       	adc	r31, r31
    243e:	e8 59       	subi	r30, 0x98	; 152
    2440:	fe 4f       	sbci	r31, 0xFE	; 254
    2442:	a5 91       	lpm	r26, Z+
    2444:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    2446:	ec 91       	ld	r30, X
    2448:	e9 23       	and	r30, r25
    244a:	21 f4       	brne	.+8      	; 0x2454 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    244c:	61 e0       	ldi	r22, 0x01	; 1
    244e:	81 e1       	ldi	r24, 0x11	; 17
    2450:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    2454:	61 e0       	ldi	r22, 0x01	; 1
    2456:	81 e1       	ldi	r24, 0x11	; 17
    2458:	0e 94 96 0b 	call	0x172c	; 0x172c <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    245c:	8c b5       	in	r24, 0x2c	; 44
    245e:	80 61       	ori	r24, 0x10	; 16
    2460:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    2462:	8c b5       	in	r24, 0x2c	; 44
    2464:	80 64       	ori	r24, 0x40	; 64
    2466:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    2468:	61 e0       	ldi	r22, 0x01	; 1
    246a:	8f e0       	ldi	r24, 0x0F	; 15
    246c:	0e 94 96 0b 	call	0x172c	; 0x172c <pinMode>
    pinMode(MOSI, OUTPUT);
    2470:	61 e0       	ldi	r22, 0x01	; 1
    2472:	80 e1       	ldi	r24, 0x10	; 16
    2474:	0e 94 96 0b 	call	0x172c	; 0x172c <pinMode>
  }
  initialized++; // reference count
    2478:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <_ZN8SPIClass11initializedE>
    247c:	8f 5f       	subi	r24, 0xFF	; 255
    247e:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <_ZN8SPIClass11initializedE>
  SREG = sreg;
    2482:	cf bf       	out	0x3f, r28	; 63
}
    2484:	cf 91       	pop	r28
    2486:	08 95       	ret

00002488 <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  uint8_t sreg = SREG;
    2488:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    248a:	f8 94       	cli
  // Decrease the reference counter
  if (initialized)
    248c:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <_ZN8SPIClass11initializedE>
    2490:	88 23       	and	r24, r24
    2492:	19 f0       	breq	.+6      	; 0x249a <_ZN8SPIClass3endEv+0x12>
    initialized--;
    2494:	81 50       	subi	r24, 0x01	; 1
    2496:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <_ZN8SPIClass11initializedE>
  // If there are no more references disable SPI
  if (!initialized) {
    249a:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <_ZN8SPIClass11initializedE>
    249e:	81 11       	cpse	r24, r1
    24a0:	05 c0       	rjmp	.+10     	; 0x24ac <_ZN8SPIClass3endEv+0x24>
    SPCR &= ~_BV(SPE);
    24a2:	8c b5       	in	r24, 0x2c	; 44
    24a4:	8f 7b       	andi	r24, 0xBF	; 191
    24a6:	8c bd       	out	0x2c, r24	; 44
    interruptMode = 0;
    24a8:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <_ZN8SPIClass13interruptModeE>
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
    24ac:	9f bf       	out	0x3f, r25	; 63
    24ae:	08 95       	ret

000024b0 <__cxa_pure_virtual>:
    24b0:	0e 94 ed 18 	call	0x31da	; 0x31da <abort>

000024b4 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    24b4:	cf 93       	push	r28
    24b6:	df 93       	push	r29
    24b8:	1f 92       	push	r1
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	69 83       	std	Y+1, r22	; 0x01
    24c0:	dc 01       	movw	r26, r24
    24c2:	ed 91       	ld	r30, X+
    24c4:	fc 91       	ld	r31, X
    24c6:	02 80       	ldd	r0, Z+2	; 0x02
    24c8:	f3 81       	ldd	r31, Z+3	; 0x03
    24ca:	e0 2d       	mov	r30, r0
    24cc:	41 e0       	ldi	r20, 0x01	; 1
    24ce:	50 e0       	ldi	r21, 0x00	; 0
    24d0:	be 01       	movw	r22, r28
    24d2:	6f 5f       	subi	r22, 0xFF	; 255
    24d4:	7f 4f       	sbci	r23, 0xFF	; 255
    24d6:	09 95       	icall
    24d8:	0f 90       	pop	r0
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	08 95       	ret

000024e0 <_ZN7Serial_4peekEv>:
    24e0:	cf 93       	push	r28
    24e2:	df 93       	push	r29
    24e4:	ec 01       	movw	r28, r24
    24e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    24e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    24ea:	97 ff       	sbrs	r25, 7
    24ec:	05 c0       	rjmp	.+10     	; 0x24f8 <_ZN7Serial_4peekEv+0x18>
    24ee:	82 e0       	ldi	r24, 0x02	; 2
    24f0:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z8USB_Recvh>
    24f4:	9d 87       	std	Y+13, r25	; 0x0d
    24f6:	8c 87       	std	Y+12, r24	; 0x0c
    24f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    24fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	08 95       	ret

00002502 <_ZN7Serial_17availableForWriteEv>:
    2502:	83 e0       	ldi	r24, 0x03	; 3
    2504:	0e 94 30 07 	call	0xe60	; 0xe60 <_Z13USB_SendSpaceh>
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	08 95       	ret

0000250c <_ZN7Serial_5flushEv>:
    250c:	83 e0       	ldi	r24, 0x03	; 3
    250e:	0c 94 ae 09 	jmp	0x135c	; 0x135c <_Z9USB_Flushh>

00002512 <_ZN7Serial_9availableEv>:
    2512:	fc 01       	movw	r30, r24
    2514:	84 85       	ldd	r24, Z+12	; 0x0c
    2516:	95 85       	ldd	r25, Z+13	; 0x0d
    2518:	97 fd       	sbrc	r25, 7
    251a:	06 c0       	rjmp	.+12     	; 0x2528 <_ZN7Serial_9availableEv+0x16>
    251c:	82 e0       	ldi	r24, 0x02	; 2
    251e:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z13USB_Availableh>
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	01 96       	adiw	r24, 0x01	; 1
    2526:	08 95       	ret
    2528:	82 e0       	ldi	r24, 0x02	; 2
    252a:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z13USB_Availableh>
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	08 95       	ret

00002532 <_ZN7Serial_4readEv>:
    2532:	fc 01       	movw	r30, r24
    2534:	84 85       	ldd	r24, Z+12	; 0x0c
    2536:	95 85       	ldd	r25, Z+13	; 0x0d
    2538:	97 fd       	sbrc	r25, 7
    253a:	05 c0       	rjmp	.+10     	; 0x2546 <_ZN7Serial_4readEv+0x14>
    253c:	2f ef       	ldi	r18, 0xFF	; 255
    253e:	3f ef       	ldi	r19, 0xFF	; 255
    2540:	35 87       	std	Z+13, r19	; 0x0d
    2542:	24 87       	std	Z+12, r18	; 0x0c
    2544:	08 95       	ret
    2546:	82 e0       	ldi	r24, 0x02	; 2
    2548:	0c 94 19 07 	jmp	0xe32	; 0xe32 <_Z8USB_Recvh>

0000254c <_ZN7Serial_5writeEPKhj>:
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	ec 01       	movw	r28, r24
    2552:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZL12_usbLineInfo+0x7>
    2556:	88 23       	and	r24, r24
    2558:	31 f0       	breq	.+12     	; 0x2566 <_ZN7Serial_5writeEPKhj+0x1a>
    255a:	83 e0       	ldi	r24, 0x03	; 3
    255c:	0e 94 4a 07 	call	0xe94	; 0xe94 <_Z8USB_SendhPKvi>
    2560:	18 16       	cp	r1, r24
    2562:	19 06       	cpc	r1, r25
    2564:	34 f0       	brlt	.+12     	; 0x2572 <_ZN7Serial_5writeEPKhj+0x26>
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	9b 83       	std	Y+3, r25	; 0x03
    256c:	8a 83       	std	Y+2, r24	; 0x02
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	df 91       	pop	r29
    2574:	cf 91       	pop	r28
    2576:	08 95       	ret

00002578 <_Z16isLUFAbootloaderv>:
    2578:	ee ef       	ldi	r30, 0xFE	; 254
    257a:	ff e7       	ldi	r31, 0x7F	; 127
    257c:	25 91       	lpm	r18, Z+
    257e:	34 91       	lpm	r19, Z
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	2b 3f       	cpi	r18, 0xFB	; 251
    2584:	3c 4d       	sbci	r19, 0xDC	; 220
    2586:	09 f0       	breq	.+2      	; 0x258a <_Z16isLUFAbootloaderv+0x12>
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	08 95       	ret

0000258c <_Z16CDC_GetInterfacePh>:
    258c:	fc 01       	movw	r30, r24
    258e:	90 81       	ld	r25, Z
    2590:	9e 5f       	subi	r25, 0xFE	; 254
    2592:	90 83       	st	Z, r25
    2594:	42 e4       	ldi	r20, 0x42	; 66
    2596:	50 e0       	ldi	r21, 0x00	; 0
    2598:	6e e4       	ldi	r22, 0x4E	; 78
    259a:	72 e0       	ldi	r23, 0x02	; 2
    259c:	80 e8       	ldi	r24, 0x80	; 128
    259e:	0c 94 fa 07 	jmp	0xff4	; 0xff4 <_Z15USB_SendControlhPKvi>

000025a2 <_Z9CDC_SetupR8USBSetup>:
    25a2:	fc 01       	movw	r30, r24
    25a4:	81 81       	ldd	r24, Z+1	; 0x01
    25a6:	90 81       	ld	r25, Z
    25a8:	91 3a       	cpi	r25, 0xA1	; 161
    25aa:	59 f4       	brne	.+22     	; 0x25c2 <_Z9CDC_SetupR8USBSetup+0x20>
    25ac:	81 32       	cpi	r24, 0x21	; 33
    25ae:	09 f0       	breq	.+2      	; 0x25b2 <_Z9CDC_SetupR8USBSetup+0x10>
    25b0:	65 c0       	rjmp	.+202    	; 0x267c <_Z9CDC_SetupR8USBSetup+0xda>
    25b2:	47 e0       	ldi	r20, 0x07	; 7
    25b4:	50 e0       	ldi	r21, 0x00	; 0
    25b6:	6f e0       	ldi	r22, 0x0F	; 15
    25b8:	71 e0       	ldi	r23, 0x01	; 1
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	0e 94 fa 07 	call	0xff4	; 0xff4 <_Z15USB_SendControlhPKvi>
    25c0:	5b c0       	rjmp	.+182    	; 0x2678 <_Z9CDC_SetupR8USBSetup+0xd6>
    25c2:	91 32       	cpi	r25, 0x21	; 33
    25c4:	09 f0       	breq	.+2      	; 0x25c8 <_Z9CDC_SetupR8USBSetup+0x26>
    25c6:	5a c0       	rjmp	.+180    	; 0x267c <_Z9CDC_SetupR8USBSetup+0xda>
    25c8:	83 32       	cpi	r24, 0x23	; 35
    25ca:	69 f4       	brne	.+26     	; 0x25e6 <_Z9CDC_SetupR8USBSetup+0x44>
    25cc:	82 81       	ldd	r24, Z+2	; 0x02
    25ce:	93 81       	ldd	r25, Z+3	; 0x03
    25d0:	a0 e0       	ldi	r26, 0x00	; 0
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_ZL10breakValue>
    25d8:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_ZL10breakValue+0x1>
    25dc:	a0 93 0d 01 	sts	0x010D, r26	; 0x80010d <_ZL10breakValue+0x2>
    25e0:	b0 93 0e 01 	sts	0x010E, r27	; 0x80010e <_ZL10breakValue+0x3>
    25e4:	49 c0       	rjmp	.+146    	; 0x2678 <_Z9CDC_SetupR8USBSetup+0xd6>
    25e6:	80 32       	cpi	r24, 0x20	; 32
    25e8:	39 f4       	brne	.+14     	; 0x25f8 <_Z9CDC_SetupR8USBSetup+0x56>
    25ea:	67 e0       	ldi	r22, 0x07	; 7
    25ec:	70 e0       	ldi	r23, 0x00	; 0
    25ee:	8f e0       	ldi	r24, 0x0F	; 15
    25f0:	91 e0       	ldi	r25, 0x01	; 1
    25f2:	0e 94 21 08 	call	0x1042	; 0x1042 <_Z15USB_RecvControlPvi>
    25f6:	40 c0       	rjmp	.+128    	; 0x2678 <_Z9CDC_SetupR8USBSetup+0xd6>
    25f8:	82 32       	cpi	r24, 0x22	; 34
    25fa:	09 f0       	breq	.+2      	; 0x25fe <_Z9CDC_SetupR8USBSetup+0x5c>
    25fc:	3d c0       	rjmp	.+122    	; 0x2678 <_Z9CDC_SetupR8USBSetup+0xd6>
    25fe:	82 81       	ldd	r24, Z+2	; 0x02
    2600:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <_ZL12_usbLineInfo+0x7>
    2604:	0e 94 bc 12 	call	0x2578	; 0x2578 <_Z16isLUFAbootloaderv>
    2608:	88 23       	and	r24, r24
    260a:	19 f0       	breq	.+6      	; 0x2612 <_Z9CDC_SetupR8USBSetup+0x70>
    260c:	ee ef       	ldi	r30, 0xFE	; 254
    260e:	fa e0       	ldi	r31, 0x0A	; 10
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <_Z9CDC_SetupR8USBSetup+0x74>
    2612:	e0 e0       	ldi	r30, 0x00	; 0
    2614:	f8 e0       	ldi	r31, 0x08	; 8
    2616:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_ZL12_usbLineInfo>
    261a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <_ZL12_usbLineInfo+0x1>
    261e:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <_ZL12_usbLineInfo+0x2>
    2622:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <_ZL12_usbLineInfo+0x3>
    2626:	80 3b       	cpi	r24, 0xB0	; 176
    2628:	94 40       	sbci	r25, 0x04	; 4
    262a:	a1 05       	cpc	r26, r1
    262c:	b1 05       	cpc	r27, r1
    262e:	41 f5       	brne	.+80     	; 0x2680 <_Z9CDC_SetupR8USBSetup+0xde>
    2630:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZL12_usbLineInfo+0x7>
    2634:	80 fd       	sbrc	r24, 0
    2636:	24 c0       	rjmp	.+72     	; 0x2680 <_Z9CDC_SetupR8USBSetup+0xde>
    2638:	ee 3f       	cpi	r30, 0xFE	; 254
    263a:	8a e0       	ldi	r24, 0x0A	; 10
    263c:	f8 07       	cpc	r31, r24
    263e:	51 f0       	breq	.+20     	; 0x2654 <_Z9CDC_SetupR8USBSetup+0xb2>
    2640:	80 81       	ld	r24, Z
    2642:	91 81       	ldd	r25, Z+1	; 0x01
    2644:	87 37       	cpi	r24, 0x77	; 119
    2646:	27 e7       	ldi	r18, 0x77	; 119
    2648:	92 07       	cpc	r25, r18
    264a:	21 f0       	breq	.+8      	; 0x2654 <_Z9CDC_SetupR8USBSetup+0xb2>
    264c:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x665>
    2650:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x664>
    2654:	87 e7       	ldi	r24, 0x77	; 119
    2656:	97 e7       	ldi	r25, 0x77	; 119
    2658:	91 83       	std	Z+1, r25	; 0x01
    265a:	80 83       	st	Z, r24
    265c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2660:	80 93 8d 04 	sts	0x048D, r24	; 0x80048d <_ZL11wdtcsr_save>
    2664:	9b e0       	ldi	r25, 0x0B	; 11
    2666:	88 e1       	ldi	r24, 0x18	; 24
    2668:	0f b6       	in	r0, 0x3f	; 63
    266a:	f8 94       	cli
    266c:	a8 95       	wdr
    266e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	08 95       	ret
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	08 95       	ret
    2680:	80 81       	ld	r24, Z
    2682:	91 81       	ldd	r25, Z+1	; 0x01
    2684:	87 37       	cpi	r24, 0x77	; 119
    2686:	97 47       	sbci	r25, 0x77	; 119
    2688:	b9 f7       	brne	.-18     	; 0x2678 <_Z9CDC_SetupR8USBSetup+0xd6>
    268a:	a8 95       	wdr
    268c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2690:	88 61       	ori	r24, 0x18	; 24
    2692:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2696:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <_ZL11wdtcsr_save>
    269a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    269e:	ee 3f       	cpi	r30, 0xFE	; 254
    26a0:	8a e0       	ldi	r24, 0x0A	; 10
    26a2:	f8 07       	cpc	r31, r24
    26a4:	39 f0       	breq	.+14     	; 0x26b4 <_Z9CDC_SetupR8USBSetup+0x112>
    26a6:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x664>
    26aa:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x665>
    26ae:	91 83       	std	Z+1, r25	; 0x01
    26b0:	80 83       	st	Z, r24
    26b2:	e2 cf       	rjmp	.-60     	; 0x2678 <_Z9CDC_SetupR8USBSetup+0xd6>
    26b4:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x665>
    26b8:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x664>
    26bc:	dd cf       	rjmp	.-70     	; 0x2678 <_Z9CDC_SetupR8USBSetup+0xd6>

000026be <_GLOBAL__sub_I__cdcInterface>:
    26be:	ed e3       	ldi	r30, 0x3D	; 61
    26c0:	f4 e0       	ldi	r31, 0x04	; 4
    26c2:	13 82       	std	Z+3, r1	; 0x03
    26c4:	12 82       	std	Z+2, r1	; 0x02
    26c6:	88 ee       	ldi	r24, 0xE8	; 232
    26c8:	93 e0       	ldi	r25, 0x03	; 3
    26ca:	a0 e0       	ldi	r26, 0x00	; 0
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	84 83       	std	Z+4, r24	; 0x04
    26d0:	95 83       	std	Z+5, r25	; 0x05
    26d2:	a6 83       	std	Z+6, r26	; 0x06
    26d4:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    26d6:	84 eb       	ldi	r24, 0xB4	; 180
    26d8:	92 e0       	ldi	r25, 0x02	; 2
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
    26de:	8f ef       	ldi	r24, 0xFF	; 255
    26e0:	9f ef       	ldi	r25, 0xFF	; 255
    26e2:	95 87       	std	Z+13, r25	; 0x0d
    26e4:	84 87       	std	Z+12, r24	; 0x0c
    26e6:	08 95       	ret

000026e8 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    26e8:	08 95       	ret

000026ea <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    26ea:	ef 92       	push	r14
    26ec:	ff 92       	push	r15
    26ee:	0f 93       	push	r16
    26f0:	1f 93       	push	r17
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	7b 01       	movw	r14, r22
    26f8:	fc 01       	movw	r30, r24
    26fa:	c2 81       	ldd	r28, Z+2	; 0x02
    26fc:	d3 81       	ldd	r29, Z+3	; 0x03
    26fe:	00 e0       	ldi	r16, 0x00	; 0
    2700:	10 e0       	ldi	r17, 0x00	; 0
    2702:	20 97       	sbiw	r28, 0x00	; 0
    2704:	81 f0       	breq	.+32     	; 0x2726 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    2706:	e8 81       	ld	r30, Y
    2708:	f9 81       	ldd	r31, Y+1	; 0x01
    270a:	02 80       	ldd	r0, Z+2	; 0x02
    270c:	f3 81       	ldd	r31, Z+3	; 0x03
    270e:	e0 2d       	mov	r30, r0
    2710:	b7 01       	movw	r22, r14
    2712:	ce 01       	movw	r24, r28
    2714:	09 95       	icall
    2716:	97 fd       	sbrc	r25, 7
    2718:	08 c0       	rjmp	.+16     	; 0x272a <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    271a:	08 0f       	add	r16, r24
    271c:	19 1f       	adc	r17, r25
    271e:	08 84       	ldd	r0, Y+8	; 0x08
    2720:	d9 85       	ldd	r29, Y+9	; 0x09
    2722:	c0 2d       	mov	r28, r0
    2724:	ee cf       	rjmp	.-36     	; 0x2702 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    2726:	c8 01       	movw	r24, r16
    2728:	02 c0       	rjmp	.+4      	; 0x272e <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    272a:	8f ef       	ldi	r24, 0xFF	; 255
    272c:	9f ef       	ldi	r25, 0xFF	; 255
    272e:	df 91       	pop	r29
    2730:	cf 91       	pop	r28
    2732:	1f 91       	pop	r17
    2734:	0f 91       	pop	r16
    2736:	ff 90       	pop	r15
    2738:	ef 90       	pop	r14
    273a:	08 95       	ret

0000273c <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    273c:	0f 93       	push	r16
    273e:	1f 93       	push	r17
    2740:	cf 93       	push	r28
    2742:	df 93       	push	r29
    2744:	8b 01       	movw	r16, r22
    2746:	fc 01       	movw	r30, r24
    2748:	c2 81       	ldd	r28, Z+2	; 0x02
    274a:	d3 81       	ldd	r29, Z+3	; 0x03
    274c:	20 97       	sbiw	r28, 0x00	; 0
    274e:	71 f0       	breq	.+28     	; 0x276c <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    2750:	e8 81       	ld	r30, Y
    2752:	f9 81       	ldd	r31, Y+1	; 0x01
    2754:	04 80       	ldd	r0, Z+4	; 0x04
    2756:	f5 81       	ldd	r31, Z+5	; 0x05
    2758:	e0 2d       	mov	r30, r0
    275a:	b8 01       	movw	r22, r16
    275c:	ce 01       	movw	r24, r28
    275e:	09 95       	icall
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	31 f4       	brne	.+12     	; 0x2770 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    2764:	08 84       	ldd	r0, Y+8	; 0x08
    2766:	d9 85       	ldd	r29, Y+9	; 0x09
    2768:	c0 2d       	mov	r28, r0
    276a:	f0 cf       	rjmp	.-32     	; 0x274c <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	1f 91       	pop	r17
    2776:	0f 91       	pop	r16
    2778:	08 95       	ret

0000277a <_ZN13PluggableUSB_12getShortNameEPc>:
    277a:	0f 93       	push	r16
    277c:	1f 93       	push	r17
    277e:	cf 93       	push	r28
    2780:	df 93       	push	r29
    2782:	8b 01       	movw	r16, r22
    2784:	fc 01       	movw	r30, r24
    2786:	c2 81       	ldd	r28, Z+2	; 0x02
    2788:	d3 81       	ldd	r29, Z+3	; 0x03
    278a:	20 97       	sbiw	r28, 0x00	; 0
    278c:	71 f0       	breq	.+28     	; 0x27aa <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    278e:	e8 81       	ld	r30, Y
    2790:	f9 81       	ldd	r31, Y+1	; 0x01
    2792:	06 80       	ldd	r0, Z+6	; 0x06
    2794:	f7 81       	ldd	r31, Z+7	; 0x07
    2796:	e0 2d       	mov	r30, r0
    2798:	b8 01       	movw	r22, r16
    279a:	ce 01       	movw	r24, r28
    279c:	09 95       	icall
    279e:	08 0f       	add	r16, r24
    27a0:	11 1d       	adc	r17, r1
    27a2:	08 84       	ldd	r0, Y+8	; 0x08
    27a4:	d9 85       	ldd	r29, Y+9	; 0x09
    27a6:	c0 2d       	mov	r28, r0
    27a8:	f0 cf       	rjmp	.-32     	; 0x278a <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    27aa:	f8 01       	movw	r30, r16
    27ac:	10 82       	st	Z, r1
    27ae:	df 91       	pop	r29
    27b0:	cf 91       	pop	r28
    27b2:	1f 91       	pop	r17
    27b4:	0f 91       	pop	r16
    27b6:	08 95       	ret

000027b8 <_ZN13PluggableUSB_5setupER8USBSetup>:
    27b8:	0f 93       	push	r16
    27ba:	1f 93       	push	r17
    27bc:	cf 93       	push	r28
    27be:	df 93       	push	r29
    27c0:	8b 01       	movw	r16, r22
    27c2:	fc 01       	movw	r30, r24
    27c4:	c2 81       	ldd	r28, Z+2	; 0x02
    27c6:	d3 81       	ldd	r29, Z+3	; 0x03
    27c8:	20 97       	sbiw	r28, 0x00	; 0
    27ca:	71 f0       	breq	.+28     	; 0x27e8 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    27cc:	e8 81       	ld	r30, Y
    27ce:	f9 81       	ldd	r31, Y+1	; 0x01
    27d0:	01 90       	ld	r0, Z+
    27d2:	f0 81       	ld	r31, Z
    27d4:	e0 2d       	mov	r30, r0
    27d6:	b8 01       	movw	r22, r16
    27d8:	ce 01       	movw	r24, r28
    27da:	09 95       	icall
    27dc:	81 11       	cpse	r24, r1
    27de:	05 c0       	rjmp	.+10     	; 0x27ea <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    27e0:	08 84       	ldd	r0, Y+8	; 0x08
    27e2:	d9 85       	ldd	r29, Y+9	; 0x09
    27e4:	c0 2d       	mov	r28, r0
    27e6:	f0 cf       	rjmp	.-32     	; 0x27c8 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	df 91       	pop	r29
    27ec:	cf 91       	pop	r28
    27ee:	1f 91       	pop	r17
    27f0:	0f 91       	pop	r16
    27f2:	08 95       	ret

000027f4 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    27f4:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <_ZGVZ12PluggableUSBvE3obj>
    27f8:	81 11       	cpse	r24, r1
    27fa:	0d c0       	rjmp	.+26     	; 0x2816 <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    27fc:	82 e0       	ldi	r24, 0x02	; 2
    27fe:	80 93 8e 04 	sts	0x048E, r24	; 0x80048e <_ZZ12PluggableUSBvE3obj>
    2802:	84 e0       	ldi	r24, 0x04	; 4
    2804:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <_ZZ12PluggableUSBvE3obj+0x1>
    2808:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <_ZZ12PluggableUSBvE3obj+0x3>
    280c:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	80 93 92 04 	sts	0x0492, r24	; 0x800492 <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    2816:	8e e8       	ldi	r24, 0x8E	; 142
    2818:	94 e0       	ldi	r25, 0x04	; 4
    281a:	08 95       	ret

0000281c <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    281c:	08 95       	ret

0000281e <attachInterrupt>:
    281e:	85 30       	cpi	r24, 0x05	; 5
    2820:	08 f0       	brcs	.+2      	; 0x2824 <attachInterrupt+0x6>
    2822:	4c c0       	rjmp	.+152    	; 0x28bc <attachInterrupt+0x9e>
    2824:	e8 2f       	mov	r30, r24
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	ee 0f       	add	r30, r30
    282a:	ff 1f       	adc	r31, r31
    282c:	e9 5e       	subi	r30, 0xE9	; 233
    282e:	fe 4f       	sbci	r31, 0xFE	; 254
    2830:	71 83       	std	Z+1, r23	; 0x01
    2832:	60 83       	st	Z, r22
    2834:	82 30       	cpi	r24, 0x02	; 2
    2836:	e1 f0       	breq	.+56     	; 0x2870 <attachInterrupt+0x52>
    2838:	18 f4       	brcc	.+6      	; 0x2840 <attachInterrupt+0x22>
    283a:	81 30       	cpi	r24, 0x01	; 1
    283c:	69 f0       	breq	.+26     	; 0x2858 <attachInterrupt+0x3a>
    283e:	04 c0       	rjmp	.+8      	; 0x2848 <attachInterrupt+0x2a>
    2840:	83 30       	cpi	r24, 0x03	; 3
    2842:	19 f1       	breq	.+70     	; 0x288a <attachInterrupt+0x6c>
    2844:	84 30       	cpi	r24, 0x04	; 4
    2846:	71 f1       	breq	.+92     	; 0x28a4 <attachInterrupt+0x86>
    2848:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    284c:	8c 7f       	andi	r24, 0xFC	; 252
    284e:	48 2b       	or	r20, r24
    2850:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2854:	e8 9a       	sbi	0x1d, 0	; 29
    2856:	08 95       	ret
    2858:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    285c:	83 7f       	andi	r24, 0xF3	; 243
    285e:	44 0f       	add	r20, r20
    2860:	55 1f       	adc	r21, r21
    2862:	44 0f       	add	r20, r20
    2864:	55 1f       	adc	r21, r21
    2866:	48 2b       	or	r20, r24
    2868:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    286c:	e9 9a       	sbi	0x1d, 1	; 29
    286e:	08 95       	ret
    2870:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2874:	8f 7c       	andi	r24, 0xCF	; 207
    2876:	34 e0       	ldi	r19, 0x04	; 4
    2878:	44 0f       	add	r20, r20
    287a:	55 1f       	adc	r21, r21
    287c:	3a 95       	dec	r19
    287e:	e1 f7       	brne	.-8      	; 0x2878 <attachInterrupt+0x5a>
    2880:	48 2b       	or	r20, r24
    2882:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2886:	ea 9a       	sbi	0x1d, 2	; 29
    2888:	08 95       	ret
    288a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    288e:	8f 73       	andi	r24, 0x3F	; 63
    2890:	26 e0       	ldi	r18, 0x06	; 6
    2892:	44 0f       	add	r20, r20
    2894:	55 1f       	adc	r21, r21
    2896:	2a 95       	dec	r18
    2898:	e1 f7       	brne	.-8      	; 0x2892 <attachInterrupt+0x74>
    289a:	48 2b       	or	r20, r24
    289c:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    28a0:	eb 9a       	sbi	0x1d, 3	; 29
    28a2:	08 95       	ret
    28a4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f806a>
    28a8:	8f 7c       	andi	r24, 0xCF	; 207
    28aa:	94 e0       	ldi	r25, 0x04	; 4
    28ac:	44 0f       	add	r20, r20
    28ae:	55 1f       	adc	r21, r21
    28b0:	9a 95       	dec	r25
    28b2:	e1 f7       	brne	.-8      	; 0x28ac <attachInterrupt+0x8e>
    28b4:	48 2b       	or	r20, r24
    28b6:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f806a>
    28ba:	ee 9a       	sbi	0x1d, 6	; 29
    28bc:	08 95       	ret

000028be <__vector_1>:
    intFunc[interrupt](); \
  }

#if defined(__AVR_ATmega32U4__)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    28be:	1f 92       	push	r1
    28c0:	0f 92       	push	r0
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	0f 92       	push	r0
    28c6:	11 24       	eor	r1, r1
    28c8:	2f 93       	push	r18
    28ca:	3f 93       	push	r19
    28cc:	4f 93       	push	r20
    28ce:	5f 93       	push	r21
    28d0:	6f 93       	push	r22
    28d2:	7f 93       	push	r23
    28d4:	8f 93       	push	r24
    28d6:	9f 93       	push	r25
    28d8:	af 93       	push	r26
    28da:	bf 93       	push	r27
    28dc:	ef 93       	push	r30
    28de:	ff 93       	push	r31
    28e0:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <intFunc>
    28e4:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <intFunc+0x1>
    28e8:	09 95       	icall
    28ea:	ff 91       	pop	r31
    28ec:	ef 91       	pop	r30
    28ee:	bf 91       	pop	r27
    28f0:	af 91       	pop	r26
    28f2:	9f 91       	pop	r25
    28f4:	8f 91       	pop	r24
    28f6:	7f 91       	pop	r23
    28f8:	6f 91       	pop	r22
    28fa:	5f 91       	pop	r21
    28fc:	4f 91       	pop	r20
    28fe:	3f 91       	pop	r19
    2900:	2f 91       	pop	r18
    2902:	0f 90       	pop	r0
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	0f 90       	pop	r0
    2908:	1f 90       	pop	r1
    290a:	18 95       	reti

0000290c <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    290c:	1f 92       	push	r1
    290e:	0f 92       	push	r0
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	0f 92       	push	r0
    2914:	11 24       	eor	r1, r1
    2916:	2f 93       	push	r18
    2918:	3f 93       	push	r19
    291a:	4f 93       	push	r20
    291c:	5f 93       	push	r21
    291e:	6f 93       	push	r22
    2920:	7f 93       	push	r23
    2922:	8f 93       	push	r24
    2924:	9f 93       	push	r25
    2926:	af 93       	push	r26
    2928:	bf 93       	push	r27
    292a:	ef 93       	push	r30
    292c:	ff 93       	push	r31
    292e:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <intFunc+0x2>
    2932:	f0 91 1a 01 	lds	r31, 0x011A	; 0x80011a <intFunc+0x3>
    2936:	09 95       	icall
    2938:	ff 91       	pop	r31
    293a:	ef 91       	pop	r30
    293c:	bf 91       	pop	r27
    293e:	af 91       	pop	r26
    2940:	9f 91       	pop	r25
    2942:	8f 91       	pop	r24
    2944:	7f 91       	pop	r23
    2946:	6f 91       	pop	r22
    2948:	5f 91       	pop	r21
    294a:	4f 91       	pop	r20
    294c:	3f 91       	pop	r19
    294e:	2f 91       	pop	r18
    2950:	0f 90       	pop	r0
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	0f 90       	pop	r0
    2956:	1f 90       	pop	r1
    2958:	18 95       	reti

0000295a <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
    295a:	1f 92       	push	r1
    295c:	0f 92       	push	r0
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	0f 92       	push	r0
    2962:	11 24       	eor	r1, r1
    2964:	2f 93       	push	r18
    2966:	3f 93       	push	r19
    2968:	4f 93       	push	r20
    296a:	5f 93       	push	r21
    296c:	6f 93       	push	r22
    296e:	7f 93       	push	r23
    2970:	8f 93       	push	r24
    2972:	9f 93       	push	r25
    2974:	af 93       	push	r26
    2976:	bf 93       	push	r27
    2978:	ef 93       	push	r30
    297a:	ff 93       	push	r31
    297c:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <intFunc+0x4>
    2980:	f0 91 1c 01 	lds	r31, 0x011C	; 0x80011c <intFunc+0x5>
    2984:	09 95       	icall
    2986:	ff 91       	pop	r31
    2988:	ef 91       	pop	r30
    298a:	bf 91       	pop	r27
    298c:	af 91       	pop	r26
    298e:	9f 91       	pop	r25
    2990:	8f 91       	pop	r24
    2992:	7f 91       	pop	r23
    2994:	6f 91       	pop	r22
    2996:	5f 91       	pop	r21
    2998:	4f 91       	pop	r20
    299a:	3f 91       	pop	r19
    299c:	2f 91       	pop	r18
    299e:	0f 90       	pop	r0
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	0f 90       	pop	r0
    29a4:	1f 90       	pop	r1
    29a6:	18 95       	reti

000029a8 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
    29a8:	1f 92       	push	r1
    29aa:	0f 92       	push	r0
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	0f 92       	push	r0
    29b0:	11 24       	eor	r1, r1
    29b2:	2f 93       	push	r18
    29b4:	3f 93       	push	r19
    29b6:	4f 93       	push	r20
    29b8:	5f 93       	push	r21
    29ba:	6f 93       	push	r22
    29bc:	7f 93       	push	r23
    29be:	8f 93       	push	r24
    29c0:	9f 93       	push	r25
    29c2:	af 93       	push	r26
    29c4:	bf 93       	push	r27
    29c6:	ef 93       	push	r30
    29c8:	ff 93       	push	r31
    29ca:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <intFunc+0x6>
    29ce:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <intFunc+0x7>
    29d2:	09 95       	icall
    29d4:	ff 91       	pop	r31
    29d6:	ef 91       	pop	r30
    29d8:	bf 91       	pop	r27
    29da:	af 91       	pop	r26
    29dc:	9f 91       	pop	r25
    29de:	8f 91       	pop	r24
    29e0:	7f 91       	pop	r23
    29e2:	6f 91       	pop	r22
    29e4:	5f 91       	pop	r21
    29e6:	4f 91       	pop	r20
    29e8:	3f 91       	pop	r19
    29ea:	2f 91       	pop	r18
    29ec:	0f 90       	pop	r0
    29ee:	0f be       	out	0x3f, r0	; 63
    29f0:	0f 90       	pop	r0
    29f2:	1f 90       	pop	r1
    29f4:	18 95       	reti

000029f6 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)
    29f6:	1f 92       	push	r1
    29f8:	0f 92       	push	r0
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	0f 92       	push	r0
    29fe:	11 24       	eor	r1, r1
    2a00:	2f 93       	push	r18
    2a02:	3f 93       	push	r19
    2a04:	4f 93       	push	r20
    2a06:	5f 93       	push	r21
    2a08:	6f 93       	push	r22
    2a0a:	7f 93       	push	r23
    2a0c:	8f 93       	push	r24
    2a0e:	9f 93       	push	r25
    2a10:	af 93       	push	r26
    2a12:	bf 93       	push	r27
    2a14:	ef 93       	push	r30
    2a16:	ff 93       	push	r31
    2a18:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <intFunc+0x8>
    2a1c:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <intFunc+0x9>
    2a20:	09 95       	icall
    2a22:	ff 91       	pop	r31
    2a24:	ef 91       	pop	r30
    2a26:	bf 91       	pop	r27
    2a28:	af 91       	pop	r26
    2a2a:	9f 91       	pop	r25
    2a2c:	8f 91       	pop	r24
    2a2e:	7f 91       	pop	r23
    2a30:	6f 91       	pop	r22
    2a32:	5f 91       	pop	r21
    2a34:	4f 91       	pop	r20
    2a36:	3f 91       	pop	r19
    2a38:	2f 91       	pop	r18
    2a3a:	0f 90       	pop	r0
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	0f 90       	pop	r0
    2a40:	1f 90       	pop	r1
    2a42:	18 95       	reti

00002a44 <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
    2a44:	cf 92       	push	r12
    2a46:	df 92       	push	r13
    2a48:	ef 92       	push	r14
    2a4a:	ff 92       	push	r15
  if (howbig == 0) {
    2a4c:	61 15       	cp	r22, r1
    2a4e:	71 05       	cpc	r23, r1
    2a50:	81 05       	cpc	r24, r1
    2a52:	91 05       	cpc	r25, r1
    2a54:	49 f0       	breq	.+18     	; 0x2a68 <_Z6randoml+0x24>
    2a56:	6b 01       	movw	r12, r22
    2a58:	7c 01       	movw	r14, r24
    return 0;
  }
  return random() % howbig;
    2a5a:	0e 94 96 18 	call	0x312c	; 0x312c <random>
    2a5e:	a7 01       	movw	r20, r14
    2a60:	96 01       	movw	r18, r12
    2a62:	0e 94 0c 18 	call	0x3018	; 0x3018 <__divmodsi4>
    2a66:	03 c0       	rjmp	.+6      	; 0x2a6e <_Z6randoml+0x2a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	70 e0       	ldi	r23, 0x00	; 0
    2a6c:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
    2a6e:	ff 90       	pop	r15
    2a70:	ef 90       	pop	r14
    2a72:	df 90       	pop	r13
    2a74:	cf 90       	pop	r12
    2a76:	08 95       	ret

00002a78 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    2a78:	cf 92       	push	r12
    2a7a:	df 92       	push	r13
    2a7c:	ef 92       	push	r14
    2a7e:	ff 92       	push	r15
    2a80:	0f 93       	push	r16
    2a82:	1f 93       	push	r17
  if (howsmall >= howbig) {
    2a84:	62 17       	cp	r22, r18
    2a86:	73 07       	cpc	r23, r19
    2a88:	84 07       	cpc	r24, r20
    2a8a:	95 07       	cpc	r25, r21
    2a8c:	84 f4       	brge	.+32     	; 0x2aae <_Z6randomll+0x36>
    2a8e:	89 01       	movw	r16, r18
    2a90:	9a 01       	movw	r18, r20
    2a92:	6b 01       	movw	r12, r22
    2a94:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    2a96:	c9 01       	movw	r24, r18
    2a98:	b8 01       	movw	r22, r16
    2a9a:	6c 19       	sub	r22, r12
    2a9c:	7d 09       	sbc	r23, r13
    2a9e:	8e 09       	sbc	r24, r14
    2aa0:	9f 09       	sbc	r25, r15
    2aa2:	0e 94 22 15 	call	0x2a44	; 0x2a44 <_Z6randoml>
    2aa6:	6c 0d       	add	r22, r12
    2aa8:	7d 1d       	adc	r23, r13
    2aaa:	8e 1d       	adc	r24, r14
    2aac:	9f 1d       	adc	r25, r15
}
    2aae:	1f 91       	pop	r17
    2ab0:	0f 91       	pop	r16
    2ab2:	ff 90       	pop	r15
    2ab4:	ef 90       	pop	r14
    2ab6:	df 90       	pop	r13
    2ab8:	cf 90       	pop	r12
    2aba:	08 95       	ret

00002abc <_ZN12RHGenericSPI15attachInterruptEv>:
    virtual uint8_t transfer(uint8_t data) = 0;

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
    2abc:	08 95       	ret

00002abe <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
    2abe:	08 95       	ret

00002ac0 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
    2ac0:	08 95       	ret

00002ac2 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
    2ac2:	08 95       	ret

00002ac4 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Tells the SPI support software that SPI transactions will occur with the interrupt
    /// handler assocated with interruptNumber
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){}
    2ac4:	08 95       	ret

00002ac6 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	63 83       	std	Z+3, r22	; 0x03
    2aca:	08 95       	ret

00002acc <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:
}

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
    2acc:	fc 01       	movw	r30, r24
    2ace:	64 83       	std	Z+4, r22	; 0x04
    2ad0:	08 95       	ret

00002ad2 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:
}

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	62 83       	std	Z+2, r22	; 0x02
    2ad6:	08 95       	ret

00002ad8 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
// Contributed by Joanna Rutkowska
// $Id: RHGenericSPI.cpp,v 1.2 2014/04/12 05:26:05 mikem Exp $

#include <RHGenericSPI.h>

RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
    2ad8:	fc 01       	movw	r30, r24
    :
    _frequency(frequency),
    _bitOrder(bitOrder),
    _dataMode(dataMode)
    2ada:	86 ec       	ldi	r24, 0xC6	; 198
    2adc:	92 e0       	ldi	r25, 0x02	; 2
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	80 83       	st	Z, r24
    2ae2:	62 83       	std	Z+2, r22	; 0x02
    2ae4:	43 83       	std	Z+3, r20	; 0x03
    2ae6:	24 83       	std	Z+4, r18	; 0x04
    2ae8:	08 95       	ret

00002aea <_ZN11RHSPIDriver4initEv>:
    return status;
}

void RHSPIDriver::setSlaveSelectPin(uint8_t slaveSelectPin)
{
    _slaveSelectPin = slaveSelectPin;
    2aea:	cf 93       	push	r28
    2aec:	df 93       	push	r29
    2aee:	ec 01       	movw	r28, r24
    2af0:	88 8d       	ldd	r24, Y+24	; 0x18
    2af2:	99 8d       	ldd	r25, Y+25	; 0x19
    2af4:	dc 01       	movw	r26, r24
    2af6:	ed 91       	ld	r30, X+
    2af8:	fc 91       	ld	r31, X
    2afa:	06 80       	ldd	r0, Z+6	; 0x06
    2afc:	f7 81       	ldd	r31, Z+7	; 0x07
    2afe:	e0 2d       	mov	r30, r0
    2b00:	09 95       	icall
    2b02:	61 e0       	ldi	r22, 0x01	; 1
    2b04:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b06:	0e 94 96 0b 	call	0x172c	; 0x172c <pinMode>
    2b0a:	61 e0       	ldi	r22, 0x01	; 1
    2b0c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b0e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
    2b12:	64 e6       	ldi	r22, 0x64	; 100
    2b14:	70 e0       	ldi	r23, 0x00	; 0
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	0e 94 c7 0a 	call	0x158e	; 0x158e <delay>
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	df 91       	pop	r29
    2b22:	cf 91       	pop	r28
    2b24:	08 95       	ret

00002b26 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
    2b26:	ef 92       	push	r14
    2b28:	ff 92       	push	r15
    2b2a:	1f 93       	push	r17
    2b2c:	cf 93       	push	r28
    2b2e:	df 93       	push	r29
    2b30:	ec 01       	movw	r28, r24
    2b32:	16 2f       	mov	r17, r22
    2b34:	7a 01       	movw	r14, r20
    2b36:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <_ZN15RHGenericDriverC1Ev>
    2b3a:	80 ee       	ldi	r24, 0xE0	; 224
    2b3c:	92 e0       	ldi	r25, 0x02	; 2
    2b3e:	99 83       	std	Y+1, r25	; 0x01
    2b40:	88 83       	st	Y, r24
    2b42:	f9 8e       	std	Y+25, r15	; 0x19
    2b44:	e8 8e       	std	Y+24, r14	; 0x18
    2b46:	1a 8f       	std	Y+26, r17	; 0x1a
    2b48:	df 91       	pop	r29
    2b4a:	cf 91       	pop	r28
    2b4c:	1f 91       	pop	r17
    2b4e:	ff 90       	pop	r15
    2b50:	ef 90       	pop	r14
    2b52:	08 95       	ret

00002b54 <_ZN11RHSPIDriver7spiReadEh>:
    2b54:	0f 93       	push	r16
    2b56:	1f 93       	push	r17
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	ec 01       	movw	r28, r24
    2b5e:	16 2f       	mov	r17, r22
    2b60:	0f b7       	in	r16, 0x3f	; 63
    2b62:	f8 94       	cli
    2b64:	88 8d       	ldd	r24, Y+24	; 0x18
    2b66:	99 8d       	ldd	r25, Y+25	; 0x19
    2b68:	dc 01       	movw	r26, r24
    2b6a:	ed 91       	ld	r30, X+
    2b6c:	fc 91       	ld	r31, X
    2b6e:	00 88       	ldd	r0, Z+16	; 0x10
    2b70:	f1 89       	ldd	r31, Z+17	; 0x11
    2b72:	e0 2d       	mov	r30, r0
    2b74:	09 95       	icall
    2b76:	60 e0       	ldi	r22, 0x00	; 0
    2b78:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b7a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
    2b7e:	88 8d       	ldd	r24, Y+24	; 0x18
    2b80:	99 8d       	ldd	r25, Y+25	; 0x19
    2b82:	61 2f       	mov	r22, r17
    2b84:	6f 77       	andi	r22, 0x7F	; 127
    2b86:	dc 01       	movw	r26, r24
    2b88:	ed 91       	ld	r30, X+
    2b8a:	fc 91       	ld	r31, X
    2b8c:	01 90       	ld	r0, Z+
    2b8e:	f0 81       	ld	r31, Z
    2b90:	e0 2d       	mov	r30, r0
    2b92:	09 95       	icall
    2b94:	88 8d       	ldd	r24, Y+24	; 0x18
    2b96:	99 8d       	ldd	r25, Y+25	; 0x19
    2b98:	dc 01       	movw	r26, r24
    2b9a:	ed 91       	ld	r30, X+
    2b9c:	fc 91       	ld	r31, X
    2b9e:	01 90       	ld	r0, Z+
    2ba0:	f0 81       	ld	r31, Z
    2ba2:	e0 2d       	mov	r30, r0
    2ba4:	60 e0       	ldi	r22, 0x00	; 0
    2ba6:	09 95       	icall
    2ba8:	18 2f       	mov	r17, r24
    2baa:	61 e0       	ldi	r22, 0x01	; 1
    2bac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bae:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
    2bb2:	88 8d       	ldd	r24, Y+24	; 0x18
    2bb4:	99 8d       	ldd	r25, Y+25	; 0x19
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	ed 91       	ld	r30, X+
    2bba:	fc 91       	ld	r31, X
    2bbc:	02 88       	ldd	r0, Z+18	; 0x12
    2bbe:	f3 89       	ldd	r31, Z+19	; 0x13
    2bc0:	e0 2d       	mov	r30, r0
    2bc2:	09 95       	icall
    2bc4:	0f bf       	out	0x3f, r16	; 63
    2bc6:	81 2f       	mov	r24, r17
    2bc8:	df 91       	pop	r29
    2bca:	cf 91       	pop	r28
    2bcc:	1f 91       	pop	r17
    2bce:	0f 91       	pop	r16
    2bd0:	08 95       	ret

00002bd2 <_ZN11RHSPIDriver8spiWriteEhh>:
    2bd2:	ff 92       	push	r15
    2bd4:	0f 93       	push	r16
    2bd6:	1f 93       	push	r17
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	ec 01       	movw	r28, r24
    2bde:	16 2f       	mov	r17, r22
    2be0:	f4 2e       	mov	r15, r20
    2be2:	0f b7       	in	r16, 0x3f	; 63
    2be4:	f8 94       	cli
    2be6:	88 8d       	ldd	r24, Y+24	; 0x18
    2be8:	99 8d       	ldd	r25, Y+25	; 0x19
    2bea:	dc 01       	movw	r26, r24
    2bec:	ed 91       	ld	r30, X+
    2bee:	fc 91       	ld	r31, X
    2bf0:	00 88       	ldd	r0, Z+16	; 0x10
    2bf2:	f1 89       	ldd	r31, Z+17	; 0x11
    2bf4:	e0 2d       	mov	r30, r0
    2bf6:	09 95       	icall
    2bf8:	60 e0       	ldi	r22, 0x00	; 0
    2bfa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bfc:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
    2c00:	88 8d       	ldd	r24, Y+24	; 0x18
    2c02:	99 8d       	ldd	r25, Y+25	; 0x19
    2c04:	61 2f       	mov	r22, r17
    2c06:	60 68       	ori	r22, 0x80	; 128
    2c08:	dc 01       	movw	r26, r24
    2c0a:	ed 91       	ld	r30, X+
    2c0c:	fc 91       	ld	r31, X
    2c0e:	01 90       	ld	r0, Z+
    2c10:	f0 81       	ld	r31, Z
    2c12:	e0 2d       	mov	r30, r0
    2c14:	09 95       	icall
    2c16:	18 2f       	mov	r17, r24
    2c18:	88 8d       	ldd	r24, Y+24	; 0x18
    2c1a:	99 8d       	ldd	r25, Y+25	; 0x19
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	ed 91       	ld	r30, X+
    2c20:	fc 91       	ld	r31, X
    2c22:	01 90       	ld	r0, Z+
    2c24:	f0 81       	ld	r31, Z
    2c26:	e0 2d       	mov	r30, r0
    2c28:	6f 2d       	mov	r22, r15
    2c2a:	09 95       	icall
    2c2c:	61 e0       	ldi	r22, 0x01	; 1
    2c2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c30:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
    2c34:	88 8d       	ldd	r24, Y+24	; 0x18
    2c36:	99 8d       	ldd	r25, Y+25	; 0x19
    2c38:	dc 01       	movw	r26, r24
    2c3a:	ed 91       	ld	r30, X+
    2c3c:	fc 91       	ld	r31, X
    2c3e:	02 88       	ldd	r0, Z+18	; 0x12
    2c40:	f3 89       	ldd	r31, Z+19	; 0x13
    2c42:	e0 2d       	mov	r30, r0
    2c44:	09 95       	icall
    2c46:	0f bf       	out	0x3f, r16	; 63
    2c48:	81 2f       	mov	r24, r17
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	1f 91       	pop	r17
    2c50:	0f 91       	pop	r16
    2c52:	ff 90       	pop	r15
    2c54:	08 95       	ret

00002c56 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
    2c56:	bf 92       	push	r11
    2c58:	cf 92       	push	r12
    2c5a:	df 92       	push	r13
    2c5c:	ef 92       	push	r14
    2c5e:	ff 92       	push	r15
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
    2c68:	ec 01       	movw	r28, r24
    2c6a:	06 2f       	mov	r16, r22
    2c6c:	b4 2e       	mov	r11, r20
    2c6e:	c5 2e       	mov	r12, r21
    2c70:	12 2f       	mov	r17, r18
    2c72:	df b6       	in	r13, 0x3f	; 63
    2c74:	f8 94       	cli
    2c76:	88 8d       	ldd	r24, Y+24	; 0x18
    2c78:	99 8d       	ldd	r25, Y+25	; 0x19
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	ed 91       	ld	r30, X+
    2c7e:	fc 91       	ld	r31, X
    2c80:	00 88       	ldd	r0, Z+16	; 0x10
    2c82:	f1 89       	ldd	r31, Z+17	; 0x11
    2c84:	e0 2d       	mov	r30, r0
    2c86:	09 95       	icall
    2c88:	60 e0       	ldi	r22, 0x00	; 0
    2c8a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c8c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
    2c90:	88 8d       	ldd	r24, Y+24	; 0x18
    2c92:	99 8d       	ldd	r25, Y+25	; 0x19
    2c94:	60 2f       	mov	r22, r16
    2c96:	60 68       	ori	r22, 0x80	; 128
    2c98:	dc 01       	movw	r26, r24
    2c9a:	ed 91       	ld	r30, X+
    2c9c:	fc 91       	ld	r31, X
    2c9e:	01 90       	ld	r0, Z+
    2ca0:	f0 81       	ld	r31, Z
    2ca2:	e0 2d       	mov	r30, r0
    2ca4:	09 95       	icall
    2ca6:	08 2f       	mov	r16, r24
    2ca8:	eb 2c       	mov	r14, r11
    2caa:	fc 2c       	mov	r15, r12
    2cac:	11 23       	and	r17, r17
    2cae:	71 f0       	breq	.+28     	; 0x2ccc <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x76>
    2cb0:	88 8d       	ldd	r24, Y+24	; 0x18
    2cb2:	99 8d       	ldd	r25, Y+25	; 0x19
    2cb4:	f7 01       	movw	r30, r14
    2cb6:	61 91       	ld	r22, Z+
    2cb8:	7f 01       	movw	r14, r30
    2cba:	dc 01       	movw	r26, r24
    2cbc:	ed 91       	ld	r30, X+
    2cbe:	fc 91       	ld	r31, X
    2cc0:	01 90       	ld	r0, Z+
    2cc2:	f0 81       	ld	r31, Z
    2cc4:	e0 2d       	mov	r30, r0
    2cc6:	09 95       	icall
    2cc8:	11 50       	subi	r17, 0x01	; 1
    2cca:	f0 cf       	rjmp	.-32     	; 0x2cac <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x56>
    2ccc:	61 e0       	ldi	r22, 0x01	; 1
    2cce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cd0:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <digitalWrite>
    2cd4:	88 8d       	ldd	r24, Y+24	; 0x18
    2cd6:	99 8d       	ldd	r25, Y+25	; 0x19
    2cd8:	dc 01       	movw	r26, r24
    2cda:	ed 91       	ld	r30, X+
    2cdc:	fc 91       	ld	r31, X
    2cde:	02 88       	ldd	r0, Z+18	; 0x12
    2ce0:	f3 89       	ldd	r31, Z+19	; 0x13
    2ce2:	e0 2d       	mov	r30, r0
    2ce4:	09 95       	icall
    2ce6:	df be       	out	0x3f, r13	; 63
    2ce8:	80 2f       	mov	r24, r16
    2cea:	df 91       	pop	r29
    2cec:	cf 91       	pop	r28
    2cee:	1f 91       	pop	r17
    2cf0:	0f 91       	pop	r16
    2cf2:	ff 90       	pop	r15
    2cf4:	ef 90       	pop	r14
    2cf6:	df 90       	pop	r13
    2cf8:	cf 90       	pop	r12
    2cfa:	bf 90       	pop	r11
    2cfc:	08 95       	ret

00002cfe <_ZN11RHSPIDriver17spiUsingInterruptEh>:
}

void RHSPIDriver::spiUsingInterrupt(uint8_t interruptNumber)
{
    _spi.usingInterrupt(interruptNumber);
    2cfe:	dc 01       	movw	r26, r24
    2d00:	58 96       	adiw	r26, 0x18	; 24
    2d02:	8d 91       	ld	r24, X+
    2d04:	9c 91       	ld	r25, X
    2d06:	59 97       	sbiw	r26, 0x19	; 25
    2d08:	dc 01       	movw	r26, r24
    2d0a:	ed 91       	ld	r30, X+
    2d0c:	fc 91       	ld	r31, X
    2d0e:	04 88       	ldd	r0, Z+20	; 0x14
    2d10:	f5 89       	ldd	r31, Z+21	; 0x15
    2d12:	e0 2d       	mov	r30, r0
    2d14:	09 94       	ijmp

00002d16 <__divsf3>:
    2d16:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__divsf3x>
    2d1a:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__fp_round>
    2d1e:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <__fp_pscB>
    2d22:	58 f0       	brcs	.+22     	; 0x2d3a <__divsf3+0x24>
    2d24:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__fp_pscA>
    2d28:	40 f0       	brcs	.+16     	; 0x2d3a <__divsf3+0x24>
    2d2a:	29 f4       	brne	.+10     	; 0x2d36 <__divsf3+0x20>
    2d2c:	5f 3f       	cpi	r21, 0xFF	; 255
    2d2e:	29 f0       	breq	.+10     	; 0x2d3a <__divsf3+0x24>
    2d30:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__fp_inf>
    2d34:	51 11       	cpse	r21, r1
    2d36:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__fp_szero>
    2d3a:	0c 94 32 17 	jmp	0x2e64	; 0x2e64 <__fp_nan>

00002d3e <__divsf3x>:
    2d3e:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__fp_split3>
    2d42:	68 f3       	brcs	.-38     	; 0x2d1e <__divsf3+0x8>

00002d44 <__divsf3_pse>:
    2d44:	99 23       	and	r25, r25
    2d46:	b1 f3       	breq	.-20     	; 0x2d34 <__divsf3+0x1e>
    2d48:	55 23       	and	r21, r21
    2d4a:	91 f3       	breq	.-28     	; 0x2d30 <__divsf3+0x1a>
    2d4c:	95 1b       	sub	r25, r21
    2d4e:	55 0b       	sbc	r21, r21
    2d50:	bb 27       	eor	r27, r27
    2d52:	aa 27       	eor	r26, r26
    2d54:	62 17       	cp	r22, r18
    2d56:	73 07       	cpc	r23, r19
    2d58:	84 07       	cpc	r24, r20
    2d5a:	38 f0       	brcs	.+14     	; 0x2d6a <__divsf3_pse+0x26>
    2d5c:	9f 5f       	subi	r25, 0xFF	; 255
    2d5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d60:	22 0f       	add	r18, r18
    2d62:	33 1f       	adc	r19, r19
    2d64:	44 1f       	adc	r20, r20
    2d66:	aa 1f       	adc	r26, r26
    2d68:	a9 f3       	breq	.-22     	; 0x2d54 <__divsf3_pse+0x10>
    2d6a:	35 d0       	rcall	.+106    	; 0x2dd6 <__divsf3_pse+0x92>
    2d6c:	0e 2e       	mov	r0, r30
    2d6e:	3a f0       	brmi	.+14     	; 0x2d7e <__divsf3_pse+0x3a>
    2d70:	e0 e8       	ldi	r30, 0x80	; 128
    2d72:	32 d0       	rcall	.+100    	; 0x2dd8 <__divsf3_pse+0x94>
    2d74:	91 50       	subi	r25, 0x01	; 1
    2d76:	50 40       	sbci	r21, 0x00	; 0
    2d78:	e6 95       	lsr	r30
    2d7a:	00 1c       	adc	r0, r0
    2d7c:	ca f7       	brpl	.-14     	; 0x2d70 <__divsf3_pse+0x2c>
    2d7e:	2b d0       	rcall	.+86     	; 0x2dd6 <__divsf3_pse+0x92>
    2d80:	fe 2f       	mov	r31, r30
    2d82:	29 d0       	rcall	.+82     	; 0x2dd6 <__divsf3_pse+0x92>
    2d84:	66 0f       	add	r22, r22
    2d86:	77 1f       	adc	r23, r23
    2d88:	88 1f       	adc	r24, r24
    2d8a:	bb 1f       	adc	r27, r27
    2d8c:	26 17       	cp	r18, r22
    2d8e:	37 07       	cpc	r19, r23
    2d90:	48 07       	cpc	r20, r24
    2d92:	ab 07       	cpc	r26, r27
    2d94:	b0 e8       	ldi	r27, 0x80	; 128
    2d96:	09 f0       	breq	.+2      	; 0x2d9a <__divsf3_pse+0x56>
    2d98:	bb 0b       	sbc	r27, r27
    2d9a:	80 2d       	mov	r24, r0
    2d9c:	bf 01       	movw	r22, r30
    2d9e:	ff 27       	eor	r31, r31
    2da0:	93 58       	subi	r25, 0x83	; 131
    2da2:	5f 4f       	sbci	r21, 0xFF	; 255
    2da4:	3a f0       	brmi	.+14     	; 0x2db4 <__divsf3_pse+0x70>
    2da6:	9e 3f       	cpi	r25, 0xFE	; 254
    2da8:	51 05       	cpc	r21, r1
    2daa:	78 f0       	brcs	.+30     	; 0x2dca <__divsf3_pse+0x86>
    2dac:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__fp_inf>
    2db0:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__fp_szero>
    2db4:	5f 3f       	cpi	r21, 0xFF	; 255
    2db6:	e4 f3       	brlt	.-8      	; 0x2db0 <__divsf3_pse+0x6c>
    2db8:	98 3e       	cpi	r25, 0xE8	; 232
    2dba:	d4 f3       	brlt	.-12     	; 0x2db0 <__divsf3_pse+0x6c>
    2dbc:	86 95       	lsr	r24
    2dbe:	77 95       	ror	r23
    2dc0:	67 95       	ror	r22
    2dc2:	b7 95       	ror	r27
    2dc4:	f7 95       	ror	r31
    2dc6:	9f 5f       	subi	r25, 0xFF	; 255
    2dc8:	c9 f7       	brne	.-14     	; 0x2dbc <__divsf3_pse+0x78>
    2dca:	88 0f       	add	r24, r24
    2dcc:	91 1d       	adc	r25, r1
    2dce:	96 95       	lsr	r25
    2dd0:	87 95       	ror	r24
    2dd2:	97 f9       	bld	r25, 7
    2dd4:	08 95       	ret
    2dd6:	e1 e0       	ldi	r30, 0x01	; 1
    2dd8:	66 0f       	add	r22, r22
    2dda:	77 1f       	adc	r23, r23
    2ddc:	88 1f       	adc	r24, r24
    2dde:	bb 1f       	adc	r27, r27
    2de0:	62 17       	cp	r22, r18
    2de2:	73 07       	cpc	r23, r19
    2de4:	84 07       	cpc	r24, r20
    2de6:	ba 07       	cpc	r27, r26
    2de8:	20 f0       	brcs	.+8      	; 0x2df2 <__divsf3_pse+0xae>
    2dea:	62 1b       	sub	r22, r18
    2dec:	73 0b       	sbc	r23, r19
    2dee:	84 0b       	sbc	r24, r20
    2df0:	ba 0b       	sbc	r27, r26
    2df2:	ee 1f       	adc	r30, r30
    2df4:	88 f7       	brcc	.-30     	; 0x2dd8 <__divsf3_pse+0x94>
    2df6:	e0 95       	com	r30
    2df8:	08 95       	ret

00002dfa <__fixunssfsi>:
    2dfa:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <__fp_splitA>
    2dfe:	88 f0       	brcs	.+34     	; 0x2e22 <__fixunssfsi+0x28>
    2e00:	9f 57       	subi	r25, 0x7F	; 127
    2e02:	98 f0       	brcs	.+38     	; 0x2e2a <__fixunssfsi+0x30>
    2e04:	b9 2f       	mov	r27, r25
    2e06:	99 27       	eor	r25, r25
    2e08:	b7 51       	subi	r27, 0x17	; 23
    2e0a:	b0 f0       	brcs	.+44     	; 0x2e38 <__fixunssfsi+0x3e>
    2e0c:	e1 f0       	breq	.+56     	; 0x2e46 <__fixunssfsi+0x4c>
    2e0e:	66 0f       	add	r22, r22
    2e10:	77 1f       	adc	r23, r23
    2e12:	88 1f       	adc	r24, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	1a f0       	brmi	.+6      	; 0x2e1e <__fixunssfsi+0x24>
    2e18:	ba 95       	dec	r27
    2e1a:	c9 f7       	brne	.-14     	; 0x2e0e <__fixunssfsi+0x14>
    2e1c:	14 c0       	rjmp	.+40     	; 0x2e46 <__fixunssfsi+0x4c>
    2e1e:	b1 30       	cpi	r27, 0x01	; 1
    2e20:	91 f0       	breq	.+36     	; 0x2e46 <__fixunssfsi+0x4c>
    2e22:	0e 94 76 17 	call	0x2eec	; 0x2eec <__fp_zero>
    2e26:	b1 e0       	ldi	r27, 0x01	; 1
    2e28:	08 95       	ret
    2e2a:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__fp_zero>
    2e2e:	67 2f       	mov	r22, r23
    2e30:	78 2f       	mov	r23, r24
    2e32:	88 27       	eor	r24, r24
    2e34:	b8 5f       	subi	r27, 0xF8	; 248
    2e36:	39 f0       	breq	.+14     	; 0x2e46 <__fixunssfsi+0x4c>
    2e38:	b9 3f       	cpi	r27, 0xF9	; 249
    2e3a:	cc f3       	brlt	.-14     	; 0x2e2e <__fixunssfsi+0x34>
    2e3c:	86 95       	lsr	r24
    2e3e:	77 95       	ror	r23
    2e40:	67 95       	ror	r22
    2e42:	b3 95       	inc	r27
    2e44:	d9 f7       	brne	.-10     	; 0x2e3c <__fixunssfsi+0x42>
    2e46:	3e f4       	brtc	.+14     	; 0x2e56 <__fixunssfsi+0x5c>
    2e48:	90 95       	com	r25
    2e4a:	80 95       	com	r24
    2e4c:	70 95       	com	r23
    2e4e:	61 95       	neg	r22
    2e50:	7f 4f       	sbci	r23, 0xFF	; 255
    2e52:	8f 4f       	sbci	r24, 0xFF	; 255
    2e54:	9f 4f       	sbci	r25, 0xFF	; 255
    2e56:	08 95       	ret

00002e58 <__fp_inf>:
    2e58:	97 f9       	bld	r25, 7
    2e5a:	9f 67       	ori	r25, 0x7F	; 127
    2e5c:	80 e8       	ldi	r24, 0x80	; 128
    2e5e:	70 e0       	ldi	r23, 0x00	; 0
    2e60:	60 e0       	ldi	r22, 0x00	; 0
    2e62:	08 95       	ret

00002e64 <__fp_nan>:
    2e64:	9f ef       	ldi	r25, 0xFF	; 255
    2e66:	80 ec       	ldi	r24, 0xC0	; 192
    2e68:	08 95       	ret

00002e6a <__fp_pscA>:
    2e6a:	00 24       	eor	r0, r0
    2e6c:	0a 94       	dec	r0
    2e6e:	16 16       	cp	r1, r22
    2e70:	17 06       	cpc	r1, r23
    2e72:	18 06       	cpc	r1, r24
    2e74:	09 06       	cpc	r0, r25
    2e76:	08 95       	ret

00002e78 <__fp_pscB>:
    2e78:	00 24       	eor	r0, r0
    2e7a:	0a 94       	dec	r0
    2e7c:	12 16       	cp	r1, r18
    2e7e:	13 06       	cpc	r1, r19
    2e80:	14 06       	cpc	r1, r20
    2e82:	05 06       	cpc	r0, r21
    2e84:	08 95       	ret

00002e86 <__fp_round>:
    2e86:	09 2e       	mov	r0, r25
    2e88:	03 94       	inc	r0
    2e8a:	00 0c       	add	r0, r0
    2e8c:	11 f4       	brne	.+4      	; 0x2e92 <__fp_round+0xc>
    2e8e:	88 23       	and	r24, r24
    2e90:	52 f0       	brmi	.+20     	; 0x2ea6 <__fp_round+0x20>
    2e92:	bb 0f       	add	r27, r27
    2e94:	40 f4       	brcc	.+16     	; 0x2ea6 <__fp_round+0x20>
    2e96:	bf 2b       	or	r27, r31
    2e98:	11 f4       	brne	.+4      	; 0x2e9e <__fp_round+0x18>
    2e9a:	60 ff       	sbrs	r22, 0
    2e9c:	04 c0       	rjmp	.+8      	; 0x2ea6 <__fp_round+0x20>
    2e9e:	6f 5f       	subi	r22, 0xFF	; 255
    2ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ea4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea6:	08 95       	ret

00002ea8 <__fp_split3>:
    2ea8:	57 fd       	sbrc	r21, 7
    2eaa:	90 58       	subi	r25, 0x80	; 128
    2eac:	44 0f       	add	r20, r20
    2eae:	55 1f       	adc	r21, r21
    2eb0:	59 f0       	breq	.+22     	; 0x2ec8 <__fp_splitA+0x10>
    2eb2:	5f 3f       	cpi	r21, 0xFF	; 255
    2eb4:	71 f0       	breq	.+28     	; 0x2ed2 <__fp_splitA+0x1a>
    2eb6:	47 95       	ror	r20

00002eb8 <__fp_splitA>:
    2eb8:	88 0f       	add	r24, r24
    2eba:	97 fb       	bst	r25, 7
    2ebc:	99 1f       	adc	r25, r25
    2ebe:	61 f0       	breq	.+24     	; 0x2ed8 <__fp_splitA+0x20>
    2ec0:	9f 3f       	cpi	r25, 0xFF	; 255
    2ec2:	79 f0       	breq	.+30     	; 0x2ee2 <__fp_splitA+0x2a>
    2ec4:	87 95       	ror	r24
    2ec6:	08 95       	ret
    2ec8:	12 16       	cp	r1, r18
    2eca:	13 06       	cpc	r1, r19
    2ecc:	14 06       	cpc	r1, r20
    2ece:	55 1f       	adc	r21, r21
    2ed0:	f2 cf       	rjmp	.-28     	; 0x2eb6 <__fp_split3+0xe>
    2ed2:	46 95       	lsr	r20
    2ed4:	f1 df       	rcall	.-30     	; 0x2eb8 <__fp_splitA>
    2ed6:	08 c0       	rjmp	.+16     	; 0x2ee8 <__fp_splitA+0x30>
    2ed8:	16 16       	cp	r1, r22
    2eda:	17 06       	cpc	r1, r23
    2edc:	18 06       	cpc	r1, r24
    2ede:	99 1f       	adc	r25, r25
    2ee0:	f1 cf       	rjmp	.-30     	; 0x2ec4 <__fp_splitA+0xc>
    2ee2:	86 95       	lsr	r24
    2ee4:	71 05       	cpc	r23, r1
    2ee6:	61 05       	cpc	r22, r1
    2ee8:	08 94       	sec
    2eea:	08 95       	ret

00002eec <__fp_zero>:
    2eec:	e8 94       	clt

00002eee <__fp_szero>:
    2eee:	bb 27       	eor	r27, r27
    2ef0:	66 27       	eor	r22, r22
    2ef2:	77 27       	eor	r23, r23
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	97 f9       	bld	r25, 7
    2ef8:	08 95       	ret

00002efa <__mulsf3>:
    2efa:	0e 94 90 17 	call	0x2f20	; 0x2f20 <__mulsf3x>
    2efe:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__fp_round>
    2f02:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <__fp_pscA>
    2f06:	38 f0       	brcs	.+14     	; 0x2f16 <__mulsf3+0x1c>
    2f08:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <__fp_pscB>
    2f0c:	20 f0       	brcs	.+8      	; 0x2f16 <__mulsf3+0x1c>
    2f0e:	95 23       	and	r25, r21
    2f10:	11 f0       	breq	.+4      	; 0x2f16 <__mulsf3+0x1c>
    2f12:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__fp_inf>
    2f16:	0c 94 32 17 	jmp	0x2e64	; 0x2e64 <__fp_nan>
    2f1a:	11 24       	eor	r1, r1
    2f1c:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__fp_szero>

00002f20 <__mulsf3x>:
    2f20:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__fp_split3>
    2f24:	70 f3       	brcs	.-36     	; 0x2f02 <__mulsf3+0x8>

00002f26 <__mulsf3_pse>:
    2f26:	95 9f       	mul	r25, r21
    2f28:	c1 f3       	breq	.-16     	; 0x2f1a <__mulsf3+0x20>
    2f2a:	95 0f       	add	r25, r21
    2f2c:	50 e0       	ldi	r21, 0x00	; 0
    2f2e:	55 1f       	adc	r21, r21
    2f30:	62 9f       	mul	r22, r18
    2f32:	f0 01       	movw	r30, r0
    2f34:	72 9f       	mul	r23, r18
    2f36:	bb 27       	eor	r27, r27
    2f38:	f0 0d       	add	r31, r0
    2f3a:	b1 1d       	adc	r27, r1
    2f3c:	63 9f       	mul	r22, r19
    2f3e:	aa 27       	eor	r26, r26
    2f40:	f0 0d       	add	r31, r0
    2f42:	b1 1d       	adc	r27, r1
    2f44:	aa 1f       	adc	r26, r26
    2f46:	64 9f       	mul	r22, r20
    2f48:	66 27       	eor	r22, r22
    2f4a:	b0 0d       	add	r27, r0
    2f4c:	a1 1d       	adc	r26, r1
    2f4e:	66 1f       	adc	r22, r22
    2f50:	82 9f       	mul	r24, r18
    2f52:	22 27       	eor	r18, r18
    2f54:	b0 0d       	add	r27, r0
    2f56:	a1 1d       	adc	r26, r1
    2f58:	62 1f       	adc	r22, r18
    2f5a:	73 9f       	mul	r23, r19
    2f5c:	b0 0d       	add	r27, r0
    2f5e:	a1 1d       	adc	r26, r1
    2f60:	62 1f       	adc	r22, r18
    2f62:	83 9f       	mul	r24, r19
    2f64:	a0 0d       	add	r26, r0
    2f66:	61 1d       	adc	r22, r1
    2f68:	22 1f       	adc	r18, r18
    2f6a:	74 9f       	mul	r23, r20
    2f6c:	33 27       	eor	r19, r19
    2f6e:	a0 0d       	add	r26, r0
    2f70:	61 1d       	adc	r22, r1
    2f72:	23 1f       	adc	r18, r19
    2f74:	84 9f       	mul	r24, r20
    2f76:	60 0d       	add	r22, r0
    2f78:	21 1d       	adc	r18, r1
    2f7a:	82 2f       	mov	r24, r18
    2f7c:	76 2f       	mov	r23, r22
    2f7e:	6a 2f       	mov	r22, r26
    2f80:	11 24       	eor	r1, r1
    2f82:	9f 57       	subi	r25, 0x7F	; 127
    2f84:	50 40       	sbci	r21, 0x00	; 0
    2f86:	9a f0       	brmi	.+38     	; 0x2fae <__mulsf3_pse+0x88>
    2f88:	f1 f0       	breq	.+60     	; 0x2fc6 <__mulsf3_pse+0xa0>
    2f8a:	88 23       	and	r24, r24
    2f8c:	4a f0       	brmi	.+18     	; 0x2fa0 <__mulsf3_pse+0x7a>
    2f8e:	ee 0f       	add	r30, r30
    2f90:	ff 1f       	adc	r31, r31
    2f92:	bb 1f       	adc	r27, r27
    2f94:	66 1f       	adc	r22, r22
    2f96:	77 1f       	adc	r23, r23
    2f98:	88 1f       	adc	r24, r24
    2f9a:	91 50       	subi	r25, 0x01	; 1
    2f9c:	50 40       	sbci	r21, 0x00	; 0
    2f9e:	a9 f7       	brne	.-22     	; 0x2f8a <__mulsf3_pse+0x64>
    2fa0:	9e 3f       	cpi	r25, 0xFE	; 254
    2fa2:	51 05       	cpc	r21, r1
    2fa4:	80 f0       	brcs	.+32     	; 0x2fc6 <__mulsf3_pse+0xa0>
    2fa6:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__fp_inf>
    2faa:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__fp_szero>
    2fae:	5f 3f       	cpi	r21, 0xFF	; 255
    2fb0:	e4 f3       	brlt	.-8      	; 0x2faa <__mulsf3_pse+0x84>
    2fb2:	98 3e       	cpi	r25, 0xE8	; 232
    2fb4:	d4 f3       	brlt	.-12     	; 0x2faa <__mulsf3_pse+0x84>
    2fb6:	86 95       	lsr	r24
    2fb8:	77 95       	ror	r23
    2fba:	67 95       	ror	r22
    2fbc:	b7 95       	ror	r27
    2fbe:	f7 95       	ror	r31
    2fc0:	e7 95       	ror	r30
    2fc2:	9f 5f       	subi	r25, 0xFF	; 255
    2fc4:	c1 f7       	brne	.-16     	; 0x2fb6 <__mulsf3_pse+0x90>
    2fc6:	fe 2b       	or	r31, r30
    2fc8:	88 0f       	add	r24, r24
    2fca:	91 1d       	adc	r25, r1
    2fcc:	96 95       	lsr	r25
    2fce:	87 95       	ror	r24
    2fd0:	97 f9       	bld	r25, 7
    2fd2:	08 95       	ret

00002fd4 <__udivmodsi4>:
    2fd4:	a1 e2       	ldi	r26, 0x21	; 33
    2fd6:	1a 2e       	mov	r1, r26
    2fd8:	aa 1b       	sub	r26, r26
    2fda:	bb 1b       	sub	r27, r27
    2fdc:	fd 01       	movw	r30, r26
    2fde:	0d c0       	rjmp	.+26     	; 0x2ffa <__udivmodsi4_ep>

00002fe0 <__udivmodsi4_loop>:
    2fe0:	aa 1f       	adc	r26, r26
    2fe2:	bb 1f       	adc	r27, r27
    2fe4:	ee 1f       	adc	r30, r30
    2fe6:	ff 1f       	adc	r31, r31
    2fe8:	a2 17       	cp	r26, r18
    2fea:	b3 07       	cpc	r27, r19
    2fec:	e4 07       	cpc	r30, r20
    2fee:	f5 07       	cpc	r31, r21
    2ff0:	20 f0       	brcs	.+8      	; 0x2ffa <__udivmodsi4_ep>
    2ff2:	a2 1b       	sub	r26, r18
    2ff4:	b3 0b       	sbc	r27, r19
    2ff6:	e4 0b       	sbc	r30, r20
    2ff8:	f5 0b       	sbc	r31, r21

00002ffa <__udivmodsi4_ep>:
    2ffa:	66 1f       	adc	r22, r22
    2ffc:	77 1f       	adc	r23, r23
    2ffe:	88 1f       	adc	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	1a 94       	dec	r1
    3004:	69 f7       	brne	.-38     	; 0x2fe0 <__udivmodsi4_loop>
    3006:	60 95       	com	r22
    3008:	70 95       	com	r23
    300a:	80 95       	com	r24
    300c:	90 95       	com	r25
    300e:	9b 01       	movw	r18, r22
    3010:	ac 01       	movw	r20, r24
    3012:	bd 01       	movw	r22, r26
    3014:	cf 01       	movw	r24, r30
    3016:	08 95       	ret

00003018 <__divmodsi4>:
    3018:	05 2e       	mov	r0, r21
    301a:	97 fb       	bst	r25, 7
    301c:	1e f4       	brtc	.+6      	; 0x3024 <__divmodsi4+0xc>
    301e:	00 94       	com	r0
    3020:	0e 94 23 18 	call	0x3046	; 0x3046 <__negsi2>
    3024:	57 fd       	sbrc	r21, 7
    3026:	07 d0       	rcall	.+14     	; 0x3036 <__divmodsi4_neg2>
    3028:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__udivmodsi4>
    302c:	07 fc       	sbrc	r0, 7
    302e:	03 d0       	rcall	.+6      	; 0x3036 <__divmodsi4_neg2>
    3030:	4e f4       	brtc	.+18     	; 0x3044 <__divmodsi4_exit>
    3032:	0c 94 23 18 	jmp	0x3046	; 0x3046 <__negsi2>

00003036 <__divmodsi4_neg2>:
    3036:	50 95       	com	r21
    3038:	40 95       	com	r20
    303a:	30 95       	com	r19
    303c:	21 95       	neg	r18
    303e:	3f 4f       	sbci	r19, 0xFF	; 255
    3040:	4f 4f       	sbci	r20, 0xFF	; 255
    3042:	5f 4f       	sbci	r21, 0xFF	; 255

00003044 <__divmodsi4_exit>:
    3044:	08 95       	ret

00003046 <__negsi2>:
    3046:	90 95       	com	r25
    3048:	80 95       	com	r24
    304a:	70 95       	com	r23
    304c:	61 95       	neg	r22
    304e:	7f 4f       	sbci	r23, 0xFF	; 255
    3050:	8f 4f       	sbci	r24, 0xFF	; 255
    3052:	9f 4f       	sbci	r25, 0xFF	; 255
    3054:	08 95       	ret

00003056 <__tablejump2__>:
    3056:	ee 0f       	add	r30, r30
    3058:	ff 1f       	adc	r31, r31
    305a:	05 90       	lpm	r0, Z+
    305c:	f4 91       	lpm	r31, Z
    305e:	e0 2d       	mov	r30, r0
    3060:	09 94       	ijmp

00003062 <__muluhisi3>:
    3062:	0e 94 3c 18 	call	0x3078	; 0x3078 <__umulhisi3>
    3066:	a5 9f       	mul	r26, r21
    3068:	90 0d       	add	r25, r0
    306a:	b4 9f       	mul	r27, r20
    306c:	90 0d       	add	r25, r0
    306e:	a4 9f       	mul	r26, r20
    3070:	80 0d       	add	r24, r0
    3072:	91 1d       	adc	r25, r1
    3074:	11 24       	eor	r1, r1
    3076:	08 95       	ret

00003078 <__umulhisi3>:
    3078:	a2 9f       	mul	r26, r18
    307a:	b0 01       	movw	r22, r0
    307c:	b3 9f       	mul	r27, r19
    307e:	c0 01       	movw	r24, r0
    3080:	a3 9f       	mul	r26, r19
    3082:	70 0d       	add	r23, r0
    3084:	81 1d       	adc	r24, r1
    3086:	11 24       	eor	r1, r1
    3088:	91 1d       	adc	r25, r1
    308a:	b2 9f       	mul	r27, r18
    308c:	70 0d       	add	r23, r0
    308e:	81 1d       	adc	r24, r1
    3090:	11 24       	eor	r1, r1
    3092:	91 1d       	adc	r25, r1
    3094:	08 95       	ret

00003096 <random_r>:
    3096:	8f 92       	push	r8
    3098:	9f 92       	push	r9
    309a:	af 92       	push	r10
    309c:	bf 92       	push	r11
    309e:	cf 92       	push	r12
    30a0:	df 92       	push	r13
    30a2:	ef 92       	push	r14
    30a4:	ff 92       	push	r15
    30a6:	cf 93       	push	r28
    30a8:	df 93       	push	r29
    30aa:	ec 01       	movw	r28, r24
    30ac:	68 81       	ld	r22, Y
    30ae:	79 81       	ldd	r23, Y+1	; 0x01
    30b0:	8a 81       	ldd	r24, Y+2	; 0x02
    30b2:	9b 81       	ldd	r25, Y+3	; 0x03
    30b4:	61 15       	cp	r22, r1
    30b6:	71 05       	cpc	r23, r1
    30b8:	81 05       	cpc	r24, r1
    30ba:	91 05       	cpc	r25, r1
    30bc:	21 f4       	brne	.+8      	; 0x30c6 <random_r+0x30>
    30be:	64 e2       	ldi	r22, 0x24	; 36
    30c0:	79 ed       	ldi	r23, 0xD9	; 217
    30c2:	8b e5       	ldi	r24, 0x5B	; 91
    30c4:	97 e0       	ldi	r25, 0x07	; 7
    30c6:	2d e1       	ldi	r18, 0x1D	; 29
    30c8:	33 ef       	ldi	r19, 0xF3	; 243
    30ca:	41 e0       	ldi	r20, 0x01	; 1
    30cc:	50 e0       	ldi	r21, 0x00	; 0
    30ce:	0e 94 0c 18 	call	0x3018	; 0x3018 <__divmodsi4>
    30d2:	49 01       	movw	r8, r18
    30d4:	5a 01       	movw	r10, r20
    30d6:	9b 01       	movw	r18, r22
    30d8:	ac 01       	movw	r20, r24
    30da:	a7 ea       	ldi	r26, 0xA7	; 167
    30dc:	b1 e4       	ldi	r27, 0x41	; 65
    30de:	0e 94 31 18 	call	0x3062	; 0x3062 <__muluhisi3>
    30e2:	6b 01       	movw	r12, r22
    30e4:	7c 01       	movw	r14, r24
    30e6:	ac ee       	ldi	r26, 0xEC	; 236
    30e8:	b4 ef       	ldi	r27, 0xF4	; 244
    30ea:	a5 01       	movw	r20, r10
    30ec:	94 01       	movw	r18, r8
    30ee:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulohisi3>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	8c 0d       	add	r24, r12
    30f8:	9d 1d       	adc	r25, r13
    30fa:	ae 1d       	adc	r26, r14
    30fc:	bf 1d       	adc	r27, r15
    30fe:	b7 ff       	sbrs	r27, 7
    3100:	03 c0       	rjmp	.+6      	; 0x3108 <random_r+0x72>
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	a1 09       	sbc	r26, r1
    3106:	b0 48       	sbci	r27, 0x80	; 128
    3108:	88 83       	st	Y, r24
    310a:	99 83       	std	Y+1, r25	; 0x01
    310c:	aa 83       	std	Y+2, r26	; 0x02
    310e:	bb 83       	std	Y+3, r27	; 0x03
    3110:	bc 01       	movw	r22, r24
    3112:	cd 01       	movw	r24, r26
    3114:	9f 77       	andi	r25, 0x7F	; 127
    3116:	df 91       	pop	r29
    3118:	cf 91       	pop	r28
    311a:	ff 90       	pop	r15
    311c:	ef 90       	pop	r14
    311e:	df 90       	pop	r13
    3120:	cf 90       	pop	r12
    3122:	bf 90       	pop	r11
    3124:	af 90       	pop	r10
    3126:	9f 90       	pop	r9
    3128:	8f 90       	pop	r8
    312a:	08 95       	ret

0000312c <random>:
    312c:	8f 92       	push	r8
    312e:	9f 92       	push	r9
    3130:	af 92       	push	r10
    3132:	bf 92       	push	r11
    3134:	cf 92       	push	r12
    3136:	df 92       	push	r13
    3138:	ef 92       	push	r14
    313a:	ff 92       	push	r15
    313c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    3140:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    3144:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    3148:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    314c:	61 15       	cp	r22, r1
    314e:	71 05       	cpc	r23, r1
    3150:	81 05       	cpc	r24, r1
    3152:	91 05       	cpc	r25, r1
    3154:	21 f4       	brne	.+8      	; 0x315e <random+0x32>
    3156:	64 e2       	ldi	r22, 0x24	; 36
    3158:	79 ed       	ldi	r23, 0xD9	; 217
    315a:	8b e5       	ldi	r24, 0x5B	; 91
    315c:	97 e0       	ldi	r25, 0x07	; 7
    315e:	2d e1       	ldi	r18, 0x1D	; 29
    3160:	33 ef       	ldi	r19, 0xF3	; 243
    3162:	41 e0       	ldi	r20, 0x01	; 1
    3164:	50 e0       	ldi	r21, 0x00	; 0
    3166:	0e 94 0c 18 	call	0x3018	; 0x3018 <__divmodsi4>
    316a:	49 01       	movw	r8, r18
    316c:	5a 01       	movw	r10, r20
    316e:	9b 01       	movw	r18, r22
    3170:	ac 01       	movw	r20, r24
    3172:	a7 ea       	ldi	r26, 0xA7	; 167
    3174:	b1 e4       	ldi	r27, 0x41	; 65
    3176:	0e 94 31 18 	call	0x3062	; 0x3062 <__muluhisi3>
    317a:	6b 01       	movw	r12, r22
    317c:	7c 01       	movw	r14, r24
    317e:	ac ee       	ldi	r26, 0xEC	; 236
    3180:	b4 ef       	ldi	r27, 0xF4	; 244
    3182:	a5 01       	movw	r20, r10
    3184:	94 01       	movw	r18, r8
    3186:	0e 94 21 19 	call	0x3242	; 0x3242 <__mulohisi3>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	8c 0d       	add	r24, r12
    3190:	9d 1d       	adc	r25, r13
    3192:	ae 1d       	adc	r26, r14
    3194:	bf 1d       	adc	r27, r15
    3196:	b7 ff       	sbrs	r27, 7
    3198:	03 c0       	rjmp	.+6      	; 0x31a0 <random+0x74>
    319a:	01 97       	sbiw	r24, 0x01	; 1
    319c:	a1 09       	sbc	r26, r1
    319e:	b0 48       	sbci	r27, 0x80	; 128
    31a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    31a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    31a8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    31ac:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    31b0:	bc 01       	movw	r22, r24
    31b2:	cd 01       	movw	r24, r26
    31b4:	9f 77       	andi	r25, 0x7F	; 127
    31b6:	ff 90       	pop	r15
    31b8:	ef 90       	pop	r14
    31ba:	df 90       	pop	r13
    31bc:	cf 90       	pop	r12
    31be:	bf 90       	pop	r11
    31c0:	af 90       	pop	r10
    31c2:	9f 90       	pop	r9
    31c4:	8f 90       	pop	r8
    31c6:	08 95       	ret

000031c8 <srandom>:
    31c8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    31cc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    31d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    31d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    31d8:	08 95       	ret

000031da <abort>:
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	f8 94       	cli
    31e0:	0c 94 26 19 	jmp	0x324c	; 0x324c <_exit>

000031e4 <memcpy_P>:
    31e4:	fb 01       	movw	r30, r22
    31e6:	dc 01       	movw	r26, r24
    31e8:	02 c0       	rjmp	.+4      	; 0x31ee <memcpy_P+0xa>
    31ea:	05 90       	lpm	r0, Z+
    31ec:	0d 92       	st	X+, r0
    31ee:	41 50       	subi	r20, 0x01	; 1
    31f0:	50 40       	sbci	r21, 0x00	; 0
    31f2:	d8 f7       	brcc	.-10     	; 0x31ea <memcpy_P+0x6>
    31f4:	08 95       	ret

000031f6 <memcpy>:
    31f6:	fb 01       	movw	r30, r22
    31f8:	dc 01       	movw	r26, r24
    31fa:	02 c0       	rjmp	.+4      	; 0x3200 <memcpy+0xa>
    31fc:	01 90       	ld	r0, Z+
    31fe:	0d 92       	st	X+, r0
    3200:	41 50       	subi	r20, 0x01	; 1
    3202:	50 40       	sbci	r21, 0x00	; 0
    3204:	d8 f7       	brcc	.-10     	; 0x31fc <memcpy+0x6>
    3206:	08 95       	ret

00003208 <strstr>:
    3208:	fb 01       	movw	r30, r22
    320a:	51 91       	ld	r21, Z+
    320c:	55 23       	and	r21, r21
    320e:	a9 f0       	breq	.+42     	; 0x323a <strstr+0x32>
    3210:	bf 01       	movw	r22, r30
    3212:	dc 01       	movw	r26, r24
    3214:	4d 91       	ld	r20, X+
    3216:	45 17       	cp	r20, r21
    3218:	41 11       	cpse	r20, r1
    321a:	e1 f7       	brne	.-8      	; 0x3214 <strstr+0xc>
    321c:	59 f4       	brne	.+22     	; 0x3234 <strstr+0x2c>
    321e:	cd 01       	movw	r24, r26
    3220:	01 90       	ld	r0, Z+
    3222:	00 20       	and	r0, r0
    3224:	49 f0       	breq	.+18     	; 0x3238 <strstr+0x30>
    3226:	4d 91       	ld	r20, X+
    3228:	40 15       	cp	r20, r0
    322a:	41 11       	cpse	r20, r1
    322c:	c9 f3       	breq	.-14     	; 0x3220 <strstr+0x18>
    322e:	fb 01       	movw	r30, r22
    3230:	41 11       	cpse	r20, r1
    3232:	ef cf       	rjmp	.-34     	; 0x3212 <strstr+0xa>
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	08 95       	ret

0000323c <__mulshisi3>:
    323c:	b7 ff       	sbrs	r27, 7
    323e:	0c 94 31 18 	jmp	0x3062	; 0x3062 <__muluhisi3>

00003242 <__mulohisi3>:
    3242:	0e 94 31 18 	call	0x3062	; 0x3062 <__muluhisi3>
    3246:	82 1b       	sub	r24, r18
    3248:	93 0b       	sbc	r25, r19
    324a:	08 95       	ret

0000324c <_exit>:
    324c:	f8 94       	cli

0000324e <__stop_program>:
    324e:	ff cf       	rjmp	.-2      	; 0x324e <__stop_program>
