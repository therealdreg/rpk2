
spiflash_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000216  00800100  00002c32  00002cc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010d  00800316  00800316  00002edc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002edc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000568  00000000  00000000  00002f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e345  00000000  00000000  000034b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002de3  00000000  00000000  000117f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003564  00000000  00000000  000145dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000129c  00000000  00000000  00017b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000316a  00000000  00000000  00018ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006479  00000000  00000000  0001bf46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000638  00000000  00000000  000223bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 93 00 	jmp	0x126	; 0x126 <__ctors_end>
       4:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
       8:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
       c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      10:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      14:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      18:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      1c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      20:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      24:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      28:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__vector_10>
      2c:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__vector_11>
      30:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      34:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      38:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      3c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      40:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      44:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      48:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      4c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      50:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      54:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      58:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      5c:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__vector_23>
      60:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      64:	0c 94 02 0e 	jmp	0x1c04	; 0x1c04 <__vector_25>
      68:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__vector_26>
      6c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      70:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      74:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      78:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      7c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      80:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      84:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      88:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      8c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      90:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      94:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      98:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      9c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      a0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      a4:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>
      a8:	0c 94 bb 00 	jmp	0x176	; 0x176 <__bad_interrupt>

000000ac <USB_DeviceDescriptorIAD>:
      ac:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      bc:	03 01                                               ..

000000be <STRING_MANUFACTURER>:
      be:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000ca <STRING_PRODUCT>:
      ca:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000000db <STRING_LANGUAGE>:
      db:	04 03 09 04                                         ....

000000df <_cdcInterface>:
      df:	08 0b 00 02 02 02 00 00 09 04 00 00 01 02 02 00     ................
      ef:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
      ff:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     10f:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
     11f:	00 00 00                                            ...

00000122 <__ctors_start>:
     122:	64 0e       	add	r6, r20
     124:	39 15       	cp	r19, r9

00000126 <__ctors_end>:
     126:	11 24       	eor	r1, r1
     128:	1f be       	out	0x3f, r1	; 63
     12a:	cf ef       	ldi	r28, 0xFF	; 255
     12c:	da e0       	ldi	r29, 0x0A	; 10
     12e:	de bf       	out	0x3e, r29	; 62
     130:	cd bf       	out	0x3d, r28	; 61

00000132 <__do_copy_data>:
     132:	13 e0       	ldi	r17, 0x03	; 3
     134:	a0 e0       	ldi	r26, 0x00	; 0
     136:	b1 e0       	ldi	r27, 0x01	; 1
     138:	e2 e3       	ldi	r30, 0x32	; 50
     13a:	fc e2       	ldi	r31, 0x2C	; 44
     13c:	02 c0       	rjmp	.+4      	; 0x142 <__do_copy_data+0x10>
     13e:	05 90       	lpm	r0, Z+
     140:	0d 92       	st	X+, r0
     142:	a6 31       	cpi	r26, 0x16	; 22
     144:	b1 07       	cpc	r27, r17
     146:	d9 f7       	brne	.-10     	; 0x13e <__do_copy_data+0xc>

00000148 <__do_clear_bss>:
     148:	24 e0       	ldi	r18, 0x04	; 4
     14a:	a6 e1       	ldi	r26, 0x16	; 22
     14c:	b3 e0       	ldi	r27, 0x03	; 3
     14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:
     150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
     152:	a3 32       	cpi	r26, 0x23	; 35
     154:	b2 07       	cpc	r27, r18
     156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>

00000158 <__do_global_ctors>:
     158:	10 e0       	ldi	r17, 0x00	; 0
     15a:	c3 e9       	ldi	r28, 0x93	; 147
     15c:	d0 e0       	ldi	r29, 0x00	; 0
     15e:	04 c0       	rjmp	.+8      	; 0x168 <__do_global_ctors+0x10>
     160:	21 97       	sbiw	r28, 0x01	; 1
     162:	fe 01       	movw	r30, r28
     164:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__tablejump2__>
     168:	c1 39       	cpi	r28, 0x91	; 145
     16a:	d1 07       	cpc	r29, r17
     16c:	c9 f7       	brne	.-14     	; 0x160 <__do_global_ctors+0x8>
     16e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <main>
     172:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <_exit>

00000176 <__bad_interrupt>:
     176:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017a <_Z9test_sizev>:
#define Serial Serial1

void test_size(void)
{
	/* Test GetPageSize */
	if (SPIF_get_page_size() == 256)
     17a:	0e 94 4a 06 	call	0xc94	; 0xc94 <SPIF_get_page_size>
     17e:	81 15       	cp	r24, r1
     180:	91 40       	sbci	r25, 0x01	; 1
     182:	19 f4       	brne	.+6      	; 0x18a <_Z9test_sizev+0x10>
	{
		Serial.println("GetPageSize: Passed");
     184:	6f e2       	ldi	r22, 0x2F	; 47
     186:	71 e0       	ldi	r23, 0x01	; 1
     188:	02 c0       	rjmp	.+4      	; 0x18e <_Z9test_sizev+0x14>
	} else
	{
		Serial.println("GetPageSize: Didn't pass");
     18a:	63 e4       	ldi	r22, 0x43	; 67
     18c:	71 e0       	ldi	r23, 0x01	; 1
     18e:	86 e1       	ldi	r24, 0x16	; 22
     190:	93 e0       	ldi	r25, 0x03	; 3
     192:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <_ZN5Print7printlnEPKc>
	}
	
	/* Test GetSectorSize */
	if (SPIF_get_sector_size() == 4096){
     196:	0e 94 4d 06 	call	0xc9a	; 0xc9a <SPIF_get_sector_size>
     19a:	81 15       	cp	r24, r1
     19c:	90 41       	sbci	r25, 0x10	; 16
     19e:	19 f4       	brne	.+6      	; 0x1a6 <_Z9test_sizev+0x2c>
		Serial.println("GetSectorSize: Passed");
     1a0:	6c e5       	ldi	r22, 0x5C	; 92
     1a2:	71 e0       	ldi	r23, 0x01	; 1
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <_Z9test_sizev+0x30>
	} else
	{
		Serial.println("GetSectorSize: Didn't pass");
     1a6:	62 e7       	ldi	r22, 0x72	; 114
     1a8:	71 e0       	ldi	r23, 0x01	; 1
     1aa:	86 e1       	ldi	r24, 0x16	; 22
     1ac:	93 e0       	ldi	r25, 0x03	; 3
     1ae:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <_ZN5Print7printlnEPKc>
	}
	
	/* Test GetFlashSize */
	uint32_t result_size = SPIF_get_size();
     1b2:	0e 94 50 06 	call	0xca0	; 0xca0 <SPIF_get_size>
	uint32_t expected_size = 1024 * 1024 * 64 - 4096;
	if (SPIF_get_size() == 67104768 ){
     1b6:	0e 94 50 06 	call	0xca0	; 0xca0 <SPIF_get_size>
     1ba:	61 15       	cp	r22, r1
     1bc:	70 4f       	sbci	r23, 0xF0	; 240
     1be:	8f 4f       	sbci	r24, 0xFF	; 255
     1c0:	93 40       	sbci	r25, 0x03	; 3
     1c2:	19 f4       	brne	.+6      	; 0x1ca <_Z9test_sizev+0x50>
		Serial.println("GetSize: Passed");
     1c4:	6d e8       	ldi	r22, 0x8D	; 141
     1c6:	71 e0       	ldi	r23, 0x01	; 1
     1c8:	02 c0       	rjmp	.+4      	; 0x1ce <_Z9test_sizev+0x54>
	} else
	{
		Serial.println("GetSize: Didn't pass");
     1ca:	6d e9       	ldi	r22, 0x9D	; 157
     1cc:	71 e0       	ldi	r23, 0x01	; 1
     1ce:	86 e1       	ldi	r24, 0x16	; 22
     1d0:	93 e0       	ldi	r25, 0x03	; 3
     1d2:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <_ZN5Print7printlnEPKc>

000001d6 <_Z20test_full_erase_readv>:
	}
}

void test_full_erase_read(void)
{
     1d6:	ef 92       	push	r14
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	cd b7       	in	r28, 0x3d	; 61
     1e4:	de b7       	in	r29, 0x3e	; 62
     1e6:	da 95       	dec	r29
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	f8 94       	cli
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	cd bf       	out	0x3d, r28	; 61
	uint8_t test_passed = 0;
	uint8_t buff[256] = { 0 };
     1f2:	9e 01       	movw	r18, r28
     1f4:	2f 5f       	subi	r18, 0xFF	; 255
     1f6:	3f 4f       	sbci	r19, 0xFF	; 255
     1f8:	79 01       	movw	r14, r18
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	f9 01       	movw	r30, r18
     200:	9c 01       	movw	r18, r24
     202:	11 92       	st	Z+, r1
     204:	21 50       	subi	r18, 0x01	; 1
     206:	30 40       	sbci	r19, 0x00	; 0
     208:	e1 f7       	brne	.-8      	; 0x202 <_Z20test_full_erase_readv+0x2c>
		
	/* Test FullErase-Read */
	SPIF_erase();
     20a:	0e 94 15 06 	call	0xc2a	; 0xc2a <SPIF_erase>
	SPIF_read(0, buff, 256);
     20e:	00 e0       	ldi	r16, 0x00	; 0
     210:	11 e0       	ldi	r17, 0x01	; 1
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	a7 01       	movw	r20, r14
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	cb 01       	movw	r24, r22
     21e:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPIF_read>
     222:	f7 01       	movw	r30, r14
     224:	9e 01       	movw	r18, r28
     226:	2f 5f       	subi	r18, 0xFF	; 255
     228:	3e 4f       	sbci	r19, 0xFE	; 254
	}
}

void test_full_erase_read(void)
{
	uint8_t test_passed = 0;
     22a:	80 e0       	ldi	r24, 0x00	; 0
	/* Test FullErase-Read */
	SPIF_erase();
	SPIF_read(0, buff, 256);
	for (uint16_t i = 0; i < 256; i++)
	{
		if(buff[i] != 0xFF) test_passed = 1;
     22c:	91 91       	ld	r25, Z+
     22e:	9f 3f       	cpi	r25, 0xFF	; 255
     230:	09 f0       	breq	.+2      	; 0x234 <_Z20test_full_erase_readv+0x5e>
     232:	81 e0       	ldi	r24, 0x01	; 1
	uint8_t buff[256] = { 0 };
		
	/* Test FullErase-Read */
	SPIF_erase();
	SPIF_read(0, buff, 256);
	for (uint16_t i = 0; i < 256; i++)
     234:	e2 17       	cp	r30, r18
     236:	f3 07       	cpc	r31, r19
     238:	c9 f7       	brne	.-14     	; 0x22c <_Z20test_full_erase_readv+0x56>
	{
		if(buff[i] != 0xFF) test_passed = 1;
	}
	if (test_passed == 0){
     23a:	81 11       	cpse	r24, r1
     23c:	03 c0       	rjmp	.+6      	; 0x244 <_Z20test_full_erase_readv+0x6e>
		Serial.println("FullErase-Read: Passed");
     23e:	62 eb       	ldi	r22, 0xB2	; 178
     240:	71 e0       	ldi	r23, 0x01	; 1
     242:	02 c0       	rjmp	.+4      	; 0x248 <_Z20test_full_erase_readv+0x72>
	} else
	{
		Serial.println("FullErase-Read: Didn't pass");
     244:	69 ec       	ldi	r22, 0xC9	; 201
     246:	71 e0       	ldi	r23, 0x01	; 1
     248:	86 e1       	ldi	r24, 0x16	; 22
     24a:	93 e0       	ldi	r25, 0x03	; 3
     24c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <_ZN5Print7printlnEPKc>
	}
}
     250:	d3 95       	inc	r29
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	f8 94       	cli
     256:	de bf       	out	0x3e, r29	; 62
     258:	0f be       	out	0x3f, r0	; 63
     25a:	cd bf       	out	0x3d, r28	; 61
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	1f 91       	pop	r17
     262:	0f 91       	pop	r16
     264:	ff 90       	pop	r15
     266:	ef 90       	pop	r14
     268:	08 95       	ret

0000026a <_Z14test_fastwritev>:

void test_fastwrite(void)
{
     26a:	2f 92       	push	r2
     26c:	3f 92       	push	r3
     26e:	4f 92       	push	r4
     270:	5f 92       	push	r5
     272:	6f 92       	push	r6
     274:	7f 92       	push	r7
     276:	8f 92       	push	r8
     278:	9f 92       	push	r9
     27a:	af 92       	push	r10
     27c:	bf 92       	push	r11
     27e:	cf 92       	push	r12
     280:	df 92       	push	r13
     282:	ef 92       	push	r14
     284:	ff 92       	push	r15
     286:	0f 93       	push	r16
     288:	1f 93       	push	r17
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	2a 97       	sbiw	r28, 0x0a	; 10
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	f8 94       	cli
     298:	de bf       	out	0x3e, r29	; 62
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	cd bf       	out	0x3d, r28	; 61
		}
	}
	
	Serial.println("Fastwrite: Passed");
	return;
}
     29e:	8d b7       	in	r24, 0x3d	; 61
     2a0:	9e b7       	in	r25, 0x3e	; 62
     2a2:	9a 87       	std	Y+10, r25	; 0x0a
     2a4:	89 87       	std	Y+9, r24	; 0x09
}

void test_fastwrite(void)
{
	uint16_t page_size = 256;
	uint8_t read_buff[page_size * 3] = { 0 };
     2a6:	ed b7       	in	r30, 0x3d	; 61
     2a8:	fe b7       	in	r31, 0x3e	; 62
     2aa:	f3 50       	subi	r31, 0x03	; 3
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	fe bf       	out	0x3e, r31	; 62
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	ed bf       	out	0x3d, r30	; 61
     2b6:	8f 5f       	subi	r24, 0xFF	; 255
     2b8:	92 40       	sbci	r25, 0x02	; 2
     2ba:	5c 01       	movw	r10, r24
     2bc:	11 82       	std	Z+1, r1	; 0x01
     2be:	32 96       	adiw	r30, 0x02	; 2
     2c0:	9d 5f       	subi	r25, 0xFD	; 253
     2c2:	11 92       	st	Z+, r1
     2c4:	e8 17       	cp	r30, r24
     2c6:	f9 07       	cpc	r31, r25
     2c8:	e1 f7       	brne	.-8      	; 0x2c2 <_Z14test_fastwritev+0x58>
	uint8_t write_buff[page_size * 3] = { 0 };
     2ca:	ed b7       	in	r30, 0x3d	; 61
     2cc:	fe b7       	in	r31, 0x3e	; 62
     2ce:	f3 50       	subi	r31, 0x03	; 3
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	f8 94       	cli
     2d4:	fe bf       	out	0x3e, r31	; 62
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	ed bf       	out	0x3d, r30	; 61
     2da:	8d b7       	in	r24, 0x3d	; 61
     2dc:	9e b7       	in	r25, 0x3e	; 62
     2de:	01 96       	adiw	r24, 0x01	; 1
     2e0:	4c 01       	movw	r8, r24
     2e2:	32 96       	adiw	r30, 0x02	; 2
     2e4:	9d 5f       	subi	r25, 0xFD	; 253
     2e6:	11 92       	st	Z+, r1
     2e8:	e8 17       	cp	r30, r24
     2ea:	f9 07       	cpc	r31, r25
     2ec:	e1 f7       	brne	.-8      	; 0x2e6 <_Z14test_fastwritev+0x7c>
	uint8_t write_value = 0x69;
	memset(write_buff, write_value, page_size * 3);
     2ee:	40 e0       	ldi	r20, 0x00	; 0
     2f0:	53 e0       	ldi	r21, 0x03	; 3
     2f2:	69 e6       	ldi	r22, 0x69	; 105
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	c4 01       	movw	r24, r8
     2f8:	0e 94 10 16 	call	0x2c20	; 0x2c20 <memset>
	
	
	uint16_t sizes[4] = { 50, 256, 512, 600 };
     2fc:	88 e0       	ldi	r24, 0x08	; 8
     2fe:	e3 e1       	ldi	r30, 0x13	; 19
     300:	f1 e0       	ldi	r31, 0x01	; 1
     302:	de 01       	movw	r26, r28
     304:	11 96       	adiw	r26, 0x01	; 1
     306:	01 90       	ld	r0, Z+
     308:	0d 92       	st	X+, r0
     30a:	8a 95       	dec	r24
     30c:	e1 f7       	brne	.-8      	; 0x306 <_Z14test_fastwritev+0x9c>
     30e:	fe 01       	movw	r30, r28
     310:	31 96       	adiw	r30, 0x01	; 1
     312:	7f 01       	movw	r14, r30
     314:	3e 01       	movw	r6, r28
     316:	f9 e0       	ldi	r31, 0x09	; 9
     318:	6f 0e       	add	r6, r31
     31a:	71 1c       	adc	r7, r1
	
	for (int i=0; i < 4; i++)
	{
		for (int j=0; i < 4; i++)
		{
				SPIF_4B_erase_sector(0);
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	cb 01       	movw	r24, r22
     322:	0e 94 24 06 	call	0xc48	; 0xc48 <SPIF_4B_erase_sector>
				SPIF_fast_write(sizes[j], write_buff, sizes[i]);
     326:	f7 01       	movw	r30, r14
     328:	c1 90       	ld	r12, Z+
     32a:	d1 90       	ld	r13, Z+
     32c:	7f 01       	movw	r14, r30
     32e:	16 01       	movw	r2, r12
     330:	41 2c       	mov	r4, r1
     332:	51 2c       	mov	r5, r1
     334:	92 01       	movw	r18, r4
     336:	81 01       	movw	r16, r2
     338:	a4 01       	movw	r20, r8
     33a:	62 e3       	ldi	r22, 0x32	; 50
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIF_fast_write>
				SPIF_read(sizes[j], read_buff, sizes[i]);
     346:	92 01       	movw	r18, r4
     348:	81 01       	movw	r16, r2
     34a:	a5 01       	movw	r20, r10
     34c:	62 e3       	ldi	r22, 0x32	; 50
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPIF_read>
				if ( (read_buff[0] != write_value) || (read_buff[sizes[i] - 1] != write_value) )
     358:	f5 01       	movw	r30, r10
     35a:	80 81       	ld	r24, Z
     35c:	89 36       	cpi	r24, 0x69	; 105
     35e:	39 f4       	brne	.+14     	; 0x36e <_Z14test_fastwritev+0x104>
     360:	ca 0c       	add	r12, r10
     362:	db 1c       	adc	r13, r11
     364:	f6 01       	movw	r30, r12
     366:	31 97       	sbiw	r30, 0x01	; 1
     368:	80 81       	ld	r24, Z
     36a:	89 36       	cpi	r24, 0x69	; 105
     36c:	19 f0       	breq	.+6      	; 0x374 <_Z14test_fastwritev+0x10a>
				{
					Serial.println("Fastwrite: Didn't pass");
     36e:	65 ee       	ldi	r22, 0xE5	; 229
     370:	71 e0       	ldi	r23, 0x01	; 1
     372:	0b c0       	rjmp	.+22     	; 0x38a <_Z14test_fastwritev+0x120>
					return;
				}
				memset(read_buff, 0, page_size * 3);
     374:	f5 01       	movw	r30, r10
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	93 e0       	ldi	r25, 0x03	; 3
     37a:	11 92       	st	Z+, r1
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	e9 f7       	brne	.-6      	; 0x37a <_Z14test_fastwritev+0x110>
		
	/* Write different sizes at different offsets */
	
	for (int i=0; i < 4; i++)
	{
		for (int j=0; i < 4; i++)
     380:	6e 14       	cp	r6, r14
     382:	7f 04       	cpc	r7, r15
     384:	59 f6       	brne	.-106    	; 0x31c <_Z14test_fastwritev+0xb2>
				}
				memset(read_buff, 0, page_size * 3);
		}
	}
	
	Serial.println("Fastwrite: Passed");
     386:	6c ef       	ldi	r22, 0xFC	; 252
     388:	71 e0       	ldi	r23, 0x01	; 1
     38a:	86 e1       	ldi	r24, 0x16	; 22
     38c:	93 e0       	ldi	r25, 0x03	; 3
     38e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <_ZN5Print7printlnEPKc>
	return;
}
     392:	e9 85       	ldd	r30, Y+9	; 0x09
     394:	fa 85       	ldd	r31, Y+10	; 0x0a
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	fe bf       	out	0x3e, r31	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	ed bf       	out	0x3d, r30	; 61
     3a0:	2a 96       	adiw	r28, 0x0a	; 10
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	df 90       	pop	r13
     3ba:	cf 90       	pop	r12
     3bc:	bf 90       	pop	r11
     3be:	af 90       	pop	r10
     3c0:	9f 90       	pop	r9
     3c2:	8f 90       	pop	r8
     3c4:	7f 90       	pop	r7
     3c6:	6f 90       	pop	r6
     3c8:	5f 90       	pop	r5
     3ca:	4f 90       	pop	r4
     3cc:	3f 90       	pop	r3
     3ce:	2f 90       	pop	r2
     3d0:	08 95       	ret

000003d2 <_Z17test_sector_erasev>:

void test_sector_erase(void)
{
     3d2:	af 92       	push	r10
     3d4:	bf 92       	push	r11
     3d6:	cf 92       	push	r12
     3d8:	df 92       	push	r13
     3da:	ef 92       	push	r14
     3dc:	ff 92       	push	r15
     3de:	0f 93       	push	r16
     3e0:	1f 93       	push	r17
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	d4 50       	subi	r29, 0x04	; 4
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	de bf       	out	0x3e, r29	; 62
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	cd bf       	out	0x3d, r28	; 61
	uint16_t sector_size = SPIF_get_sector_size();
     3f6:	0e 94 4d 06 	call	0xc9a	; 0xc9a <SPIF_get_sector_size>
     3fa:	6c 01       	movw	r12, r24
	uint8_t read_buff[512] = { 0 };
     3fc:	5e 01       	movw	r10, r28
     3fe:	2f ef       	ldi	r18, 0xFF	; 255
     400:	a2 1a       	sub	r10, r18
     402:	2d ef       	ldi	r18, 0xFD	; 253
     404:	b2 0a       	sbc	r11, r18
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	92 e0       	ldi	r25, 0x02	; 2
     40a:	f5 01       	movw	r30, r10
     40c:	9c 01       	movw	r18, r24
     40e:	11 92       	st	Z+, r1
     410:	21 50       	subi	r18, 0x01	; 1
     412:	30 40       	sbci	r19, 0x00	; 0
     414:	e1 f7       	brne	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	uint8_t write_buff[512] = { 0 };
	uint8_t write_value = 0x69;
	memset(write_buff, write_value, 512);
     416:	40 e0       	ldi	r20, 0x00	; 0
     418:	52 e0       	ldi	r21, 0x02	; 2
     41a:	69 e6       	ldi	r22, 0x69	; 105
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	0e 94 10 16 	call	0x2c20	; 0x2c20 <memset>
	
	SPIF_4B_erase_sector(0);
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	cb 01       	movw	r24, r22
     42c:	0e 94 24 06 	call	0xc48	; 0xc48 <SPIF_4B_erase_sector>
	SPIF_4B_erase_sector(sector_size);
     430:	b6 01       	movw	r22, r12
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 24 06 	call	0xc48	; 0xc48 <SPIF_4B_erase_sector>
	
	SPIF_fast_write(sector_size - 256, write_buff, 512);
     43a:	da 94       	dec	r13
     43c:	e1 2c       	mov	r14, r1
     43e:	f1 2c       	mov	r15, r1
     440:	00 e0       	ldi	r16, 0x00	; 0
     442:	12 e0       	ldi	r17, 0x02	; 2
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	ae 01       	movw	r20, r28
     44a:	4f 5f       	subi	r20, 0xFF	; 255
     44c:	5f 4f       	sbci	r21, 0xFF	; 255
     44e:	c7 01       	movw	r24, r14
     450:	b6 01       	movw	r22, r12
     452:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIF_fast_write>
	SPIF_4B_erase_sector(0);
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	cb 01       	movw	r24, r22
     45c:	0e 94 24 06 	call	0xc48	; 0xc48 <SPIF_4B_erase_sector>
	SPIF_read(sector_size - 256, read_buff, 512);
     460:	00 e0       	ldi	r16, 0x00	; 0
     462:	12 e0       	ldi	r17, 0x02	; 2
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	a5 01       	movw	r20, r10
     46a:	c7 01       	movw	r24, r14
     46c:	b6 01       	movw	r22, r12
     46e:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPIF_read>
	if ( (read_buff[0] != 0xFF) || (read_buff[255] != 0xFF) || (read_buff[256] != write_value) || (read_buff[511] != write_value))
     472:	f5 01       	movw	r30, r10
     474:	80 81       	ld	r24, Z
     476:	8f 3f       	cpi	r24, 0xFF	; 255
     478:	a9 f4       	brne	.+42     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     47a:	c0 50       	subi	r28, 0x00	; 0
     47c:	dd 4f       	sbci	r29, 0xFD	; 253
     47e:	88 81       	ld	r24, Y
     480:	c0 50       	subi	r28, 0x00	; 0
     482:	d3 40       	sbci	r29, 0x03	; 3
     484:	8f 3f       	cpi	r24, 0xFF	; 255
     486:	71 f4       	brne	.+28     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     488:	cf 5f       	subi	r28, 0xFF	; 255
     48a:	dc 4f       	sbci	r29, 0xFC	; 252
     48c:	88 81       	ld	r24, Y
     48e:	c1 50       	subi	r28, 0x01	; 1
     490:	d3 40       	sbci	r29, 0x03	; 3
     492:	89 36       	cpi	r24, 0x69	; 105
     494:	39 f4       	brne	.+14     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     496:	c0 50       	subi	r28, 0x00	; 0
     498:	dc 4f       	sbci	r29, 0xFC	; 252
     49a:	88 81       	ld	r24, Y
     49c:	c0 50       	subi	r28, 0x00	; 0
     49e:	d4 40       	sbci	r29, 0x04	; 4
     4a0:	89 36       	cpi	r24, 0x69	; 105
     4a2:	19 f0       	breq	.+6      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
	{
		Serial.println("Sector erase: Didn't pass");
     4a4:	6e e0       	ldi	r22, 0x0E	; 14
     4a6:	72 e0       	ldi	r23, 0x02	; 2
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
		return;
	}

	Serial.println("Sector erase: Passed");
     4aa:	68 e2       	ldi	r22, 0x28	; 40
     4ac:	72 e0       	ldi	r23, 0x02	; 2
     4ae:	86 e1       	ldi	r24, 0x16	; 22
     4b0:	93 e0       	ldi	r25, 0x03	; 3
     4b2:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <_ZN5Print7printlnEPKc>
	return;
}
     4b6:	dc 5f       	subi	r29, 0xFC	; 252
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	de bf       	out	0x3e, r29	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	cd bf       	out	0x3d, r28	; 61
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	cf 90       	pop	r12
     4d2:	bf 90       	pop	r11
     4d4:	af 90       	pop	r10
     4d6:	08 95       	ret

000004d8 <_Z22test_fastwrite_corruptv>:

void test_fastwrite_corrupt(void)
{
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	00 d0       	rcall	.+0      	; 0x4e2 <_Z22test_fastwrite_corruptv+0xa>
     4e2:	00 d0       	rcall	.+0      	; 0x4e4 <_Z22test_fastwrite_corruptv+0xc>
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
	uint16_t sector_size = SPIF_get_sector_size();
     4e8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <SPIF_get_sector_size>
	uint8_t read_buff[2] = { 0 };
     4ec:	1c 82       	std	Y+4, r1	; 0x04
     4ee:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t write_buff[2] = { 0x69, 0x69 };
     4f0:	89 e6       	ldi	r24, 0x69	; 105
     4f2:	89 83       	std	Y+1, r24	; 0x01
     4f4:	8a 83       	std	Y+2, r24	; 0x02
	
	SPIF_4B_erase_sector(0);
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	cb 01       	movw	r24, r22
     4fc:	0e 94 24 06 	call	0xc48	; 0xc48 <SPIF_4B_erase_sector>
	SPIF_fast_write(0, write_buff, 2);
     500:	02 e0       	ldi	r16, 0x02	; 2
     502:	10 e0       	ldi	r17, 0x00	; 0
     504:	20 e0       	ldi	r18, 0x00	; 0
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	ae 01       	movw	r20, r28
     50a:	4f 5f       	subi	r20, 0xFF	; 255
     50c:	5f 4f       	sbci	r21, 0xFF	; 255
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	cb 01       	movw	r24, r22
     514:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIF_fast_write>
	write_buff[0] = 0x00;
     518:	19 82       	std	Y+1, r1	; 0x01
	write_buff[1] = 0xE9;
     51a:	89 ee       	ldi	r24, 0xE9	; 233
     51c:	8a 83       	std	Y+2, r24	; 0x02
	SPIF_fast_write(0, write_buff, 2);
     51e:	02 e0       	ldi	r16, 0x02	; 2
     520:	10 e0       	ldi	r17, 0x00	; 0
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	ae 01       	movw	r20, r28
     528:	4f 5f       	subi	r20, 0xFF	; 255
     52a:	5f 4f       	sbci	r21, 0xFF	; 255
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	cb 01       	movw	r24, r22
     532:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIF_fast_write>
	SPIF_read(0, read_buff, 2);
     536:	02 e0       	ldi	r16, 0x02	; 2
     538:	10 e0       	ldi	r17, 0x00	; 0
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	ae 01       	movw	r20, r28
     540:	4d 5f       	subi	r20, 0xFD	; 253
     542:	5f 4f       	sbci	r21, 0xFF	; 255
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	cb 01       	movw	r24, r22
     54a:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPIF_read>
	if( (read_buff[0] != 0x00) || (read_buff[1] != 0x69) )
     54e:	8b 81       	ldd	r24, Y+3	; 0x03
     550:	81 11       	cpse	r24, r1
     552:	03 c0       	rjmp	.+6      	; 0x55a <_Z22test_fastwrite_corruptv+0x82>
     554:	8c 81       	ldd	r24, Y+4	; 0x04
     556:	89 36       	cpi	r24, 0x69	; 105
     558:	19 f0       	breq	.+6      	; 0x560 <_Z22test_fastwrite_corruptv+0x88>
	{
		Serial.println("Fastwrite corrupted: Didn't pass");
     55a:	6d e3       	ldi	r22, 0x3D	; 61
     55c:	72 e0       	ldi	r23, 0x02	; 2
     55e:	02 c0       	rjmp	.+4      	; 0x564 <_Z22test_fastwrite_corruptv+0x8c>
		return;
	}
	Serial.println("Fastwrite corrupted: Passed");
     560:	6e e5       	ldi	r22, 0x5E	; 94
     562:	72 e0       	ldi	r23, 0x02	; 2
     564:	86 e1       	ldi	r24, 0x16	; 22
     566:	93 e0       	ldi	r25, 0x03	; 3
     568:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <_ZN5Print7printlnEPKc>
	return;
}
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	08 95       	ret

0000057e <_Z10test_writev>:

void test_write(void)
{
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	c8 50       	subi	r28, 0x08	; 8
     590:	d2 40       	sbci	r29, 0x02	; 2
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	de bf       	out	0x3e, r29	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	cd bf       	out	0x3d, r28	; 61
	uint16_t sector_size = SPIF_get_sector_size();
     59c:	0e 94 4d 06 	call	0xc9a	; 0xc9a <SPIF_get_sector_size>
	uint8_t read_buff[260] = { 0 };
     5a0:	7e 01       	movw	r14, r28
     5a2:	2b ef       	ldi	r18, 0xFB	; 251
     5a4:	e2 1a       	sub	r14, r18
     5a6:	2e ef       	ldi	r18, 0xFE	; 254
     5a8:	f2 0a       	sbc	r15, r18
     5aa:	84 e0       	ldi	r24, 0x04	; 4
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	f7 01       	movw	r30, r14
     5b0:	9c 01       	movw	r18, r24
     5b2:	11 92       	st	Z+, r1
     5b4:	21 50       	subi	r18, 0x01	; 1
     5b6:	30 40       	sbci	r19, 0x00	; 0
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <_Z10test_writev+0x34>
	uint8_t write_buff[260] = { 0 };
	memset(write_buff, 0xE9, 260);
     5ba:	44 e0       	ldi	r20, 0x04	; 4
     5bc:	51 e0       	ldi	r21, 0x01	; 1
     5be:	69 ee       	ldi	r22, 0xE9	; 233
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	ce 01       	movw	r24, r28
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	0e 94 10 16 	call	0x2c20	; 0x2c20 <memset>
	
	SPIF_4B_erase_sector(0);
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	cb 01       	movw	r24, r22
     5d0:	0e 94 24 06 	call	0xc48	; 0xc48 <SPIF_4B_erase_sector>
	SPIF_fast_write(0, write_buff, 260);
     5d4:	04 e0       	ldi	r16, 0x04	; 4
     5d6:	11 e0       	ldi	r17, 0x01	; 1
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	ae 01       	movw	r20, r28
     5de:	4f 5f       	subi	r20, 0xFF	; 255
     5e0:	5f 4f       	sbci	r21, 0xFF	; 255
     5e2:	60 e0       	ldi	r22, 0x00	; 0
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	cb 01       	movw	r24, r22
     5e8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIF_fast_write>
	
	memset(write_buff, 0x69, 260);
     5ec:	44 e0       	ldi	r20, 0x04	; 4
     5ee:	51 e0       	ldi	r21, 0x01	; 1
     5f0:	69 e6       	ldi	r22, 0x69	; 105
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	ce 01       	movw	r24, r28
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	0e 94 10 16 	call	0x2c20	; 0x2c20 <memset>
	write_buff[256] = 0xFF;
     5fc:	8f ef       	ldi	r24, 0xFF	; 255
     5fe:	cf 5f       	subi	r28, 0xFF	; 255
     600:	de 4f       	sbci	r29, 0xFE	; 254
     602:	88 83       	st	Y, r24
     604:	c1 50       	subi	r28, 0x01	; 1
     606:	d1 40       	sbci	r29, 0x01	; 1
	
	SPIF_RET_t err_code = SPIF_write(0, write_buff, 260);
     608:	04 e0       	ldi	r16, 0x04	; 4
     60a:	11 e0       	ldi	r17, 0x01	; 1
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	ae 01       	movw	r20, r28
     612:	4f 5f       	subi	r20, 0xFF	; 255
     614:	5f 4f       	sbci	r21, 0xFF	; 255
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	cb 01       	movw	r24, r22
     61c:	0e 94 a9 06 	call	0xd52	; 0xd52 <SPIF_write>
	SPIF_read(0, read_buff, 260);
     620:	04 e0       	ldi	r16, 0x04	; 4
     622:	11 e0       	ldi	r17, 0x01	; 1
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	a7 01       	movw	r20, r14
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	70 e0       	ldi	r23, 0x00	; 0
     62e:	cb 01       	movw	r24, r22
     630:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPIF_read>
	if ( (err_code != SPIF_ERR_INCOMPATIBLE_WRITE) || (read_buff[0] != 0x69), (read_buff[256] != 0xE9) )
     634:	cb 5f       	subi	r28, 0xFB	; 251
     636:	dd 4f       	sbci	r29, 0xFD	; 253
     638:	88 81       	ld	r24, Y
     63a:	c5 50       	subi	r28, 0x05	; 5
     63c:	d2 40       	sbci	r29, 0x02	; 2
     63e:	89 3e       	cpi	r24, 0xE9	; 233
     640:	19 f0       	breq	.+6      	; 0x648 <_Z10test_writev+0xca>
	{
		Serial.println("Generic write: Didn't pass");
     642:	6a e7       	ldi	r22, 0x7A	; 122
     644:	72 e0       	ldi	r23, 0x02	; 2
     646:	02 c0       	rjmp	.+4      	; 0x64c <_Z10test_writev+0xce>
		return;
	}

	Serial.println("Generic write: Passed");
     648:	65 e9       	ldi	r22, 0x95	; 149
     64a:	72 e0       	ldi	r23, 0x02	; 2
     64c:	86 e1       	ldi	r24, 0x16	; 22
     64e:	93 e0       	ldi	r25, 0x03	; 3
     650:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <_ZN5Print7printlnEPKc>
	return;
}
     654:	c8 5f       	subi	r28, 0xF8	; 248
     656:	dd 4f       	sbci	r29, 0xFD	; 253
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	de bf       	out	0x3e, r29	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	cd bf       	out	0x3d, r28	; 61
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	1f 91       	pop	r17
     668:	0f 91       	pop	r16
     66a:	ff 90       	pop	r15
     66c:	ef 90       	pop	r14
     66e:	08 95       	ret

00000670 <_Z15test_forcewritev>:

int test_forcewrite(void)
{
     670:	2f 92       	push	r2
     672:	3f 92       	push	r3
     674:	4f 92       	push	r4
     676:	5f 92       	push	r5
     678:	6f 92       	push	r6
     67a:	7f 92       	push	r7
     67c:	8f 92       	push	r8
     67e:	9f 92       	push	r9
     680:	af 92       	push	r10
     682:	bf 92       	push	r11
     684:	cf 92       	push	r12
     686:	df 92       	push	r13
     688:	ef 92       	push	r14
     68a:	ff 92       	push	r15
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	c4 51       	subi	r28, 0x14	; 20
     69a:	d6 40       	sbci	r29, 0x06	; 6
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
	uint8_t read_buff[512] = { 0 };
     6a6:	7e 01       	movw	r14, r28
     6a8:	2f ef       	ldi	r18, 0xFF	; 255
     6aa:	e2 1a       	sub	r14, r18
     6ac:	2b ef       	ldi	r18, 0xFB	; 251
     6ae:	f2 0a       	sbc	r15, r18
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	92 e0       	ldi	r25, 0x02	; 2
     6b4:	f7 01       	movw	r30, r14
     6b6:	9c 01       	movw	r18, r24
     6b8:	11 92       	st	Z+, r1
     6ba:	21 50       	subi	r18, 0x01	; 1
     6bc:	30 40       	sbci	r19, 0x00	; 0
     6be:	e1 f7       	brne	.-8      	; 0x6b8 <_Z15test_forcewritev+0x48>
	uint8_t write_buff[512] = { 0 };
	uint8_t zero_buff[512] = { 0 };
     6c0:	fe 01       	movw	r30, r28
     6c2:	31 96       	adiw	r30, 0x01	; 1
     6c4:	4f 01       	movw	r8, r30
     6c6:	9c 01       	movw	r18, r24
     6c8:	11 92       	st	Z+, r1
     6ca:	21 50       	subi	r18, 0x01	; 1
     6cc:	30 40       	sbci	r19, 0x00	; 0
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <_Z15test_forcewritev+0x58>
	uint8_t write_value = 0x69;
	memset(write_buff, write_value, 512);
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	52 e0       	ldi	r21, 0x02	; 2
     6d4:	69 e6       	ldi	r22, 0x69	; 105
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	ce 01       	movw	r24, r28
     6da:	8f 5f       	subi	r24, 0xFF	; 255
     6dc:	9d 4f       	sbci	r25, 0xFD	; 253
     6de:	0e 94 10 16 	call	0x2c20	; 0x2c20 <memset>
	
	uint32_t addr_offsets[5] = { 0, 260,  3836, 4000, 4100 };
     6e2:	84 e1       	ldi	r24, 0x14	; 20
     6e4:	eb e1       	ldi	r30, 0x1B	; 27
     6e6:	f1 e0       	ldi	r31, 0x01	; 1
     6e8:	de 01       	movw	r26, r28
     6ea:	af 5f       	subi	r26, 0xFF	; 255
     6ec:	b9 4f       	sbci	r27, 0xF9	; 249
     6ee:	01 90       	ld	r0, Z+
     6f0:	0d 92       	st	X+, r0
     6f2:	8a 95       	dec	r24
     6f4:	e1 f7       	brne	.-8      	; 0x6ee <_Z15test_forcewritev+0x7e>
     6f6:	ce 01       	movw	r24, r28
     6f8:	8f 5f       	subi	r24, 0xFF	; 255
     6fa:	99 4f       	sbci	r25, 0xF9	; 249
     6fc:	6c 01       	movw	r12, r24
     6fe:	a1 2c       	mov	r10, r1
     700:	b1 2c       	mov	r11, r1
			if ( (read_buff[0] != write_value) || (read_buff[sizes[j] - 1] != write_value) )
			{
				Serial.println("Forcewrite: Didn't pass");
				return j;
			}
			memset(read_buff, 0, 512);
     702:	61 2c       	mov	r6, r1
     704:	82 e0       	ldi	r24, 0x02	; 2
     706:	78 2e       	mov	r7, r24
	
	for (int i=0; i < 5; i++)
	{
		for (int j=0; i < 4; i++)
		{
			SPIF_4B_erase_sector(0);
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	cb 01       	movw	r24, r22
     70e:	0e 94 24 06 	call	0xc48	; 0xc48 <SPIF_4B_erase_sector>
			SPIF_4B_erase_sector(4096);
     712:	60 e0       	ldi	r22, 0x00	; 0
     714:	70 e1       	ldi	r23, 0x10	; 16
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 24 06 	call	0xc48	; 0xc48 <SPIF_4B_erase_sector>
			
			SPIF_fast_write(addr_offsets[i], zero_buff, sizes[j]);
     71e:	f6 01       	movw	r30, r12
     720:	21 90       	ld	r2, Z+
     722:	31 90       	ld	r3, Z+
     724:	41 90       	ld	r4, Z+
     726:	51 90       	ld	r5, Z+
     728:	6f 01       	movw	r12, r30
     72a:	0a e0       	ldi	r16, 0x0A	; 10
     72c:	10 e0       	ldi	r17, 0x00	; 0
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	a4 01       	movw	r20, r8
     734:	c2 01       	movw	r24, r4
     736:	b1 01       	movw	r22, r2
     738:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIF_fast_write>
			SPIF_force_write(addr_offsets[i], write_buff, sizes[j]);
     73c:	0a e0       	ldi	r16, 0x0A	; 10
     73e:	10 e0       	ldi	r17, 0x00	; 0
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	ae 01       	movw	r20, r28
     746:	4f 5f       	subi	r20, 0xFF	; 255
     748:	5d 4f       	sbci	r21, 0xFD	; 253
     74a:	c2 01       	movw	r24, r4
     74c:	b1 01       	movw	r22, r2
     74e:	0e 94 9a 0c 	call	0x1934	; 0x1934 <SPIF_force_write>
			SPIF_read(addr_offsets[i], read_buff, sizes[j]);
     752:	0a e0       	ldi	r16, 0x0A	; 10
     754:	10 e0       	ldi	r17, 0x00	; 0
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	a7 01       	movw	r20, r14
     75c:	c2 01       	movw	r24, r4
     75e:	b1 01       	movw	r22, r2
     760:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPIF_read>
			if ( (read_buff[0] != write_value) || (read_buff[sizes[j] - 1] != write_value) )
     764:	f7 01       	movw	r30, r14
     766:	80 81       	ld	r24, Z
     768:	89 36       	cpi	r24, 0x69	; 105
     76a:	19 f4       	brne	.+6      	; 0x772 <_Z15test_forcewritev+0x102>
     76c:	81 85       	ldd	r24, Z+9	; 0x09
     76e:	89 36       	cpi	r24, 0x69	; 105
     770:	19 f0       	breq	.+6      	; 0x778 <_Z15test_forcewritev+0x108>
			{
				Serial.println("Forcewrite: Didn't pass");
     772:	6b ea       	ldi	r22, 0xAB	; 171
     774:	72 e0       	ldi	r23, 0x02	; 2
     776:	10 c0       	rjmp	.+32     	; 0x798 <_Z15test_forcewritev+0x128>
				return j;
			}
			memset(read_buff, 0, 512);
     778:	f7 01       	movw	r30, r14
     77a:	93 01       	movw	r18, r6
     77c:	11 92       	st	Z+, r1
     77e:	21 50       	subi	r18, 0x01	; 1
     780:	30 40       	sbci	r19, 0x00	; 0
     782:	e1 f7       	brne	.-8      	; 0x77c <_Z15test_forcewritev+0x10c>
	uint32_t addr_offsets[5] = { 0, 260,  3836, 4000, 4100 };
	uint32_t sizes[4] = { 10, 256, 300, 550 };
	
	for (int i=0; i < 5; i++)
	{
		for (int j=0; i < 4; i++)
     784:	3f ef       	ldi	r19, 0xFF	; 255
     786:	a3 1a       	sub	r10, r19
     788:	b3 0a       	sbc	r11, r19
     78a:	84 e0       	ldi	r24, 0x04	; 4
     78c:	a8 16       	cp	r10, r24
     78e:	b1 04       	cpc	r11, r1
     790:	09 f0       	breq	.+2      	; 0x794 <_Z15test_forcewritev+0x124>
     792:	ba cf       	rjmp	.-140    	; 0x708 <_Z15test_forcewritev+0x98>
			}
			memset(read_buff, 0, 512);
			
		}
	}
	Serial.println("Forcewrite: Passed");
     794:	63 ec       	ldi	r22, 0xC3	; 195
     796:	72 e0       	ldi	r23, 0x02	; 2
     798:	86 e1       	ldi	r24, 0x16	; 22
     79a:	93 e0       	ldi	r25, 0x03	; 3
     79c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <_ZN5Print7printlnEPKc>
	return 0;
}
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	cc 5e       	subi	r28, 0xEC	; 236
     7a6:	d9 4f       	sbci	r29, 0xF9	; 249
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	bf 90       	pop	r11
     7c4:	af 90       	pop	r10
     7c6:	9f 90       	pop	r9
     7c8:	8f 90       	pop	r8
     7ca:	7f 90       	pop	r7
     7cc:	6f 90       	pop	r6
     7ce:	5f 90       	pop	r5
     7d0:	4f 90       	pop	r4
     7d2:	3f 90       	pop	r3
     7d4:	2f 90       	pop	r2
     7d6:	08 95       	ret

000007d8 <_Z9run_testsv>:

void run_tests(void)
{
	/* Initialize SPI Flash */
	SPIF_init();
     7d8:	0e 94 15 04 	call	0x82a	; 0x82a <SPIF_init>
	SPIF_slow();
     7dc:	0e 94 1a 04 	call	0x834	; 0x834 <SPIF_slow>

	/* Run tests */	
	test_size();
     7e0:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z9test_sizev>
	test_full_erase_read();
     7e4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <_Z20test_full_erase_readv>
	test_fastwrite();
     7e8:	0e 94 35 01 	call	0x26a	; 0x26a <_Z14test_fastwritev>
	test_sector_erase();
     7ec:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_Z17test_sector_erasev>
	test_fastwrite_corrupt();
     7f0:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_Z22test_fastwrite_corruptv>
	test_write();
     7f4:	0e 94 bf 02 	call	0x57e	; 0x57e <_Z10test_writev>
	test_forcewrite();
     7f8:	0c 94 38 03 	jmp	0x670	; 0x670 <_Z15test_forcewritev>

000007fc <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     7fc:	26 e0       	ldi	r18, 0x06	; 6
     7fe:	40 e8       	ldi	r20, 0x80	; 128
     800:	55 e2       	ldi	r21, 0x25	; 37
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	86 e1       	ldi	r24, 0x16	; 22
     808:	93 e0       	ldi	r25, 0x03	; 3
     80a:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <_ZN14HardwareSerial5beginEmh>
void setup()
{

	Serial.begin(9600);
	
	Serial.println("Starting...");
     80e:	66 ed       	ldi	r22, 0xD6	; 214
     810:	72 e0       	ldi	r23, 0x02	; 2
     812:	86 e1       	ldi	r24, 0x16	; 22
     814:	93 e0       	ldi	r25, 0x03	; 3
     816:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <_ZN5Print7printlnEPKc>
	run_tests();
     81a:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <_Z9run_testsv>

0000081e <loop>:
}

void loop()
{
	delay(200000);
     81e:	60 e4       	ldi	r22, 0x40	; 64
     820:	7d e0       	ldi	r23, 0x0D	; 13
     822:	83 e0       	ldi	r24, 0x03	; 3
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <delay>

0000082a <SPIF_init>:

/* Initializes ATMEGA32u4 SPI */
void SPIF_init(void)
{
	/* Sets DDRB to output in CS, MOSI and SCK */
	DDRB |= CS + MOSI + SCK;
     82a:	84 b1       	in	r24, 0x04	; 4
     82c:	87 60       	ori	r24, 0x07	; 7
     82e:	84 b9       	out	0x04, r24	; 4

	/* Pull ups Atmega32u4 PB3 (MISO) */
	PORTB |= MISO;
     830:	2b 9a       	sbi	0x05, 3	; 5
     832:	08 95       	ret

00000834 <SPIF_slow>:
}

/* Enable SPI, Master, set clock rate fck/64 */
void SPIF_slow(void)
{
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(0<<SPR0);
     834:	82 e5       	ldi	r24, 0x52	; 82
     836:	8c bd       	out	0x2c, r24	; 44
     838:	08 95       	ret

0000083a <SPIF_CS_enable>:
}

/* Set ATMega32u4 CS high */
void SPIF_CS_enable(void)
{
	PORTB &= ~CS;
     83a:	28 98       	cbi	0x05, 0	; 5
     83c:	08 95       	ret

0000083e <SPIF_CS_disable>:
}

/* Set ATMega32u4 CS low */
void SPIF_CS_disable(void)
{
	PORTB |= CS;
     83e:	28 9a       	sbi	0x05, 0	; 5
     840:	08 95       	ret

00000842 <SPIF_send_inst>:

/* Send data from Atmega32u4 to W25Q512JV flash */
unsigned char SPIF_send_inst(uint8_t data)
{
	/* Start transmission */
	SPDR = data;
     842:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission and reception */
	while (!(SPSR & (1 << SPIF))) {}
     844:	0d b4       	in	r0, 0x2d	; 45
     846:	07 fe       	sbrs	r0, 7
     848:	fd cf       	rjmp	.-6      	; 0x844 <SPIF_send_inst+0x2>
	/* Return result*/
	return SPDR;
     84a:	8e b5       	in	r24, 0x2e	; 46
}
     84c:	08 95       	ret

0000084e <SPIF_read_status>:
/*
** Reads Status Register. May be used at any time, even while a Program,
** Erase or Write Status Register cycle is in progress
*/
uint8_t SPIF_read_status()
{
     84e:	cf 93       	push	r28
	uint8_t status;
	SPIF_CS_disable();
     850:	0e 94 1f 04 	call	0x83e	; 0x83e <SPIF_CS_disable>
	SPIF_CS_enable();
     854:	0e 94 1d 04 	call	0x83a	; 0x83a <SPIF_CS_enable>

	SPIF_send_inst(SPIF_INST_READ_STATUS);
     858:	85 e0       	ldi	r24, 0x05	; 5
     85a:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
	status = SPIF_send_inst(SPIF_INST_READ_RESPONSE);
     85e:	89 e6       	ldi	r24, 0x69	; 105
     860:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
     864:	c8 2f       	mov	r28, r24
	SPIF_CS_disable();
     866:	0e 94 1f 04 	call	0x83e	; 0x83e <SPIF_CS_disable>
	return status;
}
     86a:	8c 2f       	mov	r24, r28
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <SPIF_enable_write>:
** Register, Erase/Program Security Registers, Page Program,
** Sector Erase, Block Erase, Chip Erase among others.
*/
void SPIF_enable_write()
{
	SPIF_CS_disable();
     870:	0e 94 1f 04 	call	0x83e	; 0x83e <SPIF_CS_disable>
	SPIF_CS_enable();
     874:	0e 94 1d 04 	call	0x83a	; 0x83a <SPIF_CS_enable>

	SPIF_send_inst(SPIF_INST_ENABLE_WRITE);
     878:	86 e0       	ldi	r24, 0x06	; 6
     87a:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>

	while (!(SPIF_read_status() & SPIF_STAT_WRITE_ENABLE)) {}
     87e:	0e 94 27 04 	call	0x84e	; 0x84e <SPIF_read_status>
     882:	81 ff       	sbrs	r24, 1
     884:	fc cf       	rjmp	.-8      	; 0x87e <SPIF_enable_write+0xe>

	SPIF_CS_disable();
     886:	0c 94 1f 04 	jmp	0x83e	; 0x83e <SPIF_CS_disable>

0000088a <SPIF_uncheck_read>:
** Auxiliary function to read data from flash and write into the given buffer.
** It has all memory address space available, including the last sector used 
** as temporary storage.
*/
SPIF_RET_t SPIF_uncheck_read(uint32_t address, uint8_t* buff, uint32_t size)
{
     88a:	8f 92       	push	r8
     88c:	9f 92       	push	r9
     88e:	af 92       	push	r10
     890:	bf 92       	push	r11
     892:	cf 92       	push	r12
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29

	if (address > SPIF_SIZE) return SPIF_ERR_MEM_ADDR_OUTOF_RANGE;
     8a2:	61 30       	cpi	r22, 0x01	; 1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	e4 e0       	ldi	r30, 0x04	; 4
     8aa:	9e 07       	cpc	r25, r30
     8ac:	e8 f5       	brcc	.+122    	; 0x928 <SPIF_uncheck_read+0x9e>
     8ae:	48 01       	movw	r8, r16
     8b0:	59 01       	movw	r10, r18
     8b2:	8a 01       	movw	r16, r20
     8b4:	6b 01       	movw	r12, r22
     8b6:	7c 01       	movw	r14, r24
	if (address + size > SPIF_SIZE) return SPIF_ERR_SIZE_OUTOF_RANGE;
     8b8:	dc 01       	movw	r26, r24
     8ba:	cb 01       	movw	r24, r22
     8bc:	88 0d       	add	r24, r8
     8be:	99 1d       	adc	r25, r9
     8c0:	aa 1d       	adc	r26, r10
     8c2:	bb 1d       	adc	r27, r11
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	a1 05       	cpc	r26, r1
     8c8:	b4 40       	sbci	r27, 0x04	; 4
     8ca:	80 f5       	brcc	.+96     	; 0x92c <SPIF_uncheck_read+0xa2>

	while (SPIF_read_status() & SPIF_STAT_BUSY) {}
     8cc:	0e 94 27 04 	call	0x84e	; 0x84e <SPIF_read_status>
     8d0:	80 fd       	sbrc	r24, 0
     8d2:	fc cf       	rjmp	.-8      	; 0x8cc <SPIF_uncheck_read+0x42>

	SPIF_CS_disable();
     8d4:	0e 94 1f 04 	call	0x83e	; 0x83e <SPIF_CS_disable>
	SPIF_CS_enable();
     8d8:	0e 94 1d 04 	call	0x83a	; 0x83a <SPIF_CS_enable>

	SPIF_send_inst(SPIF_INST_4B_READ);
     8dc:	83 e1       	ldi	r24, 0x13	; 19
     8de:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
	SPIF_send_inst(address >> 24);
     8e2:	8f 2d       	mov	r24, r15
     8e4:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
	SPIF_send_inst(address >> 16);
     8e8:	8e 2d       	mov	r24, r14
     8ea:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
	SPIF_send_inst(address >> 8);
     8ee:	8d 2d       	mov	r24, r13
     8f0:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
	SPIF_send_inst(address);
     8f4:	8c 2d       	mov	r24, r12
     8f6:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
     8fa:	e8 01       	movw	r28, r16

	for (uint32_t j = 0; j < size; j++)
     8fc:	c1 2c       	mov	r12, r1
     8fe:	d1 2c       	mov	r13, r1
     900:	76 01       	movw	r14, r12
     902:	8c 14       	cp	r8, r12
     904:	9d 04       	cpc	r9, r13
     906:	ae 04       	cpc	r10, r14
     908:	bf 04       	cpc	r11, r15
     90a:	51 f0       	breq	.+20     	; 0x920 <SPIF_uncheck_read+0x96>
	{
		buff[j] = SPIF_send_inst(SPIF_INST_READ_RESPONSE);
     90c:	89 e6       	ldi	r24, 0x69	; 105
     90e:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
     912:	89 93       	st	Y+, r24
	SPIF_send_inst(address >> 24);
	SPIF_send_inst(address >> 16);
	SPIF_send_inst(address >> 8);
	SPIF_send_inst(address);

	for (uint32_t j = 0; j < size; j++)
     914:	8f ef       	ldi	r24, 0xFF	; 255
     916:	c8 1a       	sub	r12, r24
     918:	d8 0a       	sbc	r13, r24
     91a:	e8 0a       	sbc	r14, r24
     91c:	f8 0a       	sbc	r15, r24
     91e:	f1 cf       	rjmp	.-30     	; 0x902 <SPIF_uncheck_read+0x78>
	{
		buff[j] = SPIF_send_inst(SPIF_INST_READ_RESPONSE);
	}

	SPIF_CS_disable();
     920:	0e 94 1f 04 	call	0x83e	; 0x83e <SPIF_CS_disable>
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	03 c0       	rjmp	.+6      	; 0x92e <SPIF_uncheck_read+0xa4>
** as temporary storage.
*/
SPIF_RET_t SPIF_uncheck_read(uint32_t address, uint8_t* buff, uint32_t size)
{

	if (address > SPIF_SIZE) return SPIF_ERR_MEM_ADDR_OUTOF_RANGE;
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	01 c0       	rjmp	.+2      	; 0x92e <SPIF_uncheck_read+0xa4>
	if (address + size > SPIF_SIZE) return SPIF_ERR_SIZE_OUTOF_RANGE;
     92c:	82 e0       	ldi	r24, 0x02	; 2
	}

	SPIF_CS_disable();

	return SPIF_OK;
}
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	ff 90       	pop	r15
     938:	ef 90       	pop	r14
     93a:	df 90       	pop	r13
     93c:	cf 90       	pop	r12
     93e:	bf 90       	pop	r11
     940:	af 90       	pop	r10
     942:	9f 90       	pop	r9
     944:	8f 90       	pop	r8
     946:	08 95       	ret

00000948 <SPIF_uncheck_write>:
/*
** Auxiliary function to write given buffer to flash. It has all memory address
** space available, including the last sector used as temporary storage.
*/
SPIF_RET_t SPIF_uncheck_write(uint32_t address, uint8_t* buff, uint32_t size)
{
     948:	4f 92       	push	r4
     94a:	5f 92       	push	r5
     94c:	6f 92       	push	r6
     94e:	7f 92       	push	r7
     950:	8f 92       	push	r8
     952:	9f 92       	push	r9
     954:	af 92       	push	r10
     956:	bf 92       	push	r11
     958:	cf 92       	push	r12
     95a:	df 92       	push	r13
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	62 97       	sbiw	r28, 0x12	; 18
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
	uint32_t first_page = address - (address % SPIF_PAGE_SIZE);
	uint32_t last_page = ( (address + size - 1) / SPIF_PAGE_SIZE ) * SPIF_PAGE_SIZE;
	int32_t pages_count = (size / SPIF_PAGE_SIZE) - 1;
	uint32_t write_count = 0;

	if (size <= 0 ) return SPIF_ERR_MEM_INVALID_ADDR;
     978:	01 15       	cp	r16, r1
     97a:	11 05       	cpc	r17, r1
     97c:	21 05       	cpc	r18, r1
     97e:	31 05       	cpc	r19, r1
     980:	09 f4       	brne	.+2      	; 0x984 <SPIF_uncheck_write+0x3c>
     982:	35 c1       	rjmp	.+618    	; 0xbee <__stack+0xef>
	if (address > SPIF_SIZE) return SPIF_ERR_MEM_ADDR_OUTOF_RANGE;
     984:	61 30       	cpi	r22, 0x01	; 1
     986:	71 05       	cpc	r23, r1
     988:	81 05       	cpc	r24, r1
     98a:	a4 e0       	ldi	r26, 0x04	; 4
     98c:	9a 07       	cpc	r25, r26
     98e:	08 f0       	brcs	.+2      	; 0x992 <SPIF_uncheck_write+0x4a>
     990:	30 c1       	rjmp	.+608    	; 0xbf2 <__stack+0xf3>
     992:	28 01       	movw	r4, r16
     994:	39 01       	movw	r6, r18
     996:	5a 8b       	std	Y+18, r21	; 0x12
     998:	49 8b       	std	Y+17, r20	; 0x11
     99a:	6b 01       	movw	r12, r22
     99c:	7c 01       	movw	r14, r24
SPIF_RET_t SPIF_uncheck_write(uint32_t address, uint8_t* buff, uint32_t size)
{
	uint32_t offset = 0;
	uint32_t page_address = 0;
	uint32_t first_page = address - (address % SPIF_PAGE_SIZE);
	uint32_t last_page = ( (address + size - 1) / SPIF_PAGE_SIZE ) * SPIF_PAGE_SIZE;
     99e:	9b 01       	movw	r18, r22
     9a0:	ac 01       	movw	r20, r24
     9a2:	24 0d       	add	r18, r4
     9a4:	35 1d       	adc	r19, r5
     9a6:	46 1d       	adc	r20, r6
     9a8:	57 1d       	adc	r21, r7
     9aa:	2d 83       	std	Y+5, r18	; 0x05
     9ac:	3e 83       	std	Y+6, r19	; 0x06
     9ae:	4f 83       	std	Y+7, r20	; 0x07
     9b0:	58 87       	std	Y+8, r21	; 0x08
	int32_t pages_count = (size / SPIF_PAGE_SIZE) - 1;
	uint32_t write_count = 0;

	if (size <= 0 ) return SPIF_ERR_MEM_INVALID_ADDR;
	if (address > SPIF_SIZE) return SPIF_ERR_MEM_ADDR_OUTOF_RANGE;
	if (address + size > SPIF_SIZE) return SPIF_ERR_SIZE_OUTOF_RANGE;
     9b2:	21 30       	cpi	r18, 0x01	; 1
     9b4:	31 05       	cpc	r19, r1
     9b6:	41 05       	cpc	r20, r1
     9b8:	54 40       	sbci	r21, 0x04	; 4
     9ba:	08 f0       	brcs	.+2      	; 0x9be <SPIF_uncheck_write+0x76>
     9bc:	1c c1       	rjmp	.+568    	; 0xbf6 <__stack+0xf7>

	while (SPIF_read_status() & SPIF_STAT_BUSY) {}
     9be:	0e 94 27 04 	call	0x84e	; 0x84e <SPIF_read_status>
     9c2:	80 fd       	sbrc	r24, 0
     9c4:	fc cf       	rjmp	.-8      	; 0x9be <SPIF_uncheck_write+0x76>
*/
SPIF_RET_t SPIF_uncheck_write(uint32_t address, uint8_t* buff, uint32_t size)
{
	uint32_t offset = 0;
	uint32_t page_address = 0;
	uint32_t first_page = address - (address % SPIF_PAGE_SIZE);
     9c6:	a7 01       	movw	r20, r14
     9c8:	96 01       	movw	r18, r12
     9ca:	22 27       	eor	r18, r18
     9cc:	29 87       	std	Y+9, r18	; 0x09
     9ce:	3a 87       	std	Y+10, r19	; 0x0a
     9d0:	4b 87       	std	Y+11, r20	; 0x0b
     9d2:	5c 87       	std	Y+12, r21	; 0x0c

	while (SPIF_read_status() & SPIF_STAT_BUSY) {}

	/* Write first page */

	SPIF_enable_write();
     9d4:	0e 94 38 04 	call	0x870	; 0x870 <SPIF_enable_write>

	SPIF_CS_disable();
     9d8:	0e 94 1f 04 	call	0x83e	; 0x83e <SPIF_CS_disable>
	SPIF_CS_enable();
     9dc:	0e 94 1d 04 	call	0x83a	; 0x83a <SPIF_CS_enable>

	SPIF_send_inst(SPIF_INST_4B_WRITE);
     9e0:	82 e1       	ldi	r24, 0x12	; 18
     9e2:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
	SPIF_send_inst(address >> 24);
     9e6:	8f 2d       	mov	r24, r15
     9e8:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
	SPIF_send_inst(address >> 16);
     9ec:	8e 2d       	mov	r24, r14
     9ee:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
	SPIF_send_inst(address >> 8);
     9f2:	8d 2d       	mov	r24, r13
     9f4:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
	SPIF_send_inst(address);
     9f8:	8c 2d       	mov	r24, r12
     9fa:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>


	if ( (address + size) >= (first_page + SPIF_PAGE_SIZE) )
     9fe:	89 85       	ldd	r24, Y+9	; 0x09
     a00:	9a 85       	ldd	r25, Y+10	; 0x0a
     a02:	ab 85       	ldd	r26, Y+11	; 0x0b
     a04:	bc 85       	ldd	r27, Y+12	; 0x0c
     a06:	9f 5f       	subi	r25, 0xFF	; 255
     a08:	af 4f       	sbci	r26, 0xFF	; 255
     a0a:	bf 4f       	sbci	r27, 0xFF	; 255
     a0c:	89 83       	std	Y+1, r24	; 0x01
     a0e:	9a 83       	std	Y+2, r25	; 0x02
     a10:	ab 83       	std	Y+3, r26	; 0x03
     a12:	bc 83       	std	Y+4, r27	; 0x04
     a14:	2d 81       	ldd	r18, Y+5	; 0x05
     a16:	3e 81       	ldd	r19, Y+6	; 0x06
     a18:	4f 81       	ldd	r20, Y+7	; 0x07
     a1a:	58 85       	ldd	r21, Y+8	; 0x08
     a1c:	28 17       	cp	r18, r24
     a1e:	39 07       	cpc	r19, r25
     a20:	4a 07       	cpc	r20, r26
     a22:	5b 07       	cpc	r21, r27
     a24:	68 f0       	brcs	.+26     	; 0xa40 <__DATA_REGION_LENGTH__+0x40>
	{
		write_count = first_page + SPIF_PAGE_SIZE - address;
     a26:	89 84       	ldd	r8, Y+9	; 0x09
     a28:	9a 84       	ldd	r9, Y+10	; 0x0a
     a2a:	ab 84       	ldd	r10, Y+11	; 0x0b
     a2c:	bc 84       	ldd	r11, Y+12	; 0x0c
     a2e:	8c 18       	sub	r8, r12
     a30:	9d 08       	sbc	r9, r13
     a32:	ae 08       	sbc	r10, r14
     a34:	bf 08       	sbc	r11, r15
     a36:	3f ef       	ldi	r19, 0xFF	; 255
     a38:	93 1a       	sub	r9, r19
     a3a:	a3 0a       	sbc	r10, r19
     a3c:	b3 0a       	sbc	r11, r19
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <__DATA_REGION_LENGTH__+0x44>
     a40:	53 01       	movw	r10, r6
     a42:	42 01       	movw	r8, r4
	else
	{
		write_count = size;
	}

	for (uint16_t j = 0; j < write_count; j++)
     a44:	09 89       	ldd	r16, Y+17	; 0x11
     a46:	1a 89       	ldd	r17, Y+18	; 0x12
     a48:	c8 01       	movw	r24, r16
     a4a:	e9 89       	ldd	r30, Y+17	; 0x11
     a4c:	fa 89       	ldd	r31, Y+18	; 0x12
     a4e:	8e 1b       	sub	r24, r30
     a50:	9f 0b       	sbc	r25, r31
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	88 15       	cp	r24, r8
     a58:	99 05       	cpc	r25, r9
     a5a:	aa 05       	cpc	r26, r10
     a5c:	bb 05       	cpc	r27, r11
     a5e:	30 f4       	brcc	.+12     	; 0xa6c <__DATA_REGION_LENGTH__+0x6c>
	{
		SPIF_send_inst(buff[j]);
     a60:	d8 01       	movw	r26, r16
     a62:	8d 91       	ld	r24, X+
     a64:	8d 01       	movw	r16, r26
     a66:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
     a6a:	ee cf       	rjmp	.-36     	; 0xa48 <__DATA_REGION_LENGTH__+0x48>
	}

	while (SPIF_read_status() & SPIF_STAT_BUSY) {}
     a6c:	0e 94 27 04 	call	0x84e	; 0x84e <SPIF_read_status>
     a70:	80 fd       	sbrc	r24, 0
     a72:	fc cf       	rjmp	.-8      	; 0xa6c <__DATA_REGION_LENGTH__+0x6c>

	SPIF_CS_disable();
     a74:	0e 94 1f 04 	call	0x83e	; 0x83e <SPIF_CS_disable>
{
	uint32_t offset = 0;
	uint32_t page_address = 0;
	uint32_t first_page = address - (address % SPIF_PAGE_SIZE);
	uint32_t last_page = ( (address + size - 1) / SPIF_PAGE_SIZE ) * SPIF_PAGE_SIZE;
	int32_t pages_count = (size / SPIF_PAGE_SIZE) - 1;
     a78:	45 2c       	mov	r4, r5
     a7a:	56 2c       	mov	r5, r6
     a7c:	67 2c       	mov	r6, r7
     a7e:	77 24       	eor	r7, r7
     a80:	a3 01       	movw	r20, r6
     a82:	92 01       	movw	r18, r4
     a84:	21 50       	subi	r18, 0x01	; 1
     a86:	31 09       	sbc	r19, r1
     a88:	41 09       	sbc	r20, r1
     a8a:	51 09       	sbc	r21, r1
     a8c:	2d 87       	std	Y+13, r18	; 0x0d
     a8e:	3e 87       	std	Y+14, r19	; 0x0e
     a90:	4f 87       	std	Y+15, r20	; 0x0f
     a92:	58 8b       	std	Y+16, r21	; 0x10
     a94:	49 89       	ldd	r20, Y+17	; 0x11
     a96:	5a 89       	ldd	r21, Y+18	; 0x12
     a98:	84 0e       	add	r8, r20
     a9a:	95 1e       	adc	r9, r21

	SPIF_CS_disable();

	/* Write pages in the middle */

	for (int32_t i = 0; i < pages_count; i++)
     a9c:	41 2c       	mov	r4, r1
     a9e:	51 2c       	mov	r5, r1
     aa0:	32 01       	movw	r6, r4
     aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
     aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
     aa6:	af 85       	ldd	r26, Y+15	; 0x0f
     aa8:	b8 89       	ldd	r27, Y+16	; 0x10
     aaa:	48 16       	cp	r4, r24
     aac:	59 06       	cpc	r5, r25
     aae:	6a 06       	cpc	r6, r26
     ab0:	7b 06       	cpc	r7, r27
     ab2:	e4 f5       	brge	.+120    	; 0xb2c <__stack+0x2d>
	{
		offset = i * SPIF_PAGE_SIZE + write_count;
		page_address = first_page +  SPIF_PAGE_SIZE + (i * SPIF_PAGE_SIZE);
		SPIF_enable_write();
     ab4:	0e 94 38 04 	call	0x870	; 0x870 <SPIF_enable_write>

		SPIF_CS_disable();
     ab8:	0e 94 1f 04 	call	0x83e	; 0x83e <SPIF_CS_disable>
		SPIF_CS_enable();
     abc:	0e 94 1d 04 	call	0x83a	; 0x83a <SPIF_CS_enable>

		SPIF_send_inst(SPIF_INST_4B_WRITE);
     ac0:	82 e1       	ldi	r24, 0x12	; 18
     ac2:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(page_address >> 24);
     ac6:	8c 81       	ldd	r24, Y+4	; 0x04
     ac8:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(page_address >> 16);
     acc:	8b 81       	ldd	r24, Y+3	; 0x03
     ace:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(page_address >> 8);
     ad2:	8a 81       	ldd	r24, Y+2	; 0x02
     ad4:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(page_address);
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>


		for (uint16_t j = 0; j < SPIF_PAGE_SIZE; j++)
     ade:	a1 2c       	mov	r10, r1
     ae0:	b1 2c       	mov	r11, r1
		{
			SPIF_send_inst(buff[offset + j]);
     ae2:	f4 01       	movw	r30, r8
     ae4:	ea 0d       	add	r30, r10
     ae6:	fb 1d       	adc	r31, r11
     ae8:	80 81       	ld	r24, Z
     aea:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(page_address >> 16);
		SPIF_send_inst(page_address >> 8);
		SPIF_send_inst(page_address);


		for (uint16_t j = 0; j < SPIF_PAGE_SIZE; j++)
     aee:	5f ef       	ldi	r21, 0xFF	; 255
     af0:	a5 1a       	sub	r10, r21
     af2:	b5 0a       	sbc	r11, r21
     af4:	a1 14       	cp	r10, r1
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	b8 06       	cpc	r11, r24
     afa:	99 f7       	brne	.-26     	; 0xae2 <__DATA_REGION_LENGTH__+0xe2>
		{
			SPIF_send_inst(buff[offset + j]);
		}

		while (SPIF_read_status() & SPIF_STAT_BUSY) {}
     afc:	0e 94 27 04 	call	0x84e	; 0x84e <SPIF_read_status>
     b00:	80 fd       	sbrc	r24, 0
     b02:	fc cf       	rjmp	.-8      	; 0xafc <__DATA_REGION_LENGTH__+0xfc>

		SPIF_CS_disable();
     b04:	0e 94 1f 04 	call	0x83e	; 0x83e <SPIF_CS_disable>

	SPIF_CS_disable();

	/* Write pages in the middle */

	for (int32_t i = 0; i < pages_count; i++)
     b08:	9f ef       	ldi	r25, 0xFF	; 255
     b0a:	49 1a       	sub	r4, r25
     b0c:	59 0a       	sbc	r5, r25
     b0e:	69 0a       	sbc	r6, r25
     b10:	79 0a       	sbc	r7, r25
     b12:	93 94       	inc	r9
     b14:	29 81       	ldd	r18, Y+1	; 0x01
     b16:	3a 81       	ldd	r19, Y+2	; 0x02
     b18:	4b 81       	ldd	r20, Y+3	; 0x03
     b1a:	5c 81       	ldd	r21, Y+4	; 0x04
     b1c:	3f 5f       	subi	r19, 0xFF	; 255
     b1e:	4f 4f       	sbci	r20, 0xFF	; 255
     b20:	5f 4f       	sbci	r21, 0xFF	; 255
     b22:	29 83       	std	Y+1, r18	; 0x01
     b24:	3a 83       	std	Y+2, r19	; 0x02
     b26:	4b 83       	std	Y+3, r20	; 0x03
     b28:	5c 83       	std	Y+4, r21	; 0x04
     b2a:	bb cf       	rjmp	.-138    	; 0xaa2 <__DATA_REGION_LENGTH__+0xa2>
SPIF_RET_t SPIF_uncheck_write(uint32_t address, uint8_t* buff, uint32_t size)
{
	uint32_t offset = 0;
	uint32_t page_address = 0;
	uint32_t first_page = address - (address % SPIF_PAGE_SIZE);
	uint32_t last_page = ( (address + size - 1) / SPIF_PAGE_SIZE ) * SPIF_PAGE_SIZE;
     b2c:	8d 80       	ldd	r8, Y+5	; 0x05
     b2e:	9e 80       	ldd	r9, Y+6	; 0x06
     b30:	af 80       	ldd	r10, Y+7	; 0x07
     b32:	b8 84       	ldd	r11, Y+8	; 0x08
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	89 1a       	sub	r8, r25
     b38:	91 08       	sbc	r9, r1
     b3a:	a1 08       	sbc	r10, r1
     b3c:	b1 08       	sbc	r11, r1
     b3e:	88 24       	eor	r8, r8

		SPIF_CS_disable();
	}


	if(last_page && (first_page != last_page) )
     b40:	81 14       	cp	r8, r1
     b42:	91 04       	cpc	r9, r1
     b44:	a1 04       	cpc	r10, r1
     b46:	b1 04       	cpc	r11, r1
     b48:	09 f4       	brne	.+2      	; 0xb4c <__stack+0x4d>
     b4a:	57 c0       	rjmp	.+174    	; 0xbfa <__stack+0xfb>
     b4c:	29 85       	ldd	r18, Y+9	; 0x09
     b4e:	3a 85       	ldd	r19, Y+10	; 0x0a
     b50:	4b 85       	ldd	r20, Y+11	; 0x0b
     b52:	5c 85       	ldd	r21, Y+12	; 0x0c
     b54:	28 15       	cp	r18, r8
     b56:	39 05       	cpc	r19, r9
     b58:	4a 05       	cpc	r20, r10
     b5a:	5b 05       	cpc	r21, r11
     b5c:	09 f4       	brne	.+2      	; 0xb60 <__stack+0x61>
     b5e:	4d c0       	rjmp	.+154    	; 0xbfa <__stack+0xfb>
	{
		offset = last_page - address;
     b60:	d5 01       	movw	r26, r10
     b62:	c4 01       	movw	r24, r8
     b64:	8c 19       	sub	r24, r12
     b66:	9d 09       	sbc	r25, r13
     b68:	ae 09       	sbc	r26, r14
     b6a:	bf 09       	sbc	r27, r15
     b6c:	6c 01       	movw	r12, r24
     b6e:	7d 01       	movw	r14, r26
		write_count = address + size - last_page;
     b70:	4d 80       	ldd	r4, Y+5	; 0x05
     b72:	5e 80       	ldd	r5, Y+6	; 0x06
     b74:	6f 80       	ldd	r6, Y+7	; 0x07
     b76:	78 84       	ldd	r7, Y+8	; 0x08
     b78:	48 18       	sub	r4, r8
     b7a:	59 08       	sbc	r5, r9
     b7c:	6a 08       	sbc	r6, r10
     b7e:	7b 08       	sbc	r7, r11

		SPIF_enable_write();
     b80:	0e 94 38 04 	call	0x870	; 0x870 <SPIF_enable_write>

		SPIF_CS_disable();
     b84:	0e 94 1f 04 	call	0x83e	; 0x83e <SPIF_CS_disable>
		SPIF_CS_enable();
     b88:	0e 94 1d 04 	call	0x83a	; 0x83a <SPIF_CS_enable>

		SPIF_send_inst(SPIF_INST_4B_WRITE);
     b8c:	82 e1       	ldi	r24, 0x12	; 18
     b8e:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(last_page >> 24);
     b92:	8b 2d       	mov	r24, r11
     b94:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(last_page >> 16);
     b98:	8a 2d       	mov	r24, r10
     b9a:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(last_page >> 8);
     b9e:	89 2d       	mov	r24, r9
     ba0:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(last_page);
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
     baa:	a9 89       	ldd	r26, Y+17	; 0x11
     bac:	ba 89       	ldd	r27, Y+18	; 0x12
     bae:	ac 0d       	add	r26, r12
     bb0:	bd 1d       	adc	r27, r13
     bb2:	ba 83       	std	Y+2, r27	; 0x02
     bb4:	a9 83       	std	Y+1, r26	; 0x01

		for (uint16_t j = 0; j < write_count ; j++)
     bb6:	e1 2c       	mov	r14, r1
     bb8:	f1 2c       	mov	r15, r1
     bba:	c7 01       	movw	r24, r14
     bbc:	a0 e0       	ldi	r26, 0x00	; 0
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	84 15       	cp	r24, r4
     bc2:	95 05       	cpc	r25, r5
     bc4:	a6 05       	cpc	r26, r6
     bc6:	b7 05       	cpc	r27, r7
     bc8:	58 f4       	brcc	.+22     	; 0xbe0 <__stack+0xe1>
		{
			SPIF_send_inst(buff[offset + j]);
     bca:	e9 81       	ldd	r30, Y+1	; 0x01
     bcc:	fa 81       	ldd	r31, Y+2	; 0x02
     bce:	81 91       	ld	r24, Z+
     bd0:	fa 83       	std	Y+2, r31	; 0x02
     bd2:	e9 83       	std	Y+1, r30	; 0x01
     bd4:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(last_page >> 24);
		SPIF_send_inst(last_page >> 16);
		SPIF_send_inst(last_page >> 8);
		SPIF_send_inst(last_page);

		for (uint16_t j = 0; j < write_count ; j++)
     bd8:	ff ef       	ldi	r31, 0xFF	; 255
     bda:	ef 1a       	sub	r14, r31
     bdc:	ff 0a       	sbc	r15, r31
     bde:	ed cf       	rjmp	.-38     	; 0xbba <__stack+0xbb>
		{
			SPIF_send_inst(buff[offset + j]);
		}

		while (SPIF_read_status() & SPIF_STAT_BUSY) {}
     be0:	0e 94 27 04 	call	0x84e	; 0x84e <SPIF_read_status>
     be4:	80 fd       	sbrc	r24, 0
     be6:	fc cf       	rjmp	.-8      	; 0xbe0 <__stack+0xe1>

		SPIF_CS_disable();
     be8:	0e 94 1f 04 	call	0x83e	; 0x83e <SPIF_CS_disable>
     bec:	06 c0       	rjmp	.+12     	; 0xbfa <__stack+0xfb>
	uint32_t first_page = address - (address % SPIF_PAGE_SIZE);
	uint32_t last_page = ( (address + size - 1) / SPIF_PAGE_SIZE ) * SPIF_PAGE_SIZE;
	int32_t pages_count = (size / SPIF_PAGE_SIZE) - 1;
	uint32_t write_count = 0;

	if (size <= 0 ) return SPIF_ERR_MEM_INVALID_ADDR;
     bee:	83 e0       	ldi	r24, 0x03	; 3
     bf0:	05 c0       	rjmp	.+10     	; 0xbfc <__stack+0xfd>
	if (address > SPIF_SIZE) return SPIF_ERR_MEM_ADDR_OUTOF_RANGE;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	03 c0       	rjmp	.+6      	; 0xbfc <__stack+0xfd>
	if (address + size > SPIF_SIZE) return SPIF_ERR_SIZE_OUTOF_RANGE;
     bf6:	82 e0       	ldi	r24, 0x02	; 2
     bf8:	01 c0       	rjmp	.+2      	; 0xbfc <__stack+0xfd>
		while (SPIF_read_status() & SPIF_STAT_BUSY) {}

		SPIF_CS_disable();
	}

	return SPIF_OK;
     bfa:	80 e0       	ldi	r24, 0x00	; 0
}
     bfc:	62 96       	adiw	r28, 0x12	; 18
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	ef 90       	pop	r14
     c14:	df 90       	pop	r13
     c16:	cf 90       	pop	r12
     c18:	bf 90       	pop	r11
     c1a:	af 90       	pop	r10
     c1c:	9f 90       	pop	r9
     c1e:	8f 90       	pop	r8
     c20:	7f 90       	pop	r7
     c22:	6f 90       	pop	r6
     c24:	5f 90       	pop	r5
     c26:	4f 90       	pop	r4
     c28:	08 95       	ret

00000c2a <SPIF_erase>:
/************************************************************************/

/* Fill the whole flash with 0xFF, it may take some time. */
void SPIF_erase(void)
{
	while ((SPIF_read_status() & SPIF_STAT_BUSY)) {}
     c2a:	0e 94 27 04 	call	0x84e	; 0x84e <SPIF_read_status>
     c2e:	80 fd       	sbrc	r24, 0
     c30:	fc cf       	rjmp	.-8      	; 0xc2a <SPIF_erase>

	SPIF_enable_write();
     c32:	0e 94 38 04 	call	0x870	; 0x870 <SPIF_enable_write>

	SPIF_CS_disable();
     c36:	0e 94 1f 04 	call	0x83e	; 0x83e <SPIF_CS_disable>
	SPIF_CS_enable();
     c3a:	0e 94 1d 04 	call	0x83a	; 0x83a <SPIF_CS_enable>

	SPIF_send_inst(SPIF_INST_ERASE);
     c3e:	87 ec       	ldi	r24, 0xC7	; 199
     c40:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>

	SPIF_CS_disable();
     c44:	0c 94 1f 04 	jmp	0x83e	; 0x83e <SPIF_CS_disable>

00000c48 <SPIF_4B_erase_sector>:
	return;
}

/* Fill the given sector with 0xFF, */
void SPIF_4B_erase_sector(uint32_t address)
{
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	eb 01       	movw	r28, r22
     c52:	18 2f       	mov	r17, r24
     c54:	09 2f       	mov	r16, r25
	while (SPIF_read_status() & SPIF_STAT_BUSY) {}
     c56:	0e 94 27 04 	call	0x84e	; 0x84e <SPIF_read_status>
     c5a:	80 fd       	sbrc	r24, 0
     c5c:	fc cf       	rjmp	.-8      	; 0xc56 <SPIF_4B_erase_sector+0xe>

	SPIF_enable_write();
     c5e:	0e 94 38 04 	call	0x870	; 0x870 <SPIF_enable_write>

	SPIF_CS_disable();
     c62:	0e 94 1f 04 	call	0x83e	; 0x83e <SPIF_CS_disable>
	SPIF_CS_enable();
     c66:	0e 94 1d 04 	call	0x83a	; 0x83a <SPIF_CS_enable>

	SPIF_send_inst(SPIF_INST_4B_ERASE_SECT);
     c6a:	81 e2       	ldi	r24, 0x21	; 33
     c6c:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>

	SPIF_send_inst(address >> 24);
     c70:	80 2f       	mov	r24, r16
     c72:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
	SPIF_send_inst(address >> 16);
     c76:	81 2f       	mov	r24, r17
     c78:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
	SPIF_send_inst(address >> 8);
     c7c:	8d 2f       	mov	r24, r29
     c7e:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
	SPIF_send_inst(address);
     c82:	8c 2f       	mov	r24, r28
     c84:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>


	SPIF_CS_disable();

	return;
}
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
	SPIF_send_inst(address >> 16);
	SPIF_send_inst(address >> 8);
	SPIF_send_inst(address);


	SPIF_CS_disable();
     c90:	0c 94 1f 04 	jmp	0x83e	; 0x83e <SPIF_CS_disable>

00000c94 <SPIF_get_page_size>:

/* Return page size in bytes. */
uint16_t SPIF_get_page_size(void)
{
	return SPIF_PAGE_SIZE;
}
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	08 95       	ret

00000c9a <SPIF_get_sector_size>:

/* Return sector size in bytes */
uint16_t SPIF_get_sector_size(void)
{
	return SPIF_SECTOR_SIZE;
}
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e1       	ldi	r25, 0x10	; 16
     c9e:	08 95       	ret

00000ca0 <SPIF_get_size>:

/* Return usable flash size in bytes */
uint32_t SPIF_get_size(void)
{
	return SPIF_VIRT_SIZE;
}
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	70 ef       	ldi	r23, 0xF0	; 240
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
     ca6:	93 e0       	ldi	r25, 0x03	; 3
     ca8:	08 95       	ret

00000caa <SPIF_read>:

/* Read from flash to buffer up to last sector*/
SPIF_RET_t SPIF_read(uint32_t address, uint8_t* buff, uint32_t size)
{
     caa:	cf 92       	push	r12
     cac:	df 92       	push	r13
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17

	if (address > SPIF_VIRT_SIZE )  return SPIF_ERR_MEM_ADDR_OUTOF_RANGE;
     cb6:	61 30       	cpi	r22, 0x01	; 1
     cb8:	e0 ef       	ldi	r30, 0xF0	; 240
     cba:	7e 07       	cpc	r23, r30
     cbc:	ef ef       	ldi	r30, 0xFF	; 255
     cbe:	8e 07       	cpc	r24, r30
     cc0:	e3 e0       	ldi	r30, 0x03	; 3
     cc2:	9e 07       	cpc	r25, r30
     cc4:	90 f4       	brcc	.+36     	; 0xcea <SPIF_read+0x40>
	if (address + size > SPIF_VIRT_SIZE ) return SPIF_ERR_SIZE_OUTOF_RANGE;
     cc6:	6b 01       	movw	r12, r22
     cc8:	7c 01       	movw	r14, r24
     cca:	c0 0e       	add	r12, r16
     ccc:	d1 1e       	adc	r13, r17
     cce:	e2 1e       	adc	r14, r18
     cd0:	f3 1e       	adc	r15, r19
     cd2:	e1 e0       	ldi	r30, 0x01	; 1
     cd4:	ce 16       	cp	r12, r30
     cd6:	e0 ef       	ldi	r30, 0xF0	; 240
     cd8:	de 06       	cpc	r13, r30
     cda:	ef ef       	ldi	r30, 0xFF	; 255
     cdc:	ee 06       	cpc	r14, r30
     cde:	e3 e0       	ldi	r30, 0x03	; 3
     ce0:	fe 06       	cpc	r15, r30
     ce2:	28 f4       	brcc	.+10     	; 0xcee <SPIF_read+0x44>

	return SPIF_uncheck_read(address, buff, size);
     ce4:	0e 94 45 04 	call	0x88a	; 0x88a <SPIF_uncheck_read>
     ce8:	03 c0       	rjmp	.+6      	; 0xcf0 <SPIF_read+0x46>

/* Read from flash to buffer up to last sector*/
SPIF_RET_t SPIF_read(uint32_t address, uint8_t* buff, uint32_t size)
{

	if (address > SPIF_VIRT_SIZE )  return SPIF_ERR_MEM_ADDR_OUTOF_RANGE;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	01 c0       	rjmp	.+2      	; 0xcf0 <SPIF_read+0x46>
	if (address + size > SPIF_VIRT_SIZE ) return SPIF_ERR_SIZE_OUTOF_RANGE;
     cee:	82 e0       	ldi	r24, 0x02	; 2

	return SPIF_uncheck_read(address, buff, size);
}
     cf0:	1f 91       	pop	r17
     cf2:	0f 91       	pop	r16
     cf4:	ff 90       	pop	r15
     cf6:	ef 90       	pop	r14
     cf8:	df 90       	pop	r13
     cfa:	cf 90       	pop	r12
     cfc:	08 95       	ret

00000cfe <SPIF_fast_write>:
** Write without erasing involved sectors. ONLY use when given sectors
** are filled with 0xFF (erased), otherwise the sectors may end up with
** corrupted data.
*/
SPIF_RET_t SPIF_fast_write(uint32_t address, uint8_t* buff, uint32_t size)
{
     cfe:	cf 92       	push	r12
     d00:	df 92       	push	r13
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
	if (address > SPIF_VIRT_SIZE ) return SPIF_ERR_MEM_ADDR_OUTOF_RANGE;
     d0a:	61 30       	cpi	r22, 0x01	; 1
     d0c:	e0 ef       	ldi	r30, 0xF0	; 240
     d0e:	7e 07       	cpc	r23, r30
     d10:	ef ef       	ldi	r30, 0xFF	; 255
     d12:	8e 07       	cpc	r24, r30
     d14:	e3 e0       	ldi	r30, 0x03	; 3
     d16:	9e 07       	cpc	r25, r30
     d18:	90 f4       	brcc	.+36     	; 0xd3e <SPIF_fast_write+0x40>
	if (address + size > SPIF_VIRT_SIZE ) return SPIF_ERR_SIZE_OUTOF_RANGE;
     d1a:	6b 01       	movw	r12, r22
     d1c:	7c 01       	movw	r14, r24
     d1e:	c0 0e       	add	r12, r16
     d20:	d1 1e       	adc	r13, r17
     d22:	e2 1e       	adc	r14, r18
     d24:	f3 1e       	adc	r15, r19
     d26:	e1 e0       	ldi	r30, 0x01	; 1
     d28:	ce 16       	cp	r12, r30
     d2a:	e0 ef       	ldi	r30, 0xF0	; 240
     d2c:	de 06       	cpc	r13, r30
     d2e:	ef ef       	ldi	r30, 0xFF	; 255
     d30:	ee 06       	cpc	r14, r30
     d32:	e3 e0       	ldi	r30, 0x03	; 3
     d34:	fe 06       	cpc	r15, r30
     d36:	28 f4       	brcc	.+10     	; 0xd42 <SPIF_fast_write+0x44>

	return SPIF_uncheck_write(address, buff, size);
     d38:	0e 94 a4 04 	call	0x948	; 0x948 <SPIF_uncheck_write>
     d3c:	03 c0       	rjmp	.+6      	; 0xd44 <SPIF_fast_write+0x46>
** are filled with 0xFF (erased), otherwise the sectors may end up with
** corrupted data.
*/
SPIF_RET_t SPIF_fast_write(uint32_t address, uint8_t* buff, uint32_t size)
{
	if (address > SPIF_VIRT_SIZE ) return SPIF_ERR_MEM_ADDR_OUTOF_RANGE;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	01 c0       	rjmp	.+2      	; 0xd44 <SPIF_fast_write+0x46>
	if (address + size > SPIF_VIRT_SIZE ) return SPIF_ERR_SIZE_OUTOF_RANGE;
     d42:	82 e0       	ldi	r24, 0x02	; 2

	return SPIF_uncheck_write(address, buff, size);
}
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	df 90       	pop	r13
     d4e:	cf 90       	pop	r12
     d50:	08 95       	ret

00000d52 <SPIF_write>:
** Attempts to write data, if any involved page has no compatible data (writing
** 1's where there is a 0's) then returns SPIF_ERR_INCOMPATIBLE_WRITE. Any previous
** pages that were compatible are writen.
*/
SPIF_RET_t SPIF_write(uint32_t address, uint8_t* buff, uint32_t size)
{
     d52:	2f 92       	push	r2
     d54:	3f 92       	push	r3
     d56:	4f 92       	push	r4
     d58:	5f 92       	push	r5
     d5a:	6f 92       	push	r6
     d5c:	7f 92       	push	r7
     d5e:	8f 92       	push	r8
     d60:	9f 92       	push	r9
     d62:	af 92       	push	r10
     d64:	bf 92       	push	r11
     d66:	cf 92       	push	r12
     d68:	df 92       	push	r13
     d6a:	ef 92       	push	r14
     d6c:	ff 92       	push	r15
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	2f 97       	sbiw	r28, 0x0f	; 15
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	de bf       	out	0x3e, r29	; 62
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	cd bf       	out	0x3d, r28	; 61
	uint32_t remainder = size % SPIF_PAGE_SIZE;
	uint8_t read_byte = 0;
	uint8_t result = 0;

	/* Check for size errors */
	if (address > SPIF_VIRT_SIZE ) return SPIF_ERR_MEM_ADDR_OUTOF_RANGE;
     d86:	61 30       	cpi	r22, 0x01	; 1
     d88:	a0 ef       	ldi	r26, 0xF0	; 240
     d8a:	7a 07       	cpc	r23, r26
     d8c:	af ef       	ldi	r26, 0xFF	; 255
     d8e:	8a 07       	cpc	r24, r26
     d90:	a3 e0       	ldi	r26, 0x03	; 3
     d92:	9a 07       	cpc	r25, r26
     d94:	08 f0       	brcs	.+2      	; 0xd98 <SPIF_write+0x46>
     d96:	bc c0       	rjmp	.+376    	; 0xf10 <SPIF_write+0x1be>
     d98:	48 01       	movw	r8, r16
     d9a:	59 01       	movw	r10, r18
     d9c:	5e 83       	std	Y+6, r21	; 0x06
     d9e:	4d 83       	std	Y+5, r20	; 0x05
     da0:	6b 01       	movw	r12, r22
     da2:	7c 01       	movw	r14, r24
	if (address + size > SPIF_VIRT_SIZE ) return SPIF_ERR_SIZE_OUTOF_RANGE;
     da4:	d9 01       	movw	r26, r18
     da6:	c8 01       	movw	r24, r16
     da8:	8c 0d       	add	r24, r12
     daa:	9d 1d       	adc	r25, r13
     dac:	ae 1d       	adc	r26, r14
     dae:	bf 1d       	adc	r27, r15
     db0:	81 30       	cpi	r24, 0x01	; 1
     db2:	90 4f       	sbci	r25, 0xF0	; 240
     db4:	af 4f       	sbci	r26, 0xFF	; 255
     db6:	b3 40       	sbci	r27, 0x03	; 3
     db8:	08 f0       	brcs	.+2      	; 0xdbc <SPIF_write+0x6a>
     dba:	ac c0       	rjmp	.+344    	; 0xf14 <SPIF_write+0x1c2>

	while (SPIF_read_status() & SPIF_STAT_BUSY) {}
     dbc:	0e 94 27 04 	call	0x84e	; 0x84e <SPIF_read_status>
     dc0:	80 fd       	sbrc	r24, 0
     dc2:	fc cf       	rjmp	.-8      	; 0xdbc <SPIF_write+0x6a>

	for (uint32_t i = 0; i < (size / SPIF_PAGE_SIZE); i++)
     dc4:	55 27       	eor	r21, r21
     dc6:	4b 2d       	mov	r20, r11
     dc8:	3a 2d       	mov	r19, r10
     dca:	29 2d       	mov	r18, r9
     dcc:	2f 83       	std	Y+7, r18	; 0x07
     dce:	38 87       	std	Y+8, r19	; 0x08
     dd0:	49 87       	std	Y+9, r20	; 0x09
     dd2:	5a 87       	std	Y+10, r21	; 0x0a
		/* Check if compatible */
		SPIF_CS_disable();
		SPIF_CS_enable();

		SPIF_send_inst(SPIF_INST_4B_READ);
		SPIF_send_inst(address >> 24);
     dd4:	fb 86       	std	Y+11, r15	; 0x0b
		SPIF_send_inst(address >> 16);
     dd6:	ec 86       	std	Y+12, r14	; 0x0c
		SPIF_send_inst(address >> 8);
     dd8:	dd 86       	std	Y+13, r13	; 0x0d
     dda:	2d 80       	ldd	r2, Y+5	; 0x05
     ddc:	3e 80       	ldd	r3, Y+6	; 0x06
     dde:	26 01       	movw	r4, r12
     de0:	37 01       	movw	r6, r14
     de2:	19 82       	std	Y+1, r1	; 0x01
     de4:	1a 82       	std	Y+2, r1	; 0x02
     de6:	1b 82       	std	Y+3, r1	; 0x03
     de8:	1c 82       	std	Y+4, r1	; 0x04
	if (address > SPIF_VIRT_SIZE ) return SPIF_ERR_MEM_ADDR_OUTOF_RANGE;
	if (address + size > SPIF_VIRT_SIZE ) return SPIF_ERR_SIZE_OUTOF_RANGE;

	while (SPIF_read_status() & SPIF_STAT_BUSY) {}

	for (uint32_t i = 0; i < (size / SPIF_PAGE_SIZE); i++)
     dea:	29 81       	ldd	r18, Y+1	; 0x01
     dec:	3a 81       	ldd	r19, Y+2	; 0x02
     dee:	4b 81       	ldd	r20, Y+3	; 0x03
     df0:	5c 81       	ldd	r21, Y+4	; 0x04
     df2:	8f 81       	ldd	r24, Y+7	; 0x07
     df4:	98 85       	ldd	r25, Y+8	; 0x08
     df6:	a9 85       	ldd	r26, Y+9	; 0x09
     df8:	ba 85       	ldd	r27, Y+10	; 0x0a
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	09 f4       	brne	.+2      	; 0xe06 <SPIF_write+0xb4>
     e04:	46 c0       	rjmp	.+140    	; 0xe92 <SPIF_write+0x140>
	{
		offset = i * SPIF_PAGE_SIZE;
		page_address = address + offset;

		/* Check if compatible */
		SPIF_CS_disable();
     e06:	0e 94 1f 04 	call	0x83e	; 0x83e <SPIF_CS_disable>
		SPIF_CS_enable();
     e0a:	0e 94 1d 04 	call	0x83a	; 0x83a <SPIF_CS_enable>

		SPIF_send_inst(SPIF_INST_4B_READ);
     e0e:	83 e1       	ldi	r24, 0x13	; 19
     e10:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(address >> 24);
     e14:	8b 85       	ldd	r24, Y+11	; 0x0b
     e16:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(address >> 16);
     e1a:	8c 85       	ldd	r24, Y+12	; 0x0c
     e1c:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(address >> 8);
     e20:	8d 85       	ldd	r24, Y+13	; 0x0d
     e22:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(address);
     e26:	8c 2d       	mov	r24, r12
     e28:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
     e2c:	81 01       	movw	r16, r2
     e2e:	1f 86       	std	Y+15, r1	; 0x0f
     e30:	1e 86       	std	Y+14, r1	; 0x0e

		for (uint32_t j = 0; j < SPIF_PAGE_SIZE; j++)
		{
			read_byte = SPIF_send_inst(SPIF_INST_READ_RESPONSE);
     e32:	89 e6       	ldi	r24, 0x69	; 105
     e34:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
			result = (~buff[offset + j]) | read_byte;
     e38:	d8 01       	movw	r26, r16
     e3a:	9d 91       	ld	r25, X+
     e3c:	8d 01       	movw	r16, r26
			if( result != 0xFF) return SPIF_ERR_INCOMPATIBLE_WRITE;
     e3e:	90 95       	com	r25
     e40:	89 2b       	or	r24, r25
     e42:	8f 3f       	cpi	r24, 0xFF	; 255
     e44:	11 f0       	breq	.+4      	; 0xe4a <SPIF_write+0xf8>
     e46:	84 e0       	ldi	r24, 0x04	; 4
     e48:	68 c0       	rjmp	.+208    	; 0xf1a <SPIF_write+0x1c8>
     e4a:	ee 85       	ldd	r30, Y+14	; 0x0e
     e4c:	ff 85       	ldd	r31, Y+15	; 0x0f
     e4e:	31 96       	adiw	r30, 0x01	; 1
     e50:	ff 87       	std	Y+15, r31	; 0x0f
     e52:	ee 87       	std	Y+14, r30	; 0x0e
		SPIF_send_inst(address >> 24);
		SPIF_send_inst(address >> 16);
		SPIF_send_inst(address >> 8);
		SPIF_send_inst(address);

		for (uint32_t j = 0; j < SPIF_PAGE_SIZE; j++)
     e54:	e1 15       	cp	r30, r1
     e56:	f1 40       	sbci	r31, 0x01	; 1
     e58:	61 f7       	brne	.-40     	; 0xe32 <SPIF_write+0xe0>
			read_byte = SPIF_send_inst(SPIF_INST_READ_RESPONSE);
			result = (~buff[offset + j]) | read_byte;
			if( result != 0xFF) return SPIF_ERR_INCOMPATIBLE_WRITE;
		}

		SPIF_CS_disable();
     e5a:	0e 94 1f 04 	call	0x83e	; 0x83e <SPIF_CS_disable>

		/* Write page */
		SPIF_fast_write(page_address, buff+offset, SPIF_PAGE_SIZE);
     e5e:	00 e0       	ldi	r16, 0x00	; 0
     e60:	11 e0       	ldi	r17, 0x01	; 1
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	a1 01       	movw	r20, r2
     e68:	c3 01       	movw	r24, r6
     e6a:	b2 01       	movw	r22, r4
     e6c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIF_fast_write>
	if (address > SPIF_VIRT_SIZE ) return SPIF_ERR_MEM_ADDR_OUTOF_RANGE;
	if (address + size > SPIF_VIRT_SIZE ) return SPIF_ERR_SIZE_OUTOF_RANGE;

	while (SPIF_read_status() & SPIF_STAT_BUSY) {}

	for (uint32_t i = 0; i < (size / SPIF_PAGE_SIZE); i++)
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	ab 81       	ldd	r26, Y+3	; 0x03
     e76:	bc 81       	ldd	r27, Y+4	; 0x04
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	a1 1d       	adc	r26, r1
     e7c:	b1 1d       	adc	r27, r1
     e7e:	89 83       	std	Y+1, r24	; 0x01
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	ab 83       	std	Y+3, r26	; 0x03
     e84:	bc 83       	std	Y+4, r27	; 0x04
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	59 1a       	sub	r5, r25
     e8a:	69 0a       	sbc	r6, r25
     e8c:	79 0a       	sbc	r7, r25
     e8e:	33 94       	inc	r3
     e90:	ac cf       	rjmp	.-168    	; 0xdea <SPIF_write+0x98>
*/
SPIF_RET_t SPIF_write(uint32_t address, uint8_t* buff, uint32_t size)
{
	uint32_t offset = 0;
	uint32_t page_address = 0;
	uint32_t remainder = size % SPIF_PAGE_SIZE;
     e92:	24 01       	movw	r4, r8
     e94:	35 01       	movw	r6, r10
     e96:	55 24       	eor	r5, r5
     e98:	66 24       	eor	r6, r6
     e9a:	77 24       	eor	r7, r7

		/* Write page */
		SPIF_fast_write(page_address, buff+offset, SPIF_PAGE_SIZE);
	}

	if( remainder != 0 )
     e9c:	41 14       	cp	r4, r1
     e9e:	51 04       	cpc	r5, r1
     ea0:	61 04       	cpc	r6, r1
     ea2:	71 04       	cpc	r7, r1
     ea4:	c9 f1       	breq	.+114    	; 0xf18 <SPIF_write+0x1c6>
	{
		offset = size - remainder;
     ea6:	84 18       	sub	r8, r4
     ea8:	95 08       	sbc	r9, r5
     eaa:	a6 08       	sbc	r10, r6
     eac:	b7 08       	sbc	r11, r7
		page_address = address + offset;
     eae:	c8 0c       	add	r12, r8
     eb0:	d9 1c       	adc	r13, r9
     eb2:	ea 1c       	adc	r14, r10
     eb4:	fb 1c       	adc	r15, r11

		SPIF_CS_disable();
     eb6:	0e 94 1f 04 	call	0x83e	; 0x83e <SPIF_CS_disable>
		SPIF_CS_enable();
     eba:	0e 94 1d 04 	call	0x83a	; 0x83a <SPIF_CS_enable>

		SPIF_send_inst(SPIF_INST_4B_READ);
     ebe:	83 e1       	ldi	r24, 0x13	; 19
     ec0:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(page_address >> 24);
     ec4:	8f 2d       	mov	r24, r15
     ec6:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(page_address >> 16);
     eca:	8e 2d       	mov	r24, r14
     ecc:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(page_address >> 8);
     ed0:	8d 2d       	mov	r24, r13
     ed2:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
		SPIF_send_inst(page_address);
     ed6:	8c 2d       	mov	r24, r12
     ed8:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>

		for (uint32_t j = 0; j < 1; j++)
		{
			read_byte = SPIF_send_inst(SPIF_INST_READ_RESPONSE);
     edc:	89 e6       	ldi	r24, 0x69	; 105
     ede:	0e 94 21 04 	call	0x842	; 0x842 <SPIF_send_inst>
			result = (~buff[offset + j]) | read_byte;
     ee2:	ad 81       	ldd	r26, Y+5	; 0x05
     ee4:	be 81       	ldd	r27, Y+6	; 0x06
     ee6:	a8 0d       	add	r26, r8
     ee8:	b9 1d       	adc	r27, r9
     eea:	ba 83       	std	Y+2, r27	; 0x02
     eec:	a9 83       	std	Y+1, r26	; 0x01
			if( result != 0xFF) return SPIF_ERR_INCOMPATIBLE_WRITE;
     eee:	9c 91       	ld	r25, X
     ef0:	90 95       	com	r25
     ef2:	89 2b       	or	r24, r25
     ef4:	8f 3f       	cpi	r24, 0xFF	; 255
     ef6:	09 f0       	breq	.+2      	; 0xefa <SPIF_write+0x1a8>
     ef8:	a6 cf       	rjmp	.-180    	; 0xe46 <SPIF_write+0xf4>
		}

		SPIF_CS_disable();
     efa:	0e 94 1f 04 	call	0x83e	; 0x83e <SPIF_CS_disable>

		SPIF_fast_write(page_address, buff+offset, remainder);
     efe:	93 01       	movw	r18, r6
     f00:	82 01       	movw	r16, r4
     f02:	49 81       	ldd	r20, Y+1	; 0x01
     f04:	5a 81       	ldd	r21, Y+2	; 0x02
     f06:	c7 01       	movw	r24, r14
     f08:	b6 01       	movw	r22, r12
     f0a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIF_fast_write>
     f0e:	04 c0       	rjmp	.+8      	; 0xf18 <SPIF_write+0x1c6>
	uint32_t remainder = size % SPIF_PAGE_SIZE;
	uint8_t read_byte = 0;
	uint8_t result = 0;

	/* Check for size errors */
	if (address > SPIF_VIRT_SIZE ) return SPIF_ERR_MEM_ADDR_OUTOF_RANGE;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	03 c0       	rjmp	.+6      	; 0xf1a <SPIF_write+0x1c8>
	if (address + size > SPIF_VIRT_SIZE ) return SPIF_ERR_SIZE_OUTOF_RANGE;
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	01 c0       	rjmp	.+2      	; 0xf1a <SPIF_write+0x1c8>

		SPIF_fast_write(page_address, buff+offset, remainder);

	}

	return SPIF_OK;
     f18:	80 e0       	ldi	r24, 0x00	; 0
}
     f1a:	2f 96       	adiw	r28, 0x0f	; 15
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	bf 90       	pop	r11
     f38:	af 90       	pop	r10
     f3a:	9f 90       	pop	r9
     f3c:	8f 90       	pop	r8
     f3e:	7f 90       	pop	r7
     f40:	6f 90       	pop	r6
     f42:	5f 90       	pop	r5
     f44:	4f 90       	pop	r4
     f46:	3f 90       	pop	r3
     f48:	2f 90       	pop	r2
     f4a:	08 95       	ret

00000f4c <SPIF_slow_write>:

/*
** Writes involved sectors to an auxiliary one even if it is not needed.
*/
SPIF_RET_t SPIF_slow_write(uint32_t address, uint8_t* buff, uint32_t size)
{
     f4c:	2f 92       	push	r2
     f4e:	3f 92       	push	r3
     f50:	4f 92       	push	r4
     f52:	5f 92       	push	r5
     f54:	6f 92       	push	r6
     f56:	7f 92       	push	r7
     f58:	8f 92       	push	r8
     f5a:	9f 92       	push	r9
     f5c:	af 92       	push	r10
     f5e:	bf 92       	push	r11
     f60:	cf 92       	push	r12
     f62:	df 92       	push	r13
     f64:	ef 92       	push	r14
     f66:	ff 92       	push	r15
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	c0 52       	subi	r28, 0x20	; 32
     f76:	d1 40       	sbci	r29, 0x01	; 1
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	f8 94       	cli
     f7c:	de bf       	out	0x3e, r29	; 62
     f7e:	0f be       	out	0x3f, r0	; 63
     f80:	cd bf       	out	0x3d, r28	; 61
	uint32_t page_addr = 0;
	uint32_t page_count = 0;
	uint8_t write_size = 0;
	int32_t buff_offset = 0;
	uint8_t remainder = 0;
	uint8_t tmp[SPIF_PAGE_SIZE] = { 0 };
     f82:	de 01       	movw	r26, r28
     f84:	11 96       	adiw	r26, 0x01	; 1
     f86:	cf 5f       	subi	r28, 0xFF	; 255
     f88:	de 4f       	sbci	r29, 0xFE	; 254
     f8a:	b9 83       	std	Y+1, r27	; 0x01
     f8c:	a8 83       	st	Y, r26
     f8e:	c1 50       	subi	r28, 0x01	; 1
     f90:	d1 40       	sbci	r29, 0x01	; 1
     f92:	e1 2c       	mov	r14, r1
     f94:	ff 24       	eor	r15, r15
     f96:	f3 94       	inc	r15
     f98:	f7 01       	movw	r30, r14
     f9a:	1d 92       	st	X+, r1
     f9c:	31 97       	sbiw	r30, 0x01	; 1
     f9e:	e9 f7       	brne	.-6      	; 0xf9a <SPIF_slow_write+0x4e>

	if (address > SPIF_SIZE ) return SPIF_ERR_MEM_ADDR_OUTOF_RANGE;
     fa0:	61 30       	cpi	r22, 0x01	; 1
     fa2:	71 05       	cpc	r23, r1
     fa4:	81 05       	cpc	r24, r1
     fa6:	f4 e0       	ldi	r31, 0x04	; 4
     fa8:	9f 07       	cpc	r25, r31
     faa:	08 f0       	brcs	.+2      	; 0xfae <SPIF_slow_write+0x62>
     fac:	a6 c4       	rjmp	.+2380   	; 0x18fa <SPIF_slow_write+0x9ae>
** Writes involved sectors to an auxiliary one even if it is not needed.
*/
SPIF_RET_t SPIF_slow_write(uint32_t address, uint8_t* buff, uint32_t size)
{
	uint32_t first_sector = address - (address % SPIF_SECTOR_SIZE);
	uint32_t last_sector = (address + size) - ( (address + size) % SPIF_SECTOR_SIZE);
     fae:	6b 01       	movw	r12, r22
     fb0:	7c 01       	movw	r14, r24
     fb2:	c0 0e       	add	r12, r16
     fb4:	d1 1e       	adc	r13, r17
     fb6:	e2 1e       	adc	r14, r18
     fb8:	f3 1e       	adc	r15, r19
     fba:	c5 5f       	subi	r28, 0xF5	; 245
     fbc:	de 4f       	sbci	r29, 0xFE	; 254
     fbe:	c8 82       	st	Y, r12
     fc0:	d9 82       	std	Y+1, r13	; 0x01
     fc2:	ea 82       	std	Y+2, r14	; 0x02
     fc4:	fb 82       	std	Y+3, r15	; 0x03
     fc6:	cb 50       	subi	r28, 0x0B	; 11
     fc8:	d1 40       	sbci	r29, 0x01	; 1
	int32_t buff_offset = 0;
	uint8_t remainder = 0;
	uint8_t tmp[SPIF_PAGE_SIZE] = { 0 };

	if (address > SPIF_SIZE ) return SPIF_ERR_MEM_ADDR_OUTOF_RANGE;
	if (address + size > SPIF_SIZE ) return SPIF_ERR_SIZE_OUTOF_RANGE;
     fca:	a1 e0       	ldi	r26, 0x01	; 1
     fcc:	ca 16       	cp	r12, r26
     fce:	d1 04       	cpc	r13, r1
     fd0:	e1 04       	cpc	r14, r1
     fd2:	a4 e0       	ldi	r26, 0x04	; 4
     fd4:	fa 06       	cpc	r15, r26
     fd6:	08 f0       	brcs	.+2      	; 0xfda <SPIF_slow_write+0x8e>
     fd8:	92 c4       	rjmp	.+2340   	; 0x18fe <SPIF_slow_write+0x9b2>
     fda:	c9 5e       	subi	r28, 0xE9	; 233
     fdc:	de 4f       	sbci	r29, 0xFE	; 254
     fde:	08 83       	st	Y, r16
     fe0:	19 83       	std	Y+1, r17	; 0x01
     fe2:	2a 83       	std	Y+2, r18	; 0x02
     fe4:	3b 83       	std	Y+3, r19	; 0x03
     fe6:	c7 51       	subi	r28, 0x17	; 23
     fe8:	d1 40       	sbci	r29, 0x01	; 1
     fea:	1a 01       	movw	r2, r20
     fec:	cd 5e       	subi	r28, 0xED	; 237
     fee:	de 4f       	sbci	r29, 0xFE	; 254
     ff0:	68 83       	st	Y, r22
     ff2:	79 83       	std	Y+1, r23	; 0x01
     ff4:	8a 83       	std	Y+2, r24	; 0x02
     ff6:	9b 83       	std	Y+3, r25	; 0x03
     ff8:	c3 51       	subi	r28, 0x13	; 19
     ffa:	d1 40       	sbci	r29, 0x01	; 1
/*
** Writes involved sectors to an auxiliary one even if it is not needed.
*/
SPIF_RET_t SPIF_slow_write(uint32_t address, uint8_t* buff, uint32_t size)
{
	uint32_t first_sector = address - (address % SPIF_SECTOR_SIZE);
     ffc:	9b 01       	movw	r18, r22
     ffe:	ac 01       	movw	r20, r24
    1000:	22 27       	eor	r18, r18
    1002:	30 7f       	andi	r19, 0xF0	; 240
    1004:	c9 5f       	subi	r28, 0xF9	; 249
    1006:	de 4f       	sbci	r29, 0xFE	; 254
    1008:	28 83       	st	Y, r18
    100a:	39 83       	std	Y+1, r19	; 0x01
    100c:	4a 83       	std	Y+2, r20	; 0x02
    100e:	5b 83       	std	Y+3, r21	; 0x03
    1010:	c7 50       	subi	r28, 0x07	; 7
    1012:	d1 40       	sbci	r29, 0x01	; 1
	** due to lack of memory to store such buffer. Despite that this approach
	** still works in case you may write an indeterminate amount of sectors.
	*/

	/* First sector may be a mix of existing and new data */
	SPIF_4B_erase_sector(SPIF_VIRT_SIZE);
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	70 ef       	ldi	r23, 0xF0	; 240
    1018:	8f ef       	ldi	r24, 0xFF	; 255
    101a:	93 e0       	ldi	r25, 0x03	; 3
    101c:	0e 94 24 06 	call	0xc48	; 0xc48 <SPIF_4B_erase_sector>

	/* We save previous data until we get to new data */
	page_count = (address - first_sector) / SPIF_PAGE_SIZE;
    1020:	cd 5e       	subi	r28, 0xED	; 237
    1022:	de 4f       	sbci	r29, 0xFE	; 254
    1024:	88 81       	ld	r24, Y
    1026:	99 81       	ldd	r25, Y+1	; 0x01
    1028:	aa 81       	ldd	r26, Y+2	; 0x02
    102a:	bb 81       	ldd	r27, Y+3	; 0x03
    102c:	c3 51       	subi	r28, 0x13	; 19
    102e:	d1 40       	sbci	r29, 0x01	; 1
    1030:	c9 5f       	subi	r28, 0xF9	; 249
    1032:	de 4f       	sbci	r29, 0xFE	; 254
    1034:	c8 80       	ld	r12, Y
    1036:	d9 80       	ldd	r13, Y+1	; 0x01
    1038:	ea 80       	ldd	r14, Y+2	; 0x02
    103a:	fb 80       	ldd	r15, Y+3	; 0x03
    103c:	c7 50       	subi	r28, 0x07	; 7
    103e:	d1 40       	sbci	r29, 0x01	; 1
    1040:	8c 19       	sub	r24, r12
    1042:	9d 09       	sbc	r25, r13
    1044:	ae 09       	sbc	r26, r14
    1046:	bf 09       	sbc	r27, r15
    1048:	c9 2e       	mov	r12, r25
    104a:	da 2e       	mov	r13, r26
    104c:	eb 2e       	mov	r14, r27
    104e:	ff 24       	eor	r15, r15
    1050:	c5 5e       	subi	r28, 0xE5	; 229
    1052:	de 4f       	sbci	r29, 0xFE	; 254
    1054:	c8 82       	st	Y, r12
    1056:	d9 82       	std	Y+1, r13	; 0x01
    1058:	ea 82       	std	Y+2, r14	; 0x02
    105a:	fb 82       	std	Y+3, r15	; 0x03
    105c:	cb 51       	subi	r28, 0x1B	; 27
    105e:	d1 40       	sbci	r29, 0x01	; 1
	for (uint32_t j = 0; j < page_count; j++)
    1060:	c9 5f       	subi	r28, 0xF9	; 249
    1062:	de 4f       	sbci	r29, 0xFE	; 254
    1064:	88 80       	ld	r8, Y
    1066:	99 80       	ldd	r9, Y+1	; 0x01
    1068:	aa 80       	ldd	r10, Y+2	; 0x02
    106a:	bb 80       	ldd	r11, Y+3	; 0x03
    106c:	c7 50       	subi	r28, 0x07	; 7
    106e:	d1 40       	sbci	r29, 0x01	; 1
    1070:	41 2c       	mov	r4, r1
    1072:	70 ef       	ldi	r23, 0xF0	; 240
    1074:	57 2e       	mov	r5, r23
    1076:	66 24       	eor	r6, r6
    1078:	6a 94       	dec	r6
    107a:	73 e0       	ldi	r23, 0x03	; 3
    107c:	77 2e       	mov	r7, r23
    107e:	c1 2c       	mov	r12, r1
    1080:	d1 2c       	mov	r13, r1
    1082:	76 01       	movw	r14, r12
	{
		page_addr = first_sector + (j * SPIF_PAGE_SIZE);
		SPIF_read(page_addr, tmp, SPIF_PAGE_SIZE);
    1084:	cf 5f       	subi	r28, 0xFF	; 255
    1086:	de 4f       	sbci	r29, 0xFE	; 254
    1088:	28 81       	ld	r18, Y
    108a:	c1 50       	subi	r28, 0x01	; 1
    108c:	d1 40       	sbci	r29, 0x01	; 1
    108e:	cd 5f       	subi	r28, 0xFD	; 253
    1090:	de 4f       	sbci	r29, 0xFE	; 254
    1092:	28 83       	st	Y, r18
    1094:	c3 50       	subi	r28, 0x03	; 3
    1096:	d1 40       	sbci	r29, 0x01	; 1
    1098:	ce 5f       	subi	r28, 0xFE	; 254
    109a:	de 4f       	sbci	r29, 0xFE	; 254
    109c:	38 81       	ld	r19, Y
    109e:	c2 50       	subi	r28, 0x02	; 2
    10a0:	d1 40       	sbci	r29, 0x01	; 1
    10a2:	c1 5f       	subi	r28, 0xF1	; 241
    10a4:	de 4f       	sbci	r29, 0xFE	; 254
    10a6:	38 83       	st	Y, r19
    10a8:	cf 50       	subi	r28, 0x0F	; 15
    10aa:	d1 40       	sbci	r29, 0x01	; 1
	/* First sector may be a mix of existing and new data */
	SPIF_4B_erase_sector(SPIF_VIRT_SIZE);

	/* We save previous data until we get to new data */
	page_count = (address - first_sector) / SPIF_PAGE_SIZE;
	for (uint32_t j = 0; j < page_count; j++)
    10ac:	c5 5e       	subi	r28, 0xE5	; 229
    10ae:	de 4f       	sbci	r29, 0xFE	; 254
    10b0:	28 81       	ld	r18, Y
    10b2:	39 81       	ldd	r19, Y+1	; 0x01
    10b4:	4a 81       	ldd	r20, Y+2	; 0x02
    10b6:	5b 81       	ldd	r21, Y+3	; 0x03
    10b8:	cb 51       	subi	r28, 0x1B	; 27
    10ba:	d1 40       	sbci	r29, 0x01	; 1
    10bc:	c2 16       	cp	r12, r18
    10be:	d3 06       	cpc	r13, r19
    10c0:	e4 06       	cpc	r14, r20
    10c2:	f5 06       	cpc	r15, r21
    10c4:	91 f1       	breq	.+100    	; 0x112a <SPIF_slow_write+0x1de>
	{
		page_addr = first_sector + (j * SPIF_PAGE_SIZE);
		SPIF_read(page_addr, tmp, SPIF_PAGE_SIZE);
    10c6:	00 e0       	ldi	r16, 0x00	; 0
    10c8:	11 e0       	ldi	r17, 0x01	; 1
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	cd 5f       	subi	r28, 0xFD	; 253
    10d0:	de 4f       	sbci	r29, 0xFE	; 254
    10d2:	48 81       	ld	r20, Y
    10d4:	c3 50       	subi	r28, 0x03	; 3
    10d6:	d1 40       	sbci	r29, 0x01	; 1
    10d8:	c1 5f       	subi	r28, 0xF1	; 241
    10da:	de 4f       	sbci	r29, 0xFE	; 254
    10dc:	58 81       	ld	r21, Y
    10de:	cf 50       	subi	r28, 0x0F	; 15
    10e0:	d1 40       	sbci	r29, 0x01	; 1
    10e2:	c5 01       	movw	r24, r10
    10e4:	b4 01       	movw	r22, r8
    10e6:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPIF_read>
		SPIF_uncheck_write( ( SPIF_VIRT_SIZE + (j * SPIF_PAGE_SIZE) ), tmp, SPIF_PAGE_SIZE);
    10ea:	00 e0       	ldi	r16, 0x00	; 0
    10ec:	11 e0       	ldi	r17, 0x01	; 1
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	cd 5f       	subi	r28, 0xFD	; 253
    10f4:	de 4f       	sbci	r29, 0xFE	; 254
    10f6:	48 81       	ld	r20, Y
    10f8:	c3 50       	subi	r28, 0x03	; 3
    10fa:	d1 40       	sbci	r29, 0x01	; 1
    10fc:	c1 5f       	subi	r28, 0xF1	; 241
    10fe:	de 4f       	sbci	r29, 0xFE	; 254
    1100:	58 81       	ld	r21, Y
    1102:	cf 50       	subi	r28, 0x0F	; 15
    1104:	d1 40       	sbci	r29, 0x01	; 1
    1106:	c3 01       	movw	r24, r6
    1108:	b2 01       	movw	r22, r4
    110a:	0e 94 a4 04 	call	0x948	; 0x948 <SPIF_uncheck_write>
	/* First sector may be a mix of existing and new data */
	SPIF_4B_erase_sector(SPIF_VIRT_SIZE);

	/* We save previous data until we get to new data */
	page_count = (address - first_sector) / SPIF_PAGE_SIZE;
	for (uint32_t j = 0; j < page_count; j++)
    110e:	4f ef       	ldi	r20, 0xFF	; 255
    1110:	c4 1a       	sub	r12, r20
    1112:	d4 0a       	sbc	r13, r20
    1114:	e4 0a       	sbc	r14, r20
    1116:	f4 0a       	sbc	r15, r20
    1118:	5f ef       	ldi	r21, 0xFF	; 255
    111a:	95 1a       	sub	r9, r21
    111c:	a5 0a       	sbc	r10, r21
    111e:	b5 0a       	sbc	r11, r21
    1120:	8f ef       	ldi	r24, 0xFF	; 255
    1122:	58 1a       	sub	r5, r24
    1124:	68 0a       	sbc	r6, r24
    1126:	78 0a       	sbc	r7, r24
    1128:	c1 cf       	rjmp	.-126    	; 0x10ac <SPIF_slow_write+0x160>
	{
		page_addr = first_sector + (j * SPIF_PAGE_SIZE);
		SPIF_read(page_addr, tmp, SPIF_PAGE_SIZE);
		SPIF_uncheck_write( ( SPIF_VIRT_SIZE + (j * SPIF_PAGE_SIZE) ), tmp, SPIF_PAGE_SIZE);
	}
	page_addr = first_sector + (page_count * SPIF_PAGE_SIZE);
    112a:	fe 2c       	mov	r15, r14
    112c:	ed 2c       	mov	r14, r13
    112e:	dc 2c       	mov	r13, r12
    1130:	cc 24       	eor	r12, r12
    1132:	c9 5f       	subi	r28, 0xF9	; 249
    1134:	de 4f       	sbci	r29, 0xFE	; 254
    1136:	88 81       	ld	r24, Y
    1138:	99 81       	ldd	r25, Y+1	; 0x01
    113a:	aa 81       	ldd	r26, Y+2	; 0x02
    113c:	bb 81       	ldd	r27, Y+3	; 0x03
    113e:	c7 50       	subi	r28, 0x07	; 7
    1140:	d1 40       	sbci	r29, 0x01	; 1
    1142:	c8 0e       	add	r12, r24
    1144:	d9 1e       	adc	r13, r25
    1146:	ea 1e       	adc	r14, r26
    1148:	fb 1e       	adc	r15, r27
    114a:	cd 5e       	subi	r28, 0xED	; 237
    114c:	de 4f       	sbci	r29, 0xFE	; 254
    114e:	88 80       	ld	r8, Y
    1150:	99 80       	ldd	r9, Y+1	; 0x01
    1152:	aa 80       	ldd	r10, Y+2	; 0x02
    1154:	bb 80       	ldd	r11, Y+3	; 0x03
    1156:	c3 51       	subi	r28, 0x13	; 19
    1158:	d1 40       	sbci	r29, 0x01	; 1
    115a:	99 24       	eor	r9, r9
    115c:	aa 24       	eor	r10, r10
    115e:	bb 24       	eor	r11, r11
	write_size = address - page_addr;
	SPIF_read(page_addr, tmp, write_size);
    1160:	95 01       	movw	r18, r10
    1162:	84 01       	movw	r16, r8
    1164:	ae 01       	movw	r20, r28
    1166:	4f 5f       	subi	r20, 0xFF	; 255
    1168:	5f 4f       	sbci	r21, 0xFF	; 255
    116a:	c7 01       	movw	r24, r14
    116c:	b6 01       	movw	r22, r12
    116e:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPIF_read>
	SPIF_uncheck_write( SPIF_VIRT_SIZE + page_addr, tmp, write_size);
    1172:	c7 01       	movw	r24, r14
    1174:	b6 01       	movw	r22, r12
    1176:	70 51       	subi	r23, 0x10	; 16
    1178:	81 09       	sbc	r24, r1
    117a:	9c 4f       	sbci	r25, 0xFC	; 252
    117c:	95 01       	movw	r18, r10
    117e:	84 01       	movw	r16, r8
    1180:	ae 01       	movw	r20, r28
    1182:	4f 5f       	subi	r20, 0xFF	; 255
    1184:	5f 4f       	sbci	r21, 0xFF	; 255
    1186:	0e 94 a4 04 	call	0x948	; 0x948 <SPIF_uncheck_write>

	/* Save actual data */

	if ( (address + size) >= (first_sector + SPIF_SECTOR_SIZE) )
    118a:	c9 5f       	subi	r28, 0xF9	; 249
    118c:	de 4f       	sbci	r29, 0xFE	; 254
    118e:	88 80       	ld	r8, Y
    1190:	99 80       	ldd	r9, Y+1	; 0x01
    1192:	aa 80       	ldd	r10, Y+2	; 0x02
    1194:	bb 80       	ldd	r11, Y+3	; 0x03
    1196:	c7 50       	subi	r28, 0x07	; 7
    1198:	d1 40       	sbci	r29, 0x01	; 1
    119a:	90 e1       	ldi	r25, 0x10	; 16
    119c:	99 0e       	add	r9, r25
    119e:	a1 1c       	adc	r10, r1
    11a0:	b1 1c       	adc	r11, r1
    11a2:	c5 5f       	subi	r28, 0xF5	; 245
    11a4:	de 4f       	sbci	r29, 0xFE	; 254
    11a6:	c8 80       	ld	r12, Y
    11a8:	d9 80       	ldd	r13, Y+1	; 0x01
    11aa:	ea 80       	ldd	r14, Y+2	; 0x02
    11ac:	fb 80       	ldd	r15, Y+3	; 0x03
    11ae:	cb 50       	subi	r28, 0x0B	; 11
    11b0:	d1 40       	sbci	r29, 0x01	; 1
    11b2:	c8 14       	cp	r12, r8
    11b4:	d9 04       	cpc	r13, r9
    11b6:	ea 04       	cpc	r14, r10
    11b8:	fb 04       	cpc	r15, r11
    11ba:	18 f1       	brcs	.+70     	; 0x1202 <SPIF_slow_write+0x2b6>
	{
		page_count = (first_sector + SPIF_SECTOR_SIZE - address) / SPIF_PAGE_SIZE;
    11bc:	c9 5f       	subi	r28, 0xF9	; 249
    11be:	de 4f       	sbci	r29, 0xFE	; 254
    11c0:	c8 80       	ld	r12, Y
    11c2:	d9 80       	ldd	r13, Y+1	; 0x01
    11c4:	ea 80       	ldd	r14, Y+2	; 0x02
    11c6:	fb 80       	ldd	r15, Y+3	; 0x03
    11c8:	c7 50       	subi	r28, 0x07	; 7
    11ca:	d1 40       	sbci	r29, 0x01	; 1
    11cc:	cd 5e       	subi	r28, 0xED	; 237
    11ce:	de 4f       	sbci	r29, 0xFE	; 254
    11d0:	28 81       	ld	r18, Y
    11d2:	39 81       	ldd	r19, Y+1	; 0x01
    11d4:	4a 81       	ldd	r20, Y+2	; 0x02
    11d6:	5b 81       	ldd	r21, Y+3	; 0x03
    11d8:	c3 51       	subi	r28, 0x13	; 19
    11da:	d1 40       	sbci	r29, 0x01	; 1
    11dc:	c2 1a       	sub	r12, r18
    11de:	d3 0a       	sbc	r13, r19
    11e0:	e4 0a       	sbc	r14, r20
    11e2:	f5 0a       	sbc	r15, r21
    11e4:	30 e1       	ldi	r19, 0x10	; 16
    11e6:	d3 0e       	add	r13, r19
    11e8:	e1 1c       	adc	r14, r1
    11ea:	f1 1c       	adc	r15, r1
    11ec:	cd 2c       	mov	r12, r13
    11ee:	de 2c       	mov	r13, r14
    11f0:	ef 2c       	mov	r14, r15
    11f2:	ff 24       	eor	r15, r15
		remainder = (first_sector + SPIF_SECTOR_SIZE) - (address + (page_count * SPIF_PAGE_SIZE) );
    11f4:	21 95       	neg	r18
    11f6:	c1 5f       	subi	r28, 0xF1	; 241
    11f8:	de 4f       	sbci	r29, 0xFE	; 254
    11fa:	28 83       	st	Y, r18
    11fc:	cf 50       	subi	r28, 0x0F	; 15
    11fe:	d1 40       	sbci	r29, 0x01	; 1
    1200:	16 c0       	rjmp	.+44     	; 0x122e <SPIF_slow_write+0x2e2>
	}
	else
	{
		page_count = size / SPIF_PAGE_SIZE;
    1202:	c9 5e       	subi	r28, 0xE9	; 233
    1204:	de 4f       	sbci	r29, 0xFE	; 254
    1206:	88 81       	ld	r24, Y
    1208:	99 81       	ldd	r25, Y+1	; 0x01
    120a:	aa 81       	ldd	r26, Y+2	; 0x02
    120c:	bb 81       	ldd	r27, Y+3	; 0x03
    120e:	c7 51       	subi	r28, 0x17	; 23
    1210:	d1 40       	sbci	r29, 0x01	; 1
    1212:	c9 2e       	mov	r12, r25
    1214:	da 2e       	mov	r13, r26
    1216:	eb 2e       	mov	r14, r27
    1218:	ff 24       	eor	r15, r15
		remainder = size % SPIF_PAGE_SIZE;
    121a:	c9 5e       	subi	r28, 0xE9	; 233
    121c:	de 4f       	sbci	r29, 0xFE	; 254
    121e:	98 81       	ld	r25, Y
    1220:	c7 51       	subi	r28, 0x17	; 23
    1222:	d1 40       	sbci	r29, 0x01	; 1
    1224:	c1 5f       	subi	r28, 0xF1	; 241
    1226:	de 4f       	sbci	r29, 0xFE	; 254
    1228:	98 83       	st	Y, r25
    122a:	cf 50       	subi	r28, 0x0F	; 15
    122c:	d1 40       	sbci	r29, 0x01	; 1
    122e:	cd 5e       	subi	r28, 0xED	; 237
    1230:	de 4f       	sbci	r29, 0xFE	; 254
    1232:	28 81       	ld	r18, Y
    1234:	39 81       	ldd	r19, Y+1	; 0x01
    1236:	4a 81       	ldd	r20, Y+2	; 0x02
    1238:	5b 81       	ldd	r21, Y+3	; 0x03
    123a:	c3 51       	subi	r28, 0x13	; 19
    123c:	d1 40       	sbci	r29, 0x01	; 1
    123e:	30 51       	subi	r19, 0x10	; 16
    1240:	41 09       	sbc	r20, r1
    1242:	5c 4f       	sbci	r21, 0xFC	; 252
    1244:	c5 5e       	subi	r28, 0xE5	; 229
    1246:	de 4f       	sbci	r29, 0xFE	; 254
    1248:	28 83       	st	Y, r18
    124a:	39 83       	std	Y+1, r19	; 0x01
    124c:	4a 83       	std	Y+2, r20	; 0x02
    124e:	5b 83       	std	Y+3, r21	; 0x03
    1250:	cb 51       	subi	r28, 0x1B	; 27
    1252:	d1 40       	sbci	r29, 0x01	; 1
	}

	for (uint32_t j = 0; j < page_count; j++)
    1254:	cd 5f       	subi	r28, 0xFD	; 253
    1256:	de 4f       	sbci	r29, 0xFE	; 254
    1258:	28 83       	st	Y, r18
    125a:	39 83       	std	Y+1, r19	; 0x01
    125c:	4a 83       	std	Y+2, r20	; 0x02
    125e:	5b 83       	std	Y+3, r21	; 0x03
    1260:	c3 50       	subi	r28, 0x03	; 3
    1262:	d1 40       	sbci	r29, 0x01	; 1
    1264:	41 2c       	mov	r4, r1
    1266:	51 2c       	mov	r5, r1
    1268:	32 01       	movw	r6, r4
    126a:	c4 14       	cp	r12, r4
    126c:	d5 04       	cpc	r13, r5
    126e:	e6 04       	cpc	r14, r6
    1270:	f7 04       	cpc	r15, r7
    1272:	41 f1       	breq	.+80     	; 0x12c4 <SPIF_slow_write+0x378>
	{
		SPIF_uncheck_write( SPIF_VIRT_SIZE + address + (j * SPIF_PAGE_SIZE), buff, SPIF_PAGE_SIZE);
    1274:	00 e0       	ldi	r16, 0x00	; 0
    1276:	11 e0       	ldi	r17, 0x01	; 1
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	a1 01       	movw	r20, r2
    127e:	cd 5f       	subi	r28, 0xFD	; 253
    1280:	de 4f       	sbci	r29, 0xFE	; 254
    1282:	68 81       	ld	r22, Y
    1284:	79 81       	ldd	r23, Y+1	; 0x01
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	9b 81       	ldd	r25, Y+3	; 0x03
    128a:	c3 50       	subi	r28, 0x03	; 3
    128c:	d1 40       	sbci	r29, 0x01	; 1
    128e:	0e 94 a4 04 	call	0x948	; 0x948 <SPIF_uncheck_write>
	{
		page_count = size / SPIF_PAGE_SIZE;
		remainder = size % SPIF_PAGE_SIZE;
	}

	for (uint32_t j = 0; j < page_count; j++)
    1292:	3f ef       	ldi	r19, 0xFF	; 255
    1294:	43 1a       	sub	r4, r19
    1296:	53 0a       	sbc	r5, r19
    1298:	63 0a       	sbc	r6, r19
    129a:	73 0a       	sbc	r7, r19
    129c:	cd 5f       	subi	r28, 0xFD	; 253
    129e:	de 4f       	sbci	r29, 0xFE	; 254
    12a0:	88 81       	ld	r24, Y
    12a2:	99 81       	ldd	r25, Y+1	; 0x01
    12a4:	aa 81       	ldd	r26, Y+2	; 0x02
    12a6:	bb 81       	ldd	r27, Y+3	; 0x03
    12a8:	c3 50       	subi	r28, 0x03	; 3
    12aa:	d1 40       	sbci	r29, 0x01	; 1
    12ac:	9f 5f       	subi	r25, 0xFF	; 255
    12ae:	af 4f       	sbci	r26, 0xFF	; 255
    12b0:	bf 4f       	sbci	r27, 0xFF	; 255
    12b2:	cd 5f       	subi	r28, 0xFD	; 253
    12b4:	de 4f       	sbci	r29, 0xFE	; 254
    12b6:	88 83       	st	Y, r24
    12b8:	99 83       	std	Y+1, r25	; 0x01
    12ba:	aa 83       	std	Y+2, r26	; 0x02
    12bc:	bb 83       	std	Y+3, r27	; 0x03
    12be:	c3 50       	subi	r28, 0x03	; 3
    12c0:	d1 40       	sbci	r29, 0x01	; 1
    12c2:	d3 cf       	rjmp	.-90     	; 0x126a <SPIF_slow_write+0x31e>
	{
		SPIF_uncheck_write( SPIF_VIRT_SIZE + address + (j * SPIF_PAGE_SIZE), buff, SPIF_PAGE_SIZE);
	}
	buff_offset = (page_count * SPIF_PAGE_SIZE);
    12c4:	fe 2c       	mov	r15, r14
    12c6:	ed 2c       	mov	r14, r13
    12c8:	dc 2c       	mov	r13, r12
    12ca:	cc 24       	eor	r12, r12
	SPIF_uncheck_write( SPIF_VIRT_SIZE + address + (page_count * SPIF_PAGE_SIZE), buff + buff_offset, remainder);
    12cc:	c1 5f       	subi	r28, 0xF1	; 241
    12ce:	de 4f       	sbci	r29, 0xFE	; 254
    12d0:	98 81       	ld	r25, Y
    12d2:	cf 50       	subi	r28, 0x0F	; 15
    12d4:	d1 40       	sbci	r29, 0x01	; 1
    12d6:	09 2f       	mov	r16, r25
    12d8:	10 e0       	ldi	r17, 0x00	; 0
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	a1 01       	movw	r20, r2
    12e0:	4c 0d       	add	r20, r12
    12e2:	5d 1d       	adc	r21, r13
    12e4:	c5 5e       	subi	r28, 0xE5	; 229
    12e6:	de 4f       	sbci	r29, 0xFE	; 254
    12e8:	68 81       	ld	r22, Y
    12ea:	79 81       	ldd	r23, Y+1	; 0x01
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	9b 81       	ldd	r25, Y+3	; 0x03
    12f0:	cb 51       	subi	r28, 0x1B	; 27
    12f2:	d1 40       	sbci	r29, 0x01	; 1
    12f4:	6c 0d       	add	r22, r12
    12f6:	7d 1d       	adc	r23, r13
    12f8:	8e 1d       	adc	r24, r14
    12fa:	9f 1d       	adc	r25, r15
    12fc:	0e 94 a4 04 	call	0x948	; 0x948 <SPIF_uncheck_write>

	if ( (address + size) < (first_sector + SPIF_SECTOR_SIZE) )
    1300:	c5 5f       	subi	r28, 0xF5	; 245
    1302:	de 4f       	sbci	r29, 0xFE	; 254
    1304:	c8 80       	ld	r12, Y
    1306:	d9 80       	ldd	r13, Y+1	; 0x01
    1308:	ea 80       	ldd	r14, Y+2	; 0x02
    130a:	fb 80       	ldd	r15, Y+3	; 0x03
    130c:	cb 50       	subi	r28, 0x0B	; 11
    130e:	d1 40       	sbci	r29, 0x01	; 1
    1310:	c8 14       	cp	r12, r8
    1312:	d9 04       	cpc	r13, r9
    1314:	ea 04       	cpc	r14, r10
    1316:	fb 04       	cpc	r15, r11
    1318:	08 f0       	brcs	.+2      	; 0x131c <SPIF_slow_write+0x3d0>
    131a:	5c c0       	rjmp	.+184    	; 0x13d4 <SPIF_slow_write+0x488>
	{
		/* Save rest */
		page_count = ( first_sector + SPIF_SECTOR_SIZE - (address + size) ) / SPIF_PAGE_SIZE;
    131c:	8c 18       	sub	r8, r12
    131e:	9d 08       	sbc	r9, r13
    1320:	ae 08       	sbc	r10, r14
    1322:	bf 08       	sbc	r11, r15
    1324:	89 2c       	mov	r8, r9
    1326:	9a 2c       	mov	r9, r10
    1328:	ab 2c       	mov	r10, r11
    132a:	bb 24       	eor	r11, r11
		for (uint32_t j = 0; j < page_count; j++)
    132c:	26 01       	movw	r4, r12
    132e:	37 01       	movw	r6, r14
    1330:	c1 2c       	mov	r12, r1
    1332:	d1 2c       	mov	r13, r1
    1334:	76 01       	movw	r14, r12
    1336:	c8 14       	cp	r12, r8
    1338:	d9 04       	cpc	r13, r9
    133a:	ea 04       	cpc	r14, r10
    133c:	fb 04       	cpc	r15, r11
    133e:	19 f1       	breq	.+70     	; 0x1386 <SPIF_slow_write+0x43a>
		{
			page_addr = address + size + (j * SPIF_PAGE_SIZE);
			SPIF_read(page_addr, tmp, SPIF_PAGE_SIZE);
    1340:	00 e0       	ldi	r16, 0x00	; 0
    1342:	11 e0       	ldi	r17, 0x01	; 1
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	ae 01       	movw	r20, r28
    134a:	4f 5f       	subi	r20, 0xFF	; 255
    134c:	5f 4f       	sbci	r21, 0xFF	; 255
    134e:	c3 01       	movw	r24, r6
    1350:	b2 01       	movw	r22, r4
    1352:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPIF_read>
			SPIF_uncheck_write( ( SPIF_VIRT_SIZE + ( address + size) + (j * SPIF_PAGE_SIZE) ), tmp, SPIF_PAGE_SIZE);
    1356:	c3 01       	movw	r24, r6
    1358:	b2 01       	movw	r22, r4
    135a:	70 51       	subi	r23, 0x10	; 16
    135c:	81 09       	sbc	r24, r1
    135e:	9c 4f       	sbci	r25, 0xFC	; 252
    1360:	00 e0       	ldi	r16, 0x00	; 0
    1362:	11 e0       	ldi	r17, 0x01	; 1
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	ae 01       	movw	r20, r28
    136a:	4f 5f       	subi	r20, 0xFF	; 255
    136c:	5f 4f       	sbci	r21, 0xFF	; 255
    136e:	0e 94 a4 04 	call	0x948	; 0x948 <SPIF_uncheck_write>

	if ( (address + size) < (first_sector + SPIF_SECTOR_SIZE) )
	{
		/* Save rest */
		page_count = ( first_sector + SPIF_SECTOR_SIZE - (address + size) ) / SPIF_PAGE_SIZE;
		for (uint32_t j = 0; j < page_count; j++)
    1372:	2f ef       	ldi	r18, 0xFF	; 255
    1374:	c2 1a       	sub	r12, r18
    1376:	d2 0a       	sbc	r13, r18
    1378:	e2 0a       	sbc	r14, r18
    137a:	f2 0a       	sbc	r15, r18
    137c:	3f ef       	ldi	r19, 0xFF	; 255
    137e:	53 1a       	sub	r5, r19
    1380:	63 0a       	sbc	r6, r19
    1382:	73 0a       	sbc	r7, r19
    1384:	d8 cf       	rjmp	.-80     	; 0x1336 <SPIF_slow_write+0x3ea>
			page_addr = address + size + (j * SPIF_PAGE_SIZE);
			SPIF_read(page_addr, tmp, SPIF_PAGE_SIZE);
			SPIF_uncheck_write( ( SPIF_VIRT_SIZE + ( address + size) + (j * SPIF_PAGE_SIZE) ), tmp, SPIF_PAGE_SIZE);
		}

		page_addr = address + size + (page_count * SPIF_PAGE_SIZE);
    1386:	fe 2c       	mov	r15, r14
    1388:	ed 2c       	mov	r14, r13
    138a:	dc 2c       	mov	r13, r12
    138c:	cc 24       	eor	r12, r12
    138e:	c5 5f       	subi	r28, 0xF5	; 245
    1390:	de 4f       	sbci	r29, 0xFE	; 254
    1392:	88 81       	ld	r24, Y
    1394:	99 81       	ldd	r25, Y+1	; 0x01
    1396:	aa 81       	ldd	r26, Y+2	; 0x02
    1398:	bb 81       	ldd	r27, Y+3	; 0x03
    139a:	cb 50       	subi	r28, 0x0B	; 11
    139c:	d1 40       	sbci	r29, 0x01	; 1
    139e:	c8 0e       	add	r12, r24
    13a0:	d9 1e       	adc	r13, r25
    13a2:	ea 1e       	adc	r14, r26
    13a4:	fb 1e       	adc	r15, r27
		write_size = first_sector + SPIF_SECTOR_SIZE - page_addr;
		SPIF_read(page_addr, tmp, write_size);
    13a6:	8c 2c       	mov	r8, r12
    13a8:	81 94       	neg	r8
    13aa:	91 2c       	mov	r9, r1
    13ac:	a1 2c       	mov	r10, r1
    13ae:	b1 2c       	mov	r11, r1
    13b0:	95 01       	movw	r18, r10
    13b2:	84 01       	movw	r16, r8
    13b4:	ae 01       	movw	r20, r28
    13b6:	4f 5f       	subi	r20, 0xFF	; 255
    13b8:	5f 4f       	sbci	r21, 0xFF	; 255
    13ba:	c7 01       	movw	r24, r14
    13bc:	b6 01       	movw	r22, r12
    13be:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPIF_read>
		SPIF_uncheck_write( page_addr, tmp, write_size );
    13c2:	95 01       	movw	r18, r10
    13c4:	84 01       	movw	r16, r8
    13c6:	ae 01       	movw	r20, r28
    13c8:	4f 5f       	subi	r20, 0xFF	; 255
    13ca:	5f 4f       	sbci	r21, 0xFF	; 255
    13cc:	c7 01       	movw	r24, r14
    13ce:	b6 01       	movw	r22, r12
    13d0:	0e 94 a4 04 	call	0x948	; 0x948 <SPIF_uncheck_write>

	}

	/* Write data	from auxiliary sector */

	SPIF_4B_erase_sector(first_sector);
    13d4:	c9 5f       	subi	r28, 0xF9	; 249
    13d6:	de 4f       	sbci	r29, 0xFE	; 254
    13d8:	68 81       	ld	r22, Y
    13da:	79 81       	ldd	r23, Y+1	; 0x01
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	9b 81       	ldd	r25, Y+3	; 0x03
    13e0:	c7 50       	subi	r28, 0x07	; 7
    13e2:	d1 40       	sbci	r29, 0x01	; 1
    13e4:	0e 94 24 06 	call	0xc48	; 0xc48 <SPIF_4B_erase_sector>
    13e8:	c9 5f       	subi	r28, 0xF9	; 249
    13ea:	de 4f       	sbci	r29, 0xFE	; 254
    13ec:	88 80       	ld	r8, Y
    13ee:	99 80       	ldd	r9, Y+1	; 0x01
    13f0:	aa 80       	ldd	r10, Y+2	; 0x02
    13f2:	bb 80       	ldd	r11, Y+3	; 0x03
    13f4:	c7 50       	subi	r28, 0x07	; 7
    13f6:	d1 40       	sbci	r29, 0x01	; 1
    13f8:	c1 2c       	mov	r12, r1
    13fa:	00 ef       	ldi	r16, 0xF0	; 240
    13fc:	d0 2e       	mov	r13, r16
    13fe:	ee 24       	eor	r14, r14
    1400:	ea 94       	dec	r14
    1402:	03 e0       	ldi	r16, 0x03	; 3
    1404:	f0 2e       	mov	r15, r16
	for (uint32_t j = 0; j < (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE); j++)
	{
		page_addr = first_sector + (j * SPIF_PAGE_SIZE);
		SPIF_uncheck_read( (SPIF_VIRT_SIZE + (j * SPIF_PAGE_SIZE) ) , tmp, SPIF_PAGE_SIZE);
    1406:	00 e0       	ldi	r16, 0x00	; 0
    1408:	11 e0       	ldi	r17, 0x01	; 1
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	ae 01       	movw	r20, r28
    1410:	4f 5f       	subi	r20, 0xFF	; 255
    1412:	5f 4f       	sbci	r21, 0xFF	; 255
    1414:	c7 01       	movw	r24, r14
    1416:	b6 01       	movw	r22, r12
    1418:	0e 94 45 04 	call	0x88a	; 0x88a <SPIF_uncheck_read>
		SPIF_fast_write(page_addr, tmp, SPIF_PAGE_SIZE);
    141c:	00 e0       	ldi	r16, 0x00	; 0
    141e:	11 e0       	ldi	r17, 0x01	; 1
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	ae 01       	movw	r20, r28
    1426:	4f 5f       	subi	r20, 0xFF	; 255
    1428:	5f 4f       	sbci	r21, 0xFF	; 255
    142a:	c5 01       	movw	r24, r10
    142c:	b4 01       	movw	r22, r8
    142e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIF_fast_write>
    1432:	9f ef       	ldi	r25, 0xFF	; 255
    1434:	d9 1a       	sub	r13, r25
    1436:	e9 0a       	sbc	r14, r25
    1438:	f9 0a       	sbc	r15, r25
    143a:	af ef       	ldi	r26, 0xFF	; 255
    143c:	9a 1a       	sub	r9, r26
    143e:	aa 0a       	sbc	r10, r26
    1440:	ba 0a       	sbc	r11, r26
	}

	/* Write data	from auxiliary sector */

	SPIF_4B_erase_sector(first_sector);
	for (uint32_t j = 0; j < (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE); j++)
    1442:	c1 14       	cp	r12, r1
    1444:	d1 04       	cpc	r13, r1
    1446:	e1 04       	cpc	r14, r1
    1448:	b4 e0       	ldi	r27, 0x04	; 4
    144a:	fb 06       	cpc	r15, r27
    144c:	e1 f6       	brne	.-72     	; 0x1406 <SPIF_slow_write+0x4ba>
*/
SPIF_RET_t SPIF_slow_write(uint32_t address, uint8_t* buff, uint32_t size)
{
	uint32_t first_sector = address - (address % SPIF_SECTOR_SIZE);
	uint32_t last_sector = (address + size) - ( (address + size) % SPIF_SECTOR_SIZE);
	int32_t sector_count = (size / SPIF_SECTOR_SIZE) - 1;
    144e:	c9 5e       	subi	r28, 0xE9	; 233
    1450:	de 4f       	sbci	r29, 0xFE	; 254
    1452:	88 81       	ld	r24, Y
    1454:	99 81       	ldd	r25, Y+1	; 0x01
    1456:	aa 81       	ldd	r26, Y+2	; 0x02
    1458:	bb 81       	ldd	r27, Y+3	; 0x03
    145a:	c7 51       	subi	r28, 0x17	; 23
    145c:	d1 40       	sbci	r29, 0x01	; 1
    145e:	1c e0       	ldi	r17, 0x0C	; 12
    1460:	b6 95       	lsr	r27
    1462:	a7 95       	ror	r26
    1464:	97 95       	ror	r25
    1466:	87 95       	ror	r24
    1468:	1a 95       	dec	r17
    146a:	d1 f7       	brne	.-12     	; 0x1460 <SPIF_slow_write+0x514>
    146c:	9c 01       	movw	r18, r24
    146e:	ad 01       	movw	r20, r26
    1470:	21 50       	subi	r18, 0x01	; 1
    1472:	31 09       	sbc	r19, r1
    1474:	41 09       	sbc	r20, r1
    1476:	51 09       	sbc	r21, r1
    1478:	c1 5f       	subi	r28, 0xF1	; 241
    147a:	de 4f       	sbci	r29, 0xFE	; 254
    147c:	28 83       	st	Y, r18
    147e:	39 83       	std	Y+1, r19	; 0x01
    1480:	4a 83       	std	Y+2, r20	; 0x02
    1482:	5b 83       	std	Y+3, r21	; 0x03
    1484:	cf 50       	subi	r28, 0x0F	; 15
    1486:	d1 40       	sbci	r29, 0x01	; 1
    1488:	c9 5f       	subi	r28, 0xF9	; 249
    148a:	de 4f       	sbci	r29, 0xFE	; 254
    148c:	c8 80       	ld	r12, Y
    148e:	d9 80       	ldd	r13, Y+1	; 0x01
    1490:	ea 80       	ldd	r14, Y+2	; 0x02
    1492:	fb 80       	ldd	r15, Y+3	; 0x03
    1494:	c7 50       	subi	r28, 0x07	; 7
    1496:	d1 40       	sbci	r29, 0x01	; 1
    1498:	cd 5f       	subi	r28, 0xFD	; 253
    149a:	de 4f       	sbci	r29, 0xFE	; 254
    149c:	18 82       	st	Y, r1
    149e:	19 82       	std	Y+1, r1	; 0x01
    14a0:	1a 82       	std	Y+2, r1	; 0x02
    14a2:	1b 82       	std	Y+3, r1	; 0x03
    14a4:	c3 50       	subi	r28, 0x03	; 3
    14a6:	d1 40       	sbci	r29, 0x01	; 1
		SPIF_fast_write(page_addr, tmp, SPIF_PAGE_SIZE);
	}

	// Sectors in between should always contain new data

	for (int32_t i = 0; i < sector_count; i++)
    14a8:	cd 5f       	subi	r28, 0xFD	; 253
    14aa:	de 4f       	sbci	r29, 0xFE	; 254
    14ac:	88 81       	ld	r24, Y
    14ae:	99 81       	ldd	r25, Y+1	; 0x01
    14b0:	aa 81       	ldd	r26, Y+2	; 0x02
    14b2:	bb 81       	ldd	r27, Y+3	; 0x03
    14b4:	c3 50       	subi	r28, 0x03	; 3
    14b6:	d1 40       	sbci	r29, 0x01	; 1
    14b8:	c1 5f       	subi	r28, 0xF1	; 241
    14ba:	de 4f       	sbci	r29, 0xFE	; 254
    14bc:	28 81       	ld	r18, Y
    14be:	39 81       	ldd	r19, Y+1	; 0x01
    14c0:	4a 81       	ldd	r20, Y+2	; 0x02
    14c2:	5b 81       	ldd	r21, Y+3	; 0x03
    14c4:	cf 50       	subi	r28, 0x0F	; 15
    14c6:	d1 40       	sbci	r29, 0x01	; 1
    14c8:	82 17       	cp	r24, r18
    14ca:	93 07       	cpc	r25, r19
    14cc:	a4 07       	cpc	r26, r20
    14ce:	b5 07       	cpc	r27, r21
    14d0:	0c f0       	brlt	.+2      	; 0x14d4 <SPIF_slow_write+0x588>
    14d2:	7d c0       	rjmp	.+250    	; 0x15ce <SPIF_slow_write+0x682>
	{
		sector_addr = first_sector + ( i * SPIF_SECTOR_SIZE);

		SPIF_4B_erase_sector(SPIF_VIRT_SIZE);
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	70 ef       	ldi	r23, 0xF0	; 240
    14d8:	8f ef       	ldi	r24, 0xFF	; 255
    14da:	93 e0       	ldi	r25, 0x03	; 3
    14dc:	0e 94 24 06 	call	0xc48	; 0xc48 <SPIF_4B_erase_sector>
    14e0:	26 01       	movw	r4, r12
    14e2:	37 01       	movw	r6, r14
    14e4:	81 2c       	mov	r8, r1
    14e6:	b0 ef       	ldi	r27, 0xF0	; 240
    14e8:	9b 2e       	mov	r9, r27
    14ea:	aa 24       	eor	r10, r10
    14ec:	aa 94       	dec	r10
    14ee:	b3 e0       	ldi	r27, 0x03	; 3
    14f0:	bb 2e       	mov	r11, r27

		for (uint32_t j = 0; j < (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE); j++)
		{
			page_addr = sector_addr + (j * SPIF_PAGE_SIZE);
			SPIF_read(page_addr, tmp, SPIF_PAGE_SIZE);
    14f2:	00 e0       	ldi	r16, 0x00	; 0
    14f4:	11 e0       	ldi	r17, 0x01	; 1
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	ae 01       	movw	r20, r28
    14fc:	4f 5f       	subi	r20, 0xFF	; 255
    14fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1500:	c3 01       	movw	r24, r6
    1502:	b2 01       	movw	r22, r4
    1504:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPIF_read>
			SPIF_uncheck_write( ( SPIF_VIRT_SIZE + (j * SPIF_PAGE_SIZE) ), tmp, SPIF_PAGE_SIZE);
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	11 e0       	ldi	r17, 0x01	; 1
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	ae 01       	movw	r20, r28
    1512:	4f 5f       	subi	r20, 0xFF	; 255
    1514:	5f 4f       	sbci	r21, 0xFF	; 255
    1516:	c5 01       	movw	r24, r10
    1518:	b4 01       	movw	r22, r8
    151a:	0e 94 a4 04 	call	0x948	; 0x948 <SPIF_uncheck_write>
    151e:	3f ef       	ldi	r19, 0xFF	; 255
    1520:	53 1a       	sub	r5, r19
    1522:	63 0a       	sbc	r6, r19
    1524:	73 0a       	sbc	r7, r19
    1526:	4f ef       	ldi	r20, 0xFF	; 255
    1528:	94 1a       	sub	r9, r20
    152a:	a4 0a       	sbc	r10, r20
    152c:	b4 0a       	sbc	r11, r20
	{
		sector_addr = first_sector + ( i * SPIF_SECTOR_SIZE);

		SPIF_4B_erase_sector(SPIF_VIRT_SIZE);

		for (uint32_t j = 0; j < (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE); j++)
    152e:	81 14       	cp	r8, r1
    1530:	91 04       	cpc	r9, r1
    1532:	a1 04       	cpc	r10, r1
    1534:	54 e0       	ldi	r21, 0x04	; 4
    1536:	b5 06       	cpc	r11, r21
    1538:	e1 f6       	brne	.-72     	; 0x14f2 <SPIF_slow_write+0x5a6>
			page_addr = sector_addr + (j * SPIF_PAGE_SIZE);
			SPIF_read(page_addr, tmp, SPIF_PAGE_SIZE);
			SPIF_uncheck_write( ( SPIF_VIRT_SIZE + (j * SPIF_PAGE_SIZE) ), tmp, SPIF_PAGE_SIZE);
		}

		SPIF_4B_erase_sector(sector_addr);
    153a:	c7 01       	movw	r24, r14
    153c:	b6 01       	movw	r22, r12
    153e:	0e 94 24 06 	call	0xc48	; 0xc48 <SPIF_4B_erase_sector>
    1542:	26 01       	movw	r4, r12
    1544:	37 01       	movw	r6, r14
    1546:	81 2c       	mov	r8, r1
    1548:	a0 ef       	ldi	r26, 0xF0	; 240
    154a:	9a 2e       	mov	r9, r26
    154c:	aa 24       	eor	r10, r10
    154e:	aa 94       	dec	r10
    1550:	a3 e0       	ldi	r26, 0x03	; 3
    1552:	ba 2e       	mov	r11, r26

		for (uint32_t j = 0; j < (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE); j++)
		{
			page_addr = sector_addr + (j * SPIF_PAGE_SIZE);

			SPIF_uncheck_read( ( SPIF_VIRT_SIZE + (j * SPIF_PAGE_SIZE) ), tmp, SPIF_PAGE_SIZE);
    1554:	00 e0       	ldi	r16, 0x00	; 0
    1556:	11 e0       	ldi	r17, 0x01	; 1
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	ae 01       	movw	r20, r28
    155e:	4f 5f       	subi	r20, 0xFF	; 255
    1560:	5f 4f       	sbci	r21, 0xFF	; 255
    1562:	c5 01       	movw	r24, r10
    1564:	b4 01       	movw	r22, r8
    1566:	0e 94 45 04 	call	0x88a	; 0x88a <SPIF_uncheck_read>
			SPIF_fast_write(page_addr, tmp, SPIF_PAGE_SIZE);
    156a:	00 e0       	ldi	r16, 0x00	; 0
    156c:	11 e0       	ldi	r17, 0x01	; 1
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	ae 01       	movw	r20, r28
    1574:	4f 5f       	subi	r20, 0xFF	; 255
    1576:	5f 4f       	sbci	r21, 0xFF	; 255
    1578:	c3 01       	movw	r24, r6
    157a:	b2 01       	movw	r22, r4
    157c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIF_fast_write>
    1580:	8f ef       	ldi	r24, 0xFF	; 255
    1582:	98 1a       	sub	r9, r24
    1584:	a8 0a       	sbc	r10, r24
    1586:	b8 0a       	sbc	r11, r24
    1588:	9f ef       	ldi	r25, 0xFF	; 255
    158a:	59 1a       	sub	r5, r25
    158c:	69 0a       	sbc	r6, r25
    158e:	79 0a       	sbc	r7, r25
			SPIF_uncheck_write( ( SPIF_VIRT_SIZE + (j * SPIF_PAGE_SIZE) ), tmp, SPIF_PAGE_SIZE);
		}

		SPIF_4B_erase_sector(sector_addr);

		for (uint32_t j = 0; j < (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE); j++)
    1590:	81 14       	cp	r8, r1
    1592:	91 04       	cpc	r9, r1
    1594:	a1 04       	cpc	r10, r1
    1596:	a4 e0       	ldi	r26, 0x04	; 4
    1598:	ba 06       	cpc	r11, r26
    159a:	e1 f6       	brne	.-72     	; 0x1554 <SPIF_slow_write+0x608>
		SPIF_fast_write(page_addr, tmp, SPIF_PAGE_SIZE);
	}

	// Sectors in between should always contain new data

	for (int32_t i = 0; i < sector_count; i++)
    159c:	cd 5f       	subi	r28, 0xFD	; 253
    159e:	de 4f       	sbci	r29, 0xFE	; 254
    15a0:	28 81       	ld	r18, Y
    15a2:	39 81       	ldd	r19, Y+1	; 0x01
    15a4:	4a 81       	ldd	r20, Y+2	; 0x02
    15a6:	5b 81       	ldd	r21, Y+3	; 0x03
    15a8:	c3 50       	subi	r28, 0x03	; 3
    15aa:	d1 40       	sbci	r29, 0x01	; 1
    15ac:	2f 5f       	subi	r18, 0xFF	; 255
    15ae:	3f 4f       	sbci	r19, 0xFF	; 255
    15b0:	4f 4f       	sbci	r20, 0xFF	; 255
    15b2:	5f 4f       	sbci	r21, 0xFF	; 255
    15b4:	cd 5f       	subi	r28, 0xFD	; 253
    15b6:	de 4f       	sbci	r29, 0xFE	; 254
    15b8:	28 83       	st	Y, r18
    15ba:	39 83       	std	Y+1, r19	; 0x01
    15bc:	4a 83       	std	Y+2, r20	; 0x02
    15be:	5b 83       	std	Y+3, r21	; 0x03
    15c0:	c3 50       	subi	r28, 0x03	; 3
    15c2:	d1 40       	sbci	r29, 0x01	; 1
    15c4:	30 e1       	ldi	r19, 0x10	; 16
    15c6:	d3 0e       	add	r13, r19
    15c8:	e1 1c       	adc	r14, r1
    15ca:	f1 1c       	adc	r15, r1
    15cc:	6d cf       	rjmp	.-294    	; 0x14a8 <SPIF_slow_write+0x55c>
** Writes involved sectors to an auxiliary one even if it is not needed.
*/
SPIF_RET_t SPIF_slow_write(uint32_t address, uint8_t* buff, uint32_t size)
{
	uint32_t first_sector = address - (address % SPIF_SECTOR_SIZE);
	uint32_t last_sector = (address + size) - ( (address + size) % SPIF_SECTOR_SIZE);
    15ce:	c5 5f       	subi	r28, 0xF5	; 245
    15d0:	de 4f       	sbci	r29, 0xFE	; 254
    15d2:	88 81       	ld	r24, Y
    15d4:	99 81       	ldd	r25, Y+1	; 0x01
    15d6:	aa 81       	ldd	r26, Y+2	; 0x02
    15d8:	bb 81       	ldd	r27, Y+3	; 0x03
    15da:	cb 50       	subi	r28, 0x0B	; 11
    15dc:	d1 40       	sbci	r29, 0x01	; 1
    15de:	88 27       	eor	r24, r24
    15e0:	90 7f       	andi	r25, 0xF0	; 240
    15e2:	cd 5f       	subi	r28, 0xFD	; 253
    15e4:	de 4f       	sbci	r29, 0xFE	; 254
    15e6:	88 83       	st	Y, r24
    15e8:	99 83       	std	Y+1, r25	; 0x01
    15ea:	aa 83       	std	Y+2, r26	; 0x02
    15ec:	bb 83       	std	Y+3, r27	; 0x03
    15ee:	c3 50       	subi	r28, 0x03	; 3
    15f0:	d1 40       	sbci	r29, 0x01	; 1
		}

	}

	/* Last sector */
	if(last_sector && last_sector != first_sector){
    15f2:	89 2b       	or	r24, r25
    15f4:	8a 2b       	or	r24, r26
    15f6:	8b 2b       	or	r24, r27
    15f8:	11 f4       	brne	.+4      	; 0x15fe <SPIF_slow_write+0x6b2>
		}

	}


	return SPIF_OK;
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	81 c1       	rjmp	.+770    	; 0x1900 <SPIF_slow_write+0x9b4>
		}

	}

	/* Last sector */
	if(last_sector && last_sector != first_sector){
    15fe:	c9 5f       	subi	r28, 0xF9	; 249
    1600:	de 4f       	sbci	r29, 0xFE	; 254
    1602:	c8 80       	ld	r12, Y
    1604:	d9 80       	ldd	r13, Y+1	; 0x01
    1606:	ea 80       	ldd	r14, Y+2	; 0x02
    1608:	fb 80       	ldd	r15, Y+3	; 0x03
    160a:	c7 50       	subi	r28, 0x07	; 7
    160c:	d1 40       	sbci	r29, 0x01	; 1
    160e:	cd 5f       	subi	r28, 0xFD	; 253
    1610:	de 4f       	sbci	r29, 0xFE	; 254
    1612:	28 81       	ld	r18, Y
    1614:	39 81       	ldd	r19, Y+1	; 0x01
    1616:	4a 81       	ldd	r20, Y+2	; 0x02
    1618:	5b 81       	ldd	r21, Y+3	; 0x03
    161a:	c3 50       	subi	r28, 0x03	; 3
    161c:	d1 40       	sbci	r29, 0x01	; 1
    161e:	c2 16       	cp	r12, r18
    1620:	d3 06       	cpc	r13, r19
    1622:	e4 06       	cpc	r14, r20
    1624:	f5 06       	cpc	r15, r21
    1626:	49 f3       	breq	.-46     	; 0x15fa <SPIF_slow_write+0x6ae>

		SPIF_4B_erase_sector(SPIF_VIRT_SIZE);
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	70 ef       	ldi	r23, 0xF0	; 240
    162c:	8f ef       	ldi	r24, 0xFF	; 255
    162e:	93 e0       	ldi	r25, 0x03	; 3
    1630:	0e 94 24 06 	call	0xc48	; 0xc48 <SPIF_4B_erase_sector>

		page_count = (address + size - last_sector) / SPIF_PAGE_SIZE;
    1634:	c5 5f       	subi	r28, 0xF5	; 245
    1636:	de 4f       	sbci	r29, 0xFE	; 254
    1638:	c8 80       	ld	r12, Y
    163a:	d9 80       	ldd	r13, Y+1	; 0x01
    163c:	ea 80       	ldd	r14, Y+2	; 0x02
    163e:	fb 80       	ldd	r15, Y+3	; 0x03
    1640:	cb 50       	subi	r28, 0x0B	; 11
    1642:	d1 40       	sbci	r29, 0x01	; 1
    1644:	cd 5f       	subi	r28, 0xFD	; 253
    1646:	de 4f       	sbci	r29, 0xFE	; 254
    1648:	88 81       	ld	r24, Y
    164a:	99 81       	ldd	r25, Y+1	; 0x01
    164c:	aa 81       	ldd	r26, Y+2	; 0x02
    164e:	bb 81       	ldd	r27, Y+3	; 0x03
    1650:	c3 50       	subi	r28, 0x03	; 3
    1652:	d1 40       	sbci	r29, 0x01	; 1
    1654:	c8 1a       	sub	r12, r24
    1656:	d9 0a       	sbc	r13, r25
    1658:	ea 0a       	sbc	r14, r26
    165a:	fb 0a       	sbc	r15, r27
    165c:	55 27       	eor	r21, r21
    165e:	4f 2d       	mov	r20, r15
    1660:	3e 2d       	mov	r19, r14
    1662:	2d 2d       	mov	r18, r13
    1664:	c1 5f       	subi	r28, 0xF1	; 241
    1666:	de 4f       	sbci	r29, 0xFE	; 254
    1668:	28 83       	st	Y, r18
    166a:	39 83       	std	Y+1, r19	; 0x01
    166c:	4a 83       	std	Y+2, r20	; 0x02
    166e:	5b 83       	std	Y+3, r21	; 0x03
    1670:	cf 50       	subi	r28, 0x0F	; 15
    1672:	d1 40       	sbci	r29, 0x01	; 1
		remainder = (address + size - last_sector) - ( page_count * SPIF_PAGE_SIZE);
    1674:	cd 5e       	subi	r28, 0xED	; 237
    1676:	de 4f       	sbci	r29, 0xFE	; 254
    1678:	38 81       	ld	r19, Y
    167a:	c3 51       	subi	r28, 0x13	; 19
    167c:	d1 40       	sbci	r29, 0x01	; 1
    167e:	c9 5e       	subi	r28, 0xE9	; 233
    1680:	de 4f       	sbci	r29, 0xFE	; 254
    1682:	48 81       	ld	r20, Y
    1684:	c7 51       	subi	r28, 0x17	; 23
    1686:	d1 40       	sbci	r29, 0x01	; 1
    1688:	34 0f       	add	r19, r20
    168a:	c5 5e       	subi	r28, 0xE5	; 229
    168c:	de 4f       	sbci	r29, 0xFE	; 254
    168e:	38 83       	st	Y, r19
    1690:	cb 51       	subi	r28, 0x1B	; 27
    1692:	d1 40       	sbci	r29, 0x01	; 1
		buff_offset = size - (address + size - last_sector);
    1694:	c5 5f       	subi	r28, 0xF5	; 245
    1696:	de 4f       	sbci	r29, 0xFE	; 254
    1698:	28 81       	ld	r18, Y
    169a:	39 81       	ldd	r19, Y+1	; 0x01
    169c:	4a 81       	ldd	r20, Y+2	; 0x02
    169e:	5b 81       	ldd	r21, Y+3	; 0x03
    16a0:	cb 50       	subi	r28, 0x0B	; 11
    16a2:	d1 40       	sbci	r29, 0x01	; 1
    16a4:	82 1b       	sub	r24, r18
    16a6:	93 0b       	sbc	r25, r19
    16a8:	a4 0b       	sbc	r26, r20
    16aa:	b5 0b       	sbc	r27, r21
    16ac:	c9 5f       	subi	r28, 0xF9	; 249
    16ae:	de 4f       	sbci	r29, 0xFE	; 254
    16b0:	88 83       	st	Y, r24
    16b2:	99 83       	std	Y+1, r25	; 0x01
    16b4:	aa 83       	std	Y+2, r26	; 0x02
    16b6:	bb 83       	std	Y+3, r27	; 0x03
    16b8:	c7 50       	subi	r28, 0x07	; 7
    16ba:	d1 40       	sbci	r29, 0x01	; 1
    16bc:	c9 5e       	subi	r28, 0xE9	; 233
    16be:	de 4f       	sbci	r29, 0xFE	; 254
    16c0:	88 81       	ld	r24, Y
    16c2:	99 81       	ldd	r25, Y+1	; 0x01
    16c4:	aa 81       	ldd	r26, Y+2	; 0x02
    16c6:	bb 81       	ldd	r27, Y+3	; 0x03
    16c8:	c7 51       	subi	r28, 0x17	; 23
    16ca:	d1 40       	sbci	r29, 0x01	; 1
    16cc:	c9 5f       	subi	r28, 0xF9	; 249
    16ce:	de 4f       	sbci	r29, 0xFE	; 254
    16d0:	28 81       	ld	r18, Y
    16d2:	39 81       	ldd	r19, Y+1	; 0x01
    16d4:	4a 81       	ldd	r20, Y+2	; 0x02
    16d6:	5b 81       	ldd	r21, Y+3	; 0x03
    16d8:	c7 50       	subi	r28, 0x07	; 7
    16da:	d1 40       	sbci	r29, 0x01	; 1
    16dc:	82 0f       	add	r24, r18
    16de:	93 1f       	adc	r25, r19
    16e0:	a4 1f       	adc	r26, r20
    16e2:	b5 1f       	adc	r27, r21

		for (uint32_t j = 0; j < page_count; j++)
    16e4:	41 2c       	mov	r4, r1
    16e6:	f0 ef       	ldi	r31, 0xF0	; 240
    16e8:	5f 2e       	mov	r5, r31
    16ea:	66 24       	eor	r6, r6
    16ec:	6a 94       	dec	r6
    16ee:	f3 e0       	ldi	r31, 0x03	; 3
    16f0:	7f 2e       	mov	r7, r31
    16f2:	81 2c       	mov	r8, r1
    16f4:	91 2c       	mov	r9, r1
    16f6:	54 01       	movw	r10, r8
		{
			SPIF_uncheck_write( SPIF_VIRT_SIZE + (j * SPIF_PAGE_SIZE), buff + buff_offset, SPIF_PAGE_SIZE);
    16f8:	a1 01       	movw	r20, r2
    16fa:	48 0f       	add	r20, r24
    16fc:	59 1f       	adc	r21, r25
    16fe:	c1 5e       	subi	r28, 0xE1	; 225
    1700:	de 4f       	sbci	r29, 0xFE	; 254
    1702:	59 83       	std	Y+1, r21	; 0x01
    1704:	48 83       	st	Y, r20
    1706:	cf 51       	subi	r28, 0x1F	; 31
    1708:	d1 40       	sbci	r29, 0x01	; 1

		page_count = (address + size - last_sector) / SPIF_PAGE_SIZE;
		remainder = (address + size - last_sector) - ( page_count * SPIF_PAGE_SIZE);
		buff_offset = size - (address + size - last_sector);

		for (uint32_t j = 0; j < page_count; j++)
    170a:	c1 5f       	subi	r28, 0xF1	; 241
    170c:	de 4f       	sbci	r29, 0xFE	; 254
    170e:	28 81       	ld	r18, Y
    1710:	39 81       	ldd	r19, Y+1	; 0x01
    1712:	4a 81       	ldd	r20, Y+2	; 0x02
    1714:	5b 81       	ldd	r21, Y+3	; 0x03
    1716:	cf 50       	subi	r28, 0x0F	; 15
    1718:	d1 40       	sbci	r29, 0x01	; 1
    171a:	82 16       	cp	r8, r18
    171c:	93 06       	cpc	r9, r19
    171e:	a4 06       	cpc	r10, r20
    1720:	b5 06       	cpc	r11, r21
    1722:	c1 f0       	breq	.+48     	; 0x1754 <SPIF_slow_write+0x808>
		{
			SPIF_uncheck_write( SPIF_VIRT_SIZE + (j * SPIF_PAGE_SIZE), buff + buff_offset, SPIF_PAGE_SIZE);
    1724:	00 e0       	ldi	r16, 0x00	; 0
    1726:	11 e0       	ldi	r17, 0x01	; 1
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	c1 5e       	subi	r28, 0xE1	; 225
    172e:	de 4f       	sbci	r29, 0xFE	; 254
    1730:	48 81       	ld	r20, Y
    1732:	59 81       	ldd	r21, Y+1	; 0x01
    1734:	cf 51       	subi	r28, 0x1F	; 31
    1736:	d1 40       	sbci	r29, 0x01	; 1
    1738:	c3 01       	movw	r24, r6
    173a:	b2 01       	movw	r22, r4
    173c:	0e 94 a4 04 	call	0x948	; 0x948 <SPIF_uncheck_write>

		page_count = (address + size - last_sector) / SPIF_PAGE_SIZE;
		remainder = (address + size - last_sector) - ( page_count * SPIF_PAGE_SIZE);
		buff_offset = size - (address + size - last_sector);

		for (uint32_t j = 0; j < page_count; j++)
    1740:	5f ef       	ldi	r21, 0xFF	; 255
    1742:	85 1a       	sub	r8, r21
    1744:	95 0a       	sbc	r9, r21
    1746:	a5 0a       	sbc	r10, r21
    1748:	b5 0a       	sbc	r11, r21
    174a:	8f ef       	ldi	r24, 0xFF	; 255
    174c:	58 1a       	sub	r5, r24
    174e:	68 0a       	sbc	r6, r24
    1750:	78 0a       	sbc	r7, r24
    1752:	db cf       	rjmp	.-74     	; 0x170a <SPIF_slow_write+0x7be>
		{
			SPIF_uncheck_write( SPIF_VIRT_SIZE + (j * SPIF_PAGE_SIZE), buff + buff_offset, SPIF_PAGE_SIZE);
		}
		buff_offset = buff_offset + (page_count * SPIF_PAGE_SIZE);
		SPIF_uncheck_write( SPIF_VIRT_SIZE + (page_count * SPIF_PAGE_SIZE), buff + address + size - last_sector, remainder);
    1754:	c5 5e       	subi	r28, 0xE5	; 229
    1756:	de 4f       	sbci	r29, 0xFE	; 254
    1758:	48 81       	ld	r20, Y
    175a:	cb 51       	subi	r28, 0x1B	; 27
    175c:	d1 40       	sbci	r29, 0x01	; 1
    175e:	04 2f       	mov	r16, r20
    1760:	10 e0       	ldi	r17, 0x00	; 0
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	cd 5e       	subi	r28, 0xED	; 237
    1768:	de 4f       	sbci	r29, 0xFE	; 254
    176a:	68 81       	ld	r22, Y
    176c:	79 81       	ldd	r23, Y+1	; 0x01
    176e:	c3 51       	subi	r28, 0x13	; 19
    1770:	d1 40       	sbci	r29, 0x01	; 1
    1772:	c9 5e       	subi	r28, 0xE9	; 233
    1774:	de 4f       	sbci	r29, 0xFE	; 254
    1776:	88 81       	ld	r24, Y
    1778:	99 81       	ldd	r25, Y+1	; 0x01
    177a:	c7 51       	subi	r28, 0x17	; 23
    177c:	d1 40       	sbci	r29, 0x01	; 1
    177e:	68 0f       	add	r22, r24
    1780:	79 1f       	adc	r23, r25
    1782:	ab 01       	movw	r20, r22
    1784:	cd 5f       	subi	r28, 0xFD	; 253
    1786:	de 4f       	sbci	r29, 0xFE	; 254
    1788:	a8 81       	ld	r26, Y
    178a:	b9 81       	ldd	r27, Y+1	; 0x01
    178c:	c3 50       	subi	r28, 0x03	; 3
    178e:	d1 40       	sbci	r29, 0x01	; 1
    1790:	4a 1b       	sub	r20, r26
    1792:	5b 0b       	sbc	r21, r27
    1794:	42 0d       	add	r20, r2
    1796:	53 1d       	adc	r21, r3
    1798:	d5 01       	movw	r26, r10
    179a:	c4 01       	movw	r24, r8
    179c:	40 97       	sbiw	r24, 0x10	; 16
    179e:	ac 4f       	sbci	r26, 0xFC	; 252
    17a0:	bf 4f       	sbci	r27, 0xFF	; 255
    17a2:	66 27       	eor	r22, r22
    17a4:	78 2f       	mov	r23, r24
    17a6:	89 2f       	mov	r24, r25
    17a8:	9a 2f       	mov	r25, r26
    17aa:	0e 94 a4 04 	call	0x948	; 0x948 <SPIF_uncheck_write>
		// Save rest
		page_count = ( last_sector + SPIF_SECTOR_SIZE - (address + size) ) / SPIF_PAGE_SIZE;
    17ae:	c9 5f       	subi	r28, 0xF9	; 249
    17b0:	de 4f       	sbci	r29, 0xFE	; 254
    17b2:	88 80       	ld	r8, Y
    17b4:	99 80       	ldd	r9, Y+1	; 0x01
    17b6:	aa 80       	ldd	r10, Y+2	; 0x02
    17b8:	bb 80       	ldd	r11, Y+3	; 0x03
    17ba:	c7 50       	subi	r28, 0x07	; 7
    17bc:	d1 40       	sbci	r29, 0x01	; 1
    17be:	b0 e1       	ldi	r27, 0x10	; 16
    17c0:	9b 0e       	add	r9, r27
    17c2:	a1 1c       	adc	r10, r1
    17c4:	b1 1c       	adc	r11, r1
    17c6:	89 2c       	mov	r8, r9
    17c8:	9a 2c       	mov	r9, r10
    17ca:	ab 2c       	mov	r10, r11
    17cc:	bb 24       	eor	r11, r11
    17ce:	26 01       	movw	r4, r12
    17d0:	37 01       	movw	r6, r14
    17d2:	e0 e1       	ldi	r30, 0x10	; 16
    17d4:	5e 1a       	sub	r5, r30
    17d6:	61 08       	sbc	r6, r1
    17d8:	ec ef       	ldi	r30, 0xFC	; 252
    17da:	7e 0a       	sbc	r7, r30
		for (uint32_t j = 0; j < page_count; j++)
    17dc:	c1 2c       	mov	r12, r1
    17de:	d1 2c       	mov	r13, r1
    17e0:	76 01       	movw	r14, r12
    17e2:	c8 14       	cp	r12, r8
    17e4:	d9 04       	cpc	r13, r9
    17e6:	ea 04       	cpc	r14, r10
    17e8:	fb 04       	cpc	r15, r11
    17ea:	11 f1       	breq	.+68     	; 0x1830 <SPIF_slow_write+0x8e4>
		{
			page_addr = address + size + (j * SPIF_PAGE_SIZE);
			SPIF_read(4096+256, tmp, SPIF_PAGE_SIZE);
    17ec:	00 e0       	ldi	r16, 0x00	; 0
    17ee:	11 e0       	ldi	r17, 0x01	; 1
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	ae 01       	movw	r20, r28
    17f6:	4f 5f       	subi	r20, 0xFF	; 255
    17f8:	5f 4f       	sbci	r21, 0xFF	; 255
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	71 e1       	ldi	r23, 0x11	; 17
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPIF_read>
			SPIF_uncheck_write( ( SPIF_VIRT_SIZE + ( address + size - last_sector ) + (j * SPIF_PAGE_SIZE) ), tmp, SPIF_PAGE_SIZE);
    1806:	00 e0       	ldi	r16, 0x00	; 0
    1808:	11 e0       	ldi	r17, 0x01	; 1
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	ae 01       	movw	r20, r28
    1810:	4f 5f       	subi	r20, 0xFF	; 255
    1812:	5f 4f       	sbci	r21, 0xFF	; 255
    1814:	c3 01       	movw	r24, r6
    1816:	b2 01       	movw	r22, r4
    1818:	0e 94 a4 04 	call	0x948	; 0x948 <SPIF_uncheck_write>
		}
		buff_offset = buff_offset + (page_count * SPIF_PAGE_SIZE);
		SPIF_uncheck_write( SPIF_VIRT_SIZE + (page_count * SPIF_PAGE_SIZE), buff + address + size - last_sector, remainder);
		// Save rest
		page_count = ( last_sector + SPIF_SECTOR_SIZE - (address + size) ) / SPIF_PAGE_SIZE;
		for (uint32_t j = 0; j < page_count; j++)
    181c:	ff ef       	ldi	r31, 0xFF	; 255
    181e:	cf 1a       	sub	r12, r31
    1820:	df 0a       	sbc	r13, r31
    1822:	ef 0a       	sbc	r14, r31
    1824:	ff 0a       	sbc	r15, r31
    1826:	2f ef       	ldi	r18, 0xFF	; 255
    1828:	52 1a       	sub	r5, r18
    182a:	62 0a       	sbc	r6, r18
    182c:	72 0a       	sbc	r7, r18
    182e:	d9 cf       	rjmp	.-78     	; 0x17e2 <SPIF_slow_write+0x896>
			page_addr = address + size + (j * SPIF_PAGE_SIZE);
			SPIF_read(4096+256, tmp, SPIF_PAGE_SIZE);
			SPIF_uncheck_write( ( SPIF_VIRT_SIZE + ( address + size - last_sector ) + (j * SPIF_PAGE_SIZE) ), tmp, SPIF_PAGE_SIZE);
		}

		page_addr = address + size + (page_count * SPIF_PAGE_SIZE);
    1830:	fe 2c       	mov	r15, r14
    1832:	ed 2c       	mov	r14, r13
    1834:	dc 2c       	mov	r13, r12
    1836:	cc 24       	eor	r12, r12
    1838:	c5 5f       	subi	r28, 0xF5	; 245
    183a:	de 4f       	sbci	r29, 0xFE	; 254
    183c:	88 81       	ld	r24, Y
    183e:	99 81       	ldd	r25, Y+1	; 0x01
    1840:	aa 81       	ldd	r26, Y+2	; 0x02
    1842:	bb 81       	ldd	r27, Y+3	; 0x03
    1844:	cb 50       	subi	r28, 0x0B	; 11
    1846:	d1 40       	sbci	r29, 0x01	; 1
    1848:	c8 0e       	add	r12, r24
    184a:	d9 1e       	adc	r13, r25
    184c:	ea 1e       	adc	r14, r26
    184e:	fb 1e       	adc	r15, r27
		write_size = last_sector + SPIF_SECTOR_SIZE - page_addr;
		SPIF_read(page_addr, tmp, write_size);
    1850:	8c 2c       	mov	r8, r12
    1852:	81 94       	neg	r8
    1854:	91 2c       	mov	r9, r1
    1856:	a1 2c       	mov	r10, r1
    1858:	b1 2c       	mov	r11, r1
    185a:	95 01       	movw	r18, r10
    185c:	84 01       	movw	r16, r8
    185e:	ae 01       	movw	r20, r28
    1860:	4f 5f       	subi	r20, 0xFF	; 255
    1862:	5f 4f       	sbci	r21, 0xFF	; 255
    1864:	c7 01       	movw	r24, r14
    1866:	b6 01       	movw	r22, r12
    1868:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPIF_read>
		SPIF_uncheck_write( page_addr, tmp, write_size );
    186c:	95 01       	movw	r18, r10
    186e:	84 01       	movw	r16, r8
    1870:	ae 01       	movw	r20, r28
    1872:	4f 5f       	subi	r20, 0xFF	; 255
    1874:	5f 4f       	sbci	r21, 0xFF	; 255
    1876:	c7 01       	movw	r24, r14
    1878:	b6 01       	movw	r22, r12
    187a:	0e 94 a4 04 	call	0x948	; 0x948 <SPIF_uncheck_write>

		SPIF_4B_erase_sector(last_sector);
    187e:	cd 5f       	subi	r28, 0xFD	; 253
    1880:	de 4f       	sbci	r29, 0xFE	; 254
    1882:	68 81       	ld	r22, Y
    1884:	79 81       	ldd	r23, Y+1	; 0x01
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	9b 81       	ldd	r25, Y+3	; 0x03
    188a:	c3 50       	subi	r28, 0x03	; 3
    188c:	d1 40       	sbci	r29, 0x01	; 1
    188e:	0e 94 24 06 	call	0xc48	; 0xc48 <SPIF_4B_erase_sector>
    1892:	cd 5f       	subi	r28, 0xFD	; 253
    1894:	de 4f       	sbci	r29, 0xFE	; 254
    1896:	c8 80       	ld	r12, Y
    1898:	d9 80       	ldd	r13, Y+1	; 0x01
    189a:	ea 80       	ldd	r14, Y+2	; 0x02
    189c:	fb 80       	ldd	r15, Y+3	; 0x03
    189e:	c3 50       	subi	r28, 0x03	; 3
    18a0:	d1 40       	sbci	r29, 0x01	; 1
    18a2:	81 2c       	mov	r8, r1
    18a4:	90 ef       	ldi	r25, 0xF0	; 240
    18a6:	99 2e       	mov	r9, r25
    18a8:	aa 24       	eor	r10, r10
    18aa:	aa 94       	dec	r10
    18ac:	93 e0       	ldi	r25, 0x03	; 3
    18ae:	b9 2e       	mov	r11, r25

		for (uint32_t j = 0; j < (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE); j++)
		{
			page_addr = last_sector + (j * SPIF_PAGE_SIZE);

			SPIF_uncheck_read( ( SPIF_VIRT_SIZE + (j * SPIF_PAGE_SIZE) ), tmp, SPIF_PAGE_SIZE);
    18b0:	00 e0       	ldi	r16, 0x00	; 0
    18b2:	11 e0       	ldi	r17, 0x01	; 1
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	ae 01       	movw	r20, r28
    18ba:	4f 5f       	subi	r20, 0xFF	; 255
    18bc:	5f 4f       	sbci	r21, 0xFF	; 255
    18be:	c5 01       	movw	r24, r10
    18c0:	b4 01       	movw	r22, r8
    18c2:	0e 94 45 04 	call	0x88a	; 0x88a <SPIF_uncheck_read>
			SPIF_fast_write(page_addr, tmp, SPIF_PAGE_SIZE);
    18c6:	00 e0       	ldi	r16, 0x00	; 0
    18c8:	11 e0       	ldi	r17, 0x01	; 1
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	ae 01       	movw	r20, r28
    18d0:	4f 5f       	subi	r20, 0xFF	; 255
    18d2:	5f 4f       	sbci	r21, 0xFF	; 255
    18d4:	c7 01       	movw	r24, r14
    18d6:	b6 01       	movw	r22, r12
    18d8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <SPIF_fast_write>
    18dc:	9f ef       	ldi	r25, 0xFF	; 255
    18de:	99 1a       	sub	r9, r25
    18e0:	a9 0a       	sbc	r10, r25
    18e2:	b9 0a       	sbc	r11, r25
    18e4:	af ef       	ldi	r26, 0xFF	; 255
    18e6:	da 1a       	sub	r13, r26
    18e8:	ea 0a       	sbc	r14, r26
    18ea:	fa 0a       	sbc	r15, r26
		SPIF_read(page_addr, tmp, write_size);
		SPIF_uncheck_write( page_addr, tmp, write_size );

		SPIF_4B_erase_sector(last_sector);

		for (uint32_t j = 0; j < (SPIF_SECTOR_SIZE / SPIF_PAGE_SIZE); j++)
    18ec:	81 14       	cp	r8, r1
    18ee:	91 04       	cpc	r9, r1
    18f0:	a1 04       	cpc	r10, r1
    18f2:	b4 e0       	ldi	r27, 0x04	; 4
    18f4:	bb 06       	cpc	r11, r27
    18f6:	e1 f6       	brne	.-72     	; 0x18b0 <SPIF_slow_write+0x964>
    18f8:	80 ce       	rjmp	.-768    	; 0x15fa <SPIF_slow_write+0x6ae>
	uint8_t write_size = 0;
	int32_t buff_offset = 0;
	uint8_t remainder = 0;
	uint8_t tmp[SPIF_PAGE_SIZE] = { 0 };

	if (address > SPIF_SIZE ) return SPIF_ERR_MEM_ADDR_OUTOF_RANGE;
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	01 c0       	rjmp	.+2      	; 0x1900 <SPIF_slow_write+0x9b4>
	if (address + size > SPIF_SIZE ) return SPIF_ERR_SIZE_OUTOF_RANGE;
    18fe:	82 e0       	ldi	r24, 0x02	; 2

	}


	return SPIF_OK;
    1900:	c0 5e       	subi	r28, 0xE0	; 224
    1902:	de 4f       	sbci	r29, 0xFE	; 254
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	ff 90       	pop	r15
    1918:	ef 90       	pop	r14
    191a:	df 90       	pop	r13
    191c:	cf 90       	pop	r12
    191e:	bf 90       	pop	r11
    1920:	af 90       	pop	r10
    1922:	9f 90       	pop	r9
    1924:	8f 90       	pop	r8
    1926:	7f 90       	pop	r7
    1928:	6f 90       	pop	r6
    192a:	5f 90       	pop	r5
    192c:	4f 90       	pop	r4
    192e:	3f 90       	pop	r3
    1930:	2f 90       	pop	r2
    1932:	08 95       	ret

00001934 <SPIF_force_write>:
** Checks if the data to write is compatible with already stored information,
** otherwise it writes data to an auxiliary sector and overwrites the whole
** sector.
*/
SPIF_RET_t SPIF_force_write(uint32_t address, uint8_t* buff, uint32_t size)
{
    1934:	8f 92       	push	r8
    1936:	9f 92       	push	r9
    1938:	af 92       	push	r10
    193a:	bf 92       	push	r11
    193c:	cf 92       	push	r12
    193e:	df 92       	push	r13
    1940:	ef 92       	push	r14
    1942:	ff 92       	push	r15
    1944:	0f 93       	push	r16
    1946:	1f 93       	push	r17
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	6b 01       	movw	r12, r22
    194e:	7c 01       	movw	r14, r24
    1950:	ea 01       	movw	r28, r20
    1952:	48 01       	movw	r8, r16
    1954:	59 01       	movw	r10, r18
	/*
	** Write instruction can only write 0s so we need to read the involved
	** sectors, which is the smallest unit we can erase. Afterwards we
	** write the previously stored data updated with the new one.
	*/
	SPIF_RET_t ret = SPIF_write(address, buff, size);
    1956:	0e 94 a9 06 	call	0xd52	; 0xd52 <SPIF_write>
	if (ret == SPIF_ERR_INCOMPATIBLE_WRITE)
    195a:	84 30       	cpi	r24, 0x04	; 4
    195c:	39 f4       	brne	.+14     	; 0x196c <SPIF_force_write+0x38>
	{
		return SPIF_slow_write(address, buff, size);
    195e:	95 01       	movw	r18, r10
    1960:	84 01       	movw	r16, r8
    1962:	ae 01       	movw	r20, r28
    1964:	c7 01       	movw	r24, r14
    1966:	b6 01       	movw	r22, r12
    1968:	0e 94 a6 07 	call	0xf4c	; 0xf4c <SPIF_slow_write>
	}

	return ret;
}
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	ff 90       	pop	r15
    1976:	ef 90       	pop	r14
    1978:	df 90       	pop	r13
    197a:	cf 90       	pop	r12
    197c:	bf 90       	pop	r11
    197e:	af 90       	pop	r10
    1980:	9f 90       	pop	r9
    1982:	8f 90       	pop	r8
    1984:	08 95       	ret

00001986 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1986:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1988:	91 8d       	ldd	r25, Z+25	; 0x19
    198a:	22 8d       	ldd	r18, Z+26	; 0x1a
    198c:	89 2f       	mov	r24, r25
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	80 5c       	subi	r24, 0xC0	; 192
    1992:	9f 4f       	sbci	r25, 0xFF	; 255
    1994:	82 1b       	sub	r24, r18
    1996:	91 09       	sbc	r25, r1
}
    1998:	8f 73       	andi	r24, 0x3F	; 63
    199a:	99 27       	eor	r25, r25
    199c:	08 95       	ret

0000199e <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    199e:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    19a0:	91 8d       	ldd	r25, Z+25	; 0x19
    19a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    19a4:	98 17       	cp	r25, r24
    19a6:	31 f0       	breq	.+12     	; 0x19b4 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    19a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    19aa:	e8 0f       	add	r30, r24
    19ac:	f1 1d       	adc	r31, r1
    19ae:	85 8d       	ldd	r24, Z+29	; 0x1d
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    19b4:	8f ef       	ldi	r24, 0xFF	; 255
    19b6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    19b8:	08 95       	ret

000019ba <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    19ba:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    19bc:	91 8d       	ldd	r25, Z+25	; 0x19
    19be:	82 8d       	ldd	r24, Z+26	; 0x1a
    19c0:	98 17       	cp	r25, r24
    19c2:	61 f0       	breq	.+24     	; 0x19dc <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    19c4:	82 8d       	ldd	r24, Z+26	; 0x1a
    19c6:	df 01       	movw	r26, r30
    19c8:	a8 0f       	add	r26, r24
    19ca:	b1 1d       	adc	r27, r1
    19cc:	5d 96       	adiw	r26, 0x1d	; 29
    19ce:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    19d0:	92 8d       	ldd	r25, Z+26	; 0x1a
    19d2:	9f 5f       	subi	r25, 0xFF	; 255
    19d4:	9f 73       	andi	r25, 0x3F	; 63
    19d6:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    19dc:	8f ef       	ldi	r24, 0xFF	; 255
    19de:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    19e0:	08 95       	ret

000019e2 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    19e2:	fc 01       	movw	r30, r24
    19e4:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    19e6:	44 8d       	ldd	r20, Z+28	; 0x1c
    19e8:	25 2f       	mov	r18, r21
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	84 2f       	mov	r24, r20
    19ee:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    19f0:	82 1b       	sub	r24, r18
    19f2:	93 0b       	sbc	r25, r19
    19f4:	54 17       	cp	r21, r20
    19f6:	10 f0       	brcs	.+4      	; 0x19fc <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    19f8:	cf 96       	adiw	r24, 0x3f	; 63
    19fa:	08 95       	ret
  return tail - head - 1;
    19fc:	01 97       	sbiw	r24, 0x01	; 1
}
    19fe:	08 95       	ret

00001a00 <_Z14serialEventRunv>:
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    1a00:	8a e5       	ldi	r24, 0x5A	; 90
    1a02:	9e e0       	ldi	r25, 0x0E	; 14
    1a04:	89 2b       	or	r24, r25
    1a06:	49 f0       	breq	.+18     	; 0x1a1a <_Z14serialEventRunv+0x1a>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	89 2b       	or	r24, r25
    1a0e:	29 f0       	breq	.+10     	; 0x1a1a <_Z14serialEventRunv+0x1a>
    1a10:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <_Z17Serial1_availablev>
    1a14:	81 11       	cpse	r24, r1
    1a16:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    1a1a:	08 95       	ret

00001a1c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1a1c:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1a1e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a20:	df 01       	movw	r26, r30
    1a22:	a8 0f       	add	r26, r24
    1a24:	b1 1d       	adc	r27, r1
    1a26:	a3 5a       	subi	r26, 0xA3	; 163
    1a28:	bf 4f       	sbci	r27, 0xFF	; 255
    1a2a:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1a2c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	8f 73       	andi	r24, 0x3F	; 63
    1a34:	99 27       	eor	r25, r25
    1a36:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    1a38:	a6 89       	ldd	r26, Z+22	; 0x16
    1a3a:	b7 89       	ldd	r27, Z+23	; 0x17
    1a3c:	2c 93       	st	X, r18
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
    1a3e:	a0 89       	ldd	r26, Z+16	; 0x10
    1a40:	b1 89       	ldd	r27, Z+17	; 0x11
    1a42:	8c 91       	ld	r24, X
    1a44:	82 74       	andi	r24, 0x42	; 66
    1a46:	8c 93       	st	X, r24
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1a48:	93 8d       	ldd	r25, Z+27	; 0x1b
    1a4a:	84 8d       	ldd	r24, Z+28	; 0x1c
    1a4c:	98 13       	cpse	r25, r24
    1a4e:	06 c0       	rjmp	.+12     	; 0x1a5c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1a50:	02 88       	ldd	r0, Z+18	; 0x12
    1a52:	f3 89       	ldd	r31, Z+19	; 0x13
    1a54:	e0 2d       	mov	r30, r0
    1a56:	80 81       	ld	r24, Z
    1a58:	8f 7d       	andi	r24, 0xDF	; 223
    1a5a:	80 83       	st	Z, r24
    1a5c:	08 95       	ret

00001a5e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1a5e:	ef 92       	push	r14
    1a60:	ff 92       	push	r15
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	ec 01       	movw	r28, r24
  _written = true;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1a70:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a72:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a74:	98 13       	cpse	r25, r24
    1a76:	05 c0       	rjmp	.+10     	; 0x1a82 <_ZN14HardwareSerial5writeEh+0x24>
    1a78:	e8 89       	ldd	r30, Y+16	; 0x10
    1a7a:	f9 89       	ldd	r31, Y+17	; 0x11
    1a7c:	80 81       	ld	r24, Z
    1a7e:	85 fd       	sbrc	r24, 5
    1a80:	26 c0       	rjmp	.+76     	; 0x1ace <_ZN14HardwareSerial5writeEh+0x70>
    1a82:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1a84:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a86:	10 e0       	ldi	r17, 0x00	; 0
    1a88:	0f 5f       	subi	r16, 0xFF	; 255
    1a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8c:	0f 73       	andi	r16, 0x3F	; 63
    1a8e:	11 27       	eor	r17, r17
    1a90:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1a92:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a94:	e8 12       	cpse	r14, r24
    1a96:	0c c0       	rjmp	.+24     	; 0x1ab0 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	07 fc       	sbrc	r0, 7
    1a9c:	fa cf       	rjmp	.-12     	; 0x1a92 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1a9e:	e8 89       	ldd	r30, Y+16	; 0x10
    1aa0:	f9 89       	ldd	r31, Y+17	; 0x11
    1aa2:	80 81       	ld	r24, Z
    1aa4:	85 ff       	sbrs	r24, 5
    1aa6:	f5 cf       	rjmp	.-22     	; 0x1a92 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1aae:	f1 cf       	rjmp	.-30     	; 0x1a92 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1ab0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e8 0f       	add	r30, r24
    1ab6:	f1 1d       	adc	r31, r1
    1ab8:	e3 5a       	subi	r30, 0xA3	; 163
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1abe:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ac0:	f8 94       	cli
    _tx_buffer_head = i;
    1ac2:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1ac4:	ea 89       	ldd	r30, Y+18	; 0x12
    1ac6:	fb 89       	ldd	r31, Y+19	; 0x13
    1ac8:	80 81       	ld	r24, Z
    1aca:	80 62       	ori	r24, 0x20	; 32
    1acc:	09 c0       	rjmp	.+18     	; 0x1ae0 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1ace:	9f b7       	in	r25, 0x3f	; 63
    1ad0:	f8 94       	cli
      *_udr = c;
    1ad2:	ee 89       	ldd	r30, Y+22	; 0x16
    1ad4:	ff 89       	ldd	r31, Y+23	; 0x17
    1ad6:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
    1ad8:	e8 89       	ldd	r30, Y+16	; 0x10
    1ada:	f9 89       	ldd	r31, Y+17	; 0x11
    1adc:	80 81       	ld	r24, Z
    1ade:	82 74       	andi	r24, 0x42	; 66
    1ae0:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ae2:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	ff 90       	pop	r15
    1af2:	ef 90       	pop	r14
    1af4:	08 95       	ret

00001af6 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1afc:	88 8d       	ldd	r24, Y+24	; 0x18
    1afe:	88 23       	and	r24, r24
    1b00:	c9 f0       	breq	.+50     	; 0x1b34 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1b02:	ea 89       	ldd	r30, Y+18	; 0x12
    1b04:	fb 89       	ldd	r31, Y+19	; 0x13
    1b06:	80 81       	ld	r24, Z
    1b08:	85 fd       	sbrc	r24, 5
    1b0a:	05 c0       	rjmp	.+10     	; 0x1b16 <_ZN14HardwareSerial5flushEv+0x20>
    1b0c:	a8 89       	ldd	r26, Y+16	; 0x10
    1b0e:	b9 89       	ldd	r27, Y+17	; 0x11
    1b10:	8c 91       	ld	r24, X
    1b12:	86 fd       	sbrc	r24, 6
    1b14:	0f c0       	rjmp	.+30     	; 0x1b34 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	07 fc       	sbrc	r0, 7
    1b1a:	f5 cf       	rjmp	.-22     	; 0x1b06 <_ZN14HardwareSerial5flushEv+0x10>
    1b1c:	80 81       	ld	r24, Z
    1b1e:	85 ff       	sbrs	r24, 5
    1b20:	f2 cf       	rjmp	.-28     	; 0x1b06 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1b22:	a8 89       	ldd	r26, Y+16	; 0x10
    1b24:	b9 89       	ldd	r27, Y+17	; 0x11
    1b26:	8c 91       	ld	r24, X
    1b28:	85 ff       	sbrs	r24, 5
    1b2a:	ed cf       	rjmp	.-38     	; 0x1b06 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1b32:	e7 cf       	rjmp	.-50     	; 0x1b02 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1b34:	df 91       	pop	r29
    1b36:	cf 91       	pop	r28
    1b38:	08 95       	ret

00001b3a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1b3a:	cf 92       	push	r12
    1b3c:	df 92       	push	r13
    1b3e:	ef 92       	push	r14
    1b40:	ff 92       	push	r15
    1b42:	1f 93       	push	r17
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	ec 01       	movw	r28, r24
    1b4a:	6a 01       	movw	r12, r20
    1b4c:	7b 01       	movw	r14, r22
    1b4e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1b50:	e8 89       	ldd	r30, Y+16	; 0x10
    1b52:	f9 89       	ldd	r31, Y+17	; 0x11
    1b54:	82 e0       	ldi	r24, 0x02	; 2
    1b56:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1b58:	41 15       	cp	r20, r1
    1b5a:	51 4e       	sbci	r21, 0xE1	; 225
    1b5c:	61 05       	cpc	r22, r1
    1b5e:	71 05       	cpc	r23, r1
    1b60:	b1 f0       	breq	.+44     	; 0x1b8e <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1b62:	60 e0       	ldi	r22, 0x00	; 0
    1b64:	79 e0       	ldi	r23, 0x09	; 9
    1b66:	8d e3       	ldi	r24, 0x3D	; 61
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	a7 01       	movw	r20, r14
    1b6c:	96 01       	movw	r18, r12
    1b6e:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__udivmodsi4>
    1b72:	da 01       	movw	r26, r20
    1b74:	c9 01       	movw	r24, r18
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	a1 09       	sbc	r26, r1
    1b7a:	b1 09       	sbc	r27, r1
    1b7c:	b6 95       	lsr	r27
    1b7e:	a7 95       	ror	r26
    1b80:	97 95       	ror	r25
    1b82:	87 95       	ror	r24
    1b84:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1b86:	21 15       	cp	r18, r1
    1b88:	80 e1       	ldi	r24, 0x10	; 16
    1b8a:	38 07       	cpc	r19, r24
    1b8c:	a8 f0       	brcs	.+42     	; 0x1bb8 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1b8e:	e8 89       	ldd	r30, Y+16	; 0x10
    1b90:	f9 89       	ldd	r31, Y+17	; 0x11
    1b92:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1b94:	60 e8       	ldi	r22, 0x80	; 128
    1b96:	74 e8       	ldi	r23, 0x84	; 132
    1b98:	8e e1       	ldi	r24, 0x1E	; 30
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	a7 01       	movw	r20, r14
    1b9e:	96 01       	movw	r18, r12
    1ba0:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <__udivmodsi4>
    1ba4:	da 01       	movw	r26, r20
    1ba6:	c9 01       	movw	r24, r18
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	a1 09       	sbc	r26, r1
    1bac:	b1 09       	sbc	r27, r1
    1bae:	b6 95       	lsr	r27
    1bb0:	a7 95       	ror	r26
    1bb2:	97 95       	ror	r25
    1bb4:	87 95       	ror	r24
    1bb6:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1bb8:	ec 85       	ldd	r30, Y+12	; 0x0c
    1bba:	fd 85       	ldd	r31, Y+13	; 0x0d
    1bbc:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1bbe:	ee 85       	ldd	r30, Y+14	; 0x0e
    1bc0:	ff 85       	ldd	r31, Y+15	; 0x0f
    1bc2:	20 83       	st	Z, r18

  _written = false;
    1bc4:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1bc6:	ec 89       	ldd	r30, Y+20	; 0x14
    1bc8:	fd 89       	ldd	r31, Y+21	; 0x15
    1bca:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1bcc:	ea 89       	ldd	r30, Y+18	; 0x12
    1bce:	fb 89       	ldd	r31, Y+19	; 0x13
    1bd0:	80 81       	ld	r24, Z
    1bd2:	80 61       	ori	r24, 0x10	; 16
    1bd4:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1bd6:	ea 89       	ldd	r30, Y+18	; 0x12
    1bd8:	fb 89       	ldd	r31, Y+19	; 0x13
    1bda:	80 81       	ld	r24, Z
    1bdc:	88 60       	ori	r24, 0x08	; 8
    1bde:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1be0:	ea 89       	ldd	r30, Y+18	; 0x12
    1be2:	fb 89       	ldd	r31, Y+19	; 0x13
    1be4:	80 81       	ld	r24, Z
    1be6:	80 68       	ori	r24, 0x80	; 128
    1be8:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1bea:	ea 89       	ldd	r30, Y+18	; 0x12
    1bec:	fb 89       	ldd	r31, Y+19	; 0x13
    1bee:	80 81       	ld	r24, Z
    1bf0:	8f 7d       	andi	r24, 0xDF	; 223
    1bf2:	80 83       	st	Z, r24
}
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	1f 91       	pop	r17
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	08 95       	ret

00001c04 <__vector_25>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1c04:	1f 92       	push	r1
    1c06:	0f 92       	push	r0
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	0f 92       	push	r0
    1c0c:	11 24       	eor	r1, r1
    1c0e:	2f 93       	push	r18
    1c10:	8f 93       	push	r24
    1c12:	9f 93       	push	r25
    1c14:	ef 93       	push	r30
    1c16:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1c18:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <__data_end+0x10>
    1c1c:	f0 91 27 03 	lds	r31, 0x0327	; 0x800327 <__data_end+0x11>
    1c20:	80 81       	ld	r24, Z
    1c22:	e0 91 2c 03 	lds	r30, 0x032C	; 0x80032c <__data_end+0x16>
    1c26:	f0 91 2d 03 	lds	r31, 0x032D	; 0x80032d <__data_end+0x17>
    1c2a:	82 fd       	sbrc	r24, 2
    1c2c:	12 c0       	rjmp	.+36     	; 0x1c52 <__vector_25+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1c2e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1c30:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <__data_end+0x19>
    1c34:	8f 5f       	subi	r24, 0xFF	; 255
    1c36:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1c38:	20 91 30 03 	lds	r18, 0x0330	; 0x800330 <__data_end+0x1a>
    1c3c:	82 17       	cp	r24, r18
    1c3e:	51 f0       	breq	.+20     	; 0x1c54 <__vector_25+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    1c40:	e0 91 2f 03 	lds	r30, 0x032F	; 0x80032f <__data_end+0x19>
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	ea 5e       	subi	r30, 0xEA	; 234
    1c48:	fc 4f       	sbci	r31, 0xFC	; 252
    1c4a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1c4c:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <__data_end+0x19>
    1c50:	01 c0       	rjmp	.+2      	; 0x1c54 <__vector_25+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1c52:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    1c54:	ff 91       	pop	r31
    1c56:	ef 91       	pop	r30
    1c58:	9f 91       	pop	r25
    1c5a:	8f 91       	pop	r24
    1c5c:	2f 91       	pop	r18
    1c5e:	0f 90       	pop	r0
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	0f 90       	pop	r0
    1c64:	1f 90       	pop	r1
    1c66:	18 95       	reti

00001c68 <__vector_26>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1c68:	1f 92       	push	r1
    1c6a:	0f 92       	push	r0
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	0f 92       	push	r0
    1c70:	11 24       	eor	r1, r1
    1c72:	2f 93       	push	r18
    1c74:	3f 93       	push	r19
    1c76:	4f 93       	push	r20
    1c78:	5f 93       	push	r21
    1c7a:	6f 93       	push	r22
    1c7c:	7f 93       	push	r23
    1c7e:	8f 93       	push	r24
    1c80:	9f 93       	push	r25
    1c82:	af 93       	push	r26
    1c84:	bf 93       	push	r27
    1c86:	ef 93       	push	r30
    1c88:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    1c8a:	86 e1       	ldi	r24, 0x16	; 22
    1c8c:	93 e0       	ldi	r25, 0x03	; 3
    1c8e:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1c92:	ff 91       	pop	r31
    1c94:	ef 91       	pop	r30
    1c96:	bf 91       	pop	r27
    1c98:	af 91       	pop	r26
    1c9a:	9f 91       	pop	r25
    1c9c:	8f 91       	pop	r24
    1c9e:	7f 91       	pop	r23
    1ca0:	6f 91       	pop	r22
    1ca2:	5f 91       	pop	r21
    1ca4:	4f 91       	pop	r20
    1ca6:	3f 91       	pop	r19
    1ca8:	2f 91       	pop	r18
    1caa:	0f 90       	pop	r0
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	0f 90       	pop	r0
    1cb0:	1f 90       	pop	r1
    1cb2:	18 95       	reti

00001cb4 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    1cb4:	86 e1       	ldi	r24, 0x16	; 22
    1cb6:	93 e0       	ldi	r25, 0x03	; 3
    1cb8:	0e 94 c3 0c 	call	0x1986	; 0x1986 <_ZN14HardwareSerial9availableEv>
    1cbc:	21 e0       	ldi	r18, 0x01	; 1
    1cbe:	89 2b       	or	r24, r25
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <_Z17Serial1_availablev+0x10>
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
}
    1cc4:	82 2f       	mov	r24, r18
    1cc6:	08 95       	ret

00001cc8 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1cc8:	e6 e1       	ldi	r30, 0x16	; 22
    1cca:	f3 e0       	ldi	r31, 0x03	; 3
    1ccc:	13 82       	std	Z+3, r1	; 0x03
    1cce:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1cd0:	88 ee       	ldi	r24, 0xE8	; 232
    1cd2:	93 e0       	ldi	r25, 0x03	; 3
    1cd4:	a0 e0       	ldi	r26, 0x00	; 0
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	84 83       	std	Z+4, r24	; 0x04
    1cda:	95 83       	std	Z+5, r25	; 0x05
    1cdc:	a6 83       	std	Z+6, r26	; 0x06
    1cde:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1ce0:	86 ee       	ldi	r24, 0xE6	; 230
    1ce2:	92 e0       	ldi	r25, 0x02	; 2
    1ce4:	91 83       	std	Z+1, r25	; 0x01
    1ce6:	80 83       	st	Z, r24
    1ce8:	8d ec       	ldi	r24, 0xCD	; 205
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	95 87       	std	Z+13, r25	; 0x0d
    1cee:	84 87       	std	Z+12, r24	; 0x0c
    1cf0:	8c ec       	ldi	r24, 0xCC	; 204
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	97 87       	std	Z+15, r25	; 0x0f
    1cf6:	86 87       	std	Z+14, r24	; 0x0e
    1cf8:	88 ec       	ldi	r24, 0xC8	; 200
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	91 8b       	std	Z+17, r25	; 0x11
    1cfe:	80 8b       	std	Z+16, r24	; 0x10
    1d00:	89 ec       	ldi	r24, 0xC9	; 201
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	93 8b       	std	Z+19, r25	; 0x13
    1d06:	82 8b       	std	Z+18, r24	; 0x12
    1d08:	8a ec       	ldi	r24, 0xCA	; 202
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	95 8b       	std	Z+21, r25	; 0x15
    1d0e:	84 8b       	std	Z+20, r24	; 0x14
    1d10:	8e ec       	ldi	r24, 0xCE	; 206
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	97 8b       	std	Z+23, r25	; 0x17
    1d16:	86 8b       	std	Z+22, r24	; 0x16
    1d18:	11 8e       	std	Z+25, r1	; 0x19
    1d1a:	12 8e       	std	Z+26, r1	; 0x1a
    1d1c:	13 8e       	std	Z+27, r1	; 0x1b
    1d1e:	14 8e       	std	Z+28, r1	; 0x1c
    1d20:	08 95       	ret

00001d22 <initVariant>:
    1d22:	08 95       	ret

00001d24 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1d24:	0e 94 de 13 	call	0x27bc	; 0x27bc <init>

	initVariant();
    1d28:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    1d2c:	83 eb       	ldi	r24, 0xB3	; 179
    1d2e:	93 e0       	ldi	r25, 0x03	; 3
    1d30:	0e 94 20 13 	call	0x2640	; 0x2640 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    1d34:	0e 94 fe 03 	call	0x7fc	; 0x7fc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1d38:	c0 e0       	ldi	r28, 0x00	; 0
    1d3a:	dd e0       	ldi	r29, 0x0D	; 13
#endif
	
	setup();
    
	for (;;) {
		loop();
    1d3c:	0e 94 0f 04 	call	0x81e	; 0x81e <loop>
		if (serialEventRun) serialEventRun();
    1d40:	20 97       	sbiw	r28, 0x00	; 0
    1d42:	e1 f3       	breq	.-8      	; 0x1d3c <main+0x18>
    1d44:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <_Z14serialEventRunv>
    1d48:	f9 cf       	rjmp	.-14     	; 0x1d3c <main+0x18>

00001d4a <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    1d4a:	cf 92       	push	r12
    1d4c:	df 92       	push	r13
    1d4e:	ef 92       	push	r14
    1d50:	ff 92       	push	r15
    1d52:	0f 93       	push	r16
    1d54:	1f 93       	push	r17
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	6c 01       	movw	r12, r24
    1d5c:	7a 01       	movw	r14, r20
    1d5e:	8b 01       	movw	r16, r22
    1d60:	c0 e0       	ldi	r28, 0x00	; 0
    1d62:	d0 e0       	ldi	r29, 0x00	; 0
    1d64:	ce 15       	cp	r28, r14
    1d66:	df 05       	cpc	r29, r15
    1d68:	81 f0       	breq	.+32     	; 0x1d8a <_ZN5Print5writeEPKhj+0x40>
    1d6a:	d8 01       	movw	r26, r16
    1d6c:	6d 91       	ld	r22, X+
    1d6e:	8d 01       	movw	r16, r26
    1d70:	d6 01       	movw	r26, r12
    1d72:	ed 91       	ld	r30, X+
    1d74:	fc 91       	ld	r31, X
    1d76:	01 90       	ld	r0, Z+
    1d78:	f0 81       	ld	r31, Z
    1d7a:	e0 2d       	mov	r30, r0
    1d7c:	c6 01       	movw	r24, r12
    1d7e:	09 95       	icall
    1d80:	89 2b       	or	r24, r25
    1d82:	11 f0       	breq	.+4      	; 0x1d88 <_ZN5Print5writeEPKhj+0x3e>
    1d84:	21 96       	adiw	r28, 0x01	; 1
    1d86:	ee cf       	rjmp	.-36     	; 0x1d64 <_ZN5Print5writeEPKhj+0x1a>
    1d88:	7e 01       	movw	r14, r28
    1d8a:	c7 01       	movw	r24, r14
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	1f 91       	pop	r17
    1d92:	0f 91       	pop	r16
    1d94:	ff 90       	pop	r15
    1d96:	ef 90       	pop	r14
    1d98:	df 90       	pop	r13
    1d9a:	cf 90       	pop	r12
    1d9c:	08 95       	ret

00001d9e <_ZN5Print5writeEPKc>:
    1d9e:	61 15       	cp	r22, r1
    1da0:	71 05       	cpc	r23, r1
    1da2:	79 f0       	breq	.+30     	; 0x1dc2 <_ZN5Print5writeEPKc+0x24>
    1da4:	fb 01       	movw	r30, r22
    1da6:	01 90       	ld	r0, Z+
    1da8:	00 20       	and	r0, r0
    1daa:	e9 f7       	brne	.-6      	; 0x1da6 <_ZN5Print5writeEPKc+0x8>
    1dac:	31 97       	sbiw	r30, 0x01	; 1
    1dae:	af 01       	movw	r20, r30
    1db0:	46 1b       	sub	r20, r22
    1db2:	57 0b       	sbc	r21, r23
    1db4:	dc 01       	movw	r26, r24
    1db6:	ed 91       	ld	r30, X+
    1db8:	fc 91       	ld	r31, X
    1dba:	02 80       	ldd	r0, Z+2	; 0x02
    1dbc:	f3 81       	ldd	r31, Z+3	; 0x03
    1dbe:	e0 2d       	mov	r30, r0
    1dc0:	09 94       	ijmp
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	08 95       	ret

00001dc8 <_ZN5Print7printlnEv>:
    1dc8:	64 ef       	ldi	r22, 0xF4	; 244
    1dca:	72 e0       	ldi	r23, 0x02	; 2
    1dcc:	0c 94 cf 0e 	jmp	0x1d9e	; 0x1d9e <_ZN5Print5writeEPKc>

00001dd0 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    1dd0:	0f 93       	push	r16
    1dd2:	1f 93       	push	r17
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1dda:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN5Print5writeEPKc>
    1dde:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1de0:	ce 01       	movw	r24, r28
    1de2:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <_ZN5Print7printlnEv>
  return n;
}
    1de6:	80 0f       	add	r24, r16
    1de8:	91 1f       	adc	r25, r17
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	08 95       	ret

00001df4 <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
    1df4:	61 50       	subi	r22, 0x01	; 1
    1df6:	30 f0       	brcs	.+12     	; 0x1e04 <_ZL4RecvPVhh+0x10>
    1df8:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	20 83       	st	Z, r18
    1e00:	01 96       	adiw	r24, 0x01	; 1
    1e02:	f8 cf       	rjmp	.-16     	; 0x1df4 <_ZL4RecvPVhh>
    1e04:	28 98       	cbi	0x05, 0	; 5
    1e06:	84 e6       	ldi	r24, 0x64	; 100
    1e08:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <RxLEDPulse>
    1e0c:	08 95       	ret

00001e0e <_ZL11SendControlh>:
    1e0e:	40 91 b6 03 	lds	r20, 0x03B6	; 0x8003b6 <_ZL6_cmark>
    1e12:	50 91 b7 03 	lds	r21, 0x03B7	; 0x8003b7 <_ZL6_cmark+0x1>
    1e16:	20 91 b4 03 	lds	r18, 0x03B4	; 0x8003b4 <_ZL5_cend>
    1e1a:	30 91 b5 03 	lds	r19, 0x03B5	; 0x8003b5 <_ZL5_cend+0x1>
    1e1e:	42 17       	cp	r20, r18
    1e20:	53 07       	cpc	r21, r19
    1e22:	b4 f4       	brge	.+44     	; 0x1e50 <_ZL11SendControlh+0x42>
    1e24:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1e28:	95 70       	andi	r25, 0x05	; 5
    1e2a:	e1 f3       	breq	.-8      	; 0x1e24 <_ZL11SendControlh+0x16>
    1e2c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1e30:	92 fd       	sbrc	r25, 2
    1e32:	19 c0       	rjmp	.+50     	; 0x1e66 <_ZL11SendControlh+0x58>
    1e34:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1e38:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <_ZL6_cmark>
    1e3c:	90 91 b7 03 	lds	r25, 0x03B7	; 0x8003b7 <_ZL6_cmark+0x1>
    1e40:	01 96       	adiw	r24, 0x01	; 1
    1e42:	8f 73       	andi	r24, 0x3F	; 63
    1e44:	99 27       	eor	r25, r25
    1e46:	89 2b       	or	r24, r25
    1e48:	19 f4       	brne	.+6      	; 0x1e50 <_ZL11SendControlh+0x42>
    1e4a:	8e ef       	ldi	r24, 0xFE	; 254
    1e4c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1e50:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <_ZL6_cmark>
    1e54:	90 91 b7 03 	lds	r25, 0x03B7	; 0x8003b7 <_ZL6_cmark+0x1>
    1e58:	01 96       	adiw	r24, 0x01	; 1
    1e5a:	90 93 b7 03 	sts	0x03B7, r25	; 0x8003b7 <_ZL6_cmark+0x1>
    1e5e:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <_ZL6_cmark>
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	08 95       	ret
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	08 95       	ret

00001e6a <_ZL24USB_SendStringDescriptorPKhhh>:
    1e6a:	df 92       	push	r13
    1e6c:	ef 92       	push	r14
    1e6e:	ff 92       	push	r15
    1e70:	0f 93       	push	r16
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	d8 2e       	mov	r13, r24
    1e7a:	f9 2e       	mov	r15, r25
    1e7c:	e4 2e       	mov	r14, r20
    1e7e:	06 2f       	mov	r16, r22
    1e80:	10 e0       	ldi	r17, 0x00	; 0
    1e82:	c8 01       	movw	r24, r16
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	88 0f       	add	r24, r24
    1e88:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZL11SendControlh>
    1e8c:	83 e0       	ldi	r24, 0x03	; 3
    1e8e:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZL11SendControlh>
    1e92:	cd 2d       	mov	r28, r13
    1e94:	df 2d       	mov	r29, r15
    1e96:	0c 0f       	add	r16, r28
    1e98:	1d 1f       	adc	r17, r29
    1e9a:	c0 17       	cp	r28, r16
    1e9c:	d1 07       	cpc	r29, r17
    1e9e:	89 f0       	breq	.+34     	; 0x1ec2 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    1ea0:	e7 fe       	sbrs	r14, 7
    1ea2:	03 c0       	rjmp	.+6      	; 0x1eaa <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	84 91       	lpm	r24, Z
    1ea8:	01 c0       	rjmp	.+2      	; 0x1eac <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    1eaa:	88 81       	ld	r24, Y
    1eac:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZL11SendControlh>
    1eb0:	f8 2e       	mov	r15, r24
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZL11SendControlh>
    1eb8:	8f 21       	and	r24, r15
    1eba:	21 96       	adiw	r28, 0x01	; 1
    1ebc:	81 11       	cpse	r24, r1
    1ebe:	ed cf       	rjmp	.-38     	; 0x1e9a <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    1ec0:	01 c0       	rjmp	.+2      	; 0x1ec4 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	1f 91       	pop	r17
    1eca:	0f 91       	pop	r16
    1ecc:	ff 90       	pop	r15
    1ece:	ef 90       	pop	r14
    1ed0:	df 90       	pop	r13
    1ed2:	08 95       	ret

00001ed4 <_ZL15USB_ClockEnablev>:
    1ed4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
    1ed8:	81 60       	ori	r24, 0x01	; 1
    1eda:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
    1ede:	80 ea       	ldi	r24, 0xA0	; 160
    1ee0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    1ee4:	89 b5       	in	r24, 0x29	; 41
    1ee6:	80 61       	ori	r24, 0x10	; 16
    1ee8:	89 bd       	out	0x29, r24	; 41
    1eea:	89 b5       	in	r24, 0x29	; 41
    1eec:	82 60       	ori	r24, 0x02	; 2
    1eee:	89 bd       	out	0x29, r24	; 41
    1ef0:	09 b4       	in	r0, 0x29	; 41
    1ef2:	00 fe       	sbrs	r0, 0
    1ef4:	fd cf       	rjmp	.-6      	; 0x1ef0 <_ZL15USB_ClockEnablev+0x1c>
    1ef6:	61 e0       	ldi	r22, 0x01	; 1
    1ef8:	70 e0       	ldi	r23, 0x00	; 0
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	0e 94 a2 13 	call	0x2744	; 0x2744 <delay>
    1f02:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    1f06:	8f 7c       	andi	r24, 0xCF	; 207
    1f08:	80 61       	ori	r24, 0x10	; 16
    1f0a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    1f0e:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    1f12:	80 7f       	andi	r24, 0xF0	; 240
    1f14:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    1f18:	08 95       	ret

00001f1a <_ZL14SendInterfacesv>:
    1f1a:	cf 93       	push	r28
    1f1c:	df 93       	push	r29
    1f1e:	1f 92       	push	r1
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	19 82       	std	Y+1, r1	; 0x01
    1f26:	ce 01       	movw	r24, r28
    1f28:	01 96       	adiw	r24, 0x01	; 1
    1f2a:	0e 94 a0 14 	call	0x2940	; 0x2940 <_Z16CDC_GetInterfacePh>
    1f2e:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <_Z12PluggableUSBv>
    1f32:	be 01       	movw	r22, r28
    1f34:	6f 5f       	subi	r22, 0xFF	; 255
    1f36:	7f 4f       	sbci	r23, 0xFF	; 255
    1f38:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <_ZN13PluggableUSB_12getInterfaceEPh>
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	0f 90       	pop	r0
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	08 95       	ret

00001f46 <_ZN6LockEPC1Eh>:
    1f46:	2f b7       	in	r18, 0x3f	; 63
    1f48:	fc 01       	movw	r30, r24
    1f4a:	20 83       	st	Z, r18
    1f4c:	f8 94       	cli
    1f4e:	67 70       	andi	r22, 0x07	; 7
    1f50:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1f54:	08 95       	ret

00001f56 <_Z13USB_Availableh>:
    1f56:	cf 93       	push	r28
    1f58:	df 93       	push	r29
    1f5a:	1f 92       	push	r1
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	68 2f       	mov	r22, r24
    1f62:	ce 01       	movw	r24, r28
    1f64:	01 96       	adiw	r24, 0x01	; 1
    1f66:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN6LockEPC1Eh>
    1f6a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1f6e:	99 81       	ldd	r25, Y+1	; 0x01
    1f70:	9f bf       	out	0x3f, r25	; 63
    1f72:	0f 90       	pop	r0
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	08 95       	ret

00001f7a <_Z8USB_RecvhPvi>:
    1f7a:	ef 92       	push	r14
    1f7c:	ff 92       	push	r15
    1f7e:	0f 93       	push	r16
    1f80:	1f 93       	push	r17
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	1f 92       	push	r1
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <_usbConfiguration>
    1f90:	99 23       	and	r25, r25
    1f92:	11 f0       	breq	.+4      	; 0x1f98 <_Z8USB_RecvhPvi+0x1e>
    1f94:	57 ff       	sbrs	r21, 7
    1f96:	03 c0       	rjmp	.+6      	; 0x1f9e <_Z8USB_RecvhPvi+0x24>
    1f98:	8f ef       	ldi	r24, 0xFF	; 255
    1f9a:	9f ef       	ldi	r25, 0xFF	; 255
    1f9c:	29 c0       	rjmp	.+82     	; 0x1ff0 <_Z8USB_RecvhPvi+0x76>
    1f9e:	8a 01       	movw	r16, r20
    1fa0:	7b 01       	movw	r14, r22
    1fa2:	68 2f       	mov	r22, r24
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	01 96       	adiw	r24, 0x01	; 1
    1fa8:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN6LockEPC1Eh>
    1fac:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	02 17       	cp	r16, r18
    1fb4:	13 07       	cpc	r17, r19
    1fb6:	0c f4       	brge	.+2      	; 0x1fba <_Z8USB_RecvhPvi+0x40>
    1fb8:	98 01       	movw	r18, r16
    1fba:	82 2f       	mov	r24, r18
    1fbc:	f7 01       	movw	r30, r14
    1fbe:	94 e6       	ldi	r25, 0x64	; 100
    1fc0:	81 50       	subi	r24, 0x01	; 1
    1fc2:	38 f0       	brcs	.+14     	; 0x1fd2 <_Z8USB_RecvhPvi+0x58>
    1fc4:	28 98       	cbi	0x05, 0	; 5
    1fc6:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <RxLEDPulse>
    1fca:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1fce:	41 93       	st	Z+, r20
    1fd0:	f7 cf       	rjmp	.-18     	; 0x1fc0 <_Z8USB_RecvhPvi+0x46>
    1fd2:	21 15       	cp	r18, r1
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	21 f0       	breq	.+8      	; 0x1fe0 <_Z8USB_RecvhPvi+0x66>
    1fd8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1fdc:	88 23       	and	r24, r24
    1fde:	21 f0       	breq	.+8      	; 0x1fe8 <_Z8USB_RecvhPvi+0x6e>
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	8f bf       	out	0x3f, r24	; 63
    1fe4:	c9 01       	movw	r24, r18
    1fe6:	04 c0       	rjmp	.+8      	; 0x1ff0 <_Z8USB_RecvhPvi+0x76>
    1fe8:	8b e6       	ldi	r24, 0x6B	; 107
    1fea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1fee:	f8 cf       	rjmp	.-16     	; 0x1fe0 <_Z8USB_RecvhPvi+0x66>
    1ff0:	0f 90       	pop	r0
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	1f 91       	pop	r17
    1ff8:	0f 91       	pop	r16
    1ffa:	ff 90       	pop	r15
    1ffc:	ef 90       	pop	r14
    1ffe:	08 95       	ret

00002000 <_Z8USB_Recvh>:
    2000:	cf 93       	push	r28
    2002:	df 93       	push	r29
    2004:	1f 92       	push	r1
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	41 e0       	ldi	r20, 0x01	; 1
    200c:	50 e0       	ldi	r21, 0x00	; 0
    200e:	be 01       	movw	r22, r28
    2010:	6f 5f       	subi	r22, 0xFF	; 255
    2012:	7f 4f       	sbci	r23, 0xFF	; 255
    2014:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <_Z8USB_RecvhPvi>
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	19 f4       	brne	.+6      	; 0x2022 <_Z8USB_Recvh+0x22>
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <_Z8USB_Recvh+0x26>
    2022:	8f ef       	ldi	r24, 0xFF	; 255
    2024:	9f ef       	ldi	r25, 0xFF	; 255
    2026:	0f 90       	pop	r0
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	08 95       	ret

0000202e <_Z13USB_SendSpaceh>:
    202e:	cf 93       	push	r28
    2030:	df 93       	push	r29
    2032:	1f 92       	push	r1
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	68 2f       	mov	r22, r24
    203a:	ce 01       	movw	r24, r28
    203c:	01 96       	adiw	r24, 0x01	; 1
    203e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN6LockEPC1Eh>
    2042:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    2046:	89 2f       	mov	r24, r25
    2048:	80 72       	andi	r24, 0x20	; 32
    204a:	95 ff       	sbrs	r25, 5
    204c:	04 c0       	rjmp	.+8      	; 0x2056 <_Z13USB_SendSpaceh+0x28>
    204e:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    2052:	80 e4       	ldi	r24, 0x40	; 64
    2054:	89 1b       	sub	r24, r25
    2056:	99 81       	ldd	r25, Y+1	; 0x01
    2058:	9f bf       	out	0x3f, r25	; 63
    205a:	0f 90       	pop	r0
    205c:	df 91       	pop	r29
    205e:	cf 91       	pop	r28
    2060:	08 95       	ret

00002062 <_Z8USB_SendhPKvi>:
    2062:	5f 92       	push	r5
    2064:	6f 92       	push	r6
    2066:	7f 92       	push	r7
    2068:	8f 92       	push	r8
    206a:	9f 92       	push	r9
    206c:	af 92       	push	r10
    206e:	bf 92       	push	r11
    2070:	cf 92       	push	r12
    2072:	df 92       	push	r13
    2074:	ef 92       	push	r14
    2076:	ff 92       	push	r15
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	cf 93       	push	r28
    207e:	df 93       	push	r29
    2080:	1f 92       	push	r1
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	98 2e       	mov	r9, r24
    2088:	6b 01       	movw	r12, r22
    208a:	b4 2e       	mov	r11, r20
    208c:	05 2f       	mov	r16, r21
    208e:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <_usbConfiguration>
    2092:	81 11       	cpse	r24, r1
    2094:	03 c0       	rjmp	.+6      	; 0x209c <_Z8USB_SendhPKvi+0x3a>
    2096:	8f ef       	ldi	r24, 0xFF	; 255
    2098:	9f ef       	ldi	r25, 0xFF	; 255
    209a:	77 c0       	rjmp	.+238    	; 0x218a <_Z8USB_SendhPKvi+0x128>
    209c:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <_usbSuspendState>
    20a0:	80 ff       	sbrs	r24, 0
    20a2:	05 c0       	rjmp	.+10     	; 0x20ae <_Z8USB_SendhPKvi+0x4c>
    20a4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    20a8:	82 60       	ori	r24, 0x02	; 2
    20aa:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    20ae:	eb 2c       	mov	r14, r11
    20b0:	f0 2e       	mov	r15, r16
    20b2:	a1 2c       	mov	r10, r1
    20b4:	8a ef       	ldi	r24, 0xFA	; 250
    20b6:	88 2e       	mov	r8, r24
    20b8:	89 2d       	mov	r24, r9
    20ba:	80 72       	andi	r24, 0x20	; 32
    20bc:	68 2e       	mov	r6, r24
    20be:	89 2d       	mov	r24, r9
    20c0:	80 74       	andi	r24, 0x40	; 64
    20c2:	58 2e       	mov	r5, r24
    20c4:	9a e3       	ldi	r25, 0x3A	; 58
    20c6:	79 2e       	mov	r7, r25
    20c8:	e1 14       	cp	r14, r1
    20ca:	f1 04       	cpc	r15, r1
    20cc:	19 f4       	brne	.+6      	; 0x20d4 <_Z8USB_SendhPKvi+0x72>
    20ce:	aa 20       	and	r10, r10
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <_Z8USB_SendhPKvi+0x72>
    20d2:	55 c0       	rjmp	.+170    	; 0x217e <_Z8USB_SendhPKvi+0x11c>
    20d4:	89 2d       	mov	r24, r9
    20d6:	0e 94 17 10 	call	0x202e	; 0x202e <_Z13USB_SendSpaceh>
    20da:	18 2f       	mov	r17, r24
    20dc:	81 11       	cpse	r24, r1
    20de:	0a c0       	rjmp	.+20     	; 0x20f4 <_Z8USB_SendhPKvi+0x92>
    20e0:	8a 94       	dec	r8
    20e2:	88 20       	and	r8, r8
    20e4:	c1 f2       	breq	.-80     	; 0x2096 <_Z8USB_SendhPKvi+0x34>
    20e6:	61 e0       	ldi	r22, 0x01	; 1
    20e8:	70 e0       	ldi	r23, 0x00	; 0
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	0e 94 a2 13 	call	0x2744	; 0x2744 <delay>
    20f2:	ea cf       	rjmp	.-44     	; 0x20c8 <_Z8USB_SendhPKvi+0x66>
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	e8 16       	cp	r14, r24
    20f8:	f9 06       	cpc	r15, r25
    20fa:	0c f4       	brge	.+2      	; 0x20fe <_Z8USB_SendhPKvi+0x9c>
    20fc:	1e 2d       	mov	r17, r14
    20fe:	69 2d       	mov	r22, r9
    2100:	ce 01       	movw	r24, r28
    2102:	01 96       	adiw	r24, 0x01	; 1
    2104:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN6LockEPC1Eh>
    2108:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    210c:	85 ff       	sbrs	r24, 5
    210e:	34 c0       	rjmp	.+104    	; 0x2178 <_Z8USB_SendhPKvi+0x116>
    2110:	81 2f       	mov	r24, r17
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	e8 1a       	sub	r14, r24
    2116:	f9 0a       	sbc	r15, r25
    2118:	66 20       	and	r6, r6
    211a:	29 f0       	breq	.+10     	; 0x2126 <_Z8USB_SendhPKvi+0xc4>
    211c:	11 50       	subi	r17, 0x01	; 1
    211e:	a0 f0       	brcs	.+40     	; 0x2148 <_Z8USB_SendhPKvi+0xe6>
    2120:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    2124:	fb cf       	rjmp	.-10     	; 0x211c <_Z8USB_SendhPKvi+0xba>
    2126:	f6 01       	movw	r30, r12
    2128:	97 fe       	sbrs	r9, 7
    212a:	0a c0       	rjmp	.+20     	; 0x2140 <_Z8USB_SendhPKvi+0xde>
    212c:	11 50       	subi	r17, 0x01	; 1
    212e:	50 f0       	brcs	.+20     	; 0x2144 <_Z8USB_SendhPKvi+0xe2>
    2130:	24 91       	lpm	r18, Z
    2132:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    2136:	31 96       	adiw	r30, 0x01	; 1
    2138:	f9 cf       	rjmp	.-14     	; 0x212c <_Z8USB_SendhPKvi+0xca>
    213a:	21 91       	ld	r18, Z+
    213c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    2140:	11 50       	subi	r17, 0x01	; 1
    2142:	d8 f7       	brcc	.-10     	; 0x213a <_Z8USB_SendhPKvi+0xd8>
    2144:	c8 0e       	add	r12, r24
    2146:	d9 1e       	adc	r13, r25
    2148:	aa 20       	and	r10, r10
    214a:	19 f0       	breq	.+6      	; 0x2152 <_Z8USB_SendhPKvi+0xf0>
    214c:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    2150:	0b c0       	rjmp	.+22     	; 0x2168 <_Z8USB_SendhPKvi+0x106>
    2152:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    2156:	85 fd       	sbrc	r24, 5
    2158:	09 c0       	rjmp	.+18     	; 0x216c <_Z8USB_SendhPKvi+0x10a>
    215a:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    215e:	aa 24       	eor	r10, r10
    2160:	a3 94       	inc	r10
    2162:	e1 14       	cp	r14, r1
    2164:	f1 04       	cpc	r15, r1
    2166:	41 f0       	breq	.+16     	; 0x2178 <_Z8USB_SendhPKvi+0x116>
    2168:	a1 2c       	mov	r10, r1
    216a:	06 c0       	rjmp	.+12     	; 0x2178 <_Z8USB_SendhPKvi+0x116>
    216c:	e1 14       	cp	r14, r1
    216e:	f1 04       	cpc	r15, r1
    2170:	19 f4       	brne	.+6      	; 0x2178 <_Z8USB_SendhPKvi+0x116>
    2172:	51 10       	cpse	r5, r1
    2174:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	8f bf       	out	0x3f, r24	; 63
    217c:	a5 cf       	rjmp	.-182    	; 0x20c8 <_Z8USB_SendhPKvi+0x66>
    217e:	5d 98       	cbi	0x0b, 5	; 11
    2180:	84 e6       	ldi	r24, 0x64	; 100
    2182:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <TxLEDPulse>
    2186:	8b 2d       	mov	r24, r11
    2188:	90 2f       	mov	r25, r16
    218a:	0f 90       	pop	r0
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	ff 90       	pop	r15
    2196:	ef 90       	pop	r14
    2198:	df 90       	pop	r13
    219a:	cf 90       	pop	r12
    219c:	bf 90       	pop	r11
    219e:	af 90       	pop	r10
    21a0:	9f 90       	pop	r9
    21a2:	8f 90       	pop	r8
    21a4:	7f 90       	pop	r7
    21a6:	6f 90       	pop	r6
    21a8:	5f 90       	pop	r5
    21aa:	08 95       	ret

000021ac <_Z11InitControli>:
    21ac:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    21b0:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <_ZL6_cmark+0x1>
    21b4:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <_ZL6_cmark>
    21b8:	90 93 b5 03 	sts	0x03B5, r25	; 0x8003b5 <_ZL5_cend+0x1>
    21bc:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <_ZL5_cend>
    21c0:	08 95       	ret

000021c2 <_Z15USB_SendControlhPKvi>:
    21c2:	df 92       	push	r13
    21c4:	ef 92       	push	r14
    21c6:	ff 92       	push	r15
    21c8:	0f 93       	push	r16
    21ca:	1f 93       	push	r17
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	d8 2e       	mov	r13, r24
    21d2:	8a 01       	movw	r16, r20
    21d4:	7b 01       	movw	r14, r22
    21d6:	e4 0e       	add	r14, r20
    21d8:	f5 1e       	adc	r15, r21
    21da:	eb 01       	movw	r28, r22
    21dc:	ce 15       	cp	r28, r14
    21de:	df 05       	cpc	r29, r15
    21e0:	71 f0       	breq	.+28     	; 0x21fe <_Z15USB_SendControlhPKvi+0x3c>
    21e2:	d7 fe       	sbrs	r13, 7
    21e4:	03 c0       	rjmp	.+6      	; 0x21ec <_Z15USB_SendControlhPKvi+0x2a>
    21e6:	fe 01       	movw	r30, r28
    21e8:	84 91       	lpm	r24, Z
    21ea:	01 c0       	rjmp	.+2      	; 0x21ee <_Z15USB_SendControlhPKvi+0x2c>
    21ec:	88 81       	ld	r24, Y
    21ee:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <_ZL11SendControlh>
    21f2:	21 96       	adiw	r28, 0x01	; 1
    21f4:	81 11       	cpse	r24, r1
    21f6:	f2 cf       	rjmp	.-28     	; 0x21dc <_Z15USB_SendControlhPKvi+0x1a>
    21f8:	8f ef       	ldi	r24, 0xFF	; 255
    21fa:	9f ef       	ldi	r25, 0xFF	; 255
    21fc:	01 c0       	rjmp	.+2      	; 0x2200 <_Z15USB_SendControlhPKvi+0x3e>
    21fe:	c8 01       	movw	r24, r16
    2200:	df 91       	pop	r29
    2202:	cf 91       	pop	r28
    2204:	1f 91       	pop	r17
    2206:	0f 91       	pop	r16
    2208:	ff 90       	pop	r15
    220a:	ef 90       	pop	r14
    220c:	df 90       	pop	r13
    220e:	08 95       	ret

00002210 <_Z15USB_RecvControlPvi>:
    2210:	af 92       	push	r10
    2212:	bf 92       	push	r11
    2214:	df 92       	push	r13
    2216:	ef 92       	push	r14
    2218:	ff 92       	push	r15
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	5c 01       	movw	r10, r24
    2224:	8b 01       	movw	r16, r22
    2226:	eb 01       	movw	r28, r22
    2228:	9b ef       	ldi	r25, 0xFB	; 251
    222a:	d9 2e       	mov	r13, r25
    222c:	20 97       	sbiw	r28, 0x00	; 0
    222e:	c1 f0       	breq	.+48     	; 0x2260 <_Z15USB_RecvControlPvi+0x50>
    2230:	7e 01       	movw	r14, r28
    2232:	c1 34       	cpi	r28, 0x41	; 65
    2234:	d1 05       	cpc	r29, r1
    2236:	1c f0       	brlt	.+6      	; 0x223e <_Z15USB_RecvControlPvi+0x2e>
    2238:	80 e4       	ldi	r24, 0x40	; 64
    223a:	e8 2e       	mov	r14, r24
    223c:	f1 2c       	mov	r15, r1
    223e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    2242:	82 ff       	sbrs	r24, 2
    2244:	fc cf       	rjmp	.-8      	; 0x223e <_Z15USB_RecvControlPvi+0x2e>
    2246:	c8 01       	movw	r24, r16
    2248:	8c 1b       	sub	r24, r28
    224a:	9d 0b       	sbc	r25, r29
    224c:	6e 2d       	mov	r22, r14
    224e:	8a 0d       	add	r24, r10
    2250:	9b 1d       	adc	r25, r11
    2252:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <_ZL4RecvPVhh>
    2256:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    225a:	ce 19       	sub	r28, r14
    225c:	df 09       	sbc	r29, r15
    225e:	e6 cf       	rjmp	.-52     	; 0x222c <_Z15USB_RecvControlPvi+0x1c>
    2260:	c8 01       	movw	r24, r16
    2262:	df 91       	pop	r29
    2264:	cf 91       	pop	r28
    2266:	1f 91       	pop	r17
    2268:	0f 91       	pop	r16
    226a:	ff 90       	pop	r15
    226c:	ef 90       	pop	r14
    226e:	df 90       	pop	r13
    2270:	bf 90       	pop	r11
    2272:	af 90       	pop	r10
    2274:	08 95       	ret

00002276 <__vector_11>:
    2276:	1f 92       	push	r1
    2278:	0f 92       	push	r0
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	0f 92       	push	r0
    227e:	11 24       	eor	r1, r1
    2280:	cf 92       	push	r12
    2282:	df 92       	push	r13
    2284:	ef 92       	push	r14
    2286:	ff 92       	push	r15
    2288:	0f 93       	push	r16
    228a:	1f 93       	push	r17
    228c:	2f 93       	push	r18
    228e:	3f 93       	push	r19
    2290:	4f 93       	push	r20
    2292:	5f 93       	push	r21
    2294:	6f 93       	push	r22
    2296:	7f 93       	push	r23
    2298:	8f 93       	push	r24
    229a:	9f 93       	push	r25
    229c:	af 93       	push	r26
    229e:	bf 93       	push	r27
    22a0:	ef 93       	push	r30
    22a2:	ff 93       	push	r31
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	6c 97       	sbiw	r28, 0x1c	; 28
    22ae:	de bf       	out	0x3e, r29	; 62
    22b0:	cd bf       	out	0x3d, r28	; 61
    22b2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    22b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    22ba:	83 ff       	sbrs	r24, 3
    22bc:	17 c1       	rjmp	.+558    	; 0x24ec <__vector_11+0x276>
    22be:	68 e0       	ldi	r22, 0x08	; 8
    22c0:	ce 01       	movw	r24, r28
    22c2:	45 96       	adiw	r24, 0x15	; 21
    22c4:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <_ZL4RecvPVhh>
    22c8:	82 ef       	ldi	r24, 0xF2	; 242
    22ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    22ce:	8d 89       	ldd	r24, Y+21	; 0x15
    22d0:	87 ff       	sbrs	r24, 7
    22d2:	05 c0       	rjmp	.+10     	; 0x22de <__vector_11+0x68>
    22d4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    22d8:	90 ff       	sbrs	r25, 0
    22da:	fc cf       	rjmp	.-8      	; 0x22d4 <__vector_11+0x5e>
    22dc:	03 c0       	rjmp	.+6      	; 0x22e4 <__vector_11+0x6e>
    22de:	9e ef       	ldi	r25, 0xFE	; 254
    22e0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    22e4:	98 2f       	mov	r25, r24
    22e6:	90 76       	andi	r25, 0x60	; 96
    22e8:	09 f0       	breq	.+2      	; 0x22ec <__vector_11+0x76>
    22ea:	d8 c0       	rjmp	.+432    	; 0x249c <__vector_11+0x226>
    22ec:	9e 89       	ldd	r25, Y+22	; 0x16
    22ee:	4f 89       	ldd	r20, Y+23	; 0x17
    22f0:	58 8d       	ldd	r21, Y+24	; 0x18
    22f2:	2f 89       	ldd	r18, Y+23	; 0x17
    22f4:	18 8d       	ldd	r17, Y+24	; 0x18
    22f6:	91 11       	cpse	r25, r1
    22f8:	0c c0       	rjmp	.+24     	; 0x2312 <__vector_11+0x9c>
    22fa:	80 38       	cpi	r24, 0x80	; 128
    22fc:	29 f4       	brne	.+10     	; 0x2308 <__vector_11+0x92>
    22fe:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <_usbCurrentStatus>
    2302:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    2306:	02 c0       	rjmp	.+4      	; 0x230c <__vector_11+0x96>
    2308:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    230c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    2310:	e6 c0       	rjmp	.+460    	; 0x24de <__vector_11+0x268>
    2312:	91 30       	cpi	r25, 0x01	; 1
    2314:	51 f4       	brne	.+20     	; 0x232a <__vector_11+0xb4>
    2316:	81 11       	cpse	r24, r1
    2318:	e2 c0       	rjmp	.+452    	; 0x24de <__vector_11+0x268>
    231a:	41 30       	cpi	r20, 0x01	; 1
    231c:	51 05       	cpc	r21, r1
    231e:	09 f0       	breq	.+2      	; 0x2322 <__vector_11+0xac>
    2320:	de c0       	rjmp	.+444    	; 0x24de <__vector_11+0x268>
    2322:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <_usbCurrentStatus>
    2326:	8d 7f       	andi	r24, 0xFD	; 253
    2328:	0b c0       	rjmp	.+22     	; 0x2340 <__vector_11+0xca>
    232a:	93 30       	cpi	r25, 0x03	; 3
    232c:	61 f4       	brne	.+24     	; 0x2346 <__vector_11+0xd0>
    232e:	81 11       	cpse	r24, r1
    2330:	d6 c0       	rjmp	.+428    	; 0x24de <__vector_11+0x268>
    2332:	41 30       	cpi	r20, 0x01	; 1
    2334:	51 05       	cpc	r21, r1
    2336:	09 f0       	breq	.+2      	; 0x233a <__vector_11+0xc4>
    2338:	d2 c0       	rjmp	.+420    	; 0x24de <__vector_11+0x268>
    233a:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <_usbCurrentStatus>
    233e:	82 60       	ori	r24, 0x02	; 2
    2340:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <_usbCurrentStatus>
    2344:	cc c0       	rjmp	.+408    	; 0x24de <__vector_11+0x268>
    2346:	95 30       	cpi	r25, 0x05	; 5
    2348:	49 f4       	brne	.+18     	; 0x235c <__vector_11+0xe6>
    234a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    234e:	80 ff       	sbrs	r24, 0
    2350:	fc cf       	rjmp	.-8      	; 0x234a <__vector_11+0xd4>
    2352:	82 2f       	mov	r24, r18
    2354:	80 68       	ori	r24, 0x80	; 128
    2356:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    235a:	c1 c0       	rjmp	.+386    	; 0x24de <__vector_11+0x268>
    235c:	96 30       	cpi	r25, 0x06	; 6
    235e:	09 f0       	breq	.+2      	; 0x2362 <__vector_11+0xec>
    2360:	70 c0       	rjmp	.+224    	; 0x2442 <__vector_11+0x1cc>
    2362:	eb 8c       	ldd	r14, Y+27	; 0x1b
    2364:	fc 8c       	ldd	r15, Y+28	; 0x1c
    2366:	12 30       	cpi	r17, 0x02	; 2
    2368:	69 f5       	brne	.+90     	; 0x23c4 <__vector_11+0x14e>
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	0e 94 d6 10 	call	0x21ac	; 0x21ac <_Z11InitControli>
    2372:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_ZL14SendInterfacesv>
    2376:	99 e0       	ldi	r25, 0x09	; 9
    2378:	9e 01       	movw	r18, r28
    237a:	2f 5f       	subi	r18, 0xFF	; 255
    237c:	3f 4f       	sbci	r19, 0xFF	; 255
    237e:	69 01       	movw	r12, r18
    2380:	f9 01       	movw	r30, r18
    2382:	29 2f       	mov	r18, r25
    2384:	11 92       	st	Z+, r1
    2386:	2a 95       	dec	r18
    2388:	e9 f7       	brne	.-6      	; 0x2384 <__vector_11+0x10e>
    238a:	99 83       	std	Y+1, r25	; 0x01
    238c:	1a 83       	std	Y+2, r17	; 0x02
    238e:	91 e0       	ldi	r25, 0x01	; 1
    2390:	9e 83       	std	Y+6, r25	; 0x06
    2392:	90 ea       	ldi	r25, 0xA0	; 160
    2394:	98 87       	std	Y+8, r25	; 0x08
    2396:	9a ef       	ldi	r25, 0xFA	; 250
    2398:	99 87       	std	Y+9, r25	; 0x09
    239a:	20 91 b6 03 	lds	r18, 0x03B6	; 0x8003b6 <_ZL6_cmark>
    239e:	30 91 b7 03 	lds	r19, 0x03B7	; 0x8003b7 <_ZL6_cmark+0x1>
    23a2:	27 5f       	subi	r18, 0xF7	; 247
    23a4:	3f 4f       	sbci	r19, 0xFF	; 255
    23a6:	3c 83       	std	Y+4, r19	; 0x04
    23a8:	2b 83       	std	Y+3, r18	; 0x03
    23aa:	8d 83       	std	Y+5, r24	; 0x05
    23ac:	c7 01       	movw	r24, r14
    23ae:	0e 94 d6 10 	call	0x21ac	; 0x21ac <_Z11InitControli>
    23b2:	49 e0       	ldi	r20, 0x09	; 9
    23b4:	50 e0       	ldi	r21, 0x00	; 0
    23b6:	b6 01       	movw	r22, r12
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <_Z15USB_SendControlhPKvi>
    23be:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <_ZL14SendInterfacesv>
    23c2:	8d c0       	rjmp	.+282    	; 0x24de <__vector_11+0x268>
    23c4:	c7 01       	movw	r24, r14
    23c6:	0e 94 d6 10 	call	0x21ac	; 0x21ac <_Z11InitControli>
    23ca:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <_Z12PluggableUSBv>
    23ce:	be 01       	movw	r22, r28
    23d0:	6b 5e       	subi	r22, 0xEB	; 235
    23d2:	7f 4f       	sbci	r23, 0xFF	; 255
    23d4:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    23d8:	00 97       	sbiw	r24, 0x00	; 0
    23da:	19 f0       	breq	.+6      	; 0x23e2 <__vector_11+0x16c>
    23dc:	0c f0       	brlt	.+2      	; 0x23e0 <__vector_11+0x16a>
    23de:	7f c0       	rjmp	.+254    	; 0x24de <__vector_11+0x268>
    23e0:	82 c0       	rjmp	.+260    	; 0x24e6 <__vector_11+0x270>
    23e2:	11 30       	cpi	r17, 0x01	; 1
    23e4:	09 f4       	brne	.+2      	; 0x23e8 <__vector_11+0x172>
    23e6:	70 c0       	rjmp	.+224    	; 0x24c8 <__vector_11+0x252>
    23e8:	13 30       	cpi	r17, 0x03	; 3
    23ea:	09 f0       	breq	.+2      	; 0x23ee <__vector_11+0x178>
    23ec:	7c c0       	rjmp	.+248    	; 0x24e6 <__vector_11+0x270>
    23ee:	8f 89       	ldd	r24, Y+23	; 0x17
    23f0:	88 23       	and	r24, r24
    23f2:	09 f4       	brne	.+2      	; 0x23f6 <__vector_11+0x180>
    23f4:	6c c0       	rjmp	.+216    	; 0x24ce <__vector_11+0x258>
    23f6:	82 30       	cpi	r24, 0x02	; 2
    23f8:	29 f4       	brne	.+10     	; 0x2404 <__vector_11+0x18e>
    23fa:	40 e8       	ldi	r20, 0x80	; 128
    23fc:	60 e1       	ldi	r22, 0x10	; 16
    23fe:	8a ec       	ldi	r24, 0xCA	; 202
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	06 c0       	rjmp	.+12     	; 0x2410 <__vector_11+0x19a>
    2404:	81 30       	cpi	r24, 0x01	; 1
    2406:	39 f4       	brne	.+14     	; 0x2416 <__vector_11+0x1a0>
    2408:	40 e8       	ldi	r20, 0x80	; 128
    240a:	6b e0       	ldi	r22, 0x0B	; 11
    240c:	8e eb       	ldi	r24, 0xBE	; 190
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <_ZL24USB_SendStringDescriptorPKhhh>
    2414:	56 c0       	rjmp	.+172    	; 0x24c2 <__vector_11+0x24c>
    2416:	83 30       	cpi	r24, 0x03	; 3
    2418:	09 f0       	breq	.+2      	; 0x241c <__vector_11+0x1a6>
    241a:	65 c0       	rjmp	.+202    	; 0x24e6 <__vector_11+0x270>
    241c:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <_Z12PluggableUSBv>
    2420:	8e 01       	movw	r16, r28
    2422:	0f 5f       	subi	r16, 0xFF	; 255
    2424:	1f 4f       	sbci	r17, 0xFF	; 255
    2426:	b8 01       	movw	r22, r16
    2428:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <_ZN13PluggableUSB_12getShortNameEPc>
    242c:	f8 01       	movw	r30, r16
    242e:	01 90       	ld	r0, Z+
    2430:	00 20       	and	r0, r0
    2432:	e9 f7       	brne	.-6      	; 0x242e <__vector_11+0x1b8>
    2434:	31 97       	sbiw	r30, 0x01	; 1
    2436:	bf 01       	movw	r22, r30
    2438:	60 1b       	sub	r22, r16
    243a:	71 0b       	sbc	r23, r17
    243c:	40 e0       	ldi	r20, 0x00	; 0
    243e:	c8 01       	movw	r24, r16
    2440:	e7 cf       	rjmp	.-50     	; 0x2410 <__vector_11+0x19a>
    2442:	97 30       	cpi	r25, 0x07	; 7
    2444:	09 f4       	brne	.+2      	; 0x2448 <__vector_11+0x1d2>
    2446:	4f c0       	rjmp	.+158    	; 0x24e6 <__vector_11+0x270>
    2448:	98 30       	cpi	r25, 0x08	; 8
    244a:	21 f4       	brne	.+8      	; 0x2454 <__vector_11+0x1de>
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    2452:	45 c0       	rjmp	.+138    	; 0x24de <__vector_11+0x268>
    2454:	99 30       	cpi	r25, 0x09	; 9
    2456:	09 f0       	breq	.+2      	; 0x245a <__vector_11+0x1e4>
    2458:	42 c0       	rjmp	.+132    	; 0x24de <__vector_11+0x268>
    245a:	83 70       	andi	r24, 0x03	; 3
    245c:	09 f0       	breq	.+2      	; 0x2460 <__vector_11+0x1ea>
    245e:	43 c0       	rjmp	.+134    	; 0x24e6 <__vector_11+0x270>
    2460:	e1 e0       	ldi	r30, 0x01	; 1
    2462:	f1 e0       	ldi	r31, 0x01	; 1
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	31 e0       	ldi	r19, 0x01	; 1
    2468:	96 e3       	ldi	r25, 0x36	; 54
    246a:	20 81       	ld	r18, Z
    246c:	21 11       	cpse	r18, r1
    246e:	09 c0       	rjmp	.+18     	; 0x2482 <__vector_11+0x20c>
    2470:	8e e7       	ldi	r24, 0x7E	; 126
    2472:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
    2476:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
    247a:	8f 89       	ldd	r24, Y+23	; 0x17
    247c:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <_usbConfiguration>
    2480:	2e c0       	rjmp	.+92     	; 0x24de <__vector_11+0x268>
    2482:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    2486:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    248a:	21 91       	ld	r18, Z+
    248c:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    2490:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    2494:	8f 5f       	subi	r24, 0xFF	; 255
    2496:	87 30       	cpi	r24, 0x07	; 7
    2498:	41 f7       	brne	.-48     	; 0x246a <__vector_11+0x1f4>
    249a:	ea cf       	rjmp	.-44     	; 0x2470 <__vector_11+0x1fa>
    249c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    249e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24a0:	0e 94 d6 10 	call	0x21ac	; 0x21ac <_Z11InitControli>
    24a4:	89 8d       	ldd	r24, Y+25	; 0x19
    24a6:	81 11       	cpse	r24, r1
    24a8:	05 c0       	rjmp	.+10     	; 0x24b4 <__vector_11+0x23e>
    24aa:	ce 01       	movw	r24, r28
    24ac:	45 96       	adiw	r24, 0x15	; 21
    24ae:	0e 94 ab 14 	call	0x2956	; 0x2956 <_Z9CDC_SetupR8USBSetup>
    24b2:	07 c0       	rjmp	.+14     	; 0x24c2 <__vector_11+0x24c>
    24b4:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <_Z12PluggableUSBv>
    24b8:	be 01       	movw	r22, r28
    24ba:	6b 5e       	subi	r22, 0xEB	; 235
    24bc:	7f 4f       	sbci	r23, 0xFF	; 255
    24be:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <_ZN13PluggableUSB_5setupER8USBSetup>
    24c2:	88 23       	and	r24, r24
    24c4:	81 f0       	breq	.+32     	; 0x24e6 <__vector_11+0x270>
    24c6:	0b c0       	rjmp	.+22     	; 0x24de <__vector_11+0x268>
    24c8:	6c ea       	ldi	r22, 0xAC	; 172
    24ca:	70 e0       	ldi	r23, 0x00	; 0
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <__vector_11+0x25c>
    24ce:	6b ed       	ldi	r22, 0xDB	; 219
    24d0:	70 e0       	ldi	r23, 0x00	; 0
    24d2:	fb 01       	movw	r30, r22
    24d4:	44 91       	lpm	r20, Z
    24d6:	50 e0       	ldi	r21, 0x00	; 0
    24d8:	80 e8       	ldi	r24, 0x80	; 128
    24da:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <_Z15USB_SendControlhPKvi>
    24de:	8e ef       	ldi	r24, 0xFE	; 254
    24e0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    24e4:	03 c0       	rjmp	.+6      	; 0x24ec <__vector_11+0x276>
    24e6:	81 e2       	ldi	r24, 0x21	; 33
    24e8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    24ec:	6c 96       	adiw	r28, 0x1c	; 28
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	f8 94       	cli
    24f2:	de bf       	out	0x3e, r29	; 62
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	cd bf       	out	0x3d, r28	; 61
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	ff 91       	pop	r31
    24fe:	ef 91       	pop	r30
    2500:	bf 91       	pop	r27
    2502:	af 91       	pop	r26
    2504:	9f 91       	pop	r25
    2506:	8f 91       	pop	r24
    2508:	7f 91       	pop	r23
    250a:	6f 91       	pop	r22
    250c:	5f 91       	pop	r21
    250e:	4f 91       	pop	r20
    2510:	3f 91       	pop	r19
    2512:	2f 91       	pop	r18
    2514:	1f 91       	pop	r17
    2516:	0f 91       	pop	r16
    2518:	ff 90       	pop	r15
    251a:	ef 90       	pop	r14
    251c:	df 90       	pop	r13
    251e:	cf 90       	pop	r12
    2520:	0f 90       	pop	r0
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	0f 90       	pop	r0
    2526:	1f 90       	pop	r1
    2528:	18 95       	reti

0000252a <_Z9USB_Flushh>:
    252a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    252e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    2532:	88 23       	and	r24, r24
    2534:	19 f0       	breq	.+6      	; 0x253c <_Z9USB_Flushh+0x12>
    2536:	8a e3       	ldi	r24, 0x3A	; 58
    2538:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    253c:	08 95       	ret

0000253e <__vector_10>:
    253e:	1f 92       	push	r1
    2540:	0f 92       	push	r0
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	0f 92       	push	r0
    2546:	11 24       	eor	r1, r1
    2548:	2f 93       	push	r18
    254a:	3f 93       	push	r19
    254c:	4f 93       	push	r20
    254e:	5f 93       	push	r21
    2550:	6f 93       	push	r22
    2552:	7f 93       	push	r23
    2554:	8f 93       	push	r24
    2556:	9f 93       	push	r25
    2558:	af 93       	push	r26
    255a:	bf 93       	push	r27
    255c:	cf 93       	push	r28
    255e:	ef 93       	push	r30
    2560:	ff 93       	push	r31
    2562:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    2566:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    256a:	83 7f       	andi	r24, 0xF3	; 243
    256c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    2570:	c3 ff       	sbrs	r28, 3
    2572:	0f c0       	rjmp	.+30     	; 0x2592 <__vector_10+0x54>
    2574:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    257e:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    2582:	82 e3       	ldi	r24, 0x32	; 50
    2584:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    2588:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <_usbConfiguration>
    258c:	88 e0       	ldi	r24, 0x08	; 8
    258e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    2592:	c2 ff       	sbrs	r28, 2
    2594:	19 c0       	rjmp	.+50     	; 0x25c8 <__vector_10+0x8a>
    2596:	83 e0       	ldi	r24, 0x03	; 3
    2598:	0e 94 95 12 	call	0x252a	; 0x252a <_Z9USB_Flushh>
    259c:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <TxLEDPulse>
    25a0:	88 23       	and	r24, r24
    25a2:	39 f0       	breq	.+14     	; 0x25b2 <__vector_10+0x74>
    25a4:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <TxLEDPulse>
    25a8:	81 50       	subi	r24, 0x01	; 1
    25aa:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <TxLEDPulse>
    25ae:	88 23       	and	r24, r24
    25b0:	89 f1       	breq	.+98     	; 0x2614 <__vector_10+0xd6>
    25b2:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <RxLEDPulse>
    25b6:	88 23       	and	r24, r24
    25b8:	39 f0       	breq	.+14     	; 0x25c8 <__vector_10+0x8a>
    25ba:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <RxLEDPulse>
    25be:	81 50       	subi	r24, 0x01	; 1
    25c0:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <RxLEDPulse>
    25c4:	88 23       	and	r24, r24
    25c6:	41 f1       	breq	.+80     	; 0x2618 <__vector_10+0xda>
    25c8:	c4 ff       	sbrs	r28, 4
    25ca:	10 c0       	rjmp	.+32     	; 0x25ec <__vector_10+0xae>
    25cc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    25d0:	8e 7e       	andi	r24, 0xEE	; 238
    25d2:	81 60       	ori	r24, 0x01	; 1
    25d4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    25d8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    25dc:	8f 7e       	andi	r24, 0xEF	; 239
    25de:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    25e2:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <_usbSuspendState>
    25e6:	8e 7e       	andi	r24, 0xEE	; 238
    25e8:	80 61       	ori	r24, 0x10	; 16
    25ea:	11 c0       	rjmp	.+34     	; 0x260e <__vector_10+0xd0>
    25ec:	c0 ff       	sbrs	r28, 0
    25ee:	16 c0       	rjmp	.+44     	; 0x261c <__vector_10+0xde>
    25f0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    25f4:	8e 7e       	andi	r24, 0xEE	; 238
    25f6:	80 61       	ori	r24, 0x10	; 16
    25f8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    25fc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    2600:	8e 7e       	andi	r24, 0xEE	; 238
    2602:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    2606:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <_usbSuspendState>
    260a:	8e 7e       	andi	r24, 0xEE	; 238
    260c:	81 60       	ori	r24, 0x01	; 1
    260e:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <_usbSuspendState>
    2612:	04 c0       	rjmp	.+8      	; 0x261c <__vector_10+0xde>
    2614:	5d 9a       	sbi	0x0b, 5	; 11
    2616:	cd cf       	rjmp	.-102    	; 0x25b2 <__vector_10+0x74>
    2618:	28 9a       	sbi	0x05, 0	; 5
    261a:	d6 cf       	rjmp	.-84     	; 0x25c8 <__vector_10+0x8a>
    261c:	ff 91       	pop	r31
    261e:	ef 91       	pop	r30
    2620:	cf 91       	pop	r28
    2622:	bf 91       	pop	r27
    2624:	af 91       	pop	r26
    2626:	9f 91       	pop	r25
    2628:	8f 91       	pop	r24
    262a:	7f 91       	pop	r23
    262c:	6f 91       	pop	r22
    262e:	5f 91       	pop	r21
    2630:	4f 91       	pop	r20
    2632:	3f 91       	pop	r19
    2634:	2f 91       	pop	r18
    2636:	0f 90       	pop	r0
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	0f 90       	pop	r0
    263c:	1f 90       	pop	r1
    263e:	18 95       	reti

00002640 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    2640:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <_usbConfiguration>
	_usbCurrentStatus = 0;
    2644:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <_usbCurrentStatus>
	_usbSuspendState = 0;
    2648:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <_usbSuspendState>
	USB_ClockEnable();
    264c:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    2650:	e1 ee       	ldi	r30, 0xE1	; 225
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	8e 7e       	andi	r24, 0xEE	; 238
    2658:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    265a:	8d e0       	ldi	r24, 0x0D	; 13
    265c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
	
	TX_RX_LED_INIT;
    2660:	55 9a       	sbi	0x0a, 5	; 10
    2662:	20 9a       	sbi	0x04, 0	; 4
    2664:	08 95       	ret

00002666 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2666:	1f 92       	push	r1
    2668:	0f 92       	push	r0
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	0f 92       	push	r0
    266e:	11 24       	eor	r1, r1
    2670:	2f 93       	push	r18
    2672:	3f 93       	push	r19
    2674:	8f 93       	push	r24
    2676:	9f 93       	push	r25
    2678:	af 93       	push	r26
    267a:	bf 93       	push	r27
    267c:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <timer0_millis>
    2680:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <timer0_millis+0x1>
    2684:	a0 91 c0 03 	lds	r26, 0x03C0	; 0x8003c0 <timer0_millis+0x2>
    2688:	b0 91 c1 03 	lds	r27, 0x03C1	; 0x8003c1 <timer0_millis+0x3>
    268c:	30 91 bd 03 	lds	r19, 0x03BD	; 0x8003bd <timer0_fract>
    2690:	23 e0       	ldi	r18, 0x03	; 3
    2692:	23 0f       	add	r18, r19
    2694:	2d 37       	cpi	r18, 0x7D	; 125
    2696:	20 f4       	brcc	.+8      	; 0x26a0 <__vector_23+0x3a>
    2698:	01 96       	adiw	r24, 0x01	; 1
    269a:	a1 1d       	adc	r26, r1
    269c:	b1 1d       	adc	r27, r1
    269e:	05 c0       	rjmp	.+10     	; 0x26aa <__vector_23+0x44>
    26a0:	26 e8       	ldi	r18, 0x86	; 134
    26a2:	23 0f       	add	r18, r19
    26a4:	02 96       	adiw	r24, 0x02	; 2
    26a6:	a1 1d       	adc	r26, r1
    26a8:	b1 1d       	adc	r27, r1
    26aa:	20 93 bd 03 	sts	0x03BD, r18	; 0x8003bd <timer0_fract>
    26ae:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <timer0_millis>
    26b2:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <timer0_millis+0x1>
    26b6:	a0 93 c0 03 	sts	0x03C0, r26	; 0x8003c0 <timer0_millis+0x2>
    26ba:	b0 93 c1 03 	sts	0x03C1, r27	; 0x8003c1 <timer0_millis+0x3>
    26be:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <timer0_overflow_count>
    26c2:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <timer0_overflow_count+0x1>
    26c6:	a0 91 c4 03 	lds	r26, 0x03C4	; 0x8003c4 <timer0_overflow_count+0x2>
    26ca:	b0 91 c5 03 	lds	r27, 0x03C5	; 0x8003c5 <timer0_overflow_count+0x3>
    26ce:	01 96       	adiw	r24, 0x01	; 1
    26d0:	a1 1d       	adc	r26, r1
    26d2:	b1 1d       	adc	r27, r1
    26d4:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <timer0_overflow_count>
    26d8:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <timer0_overflow_count+0x1>
    26dc:	a0 93 c4 03 	sts	0x03C4, r26	; 0x8003c4 <timer0_overflow_count+0x2>
    26e0:	b0 93 c5 03 	sts	0x03C5, r27	; 0x8003c5 <timer0_overflow_count+0x3>
    26e4:	bf 91       	pop	r27
    26e6:	af 91       	pop	r26
    26e8:	9f 91       	pop	r25
    26ea:	8f 91       	pop	r24
    26ec:	3f 91       	pop	r19
    26ee:	2f 91       	pop	r18
    26f0:	0f 90       	pop	r0
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	0f 90       	pop	r0
    26f6:	1f 90       	pop	r1
    26f8:	18 95       	reti

000026fa <micros>:
    26fa:	3f b7       	in	r19, 0x3f	; 63
    26fc:	f8 94       	cli
    26fe:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <timer0_overflow_count>
    2702:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <timer0_overflow_count+0x1>
    2706:	a0 91 c4 03 	lds	r26, 0x03C4	; 0x8003c4 <timer0_overflow_count+0x2>
    270a:	b0 91 c5 03 	lds	r27, 0x03C5	; 0x8003c5 <timer0_overflow_count+0x3>
    270e:	26 b5       	in	r18, 0x26	; 38
    2710:	a8 9b       	sbis	0x15, 0	; 21
    2712:	05 c0       	rjmp	.+10     	; 0x271e <micros+0x24>
    2714:	2f 3f       	cpi	r18, 0xFF	; 255
    2716:	19 f0       	breq	.+6      	; 0x271e <micros+0x24>
    2718:	01 96       	adiw	r24, 0x01	; 1
    271a:	a1 1d       	adc	r26, r1
    271c:	b1 1d       	adc	r27, r1
    271e:	3f bf       	out	0x3f, r19	; 63
    2720:	ba 2f       	mov	r27, r26
    2722:	a9 2f       	mov	r26, r25
    2724:	98 2f       	mov	r25, r24
    2726:	88 27       	eor	r24, r24
    2728:	82 0f       	add	r24, r18
    272a:	91 1d       	adc	r25, r1
    272c:	a1 1d       	adc	r26, r1
    272e:	b1 1d       	adc	r27, r1
    2730:	bc 01       	movw	r22, r24
    2732:	cd 01       	movw	r24, r26
    2734:	42 e0       	ldi	r20, 0x02	; 2
    2736:	66 0f       	add	r22, r22
    2738:	77 1f       	adc	r23, r23
    273a:	88 1f       	adc	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	4a 95       	dec	r20
    2740:	d1 f7       	brne	.-12     	; 0x2736 <micros+0x3c>
    2742:	08 95       	ret

00002744 <delay>:
    2744:	8f 92       	push	r8
    2746:	9f 92       	push	r9
    2748:	af 92       	push	r10
    274a:	bf 92       	push	r11
    274c:	cf 92       	push	r12
    274e:	df 92       	push	r13
    2750:	ef 92       	push	r14
    2752:	ff 92       	push	r15
    2754:	6b 01       	movw	r12, r22
    2756:	7c 01       	movw	r14, r24
    2758:	0e 94 7d 13 	call	0x26fa	; 0x26fa <micros>
    275c:	4b 01       	movw	r8, r22
    275e:	5c 01       	movw	r10, r24
    2760:	c1 14       	cp	r12, r1
    2762:	d1 04       	cpc	r13, r1
    2764:	e1 04       	cpc	r14, r1
    2766:	f1 04       	cpc	r15, r1
    2768:	01 f1       	breq	.+64     	; 0x27aa <delay+0x66>
    276a:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <yield>
    276e:	0e 94 7d 13 	call	0x26fa	; 0x26fa <micros>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	88 19       	sub	r24, r8
    2778:	99 09       	sbc	r25, r9
    277a:	aa 09       	sbc	r26, r10
    277c:	bb 09       	sbc	r27, r11
    277e:	88 3e       	cpi	r24, 0xE8	; 232
    2780:	93 40       	sbci	r25, 0x03	; 3
    2782:	a1 05       	cpc	r26, r1
    2784:	b1 05       	cpc	r27, r1
    2786:	60 f3       	brcs	.-40     	; 0x2760 <delay+0x1c>
    2788:	21 e0       	ldi	r18, 0x01	; 1
    278a:	c2 1a       	sub	r12, r18
    278c:	d1 08       	sbc	r13, r1
    278e:	e1 08       	sbc	r14, r1
    2790:	f1 08       	sbc	r15, r1
    2792:	88 ee       	ldi	r24, 0xE8	; 232
    2794:	88 0e       	add	r8, r24
    2796:	83 e0       	ldi	r24, 0x03	; 3
    2798:	98 1e       	adc	r9, r24
    279a:	a1 1c       	adc	r10, r1
    279c:	b1 1c       	adc	r11, r1
    279e:	c1 14       	cp	r12, r1
    27a0:	d1 04       	cpc	r13, r1
    27a2:	e1 04       	cpc	r14, r1
    27a4:	f1 04       	cpc	r15, r1
    27a6:	19 f7       	brne	.-58     	; 0x276e <delay+0x2a>
    27a8:	db cf       	rjmp	.-74     	; 0x2760 <delay+0x1c>
    27aa:	ff 90       	pop	r15
    27ac:	ef 90       	pop	r14
    27ae:	df 90       	pop	r13
    27b0:	cf 90       	pop	r12
    27b2:	bf 90       	pop	r11
    27b4:	af 90       	pop	r10
    27b6:	9f 90       	pop	r9
    27b8:	8f 90       	pop	r8
    27ba:	08 95       	ret

000027bc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    27bc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    27be:	84 b5       	in	r24, 0x24	; 36
    27c0:	82 60       	ori	r24, 0x02	; 2
    27c2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    27c4:	84 b5       	in	r24, 0x24	; 36
    27c6:	81 60       	ori	r24, 0x01	; 1
    27c8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    27ca:	85 b5       	in	r24, 0x25	; 37
    27cc:	82 60       	ori	r24, 0x02	; 2
    27ce:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    27d0:	85 b5       	in	r24, 0x25	; 37
    27d2:	81 60       	ori	r24, 0x01	; 1
    27d4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    27d6:	ee e6       	ldi	r30, 0x6E	; 110
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	81 60       	ori	r24, 0x01	; 1
    27de:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    27e0:	e1 e8       	ldi	r30, 0x81	; 129
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    27e6:	80 81       	ld	r24, Z
    27e8:	82 60       	ori	r24, 0x02	; 2
    27ea:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    27ec:	80 81       	ld	r24, Z
    27ee:	81 60       	ori	r24, 0x01	; 1
    27f0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    27f2:	e0 e8       	ldi	r30, 0x80	; 128
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	81 60       	ori	r24, 0x01	; 1
    27fa:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    27fc:	e1 e9       	ldi	r30, 0x91	; 145
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	82 60       	ori	r24, 0x02	; 2
    2804:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    2806:	80 81       	ld	r24, Z
    2808:	81 60       	ori	r24, 0x01	; 1
    280a:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    280c:	e0 e9       	ldi	r30, 0x90	; 144
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	81 60       	ori	r24, 0x01	; 1
    2814:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    2816:	e1 ec       	ldi	r30, 0xC1	; 193
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	84 60       	ori	r24, 0x04	; 4
    281e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    2820:	80 81       	ld	r24, Z
    2822:	82 60       	ori	r24, 0x02	; 2
    2824:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2826:	80 81       	ld	r24, Z
    2828:	81 60       	ori	r24, 0x01	; 1
    282a:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    282c:	e3 ec       	ldi	r30, 0xC3	; 195
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	80 81       	ld	r24, Z
    2832:	81 60       	ori	r24, 0x01	; 1
    2834:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    2836:	e0 ec       	ldi	r30, 0xC0	; 192
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	82 60       	ori	r24, 0x02	; 2
    283e:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    2840:	e2 ec       	ldi	r30, 0xC2	; 194
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
    2846:	81 60       	ori	r24, 0x01	; 1
    2848:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    284a:	ea e7       	ldi	r30, 0x7A	; 122
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	84 60       	ori	r24, 0x04	; 4
    2852:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2854:	80 81       	ld	r24, Z
    2856:	82 60       	ori	r24, 0x02	; 2
    2858:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    285a:	80 81       	ld	r24, Z
    285c:	81 60       	ori	r24, 0x01	; 1
    285e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2860:	80 81       	ld	r24, Z
    2862:	80 68       	ori	r24, 0x80	; 128
    2864:	80 83       	st	Z, r24
    2866:	08 95       	ret

00002868 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
    286c:	1f 92       	push	r1
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	69 83       	std	Y+1, r22	; 0x01
    2874:	dc 01       	movw	r26, r24
    2876:	ed 91       	ld	r30, X+
    2878:	fc 91       	ld	r31, X
    287a:	02 80       	ldd	r0, Z+2	; 0x02
    287c:	f3 81       	ldd	r31, Z+3	; 0x03
    287e:	e0 2d       	mov	r30, r0
    2880:	41 e0       	ldi	r20, 0x01	; 1
    2882:	50 e0       	ldi	r21, 0x00	; 0
    2884:	be 01       	movw	r22, r28
    2886:	6f 5f       	subi	r22, 0xFF	; 255
    2888:	7f 4f       	sbci	r23, 0xFF	; 255
    288a:	09 95       	icall
    288c:	0f 90       	pop	r0
    288e:	df 91       	pop	r29
    2890:	cf 91       	pop	r28
    2892:	08 95       	ret

00002894 <_ZN7Serial_4peekEv>:
    2894:	cf 93       	push	r28
    2896:	df 93       	push	r29
    2898:	ec 01       	movw	r28, r24
    289a:	8c 85       	ldd	r24, Y+12	; 0x0c
    289c:	9d 85       	ldd	r25, Y+13	; 0x0d
    289e:	97 ff       	sbrs	r25, 7
    28a0:	05 c0       	rjmp	.+10     	; 0x28ac <_ZN7Serial_4peekEv+0x18>
    28a2:	82 e0       	ldi	r24, 0x02	; 2
    28a4:	0e 94 00 10 	call	0x2000	; 0x2000 <_Z8USB_Recvh>
    28a8:	9d 87       	std	Y+13, r25	; 0x0d
    28aa:	8c 87       	std	Y+12, r24	; 0x0c
    28ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    28ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    28b0:	df 91       	pop	r29
    28b2:	cf 91       	pop	r28
    28b4:	08 95       	ret

000028b6 <_ZN7Serial_17availableForWriteEv>:
    28b6:	83 e0       	ldi	r24, 0x03	; 3
    28b8:	0e 94 17 10 	call	0x202e	; 0x202e <_Z13USB_SendSpaceh>
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	08 95       	ret

000028c0 <_ZN7Serial_5flushEv>:
    28c0:	83 e0       	ldi	r24, 0x03	; 3
    28c2:	0c 94 95 12 	jmp	0x252a	; 0x252a <_Z9USB_Flushh>

000028c6 <_ZN7Serial_9availableEv>:
    28c6:	fc 01       	movw	r30, r24
    28c8:	84 85       	ldd	r24, Z+12	; 0x0c
    28ca:	95 85       	ldd	r25, Z+13	; 0x0d
    28cc:	97 fd       	sbrc	r25, 7
    28ce:	06 c0       	rjmp	.+12     	; 0x28dc <_ZN7Serial_9availableEv+0x16>
    28d0:	82 e0       	ldi	r24, 0x02	; 2
    28d2:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <_Z13USB_Availableh>
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	01 96       	adiw	r24, 0x01	; 1
    28da:	08 95       	ret
    28dc:	82 e0       	ldi	r24, 0x02	; 2
    28de:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <_Z13USB_Availableh>
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	08 95       	ret

000028e6 <_ZN7Serial_4readEv>:
    28e6:	fc 01       	movw	r30, r24
    28e8:	84 85       	ldd	r24, Z+12	; 0x0c
    28ea:	95 85       	ldd	r25, Z+13	; 0x0d
    28ec:	97 fd       	sbrc	r25, 7
    28ee:	05 c0       	rjmp	.+10     	; 0x28fa <_ZN7Serial_4readEv+0x14>
    28f0:	2f ef       	ldi	r18, 0xFF	; 255
    28f2:	3f ef       	ldi	r19, 0xFF	; 255
    28f4:	35 87       	std	Z+13, r19	; 0x0d
    28f6:	24 87       	std	Z+12, r18	; 0x0c
    28f8:	08 95       	ret
    28fa:	82 e0       	ldi	r24, 0x02	; 2
    28fc:	0c 94 00 10 	jmp	0x2000	; 0x2000 <_Z8USB_Recvh>

00002900 <_ZN7Serial_5writeEPKhj>:
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	ec 01       	movw	r28, r24
    2906:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_ZL12_usbLineInfo+0x7>
    290a:	88 23       	and	r24, r24
    290c:	31 f0       	breq	.+12     	; 0x291a <_ZN7Serial_5writeEPKhj+0x1a>
    290e:	83 e0       	ldi	r24, 0x03	; 3
    2910:	0e 94 31 10 	call	0x2062	; 0x2062 <_Z8USB_SendhPKvi>
    2914:	18 16       	cp	r1, r24
    2916:	19 06       	cpc	r1, r25
    2918:	34 f0       	brlt	.+12     	; 0x2926 <_ZN7Serial_5writeEPKhj+0x26>
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	9b 83       	std	Y+3, r25	; 0x03
    2920:	8a 83       	std	Y+2, r24	; 0x02
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	df 91       	pop	r29
    2928:	cf 91       	pop	r28
    292a:	08 95       	ret

0000292c <_Z16isLUFAbootloaderv>:
    292c:	ee ef       	ldi	r30, 0xFE	; 254
    292e:	ff e7       	ldi	r31, 0x7F	; 127
    2930:	25 91       	lpm	r18, Z+
    2932:	34 91       	lpm	r19, Z
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	2b 3f       	cpi	r18, 0xFB	; 251
    2938:	3c 4d       	sbci	r19, 0xDC	; 220
    293a:	09 f0       	breq	.+2      	; 0x293e <_Z16isLUFAbootloaderv+0x12>
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	08 95       	ret

00002940 <_Z16CDC_GetInterfacePh>:
    2940:	fc 01       	movw	r30, r24
    2942:	90 81       	ld	r25, Z
    2944:	9e 5f       	subi	r25, 0xFE	; 254
    2946:	90 83       	st	Z, r25
    2948:	42 e4       	ldi	r20, 0x42	; 66
    294a:	50 e0       	ldi	r21, 0x00	; 0
    294c:	6f ed       	ldi	r22, 0xDF	; 223
    294e:	70 e0       	ldi	r23, 0x00	; 0
    2950:	80 e8       	ldi	r24, 0x80	; 128
    2952:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <_Z15USB_SendControlhPKvi>

00002956 <_Z9CDC_SetupR8USBSetup>:
    2956:	fc 01       	movw	r30, r24
    2958:	81 81       	ldd	r24, Z+1	; 0x01
    295a:	90 81       	ld	r25, Z
    295c:	91 3a       	cpi	r25, 0xA1	; 161
    295e:	59 f4       	brne	.+22     	; 0x2976 <_Z9CDC_SetupR8USBSetup+0x20>
    2960:	81 32       	cpi	r24, 0x21	; 33
    2962:	09 f0       	breq	.+2      	; 0x2966 <_Z9CDC_SetupR8USBSetup+0x10>
    2964:	65 c0       	rjmp	.+202    	; 0x2a30 <_Z9CDC_SetupR8USBSetup+0xda>
    2966:	47 e0       	ldi	r20, 0x07	; 7
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	6b e0       	ldi	r22, 0x0B	; 11
    296c:	71 e0       	ldi	r23, 0x01	; 1
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <_Z15USB_SendControlhPKvi>
    2974:	5b c0       	rjmp	.+182    	; 0x2a2c <_Z9CDC_SetupR8USBSetup+0xd6>
    2976:	91 32       	cpi	r25, 0x21	; 33
    2978:	09 f0       	breq	.+2      	; 0x297c <_Z9CDC_SetupR8USBSetup+0x26>
    297a:	5a c0       	rjmp	.+180    	; 0x2a30 <_Z9CDC_SetupR8USBSetup+0xda>
    297c:	83 32       	cpi	r24, 0x23	; 35
    297e:	69 f4       	brne	.+26     	; 0x299a <_Z9CDC_SetupR8USBSetup+0x44>
    2980:	82 81       	ldd	r24, Z+2	; 0x02
    2982:	93 81       	ldd	r25, Z+3	; 0x03
    2984:	a0 e0       	ldi	r26, 0x00	; 0
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL10breakValue>
    298c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_ZL10breakValue+0x1>
    2990:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_ZL10breakValue+0x2>
    2994:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_ZL10breakValue+0x3>
    2998:	49 c0       	rjmp	.+146    	; 0x2a2c <_Z9CDC_SetupR8USBSetup+0xd6>
    299a:	80 32       	cpi	r24, 0x20	; 32
    299c:	39 f4       	brne	.+14     	; 0x29ac <_Z9CDC_SetupR8USBSetup+0x56>
    299e:	67 e0       	ldi	r22, 0x07	; 7
    29a0:	70 e0       	ldi	r23, 0x00	; 0
    29a2:	8b e0       	ldi	r24, 0x0B	; 11
    29a4:	91 e0       	ldi	r25, 0x01	; 1
    29a6:	0e 94 08 11 	call	0x2210	; 0x2210 <_Z15USB_RecvControlPvi>
    29aa:	40 c0       	rjmp	.+128    	; 0x2a2c <_Z9CDC_SetupR8USBSetup+0xd6>
    29ac:	82 32       	cpi	r24, 0x22	; 34
    29ae:	09 f0       	breq	.+2      	; 0x29b2 <_Z9CDC_SetupR8USBSetup+0x5c>
    29b0:	3d c0       	rjmp	.+122    	; 0x2a2c <_Z9CDC_SetupR8USBSetup+0xd6>
    29b2:	82 81       	ldd	r24, Z+2	; 0x02
    29b4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZL12_usbLineInfo+0x7>
    29b8:	0e 94 96 14 	call	0x292c	; 0x292c <_Z16isLUFAbootloaderv>
    29bc:	88 23       	and	r24, r24
    29be:	19 f0       	breq	.+6      	; 0x29c6 <_Z9CDC_SetupR8USBSetup+0x70>
    29c0:	ee ef       	ldi	r30, 0xFE	; 254
    29c2:	fa e0       	ldi	r31, 0x0A	; 10
    29c4:	02 c0       	rjmp	.+4      	; 0x29ca <_Z9CDC_SetupR8USBSetup+0x74>
    29c6:	e0 e0       	ldi	r30, 0x00	; 0
    29c8:	f8 e0       	ldi	r31, 0x08	; 8
    29ca:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZL12_usbLineInfo>
    29ce:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_ZL12_usbLineInfo+0x1>
    29d2:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <_ZL12_usbLineInfo+0x2>
    29d6:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <_ZL12_usbLineInfo+0x3>
    29da:	80 3b       	cpi	r24, 0xB0	; 176
    29dc:	94 40       	sbci	r25, 0x04	; 4
    29de:	a1 05       	cpc	r26, r1
    29e0:	b1 05       	cpc	r27, r1
    29e2:	41 f5       	brne	.+80     	; 0x2a34 <_Z9CDC_SetupR8USBSetup+0xde>
    29e4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_ZL12_usbLineInfo+0x7>
    29e8:	80 fd       	sbrc	r24, 0
    29ea:	24 c0       	rjmp	.+72     	; 0x2a34 <_Z9CDC_SetupR8USBSetup+0xde>
    29ec:	ee 3f       	cpi	r30, 0xFE	; 254
    29ee:	8a e0       	ldi	r24, 0x0A	; 10
    29f0:	f8 07       	cpc	r31, r24
    29f2:	51 f0       	breq	.+20     	; 0x2a08 <_Z9CDC_SetupR8USBSetup+0xb2>
    29f4:	80 81       	ld	r24, Z
    29f6:	91 81       	ldd	r25, Z+1	; 0x01
    29f8:	87 37       	cpi	r24, 0x77	; 119
    29fa:	27 e7       	ldi	r18, 0x77	; 119
    29fc:	92 07       	cpc	r25, r18
    29fe:	21 f0       	breq	.+8      	; 0x2a08 <_Z9CDC_SetupR8USBSetup+0xb2>
    2a00:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x6dc>
    2a04:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x6db>
    2a08:	87 e7       	ldi	r24, 0x77	; 119
    2a0a:	97 e7       	ldi	r25, 0x77	; 119
    2a0c:	91 83       	std	Z+1, r25	; 0x01
    2a0e:	80 83       	st	Z, r24
    2a10:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2a14:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <_ZL11wdtcsr_save>
    2a18:	9b e0       	ldi	r25, 0x0B	; 11
    2a1a:	88 e1       	ldi	r24, 0x18	; 24
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	a8 95       	wdr
    2a22:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	08 95       	ret
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	08 95       	ret
    2a34:	80 81       	ld	r24, Z
    2a36:	91 81       	ldd	r25, Z+1	; 0x01
    2a38:	87 37       	cpi	r24, 0x77	; 119
    2a3a:	97 47       	sbci	r25, 0x77	; 119
    2a3c:	b9 f7       	brne	.-18     	; 0x2a2c <_Z9CDC_SetupR8USBSetup+0xd6>
    2a3e:	a8 95       	wdr
    2a40:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2a44:	88 61       	ori	r24, 0x18	; 24
    2a46:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2a4a:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <_ZL11wdtcsr_save>
    2a4e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2a52:	ee 3f       	cpi	r30, 0xFE	; 254
    2a54:	8a e0       	ldi	r24, 0x0A	; 10
    2a56:	f8 07       	cpc	r31, r24
    2a58:	39 f0       	breq	.+14     	; 0x2a68 <_Z9CDC_SetupR8USBSetup+0x112>
    2a5a:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x6db>
    2a5e:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x6dc>
    2a62:	91 83       	std	Z+1, r25	; 0x01
    2a64:	80 83       	st	Z, r24
    2a66:	e2 cf       	rjmp	.-60     	; 0x2a2c <_Z9CDC_SetupR8USBSetup+0xd6>
    2a68:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x6dc>
    2a6c:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x6db>
    2a70:	dd cf       	rjmp	.-70     	; 0x2a2c <_Z9CDC_SetupR8USBSetup+0xd6>

00002a72 <_GLOBAL__sub_I__cdcInterface>:
    2a72:	e6 ec       	ldi	r30, 0xC6	; 198
    2a74:	f3 e0       	ldi	r31, 0x03	; 3
    2a76:	13 82       	std	Z+3, r1	; 0x03
    2a78:	12 82       	std	Z+2, r1	; 0x02
    2a7a:	88 ee       	ldi	r24, 0xE8	; 232
    2a7c:	93 e0       	ldi	r25, 0x03	; 3
    2a7e:	a0 e0       	ldi	r26, 0x00	; 0
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	84 83       	std	Z+4, r24	; 0x04
    2a84:	95 83       	std	Z+5, r25	; 0x05
    2a86:	a6 83       	std	Z+6, r26	; 0x06
    2a88:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    2a8a:	87 e0       	ldi	r24, 0x07	; 7
    2a8c:	93 e0       	ldi	r25, 0x03	; 3
    2a8e:	91 83       	std	Z+1, r25	; 0x01
    2a90:	80 83       	st	Z, r24
    2a92:	8f ef       	ldi	r24, 0xFF	; 255
    2a94:	9f ef       	ldi	r25, 0xFF	; 255
    2a96:	95 87       	std	Z+13, r25	; 0x0d
    2a98:	84 87       	std	Z+12, r24	; 0x0c
    2a9a:	08 95       	ret

00002a9c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2a9c:	08 95       	ret

00002a9e <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    2a9e:	ef 92       	push	r14
    2aa0:	ff 92       	push	r15
    2aa2:	0f 93       	push	r16
    2aa4:	1f 93       	push	r17
    2aa6:	cf 93       	push	r28
    2aa8:	df 93       	push	r29
    2aaa:	7b 01       	movw	r14, r22
    2aac:	fc 01       	movw	r30, r24
    2aae:	c2 81       	ldd	r28, Z+2	; 0x02
    2ab0:	d3 81       	ldd	r29, Z+3	; 0x03
    2ab2:	00 e0       	ldi	r16, 0x00	; 0
    2ab4:	10 e0       	ldi	r17, 0x00	; 0
    2ab6:	20 97       	sbiw	r28, 0x00	; 0
    2ab8:	81 f0       	breq	.+32     	; 0x2ada <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    2aba:	e8 81       	ld	r30, Y
    2abc:	f9 81       	ldd	r31, Y+1	; 0x01
    2abe:	02 80       	ldd	r0, Z+2	; 0x02
    2ac0:	f3 81       	ldd	r31, Z+3	; 0x03
    2ac2:	e0 2d       	mov	r30, r0
    2ac4:	b7 01       	movw	r22, r14
    2ac6:	ce 01       	movw	r24, r28
    2ac8:	09 95       	icall
    2aca:	97 fd       	sbrc	r25, 7
    2acc:	08 c0       	rjmp	.+16     	; 0x2ade <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    2ace:	08 0f       	add	r16, r24
    2ad0:	19 1f       	adc	r17, r25
    2ad2:	08 84       	ldd	r0, Y+8	; 0x08
    2ad4:	d9 85       	ldd	r29, Y+9	; 0x09
    2ad6:	c0 2d       	mov	r28, r0
    2ad8:	ee cf       	rjmp	.-36     	; 0x2ab6 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    2ada:	c8 01       	movw	r24, r16
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    2ade:	8f ef       	ldi	r24, 0xFF	; 255
    2ae0:	9f ef       	ldi	r25, 0xFF	; 255
    2ae2:	df 91       	pop	r29
    2ae4:	cf 91       	pop	r28
    2ae6:	1f 91       	pop	r17
    2ae8:	0f 91       	pop	r16
    2aea:	ff 90       	pop	r15
    2aec:	ef 90       	pop	r14
    2aee:	08 95       	ret

00002af0 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    2af0:	0f 93       	push	r16
    2af2:	1f 93       	push	r17
    2af4:	cf 93       	push	r28
    2af6:	df 93       	push	r29
    2af8:	8b 01       	movw	r16, r22
    2afa:	fc 01       	movw	r30, r24
    2afc:	c2 81       	ldd	r28, Z+2	; 0x02
    2afe:	d3 81       	ldd	r29, Z+3	; 0x03
    2b00:	20 97       	sbiw	r28, 0x00	; 0
    2b02:	71 f0       	breq	.+28     	; 0x2b20 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    2b04:	e8 81       	ld	r30, Y
    2b06:	f9 81       	ldd	r31, Y+1	; 0x01
    2b08:	04 80       	ldd	r0, Z+4	; 0x04
    2b0a:	f5 81       	ldd	r31, Z+5	; 0x05
    2b0c:	e0 2d       	mov	r30, r0
    2b0e:	b8 01       	movw	r22, r16
    2b10:	ce 01       	movw	r24, r28
    2b12:	09 95       	icall
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	31 f4       	brne	.+12     	; 0x2b24 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    2b18:	08 84       	ldd	r0, Y+8	; 0x08
    2b1a:	d9 85       	ldd	r29, Y+9	; 0x09
    2b1c:	c0 2d       	mov	r28, r0
    2b1e:	f0 cf       	rjmp	.-32     	; 0x2b00 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	df 91       	pop	r29
    2b26:	cf 91       	pop	r28
    2b28:	1f 91       	pop	r17
    2b2a:	0f 91       	pop	r16
    2b2c:	08 95       	ret

00002b2e <_ZN13PluggableUSB_12getShortNameEPc>:
    2b2e:	0f 93       	push	r16
    2b30:	1f 93       	push	r17
    2b32:	cf 93       	push	r28
    2b34:	df 93       	push	r29
    2b36:	8b 01       	movw	r16, r22
    2b38:	fc 01       	movw	r30, r24
    2b3a:	c2 81       	ldd	r28, Z+2	; 0x02
    2b3c:	d3 81       	ldd	r29, Z+3	; 0x03
    2b3e:	20 97       	sbiw	r28, 0x00	; 0
    2b40:	71 f0       	breq	.+28     	; 0x2b5e <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    2b42:	e8 81       	ld	r30, Y
    2b44:	f9 81       	ldd	r31, Y+1	; 0x01
    2b46:	06 80       	ldd	r0, Z+6	; 0x06
    2b48:	f7 81       	ldd	r31, Z+7	; 0x07
    2b4a:	e0 2d       	mov	r30, r0
    2b4c:	b8 01       	movw	r22, r16
    2b4e:	ce 01       	movw	r24, r28
    2b50:	09 95       	icall
    2b52:	08 0f       	add	r16, r24
    2b54:	11 1d       	adc	r17, r1
    2b56:	08 84       	ldd	r0, Y+8	; 0x08
    2b58:	d9 85       	ldd	r29, Y+9	; 0x09
    2b5a:	c0 2d       	mov	r28, r0
    2b5c:	f0 cf       	rjmp	.-32     	; 0x2b3e <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    2b5e:	f8 01       	movw	r30, r16
    2b60:	10 82       	st	Z, r1
    2b62:	df 91       	pop	r29
    2b64:	cf 91       	pop	r28
    2b66:	1f 91       	pop	r17
    2b68:	0f 91       	pop	r16
    2b6a:	08 95       	ret

00002b6c <_ZN13PluggableUSB_5setupER8USBSetup>:
    2b6c:	0f 93       	push	r16
    2b6e:	1f 93       	push	r17
    2b70:	cf 93       	push	r28
    2b72:	df 93       	push	r29
    2b74:	8b 01       	movw	r16, r22
    2b76:	fc 01       	movw	r30, r24
    2b78:	c2 81       	ldd	r28, Z+2	; 0x02
    2b7a:	d3 81       	ldd	r29, Z+3	; 0x03
    2b7c:	20 97       	sbiw	r28, 0x00	; 0
    2b7e:	71 f0       	breq	.+28     	; 0x2b9c <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    2b80:	e8 81       	ld	r30, Y
    2b82:	f9 81       	ldd	r31, Y+1	; 0x01
    2b84:	01 90       	ld	r0, Z+
    2b86:	f0 81       	ld	r31, Z
    2b88:	e0 2d       	mov	r30, r0
    2b8a:	b8 01       	movw	r22, r16
    2b8c:	ce 01       	movw	r24, r28
    2b8e:	09 95       	icall
    2b90:	81 11       	cpse	r24, r1
    2b92:	05 c0       	rjmp	.+10     	; 0x2b9e <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    2b94:	08 84       	ldd	r0, Y+8	; 0x08
    2b96:	d9 85       	ldd	r29, Y+9	; 0x09
    2b98:	c0 2d       	mov	r28, r0
    2b9a:	f0 cf       	rjmp	.-32     	; 0x2b7c <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	df 91       	pop	r29
    2ba0:	cf 91       	pop	r28
    2ba2:	1f 91       	pop	r17
    2ba4:	0f 91       	pop	r16
    2ba6:	08 95       	ret

00002ba8 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    2ba8:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <_ZGVZ12PluggableUSBvE3obj>
    2bac:	81 11       	cpse	r24, r1
    2bae:	0d c0       	rjmp	.+26     	; 0x2bca <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    2bb0:	82 e0       	ldi	r24, 0x02	; 2
    2bb2:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <_ZZ12PluggableUSBvE3obj>
    2bb6:	84 e0       	ldi	r24, 0x04	; 4
    2bb8:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <_ZZ12PluggableUSBvE3obj+0x1>
    2bbc:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <_ZZ12PluggableUSBvE3obj+0x3>
    2bc0:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    2bca:	87 e1       	ldi	r24, 0x17	; 23
    2bcc:	94 e0       	ldi	r25, 0x04	; 4
    2bce:	08 95       	ret

00002bd0 <__udivmodsi4>:
    2bd0:	a1 e2       	ldi	r26, 0x21	; 33
    2bd2:	1a 2e       	mov	r1, r26
    2bd4:	aa 1b       	sub	r26, r26
    2bd6:	bb 1b       	sub	r27, r27
    2bd8:	fd 01       	movw	r30, r26
    2bda:	0d c0       	rjmp	.+26     	; 0x2bf6 <__udivmodsi4_ep>

00002bdc <__udivmodsi4_loop>:
    2bdc:	aa 1f       	adc	r26, r26
    2bde:	bb 1f       	adc	r27, r27
    2be0:	ee 1f       	adc	r30, r30
    2be2:	ff 1f       	adc	r31, r31
    2be4:	a2 17       	cp	r26, r18
    2be6:	b3 07       	cpc	r27, r19
    2be8:	e4 07       	cpc	r30, r20
    2bea:	f5 07       	cpc	r31, r21
    2bec:	20 f0       	brcs	.+8      	; 0x2bf6 <__udivmodsi4_ep>
    2bee:	a2 1b       	sub	r26, r18
    2bf0:	b3 0b       	sbc	r27, r19
    2bf2:	e4 0b       	sbc	r30, r20
    2bf4:	f5 0b       	sbc	r31, r21

00002bf6 <__udivmodsi4_ep>:
    2bf6:	66 1f       	adc	r22, r22
    2bf8:	77 1f       	adc	r23, r23
    2bfa:	88 1f       	adc	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	1a 94       	dec	r1
    2c00:	69 f7       	brne	.-38     	; 0x2bdc <__udivmodsi4_loop>
    2c02:	60 95       	com	r22
    2c04:	70 95       	com	r23
    2c06:	80 95       	com	r24
    2c08:	90 95       	com	r25
    2c0a:	9b 01       	movw	r18, r22
    2c0c:	ac 01       	movw	r20, r24
    2c0e:	bd 01       	movw	r22, r26
    2c10:	cf 01       	movw	r24, r30
    2c12:	08 95       	ret

00002c14 <__tablejump2__>:
    2c14:	ee 0f       	add	r30, r30
    2c16:	ff 1f       	adc	r31, r31
    2c18:	05 90       	lpm	r0, Z+
    2c1a:	f4 91       	lpm	r31, Z
    2c1c:	e0 2d       	mov	r30, r0
    2c1e:	09 94       	ijmp

00002c20 <memset>:
    2c20:	dc 01       	movw	r26, r24
    2c22:	01 c0       	rjmp	.+2      	; 0x2c26 <memset+0x6>
    2c24:	6d 93       	st	X+, r22
    2c26:	41 50       	subi	r20, 0x01	; 1
    2c28:	50 40       	sbci	r21, 0x00	; 0
    2c2a:	e0 f7       	brcc	.-8      	; 0x2c24 <memset+0x4>
    2c2c:	08 95       	ret

00002c2e <_exit>:
    2c2e:	f8 94       	cli

00002c30 <__stop_program>:
    2c30:	ff cf       	rjmp	.-2      	; 0x2c30 <__stop_program>
