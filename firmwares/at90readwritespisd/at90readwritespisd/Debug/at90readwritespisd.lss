
at90readwritespisd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e0  00800100  00000d92  00000e26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a01  008002e0  008002e0  00001006  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001006  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001038  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000275b  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f53  00000000  00000000  0000390b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f94  00000000  00000000  0000485e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a0  00000000  00000000  000057f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000923  00000000  00000000  00005c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000159d  00000000  00000000  000065b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00007b54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	12 e0       	ldi	r17, 0x02	; 2
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e2 e9       	ldi	r30, 0x92	; 146
  ac:	fd e0       	ldi	r31, 0x0D	; 13
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a0 3e       	cpi	r26, 0xE0	; 224
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	2c e0       	ldi	r18, 0x0C	; 12
  c0:	a0 ee       	ldi	r26, 0xE0	; 224
  c2:	b2 e0       	ldi	r27, 0x02	; 2
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a1 3e       	cpi	r26, 0xE1	; 225
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	8b d4       	rcall	.+2326   	; 0x9e6 <main>
  d0:	5e c6       	rjmp	.+3260   	; 0xd8e <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <on_sd>:
        uart_puts("\r\n");
    }


    return i;
}
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	84 b9       	out	0x04, r24	; 4
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	8f 7b       	andi	r24, 0xBF	; 191
  de:	85 b9       	out	0x05, r24	; 5
  e0:	08 95       	ret

000000e2 <init_uart>:
  e2:	e9 ec       	ldi	r30, 0xC9	; 201
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	88 61       	ori	r24, 0x18	; 24
  ea:	80 83       	st	Z, r24
  ec:	87 e6       	ldi	r24, 0x67	; 103
  ee:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
  f2:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
  fc:	08 95       	ret

000000fe <uart_putc>:
  fe:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 102:	95 ff       	sbrs	r25, 5
 104:	fc cf       	rjmp	.-8      	; 0xfe <uart_putc>
 106:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 10a:	08 95       	ret

0000010c <uart_puts>:
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	ec 01       	movw	r28, r24
 112:	0f c0       	rjmp	.+30     	; 0x132 <uart_puts+0x26>
 114:	8a 30       	cpi	r24, 0x0A	; 10
 116:	49 f4       	brne	.+18     	; 0x12a <uart_puts+0x1e>
 118:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <__data_end>
 11c:	9d 30       	cpi	r25, 0x0D	; 13
 11e:	29 f0       	breq	.+10     	; 0x12a <uart_puts+0x1e>
 120:	8d e0       	ldi	r24, 0x0D	; 13
 122:	ed df       	rcall	.-38     	; 0xfe <uart_putc>
 124:	8a e0       	ldi	r24, 0x0A	; 10
 126:	eb df       	rcall	.-42     	; 0xfe <uart_putc>
 128:	01 c0       	rjmp	.+2      	; 0x12c <uart_puts+0x20>
 12a:	e9 df       	rcall	.-46     	; 0xfe <uart_putc>
 12c:	89 91       	ld	r24, Y+
 12e:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <__data_end>
 132:	88 81       	ld	r24, Y
 134:	81 11       	cpse	r24, r1
 136:	ee cf       	rjmp	.-36     	; 0x114 <uart_puts+0x8>
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <uart_putsnl>:
 13e:	e6 df       	rcall	.-52     	; 0x10c <uart_puts>
 140:	81 e1       	ldi	r24, 0x11	; 17
 142:	92 e0       	ldi	r25, 0x02	; 2
 144:	e3 cf       	rjmp	.-58     	; 0x10c <uart_puts>
 146:	08 95       	ret

00000148 <uart_printhexchar>:
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	61 97       	sbiw	r28, 0x11	; 17
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	de bf       	out	0x3e, r29	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	cd bf       	out	0x3d, r28	; 61
 15e:	18 2f       	mov	r17, r24
 160:	81 e1       	ldi	r24, 0x11	; 17
 162:	e0 e0       	ldi	r30, 0x00	; 0
 164:	f1 e0       	ldi	r31, 0x01	; 1
 166:	de 01       	movw	r26, r28
 168:	11 96       	adiw	r26, 0x01	; 1
 16a:	01 90       	ld	r0, Z+
 16c:	0d 92       	st	X+, r0
 16e:	8a 95       	dec	r24
 170:	e1 f7       	brne	.-8      	; 0x16a <uart_printhexchar+0x22>
 172:	81 2f       	mov	r24, r17
 174:	82 95       	swap	r24
 176:	8f 70       	andi	r24, 0x0F	; 15
 178:	e1 e0       	ldi	r30, 0x01	; 1
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	ec 0f       	add	r30, r28
 17e:	fd 1f       	adc	r31, r29
 180:	e8 0f       	add	r30, r24
 182:	f1 1d       	adc	r31, r1
 184:	80 81       	ld	r24, Z
 186:	bb df       	rcall	.-138    	; 0xfe <uart_putc>
 188:	1f 70       	andi	r17, 0x0F	; 15
 18a:	e1 e0       	ldi	r30, 0x01	; 1
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	ec 0f       	add	r30, r28
 190:	fd 1f       	adc	r31, r29
 192:	e1 0f       	add	r30, r17
 194:	f1 1d       	adc	r31, r1
 196:	80 81       	ld	r24, Z
 198:	b2 df       	rcall	.-156    	; 0xfe <uart_putc>
 19a:	61 96       	adiw	r28, 0x11	; 17
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	08 95       	ret

000001ae <uart_printhexdump>:
 1ae:	9f 92       	push	r9
 1b0:	af 92       	push	r10
 1b2:	bf 92       	push	r11
 1b4:	cf 92       	push	r12
 1b6:	df 92       	push	r13
 1b8:	ef 92       	push	r14
 1ba:	ff 92       	push	r15
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	ec 01       	movw	r28, r24
 1c6:	5b 01       	movw	r10, r22
 1c8:	67 2b       	or	r22, r23
 1ca:	09 f4       	brne	.+2      	; 0x1ce <uart_printhexdump+0x20>
 1cc:	3b c0       	rjmp	.+118    	; 0x244 <uart_printhexdump+0x96>
 1ce:	e1 2c       	mov	r14, r1
 1d0:	f1 2c       	mov	r15, r1
 1d2:	31 c0       	rjmp	.+98     	; 0x236 <uart_printhexdump+0x88>
 1d4:	6e 01       	movw	r12, r28
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	c8 1a       	sub	r12, r24
 1da:	d8 0a       	sbc	r13, r24
 1dc:	88 81       	ld	r24, Y
 1de:	b4 df       	rcall	.-152    	; 0x148 <uart_printhexchar>
 1e0:	80 e2       	ldi	r24, 0x20	; 32
 1e2:	8d df       	rcall	.-230    	; 0xfe <uart_putc>
 1e4:	ef ef       	ldi	r30, 0xFF	; 255
 1e6:	ee 1a       	sub	r14, r30
 1e8:	fe 0a       	sbc	r15, r30
 1ea:	c7 01       	movw	r24, r14
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	99 27       	eor	r25, r25
 1f0:	89 2b       	or	r24, r25
 1f2:	29 f0       	breq	.+10     	; 0x1fe <uart_printhexdump+0x50>
 1f4:	c5 01       	movw	r24, r10
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	08 17       	cp	r16, r24
 1fa:	19 07       	cpc	r17, r25
 1fc:	d9 f4       	brne	.+54     	; 0x234 <uart_printhexdump+0x86>
 1fe:	8e 01       	movw	r16, r28
 200:	0f 50       	subi	r16, 0x0F	; 15
 202:	11 09       	sbc	r17, r1
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	d0 e0       	ldi	r29, 0x00	; 0
 208:	0f c0       	rjmp	.+30     	; 0x228 <uart_printhexdump+0x7a>
 20a:	f8 01       	movw	r30, r16
 20c:	90 80       	ld	r9, Z
 20e:	89 2d       	mov	r24, r9
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	34 d5       	rcall	.+2664   	; 0xc7c <isprint>
 214:	89 2b       	or	r24, r25
 216:	19 f0       	breq	.+6      	; 0x21e <uart_printhexdump+0x70>
 218:	89 2d       	mov	r24, r9
 21a:	71 df       	rcall	.-286    	; 0xfe <uart_putc>
 21c:	02 c0       	rjmp	.+4      	; 0x222 <uart_printhexdump+0x74>
 21e:	8e e2       	ldi	r24, 0x2E	; 46
 220:	6e df       	rcall	.-292    	; 0xfe <uart_putc>
 222:	0f 5f       	subi	r16, 0xFF	; 255
 224:	1f 4f       	sbci	r17, 0xFF	; 255
 226:	21 96       	adiw	r28, 0x01	; 1
 228:	c0 31       	cpi	r28, 0x10	; 16
 22a:	d1 05       	cpc	r29, r1
 22c:	74 f3       	brlt	.-36     	; 0x20a <uart_printhexdump+0x5c>
 22e:	81 e1       	ldi	r24, 0x11	; 17
 230:	92 e0       	ldi	r25, 0x02	; 2
 232:	6c df       	rcall	.-296    	; 0x10c <uart_puts>
 234:	e6 01       	movw	r28, r12
 236:	87 01       	movw	r16, r14
 238:	ea 14       	cp	r14, r10
 23a:	fb 04       	cpc	r15, r11
 23c:	58 f2       	brcs	.-106    	; 0x1d4 <uart_printhexdump+0x26>
 23e:	81 e1       	ldi	r24, 0x11	; 17
 240:	92 e0       	ldi	r25, 0x02	; 2
 242:	64 df       	rcall	.-312    	; 0x10c <uart_puts>
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	ff 90       	pop	r15
 24e:	ef 90       	pop	r14
 250:	df 90       	pop	r13
 252:	cf 90       	pop	r12
 254:	bf 90       	pop	r11
 256:	af 90       	pop	r10
 258:	9f 90       	pop	r9
 25a:	08 95       	ret

0000025c <uart_printoa>:
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
 268:	e2 97       	sbiw	r28, 0x32	; 50
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	de bf       	out	0x3e, r29	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	cd bf       	out	0x3d, r28	; 61
 274:	dc 01       	movw	r26, r24
 276:	cb 01       	movw	r24, r22
 278:	8e 01       	movw	r16, r28
 27a:	0f 5f       	subi	r16, 0xFF	; 255
 27c:	1f 4f       	sbci	r17, 0xFF	; 255
 27e:	22 e3       	ldi	r18, 0x32	; 50
 280:	f8 01       	movw	r30, r16
 282:	11 92       	st	Z+, r1
 284:	2a 95       	dec	r18
 286:	e9 f7       	brne	.-6      	; 0x282 <uart_printoa+0x26>
 288:	b8 01       	movw	r22, r16
 28a:	12 d5       	rcall	.+2596   	; 0xcb0 <itoa>
 28c:	c8 01       	movw	r24, r16
 28e:	3e df       	rcall	.-388    	; 0x10c <uart_puts>
 290:	e2 96       	adiw	r28, 0x32	; 50
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	08 95       	ret

000002a6 <uart_printundecint32>:
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	e2 97       	sbiw	r28, 0x32	; 50
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	f8 94       	cli
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	cd bf       	out	0x3d, r28	; 61
 2be:	8e 01       	movw	r16, r28
 2c0:	0f 5f       	subi	r16, 0xFF	; 255
 2c2:	1f 4f       	sbci	r17, 0xFF	; 255
 2c4:	22 e3       	ldi	r18, 0x32	; 50
 2c6:	f8 01       	movw	r30, r16
 2c8:	11 92       	st	Z+, r1
 2ca:	2a 95       	dec	r18
 2cc:	e9 f7       	brne	.-6      	; 0x2c8 <uart_printundecint32+0x22>
 2ce:	2a e0       	ldi	r18, 0x0A	; 10
 2d0:	a8 01       	movw	r20, r16
 2d2:	02 d5       	rcall	.+2564   	; 0xcd8 <__ltoa_ncheck>
 2d4:	c8 01       	movw	r24, r16
 2d6:	1a df       	rcall	.-460    	; 0x10c <uart_puts>
 2d8:	e2 96       	adiw	r28, 0x32	; 50
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	08 95       	ret

000002ee <uart_printdecint32>:
 2ee:	4a e0       	ldi	r20, 0x0A	; 10
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	b4 cf       	rjmp	.-152    	; 0x25c <uart_printoa>
 2f4:	08 95       	ret

000002f6 <uart_printhexint32>:
 2f6:	40 e1       	ldi	r20, 0x10	; 16
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	b0 cf       	rjmp	.-160    	; 0x25c <uart_printoa>
 2fc:	08 95       	ret

000002fe <ignore_fuses>:

void ignore_fuses(void)
{
    MCUSR &= ~(1 << WDRF);
 2fe:	84 b7       	in	r24, 0x34	; 52
 300:	87 7f       	andi	r24, 0xF7	; 247
 302:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	a8 95       	wdr
 30a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 30e:	88 61       	ori	r24, 0x18	; 24
 310:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 314:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 318:	0f be       	out	0x3f, r0	; 63
    wdt_disable();

    CLKPR = (1 << CLKPCE);
 31a:	e1 e6       	ldi	r30, 0x61	; 97
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 e8       	ldi	r24, 0x80	; 128
 320:	80 83       	st	Z, r24
    CLKPR = 0;
 322:	10 82       	st	Z, r1
 324:	08 95       	ret

00000326 <ioinit>:

void ioinit (void)
{
    //pull up

    PORTA = 0b11111111;
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	82 b9       	out	0x02, r24	; 2
    PORTB = 0b11111111;
 32a:	85 b9       	out	0x05, r24	; 5
    PORTC = 0b11111111;
 32c:	88 b9       	out	0x08, r24	; 8
    PORTD = 0b11111111;
 32e:	8b b9       	out	0x0b, r24	; 11
    //PORTE = 0b11111111;
    PORTF = 0b11111111;
 330:	81 bb       	out	0x11, r24	; 17
 332:	08 95       	ret

00000334 <SPI_init>:
    //PORTG = 0b00011111;
}

void SPI_init(void)
{
    CS_DDR |= CS; // SD card circuit select as output
 334:	84 b1       	in	r24, 0x04	; 4
 336:	81 60       	ori	r24, 0x01	; 1
 338:	84 b9       	out	0x04, r24	; 4
    DDRB |= MOSI + SCK; // MOSI and SCK as outputs
 33a:	84 b1       	in	r24, 0x04	; 4
 33c:	86 60       	ori	r24, 0x06	; 6
 33e:	84 b9       	out	0x04, r24	; 4
    PORTB |= MISO; // pullup in MISO, might not be needed
 340:	85 b1       	in	r24, 0x05	; 5
 342:	88 60       	ori	r24, 0x08	; 8
 344:	85 b9       	out	0x05, r24	; 5
 346:	08 95       	ret

00000348 <SPI_write>:
}

unsigned char SPI_write(uint8_t ch)
{
    SPDR = ch;
 348:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF))) {}
 34a:	0d b4       	in	r0, 0x2d	; 45
 34c:	07 fe       	sbrs	r0, 7
 34e:	fd cf       	rjmp	.-6      	; 0x34a <SPI_write+0x2>
    return SPDR;
 350:	8e b5       	in	r24, 0x2e	; 46
}
 352:	08 95       	ret

00000354 <wait_sd_some_cycl>:

void wait_sd_some_cycl(void)
{
    SPI_write(0xFF);
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	f8 df       	rcall	.-16     	; 0x348 <SPI_write>
    SPI_write(0xFF);
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	f6 df       	rcall	.-20     	; 0x348 <SPI_write>
    SPI_write(0xFF);
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	f4 df       	rcall	.-24     	; 0x348 <SPI_write>
    SPI_write(0xFF);
 360:	8f ef       	ldi	r24, 0xFF	; 255
 362:	f2 df       	rcall	.-28     	; 0x348 <SPI_write>
    SPI_write(0xFF);
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	f0 df       	rcall	.-32     	; 0x348 <SPI_write>
    SPI_write(0xFF);
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	ee df       	rcall	.-36     	; 0x348 <SPI_write>
    SPI_write(0xFF);
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	ec df       	rcall	.-40     	; 0x348 <SPI_write>
    SPI_write(0xFF);
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	ea df       	rcall	.-44     	; 0x348 <SPI_write>
 374:	8f ef       	ldi	r24, 0xFF	; 255
    SPI_write(0xFF);
 376:	e8 df       	rcall	.-48     	; 0x348 <SPI_write>
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	e6 cf       	rjmp	.-52     	; 0x348 <SPI_write>
    SPI_write(0xFF);
 37c:	08 95       	ret

0000037e <read_spi_while_byte_is_not>:
 37e:	8f 92       	push	r8
 380:	9f 92       	push	r9
 382:	af 92       	push	r10
}


bool read_spi_while_byte_is_not(uint8_t byte, uint32_t max_timeout)
{
 384:	bf 92       	push	r11
 386:	cf 92       	push	r12
 388:	df 92       	push	r13
 38a:	ef 92       	push	r14
 38c:	ff 92       	push	r15
 38e:	cf 93       	push	r28
 390:	c8 2f       	mov	r28, r24
 392:	4a 01       	movw	r8, r20
 394:	5b 01       	movw	r10, r22
    for (uint32_t i = 0; i < max_timeout; i++)
 396:	c1 2c       	mov	r12, r1
 398:	d1 2c       	mov	r13, r1
 39a:	76 01       	movw	r14, r12
 39c:	17 c0       	rjmp	.+46     	; 0x3cc <read_spi_while_byte_is_not+0x4e>
    {
        if (SPI_write(0xFF) == byte)
 39e:	8f ef       	ldi	r24, 0xFF	; 255
 3a0:	d3 df       	rcall	.-90     	; 0x348 <SPI_write>
 3a2:	8c 17       	cp	r24, r28
 3a4:	e9 f0       	breq	.+58     	; 0x3e0 <read_spi_while_byte_is_not+0x62>
        {
            return true;
        }

        if ((i + 1) % 1000 == 0)
 3a6:	8f ef       	ldi	r24, 0xFF	; 255
 3a8:	c8 1a       	sub	r12, r24
 3aa:	d8 0a       	sbc	r13, r24
 3ac:	e8 0a       	sbc	r14, r24
 3ae:	f8 0a       	sbc	r15, r24
 3b0:	c7 01       	movw	r24, r14
 3b2:	b6 01       	movw	r22, r12
 3b4:	28 ee       	ldi	r18, 0xE8	; 232
 3b6:	33 e0       	ldi	r19, 0x03	; 3
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	50 e0       	ldi	r21, 0x00	; 0
 3bc:	3b d4       	rcall	.+2166   	; 0xc34 <__udivmodsi4>
 3be:	67 2b       	or	r22, r23
 3c0:	68 2b       	or	r22, r24
 3c2:	69 2b       	or	r22, r25
 3c4:	19 f4       	brne	.+6      	; 0x3cc <read_spi_while_byte_is_not+0x4e>
        {
            uart_putsnl("\r\nsd waiting for data...");
 3c6:	81 e1       	ldi	r24, 0x11	; 17
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	b9 de       	rcall	.-654    	; 0x13e <uart_putsnl>
}


bool read_spi_while_byte_is_not(uint8_t byte, uint32_t max_timeout)
{
    for (uint32_t i = 0; i < max_timeout; i++)
 3cc:	c8 14       	cp	r12, r8
 3ce:	d9 04       	cpc	r13, r9
 3d0:	ea 04       	cpc	r14, r10
 3d2:	fb 04       	cpc	r15, r11
        {
            uart_putsnl("\r\nsd waiting for data...");
        }
    }

    uart_putsnl("\r\nERROR sd waiting for data timeout...");
 3d4:	20 f3       	brcs	.-56     	; 0x39e <read_spi_while_byte_is_not+0x20>
 3d6:	8a e2       	ldi	r24, 0x2A	; 42
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	b1 de       	rcall	.-670    	; 0x13e <uart_putsnl>

    return false;
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	01 c0       	rjmp	.+2      	; 0x3e2 <read_spi_while_byte_is_not+0x64>
{
    for (uint32_t i = 0; i < max_timeout; i++)
    {
        if (SPI_write(0xFF) == byte)
        {
            return true;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
    }

    uart_putsnl("\r\nERROR sd waiting for data timeout...");

    return false;
}
 3e2:	cf 91       	pop	r28
 3e4:	ff 90       	pop	r15
 3e6:	ef 90       	pop	r14
 3e8:	df 90       	pop	r13
 3ea:	cf 90       	pop	r12
 3ec:	bf 90       	pop	r11
 3ee:	af 90       	pop	r10
 3f0:	9f 90       	pop	r9
 3f2:	8f 90       	pop	r8
 3f4:	08 95       	ret

000003f6 <SD_command>:

unsigned char SD_command(unsigned char cmd,
                         unsigned long arg,
                         unsigned char crc,
                         unsigned char read)
{
 3f6:	bf 92       	push	r11
 3f8:	cf 92       	push	r12
 3fa:	df 92       	push	r13
 3fc:	ef 92       	push	r14
 3fe:	ff 92       	push	r15
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	a0 97       	sbiw	r28, 0x20	; 32
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	f8 94       	cli
 412:	de bf       	out	0x3e, r29	; 62
 414:	0f be       	out	0x3f, r0	; 63
 416:	cd bf       	out	0x3d, r28	; 61
 418:	18 2f       	mov	r17, r24
 41a:	e4 2e       	mov	r14, r20
 41c:	d5 2e       	mov	r13, r21
 41e:	c6 2e       	mov	r12, r22
 420:	b7 2e       	mov	r11, r23
 422:	f2 2e       	mov	r15, r18
    unsigned char i;
    unsigned char buffer[32] = { 0 };
 424:	fe 01       	movw	r30, r28
 426:	31 96       	adiw	r30, 0x01	; 1
 428:	80 e2       	ldi	r24, 0x20	; 32
 42a:	df 01       	movw	r26, r30
 42c:	1d 92       	st	X+, r1
 42e:	8a 95       	dec	r24
 430:	e9 f7       	brne	.-6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
    unsigned char ret = 0xFF;

    wait_sd_some_cycl();
 432:	90 df       	rcall	.-224    	; 0x354 <wait_sd_some_cycl>

    uart_puts("CMD ");
 434:	81 e5       	ldi	r24, 0x51	; 81
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	69 de       	rcall	.-814    	; 0x10c <uart_puts>
    uart_printhexchar(cmd);
 43a:	81 2f       	mov	r24, r17
 43c:	85 de       	rcall	.-758    	; 0x148 <uart_printhexchar>
    uart_putc(' ');
 43e:	80 e2       	ldi	r24, 0x20	; 32
 440:	5e de       	rcall	.-836    	; 0xfe <uart_putc>

    SPI_write(cmd);
 442:	81 2f       	mov	r24, r17
 444:	81 df       	rcall	.-254    	; 0x348 <SPI_write>
    SPI_write(arg >> 24);
 446:	8b 2d       	mov	r24, r11
 448:	7f df       	rcall	.-258    	; 0x348 <SPI_write>
    SPI_write(arg >> 16);
 44a:	8c 2d       	mov	r24, r12
 44c:	7d df       	rcall	.-262    	; 0x348 <SPI_write>
    SPI_write(arg >> 8);
 44e:	8d 2d       	mov	r24, r13
 450:	7b df       	rcall	.-266    	; 0x348 <SPI_write>
 452:	8e 2d       	mov	r24, r14
    SPI_write(arg);
 454:	79 df       	rcall	.-270    	; 0x348 <SPI_write>
 456:	8f 2d       	mov	r24, r15
    SPI_write(crc);
 458:	77 df       	rcall	.-274    	; 0x348 <SPI_write>
 45a:	10 e0       	ldi	r17, 0x00	; 0
 45c:	0c c0       	rjmp	.+24     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>

    for (i = 0; i < read; i++)
 45e:	e1 2e       	mov	r14, r17
 460:	f1 2c       	mov	r15, r1
    {
        buffer[i] = SPI_write(0xFF);
 462:	8f ef       	ldi	r24, 0xFF	; 255
 464:	71 df       	rcall	.-286    	; 0x348 <SPI_write>
 466:	e1 e0       	ldi	r30, 0x01	; 1
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	ec 0f       	add	r30, r28
 46c:	fd 1f       	adc	r31, r29
 46e:	ee 0d       	add	r30, r14
 470:	ff 1d       	adc	r31, r15
 472:	80 83       	st	Z, r24
 474:	1f 5f       	subi	r17, 0xFF	; 255
 476:	10 17       	cp	r17, r16
 478:	90 f3       	brcs	.-28     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
    SPI_write(arg >> 16);
    SPI_write(arg >> 8);
    SPI_write(arg);
    SPI_write(crc);

    for (i = 0; i < read; i++)
 47a:	ee 24       	eor	r14, r14
 47c:	ea 94       	dec	r14
 47e:	f1 2c       	mov	r15, r1
 480:	10 c0       	rjmp	.+32     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 482:	e1 e0       	ldi	r30, 0x01	; 1
 484:	f0 e0       	ldi	r31, 0x00	; 0
        buffer[i] = SPI_write(0xFF);
    }

    for (i = 0; i < read; i++)
    {
        uart_printhexchar(buffer[i]);
 486:	ec 0f       	add	r30, r28
 488:	fd 1f       	adc	r31, r29
 48a:	ef 0d       	add	r30, r15
 48c:	f1 1d       	adc	r31, r1
 48e:	10 81       	ld	r17, Z
 490:	81 2f       	mov	r24, r17
 492:	5a de       	rcall	.-844    	; 0x148 <uart_printhexchar>
 494:	80 e2       	ldi	r24, 0x20	; 32
 496:	33 de       	rcall	.-922    	; 0xfe <uart_putc>
        uart_putc(' ');
 498:	1f 3f       	cpi	r17, 0xFF	; 255
 49a:	09 f4       	brne	.+2      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49c:	1e 2d       	mov	r17, r14
        if (buffer[i] != 0xFF)
 49e:	f3 94       	inc	r15
 4a0:	e1 2e       	mov	r14, r17
 4a2:	f0 16       	cp	r15, r16
    for (i = 0; i < read; i++)
    {
        buffer[i] = SPI_write(0xFF);
    }

    for (i = 0; i < read; i++)
 4a4:	70 f3       	brcs	.-36     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 4a6:	81 e1       	ldi	r24, 0x11	; 17
 4a8:	92 e0       	ldi	r25, 0x02	; 2
 4aa:	30 de       	rcall	.-928    	; 0x10c <uart_puts>
        {
            ret = buffer[i];
        }
    }

    uart_puts("\r\n");
 4ac:	8e 2d       	mov	r24, r14
 4ae:	a0 96       	adiw	r28, 0x20	; 32
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	f8 94       	cli

    return ret;
}
 4b4:	de bf       	out	0x3e, r29	; 62
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	cd bf       	out	0x3d, r28	; 61
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	ff 90       	pop	r15
 4c4:	ef 90       	pop	r14
 4c6:	df 90       	pop	r13
 4c8:	cf 90       	pop	r12
 4ca:	bf 90       	pop	r11
 4cc:	08 95       	ret

000004ce <SD_init>:
 4ce:	0f 93       	push	r16
 4d0:	cf 93       	push	r28
 4d2:	82 e5       	ldi	r24, 0x52	; 82
 4d4:	8c bd       	out	0x2c, r24	; 44
{
    char i;

    SPI_SLOW();
    // ]r:10
    CS_DISABLE();
 4d6:	85 b1       	in	r24, 0x05	; 5
 4d8:	81 60       	ori	r24, 0x01	; 1
 4da:	85 b9       	out	0x05, r24	; 5
    for (i = 0; i < 10; i++) // idle for 1 bytes / 80 clocks
 4dc:	c0 e0       	ldi	r28, 0x00	; 0
 4de:	03 c0       	rjmp	.+6      	; 0x4e6 <SD_init+0x18>
    {
        SPI_write(0xFF);
 4e0:	8f ef       	ldi	r24, 0xFF	; 255
 4e2:	32 df       	rcall	.-412    	; 0x348 <SPI_write>
    char i;

    SPI_SLOW();
    // ]r:10
    CS_DISABLE();
    for (i = 0; i < 10; i++) // idle for 1 bytes / 80 clocks
 4e4:	cf 5f       	subi	r28, 0xFF	; 255
 4e6:	ca 30       	cpi	r28, 0x0A	; 10
 4e8:	d8 f3       	brcs	.-10     	; 0x4e0 <SD_init+0x12>
    {
        SPI_write(0xFF);
    }

    uart_putsnl("clearing sd...");
 4ea:	86 e5       	ldi	r24, 0x56	; 86
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	27 de       	rcall	.-946    	; 0x13e <uart_putsnl>
    CS_ENABLE();
 4f0:	85 b1       	in	r24, 0x05	; 5
 4f2:	8e 7f       	andi	r24, 0xFE	; 254
 4f4:	85 b9       	out	0x05, r24	; 5
    if (!read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
 4f6:	40 ea       	ldi	r20, 0xA0	; 160
 4f8:	56 e8       	ldi	r21, 0x86	; 134
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	3e df       	rcall	.-388    	; 0x37e <read_spi_while_byte_is_not>
 502:	88 23       	and	r24, r24
 504:	09 f4       	brne	.+2      	; 0x508 <SD_init+0x3a>
 506:	53 c0       	rjmp	.+166    	; 0x5ae <SD_init+0xe0>
    {
        return SD_INIT_ERR_CANT_CLEAR;
    }
    CS_DISABLE();
 508:	85 b1       	in	r24, 0x05	; 5
 50a:	81 60       	ori	r24, 0x01	; 1
 50c:	85 b9       	out	0x05, r24	; 5

    // [0x40 0x00 0x00 0x00 0x00 0x95 r:8] until we get "1"
    for (i = 0; i < 10; i++)
 50e:	c0 e0       	ldi	r28, 0x00	; 0
 510:	19 c0       	rjmp	.+50     	; 0x544 <SD_init+0x76>
    {
        CS_ENABLE();
 512:	85 b1       	in	r24, 0x05	; 5
 514:	8e 7f       	andi	r24, 0xFE	; 254
 516:	85 b9       	out	0x05, r24	; 5
        if (SD_command(CMD0, 0x00000000, 0x95, 8) == 1)
 518:	08 e0       	ldi	r16, 0x08	; 8
 51a:	25 e9       	ldi	r18, 0x95	; 149
 51c:	40 e0       	ldi	r20, 0x00	; 0
 51e:	50 e0       	ldi	r21, 0x00	; 0
 520:	ba 01       	movw	r22, r20
 522:	80 e4       	ldi	r24, 0x40	; 64
 524:	68 df       	rcall	.-304    	; 0x3f6 <SD_command>
 526:	81 30       	cpi	r24, 0x01	; 1
 528:	79 f0       	breq	.+30     	; 0x548 <SD_init+0x7a>
        {
            break;
        }
        CS_DISABLE();
 52a:	85 b1       	in	r24, 0x05	; 5
 52c:	81 60       	ori	r24, 0x01	; 1
 52e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 530:	2f ef       	ldi	r18, 0xFF	; 255
 532:	81 ee       	ldi	r24, 0xE1	; 225
 534:	94 e0       	ldi	r25, 0x04	; 4
 536:	21 50       	subi	r18, 0x01	; 1
 538:	80 40       	sbci	r24, 0x00	; 0
 53a:	90 40       	sbci	r25, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <SD_init+0x68>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <SD_init+0x72>
 540:	00 00       	nop
        return SD_INIT_ERR_CANT_CLEAR;
    }
    CS_DISABLE();

    // [0x40 0x00 0x00 0x00 0x00 0x95 r:8] until we get "1"
    for (i = 0; i < 10; i++)
 542:	cf 5f       	subi	r28, 0xFF	; 255
 544:	ca 30       	cpi	r28, 0x0A	; 10
 546:	28 f3       	brcs	.-54     	; 0x512 <SD_init+0x44>
            break;
        }
        CS_DISABLE();
        _delay_ms(100);
    }
    if (i == 10) // card did not respond to initialization
 548:	ca 30       	cpi	r28, 0x0A	; 10
 54a:	99 f1       	breq	.+102    	; 0x5b2 <SD_init+0xe4>
 54c:	c0 e0       	ldi	r28, 0x00	; 0
 54e:	19 c0       	rjmp	.+50     	; 0x582 <SD_init+0xb4>
    }

    // CMD1 until card comes out of idle, but maximum of 10 times
    for (i = 0; i < 10; i++)
    {
        CS_ENABLE();
 550:	85 b1       	in	r24, 0x05	; 5
 552:	8e 7f       	andi	r24, 0xFE	; 254
 554:	85 b9       	out	0x05, r24	; 5
        if (SD_command(CMD1, 0x00000000, 0xFF, 8) == 0)
 556:	08 e0       	ldi	r16, 0x08	; 8
 558:	2f ef       	ldi	r18, 0xFF	; 255
 55a:	40 e0       	ldi	r20, 0x00	; 0
 55c:	50 e0       	ldi	r21, 0x00	; 0
 55e:	ba 01       	movw	r22, r20
 560:	81 e4       	ldi	r24, 0x41	; 65
 562:	49 df       	rcall	.-366    	; 0x3f6 <SD_command>
 564:	88 23       	and	r24, r24
 566:	79 f0       	breq	.+30     	; 0x586 <SD_init+0xb8>
        {
            break;
        }
        CS_DISABLE();
 568:	85 b1       	in	r24, 0x05	; 5
 56a:	81 60       	ori	r24, 0x01	; 1
 56c:	85 b9       	out	0x05, r24	; 5
 56e:	2f ef       	ldi	r18, 0xFF	; 255
 570:	81 ee       	ldi	r24, 0xE1	; 225
 572:	94 e0       	ldi	r25, 0x04	; 4
 574:	21 50       	subi	r18, 0x01	; 1
 576:	80 40       	sbci	r24, 0x00	; 0
 578:	90 40       	sbci	r25, 0x00	; 0
 57a:	e1 f7       	brne	.-8      	; 0x574 <SD_init+0xa6>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <SD_init+0xb0>
 57e:	00 00       	nop
    {
        return SD_INIT_ERR_DONT_RESPOND;
    }

    // CMD1 until card comes out of idle, but maximum of 10 times
    for (i = 0; i < 10; i++)
 580:	cf 5f       	subi	r28, 0xFF	; 255
 582:	ca 30       	cpi	r28, 0x0A	; 10
 584:	28 f3       	brcs	.-54     	; 0x550 <SD_init+0x82>
            break;
        }
        CS_DISABLE();
        _delay_ms(100);
    }
    if (i == 10) // card did not come out of idle
 586:	ca 30       	cpi	r28, 0x0A	; 10
 588:	b1 f0       	breq	.+44     	; 0x5b6 <SD_init+0xe8>
    {
        return SD_INIT_ERR_DONT_OUT_IDLE;
    }

    // SET_BLOCKLEN to 512
    CS_ENABLE();
 58a:	85 b1       	in	r24, 0x05	; 5
 58c:	8e 7f       	andi	r24, 0xFE	; 254
 58e:	85 b9       	out	0x05, r24	; 5
    SD_command(CMD16, 512, 0xFF, 8);
 590:	08 e0       	ldi	r16, 0x08	; 8
 592:	2f ef       	ldi	r18, 0xFF	; 255
 594:	40 e0       	ldi	r20, 0x00	; 0
 596:	52 e0       	ldi	r21, 0x02	; 2
 598:	60 e0       	ldi	r22, 0x00	; 0
 59a:	70 e0       	ldi	r23, 0x00	; 0
 59c:	80 e5       	ldi	r24, 0x50	; 80
 59e:	2b df       	rcall	.-426    	; 0x3f6 <SD_command>
    CS_DISABLE();
 5a0:	85 b1       	in	r24, 0x05	; 5
 5a2:	81 60       	ori	r24, 0x01	; 1
 5a4:	85 b9       	out	0x05, r24	; 5

    SPI_FAST();
 5a6:	81 e5       	ldi	r24, 0x51	; 81
 5a8:	8c bd       	out	0x2c, r24	; 44

    return SD_INIT_OK;
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <SD_init+0xea>

    uart_putsnl("clearing sd...");
    CS_ENABLE();
    if (!read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
    {
        return SD_INIT_ERR_CANT_CLEAR;
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <SD_init+0xea>
        CS_DISABLE();
        _delay_ms(100);
    }
    if (i == 10) // card did not respond to initialization
    {
        return SD_INIT_ERR_DONT_RESPOND;
 5b2:	82 e0       	ldi	r24, 0x02	; 2
 5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <SD_init+0xea>
        CS_DISABLE();
        _delay_ms(100);
    }
    if (i == 10) // card did not come out of idle
    {
        return SD_INIT_ERR_DONT_OUT_IDLE;
 5b6:	83 e0       	ldi	r24, 0x03	; 3
    CS_DISABLE();

    SPI_FAST();

    return SD_INIT_OK;
}
 5b8:	cf 91       	pop	r28
 5ba:	0f 91       	pop	r16
 5bc:	08 95       	ret

000005be <SD_read_sector>:

// TODO: This function will not exit gracefully if SD card does not do what it should
bool SD_read_sector(unsigned long sector, uint8_t* buffer)
{
 5be:	8f 92       	push	r8
 5c0:	9f 92       	push	r9
 5c2:	af 92       	push	r10
 5c4:	bf 92       	push	r11
 5c6:	ef 92       	push	r14
 5c8:	ff 92       	push	r15
 5ca:	0f 93       	push	r16
 5cc:	1f 93       	push	r17
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	4b 01       	movw	r8, r22
 5d4:	5c 01       	movw	r10, r24
 5d6:	7a 01       	movw	r14, r20
    unsigned short i = 0;
    bool retf = false;

    CS_ENABLE();
 5d8:	85 b1       	in	r24, 0x05	; 5
 5da:	8e 7f       	andi	r24, 0xFE	; 254
 5dc:	85 b9       	out	0x05, r24	; 5
    wait_sd_some_cycl();
 5de:	ba de       	rcall	.-652    	; 0x354 <wait_sd_some_cycl>

    SPI_write(CMD17);
 5e0:	81 e5       	ldi	r24, 0x51	; 81
 5e2:	b2 de       	rcall	.-668    	; 0x348 <SPI_write>
    SPI_write(sector >> 15); // sector*512 >> 24
 5e4:	d5 01       	movw	r26, r10
 5e6:	c4 01       	movw	r24, r8
 5e8:	07 2e       	mov	r0, r23
 5ea:	7f e0       	ldi	r23, 0x0F	; 15
 5ec:	b6 95       	lsr	r27
 5ee:	a7 95       	ror	r26
 5f0:	97 95       	ror	r25
 5f2:	87 95       	ror	r24
 5f4:	7a 95       	dec	r23
 5f6:	d1 f7       	brne	.-12     	; 0x5ec <SD_read_sector+0x2e>
 5f8:	70 2d       	mov	r23, r0
 5fa:	a6 de       	rcall	.-692    	; 0x348 <SPI_write>
    SPI_write(sector >> 7); // sector*512 >> 16
 5fc:	d5 01       	movw	r26, r10
 5fe:	c4 01       	movw	r24, r8
 600:	68 94       	set
 602:	16 f8       	bld	r1, 6
 604:	b6 95       	lsr	r27
 606:	a7 95       	ror	r26
 608:	97 95       	ror	r25
 60a:	87 95       	ror	r24
 60c:	16 94       	lsr	r1
 60e:	d1 f7       	brne	.-12     	; 0x604 <SD_read_sector+0x46>
    SPI_write(sector << 1); // sector*512 >> 8
 610:	9b de       	rcall	.-714    	; 0x348 <SPI_write>
 612:	88 2d       	mov	r24, r8
    SPI_write(0);          // sector*512
 614:	88 0f       	add	r24, r24
 616:	98 de       	rcall	.-720    	; 0x348 <SPI_write>
 618:	80 e0       	ldi	r24, 0x00	; 0
    SPI_write(0xFF);
 61a:	96 de       	rcall	.-724    	; 0x348 <SPI_write>
 61c:	8f ef       	ldi	r24, 0xFF	; 255

    // wait for 0
    if (read_spi_while_byte_is_not(0, RECOMMEND_WAIT_TIMEOUT_SPI))
 61e:	94 de       	rcall	.-728    	; 0x348 <SPI_write>
 620:	40 ea       	ldi	r20, 0xA0	; 160
 622:	56 e8       	ldi	r21, 0x86	; 134
 624:	61 e0       	ldi	r22, 0x01	; 1
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	a9 de       	rcall	.-686    	; 0x37e <read_spi_while_byte_is_not>
 62c:	88 23       	and	r24, r24
    {
        // wait for data Start Block token
        if (read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI))
 62e:	f1 f0       	breq	.+60     	; 0x66c <SD_read_sector+0xae>
 630:	40 ea       	ldi	r20, 0xA0	; 160
 632:	56 e8       	ldi	r21, 0x86	; 134
 634:	61 e0       	ldi	r22, 0x01	; 1
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	8e ef       	ldi	r24, 0xFE	; 254
 63a:	a1 de       	rcall	.-702    	; 0x37e <read_spi_while_byte_is_not>
 63c:	81 11       	cpse	r24, r1
 63e:	0a c0       	rjmp	.+20     	; 0x654 <SD_read_sector+0x96>
        {
            for (i = 0; i < 512; i++)
            {
                buffer[i] = SPI_write(0xFF);
 640:	16 c0       	rjmp	.+44     	; 0x66e <SD_read_sector+0xb0>
 642:	87 01       	movw	r16, r14
 644:	0c 0f       	add	r16, r28
 646:	1d 1f       	adc	r17, r29
 648:	8f ef       	ldi	r24, 0xFF	; 255
 64a:	7e de       	rcall	.-772    	; 0x348 <SPI_write>
 64c:	f8 01       	movw	r30, r16
    if (read_spi_while_byte_is_not(0, RECOMMEND_WAIT_TIMEOUT_SPI))
    {
        // wait for data Start Block token
        if (read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI))
        {
            for (i = 0; i < 512; i++)
 64e:	80 83       	st	Z, r24
 650:	21 96       	adiw	r28, 0x01	; 1
 652:	02 c0       	rjmp	.+4      	; 0x658 <SD_read_sector+0x9a>
 654:	c0 e0       	ldi	r28, 0x00	; 0
 656:	d0 e0       	ldi	r29, 0x00	; 0
 658:	c1 15       	cp	r28, r1
 65a:	f2 e0       	ldi	r31, 0x02	; 2
            {
                buffer[i] = SPI_write(0xFF);
            }
            // skip checksum
            SPI_write(0xFF);
 65c:	df 07       	cpc	r29, r31
 65e:	88 f3       	brcs	.-30     	; 0x642 <SD_read_sector+0x84>
 660:	8f ef       	ldi	r24, 0xFF	; 255
            SPI_write(0xFF);
 662:	72 de       	rcall	.-796    	; 0x348 <SPI_write>
 664:	8f ef       	ldi	r24, 0xFF	; 255
 666:	70 de       	rcall	.-800    	; 0x348 <SPI_write>

            retf = true;
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	01 c0       	rjmp	.+2      	; 0x66e <SD_read_sector+0xb0>

// TODO: This function will not exit gracefully if SD card does not do what it should
bool SD_read_sector(unsigned long sector, uint8_t* buffer)
{
    unsigned short i = 0;
    bool retf = false;
 66c:	80 e0       	ldi	r24, 0x00	; 0
            retf = true;
        }

    }

    CS_DISABLE();
 66e:	95 b1       	in	r25, 0x05	; 5
 670:	91 60       	ori	r25, 0x01	; 1
 672:	95 b9       	out	0x05, r25	; 5

    return retf;
}
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	0f 91       	pop	r16
 67c:	ff 90       	pop	r15
 67e:	ef 90       	pop	r14
 680:	bf 90       	pop	r11
 682:	af 90       	pop	r10
 684:	9f 90       	pop	r9
 686:	8f 90       	pop	r8
 688:	08 95       	ret

0000068a <SD_write_sector>:

bool SD_write_sector(unsigned long sector, uint8_t* buffer)
{
 68a:	cf 92       	push	r12
 68c:	df 92       	push	r13
 68e:	ef 92       	push	r14
 690:	ff 92       	push	r15
 692:	0f 93       	push	r16
 694:	1f 93       	push	r17
 696:	cf 93       	push	r28
 698:	df 93       	push	r29
 69a:	6b 01       	movw	r12, r22
 69c:	7c 01       	movw	r14, r24
 69e:	8a 01       	movw	r16, r20
    unsigned short i = 0;
    bool retf = false;

    CS_ENABLE();
 6a0:	85 b1       	in	r24, 0x05	; 5
 6a2:	8e 7f       	andi	r24, 0xFE	; 254
 6a4:	85 b9       	out	0x05, r24	; 5
    wait_sd_some_cycl();
 6a6:	56 de       	rcall	.-852    	; 0x354 <wait_sd_some_cycl>

    SPI_write(CMD24);
 6a8:	88 e5       	ldi	r24, 0x58	; 88
 6aa:	4e de       	rcall	.-868    	; 0x348 <SPI_write>
    SPI_write(sector >> 15); // sector*512 >> 24
 6ac:	d7 01       	movw	r26, r14
 6ae:	c6 01       	movw	r24, r12
 6b0:	07 2e       	mov	r0, r23
 6b2:	7f e0       	ldi	r23, 0x0F	; 15
 6b4:	b6 95       	lsr	r27
 6b6:	a7 95       	ror	r26
 6b8:	97 95       	ror	r25
 6ba:	87 95       	ror	r24
 6bc:	7a 95       	dec	r23
 6be:	d1 f7       	brne	.-12     	; 0x6b4 <SD_write_sector+0x2a>
 6c0:	70 2d       	mov	r23, r0
 6c2:	42 de       	rcall	.-892    	; 0x348 <SPI_write>
    SPI_write(sector >> 7); // sector*512 >> 16
 6c4:	d7 01       	movw	r26, r14
 6c6:	c6 01       	movw	r24, r12
 6c8:	68 94       	set
 6ca:	16 f8       	bld	r1, 6
 6cc:	b6 95       	lsr	r27
 6ce:	a7 95       	ror	r26
 6d0:	97 95       	ror	r25
 6d2:	87 95       	ror	r24
 6d4:	16 94       	lsr	r1
 6d6:	d1 f7       	brne	.-12     	; 0x6cc <SD_write_sector+0x42>
    SPI_write(sector << 1); // sector*512 >> 8
 6d8:	37 de       	rcall	.-914    	; 0x348 <SPI_write>
 6da:	8c 2d       	mov	r24, r12
    SPI_write(0);          // sector*512
 6dc:	88 0f       	add	r24, r24
 6de:	34 de       	rcall	.-920    	; 0x348 <SPI_write>
 6e0:	80 e0       	ldi	r24, 0x00	; 0
    SPI_write(0xFF);
 6e2:	32 de       	rcall	.-924    	; 0x348 <SPI_write>
 6e4:	8f ef       	ldi	r24, 0xFF	; 255

    // wait for 0
    if (read_spi_while_byte_is_not(0, RECOMMEND_WAIT_TIMEOUT_SPI))
 6e6:	30 de       	rcall	.-928    	; 0x348 <SPI_write>
 6e8:	40 ea       	ldi	r20, 0xA0	; 160
 6ea:	56 e8       	ldi	r21, 0x86	; 134
 6ec:	61 e0       	ldi	r22, 0x01	; 1
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	45 de       	rcall	.-886    	; 0x37e <read_spi_while_byte_is_not>
 6f4:	88 23       	and	r24, r24
    {
        // wait for 0xff
        if (read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
 6f6:	69 f1       	breq	.+90     	; 0x752 <SD_write_sector+0xc8>
 6f8:	40 ea       	ldi	r20, 0xA0	; 160
 6fa:	56 e8       	ldi	r21, 0x86	; 134
 6fc:	61 e0       	ldi	r22, 0x01	; 1
 6fe:	70 e0       	ldi	r23, 0x00	; 0
 700:	8f ef       	ldi	r24, 0xFF	; 255
 702:	3d de       	rcall	.-902    	; 0x37e <read_spi_while_byte_is_not>
 704:	88 23       	and	r24, r24
        {
            // SEND Start Block token
            SPI_write(0xFE);
 706:	39 f1       	breq	.+78     	; 0x756 <SD_write_sector+0xcc>
 708:	8e ef       	ldi	r24, 0xFE	; 254
            for (i = 0; i < 512; i++)
 70a:	1e de       	rcall	.-964    	; 0x348 <SPI_write>
 70c:	c0 e0       	ldi	r28, 0x00	; 0
 70e:	d0 e0       	ldi	r29, 0x00	; 0
            {
                SPI_write(buffer[i]);
 710:	06 c0       	rjmp	.+12     	; 0x71e <SD_write_sector+0x94>
 712:	f8 01       	movw	r30, r16
 714:	ec 0f       	add	r30, r28
 716:	fd 1f       	adc	r31, r29
        // wait for 0xff
        if (read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
        {
            // SEND Start Block token
            SPI_write(0xFE);
            for (i = 0; i < 512; i++)
 718:	80 81       	ld	r24, Z
 71a:	16 de       	rcall	.-980    	; 0x348 <SPI_write>
 71c:	21 96       	adiw	r28, 0x01	; 1
 71e:	c1 15       	cp	r28, r1
 720:	82 e0       	ldi	r24, 0x02	; 2
            {
                SPI_write(buffer[i]);
            }

            // skip checksum
            SPI_write(0);
 722:	d8 07       	cpc	r29, r24
 724:	b0 f3       	brcs	.-20     	; 0x712 <SD_write_sector+0x88>
            SPI_write(0);
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	0f de       	rcall	.-994    	; 0x348 <SPI_write>
 72a:	80 e0       	ldi	r24, 0x00	; 0

            if (SPI_write(0) == CMD24_SUCCESS_BYTE)
 72c:	0d de       	rcall	.-998    	; 0x348 <SPI_write>
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	0b de       	rcall	.-1002   	; 0x348 <SPI_write>
 732:	85 3e       	cpi	r24, 0xE5	; 229
            {
                // wait for idle
                if (read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
 734:	49 f4       	brne	.+18     	; 0x748 <SD_write_sector+0xbe>
 736:	40 ea       	ldi	r20, 0xA0	; 160
 738:	56 e8       	ldi	r21, 0x86	; 134
 73a:	61 e0       	ldi	r22, 0x01	; 1
 73c:	70 e0       	ldi	r23, 0x00	; 0
 73e:	8f ef       	ldi	r24, 0xFF	; 255
 740:	1e de       	rcall	.-964    	; 0x37e <read_spi_while_byte_is_not>
 742:	81 11       	cpse	r24, r1
 744:	0a c0       	rjmp	.+20     	; 0x75a <SD_write_sector+0xd0>
 746:	0a c0       	rjmp	.+20     	; 0x75c <SD_write_sector+0xd2>
                    retf = true;
                }
            }
            else
            {
                uart_putsnl("\r\nERROR! CMD24_SUCCESS_BYTE dont recved\r\n");
 748:	85 e6       	ldi	r24, 0x65	; 101
 74a:	91 e0       	ldi	r25, 0x01	; 1
 74c:	f8 dc       	rcall	.-1552   	; 0x13e <uart_putsnl>
 74e:	80 e0       	ldi	r24, 0x00	; 0
}

bool SD_write_sector(unsigned long sector, uint8_t* buffer)
{
    unsigned short i = 0;
    bool retf = false;
 750:	05 c0       	rjmp	.+10     	; 0x75c <SD_write_sector+0xd2>
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	03 c0       	rjmp	.+6      	; 0x75c <SD_write_sector+0xd2>
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	01 c0       	rjmp	.+2      	; 0x75c <SD_write_sector+0xd2>
 75a:	81 e0       	ldi	r24, 0x01	; 1
            if (SPI_write(0) == CMD24_SUCCESS_BYTE)
            {
                // wait for idle
                if (read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
                {
                    retf = true;
 75c:	95 b1       	in	r25, 0x05	; 5
                uart_putsnl("\r\nERROR! CMD24_SUCCESS_BYTE dont recved\r\n");
            }
        }
    }

    CS_DISABLE();
 75e:	91 60       	ori	r25, 0x01	; 1
 760:	95 b9       	out	0x05, r25	; 5
 762:	df 91       	pop	r29

    return retf;
}
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	ff 90       	pop	r15
 76c:	ef 90       	pop	r14
 76e:	df 90       	pop	r13
 770:	cf 90       	pop	r12
 772:	08 95       	ret

00000774 <sd_get_number_of_sectors>:
 774:	7f 92       	push	r7

bool sd_get_number_of_sectors(uint32_t* number_of_sectors)
{
 776:	8f 92       	push	r8
 778:	9f 92       	push	r9
 77a:	af 92       	push	r10
 77c:	bf 92       	push	r11
 77e:	cf 92       	push	r12
 780:	df 92       	push	r13
 782:	ef 92       	push	r14
 784:	ff 92       	push	r15
 786:	0f 93       	push	r16
 788:	1f 93       	push	r17
 78a:	cf 93       	push	r28
 78c:	df 93       	push	r29
 78e:	8c 01       	movw	r16, r24
    uint32_t ret = 1;
    uint8_t csd_read_bl_len = 0;
    uint8_t csd_c_size_mult = 0;
    uint32_t csd_c_size = 0;

    CS_ENABLE();
 790:	85 b1       	in	r24, 0x05	; 5
 792:	8e 7f       	andi	r24, 0xFE	; 254
 794:	85 b9       	out	0x05, r24	; 5
    wait_sd_some_cycl();
 796:	de dd       	rcall	.-1092   	; 0x354 <wait_sd_some_cycl>

    SPI_write(CMD9);
 798:	89 e4       	ldi	r24, 0x49	; 73
 79a:	d6 dd       	rcall	.-1108   	; 0x348 <SPI_write>
    SPI_write(0);
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	d4 dd       	rcall	.-1112   	; 0x348 <SPI_write>
    SPI_write(0);
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	d2 dd       	rcall	.-1116   	; 0x348 <SPI_write>
    SPI_write(0);
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	d0 dd       	rcall	.-1120   	; 0x348 <SPI_write>
 7a8:	80 e0       	ldi	r24, 0x00	; 0
    SPI_write(0);
 7aa:	ce dd       	rcall	.-1124   	; 0x348 <SPI_write>
 7ac:	40 ea       	ldi	r20, 0xA0	; 160

    if (read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI))
 7ae:	56 e8       	ldi	r21, 0x86	; 134
 7b0:	61 e0       	ldi	r22, 0x01	; 1
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	8e ef       	ldi	r24, 0xFE	; 254
 7b6:	e3 dd       	rcall	.-1082   	; 0x37e <read_spi_while_byte_is_not>
 7b8:	81 11       	cpse	r24, r1
 7ba:	57 c0       	rjmp	.+174    	; 0x86a <sd_get_number_of_sectors+0xf6>
 7bc:	c1 2c       	mov	r12, r1
    return retf;
}

bool sd_get_number_of_sectors(uint32_t* number_of_sectors)
{
    uint32_t ret = 1;
 7be:	d1 2c       	mov	r13, r1
 7c0:	76 01       	movw	r14, r12
 7c2:	c3 94       	inc	r12
 7c4:	5f c0       	rjmp	.+190    	; 0x884 <sd_get_number_of_sectors+0x110>
 7c6:	8f ef       	ldi	r24, 0xFF	; 255

    if (read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI))
    {
        for (uint8_t i = 0; i < 18; i++)
        {
            uint8_t b = SPI_write(0xFF);
 7c8:	bf dd       	rcall	.-1154   	; 0x348 <SPI_write>
 7ca:	c7 30       	cpi	r28, 0x07	; 7
 7cc:	c9 f0       	breq	.+50     	; 0x800 <sd_get_number_of_sectors+0x8c>

            switch (i)
 7ce:	28 f4       	brcc	.+10     	; 0x7da <sd_get_number_of_sectors+0x66>
 7d0:	c5 30       	cpi	r28, 0x05	; 5
 7d2:	49 f0       	breq	.+18     	; 0x7e6 <sd_get_number_of_sectors+0x72>
 7d4:	c6 30       	cpi	r28, 0x06	; 6
 7d6:	51 f0       	breq	.+20     	; 0x7ec <sd_get_number_of_sectors+0x78>
 7d8:	46 c0       	rjmp	.+140    	; 0x866 <sd_get_number_of_sectors+0xf2>
 7da:	c9 30       	cpi	r28, 0x09	; 9
 7dc:	71 f1       	breq	.+92     	; 0x83a <sd_get_number_of_sectors+0xc6>
 7de:	f0 f0       	brcs	.+60     	; 0x81c <sd_get_number_of_sectors+0xa8>
 7e0:	ca 30       	cpi	r28, 0x0A	; 10
 7e2:	79 f1       	breq	.+94     	; 0x842 <sd_get_number_of_sectors+0xce>
 7e4:	40 c0       	rjmp	.+128    	; 0x866 <sd_get_number_of_sectors+0xf2>
 7e6:	8f 70       	andi	r24, 0x0F	; 15
 7e8:	78 2e       	mov	r7, r24
            {
                case 5:
                    csd_read_bl_len = b & 0x0f;
 7ea:	3d c0       	rjmp	.+122    	; 0x866 <sd_get_number_of_sectors+0xf2>
 7ec:	48 2f       	mov	r20, r24
                    break;
 7ee:	43 70       	andi	r20, 0x03	; 3

                case 6:
                    csd_c_size = b & 0x03;
 7f0:	50 e0       	ldi	r21, 0x00	; 0
 7f2:	60 e0       	ldi	r22, 0x00	; 0
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	88 24       	eor	r8, r8
 7f8:	94 2e       	mov	r9, r20
                    csd_c_size <<= 8;
 7fa:	a5 2e       	mov	r10, r21
 7fc:	b6 2e       	mov	r11, r22
 7fe:	33 c0       	rjmp	.+102    	; 0x866 <sd_get_number_of_sectors+0xf2>
 800:	b5 01       	movw	r22, r10
                    break;
 802:	a4 01       	movw	r20, r8

                case 7:
                    csd_c_size |= b;
 804:	48 2b       	or	r20, r24
 806:	4a 01       	movw	r8, r20
 808:	5b 01       	movw	r10, r22
                    csd_c_size <<= 2;
 80a:	88 0c       	add	r8, r8
 80c:	99 1c       	adc	r9, r9
 80e:	aa 1c       	adc	r10, r10
 810:	bb 1c       	adc	r11, r11
 812:	88 0c       	add	r8, r8
 814:	99 1c       	adc	r9, r9
 816:	aa 1c       	adc	r10, r10
 818:	bb 1c       	adc	r11, r11
 81a:	25 c0       	rjmp	.+74     	; 0x866 <sd_get_number_of_sectors+0xf2>
 81c:	82 95       	swap	r24
                    break;
 81e:	86 95       	lsr	r24

                case 8:
                    csd_c_size |= b >> 6;
 820:	86 95       	lsr	r24
 822:	83 70       	andi	r24, 0x03	; 3
 824:	b5 01       	movw	r22, r10
 826:	a4 01       	movw	r20, r8
 828:	48 2b       	or	r20, r24
 82a:	4a 01       	movw	r8, r20
 82c:	5b 01       	movw	r10, r22
                    csd_c_size++;
 82e:	8f ef       	ldi	r24, 0xFF	; 255
 830:	88 1a       	sub	r8, r24
 832:	98 0a       	sbc	r9, r24
 834:	a8 0a       	sbc	r10, r24
 836:	b8 0a       	sbc	r11, r24
 838:	16 c0       	rjmp	.+44     	; 0x866 <sd_get_number_of_sectors+0xf2>
 83a:	83 70       	andi	r24, 0x03	; 3
                    break;
 83c:	d8 2f       	mov	r29, r24

                case 9:
                    csd_c_size_mult = b & 0x03;
 83e:	dd 0f       	add	r29, r29
                    csd_c_size_mult <<= 1;
 840:	12 c0       	rjmp	.+36     	; 0x866 <sd_get_number_of_sectors+0xf2>
 842:	88 1f       	adc	r24, r24
                    break;
 844:	88 27       	eor	r24, r24

                case 10:
                    csd_c_size_mult |= b >> 7;
 846:	88 1f       	adc	r24, r24
 848:	d8 2b       	or	r29, r24
 84a:	87 2d       	mov	r24, r7
 84c:	90 e0       	ldi	r25, 0x00	; 0
                    ret = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
 84e:	8d 0f       	add	r24, r29
 850:	91 1d       	adc	r25, r1
 852:	02 96       	adiw	r24, 0x02	; 2
 854:	75 01       	movw	r14, r10
 856:	64 01       	movw	r12, r8
 858:	04 c0       	rjmp	.+8      	; 0x862 <sd_get_number_of_sectors+0xee>
 85a:	cc 0c       	add	r12, r12
 85c:	dd 1c       	adc	r13, r13
 85e:	ee 1c       	adc	r14, r14
 860:	ff 1c       	adc	r15, r15
 862:	8a 95       	dec	r24
 864:	d2 f7       	brpl	.-12     	; 0x85a <sd_get_number_of_sectors+0xe6>
 866:	cf 5f       	subi	r28, 0xFF	; 255
 868:	0a c0       	rjmp	.+20     	; 0x87e <sd_get_number_of_sectors+0x10a>
    SPI_write(0);
    SPI_write(0);

    if (read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI))
    {
        for (uint8_t i = 0; i < 18; i++)
 86a:	c0 e0       	ldi	r28, 0x00	; 0
 86c:	81 2c       	mov	r8, r1
 86e:	91 2c       	mov	r9, r1
 870:	54 01       	movw	r10, r8
 872:	d0 e0       	ldi	r29, 0x00	; 0
 874:	71 2c       	mov	r7, r1
 876:	c1 2c       	mov	r12, r1
 878:	d1 2c       	mov	r13, r1
 87a:	76 01       	movw	r14, r12
 87c:	c3 94       	inc	r12
 87e:	c2 31       	cpi	r28, 0x12	; 18
 880:	08 f4       	brcc	.+2      	; 0x884 <sd_get_number_of_sectors+0x110>
 882:	a1 cf       	rjmp	.-190    	; 0x7c6 <sd_get_number_of_sectors+0x52>
 884:	85 b1       	in	r24, 0x05	; 5
 886:	81 60       	ori	r24, 0x01	; 1
                    break;
            }
        }
    }

    CS_DISABLE();
 888:	85 b9       	out	0x05, r24	; 5
 88a:	d7 01       	movw	r26, r14
 88c:	c6 01       	movw	r24, r12

    if (ret % 512 != 0)
 88e:	91 70       	andi	r25, 0x01	; 1
 890:	aa 27       	eor	r26, r26
 892:	bb 27       	eor	r27, r27
 894:	89 2b       	or	r24, r25
 896:	8a 2b       	or	r24, r26
 898:	8b 2b       	or	r24, r27
 89a:	29 f0       	breq	.+10     	; 0x8a6 <sd_get_number_of_sectors+0x132>
 89c:	8f e8       	ldi	r24, 0x8F	; 143
    {
        uart_putsnl("\r\nERROR! number of bytes is not % 512\r\n");
 89e:	91 e0       	ldi	r25, 0x01	; 1
 8a0:	4e dc       	rcall	.-1892   	; 0x13e <uart_putsnl>
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	0f c0       	rjmp	.+30     	; 0x8c4 <sd_get_number_of_sectors+0x150>
        return false;
 8a6:	0b 2e       	mov	r0, r27
 8a8:	b9 e0       	ldi	r27, 0x09	; 9
    }

    *number_of_sectors = ret / 512;
 8aa:	f6 94       	lsr	r15
 8ac:	e7 94       	ror	r14
 8ae:	d7 94       	ror	r13
 8b0:	c7 94       	ror	r12
 8b2:	ba 95       	dec	r27
 8b4:	d1 f7       	brne	.-12     	; 0x8aa <sd_get_number_of_sectors+0x136>
 8b6:	b0 2d       	mov	r27, r0
 8b8:	f8 01       	movw	r30, r16
 8ba:	c0 82       	st	Z, r12
 8bc:	d1 82       	std	Z+1, r13	; 0x01
 8be:	e2 82       	std	Z+2, r14	; 0x02
 8c0:	f3 82       	std	Z+3, r15	; 0x03
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	df 91       	pop	r29

    return true;
 8c6:	cf 91       	pop	r28
}
 8c8:	1f 91       	pop	r17
 8ca:	0f 91       	pop	r16
 8cc:	ff 90       	pop	r15
 8ce:	ef 90       	pop	r14
 8d0:	df 90       	pop	r13
 8d2:	cf 90       	pop	r12
 8d4:	bf 90       	pop	r11
 8d6:	af 90       	pop	r10
 8d8:	9f 90       	pop	r9
 8da:	8f 90       	pop	r8
 8dc:	7f 90       	pop	r7
 8de:	08 95       	ret

000008e0 <sd_raw_initmultiread>:
 8e0:	cf 92       	push	r12
 8e2:	df 92       	push	r13

void sd_raw_initmultiread(uint32_t sector)
{
 8e4:	ef 92       	push	r14
 8e6:	ff 92       	push	r15
 8e8:	6b 01       	movw	r12, r22
 8ea:	7c 01       	movw	r14, r24
    CS_ENABLE();
 8ec:	85 b1       	in	r24, 0x05	; 5
 8ee:	8e 7f       	andi	r24, 0xFE	; 254
 8f0:	85 b9       	out	0x05, r24	; 5
    wait_sd_some_cycl();
 8f2:	30 dd       	rcall	.-1440   	; 0x354 <wait_sd_some_cycl>

    SPI_write(CMD18);
 8f4:	82 e5       	ldi	r24, 0x52	; 82
 8f6:	28 dd       	rcall	.-1456   	; 0x348 <SPI_write>
    SPI_write(sector >> 15); // sector*512 >> 24
 8f8:	d7 01       	movw	r26, r14
 8fa:	c6 01       	movw	r24, r12
 8fc:	07 2e       	mov	r0, r23
 8fe:	7f e0       	ldi	r23, 0x0F	; 15
 900:	b6 95       	lsr	r27
 902:	a7 95       	ror	r26
 904:	97 95       	ror	r25
 906:	87 95       	ror	r24
 908:	7a 95       	dec	r23
 90a:	d1 f7       	brne	.-12     	; 0x900 <sd_raw_initmultiread+0x20>
 90c:	70 2d       	mov	r23, r0
 90e:	1c dd       	rcall	.-1480   	; 0x348 <SPI_write>
    SPI_write(sector >> 7); // sector*512 >> 16
 910:	d7 01       	movw	r26, r14
 912:	c6 01       	movw	r24, r12
 914:	68 94       	set
 916:	16 f8       	bld	r1, 6
 918:	b6 95       	lsr	r27
 91a:	a7 95       	ror	r26
 91c:	97 95       	ror	r25
 91e:	87 95       	ror	r24
 920:	16 94       	lsr	r1
 922:	d1 f7       	brne	.-12     	; 0x918 <sd_raw_initmultiread+0x38>
    SPI_write(sector << 1); // sector*512 >> 8
 924:	11 dd       	rcall	.-1502   	; 0x348 <SPI_write>
 926:	8c 2d       	mov	r24, r12
    SPI_write(0);          // sector*512
 928:	88 0f       	add	r24, r24
 92a:	0e dd       	rcall	.-1508   	; 0x348 <SPI_write>
 92c:	80 e0       	ldi	r24, 0x00	; 0
    SPI_write(0xFF);
 92e:	0c dd       	rcall	.-1512   	; 0x348 <SPI_write>
 930:	8f ef       	ldi	r24, 0xFF	; 255

    read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI);
 932:	0a dd       	rcall	.-1516   	; 0x348 <SPI_write>
 934:	40 ea       	ldi	r20, 0xA0	; 160
 936:	56 e8       	ldi	r21, 0x86	; 134
 938:	61 e0       	ldi	r22, 0x01	; 1
 93a:	70 e0       	ldi	r23, 0x00	; 0
 93c:	8e ef       	ldi	r24, 0xFE	; 254
 93e:	1f dd       	rcall	.-1474   	; 0x37e <read_spi_while_byte_is_not>
}
 940:	ff 90       	pop	r15
 942:	ef 90       	pop	r14
 944:	df 90       	pop	r13
 946:	cf 90       	pop	r12
 948:	08 95       	ret

0000094a <read_multi_buff>:

void read_multi_buff(uint8_t* buff)
{
 94a:	ef 92       	push	r14
 94c:	ff 92       	push	r15
 94e:	0f 93       	push	r16
 950:	1f 93       	push	r17
 952:	cf 93       	push	r28
 954:	df 93       	push	r29
 956:	7c 01       	movw	r14, r24
    for (int j = 0; j < 512; j++)
 958:	c0 e0       	ldi	r28, 0x00	; 0
 95a:	d0 e0       	ldi	r29, 0x00	; 0
 95c:	08 c0       	rjmp	.+16     	; 0x96e <read_multi_buff+0x24>
    {
        buff[j] = SPI_write(0xFF);
 95e:	87 01       	movw	r16, r14
 960:	0c 0f       	add	r16, r28
 962:	1d 1f       	adc	r17, r29
 964:	8f ef       	ldi	r24, 0xFF	; 255
 966:	f0 dc       	rcall	.-1568   	; 0x348 <SPI_write>
 968:	f8 01       	movw	r30, r16
 96a:	80 83       	st	Z, r24
    read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI);
}

void read_multi_buff(uint8_t* buff)
{
    for (int j = 0; j < 512; j++)
 96c:	21 96       	adiw	r28, 0x01	; 1
 96e:	c1 15       	cp	r28, r1
 970:	f2 e0       	ldi	r31, 0x02	; 2
 972:	df 07       	cpc	r29, r31
 974:	a4 f3       	brlt	.-24     	; 0x95e <read_multi_buff+0x14>
    {
        buff[j] = SPI_write(0xFF);
    }
    read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI);
 976:	40 ea       	ldi	r20, 0xA0	; 160
 978:	56 e8       	ldi	r21, 0x86	; 134
 97a:	61 e0       	ldi	r22, 0x01	; 1
 97c:	70 e0       	ldi	r23, 0x00	; 0
 97e:	8e ef       	ldi	r24, 0xFE	; 254
 980:	fe dc       	rcall	.-1540   	; 0x37e <read_spi_while_byte_is_not>
}
 982:	df 91       	pop	r29
 984:	cf 91       	pop	r28
 986:	1f 91       	pop	r17
 988:	0f 91       	pop	r16
 98a:	ff 90       	pop	r15
 98c:	ef 90       	pop	r14
 98e:	08 95       	ret

00000990 <sd_raw_stopmultiread>:

void sd_raw_stopmultiread(void)
{
    wait_sd_some_cycl();
 990:	e1 dc       	rcall	.-1598   	; 0x354 <wait_sd_some_cycl>

    SPI_write(CMD12);
 992:	8c e4       	ldi	r24, 0x4C	; 76
 994:	d9 dc       	rcall	.-1614   	; 0x348 <SPI_write>
    SPI_write(0);
 996:	80 e0       	ldi	r24, 0x00	; 0
 998:	d7 dc       	rcall	.-1618   	; 0x348 <SPI_write>
    SPI_write(0);
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	d5 dc       	rcall	.-1622   	; 0x348 <SPI_write>
    SPI_write(0);
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	d3 dc       	rcall	.-1626   	; 0x348 <SPI_write>
    SPI_write(0);
 9a2:	80 e0       	ldi	r24, 0x00	; 0
 9a4:	d1 dc       	rcall	.-1630   	; 0x348 <SPI_write>

    SPI_write(0xFF);
 9a6:	8f ef       	ldi	r24, 0xFF	; 255
 9a8:	cf dc       	rcall	.-1634   	; 0x348 <SPI_write>
    SPI_write(0xFF);
 9aa:	8f ef       	ldi	r24, 0xFF	; 255
 9ac:	cd dc       	rcall	.-1638   	; 0x348 <SPI_write>
    SPI_write(0xFF);
 9ae:	8f ef       	ldi	r24, 0xFF	; 255
 9b0:	cb dc       	rcall	.-1642   	; 0x348 <SPI_write>
    SPI_write(0xFF);
 9b2:	8f ef       	ldi	r24, 0xFF	; 255
 9b4:	c9 dc       	rcall	.-1646   	; 0x348 <SPI_write>
    SPI_write(0xFF);
 9b6:	8f ef       	ldi	r24, 0xFF	; 255
 9b8:	c7 dc       	rcall	.-1650   	; 0x348 <SPI_write>
    SPI_write(0xFF);
 9ba:	8f ef       	ldi	r24, 0xFF	; 255
 9bc:	c5 dc       	rcall	.-1654   	; 0x348 <SPI_write>
    SPI_write(0xFF);
 9be:	8f ef       	ldi	r24, 0xFF	; 255
 9c0:	c3 dc       	rcall	.-1658   	; 0x348 <SPI_write>
 9c2:	8f ef       	ldi	r24, 0xFF	; 255
    SPI_write(0xFF);
 9c4:	c1 dc       	rcall	.-1662   	; 0x348 <SPI_write>
 9c6:	8f ef       	ldi	r24, 0xFF	; 255
    SPI_write(0xFF);
 9c8:	bf dc       	rcall	.-1666   	; 0x348 <SPI_write>
 9ca:	8f ef       	ldi	r24, 0xFF	; 255
 9cc:	bd dc       	rcall	.-1670   	; 0x348 <SPI_write>
    SPI_write(0xFF);
 9ce:	8f ef       	ldi	r24, 0xFF	; 255
 9d0:	bb dc       	rcall	.-1674   	; 0x348 <SPI_write>
 9d2:	40 ea       	ldi	r20, 0xA0	; 160
    SPI_write(0xFF);
 9d4:	56 e8       	ldi	r21, 0x86	; 134
 9d6:	61 e0       	ldi	r22, 0x01	; 1
 9d8:	70 e0       	ldi	r23, 0x00	; 0

    read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI);
 9da:	8f ef       	ldi	r24, 0xFF	; 255
 9dc:	d0 dc       	rcall	.-1632   	; 0x37e <read_spi_while_byte_is_not>
 9de:	85 b1       	in	r24, 0x05	; 5
 9e0:	81 60       	ori	r24, 0x01	; 1
 9e2:	85 b9       	out	0x05, r24	; 5
 9e4:	08 95       	ret

000009e6 <main>:
 9e6:	cf 92       	push	r12

    CS_DISABLE();
 9e8:	df 92       	push	r13
 9ea:	ef 92       	push	r14
 9ec:	ff 92       	push	r15
 9ee:	0f 93       	push	r16

#include <string.h>


int main(int argc, char** argv)
{
 9f0:	1f 93       	push	r17
 9f2:	cf 93       	push	r28
 9f4:	df 93       	push	r29
 9f6:	cd b7       	in	r28, 0x3d	; 61
 9f8:	de b7       	in	r29, 0x3e	; 62
 9fa:	c4 50       	subi	r28, 0x04	; 4
 9fc:	d4 40       	sbci	r29, 0x04	; 4
 9fe:	0f b6       	in	r0, 0x3f	; 63
 a00:	f8 94       	cli
 a02:	de bf       	out	0x3e, r29	; 62
 a04:	0f be       	out	0x3f, r0	; 63
 a06:	cd bf       	out	0x3d, r28	; 61
    uint8_t current_sector[512] = { 0 };
 a08:	80 e0       	ldi	r24, 0x00	; 0
 a0a:	92 e0       	ldi	r25, 0x02	; 2
 a0c:	fe 01       	movw	r30, r28
 a0e:	31 96       	adiw	r30, 0x01	; 1
 a10:	df 01       	movw	r26, r30
 a12:	9c 01       	movw	r18, r24
 a14:	1d 92       	st	X+, r1
 a16:	21 50       	subi	r18, 0x01	; 1
 a18:	30 40       	sbci	r19, 0x00	; 0
 a1a:	e1 f7       	brne	.-8      	; 0xa14 <main+0x2e>
    uint8_t zero_sector[512] = { 0 };
 a1c:	fe 5f       	subi	r31, 0xFE	; 254
 a1e:	df 01       	movw	r26, r30
 a20:	9c 01       	movw	r18, r24
 a22:	1d 92       	st	X+, r1
 a24:	21 50       	subi	r18, 0x01	; 1
 a26:	30 40       	sbci	r19, 0x00	; 0
 a28:	e1 f7       	brne	.-8      	; 0xa22 <main+0x3c>
    char ret;

    ignore_fuses();
 a2a:	69 dc       	rcall	.-1838   	; 0x2fe <ignore_fuses>
    ioinit();
 a2c:	7c dc       	rcall	.-1800   	; 0x326 <ioinit>
    init_uart();
 a2e:	59 db       	rcall	.-2382   	; 0xe2 <init_uart>
 a30:	51 db       	rcall	.-2398   	; 0xd4 <on_sd>
    on_sd();
 a32:	87 eb       	ldi	r24, 0xB7	; 183

    uart_putsnl("\r\n\r\nhellow dreg");
 a34:	91 e0       	ldi	r25, 0x01	; 1
 a36:	83 db       	rcall	.-2298   	; 0x13e <uart_putsnl>
 a38:	7d dc       	rcall	.-1798   	; 0x334 <SPI_init>
    uart_readbuff_until_newline(buff, 10, true);
    uart_puts("you pressed: ");
    uart_putsnl(buff);
    */

    SPI_init();
 a3a:	49 dd       	rcall	.-1390   	; 0x4ce <SD_init>
 a3c:	18 2f       	mov	r17, r24

    ret = SD_init();
 a3e:	88 23       	and	r24, r24
 a40:	41 f0       	breq	.+16     	; 0xa52 <main+0x6c>
    if (ret)
 a42:	87 ec       	ldi	r24, 0xC7	; 199
 a44:	91 e0       	ldi	r25, 0x01	; 1
    {
        uart_puts("SD err: ");
 a46:	62 db       	rcall	.-2364   	; 0x10c <uart_puts>
 a48:	81 2f       	mov	r24, r17
 a4a:	7e db       	rcall	.-2308   	; 0x148 <uart_printhexchar>
        uart_printhexchar(ret);
 a4c:	8f ef       	ldi	r24, 0xFF	; 255
 a4e:	9f ef       	ldi	r25, 0xFF	; 255
        return -1;
 a50:	e1 c0       	rjmp	.+450    	; 0xc14 <main+0x22e>
 a52:	80 ed       	ldi	r24, 0xD0	; 208
 a54:	91 e0       	ldi	r25, 0x01	; 1
    }

    uart_puts("SD init sucesss!\r\n");
 a56:	5a db       	rcall	.-2380   	; 0x10c <uart_puts>
 a58:	83 ee       	ldi	r24, 0xE3	; 227
 a5a:	91 e0       	ldi	r25, 0x01	; 1
 a5c:	57 db       	rcall	.-2386   	; 0x10c <uart_puts>

    uart_puts("number of sectors in sd: 0x");
 a5e:	cf 5f       	subi	r28, 0xFF	; 255
 a60:	db 4f       	sbci	r29, 0xFB	; 251
 a62:	18 82       	st	Y, r1
 a64:	19 82       	std	Y+1, r1	; 0x01
    uint32_t total_sectors = 0;
 a66:	1a 82       	std	Y+2, r1	; 0x02
 a68:	1b 82       	std	Y+3, r1	; 0x03
 a6a:	c1 50       	subi	r28, 0x01	; 1
 a6c:	d4 40       	sbci	r29, 0x04	; 4
 a6e:	ce 01       	movw	r24, r28
 a70:	8f 5f       	subi	r24, 0xFF	; 255
 a72:	9b 4f       	sbci	r25, 0xFB	; 251
    if (sd_get_number_of_sectors(&total_sectors))
 a74:	7f de       	rcall	.-770    	; 0x774 <sd_get_number_of_sectors>
 a76:	88 23       	and	r24, r24
 a78:	49 f1       	breq	.+82     	; 0xacc <main+0xe6>
 a7a:	cf 5f       	subi	r28, 0xFF	; 255
 a7c:	db 4f       	sbci	r29, 0xFB	; 251
 a7e:	68 81       	ld	r22, Y
    {
        uart_printhexint32(total_sectors);
 a80:	79 81       	ldd	r23, Y+1	; 0x01
 a82:	8a 81       	ldd	r24, Y+2	; 0x02
 a84:	9b 81       	ldd	r25, Y+3	; 0x03
 a86:	c1 50       	subi	r28, 0x01	; 1
 a88:	d4 40       	sbci	r29, 0x04	; 4
 a8a:	35 dc       	rcall	.-1942   	; 0x2f6 <uart_printhexint32>
 a8c:	8f ef       	ldi	r24, 0xFF	; 255
 a8e:	91 e0       	ldi	r25, 0x01	; 1
 a90:	3d db       	rcall	.-2438   	; 0x10c <uart_puts>
        uart_puts("(");
 a92:	cf 5f       	subi	r28, 0xFF	; 255
 a94:	db 4f       	sbci	r29, 0xFB	; 251
 a96:	68 81       	ld	r22, Y
        uart_printundecint32(total_sectors);
 a98:	79 81       	ldd	r23, Y+1	; 0x01
 a9a:	8a 81       	ldd	r24, Y+2	; 0x02
 a9c:	9b 81       	ldd	r25, Y+3	; 0x03
 a9e:	c1 50       	subi	r28, 0x01	; 1
 aa0:	d4 40       	sbci	r29, 0x04	; 4
 aa2:	01 dc       	rcall	.-2046   	; 0x2a6 <uart_printundecint32>
 aa4:	8d e6       	ldi	r24, 0x6D	; 109
 aa6:	92 e0       	ldi	r25, 0x02	; 2
 aa8:	31 db       	rcall	.-2462   	; 0x10c <uart_puts>
 aaa:	cf 5f       	subi	r28, 0xFF	; 255
        uart_puts(")\r\n");
 aac:	db 4f       	sbci	r29, 0xFB	; 251
 aae:	88 81       	ld	r24, Y
 ab0:	99 81       	ldd	r25, Y+1	; 0x01
        if (total_sectors == 3921920)
 ab2:	aa 81       	ldd	r26, Y+2	; 0x02
 ab4:	bb 81       	ldd	r27, Y+3	; 0x03
 ab6:	c1 50       	subi	r28, 0x01	; 1
 ab8:	d4 40       	sbci	r29, 0x04	; 4
 aba:	81 15       	cp	r24, r1
 abc:	98 4d       	sbci	r25, 0xD8	; 216
 abe:	ab 43       	sbci	r26, 0x3B	; 59
 ac0:	b1 05       	cpc	r27, r1
 ac2:	39 f4       	brne	.+14     	; 0xad2 <main+0xec>
 ac4:	81 e0       	ldi	r24, 0x01	; 1
 ac6:	92 e0       	ldi	r25, 0x02	; 2
        {
            uart_putsnl("2GB SD detected!\r\n");
 ac8:	3a db       	rcall	.-2444   	; 0x13e <uart_putsnl>
 aca:	03 c0       	rjmp	.+6      	; 0xad2 <main+0xec>
 acc:	84 e1       	ldi	r24, 0x14	; 20
 ace:	92 e0       	ldi	r25, 0x02	; 2
 ad0:	36 db       	rcall	.-2452   	; 0x13e <uart_putsnl>
        }
    }
    else
    {
        uart_putsnl("\r\nERROR sd_get_number_of_sectors\r\n");
 ad2:	87 e3       	ldi	r24, 0x37	; 55
 ad4:	92 e0       	ldi	r25, 0x02	; 2
 ad6:	1a db       	rcall	.-2508   	; 0x10c <uart_puts>
 ad8:	8e 01       	movw	r16, r28
    }

    uart_puts("writing data to sector 1 (based on current data stored)\r\n");
 ada:	0f 5f       	subi	r16, 0xFF	; 255
 adc:	1f 4f       	sbci	r17, 0xFF	; 255
 ade:	80 e0       	ldi	r24, 0x00	; 0
    memset(current_sector, 0, 512);
 ae0:	92 e0       	ldi	r25, 0x02	; 2
 ae2:	d8 01       	movw	r26, r16
 ae4:	fc 01       	movw	r30, r24
 ae6:	1d 92       	st	X+, r1
 ae8:	31 97       	sbiw	r30, 0x01	; 1
 aea:	e9 f7       	brne	.-6      	; 0xae6 <main+0x100>
 aec:	a8 01       	movw	r20, r16
 aee:	61 e0       	ldi	r22, 0x01	; 1
 af0:	70 e0       	ldi	r23, 0x00	; 0
    SD_read_sector(1, current_sector);
 af2:	80 e0       	ldi	r24, 0x00	; 0
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	63 dd       	rcall	.-1338   	; 0x5be <SD_read_sector>
 af8:	69 81       	ldd	r22, Y+1	; 0x01
 afa:	70 e0       	ldi	r23, 0x00	; 0
    memset(current_sector, current_sector[0] + 1, 512);
 afc:	6f 5f       	subi	r22, 0xFF	; 255
 afe:	7f 4f       	sbci	r23, 0xFF	; 255
 b00:	40 e0       	ldi	r20, 0x00	; 0
 b02:	52 e0       	ldi	r21, 0x02	; 2
 b04:	c8 01       	movw	r24, r16
 b06:	cd d0       	rcall	.+410    	; 0xca2 <memset>
 b08:	a8 01       	movw	r20, r16
 b0a:	61 e0       	ldi	r22, 0x01	; 1
 b0c:	70 e0       	ldi	r23, 0x00	; 0
    SD_write_sector(1, current_sector);
 b0e:	80 e0       	ldi	r24, 0x00	; 0
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	bb dd       	rcall	.-1162   	; 0x68a <SD_write_sector>
 b14:	81 e7       	ldi	r24, 0x71	; 113
 b16:	92 e0       	ldi	r25, 0x02	; 2
 b18:	f9 da       	rcall	.-2574   	; 0x10c <uart_puts>

    uart_puts("READING 5 MULTIPLE BLOCKS IN SD from SECTOR 1\r\n");
 b1a:	80 e0       	ldi	r24, 0x00	; 0
 b1c:	9a e0       	ldi	r25, 0x0A	; 10
 b1e:	e1 ee       	ldi	r30, 0xE1	; 225
 b20:	f2 e0       	ldi	r31, 0x02	; 2
    static uint8_t five[512 * 5];

    memset(five, 0, 512 * 5);
 b22:	df 01       	movw	r26, r30
 b24:	9c 01       	movw	r18, r24
 b26:	1d 92       	st	X+, r1
 b28:	21 50       	subi	r18, 0x01	; 1
 b2a:	30 40       	sbci	r19, 0x00	; 0
 b2c:	e1 f7       	brne	.-8      	; 0xb26 <main+0x140>
 b2e:	61 e0       	ldi	r22, 0x01	; 1
 b30:	70 e0       	ldi	r23, 0x00	; 0
 b32:	80 e0       	ldi	r24, 0x00	; 0

    sd_raw_initmultiread(1);
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	d4 de       	rcall	.-600    	; 0x8e0 <sd_raw_initmultiread>
 b38:	00 e0       	ldi	r16, 0x00	; 0
 b3a:	10 e0       	ldi	r17, 0x00	; 0
 b3c:	09 c0       	rjmp	.+18     	; 0xb50 <main+0x16a>
    for (int i = 0; i < 5; i++)
 b3e:	c8 01       	movw	r24, r16
 b40:	98 2f       	mov	r25, r24
 b42:	88 27       	eor	r24, r24
    {
        read_multi_buff(five + (512 * i));
 b44:	99 0f       	add	r25, r25
 b46:	8f 51       	subi	r24, 0x1F	; 31
 b48:	9d 4f       	sbci	r25, 0xFD	; 253
 b4a:	ff de       	rcall	.-514    	; 0x94a <read_multi_buff>
 b4c:	0f 5f       	subi	r16, 0xFF	; 255
 b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t five[512 * 5];

    memset(five, 0, 512 * 5);

    sd_raw_initmultiread(1);
    for (int i = 0; i < 5; i++)
 b50:	05 30       	cpi	r16, 0x05	; 5
 b52:	11 05       	cpc	r17, r1
 b54:	a4 f3       	brlt	.-24     	; 0xb3e <main+0x158>
 b56:	00 e0       	ldi	r16, 0x00	; 0
 b58:	10 e0       	ldi	r17, 0x00	; 0
 b5a:	1a c0       	rjmp	.+52     	; 0xb90 <main+0x1aa>
 b5c:	81 ea       	ldi	r24, 0xA1	; 161
        read_multi_buff(five + (512 * i));
    }
    for (int i = 0; i < 5; i++)
    {

        uart_puts("\r\ncontent of sector: ");
 b5e:	92 e0       	ldi	r25, 0x02	; 2
 b60:	d5 da       	rcall	.-2646   	; 0x10c <uart_puts>
 b62:	78 01       	movw	r14, r16
 b64:	3f ef       	ldi	r19, 0xFF	; 255
        uart_printdecint32(i + 1);
 b66:	e3 1a       	sub	r14, r19
 b68:	f3 0a       	sbc	r15, r19
 b6a:	b7 01       	movw	r22, r14
 b6c:	0f 2c       	mov	r0, r15
 b6e:	00 0c       	add	r0, r0
 b70:	88 0b       	sbc	r24, r24
 b72:	99 0b       	sbc	r25, r25
 b74:	bc db       	rcall	.-2184   	; 0x2ee <uart_printdecint32>
        uart_puts("\r\n");
 b76:	81 e1       	ldi	r24, 0x11	; 17
 b78:	92 e0       	ldi	r25, 0x02	; 2
 b7a:	c8 da       	rcall	.-2672   	; 0x10c <uart_puts>
 b7c:	c8 01       	movw	r24, r16
        uart_printhexdump(five + (512 * i), 512);
 b7e:	98 2f       	mov	r25, r24
 b80:	88 27       	eor	r24, r24
 b82:	99 0f       	add	r25, r25
 b84:	60 e0       	ldi	r22, 0x00	; 0
 b86:	72 e0       	ldi	r23, 0x02	; 2
 b88:	8f 51       	subi	r24, 0x1F	; 31
 b8a:	9d 4f       	sbci	r25, 0xFD	; 253
 b8c:	10 db       	rcall	.-2528   	; 0x1ae <uart_printhexdump>
 b8e:	87 01       	movw	r16, r14
 b90:	05 30       	cpi	r16, 0x05	; 5
    sd_raw_initmultiread(1);
    for (int i = 0; i < 5; i++)
    {
        read_multi_buff(five + (512 * i));
    }
    for (int i = 0; i < 5; i++)
 b92:	11 05       	cpc	r17, r1
 b94:	1c f3       	brlt	.-58     	; 0xb5c <main+0x176>
 b96:	fc de       	rcall	.-520    	; 0x990 <sd_raw_stopmultiread>
        uart_printdecint32(i + 1);
        uart_puts("\r\n");
        uart_printhexdump(five + (512 * i), 512);

    }
    sd_raw_stopmultiread();
 b98:	87 eb       	ldi	r24, 0xB7	; 183
 b9a:	92 e0       	ldi	r25, 0x02	; 2

    uart_putsnl("\r\n----");
 b9c:	d0 da       	rcall	.-2656   	; 0x13e <uart_putsnl>
 b9e:	8e eb       	ldi	r24, 0xBE	; 190
 ba0:	92 e0       	ldi	r25, 0x02	; 2
 ba2:	b4 da       	rcall	.-2712   	; 0x10c <uart_puts>

    uart_puts("\r\nREADING BLOCK BY BLOCK IN SD\r\n");
 ba4:	00 e0       	ldi	r16, 0x00	; 0
 ba6:	10 e0       	ldi	r17, 0x00	; 0
 ba8:	2f c0       	rjmp	.+94     	; 0xc08 <main+0x222>
    for (int i = 0; i < 1000; i++)
 baa:	ae 01       	movw	r20, r28
 bac:	4f 5f       	subi	r20, 0xFF	; 255
 bae:	5f 4f       	sbci	r21, 0xFF	; 255
    {
        memset(current_sector, 0, 512);
 bb0:	80 e0       	ldi	r24, 0x00	; 0
 bb2:	92 e0       	ldi	r25, 0x02	; 2
 bb4:	da 01       	movw	r26, r20
 bb6:	fc 01       	movw	r30, r24
 bb8:	1d 92       	st	X+, r1
 bba:	31 97       	sbiw	r30, 0x01	; 1
 bbc:	e9 f7       	brne	.-6      	; 0xbb8 <main+0x1d2>
        SD_read_sector(i, current_sector);
 bbe:	68 01       	movw	r12, r16
 bc0:	01 2e       	mov	r0, r17
 bc2:	00 0c       	add	r0, r0
 bc4:	ee 08       	sbc	r14, r14
 bc6:	ff 08       	sbc	r15, r15
 bc8:	c7 01       	movw	r24, r14
 bca:	b6 01       	movw	r22, r12
 bcc:	f8 dc       	rcall	.-1552   	; 0x5be <SD_read_sector>
        if (i != 0 && i != 1 && memcmp(current_sector, zero_sector, 512) == 0)
 bce:	02 30       	cpi	r16, 0x02	; 2
 bd0:	11 05       	cpc	r17, r1
 bd2:	50 f0       	brcs	.+20     	; 0xbe8 <main+0x202>
 bd4:	40 e0       	ldi	r20, 0x00	; 0
 bd6:	52 e0       	ldi	r21, 0x02	; 2
 bd8:	be 01       	movw	r22, r28
 bda:	6f 5f       	subi	r22, 0xFF	; 255
 bdc:	7d 4f       	sbci	r23, 0xFD	; 253
 bde:	ce 01       	movw	r24, r28
 be0:	01 96       	adiw	r24, 0x01	; 1
 be2:	52 d0       	rcall	.+164    	; 0xc88 <memcmp>
 be4:	89 2b       	or	r24, r25
 be6:	71 f0       	breq	.+28     	; 0xc04 <main+0x21e>
 be8:	81 ea       	ldi	r24, 0xA1	; 161
            uart_puts("\r\n");
            */
        }
        else
        {
            uart_puts("\r\ncontent of sector: ");
 bea:	92 e0       	ldi	r25, 0x02	; 2
 bec:	8f da       	rcall	.-2786   	; 0x10c <uart_puts>
 bee:	c7 01       	movw	r24, r14
 bf0:	b6 01       	movw	r22, r12
            uart_printdecint32(i);
 bf2:	7d db       	rcall	.-2310   	; 0x2ee <uart_printdecint32>
 bf4:	81 e1       	ldi	r24, 0x11	; 17
 bf6:	92 e0       	ldi	r25, 0x02	; 2
 bf8:	89 da       	rcall	.-2798   	; 0x10c <uart_puts>
            uart_puts("\r\n");
 bfa:	60 e0       	ldi	r22, 0x00	; 0
 bfc:	72 e0       	ldi	r23, 0x02	; 2
 bfe:	ce 01       	movw	r24, r28
 c00:	01 96       	adiw	r24, 0x01	; 1
            uart_printhexdump(current_sector, 512);
 c02:	d5 da       	rcall	.-2646   	; 0x1ae <uart_printhexdump>
 c04:	0f 5f       	subi	r16, 0xFF	; 255
 c06:	1f 4f       	sbci	r17, 0xFF	; 255
 c08:	08 3e       	cpi	r16, 0xE8	; 232
 c0a:	f3 e0       	ldi	r31, 0x03	; 3
 c0c:	1f 07       	cpc	r17, r31
    sd_raw_stopmultiread();

    uart_putsnl("\r\n----");

    uart_puts("\r\nREADING BLOCK BY BLOCK IN SD\r\n");
    for (int i = 0; i < 1000; i++)
 c0e:	6c f2       	brlt	.-102    	; 0xbaa <main+0x1c4>
 c10:	80 e0       	ldi	r24, 0x00	; 0
 c12:	90 e0       	ldi	r25, 0x00	; 0
 c14:	cc 5f       	subi	r28, 0xFC	; 252
 c16:	db 4f       	sbci	r29, 0xFB	; 251
 c18:	0f b6       	in	r0, 0x3f	; 63
    }




    return 0;
 c1a:	f8 94       	cli
 c1c:	de bf       	out	0x3e, r29	; 62
}
 c1e:	0f be       	out	0x3f, r0	; 63
 c20:	cd bf       	out	0x3d, r28	; 61
 c22:	df 91       	pop	r29
 c24:	cf 91       	pop	r28
 c26:	1f 91       	pop	r17
 c28:	0f 91       	pop	r16
 c2a:	ff 90       	pop	r15
 c2c:	ef 90       	pop	r14
 c2e:	df 90       	pop	r13
 c30:	cf 90       	pop	r12
 c32:	08 95       	ret

00000c34 <__udivmodsi4>:
 c34:	a1 e2       	ldi	r26, 0x21	; 33
 c36:	1a 2e       	mov	r1, r26
 c38:	aa 1b       	sub	r26, r26
 c3a:	bb 1b       	sub	r27, r27
 c3c:	fd 01       	movw	r30, r26
 c3e:	0d c0       	rjmp	.+26     	; 0xc5a <__udivmodsi4_ep>

00000c40 <__udivmodsi4_loop>:
 c40:	aa 1f       	adc	r26, r26
 c42:	bb 1f       	adc	r27, r27
 c44:	ee 1f       	adc	r30, r30
 c46:	ff 1f       	adc	r31, r31
 c48:	a2 17       	cp	r26, r18
 c4a:	b3 07       	cpc	r27, r19
 c4c:	e4 07       	cpc	r30, r20
 c4e:	f5 07       	cpc	r31, r21
 c50:	20 f0       	brcs	.+8      	; 0xc5a <__udivmodsi4_ep>
 c52:	a2 1b       	sub	r26, r18
 c54:	b3 0b       	sbc	r27, r19
 c56:	e4 0b       	sbc	r30, r20
 c58:	f5 0b       	sbc	r31, r21

00000c5a <__udivmodsi4_ep>:
 c5a:	66 1f       	adc	r22, r22
 c5c:	77 1f       	adc	r23, r23
 c5e:	88 1f       	adc	r24, r24
 c60:	99 1f       	adc	r25, r25
 c62:	1a 94       	dec	r1
 c64:	69 f7       	brne	.-38     	; 0xc40 <__udivmodsi4_loop>
 c66:	60 95       	com	r22
 c68:	70 95       	com	r23
 c6a:	80 95       	com	r24
 c6c:	90 95       	com	r25
 c6e:	9b 01       	movw	r18, r22
 c70:	ac 01       	movw	r20, r24
 c72:	bd 01       	movw	r22, r26
 c74:	cf 01       	movw	r24, r30
 c76:	08 95       	ret

00000c78 <isgraph>:
 c78:	80 32       	cpi	r24, 0x20	; 32
 c7a:	09 f0       	breq	.+2      	; 0xc7e <isprint+0x2>

00000c7c <isprint>:
 c7c:	91 11       	cpse	r25, r1
 c7e:	74 c0       	rjmp	.+232    	; 0xd68 <__ctype_isfalse>
 c80:	80 52       	subi	r24, 0x20	; 32
 c82:	8f 55       	subi	r24, 0x5F	; 95
 c84:	e0 f7       	brcc	.-8      	; 0xc7e <isprint+0x2>
 c86:	08 95       	ret

00000c88 <memcmp>:
 c88:	fb 01       	movw	r30, r22
 c8a:	dc 01       	movw	r26, r24
 c8c:	04 c0       	rjmp	.+8      	; 0xc96 <memcmp+0xe>
 c8e:	8d 91       	ld	r24, X+
 c90:	01 90       	ld	r0, Z+
 c92:	80 19       	sub	r24, r0
 c94:	21 f4       	brne	.+8      	; 0xc9e <memcmp+0x16>
 c96:	41 50       	subi	r20, 0x01	; 1
 c98:	50 40       	sbci	r21, 0x00	; 0
 c9a:	c8 f7       	brcc	.-14     	; 0xc8e <memcmp+0x6>
 c9c:	88 1b       	sub	r24, r24
 c9e:	99 0b       	sbc	r25, r25
 ca0:	08 95       	ret

00000ca2 <memset>:
 ca2:	dc 01       	movw	r26, r24
 ca4:	01 c0       	rjmp	.+2      	; 0xca8 <memset+0x6>
 ca6:	6d 93       	st	X+, r22
 ca8:	41 50       	subi	r20, 0x01	; 1
 caa:	50 40       	sbci	r21, 0x00	; 0
 cac:	e0 f7       	brcc	.-8      	; 0xca6 <memset+0x4>
 cae:	08 95       	ret

00000cb0 <itoa>:
 cb0:	45 32       	cpi	r20, 0x25	; 37
 cb2:	51 05       	cpc	r21, r1
 cb4:	18 f4       	brcc	.+6      	; 0xcbc <itoa+0xc>
 cb6:	42 30       	cpi	r20, 0x02	; 2
 cb8:	08 f0       	brcs	.+2      	; 0xcbc <itoa+0xc>
 cba:	04 c0       	rjmp	.+8      	; 0xcc4 <__itoa_ncheck>
 cbc:	fb 01       	movw	r30, r22
 cbe:	10 82       	st	Z, r1
 cc0:	cb 01       	movw	r24, r22
 cc2:	08 95       	ret

00000cc4 <__itoa_ncheck>:
 cc4:	bb 27       	eor	r27, r27
 cc6:	4a 30       	cpi	r20, 0x0A	; 10
 cc8:	31 f4       	brne	.+12     	; 0xcd6 <__itoa_ncheck+0x12>
 cca:	99 23       	and	r25, r25
 ccc:	22 f4       	brpl	.+8      	; 0xcd6 <__itoa_ncheck+0x12>
 cce:	bd e2       	ldi	r27, 0x2D	; 45
 cd0:	90 95       	com	r25
 cd2:	81 95       	neg	r24
 cd4:	9f 4f       	sbci	r25, 0xFF	; 255
 cd6:	30 c0       	rjmp	.+96     	; 0xd38 <__utoa_common>

00000cd8 <__ltoa_ncheck>:
 cd8:	bb 27       	eor	r27, r27
 cda:	2a 30       	cpi	r18, 0x0A	; 10
 cdc:	51 f4       	brne	.+20     	; 0xcf2 <__ltoa_ncheck+0x1a>
 cde:	99 23       	and	r25, r25
 ce0:	42 f4       	brpl	.+16     	; 0xcf2 <__ltoa_ncheck+0x1a>
 ce2:	bd e2       	ldi	r27, 0x2D	; 45
 ce4:	90 95       	com	r25
 ce6:	80 95       	com	r24
 ce8:	70 95       	com	r23
 cea:	61 95       	neg	r22
 cec:	7f 4f       	sbci	r23, 0xFF	; 255
 cee:	8f 4f       	sbci	r24, 0xFF	; 255
 cf0:	9f 4f       	sbci	r25, 0xFF	; 255
 cf2:	01 c0       	rjmp	.+2      	; 0xcf6 <__ultoa_common>

00000cf4 <__ultoa_ncheck>:
 cf4:	bb 27       	eor	r27, r27

00000cf6 <__ultoa_common>:
 cf6:	fa 01       	movw	r30, r20
 cf8:	a6 2f       	mov	r26, r22
 cfa:	62 17       	cp	r22, r18
 cfc:	71 05       	cpc	r23, r1
 cfe:	81 05       	cpc	r24, r1
 d00:	91 05       	cpc	r25, r1
 d02:	33 0b       	sbc	r19, r19
 d04:	30 fb       	bst	r19, 0
 d06:	66 f0       	brts	.+24     	; 0xd20 <__ultoa_common+0x2a>
 d08:	aa 27       	eor	r26, r26
 d0a:	66 0f       	add	r22, r22
 d0c:	77 1f       	adc	r23, r23
 d0e:	88 1f       	adc	r24, r24
 d10:	99 1f       	adc	r25, r25
 d12:	aa 1f       	adc	r26, r26
 d14:	a2 17       	cp	r26, r18
 d16:	10 f0       	brcs	.+4      	; 0xd1c <__ultoa_common+0x26>
 d18:	a2 1b       	sub	r26, r18
 d1a:	63 95       	inc	r22
 d1c:	38 50       	subi	r19, 0x08	; 8
 d1e:	a9 f7       	brne	.-22     	; 0xd0a <__ultoa_common+0x14>
 d20:	a0 5d       	subi	r26, 0xD0	; 208
 d22:	aa 33       	cpi	r26, 0x3A	; 58
 d24:	08 f0       	brcs	.+2      	; 0xd28 <__ultoa_common+0x32>
 d26:	a9 5d       	subi	r26, 0xD9	; 217
 d28:	a1 93       	st	Z+, r26
 d2a:	36 f7       	brtc	.-52     	; 0xcf8 <__ultoa_common+0x2>
 d2c:	b1 11       	cpse	r27, r1
 d2e:	b1 93       	st	Z+, r27
 d30:	10 82       	st	Z, r1
 d32:	ca 01       	movw	r24, r20
 d34:	1c c0       	rjmp	.+56     	; 0xd6e <strrev>

00000d36 <__utoa_ncheck>:
 d36:	bb 27       	eor	r27, r27

00000d38 <__utoa_common>:
 d38:	fb 01       	movw	r30, r22
 d3a:	55 27       	eor	r21, r21
 d3c:	aa 27       	eor	r26, r26
 d3e:	88 0f       	add	r24, r24
 d40:	99 1f       	adc	r25, r25
 d42:	aa 1f       	adc	r26, r26
 d44:	a4 17       	cp	r26, r20
 d46:	10 f0       	brcs	.+4      	; 0xd4c <__utoa_common+0x14>
 d48:	a4 1b       	sub	r26, r20
 d4a:	83 95       	inc	r24
 d4c:	50 51       	subi	r21, 0x10	; 16
 d4e:	b9 f7       	brne	.-18     	; 0xd3e <__utoa_common+0x6>
 d50:	a0 5d       	subi	r26, 0xD0	; 208
 d52:	aa 33       	cpi	r26, 0x3A	; 58
 d54:	08 f0       	brcs	.+2      	; 0xd58 <__utoa_common+0x20>
 d56:	a9 5d       	subi	r26, 0xD9	; 217
 d58:	a1 93       	st	Z+, r26
 d5a:	00 97       	sbiw	r24, 0x00	; 0
 d5c:	79 f7       	brne	.-34     	; 0xd3c <__utoa_common+0x4>
 d5e:	b1 11       	cpse	r27, r1
 d60:	b1 93       	st	Z+, r27
 d62:	11 92       	st	Z+, r1
 d64:	cb 01       	movw	r24, r22
 d66:	03 c0       	rjmp	.+6      	; 0xd6e <strrev>

00000d68 <__ctype_isfalse>:
 d68:	99 27       	eor	r25, r25
 d6a:	88 27       	eor	r24, r24

00000d6c <__ctype_istrue>:
 d6c:	08 95       	ret

00000d6e <strrev>:
 d6e:	dc 01       	movw	r26, r24
 d70:	fc 01       	movw	r30, r24
 d72:	67 2f       	mov	r22, r23
 d74:	71 91       	ld	r23, Z+
 d76:	77 23       	and	r23, r23
 d78:	e1 f7       	brne	.-8      	; 0xd72 <strrev+0x4>
 d7a:	32 97       	sbiw	r30, 0x02	; 2
 d7c:	04 c0       	rjmp	.+8      	; 0xd86 <strrev+0x18>
 d7e:	7c 91       	ld	r23, X
 d80:	6d 93       	st	X+, r22
 d82:	70 83       	st	Z, r23
 d84:	62 91       	ld	r22, -Z
 d86:	ae 17       	cp	r26, r30
 d88:	bf 07       	cpc	r27, r31
 d8a:	c8 f3       	brcs	.-14     	; 0xd7e <strrev+0x10>
 d8c:	08 95       	ret

00000d8e <_exit>:
 d8e:	f8 94       	cli

00000d90 <__stop_program>:
 d90:	ff cf       	rjmp	.-2      	; 0xd90 <__stop_program>
