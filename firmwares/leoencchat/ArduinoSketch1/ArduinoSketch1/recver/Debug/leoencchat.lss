
leoencchat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000206  00800100  00003852  000038e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003852  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018c  00800306  00800306  00003aec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003aec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b98  00000000  00000000  00003b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001843e  00000000  00000000  000046f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000049ca  00000000  00000000  0001cb32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006221  00000000  00000000  000214fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002590  00000000  00000000  00027720  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f2c  00000000  00000000  00029cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c0fd  00000000  00000000  0002ebdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c68  00000000  00000000  0003acd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__dtors_end>
       4:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__vector_1>
       8:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__vector_2>
       c:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <__vector_3>
      10:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <__vector_4>
      14:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      18:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      1c:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <__vector_7>
      20:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      24:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      28:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_10>
      2c:	0c 94 23 08 	jmp	0x1046	; 0x1046 <__vector_11>
      30:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      34:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      38:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      3c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      40:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      44:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      48:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      4c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      50:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      54:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      58:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      5c:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__vector_23>
      60:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      64:	0c 94 29 04 	jmp	0x852	; 0x852 <__vector_25>
      68:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <__vector_26>
      6c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      70:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      74:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      78:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      7c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      80:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      84:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      88:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      8c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      90:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      94:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      98:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      9c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      a0:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      a4:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      a8:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      ac:	40 0b       	sbc	r20, r16
      ae:	43 0b       	sbc	r20, r19
      b0:	32 0b       	sbc	r19, r18
      b2:	36 0b       	sbc	r19, r22
      b4:	3c 0b       	sbc	r19, r28
      b6:	64 0b       	sbc	r22, r20
      b8:	64 0b       	sbc	r22, r20
      ba:	64 0b       	sbc	r22, r20
      bc:	47 0b       	sbc	r20, r23
      be:	4b 0b       	sbc	r20, r27
      c0:	4f 0b       	sbc	r20, r31
      c2:	55 0b       	sbc	r21, r21
      c4:	59 0b       	sbc	r21, r25
      c6:	64 0b       	sbc	r22, r20
      c8:	5f 0b       	sbc	r21, r31

000000ca <USB_DeviceDescriptorIAD>:
      ca:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      da:	03 01                                               ..

000000dc <STRING_MANUFACTURER>:
      dc:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000e8 <STRING_PRODUCT>:
      e8:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000000f9 <STRING_LANGUAGE>:
      f9:	04 03 09 04                                         ....

000000fd <digital_pin_to_timer_PGM>:
      fd:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

0000011c <digital_pin_to_bit_mask_PGM>:
     11c:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     12c:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

0000013b <digital_pin_to_port_PGM>:
     13b:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     14b:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

0000015a <port_to_output_PGM>:
     15a:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000168 <port_to_mode_PGM>:
     168:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000176 <_ZL18MODEM_CONFIG_TABLE>:
     176:	00 3e 80 00 52 f4 f4 d0 00 34 15 00 4f f4 f4 d0     .>..R....4..O...
     186:	00 1a 0b 00 9d f4 f4 d0 00 0d 05 01 3b f4 f4 d0     ............;...
     196:	00 06 83 02 75 f3 f3 d0 00 03 41 04 ea f2 f2 d0     ....u.....A.....
     1a6:	00 02 2c 07 ae e2 e2 d0 00 01 00 08 00 e1 e1 d0     ..,.............
     1b6:	00 00 80 10 00 e0 e0 d0 00 02 40 03 33 42 42 d0     ..........@.3BB.
     1c6:	01 3e 80 00 52 f4 f5 d0 01 34 15 00 4f f4 f4 d0     .>..R....4..O...
     1d6:	01 1a 0b 00 9d f4 f4 d0 01 0d 05 01 3b f4 f4 d0     ............;...
     1e6:	01 06 83 02 75 f3 f3 d0 01 03 41 04 ea f2 f2 d0     ....u.....A.....
     1f6:	01 02 2c 07 ae e2 e2 d0 01 01 00 08 00 e1 e1 d0     ..,.............
     206:	01 00 80 10 00 e0 e0 d0 01 02 40 03 33 42 42 d0     ..........@.3BB.
     216:	08 7d 00 00 10 88 88 d0 08 68 2b 00 10 f1 f1 d0     .}.......h+.....
     226:	08 34 15 00 10 f5 f5 d0 08 1a 0b 00 10 f4 f4 d0     .4..............
     236:	08 0d 05 00 10 f3 f3 d0 08 06 83 00 10 f2 f2 d0     ................
     246:	08 03 e8 00 10 e2 e2 d0                             ........

0000024e <_cdcInterface>:
     24e:	08 0b 00 02 02 02 00 00 09 04 00 00 01 02 02 00     ................
     25e:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     26e:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     27e:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
	...

00000290 <__ctors_start>:
     290:	a8 01       	movw	r20, r16
     292:	8b 04       	cpc	r8, r11
     294:	a6 0e       	add	r10, r22
     296:	3b 14       	cp	r3, r11

00000298 <__ctors_end>:
     298:	b6 01       	movw	r22, r12

0000029a <__dtors_end>:
     29a:	11 24       	eor	r1, r1
     29c:	1f be       	out	0x3f, r1	; 63
     29e:	cf ef       	ldi	r28, 0xFF	; 255
     2a0:	da e0       	ldi	r29, 0x0A	; 10
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	cd bf       	out	0x3d, r28	; 61

000002a6 <__do_copy_data>:
     2a6:	13 e0       	ldi	r17, 0x03	; 3
     2a8:	a0 e0       	ldi	r26, 0x00	; 0
     2aa:	b1 e0       	ldi	r27, 0x01	; 1
     2ac:	e2 e5       	ldi	r30, 0x52	; 82
     2ae:	f8 e3       	ldi	r31, 0x38	; 56
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <__do_copy_data+0x10>
     2b2:	05 90       	lpm	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	a6 30       	cpi	r26, 0x06	; 6
     2b8:	b1 07       	cpc	r27, r17
     2ba:	d9 f7       	brne	.-10     	; 0x2b2 <__do_copy_data+0xc>

000002bc <__do_clear_bss>:
     2bc:	24 e0       	ldi	r18, 0x04	; 4
     2be:	a6 e0       	ldi	r26, 0x06	; 6
     2c0:	b3 e0       	ldi	r27, 0x03	; 3
     2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <.do_clear_bss_start>

000002c4 <.do_clear_bss_loop>:
     2c4:	1d 92       	st	X+, r1

000002c6 <.do_clear_bss_start>:
     2c6:	a2 39       	cpi	r26, 0x92	; 146
     2c8:	b2 07       	cpc	r27, r18
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <.do_clear_bss_loop>

000002cc <__do_global_ctors>:
     2cc:	11 e0       	ldi	r17, 0x01	; 1
     2ce:	cc e4       	ldi	r28, 0x4C	; 76
     2d0:	d1 e0       	ldi	r29, 0x01	; 1
     2d2:	04 c0       	rjmp	.+8      	; 0x2dc <__do_global_ctors+0x10>
     2d4:	21 97       	sbiw	r28, 0x01	; 1
     2d6:	fe 01       	movw	r30, r28
     2d8:	0e 94 07 19 	call	0x320e	; 0x320e <__tablejump2__>
     2dc:	c8 34       	cpi	r28, 0x48	; 72
     2de:	d1 07       	cpc	r29, r17
     2e0:	c9 f7       	brne	.-14     	; 0x2d4 <__do_global_ctors+0x8>
     2e2:	0e 94 b9 04 	call	0x972	; 0x972 <main>
     2e6:	0c 94 1c 1c 	jmp	0x3838	; 0x3838 <__do_global_dtors>

000002ea <__bad_interrupt>:
     2ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002ee <_Z18switch_usb_to_at90v>:
	// Send a message!
	rf69.send((uint8_t *)rfdata, strlen(rfdata));
	rf69.waitPacketSent();
	// Send own message through serial
	Serial1.print("Leo: "); Serial1.println(data);
}
     2ee:	57 9a       	sbi	0x0a, 7	; 10
     2f0:	64 ef       	ldi	r22, 0xF4	; 244
     2f2:	71 e0       	ldi	r23, 0x01	; 1
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 96 0a 	call	0x152c	; 0x152c <delay>
     2fc:	5f 98       	cbi	0x0b, 7	; 11
     2fe:	64 ef       	ldi	r22, 0xF4	; 244
     300:	71 e0       	ldi	r23, 0x01	; 1
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 96 0a 	call	0x152c	; 0x152c <delay>
     30a:	89 98       	cbi	0x11, 1	; 17
     30c:	64 ef       	ldi	r22, 0xF4	; 244
     30e:	71 e0       	ldi	r23, 0x01	; 1
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 96 0a 	call	0x152c	; 0x152c <delay>
     318:	80 9a       	sbi	0x10, 0	; 16
     31a:	64 ef       	ldi	r22, 0xF4	; 244
     31c:	71 e0       	ldi	r23, 0x01	; 1
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 96 0a 	call	0x152c	; 0x152c <delay>
     326:	88 9a       	sbi	0x11, 0	; 17
     328:	64 ef       	ldi	r22, 0xF4	; 244
     32a:	71 e0       	ldi	r23, 0x01	; 1
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 96 0a 	call	0x152c	; 0x152c <delay>
     334:	81 9a       	sbi	0x10, 1	; 16
     336:	64 ef       	ldi	r22, 0xF4	; 244
     338:	71 e0       	ldi	r23, 0x01	; 1
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 96 0a 	call	0x152c	; 0x152c <delay>
     342:	89 9a       	sbi	0x11, 1	; 17
     344:	64 ef       	ldi	r22, 0xF4	; 244
     346:	71 e0       	ldi	r23, 0x01	; 1
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0c 94 96 0a 	jmp	0x152c	; 0x152c <delay>

00000350 <_GLOBAL__sub_I_rf69>:
     350:	2f e1       	ldi	r18, 0x1F	; 31
     352:	34 e0       	ldi	r19, 0x04	; 4
     354:	43 e0       	ldi	r20, 0x03	; 3
     356:	67 e0       	ldi	r22, 0x07	; 7
     358:	8c e0       	ldi	r24, 0x0C	; 12
     35a:	93 e0       	ldi	r25, 0x03	; 3
     35c:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7RH_RF69C1EhhR12RHGenericSPI>
     360:	6f ef       	ldi	r22, 0xFF	; 255
     362:	71 e0       	ldi	r23, 0x01	; 1
     364:	86 e0       	ldi	r24, 0x06	; 6
     366:	93 e0       	ldi	r25, 0x03	; 3
     368:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <_ZN6StringC1EPKc>

0000036c <_GLOBAL__sub_D_rf69>:
     36c:	86 e0       	ldi	r24, 0x06	; 6
     36e:	93 e0       	ldi	r25, 0x03	; 3
     370:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <_ZN6StringD1Ev>

00000374 <setup>:
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	60 97       	sbiw	r28, 0x10	; 16
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	26 e0       	ldi	r18, 0x06	; 6
     38e:	40 e8       	ldi	r20, 0x80	; 128
     390:	55 e2       	ldi	r21, 0x25	; 37
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	8f e6       	ldi	r24, 0x6F	; 111
     398:	93 e0       	ldi	r25, 0x03	; 3
     39a:	0e 94 c4 03 	call	0x788	; 0x788 <_ZN14HardwareSerial5beginEmh>
     39e:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z18switch_usb_to_at90v>
     3a2:	61 e0       	ldi	r22, 0x01	; 1
     3a4:	87 e1       	ldi	r24, 0x17	; 23
     3a6:	0e 94 65 0b 	call	0x16ca	; 0x16ca <pinMode>
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	87 e1       	ldi	r24, 0x17	; 23
     3ae:	0e 94 a1 0b 	call	0x1742	; 0x1742 <digitalWrite>
     3b2:	61 e0       	ldi	r22, 0x01	; 1
     3b4:	88 e0       	ldi	r24, 0x08	; 8
     3b6:	0e 94 65 0b 	call	0x16ca	; 0x16ca <pinMode>
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	89 e0       	ldi	r24, 0x09	; 9
     3be:	0e 94 65 0b 	call	0x16ca	; 0x16ca <pinMode>
     3c2:	61 e0       	ldi	r22, 0x01	; 1
     3c4:	84 e0       	ldi	r24, 0x04	; 4
     3c6:	0e 94 65 0b 	call	0x16ca	; 0x16ca <pinMode>
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	84 e0       	ldi	r24, 0x04	; 4
     3ce:	0e 94 a1 0b 	call	0x1742	; 0x1742 <digitalWrite>
     3d2:	67 e3       	ldi	r22, 0x37	; 55
     3d4:	71 e0       	ldi	r23, 0x01	; 1
     3d6:	8f e6       	ldi	r24, 0x6F	; 111
     3d8:	93 e0       	ldi	r25, 0x03	; 3
     3da:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print7printlnEPKc>
     3de:	8f e6       	ldi	r24, 0x6F	; 111
     3e0:	93 e0       	ldi	r25, 0x03	; 3
     3e2:	0e 94 22 05 	call	0xa44	; 0xa44 <_ZN5Print7printlnEv>
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	84 e0       	ldi	r24, 0x04	; 4
     3ea:	0e 94 a1 0b 	call	0x1742	; 0x1742 <digitalWrite>
     3ee:	6a e0       	ldi	r22, 0x0A	; 10
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 96 0a 	call	0x152c	; 0x152c <delay>
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	84 e0       	ldi	r24, 0x04	; 4
     3fe:	0e 94 a1 0b 	call	0x1742	; 0x1742 <digitalWrite>
     402:	6a e0       	ldi	r22, 0x0A	; 10
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 96 0a 	call	0x152c	; 0x152c <delay>
     40e:	8c e0       	ldi	r24, 0x0C	; 12
     410:	93 e0       	ldi	r25, 0x03	; 3
     412:	0e 94 39 12 	call	0x2472	; 0x2472 <_ZN7RH_RF694initEv>
     416:	81 11       	cpse	r24, r1
     418:	07 c0       	rjmp	.+14     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     41a:	6b e5       	ldi	r22, 0x5B	; 91
     41c:	71 e0       	ldi	r23, 0x01	; 1
     41e:	8f e6       	ldi	r24, 0x6F	; 111
     420:	93 e0       	ldi	r25, 0x03	; 3
     422:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print7printlnEPKc>
     426:	ff cf       	rjmp	.-2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     428:	63 e7       	ldi	r22, 0x73	; 115
     42a:	71 e0       	ldi	r23, 0x01	; 1
     42c:	8f e6       	ldi	r24, 0x6F	; 111
     42e:	93 e0       	ldi	r25, 0x03	; 3
     430:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print7printlnEPKc>
     434:	0d ec       	ldi	r16, 0xCD	; 205
     436:	1c ec       	ldi	r17, 0xCC	; 204
     438:	2c e4       	ldi	r18, 0x4C	; 76
     43a:	3d e3       	ldi	r19, 0x3D	; 61
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	50 e0       	ldi	r21, 0x00	; 0
     440:	69 ed       	ldi	r22, 0xD9	; 217
     442:	73 e4       	ldi	r23, 0x43	; 67
     444:	8c e0       	ldi	r24, 0x0C	; 12
     446:	93 e0       	ldi	r25, 0x03	; 3
     448:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <_ZN7RH_RF6912setFrequencyEff>
     44c:	81 11       	cpse	r24, r1
     44e:	06 c0       	rjmp	.+12     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
     450:	68 e8       	ldi	r22, 0x88	; 136
     452:	71 e0       	ldi	r23, 0x01	; 1
     454:	8f e6       	ldi	r24, 0x6F	; 111
     456:	93 e0       	ldi	r25, 0x03	; 3
     458:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print7printlnEPKc>
     45c:	41 e0       	ldi	r20, 0x01	; 1
     45e:	64 e1       	ldi	r22, 0x14	; 20
     460:	8c e0       	ldi	r24, 0x0C	; 12
     462:	93 e0       	ldi	r25, 0x03	; 3
     464:	0e 94 63 11 	call	0x22c6	; 0x22c6 <_ZN7RH_RF6910setTxPowerEab>
     468:	80 e1       	ldi	r24, 0x10	; 16
     46a:	e7 e2       	ldi	r30, 0x27	; 39
     46c:	f1 e0       	ldi	r31, 0x01	; 1
     46e:	de 01       	movw	r26, r28
     470:	11 96       	adiw	r26, 0x01	; 1
     472:	01 90       	ld	r0, Z+
     474:	0d 92       	st	X+, r0
     476:	8a 95       	dec	r24
     478:	e1 f7       	brne	.-8      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     47a:	be 01       	movw	r22, r28
     47c:	6f 5f       	subi	r22, 0xFF	; 255
     47e:	7f 4f       	sbci	r23, 0xFF	; 255
     480:	8c e0       	ldi	r24, 0x0C	; 12
     482:	93 e0       	ldi	r25, 0x03	; 3
     484:	0e 94 1e 12 	call	0x243c	; 0x243c <_ZN7RH_RF6916setEncryptionKeyEPh>
     488:	6c e9       	ldi	r22, 0x9C	; 156
     48a:	71 e0       	ldi	r23, 0x01	; 1
     48c:	8f e6       	ldi	r24, 0x6F	; 111
     48e:	93 e0       	ldi	r25, 0x03	; 3
     490:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN5Print5printEPKc>
     494:	4a e0       	ldi	r20, 0x0A	; 10
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	62 eb       	ldi	r22, 0xB2	; 178
     49a:	71 e0       	ldi	r23, 0x01	; 1
     49c:	8f e6       	ldi	r24, 0x6F	; 111
     49e:	93 e0       	ldi	r25, 0x03	; 3
     4a0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <_ZN5Print5printEii>
     4a4:	6a ea       	ldi	r22, 0xAA	; 170
     4a6:	71 e0       	ldi	r23, 0x01	; 1
     4a8:	8f e6       	ldi	r24, 0x6F	; 111
     4aa:	93 e0       	ldi	r25, 0x03	; 3
     4ac:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print7printlnEPKc>
     4b0:	60 96       	adiw	r28, 0x10	; 16
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	08 95       	ret

000004c6 <loop>:
	String data = Serial1.readString();
	// Send own message through serial
	Serial1.print("Data: "); Serial1.println(data);
}

void loop() {
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	c9 57       	subi	r28, 0x79	; 121
     4d4:	d1 09       	sbc	r29, r1
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
	uint8_t rec_buf[RH_RF69_MAX_MESSAGE_LEN];
	uint8_t len = sizeof(rec_buf);
     4e0:	8c e3       	ldi	r24, 0x3C	; 60
     4e2:	ea 96       	adiw	r28, 0x3a	; 58
     4e4:	8f af       	std	Y+63, r24	; 0x3f
     4e6:	ea 97       	sbiw	r28, 0x3a	; 58
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
     4e8:	8e 01       	movw	r16, r28
     4ea:	0f 5f       	subi	r16, 0xFF	; 255
     4ec:	1f 4f       	sbci	r17, 0xFF	; 255
	char rfdata[RH_RF69_MAX_MESSAGE_LEN];

  // Check if there is any character to read
	while (Serial1.available()) {
     4ee:	8f e6       	ldi	r24, 0x6F	; 111
     4f0:	93 e0       	ldi	r25, 0x03	; 3
     4f2:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN14HardwareSerial9availableEv>
     4f6:	89 2b       	or	r24, r25
     4f8:	71 f0       	breq	.+28     	; 0x516 <loop+0x50>
		// Read 1 byte
		char input_char = (char)Serial1.read();
     4fa:	8f e6       	ldi	r24, 0x6F	; 111
     4fc:	93 e0       	ldi	r25, 0x03	; 3
     4fe:	0e 94 04 03 	call	0x608	; 0x608 <_ZN14HardwareSerial4readEv>
		    if (input_char != '\n'  && input_char != '\r') {
     502:	8a 30       	cpi	r24, 0x0A	; 10
     504:	71 f1       	breq	.+92     	; 0x562 <loop+0x9c>
     506:	8d 30       	cpi	r24, 0x0D	; 13
     508:	91 f3       	breq	.-28     	; 0x4ee <loop+0x28>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     50a:	68 2f       	mov	r22, r24
     50c:	86 e0       	ldi	r24, 0x06	; 6
     50e:	93 e0       	ldi	r25, 0x03	; 3
     510:	0e 94 9b 0c 	call	0x1936	; 0x1936 <_ZN6String6concatEc>
     514:	ec cf       	rjmp	.-40     	; 0x4ee <loop+0x28>
					serial_input = "";
				}
	}
	
  // Check if there is anything to receive
  if (rf69.recv(rec_buf, &len)) {
     516:	ae 01       	movw	r20, r28
     518:	47 58       	subi	r20, 0x87	; 135
     51a:	5f 4f       	sbci	r21, 0xFF	; 255
     51c:	be 01       	movw	r22, r28
     51e:	63 5c       	subi	r22, 0xC3	; 195
     520:	7f 4f       	sbci	r23, 0xFF	; 255
     522:	8c e0       	ldi	r24, 0x0C	; 12
     524:	93 e0       	ldi	r25, 0x03	; 3
     526:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <_ZN7RH_RF694recvEPhS0_>
     52a:	88 23       	and	r24, r24
     52c:	99 f0       	breq	.+38     	; 0x554 <loop+0x8e>
	  if (!len) return;
     52e:	ea 96       	adiw	r28, 0x3a	; 58
     530:	8f ad       	ldd	r24, Y+63	; 0x3f
     532:	ea 97       	sbiw	r28, 0x3a	; 58
     534:	88 23       	and	r24, r24
     536:	09 f4       	brne	.+2      	; 0x53a <loop+0x74>
     538:	41 c0       	rjmp	.+130    	; 0x5bc <loop+0xf6>
	  Serial1.print("Feather: "); Serial1.println((char*)rec_buf);
     53a:	61 ee       	ldi	r22, 0xE1	; 225
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	8f e6       	ldi	r24, 0x6F	; 111
     540:	93 e0       	ldi	r25, 0x03	; 3
     542:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN5Print5printEPKc>
     546:	be 01       	movw	r22, r28
     548:	63 5c       	subi	r22, 0xC3	; 195
     54a:	7f 4f       	sbci	r23, 0xFF	; 255
     54c:	8f e6       	ldi	r24, 0x6F	; 111
     54e:	93 e0       	ldi	r25, 0x03	; 3
     550:	0e 94 38 05 	call	0xa70	; 0xa70 <_ZN5Print7printlnEPKc>
  }

	// Delay between loop iterations
	delay(500);
     554:	64 ef       	ldi	r22, 0xF4	; 244
     556:	71 e0       	ldi	r23, 0x01	; 1
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 96 0a 	call	0x152c	; 0x152c <delay>
     560:	2d c0       	rjmp	.+90     	; 0x5bc <loop+0xf6>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	4c e3       	ldi	r20, 0x3C	; 60
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	b8 01       	movw	r22, r16
     56c:	86 e0       	ldi	r24, 0x06	; 6
     56e:	93 e0       	ldi	r25, 0x03	; 3
     570:	0e 94 ae 0c 	call	0x195c	; 0x195c <_ZNK6String8getBytesEPhjj>
				// If eol clean input and send it through rf
				if (input_char == '\n') {
					// Cast input buffer to char array
					serial_input.toCharArray(rfdata, RH_RF69_MAX_MESSAGE_LEN);
					// Send the data
					rf69.send((uint8_t *)rfdata, strlen(rfdata));
     574:	f8 01       	movw	r30, r16
     576:	01 90       	ld	r0, Z+
     578:	00 20       	and	r0, r0
     57a:	e9 f7       	brne	.-6      	; 0x576 <loop+0xb0>
     57c:	31 97       	sbiw	r30, 0x01	; 1
     57e:	af 01       	movw	r20, r30
     580:	40 1b       	sub	r20, r16
     582:	51 0b       	sbc	r21, r17
     584:	b8 01       	movw	r22, r16
     586:	8c e0       	ldi	r24, 0x0C	; 12
     588:	93 e0       	ldi	r25, 0x03	; 3
     58a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN7RH_RF694sendEPKhh>
					rf69.waitPacketSent();
     58e:	8c e0       	ldi	r24, 0x0C	; 12
     590:	93 e0       	ldi	r25, 0x03	; 3
     592:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <_ZN15RHGenericDriver14waitPacketSentEv>
					Serial1.print("Leo: "); Serial1.println(serial_input);
     596:	6b ed       	ldi	r22, 0xDB	; 219
     598:	71 e0       	ldi	r23, 0x01	; 1
     59a:	8f e6       	ldi	r24, 0x6F	; 111
     59c:	93 e0       	ldi	r25, 0x03	; 3
     59e:	0e 94 19 05 	call	0xa32	; 0xa32 <_ZN5Print5printEPKc>
     5a2:	66 e0       	ldi	r22, 0x06	; 6
     5a4:	73 e0       	ldi	r23, 0x03	; 3
     5a6:	8f e6       	ldi	r24, 0x6F	; 111
     5a8:	93 e0       	ldi	r25, 0x03	; 3
     5aa:	0e 94 26 05 	call	0xa4c	; 0xa4c <_ZN5Print7printlnERK6String>
					// Clear input buffer
					serial_input = "";
     5ae:	6f ef       	ldi	r22, 0xFF	; 255
     5b0:	71 e0       	ldi	r23, 0x01	; 1
     5b2:	86 e0       	ldi	r24, 0x06	; 6
     5b4:	93 e0       	ldi	r25, 0x03	; 3
     5b6:	0e 94 56 0c 	call	0x18ac	; 0x18ac <_ZN6StringaSEPKc>
     5ba:	99 cf       	rjmp	.-206    	; 0x4ee <loop+0x28>
	  Serial1.print("Feather: "); Serial1.println((char*)rec_buf);
  }

	// Delay between loop iterations
	delay(500);
}
     5bc:	c7 58       	subi	r28, 0x87	; 135
     5be:	df 4f       	sbci	r29, 0xFF	; 255
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	08 95       	ret

000005d4 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     5d4:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     5d6:	91 8d       	ldd	r25, Z+25	; 0x19
     5d8:	22 8d       	ldd	r18, Z+26	; 0x1a
     5da:	89 2f       	mov	r24, r25
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	80 5c       	subi	r24, 0xC0	; 192
     5e0:	9f 4f       	sbci	r25, 0xFF	; 255
     5e2:	82 1b       	sub	r24, r18
     5e4:	91 09       	sbc	r25, r1
}
     5e6:	8f 73       	andi	r24, 0x3F	; 63
     5e8:	99 27       	eor	r25, r25
     5ea:	08 95       	ret

000005ec <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     5ec:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     5ee:	91 8d       	ldd	r25, Z+25	; 0x19
     5f0:	82 8d       	ldd	r24, Z+26	; 0x1a
     5f2:	98 17       	cp	r25, r24
     5f4:	31 f0       	breq	.+12     	; 0x602 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     5f6:	82 8d       	ldd	r24, Z+26	; 0x1a
     5f8:	e8 0f       	add	r30, r24
     5fa:	f1 1d       	adc	r31, r1
     5fc:	85 8d       	ldd	r24, Z+29	; 0x1d
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     602:	8f ef       	ldi	r24, 0xFF	; 255
     604:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     606:	08 95       	ret

00000608 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     608:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     60a:	91 8d       	ldd	r25, Z+25	; 0x19
     60c:	82 8d       	ldd	r24, Z+26	; 0x1a
     60e:	98 17       	cp	r25, r24
     610:	61 f0       	breq	.+24     	; 0x62a <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     612:	82 8d       	ldd	r24, Z+26	; 0x1a
     614:	df 01       	movw	r26, r30
     616:	a8 0f       	add	r26, r24
     618:	b1 1d       	adc	r27, r1
     61a:	5d 96       	adiw	r26, 0x1d	; 29
     61c:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     61e:	92 8d       	ldd	r25, Z+26	; 0x1a
     620:	9f 5f       	subi	r25, 0xFF	; 255
     622:	9f 73       	andi	r25, 0x3F	; 63
     624:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     62a:	8f ef       	ldi	r24, 0xFF	; 255
     62c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     62e:	08 95       	ret

00000630 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     630:	fc 01       	movw	r30, r24
     632:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     634:	44 8d       	ldd	r20, Z+28	; 0x1c
     636:	25 2f       	mov	r18, r21
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	84 2f       	mov	r24, r20
     63c:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     63e:	82 1b       	sub	r24, r18
     640:	93 0b       	sbc	r25, r19
     642:	54 17       	cp	r21, r20
     644:	10 f0       	brcs	.+4      	; 0x64a <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     646:	cf 96       	adiw	r24, 0x3f	; 63
     648:	08 95       	ret
  return tail - head - 1;
     64a:	01 97       	sbiw	r24, 0x01	; 1
}
     64c:	08 95       	ret

0000064e <_Z14serialEventRunv>:
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     64e:	81 e8       	ldi	r24, 0x81	; 129
     650:	94 e0       	ldi	r25, 0x04	; 4
     652:	89 2b       	or	r24, r25
     654:	49 f0       	breq	.+18     	; 0x668 <_Z14serialEventRunv+0x1a>
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	89 2b       	or	r24, r25
     65c:	29 f0       	breq	.+10     	; 0x668 <_Z14serialEventRunv+0x1a>
     65e:	0e 94 81 04 	call	0x902	; 0x902 <_Z17Serial1_availablev>
     662:	81 11       	cpse	r24, r1
     664:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     668:	08 95       	ret

0000066a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     66a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     66c:	84 8d       	ldd	r24, Z+28	; 0x1c
     66e:	df 01       	movw	r26, r30
     670:	a8 0f       	add	r26, r24
     672:	b1 1d       	adc	r27, r1
     674:	a3 5a       	subi	r26, 0xA3	; 163
     676:	bf 4f       	sbci	r27, 0xFF	; 255
     678:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     67a:	84 8d       	ldd	r24, Z+28	; 0x1c
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	8f 73       	andi	r24, 0x3F	; 63
     682:	99 27       	eor	r25, r25
     684:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     686:	a6 89       	ldd	r26, Z+22	; 0x16
     688:	b7 89       	ldd	r27, Z+23	; 0x17
     68a:	2c 93       	st	X, r18
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     68c:	a0 89       	ldd	r26, Z+16	; 0x10
     68e:	b1 89       	ldd	r27, Z+17	; 0x11
     690:	8c 91       	ld	r24, X
     692:	82 74       	andi	r24, 0x42	; 66
     694:	8c 93       	st	X, r24
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     696:	93 8d       	ldd	r25, Z+27	; 0x1b
     698:	84 8d       	ldd	r24, Z+28	; 0x1c
     69a:	98 13       	cpse	r25, r24
     69c:	06 c0       	rjmp	.+12     	; 0x6aa <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     69e:	02 88       	ldd	r0, Z+18	; 0x12
     6a0:	f3 89       	ldd	r31, Z+19	; 0x13
     6a2:	e0 2d       	mov	r30, r0
     6a4:	80 81       	ld	r24, Z
     6a6:	8f 7d       	andi	r24, 0xDF	; 223
     6a8:	80 83       	st	Z, r24
     6aa:	08 95       	ret

000006ac <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     6ac:	ef 92       	push	r14
     6ae:	ff 92       	push	r15
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	ec 01       	movw	r28, r24
  _written = true;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     6be:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6c2:	98 13       	cpse	r25, r24
     6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <_ZN14HardwareSerial5writeEh+0x24>
     6c6:	e8 89       	ldd	r30, Y+16	; 0x10
     6c8:	f9 89       	ldd	r31, Y+17	; 0x11
     6ca:	80 81       	ld	r24, Z
     6cc:	85 fd       	sbrc	r24, 5
     6ce:	26 c0       	rjmp	.+76     	; 0x71c <_ZN14HardwareSerial5writeEh+0x70>
     6d0:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     6d2:	0b 8d       	ldd	r16, Y+27	; 0x1b
     6d4:	10 e0       	ldi	r17, 0x00	; 0
     6d6:	0f 5f       	subi	r16, 0xFF	; 255
     6d8:	1f 4f       	sbci	r17, 0xFF	; 255
     6da:	0f 73       	andi	r16, 0x3F	; 63
     6dc:	11 27       	eor	r17, r17
     6de:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     6e0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6e2:	e8 12       	cpse	r14, r24
     6e4:	0c c0       	rjmp	.+24     	; 0x6fe <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	07 fc       	sbrc	r0, 7
     6ea:	fa cf       	rjmp	.-12     	; 0x6e0 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     6ec:	e8 89       	ldd	r30, Y+16	; 0x10
     6ee:	f9 89       	ldd	r31, Y+17	; 0x11
     6f0:	80 81       	ld	r24, Z
     6f2:	85 ff       	sbrs	r24, 5
     6f4:	f5 cf       	rjmp	.-22     	; 0x6e0 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     6f6:	ce 01       	movw	r24, r28
     6f8:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     6fc:	f1 cf       	rjmp	.-30     	; 0x6e0 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     6fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     700:	fe 01       	movw	r30, r28
     702:	e8 0f       	add	r30, r24
     704:	f1 1d       	adc	r31, r1
     706:	e3 5a       	subi	r30, 0xA3	; 163
     708:	ff 4f       	sbci	r31, 0xFF	; 255
     70a:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     70c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     70e:	f8 94       	cli
    _tx_buffer_head = i;
     710:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     712:	ea 89       	ldd	r30, Y+18	; 0x12
     714:	fb 89       	ldd	r31, Y+19	; 0x13
     716:	80 81       	ld	r24, Z
     718:	80 62       	ori	r24, 0x20	; 32
     71a:	09 c0       	rjmp	.+18     	; 0x72e <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     71c:	9f b7       	in	r25, 0x3f	; 63
     71e:	f8 94       	cli
      *_udr = c;
     720:	ee 89       	ldd	r30, Y+22	; 0x16
     722:	ff 89       	ldd	r31, Y+23	; 0x17
     724:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     726:	e8 89       	ldd	r30, Y+16	; 0x10
     728:	f9 89       	ldd	r31, Y+17	; 0x11
     72a:	80 81       	ld	r24, Z
     72c:	82 74       	andi	r24, 0x42	; 66
     72e:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     730:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	08 95       	ret

00000744 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     74a:	88 8d       	ldd	r24, Y+24	; 0x18
     74c:	88 23       	and	r24, r24
     74e:	c9 f0       	breq	.+50     	; 0x782 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     750:	ea 89       	ldd	r30, Y+18	; 0x12
     752:	fb 89       	ldd	r31, Y+19	; 0x13
     754:	80 81       	ld	r24, Z
     756:	85 fd       	sbrc	r24, 5
     758:	05 c0       	rjmp	.+10     	; 0x764 <_ZN14HardwareSerial5flushEv+0x20>
     75a:	a8 89       	ldd	r26, Y+16	; 0x10
     75c:	b9 89       	ldd	r27, Y+17	; 0x11
     75e:	8c 91       	ld	r24, X
     760:	86 fd       	sbrc	r24, 6
     762:	0f c0       	rjmp	.+30     	; 0x782 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	07 fc       	sbrc	r0, 7
     768:	f5 cf       	rjmp	.-22     	; 0x754 <_ZN14HardwareSerial5flushEv+0x10>
     76a:	80 81       	ld	r24, Z
     76c:	85 ff       	sbrs	r24, 5
     76e:	f2 cf       	rjmp	.-28     	; 0x754 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     770:	a8 89       	ldd	r26, Y+16	; 0x10
     772:	b9 89       	ldd	r27, Y+17	; 0x11
     774:	8c 91       	ld	r24, X
     776:	85 ff       	sbrs	r24, 5
     778:	ed cf       	rjmp	.-38     	; 0x754 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     77a:	ce 01       	movw	r24, r28
     77c:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     780:	e7 cf       	rjmp	.-50     	; 0x750 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	08 95       	ret

00000788 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     788:	cf 92       	push	r12
     78a:	df 92       	push	r13
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	ec 01       	movw	r28, r24
     798:	6a 01       	movw	r12, r20
     79a:	7b 01       	movw	r14, r22
     79c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     79e:	e8 89       	ldd	r30, Y+16	; 0x10
     7a0:	f9 89       	ldd	r31, Y+17	; 0x11
     7a2:	82 e0       	ldi	r24, 0x02	; 2
     7a4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     7a6:	41 15       	cp	r20, r1
     7a8:	51 4e       	sbci	r21, 0xE1	; 225
     7aa:	61 05       	cpc	r22, r1
     7ac:	71 05       	cpc	r23, r1
     7ae:	b1 f0       	breq	.+44     	; 0x7dc <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	79 e0       	ldi	r23, 0x09	; 9
     7b4:	8d e3       	ldi	r24, 0x3D	; 61
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	a7 01       	movw	r20, r14
     7ba:	96 01       	movw	r18, r12
     7bc:	0e 94 c6 18 	call	0x318c	; 0x318c <__udivmodsi4>
     7c0:	da 01       	movw	r26, r20
     7c2:	c9 01       	movw	r24, r18
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	a1 09       	sbc	r26, r1
     7c8:	b1 09       	sbc	r27, r1
     7ca:	b6 95       	lsr	r27
     7cc:	a7 95       	ror	r26
     7ce:	97 95       	ror	r25
     7d0:	87 95       	ror	r24
     7d2:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     7d4:	21 15       	cp	r18, r1
     7d6:	80 e1       	ldi	r24, 0x10	; 16
     7d8:	38 07       	cpc	r19, r24
     7da:	a8 f0       	brcs	.+42     	; 0x806 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     7dc:	e8 89       	ldd	r30, Y+16	; 0x10
     7de:	f9 89       	ldd	r31, Y+17	; 0x11
     7e0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     7e2:	60 e8       	ldi	r22, 0x80	; 128
     7e4:	74 e8       	ldi	r23, 0x84	; 132
     7e6:	8e e1       	ldi	r24, 0x1E	; 30
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	a7 01       	movw	r20, r14
     7ec:	96 01       	movw	r18, r12
     7ee:	0e 94 c6 18 	call	0x318c	; 0x318c <__udivmodsi4>
     7f2:	da 01       	movw	r26, r20
     7f4:	c9 01       	movw	r24, r18
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	a1 09       	sbc	r26, r1
     7fa:	b1 09       	sbc	r27, r1
     7fc:	b6 95       	lsr	r27
     7fe:	a7 95       	ror	r26
     800:	97 95       	ror	r25
     802:	87 95       	ror	r24
     804:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     806:	ec 85       	ldd	r30, Y+12	; 0x0c
     808:	fd 85       	ldd	r31, Y+13	; 0x0d
     80a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     80c:	ee 85       	ldd	r30, Y+14	; 0x0e
     80e:	ff 85       	ldd	r31, Y+15	; 0x0f
     810:	20 83       	st	Z, r18

  _written = false;
     812:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     814:	ec 89       	ldd	r30, Y+20	; 0x14
     816:	fd 89       	ldd	r31, Y+21	; 0x15
     818:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     81a:	ea 89       	ldd	r30, Y+18	; 0x12
     81c:	fb 89       	ldd	r31, Y+19	; 0x13
     81e:	80 81       	ld	r24, Z
     820:	80 61       	ori	r24, 0x10	; 16
     822:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     824:	ea 89       	ldd	r30, Y+18	; 0x12
     826:	fb 89       	ldd	r31, Y+19	; 0x13
     828:	80 81       	ld	r24, Z
     82a:	88 60       	ori	r24, 0x08	; 8
     82c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     82e:	ea 89       	ldd	r30, Y+18	; 0x12
     830:	fb 89       	ldd	r31, Y+19	; 0x13
     832:	80 81       	ld	r24, Z
     834:	80 68       	ori	r24, 0x80	; 128
     836:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     838:	ea 89       	ldd	r30, Y+18	; 0x12
     83a:	fb 89       	ldd	r31, Y+19	; 0x13
     83c:	80 81       	ld	r24, Z
     83e:	8f 7d       	andi	r24, 0xDF	; 223
     840:	80 83       	st	Z, r24
}
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	df 90       	pop	r13
     84e:	cf 90       	pop	r12
     850:	08 95       	ret

00000852 <__vector_25>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     852:	1f 92       	push	r1
     854:	0f 92       	push	r0
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	0f 92       	push	r0
     85a:	11 24       	eor	r1, r1
     85c:	2f 93       	push	r18
     85e:	8f 93       	push	r24
     860:	9f 93       	push	r25
     862:	ef 93       	push	r30
     864:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     866:	e0 91 7f 03 	lds	r30, 0x037F	; 0x80037f <Serial1+0x10>
     86a:	f0 91 80 03 	lds	r31, 0x0380	; 0x800380 <Serial1+0x11>
     86e:	80 81       	ld	r24, Z
     870:	e0 91 85 03 	lds	r30, 0x0385	; 0x800385 <Serial1+0x16>
     874:	f0 91 86 03 	lds	r31, 0x0386	; 0x800386 <Serial1+0x17>
     878:	82 fd       	sbrc	r24, 2
     87a:	12 c0       	rjmp	.+36     	; 0x8a0 <__vector_25+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     87c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     87e:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <Serial1+0x19>
     882:	8f 5f       	subi	r24, 0xFF	; 255
     884:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     886:	20 91 89 03 	lds	r18, 0x0389	; 0x800389 <Serial1+0x1a>
     88a:	82 17       	cp	r24, r18
     88c:	51 f0       	breq	.+20     	; 0x8a2 <__vector_25+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     88e:	e0 91 88 03 	lds	r30, 0x0388	; 0x800388 <Serial1+0x19>
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	e1 59       	subi	r30, 0x91	; 145
     896:	fc 4f       	sbci	r31, 0xFC	; 252
     898:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     89a:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <Serial1+0x19>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__vector_25+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     8a0:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
     8a2:	ff 91       	pop	r31
     8a4:	ef 91       	pop	r30
     8a6:	9f 91       	pop	r25
     8a8:	8f 91       	pop	r24
     8aa:	2f 91       	pop	r18
     8ac:	0f 90       	pop	r0
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	0f 90       	pop	r0
     8b2:	1f 90       	pop	r1
     8b4:	18 95       	reti

000008b6 <__vector_26>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     8b6:	1f 92       	push	r1
     8b8:	0f 92       	push	r0
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	0f 92       	push	r0
     8be:	11 24       	eor	r1, r1
     8c0:	2f 93       	push	r18
     8c2:	3f 93       	push	r19
     8c4:	4f 93       	push	r20
     8c6:	5f 93       	push	r21
     8c8:	6f 93       	push	r22
     8ca:	7f 93       	push	r23
     8cc:	8f 93       	push	r24
     8ce:	9f 93       	push	r25
     8d0:	af 93       	push	r26
     8d2:	bf 93       	push	r27
     8d4:	ef 93       	push	r30
     8d6:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
     8d8:	8f e6       	ldi	r24, 0x6F	; 111
     8da:	93 e0       	ldi	r25, 0x03	; 3
     8dc:	0e 94 35 03 	call	0x66a	; 0x66a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     8e0:	ff 91       	pop	r31
     8e2:	ef 91       	pop	r30
     8e4:	bf 91       	pop	r27
     8e6:	af 91       	pop	r26
     8e8:	9f 91       	pop	r25
     8ea:	8f 91       	pop	r24
     8ec:	7f 91       	pop	r23
     8ee:	6f 91       	pop	r22
     8f0:	5f 91       	pop	r21
     8f2:	4f 91       	pop	r20
     8f4:	3f 91       	pop	r19
     8f6:	2f 91       	pop	r18
     8f8:	0f 90       	pop	r0
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	0f 90       	pop	r0
     8fe:	1f 90       	pop	r1
     900:	18 95       	reti

00000902 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
     902:	8f e6       	ldi	r24, 0x6F	; 111
     904:	93 e0       	ldi	r25, 0x03	; 3
     906:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_ZN14HardwareSerial9availableEv>
     90a:	21 e0       	ldi	r18, 0x01	; 1
     90c:	89 2b       	or	r24, r25
     90e:	09 f4       	brne	.+2      	; 0x912 <_Z17Serial1_availablev+0x10>
     910:	20 e0       	ldi	r18, 0x00	; 0
}
     912:	82 2f       	mov	r24, r18
     914:	08 95       	ret

00000916 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     916:	ef e6       	ldi	r30, 0x6F	; 111
     918:	f3 e0       	ldi	r31, 0x03	; 3
     91a:	13 82       	std	Z+3, r1	; 0x03
     91c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     91e:	88 ee       	ldi	r24, 0xE8	; 232
     920:	93 e0       	ldi	r25, 0x03	; 3
     922:	a0 e0       	ldi	r26, 0x00	; 0
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	84 83       	std	Z+4, r24	; 0x04
     928:	95 83       	std	Z+5, r25	; 0x05
     92a:	a6 83       	std	Z+6, r26	; 0x06
     92c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     92e:	8f ee       	ldi	r24, 0xEF	; 239
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	91 83       	std	Z+1, r25	; 0x01
     934:	80 83       	st	Z, r24
     936:	8d ec       	ldi	r24, 0xCD	; 205
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	95 87       	std	Z+13, r25	; 0x0d
     93c:	84 87       	std	Z+12, r24	; 0x0c
     93e:	8c ec       	ldi	r24, 0xCC	; 204
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	97 87       	std	Z+15, r25	; 0x0f
     944:	86 87       	std	Z+14, r24	; 0x0e
     946:	88 ec       	ldi	r24, 0xC8	; 200
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	91 8b       	std	Z+17, r25	; 0x11
     94c:	80 8b       	std	Z+16, r24	; 0x10
     94e:	89 ec       	ldi	r24, 0xC9	; 201
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	93 8b       	std	Z+19, r25	; 0x13
     954:	82 8b       	std	Z+18, r24	; 0x12
     956:	8a ec       	ldi	r24, 0xCA	; 202
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	95 8b       	std	Z+21, r25	; 0x15
     95c:	84 8b       	std	Z+20, r24	; 0x14
     95e:	8e ec       	ldi	r24, 0xCE	; 206
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	97 8b       	std	Z+23, r25	; 0x17
     964:	86 8b       	std	Z+22, r24	; 0x16
     966:	11 8e       	std	Z+25, r1	; 0x19
     968:	12 8e       	std	Z+26, r1	; 0x1a
     96a:	13 8e       	std	Z+27, r1	; 0x1b
     96c:	14 8e       	std	Z+28, r1	; 0x1c
     96e:	08 95       	ret

00000970 <initVariant>:
     970:	08 95       	ret

00000972 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     972:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <init>

	initVariant();
     976:	0e 94 b8 04 	call	0x970	; 0x970 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
     97a:	8c e0       	ldi	r24, 0x0C	; 12
     97c:	94 e0       	ldi	r25, 0x04	; 4
     97e:	0e 94 08 0a 	call	0x1410	; 0x1410 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
     982:	0e 94 ba 01 	call	0x374	; 0x374 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     986:	c7 e2       	ldi	r28, 0x27	; 39
     988:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
     98a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <loop>
		if (serialEventRun) serialEventRun();
     98e:	20 97       	sbiw	r28, 0x00	; 0
     990:	e1 f3       	breq	.-8      	; 0x98a <main+0x18>
     992:	0e 94 27 03 	call	0x64e	; 0x64e <_Z14serialEventRunv>
     996:	f9 cf       	rjmp	.-14     	; 0x98a <main+0x18>

00000998 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     998:	cf 92       	push	r12
     99a:	df 92       	push	r13
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	6c 01       	movw	r12, r24
     9aa:	7a 01       	movw	r14, r20
     9ac:	8b 01       	movw	r16, r22
     9ae:	c0 e0       	ldi	r28, 0x00	; 0
     9b0:	d0 e0       	ldi	r29, 0x00	; 0
     9b2:	ce 15       	cp	r28, r14
     9b4:	df 05       	cpc	r29, r15
     9b6:	81 f0       	breq	.+32     	; 0x9d8 <_ZN5Print5writeEPKhj+0x40>
     9b8:	d8 01       	movw	r26, r16
     9ba:	6d 91       	ld	r22, X+
     9bc:	8d 01       	movw	r16, r26
     9be:	d6 01       	movw	r26, r12
     9c0:	ed 91       	ld	r30, X+
     9c2:	fc 91       	ld	r31, X
     9c4:	01 90       	ld	r0, Z+
     9c6:	f0 81       	ld	r31, Z
     9c8:	e0 2d       	mov	r30, r0
     9ca:	c6 01       	movw	r24, r12
     9cc:	09 95       	icall
     9ce:	89 2b       	or	r24, r25
     9d0:	11 f0       	breq	.+4      	; 0x9d6 <_ZN5Print5writeEPKhj+0x3e>
     9d2:	21 96       	adiw	r28, 0x01	; 1
     9d4:	ee cf       	rjmp	.-36     	; 0x9b2 <_ZN5Print5writeEPKhj+0x1a>
     9d6:	7e 01       	movw	r14, r28
     9d8:	c7 01       	movw	r24, r14
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	df 90       	pop	r13
     9e8:	cf 90       	pop	r12
     9ea:	08 95       	ret

000009ec <_ZN5Print5writeEPKc>:
     9ec:	61 15       	cp	r22, r1
     9ee:	71 05       	cpc	r23, r1
     9f0:	79 f0       	breq	.+30     	; 0xa10 <__DATA_REGION_LENGTH__+0x10>
     9f2:	fb 01       	movw	r30, r22
     9f4:	01 90       	ld	r0, Z+
     9f6:	00 20       	and	r0, r0
     9f8:	e9 f7       	brne	.-6      	; 0x9f4 <_ZN5Print5writeEPKc+0x8>
     9fa:	31 97       	sbiw	r30, 0x01	; 1
     9fc:	af 01       	movw	r20, r30
     9fe:	46 1b       	sub	r20, r22
     a00:	57 0b       	sbc	r21, r23
     a02:	dc 01       	movw	r26, r24
     a04:	ed 91       	ld	r30, X+
     a06:	fc 91       	ld	r31, X
     a08:	02 80       	ldd	r0, Z+2	; 0x02
     a0a:	f3 81       	ldd	r31, Z+3	; 0x03
     a0c:	e0 2d       	mov	r30, r0
     a0e:	09 94       	ijmp
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	08 95       	ret

00000a16 <_ZN5Print5printERK6String>:
     a16:	db 01       	movw	r26, r22
     a18:	14 96       	adiw	r26, 0x04	; 4
     a1a:	4d 91       	ld	r20, X+
     a1c:	5c 91       	ld	r21, X
     a1e:	15 97       	sbiw	r26, 0x05	; 5
     a20:	6d 91       	ld	r22, X+
     a22:	7c 91       	ld	r23, X
     a24:	dc 01       	movw	r26, r24
     a26:	ed 91       	ld	r30, X+
     a28:	fc 91       	ld	r31, X
     a2a:	02 80       	ldd	r0, Z+2	; 0x02
     a2c:	f3 81       	ldd	r31, Z+3	; 0x03
     a2e:	e0 2d       	mov	r30, r0
     a30:	09 94       	ijmp

00000a32 <_ZN5Print5printEPKc>:
     a32:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <_ZN5Print5writeEPKc>

00000a36 <_ZN5Print5printEc>:
     a36:	dc 01       	movw	r26, r24
     a38:	ed 91       	ld	r30, X+
     a3a:	fc 91       	ld	r31, X
     a3c:	01 90       	ld	r0, Z+
     a3e:	f0 81       	ld	r31, Z
     a40:	e0 2d       	mov	r30, r0
     a42:	09 94       	ijmp

00000a44 <_ZN5Print7printlnEv>:
     a44:	6d ef       	ldi	r22, 0xFD	; 253
     a46:	71 e0       	ldi	r23, 0x01	; 1
     a48:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <_ZN5Print5writeEPKc>

00000a4c <_ZN5Print7printlnERK6String>:
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	ec 01       	movw	r28, r24
     a56:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN5Print5printERK6String>
     a5a:	8c 01       	movw	r16, r24
     a5c:	ce 01       	movw	r24, r28
     a5e:	0e 94 22 05 	call	0xa44	; 0xa44 <_ZN5Print7printlnEv>
     a62:	80 0f       	add	r24, r16
     a64:	91 1f       	adc	r25, r17
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	08 95       	ret

00000a70 <_ZN5Print7printlnEPKc>:
     a70:	0f 93       	push	r16
     a72:	1f 93       	push	r17
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	ec 01       	movw	r28, r24
     a7a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_ZN5Print5writeEPKc>
     a7e:	8c 01       	movw	r16, r24
     a80:	ce 01       	movw	r24, r28
     a82:	0e 94 22 05 	call	0xa44	; 0xa44 <_ZN5Print7printlnEv>
     a86:	80 0f       	add	r24, r16
     a88:	91 1f       	adc	r25, r17
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	08 95       	ret

00000a94 <_ZN5Print11printNumberEmh>:
     a94:	8f 92       	push	r8
     a96:	9f 92       	push	r9
     a98:	af 92       	push	r10
     a9a:	bf 92       	push	r11
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	a1 97       	sbiw	r28, 0x21	; 33
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	de bf       	out	0x3e, r29	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	cd bf       	out	0x3d, r28	; 61
     ab8:	7c 01       	movw	r14, r24
     aba:	fa 01       	movw	r30, r20
     abc:	cb 01       	movw	r24, r22
     abe:	19 a2       	std	Y+33, r1	; 0x21
     ac0:	22 30       	cpi	r18, 0x02	; 2
     ac2:	08 f4       	brcc	.+2      	; 0xac6 <_ZN5Print11printNumberEmh+0x32>
     ac4:	2a e0       	ldi	r18, 0x0A	; 10
     ac6:	8e 01       	movw	r16, r28
     ac8:	0f 5d       	subi	r16, 0xDF	; 223
     aca:	1f 4f       	sbci	r17, 0xFF	; 255
     acc:	82 2e       	mov	r8, r18
     ace:	91 2c       	mov	r9, r1
     ad0:	a1 2c       	mov	r10, r1
     ad2:	b1 2c       	mov	r11, r1
     ad4:	bf 01       	movw	r22, r30
     ad6:	a5 01       	movw	r20, r10
     ad8:	94 01       	movw	r18, r8
     ada:	0e 94 c6 18 	call	0x318c	; 0x318c <__udivmodsi4>
     ade:	f9 01       	movw	r30, r18
     ae0:	ca 01       	movw	r24, r20
     ae2:	01 50       	subi	r16, 0x01	; 1
     ae4:	11 09       	sbc	r17, r1
     ae6:	6a 30       	cpi	r22, 0x0A	; 10
     ae8:	10 f4       	brcc	.+4      	; 0xaee <_ZN5Print11printNumberEmh+0x5a>
     aea:	60 5d       	subi	r22, 0xD0	; 208
     aec:	01 c0       	rjmp	.+2      	; 0xaf0 <_ZN5Print11printNumberEmh+0x5c>
     aee:	69 5c       	subi	r22, 0xC9	; 201
     af0:	d8 01       	movw	r26, r16
     af2:	6c 93       	st	X, r22
     af4:	23 2b       	or	r18, r19
     af6:	24 2b       	or	r18, r20
     af8:	25 2b       	or	r18, r21
     afa:	61 f7       	brne	.-40     	; 0xad4 <_ZN5Print11printNumberEmh+0x40>
     afc:	b8 01       	movw	r22, r16
     afe:	c7 01       	movw	r24, r14
     b00:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_ZN5Print5writeEPKc>
     b04:	a1 96       	adiw	r28, 0x21	; 33
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	bf 90       	pop	r11
     b1e:	af 90       	pop	r10
     b20:	9f 90       	pop	r9
     b22:	8f 90       	pop	r8
     b24:	08 95       	ret

00000b26 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     b26:	cf 92       	push	r12
     b28:	df 92       	push	r13
     b2a:	ef 92       	push	r14
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
  if (base == 0) {
     b36:	21 15       	cp	r18, r1
     b38:	31 05       	cpc	r19, r1
     b3a:	81 f4       	brne	.+32     	; 0xb5c <_ZN5Print5printEli+0x36>
    return write(n);
     b3c:	dc 01       	movw	r26, r24
     b3e:	ed 91       	ld	r30, X+
     b40:	fc 91       	ld	r31, X
     b42:	01 90       	ld	r0, Z+
     b44:	f0 81       	ld	r31, Z
     b46:	e0 2d       	mov	r30, r0
     b48:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	df 90       	pop	r13
     b58:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     b5a:	09 94       	ijmp
  } else if (base == 10) {
     b5c:	2a 30       	cpi	r18, 0x0A	; 10
     b5e:	31 05       	cpc	r19, r1
     b60:	01 f5       	brne	.+64     	; 0xba2 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     b62:	77 ff       	sbrs	r23, 7
     b64:	1d c0       	rjmp	.+58     	; 0xba0 <_ZN5Print5printEli+0x7a>
     b66:	6a 01       	movw	r12, r20
     b68:	7b 01       	movw	r14, r22
     b6a:	ec 01       	movw	r28, r24
      int t = print('-');
     b6c:	6d e2       	ldi	r22, 0x2D	; 45
     b6e:	0e 94 1b 05 	call	0xa36	; 0xa36 <_ZN5Print5printEc>
     b72:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     b74:	44 27       	eor	r20, r20
     b76:	55 27       	eor	r21, r21
     b78:	ba 01       	movw	r22, r20
     b7a:	4c 19       	sub	r20, r12
     b7c:	5d 09       	sbc	r21, r13
     b7e:	6e 09       	sbc	r22, r14
     b80:	7f 09       	sbc	r23, r15
     b82:	2a e0       	ldi	r18, 0x0A	; 10
     b84:	ce 01       	movw	r24, r28
     b86:	0e 94 4a 05 	call	0xa94	; 0xa94 <_ZN5Print11printNumberEmh>
     b8a:	80 0f       	add	r24, r16
     b8c:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     ba0:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     bb2:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <_ZN5Print11printNumberEmh>

00000bb6 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     bb6:	9a 01       	movw	r18, r20
  return print((long) n, base);
     bb8:	ab 01       	movw	r20, r22
     bba:	77 0f       	add	r23, r23
     bbc:	66 0b       	sbc	r22, r22
     bbe:	77 0b       	sbc	r23, r23
     bc0:	0c 94 93 05 	jmp	0xb26	; 0xb26 <_ZN5Print5printEli>

00000bc4 <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
     bc4:	61 50       	subi	r22, 0x01	; 1
     bc6:	30 f0       	brcs	.+12     	; 0xbd4 <_ZL4RecvPVhh+0x10>
     bc8:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     bcc:	fc 01       	movw	r30, r24
     bce:	20 83       	st	Z, r18
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	f8 cf       	rjmp	.-16     	; 0xbc4 <_ZL4RecvPVhh>
     bd4:	28 98       	cbi	0x05, 0	; 5
     bd6:	84 e6       	ldi	r24, 0x64	; 100
     bd8:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <RxLEDPulse>
     bdc:	08 95       	ret

00000bde <_ZL11SendControlh>:
     bde:	40 91 0f 04 	lds	r20, 0x040F	; 0x80040f <_ZL6_cmark>
     be2:	50 91 10 04 	lds	r21, 0x0410	; 0x800410 <_ZL6_cmark+0x1>
     be6:	20 91 0d 04 	lds	r18, 0x040D	; 0x80040d <_ZL5_cend>
     bea:	30 91 0e 04 	lds	r19, 0x040E	; 0x80040e <_ZL5_cend+0x1>
     bee:	42 17       	cp	r20, r18
     bf0:	53 07       	cpc	r21, r19
     bf2:	b4 f4       	brge	.+44     	; 0xc20 <_ZL11SendControlh+0x42>
     bf4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     bf8:	95 70       	andi	r25, 0x05	; 5
     bfa:	e1 f3       	breq	.-8      	; 0xbf4 <_ZL11SendControlh+0x16>
     bfc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c00:	92 fd       	sbrc	r25, 2
     c02:	19 c0       	rjmp	.+50     	; 0xc36 <_ZL11SendControlh+0x58>
     c04:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     c08:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <_ZL6_cmark>
     c0c:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <_ZL6_cmark+0x1>
     c10:	01 96       	adiw	r24, 0x01	; 1
     c12:	8f 73       	andi	r24, 0x3F	; 63
     c14:	99 27       	eor	r25, r25
     c16:	89 2b       	or	r24, r25
     c18:	19 f4       	brne	.+6      	; 0xc20 <_ZL11SendControlh+0x42>
     c1a:	8e ef       	ldi	r24, 0xFE	; 254
     c1c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c20:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <_ZL6_cmark>
     c24:	90 91 10 04 	lds	r25, 0x0410	; 0x800410 <_ZL6_cmark+0x1>
     c28:	01 96       	adiw	r24, 0x01	; 1
     c2a:	90 93 10 04 	sts	0x0410, r25	; 0x800410 <_ZL6_cmark+0x1>
     c2e:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <_ZL6_cmark>
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	08 95       	ret
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	08 95       	ret

00000c3a <_ZL24USB_SendStringDescriptorPKhhh>:
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	d8 2e       	mov	r13, r24
     c4a:	f9 2e       	mov	r15, r25
     c4c:	e4 2e       	mov	r14, r20
     c4e:	06 2f       	mov	r16, r22
     c50:	10 e0       	ldi	r17, 0x00	; 0
     c52:	c8 01       	movw	r24, r16
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	88 0f       	add	r24, r24
     c58:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZL11SendControlh>
     c5c:	83 e0       	ldi	r24, 0x03	; 3
     c5e:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZL11SendControlh>
     c62:	cd 2d       	mov	r28, r13
     c64:	df 2d       	mov	r29, r15
     c66:	0c 0f       	add	r16, r28
     c68:	1d 1f       	adc	r17, r29
     c6a:	c0 17       	cp	r28, r16
     c6c:	d1 07       	cpc	r29, r17
     c6e:	89 f0       	breq	.+34     	; 0xc92 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
     c70:	e7 fe       	sbrs	r14, 7
     c72:	03 c0       	rjmp	.+6      	; 0xc7a <_ZL24USB_SendStringDescriptorPKhhh+0x40>
     c74:	fe 01       	movw	r30, r28
     c76:	84 91       	lpm	r24, Z
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <_ZL24USB_SendStringDescriptorPKhhh+0x42>
     c7a:	88 81       	ld	r24, Y
     c7c:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZL11SendControlh>
     c80:	f8 2e       	mov	r15, r24
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZL11SendControlh>
     c88:	8f 21       	and	r24, r15
     c8a:	21 96       	adiw	r28, 0x01	; 1
     c8c:	81 11       	cpse	r24, r1
     c8e:	ed cf       	rjmp	.-38     	; 0xc6a <_ZL24USB_SendStringDescriptorPKhhh+0x30>
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	ff 90       	pop	r15
     c9e:	ef 90       	pop	r14
     ca0:	df 90       	pop	r13
     ca2:	08 95       	ret

00000ca4 <_ZL15USB_ClockEnablev>:
     ca4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
     ca8:	81 60       	ori	r24, 0x01	; 1
     caa:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
     cae:	80 ea       	ldi	r24, 0xA0	; 160
     cb0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     cb4:	89 b5       	in	r24, 0x29	; 41
     cb6:	80 61       	ori	r24, 0x10	; 16
     cb8:	89 bd       	out	0x29, r24	; 41
     cba:	89 b5       	in	r24, 0x29	; 41
     cbc:	82 60       	ori	r24, 0x02	; 2
     cbe:	89 bd       	out	0x29, r24	; 41
     cc0:	09 b4       	in	r0, 0x29	; 41
     cc2:	00 fe       	sbrs	r0, 0
     cc4:	fd cf       	rjmp	.-6      	; 0xcc0 <_ZL15USB_ClockEnablev+0x1c>
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 96 0a 	call	0x152c	; 0x152c <delay>
     cd2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     cd6:	8f 7c       	andi	r24, 0xCF	; 207
     cd8:	80 61       	ori	r24, 0x10	; 16
     cda:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     cde:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     ce2:	80 7f       	andi	r24, 0xF0	; 240
     ce4:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     ce8:	08 95       	ret

00000cea <_ZL14SendInterfacesv>:
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	1f 92       	push	r1
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	19 82       	std	Y+1, r1	; 0x01
     cf6:	ce 01       	movw	r24, r28
     cf8:	01 96       	adiw	r24, 0x01	; 1
     cfa:	0e 94 a2 13 	call	0x2744	; 0x2744 <_Z16CDC_GetInterfacePh>
     cfe:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_Z12PluggableUSBv>
     d02:	be 01       	movw	r22, r28
     d04:	6f 5f       	subi	r22, 0xFF	; 255
     d06:	7f 4f       	sbci	r23, 0xFF	; 255
     d08:	0e 94 51 14 	call	0x28a2	; 0x28a2 <_ZN13PluggableUSB_12getInterfaceEPh>
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	0f 90       	pop	r0
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	08 95       	ret

00000d16 <_ZN6LockEPC1Eh>:
     d16:	2f b7       	in	r18, 0x3f	; 63
     d18:	fc 01       	movw	r30, r24
     d1a:	20 83       	st	Z, r18
     d1c:	f8 94       	cli
     d1e:	67 70       	andi	r22, 0x07	; 7
     d20:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     d24:	08 95       	ret

00000d26 <_Z13USB_Availableh>:
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	1f 92       	push	r1
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	68 2f       	mov	r22, r24
     d32:	ce 01       	movw	r24, r28
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN6LockEPC1Eh>
     d3a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     d3e:	99 81       	ldd	r25, Y+1	; 0x01
     d40:	9f bf       	out	0x3f, r25	; 63
     d42:	0f 90       	pop	r0
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <_Z8USB_RecvhPvi>:
     d4a:	ef 92       	push	r14
     d4c:	ff 92       	push	r15
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	1f 92       	push	r1
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <_usbConfiguration>
     d60:	99 23       	and	r25, r25
     d62:	11 f0       	breq	.+4      	; 0xd68 <_Z8USB_RecvhPvi+0x1e>
     d64:	57 ff       	sbrs	r21, 7
     d66:	03 c0       	rjmp	.+6      	; 0xd6e <_Z8USB_RecvhPvi+0x24>
     d68:	8f ef       	ldi	r24, 0xFF	; 255
     d6a:	9f ef       	ldi	r25, 0xFF	; 255
     d6c:	29 c0       	rjmp	.+82     	; 0xdc0 <_Z8USB_RecvhPvi+0x76>
     d6e:	8a 01       	movw	r16, r20
     d70:	7b 01       	movw	r14, r22
     d72:	68 2f       	mov	r22, r24
     d74:	ce 01       	movw	r24, r28
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN6LockEPC1Eh>
     d7c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	02 17       	cp	r16, r18
     d84:	13 07       	cpc	r17, r19
     d86:	0c f4       	brge	.+2      	; 0xd8a <_Z8USB_RecvhPvi+0x40>
     d88:	98 01       	movw	r18, r16
     d8a:	82 2f       	mov	r24, r18
     d8c:	f7 01       	movw	r30, r14
     d8e:	94 e6       	ldi	r25, 0x64	; 100
     d90:	81 50       	subi	r24, 0x01	; 1
     d92:	38 f0       	brcs	.+14     	; 0xda2 <_Z8USB_RecvhPvi+0x58>
     d94:	28 98       	cbi	0x05, 0	; 5
     d96:	90 93 14 04 	sts	0x0414, r25	; 0x800414 <RxLEDPulse>
     d9a:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     d9e:	41 93       	st	Z+, r20
     da0:	f7 cf       	rjmp	.-18     	; 0xd90 <_Z8USB_RecvhPvi+0x46>
     da2:	21 15       	cp	r18, r1
     da4:	31 05       	cpc	r19, r1
     da6:	21 f0       	breq	.+8      	; 0xdb0 <_Z8USB_RecvhPvi+0x66>
     da8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     dac:	88 23       	and	r24, r24
     dae:	21 f0       	breq	.+8      	; 0xdb8 <_Z8USB_RecvhPvi+0x6e>
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	8f bf       	out	0x3f, r24	; 63
     db4:	c9 01       	movw	r24, r18
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <_Z8USB_RecvhPvi+0x76>
     db8:	8b e6       	ldi	r24, 0x6B	; 107
     dba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     dbe:	f8 cf       	rjmp	.-16     	; 0xdb0 <_Z8USB_RecvhPvi+0x66>
     dc0:	0f 90       	pop	r0
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	1f 91       	pop	r17
     dc8:	0f 91       	pop	r16
     dca:	ff 90       	pop	r15
     dcc:	ef 90       	pop	r14
     dce:	08 95       	ret

00000dd0 <_Z8USB_Recvh>:
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	1f 92       	push	r1
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	41 e0       	ldi	r20, 0x01	; 1
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	be 01       	movw	r22, r28
     de0:	6f 5f       	subi	r22, 0xFF	; 255
     de2:	7f 4f       	sbci	r23, 0xFF	; 255
     de4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_Z8USB_RecvhPvi>
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	19 f4       	brne	.+6      	; 0xdf2 <_Z8USB_Recvh+0x22>
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <_Z8USB_Recvh+0x26>
     df2:	8f ef       	ldi	r24, 0xFF	; 255
     df4:	9f ef       	ldi	r25, 0xFF	; 255
     df6:	0f 90       	pop	r0
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <_Z13USB_SendSpaceh>:
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	1f 92       	push	r1
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	68 2f       	mov	r22, r24
     e0a:	ce 01       	movw	r24, r28
     e0c:	01 96       	adiw	r24, 0x01	; 1
     e0e:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN6LockEPC1Eh>
     e12:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     e16:	89 2f       	mov	r24, r25
     e18:	80 72       	andi	r24, 0x20	; 32
     e1a:	95 ff       	sbrs	r25, 5
     e1c:	04 c0       	rjmp	.+8      	; 0xe26 <_Z13USB_SendSpaceh+0x28>
     e1e:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     e22:	80 e4       	ldi	r24, 0x40	; 64
     e24:	89 1b       	sub	r24, r25
     e26:	99 81       	ldd	r25, Y+1	; 0x01
     e28:	9f bf       	out	0x3f, r25	; 63
     e2a:	0f 90       	pop	r0
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	08 95       	ret

00000e32 <_Z8USB_SendhPKvi>:
     e32:	5f 92       	push	r5
     e34:	6f 92       	push	r6
     e36:	7f 92       	push	r7
     e38:	8f 92       	push	r8
     e3a:	9f 92       	push	r9
     e3c:	af 92       	push	r10
     e3e:	bf 92       	push	r11
     e40:	cf 92       	push	r12
     e42:	df 92       	push	r13
     e44:	ef 92       	push	r14
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	1f 92       	push	r1
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	98 2e       	mov	r9, r24
     e58:	6b 01       	movw	r12, r22
     e5a:	b4 2e       	mov	r11, r20
     e5c:	05 2f       	mov	r16, r21
     e5e:	80 91 13 04 	lds	r24, 0x0413	; 0x800413 <_usbConfiguration>
     e62:	81 11       	cpse	r24, r1
     e64:	03 c0       	rjmp	.+6      	; 0xe6c <_Z8USB_SendhPKvi+0x3a>
     e66:	8f ef       	ldi	r24, 0xFF	; 255
     e68:	9f ef       	ldi	r25, 0xFF	; 255
     e6a:	77 c0       	rjmp	.+238    	; 0xf5a <_Z8USB_SendhPKvi+0x128>
     e6c:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <_usbSuspendState>
     e70:	80 ff       	sbrs	r24, 0
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <_Z8USB_SendhPKvi+0x4c>
     e74:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     e78:	82 60       	ori	r24, 0x02	; 2
     e7a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     e7e:	eb 2c       	mov	r14, r11
     e80:	f0 2e       	mov	r15, r16
     e82:	a1 2c       	mov	r10, r1
     e84:	8a ef       	ldi	r24, 0xFA	; 250
     e86:	88 2e       	mov	r8, r24
     e88:	89 2d       	mov	r24, r9
     e8a:	80 72       	andi	r24, 0x20	; 32
     e8c:	68 2e       	mov	r6, r24
     e8e:	89 2d       	mov	r24, r9
     e90:	80 74       	andi	r24, 0x40	; 64
     e92:	58 2e       	mov	r5, r24
     e94:	9a e3       	ldi	r25, 0x3A	; 58
     e96:	79 2e       	mov	r7, r25
     e98:	e1 14       	cp	r14, r1
     e9a:	f1 04       	cpc	r15, r1
     e9c:	19 f4       	brne	.+6      	; 0xea4 <_Z8USB_SendhPKvi+0x72>
     e9e:	aa 20       	and	r10, r10
     ea0:	09 f4       	brne	.+2      	; 0xea4 <_Z8USB_SendhPKvi+0x72>
     ea2:	55 c0       	rjmp	.+170    	; 0xf4e <_Z8USB_SendhPKvi+0x11c>
     ea4:	89 2d       	mov	r24, r9
     ea6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_Z13USB_SendSpaceh>
     eaa:	18 2f       	mov	r17, r24
     eac:	81 11       	cpse	r24, r1
     eae:	0a c0       	rjmp	.+20     	; 0xec4 <_Z8USB_SendhPKvi+0x92>
     eb0:	8a 94       	dec	r8
     eb2:	88 20       	and	r8, r8
     eb4:	c1 f2       	breq	.-80     	; 0xe66 <_Z8USB_SendhPKvi+0x34>
     eb6:	61 e0       	ldi	r22, 0x01	; 1
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 96 0a 	call	0x152c	; 0x152c <delay>
     ec2:	ea cf       	rjmp	.-44     	; 0xe98 <_Z8USB_SendhPKvi+0x66>
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	e8 16       	cp	r14, r24
     ec8:	f9 06       	cpc	r15, r25
     eca:	0c f4       	brge	.+2      	; 0xece <_Z8USB_SendhPKvi+0x9c>
     ecc:	1e 2d       	mov	r17, r14
     ece:	69 2d       	mov	r22, r9
     ed0:	ce 01       	movw	r24, r28
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	0e 94 8b 06 	call	0xd16	; 0xd16 <_ZN6LockEPC1Eh>
     ed8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     edc:	85 ff       	sbrs	r24, 5
     ede:	34 c0       	rjmp	.+104    	; 0xf48 <_Z8USB_SendhPKvi+0x116>
     ee0:	81 2f       	mov	r24, r17
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	e8 1a       	sub	r14, r24
     ee6:	f9 0a       	sbc	r15, r25
     ee8:	66 20       	and	r6, r6
     eea:	29 f0       	breq	.+10     	; 0xef6 <_Z8USB_SendhPKvi+0xc4>
     eec:	11 50       	subi	r17, 0x01	; 1
     eee:	a0 f0       	brcs	.+40     	; 0xf18 <_Z8USB_SendhPKvi+0xe6>
     ef0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     ef4:	fb cf       	rjmp	.-10     	; 0xeec <_Z8USB_SendhPKvi+0xba>
     ef6:	f6 01       	movw	r30, r12
     ef8:	97 fe       	sbrs	r9, 7
     efa:	0a c0       	rjmp	.+20     	; 0xf10 <_Z8USB_SendhPKvi+0xde>
     efc:	11 50       	subi	r17, 0x01	; 1
     efe:	50 f0       	brcs	.+20     	; 0xf14 <_Z8USB_SendhPKvi+0xe2>
     f00:	24 91       	lpm	r18, Z
     f02:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     f06:	31 96       	adiw	r30, 0x01	; 1
     f08:	f9 cf       	rjmp	.-14     	; 0xefc <_Z8USB_SendhPKvi+0xca>
     f0a:	21 91       	ld	r18, Z+
     f0c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     f10:	11 50       	subi	r17, 0x01	; 1
     f12:	d8 f7       	brcc	.-10     	; 0xf0a <_Z8USB_SendhPKvi+0xd8>
     f14:	c8 0e       	add	r12, r24
     f16:	d9 1e       	adc	r13, r25
     f18:	aa 20       	and	r10, r10
     f1a:	19 f0       	breq	.+6      	; 0xf22 <_Z8USB_SendhPKvi+0xf0>
     f1c:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f20:	0b c0       	rjmp	.+22     	; 0xf38 <_Z8USB_SendhPKvi+0x106>
     f22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f26:	85 fd       	sbrc	r24, 5
     f28:	09 c0       	rjmp	.+18     	; 0xf3c <_Z8USB_SendhPKvi+0x10a>
     f2a:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f2e:	aa 24       	eor	r10, r10
     f30:	a3 94       	inc	r10
     f32:	e1 14       	cp	r14, r1
     f34:	f1 04       	cpc	r15, r1
     f36:	41 f0       	breq	.+16     	; 0xf48 <_Z8USB_SendhPKvi+0x116>
     f38:	a1 2c       	mov	r10, r1
     f3a:	06 c0       	rjmp	.+12     	; 0xf48 <_Z8USB_SendhPKvi+0x116>
     f3c:	e1 14       	cp	r14, r1
     f3e:	f1 04       	cpc	r15, r1
     f40:	19 f4       	brne	.+6      	; 0xf48 <_Z8USB_SendhPKvi+0x116>
     f42:	51 10       	cpse	r5, r1
     f44:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	8f bf       	out	0x3f, r24	; 63
     f4c:	a5 cf       	rjmp	.-182    	; 0xe98 <_Z8USB_SendhPKvi+0x66>
     f4e:	5d 98       	cbi	0x0b, 5	; 11
     f50:	84 e6       	ldi	r24, 0x64	; 100
     f52:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <TxLEDPulse>
     f56:	8b 2d       	mov	r24, r11
     f58:	90 2f       	mov	r25, r16
     f5a:	0f 90       	pop	r0
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	ef 90       	pop	r14
     f68:	df 90       	pop	r13
     f6a:	cf 90       	pop	r12
     f6c:	bf 90       	pop	r11
     f6e:	af 90       	pop	r10
     f70:	9f 90       	pop	r9
     f72:	8f 90       	pop	r8
     f74:	7f 90       	pop	r7
     f76:	6f 90       	pop	r6
     f78:	5f 90       	pop	r5
     f7a:	08 95       	ret

00000f7c <_Z11InitControli>:
     f7c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     f80:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <_ZL6_cmark+0x1>
     f84:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <_ZL6_cmark>
     f88:	90 93 0e 04 	sts	0x040E, r25	; 0x80040e <_ZL5_cend+0x1>
     f8c:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <_ZL5_cend>
     f90:	08 95       	ret

00000f92 <_Z15USB_SendControlhPKvi>:
     f92:	df 92       	push	r13
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	d8 2e       	mov	r13, r24
     fa2:	8a 01       	movw	r16, r20
     fa4:	7b 01       	movw	r14, r22
     fa6:	e4 0e       	add	r14, r20
     fa8:	f5 1e       	adc	r15, r21
     faa:	eb 01       	movw	r28, r22
     fac:	ce 15       	cp	r28, r14
     fae:	df 05       	cpc	r29, r15
     fb0:	71 f0       	breq	.+28     	; 0xfce <_Z15USB_SendControlhPKvi+0x3c>
     fb2:	d7 fe       	sbrs	r13, 7
     fb4:	03 c0       	rjmp	.+6      	; 0xfbc <_Z15USB_SendControlhPKvi+0x2a>
     fb6:	fe 01       	movw	r30, r28
     fb8:	84 91       	lpm	r24, Z
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <_Z15USB_SendControlhPKvi+0x2c>
     fbc:	88 81       	ld	r24, Y
     fbe:	0e 94 ef 05 	call	0xbde	; 0xbde <_ZL11SendControlh>
     fc2:	21 96       	adiw	r28, 0x01	; 1
     fc4:	81 11       	cpse	r24, r1
     fc6:	f2 cf       	rjmp	.-28     	; 0xfac <_Z15USB_SendControlhPKvi+0x1a>
     fc8:	8f ef       	ldi	r24, 0xFF	; 255
     fca:	9f ef       	ldi	r25, 0xFF	; 255
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <_Z15USB_SendControlhPKvi+0x3e>
     fce:	c8 01       	movw	r24, r16
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	1f 91       	pop	r17
     fd6:	0f 91       	pop	r16
     fd8:	ff 90       	pop	r15
     fda:	ef 90       	pop	r14
     fdc:	df 90       	pop	r13
     fde:	08 95       	ret

00000fe0 <_Z15USB_RecvControlPvi>:
     fe0:	af 92       	push	r10
     fe2:	bf 92       	push	r11
     fe4:	df 92       	push	r13
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	5c 01       	movw	r10, r24
     ff4:	8b 01       	movw	r16, r22
     ff6:	eb 01       	movw	r28, r22
     ff8:	9b ef       	ldi	r25, 0xFB	; 251
     ffa:	d9 2e       	mov	r13, r25
     ffc:	20 97       	sbiw	r28, 0x00	; 0
     ffe:	c1 f0       	breq	.+48     	; 0x1030 <_Z15USB_RecvControlPvi+0x50>
    1000:	7e 01       	movw	r14, r28
    1002:	c1 34       	cpi	r28, 0x41	; 65
    1004:	d1 05       	cpc	r29, r1
    1006:	1c f0       	brlt	.+6      	; 0x100e <_Z15USB_RecvControlPvi+0x2e>
    1008:	80 e4       	ldi	r24, 0x40	; 64
    100a:	e8 2e       	mov	r14, r24
    100c:	f1 2c       	mov	r15, r1
    100e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1012:	82 ff       	sbrs	r24, 2
    1014:	fc cf       	rjmp	.-8      	; 0x100e <_Z15USB_RecvControlPvi+0x2e>
    1016:	c8 01       	movw	r24, r16
    1018:	8c 1b       	sub	r24, r28
    101a:	9d 0b       	sbc	r25, r29
    101c:	6e 2d       	mov	r22, r14
    101e:	8a 0d       	add	r24, r10
    1020:	9b 1d       	adc	r25, r11
    1022:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZL4RecvPVhh>
    1026:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    102a:	ce 19       	sub	r28, r14
    102c:	df 09       	sbc	r29, r15
    102e:	e6 cf       	rjmp	.-52     	; 0xffc <_Z15USB_RecvControlPvi+0x1c>
    1030:	c8 01       	movw	r24, r16
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	bf 90       	pop	r11
    1042:	af 90       	pop	r10
    1044:	08 95       	ret

00001046 <__vector_11>:
    1046:	1f 92       	push	r1
    1048:	0f 92       	push	r0
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	0f 92       	push	r0
    104e:	11 24       	eor	r1, r1
    1050:	cf 92       	push	r12
    1052:	df 92       	push	r13
    1054:	ef 92       	push	r14
    1056:	ff 92       	push	r15
    1058:	0f 93       	push	r16
    105a:	1f 93       	push	r17
    105c:	2f 93       	push	r18
    105e:	3f 93       	push	r19
    1060:	4f 93       	push	r20
    1062:	5f 93       	push	r21
    1064:	6f 93       	push	r22
    1066:	7f 93       	push	r23
    1068:	8f 93       	push	r24
    106a:	9f 93       	push	r25
    106c:	af 93       	push	r26
    106e:	bf 93       	push	r27
    1070:	ef 93       	push	r30
    1072:	ff 93       	push	r31
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
    107c:	6c 97       	sbiw	r28, 0x1c	; 28
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1086:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    108a:	83 ff       	sbrs	r24, 3
    108c:	17 c1       	rjmp	.+558    	; 0x12bc <__vector_11+0x276>
    108e:	68 e0       	ldi	r22, 0x08	; 8
    1090:	ce 01       	movw	r24, r28
    1092:	45 96       	adiw	r24, 0x15	; 21
    1094:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_ZL4RecvPVhh>
    1098:	82 ef       	ldi	r24, 0xF2	; 242
    109a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    109e:	8d 89       	ldd	r24, Y+21	; 0x15
    10a0:	87 ff       	sbrs	r24, 7
    10a2:	05 c0       	rjmp	.+10     	; 0x10ae <__vector_11+0x68>
    10a4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    10a8:	90 ff       	sbrs	r25, 0
    10aa:	fc cf       	rjmp	.-8      	; 0x10a4 <__vector_11+0x5e>
    10ac:	03 c0       	rjmp	.+6      	; 0x10b4 <__vector_11+0x6e>
    10ae:	9e ef       	ldi	r25, 0xFE	; 254
    10b0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    10b4:	98 2f       	mov	r25, r24
    10b6:	90 76       	andi	r25, 0x60	; 96
    10b8:	09 f0       	breq	.+2      	; 0x10bc <__vector_11+0x76>
    10ba:	d8 c0       	rjmp	.+432    	; 0x126c <__vector_11+0x226>
    10bc:	9e 89       	ldd	r25, Y+22	; 0x16
    10be:	4f 89       	ldd	r20, Y+23	; 0x17
    10c0:	58 8d       	ldd	r21, Y+24	; 0x18
    10c2:	2f 89       	ldd	r18, Y+23	; 0x17
    10c4:	18 8d       	ldd	r17, Y+24	; 0x18
    10c6:	91 11       	cpse	r25, r1
    10c8:	0c c0       	rjmp	.+24     	; 0x10e2 <__vector_11+0x9c>
    10ca:	80 38       	cpi	r24, 0x80	; 128
    10cc:	29 f4       	brne	.+10     	; 0x10d8 <__vector_11+0x92>
    10ce:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <_usbCurrentStatus>
    10d2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <__vector_11+0x96>
    10d8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    10dc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    10e0:	e6 c0       	rjmp	.+460    	; 0x12ae <__vector_11+0x268>
    10e2:	91 30       	cpi	r25, 0x01	; 1
    10e4:	51 f4       	brne	.+20     	; 0x10fa <__vector_11+0xb4>
    10e6:	81 11       	cpse	r24, r1
    10e8:	e2 c0       	rjmp	.+452    	; 0x12ae <__vector_11+0x268>
    10ea:	41 30       	cpi	r20, 0x01	; 1
    10ec:	51 05       	cpc	r21, r1
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <__vector_11+0xac>
    10f0:	de c0       	rjmp	.+444    	; 0x12ae <__vector_11+0x268>
    10f2:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <_usbCurrentStatus>
    10f6:	8d 7f       	andi	r24, 0xFD	; 253
    10f8:	0b c0       	rjmp	.+22     	; 0x1110 <__vector_11+0xca>
    10fa:	93 30       	cpi	r25, 0x03	; 3
    10fc:	61 f4       	brne	.+24     	; 0x1116 <__vector_11+0xd0>
    10fe:	81 11       	cpse	r24, r1
    1100:	d6 c0       	rjmp	.+428    	; 0x12ae <__vector_11+0x268>
    1102:	41 30       	cpi	r20, 0x01	; 1
    1104:	51 05       	cpc	r21, r1
    1106:	09 f0       	breq	.+2      	; 0x110a <__vector_11+0xc4>
    1108:	d2 c0       	rjmp	.+420    	; 0x12ae <__vector_11+0x268>
    110a:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <_usbCurrentStatus>
    110e:	82 60       	ori	r24, 0x02	; 2
    1110:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <_usbCurrentStatus>
    1114:	cc c0       	rjmp	.+408    	; 0x12ae <__vector_11+0x268>
    1116:	95 30       	cpi	r25, 0x05	; 5
    1118:	49 f4       	brne	.+18     	; 0x112c <__vector_11+0xe6>
    111a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    111e:	80 ff       	sbrs	r24, 0
    1120:	fc cf       	rjmp	.-8      	; 0x111a <__vector_11+0xd4>
    1122:	82 2f       	mov	r24, r18
    1124:	80 68       	ori	r24, 0x80	; 128
    1126:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    112a:	c1 c0       	rjmp	.+386    	; 0x12ae <__vector_11+0x268>
    112c:	96 30       	cpi	r25, 0x06	; 6
    112e:	09 f0       	breq	.+2      	; 0x1132 <__vector_11+0xec>
    1130:	70 c0       	rjmp	.+224    	; 0x1212 <__vector_11+0x1cc>
    1132:	eb 8c       	ldd	r14, Y+27	; 0x1b
    1134:	fc 8c       	ldd	r15, Y+28	; 0x1c
    1136:	12 30       	cpi	r17, 0x02	; 2
    1138:	69 f5       	brne	.+90     	; 0x1194 <__vector_11+0x14e>
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z11InitControli>
    1142:	0e 94 75 06 	call	0xcea	; 0xcea <_ZL14SendInterfacesv>
    1146:	99 e0       	ldi	r25, 0x09	; 9
    1148:	9e 01       	movw	r18, r28
    114a:	2f 5f       	subi	r18, 0xFF	; 255
    114c:	3f 4f       	sbci	r19, 0xFF	; 255
    114e:	69 01       	movw	r12, r18
    1150:	f9 01       	movw	r30, r18
    1152:	29 2f       	mov	r18, r25
    1154:	11 92       	st	Z+, r1
    1156:	2a 95       	dec	r18
    1158:	e9 f7       	brne	.-6      	; 0x1154 <__vector_11+0x10e>
    115a:	99 83       	std	Y+1, r25	; 0x01
    115c:	1a 83       	std	Y+2, r17	; 0x02
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	9e 83       	std	Y+6, r25	; 0x06
    1162:	90 ea       	ldi	r25, 0xA0	; 160
    1164:	98 87       	std	Y+8, r25	; 0x08
    1166:	9a ef       	ldi	r25, 0xFA	; 250
    1168:	99 87       	std	Y+9, r25	; 0x09
    116a:	20 91 0f 04 	lds	r18, 0x040F	; 0x80040f <_ZL6_cmark>
    116e:	30 91 10 04 	lds	r19, 0x0410	; 0x800410 <_ZL6_cmark+0x1>
    1172:	27 5f       	subi	r18, 0xF7	; 247
    1174:	3f 4f       	sbci	r19, 0xFF	; 255
    1176:	3c 83       	std	Y+4, r19	; 0x04
    1178:	2b 83       	std	Y+3, r18	; 0x03
    117a:	8d 83       	std	Y+5, r24	; 0x05
    117c:	c7 01       	movw	r24, r14
    117e:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z11InitControli>
    1182:	49 e0       	ldi	r20, 0x09	; 9
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	b6 01       	movw	r22, r12
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	0e 94 c9 07 	call	0xf92	; 0xf92 <_Z15USB_SendControlhPKvi>
    118e:	0e 94 75 06 	call	0xcea	; 0xcea <_ZL14SendInterfacesv>
    1192:	8d c0       	rjmp	.+282    	; 0x12ae <__vector_11+0x268>
    1194:	c7 01       	movw	r24, r14
    1196:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z11InitControli>
    119a:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_Z12PluggableUSBv>
    119e:	be 01       	movw	r22, r28
    11a0:	6b 5e       	subi	r22, 0xEB	; 235
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	19 f0       	breq	.+6      	; 0x11b2 <__vector_11+0x16c>
    11ac:	0c f0       	brlt	.+2      	; 0x11b0 <__vector_11+0x16a>
    11ae:	7f c0       	rjmp	.+254    	; 0x12ae <__vector_11+0x268>
    11b0:	82 c0       	rjmp	.+260    	; 0x12b6 <__vector_11+0x270>
    11b2:	11 30       	cpi	r17, 0x01	; 1
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <__vector_11+0x172>
    11b6:	70 c0       	rjmp	.+224    	; 0x1298 <__vector_11+0x252>
    11b8:	13 30       	cpi	r17, 0x03	; 3
    11ba:	09 f0       	breq	.+2      	; 0x11be <__vector_11+0x178>
    11bc:	7c c0       	rjmp	.+248    	; 0x12b6 <__vector_11+0x270>
    11be:	8f 89       	ldd	r24, Y+23	; 0x17
    11c0:	88 23       	and	r24, r24
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <__vector_11+0x180>
    11c4:	6c c0       	rjmp	.+216    	; 0x129e <__vector_11+0x258>
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	29 f4       	brne	.+10     	; 0x11d4 <__vector_11+0x18e>
    11ca:	40 e8       	ldi	r20, 0x80	; 128
    11cc:	60 e1       	ldi	r22, 0x10	; 16
    11ce:	88 ee       	ldi	r24, 0xE8	; 232
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	06 c0       	rjmp	.+12     	; 0x11e0 <__vector_11+0x19a>
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	39 f4       	brne	.+14     	; 0x11e6 <__vector_11+0x1a0>
    11d8:	40 e8       	ldi	r20, 0x80	; 128
    11da:	6b e0       	ldi	r22, 0x0B	; 11
    11dc:	8c ed       	ldi	r24, 0xDC	; 220
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 1d 06 	call	0xc3a	; 0xc3a <_ZL24USB_SendStringDescriptorPKhhh>
    11e4:	56 c0       	rjmp	.+172    	; 0x1292 <__vector_11+0x24c>
    11e6:	83 30       	cpi	r24, 0x03	; 3
    11e8:	09 f0       	breq	.+2      	; 0x11ec <__vector_11+0x1a6>
    11ea:	65 c0       	rjmp	.+202    	; 0x12b6 <__vector_11+0x270>
    11ec:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_Z12PluggableUSBv>
    11f0:	8e 01       	movw	r16, r28
    11f2:	0f 5f       	subi	r16, 0xFF	; 255
    11f4:	1f 4f       	sbci	r17, 0xFF	; 255
    11f6:	b8 01       	movw	r22, r16
    11f8:	0e 94 99 14 	call	0x2932	; 0x2932 <_ZN13PluggableUSB_12getShortNameEPc>
    11fc:	f8 01       	movw	r30, r16
    11fe:	01 90       	ld	r0, Z+
    1200:	00 20       	and	r0, r0
    1202:	e9 f7       	brne	.-6      	; 0x11fe <__vector_11+0x1b8>
    1204:	31 97       	sbiw	r30, 0x01	; 1
    1206:	bf 01       	movw	r22, r30
    1208:	60 1b       	sub	r22, r16
    120a:	71 0b       	sbc	r23, r17
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	c8 01       	movw	r24, r16
    1210:	e7 cf       	rjmp	.-50     	; 0x11e0 <__vector_11+0x19a>
    1212:	97 30       	cpi	r25, 0x07	; 7
    1214:	09 f4       	brne	.+2      	; 0x1218 <__vector_11+0x1d2>
    1216:	4f c0       	rjmp	.+158    	; 0x12b6 <__vector_11+0x270>
    1218:	98 30       	cpi	r25, 0x08	; 8
    121a:	21 f4       	brne	.+8      	; 0x1224 <__vector_11+0x1de>
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1222:	45 c0       	rjmp	.+138    	; 0x12ae <__vector_11+0x268>
    1224:	99 30       	cpi	r25, 0x09	; 9
    1226:	09 f0       	breq	.+2      	; 0x122a <__vector_11+0x1e4>
    1228:	42 c0       	rjmp	.+132    	; 0x12ae <__vector_11+0x268>
    122a:	83 70       	andi	r24, 0x03	; 3
    122c:	09 f0       	breq	.+2      	; 0x1230 <__vector_11+0x1ea>
    122e:	43 c0       	rjmp	.+134    	; 0x12b6 <__vector_11+0x270>
    1230:	eb e0       	ldi	r30, 0x0B	; 11
    1232:	f1 e0       	ldi	r31, 0x01	; 1
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	31 e0       	ldi	r19, 0x01	; 1
    1238:	96 e3       	ldi	r25, 0x36	; 54
    123a:	20 81       	ld	r18, Z
    123c:	21 11       	cpse	r18, r1
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <__vector_11+0x20c>
    1240:	8e e7       	ldi	r24, 0x7E	; 126
    1242:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
    1246:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
    124a:	8f 89       	ldd	r24, Y+23	; 0x17
    124c:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <_usbConfiguration>
    1250:	2e c0       	rjmp	.+92     	; 0x12ae <__vector_11+0x268>
    1252:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1256:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    125a:	21 91       	ld	r18, Z+
    125c:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1260:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1264:	8f 5f       	subi	r24, 0xFF	; 255
    1266:	87 30       	cpi	r24, 0x07	; 7
    1268:	41 f7       	brne	.-48     	; 0x123a <__vector_11+0x1f4>
    126a:	ea cf       	rjmp	.-44     	; 0x1240 <__vector_11+0x1fa>
    126c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    126e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1270:	0e 94 be 07 	call	0xf7c	; 0xf7c <_Z11InitControli>
    1274:	89 8d       	ldd	r24, Y+25	; 0x19
    1276:	81 11       	cpse	r24, r1
    1278:	05 c0       	rjmp	.+10     	; 0x1284 <__vector_11+0x23e>
    127a:	ce 01       	movw	r24, r28
    127c:	45 96       	adiw	r24, 0x15	; 21
    127e:	0e 94 ad 13 	call	0x275a	; 0x275a <_Z9CDC_SetupR8USBSetup>
    1282:	07 c0       	rjmp	.+14     	; 0x1292 <__vector_11+0x24c>
    1284:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_Z12PluggableUSBv>
    1288:	be 01       	movw	r22, r28
    128a:	6b 5e       	subi	r22, 0xEB	; 235
    128c:	7f 4f       	sbci	r23, 0xFF	; 255
    128e:	0e 94 b8 14 	call	0x2970	; 0x2970 <_ZN13PluggableUSB_5setupER8USBSetup>
    1292:	88 23       	and	r24, r24
    1294:	81 f0       	breq	.+32     	; 0x12b6 <__vector_11+0x270>
    1296:	0b c0       	rjmp	.+22     	; 0x12ae <__vector_11+0x268>
    1298:	6a ec       	ldi	r22, 0xCA	; 202
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <__vector_11+0x25c>
    129e:	69 ef       	ldi	r22, 0xF9	; 249
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	fb 01       	movw	r30, r22
    12a4:	44 91       	lpm	r20, Z
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	80 e8       	ldi	r24, 0x80	; 128
    12aa:	0e 94 c9 07 	call	0xf92	; 0xf92 <_Z15USB_SendControlhPKvi>
    12ae:	8e ef       	ldi	r24, 0xFE	; 254
    12b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    12b4:	03 c0       	rjmp	.+6      	; 0x12bc <__vector_11+0x276>
    12b6:	81 e2       	ldi	r24, 0x21	; 33
    12b8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    12bc:	6c 96       	adiw	r28, 0x1c	; 28
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	ff 91       	pop	r31
    12ce:	ef 91       	pop	r30
    12d0:	bf 91       	pop	r27
    12d2:	af 91       	pop	r26
    12d4:	9f 91       	pop	r25
    12d6:	8f 91       	pop	r24
    12d8:	7f 91       	pop	r23
    12da:	6f 91       	pop	r22
    12dc:	5f 91       	pop	r21
    12de:	4f 91       	pop	r20
    12e0:	3f 91       	pop	r19
    12e2:	2f 91       	pop	r18
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	ff 90       	pop	r15
    12ea:	ef 90       	pop	r14
    12ec:	df 90       	pop	r13
    12ee:	cf 90       	pop	r12
    12f0:	0f 90       	pop	r0
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	0f 90       	pop	r0
    12f6:	1f 90       	pop	r1
    12f8:	18 95       	reti

000012fa <_Z9USB_Flushh>:
    12fa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    12fe:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1302:	88 23       	and	r24, r24
    1304:	19 f0       	breq	.+6      	; 0x130c <_Z9USB_Flushh+0x12>
    1306:	8a e3       	ldi	r24, 0x3A	; 58
    1308:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    130c:	08 95       	ret

0000130e <__vector_10>:
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	11 24       	eor	r1, r1
    1318:	2f 93       	push	r18
    131a:	3f 93       	push	r19
    131c:	4f 93       	push	r20
    131e:	5f 93       	push	r21
    1320:	6f 93       	push	r22
    1322:	7f 93       	push	r23
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	af 93       	push	r26
    132a:	bf 93       	push	r27
    132c:	cf 93       	push	r28
    132e:	ef 93       	push	r30
    1330:	ff 93       	push	r31
    1332:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1336:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    133a:	83 7f       	andi	r24, 0xF3	; 243
    133c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1340:	c3 ff       	sbrs	r28, 3
    1342:	0f c0       	rjmp	.+30     	; 0x1362 <__vector_10+0x54>
    1344:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    134e:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1352:	82 e3       	ldi	r24, 0x32	; 50
    1354:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1358:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <_usbConfiguration>
    135c:	88 e0       	ldi	r24, 0x08	; 8
    135e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1362:	c2 ff       	sbrs	r28, 2
    1364:	19 c0       	rjmp	.+50     	; 0x1398 <__vector_10+0x8a>
    1366:	83 e0       	ldi	r24, 0x03	; 3
    1368:	0e 94 7d 09 	call	0x12fa	; 0x12fa <_Z9USB_Flushh>
    136c:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <TxLEDPulse>
    1370:	88 23       	and	r24, r24
    1372:	39 f0       	breq	.+14     	; 0x1382 <__vector_10+0x74>
    1374:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <TxLEDPulse>
    1378:	81 50       	subi	r24, 0x01	; 1
    137a:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <TxLEDPulse>
    137e:	88 23       	and	r24, r24
    1380:	89 f1       	breq	.+98     	; 0x13e4 <__vector_10+0xd6>
    1382:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <RxLEDPulse>
    1386:	88 23       	and	r24, r24
    1388:	39 f0       	breq	.+14     	; 0x1398 <__vector_10+0x8a>
    138a:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <RxLEDPulse>
    138e:	81 50       	subi	r24, 0x01	; 1
    1390:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <RxLEDPulse>
    1394:	88 23       	and	r24, r24
    1396:	41 f1       	breq	.+80     	; 0x13e8 <__vector_10+0xda>
    1398:	c4 ff       	sbrs	r28, 4
    139a:	10 c0       	rjmp	.+32     	; 0x13bc <__vector_10+0xae>
    139c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    13a0:	8e 7e       	andi	r24, 0xEE	; 238
    13a2:	81 60       	ori	r24, 0x01	; 1
    13a4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    13a8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    13ac:	8f 7e       	andi	r24, 0xEF	; 239
    13ae:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    13b2:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <_usbSuspendState>
    13b6:	8e 7e       	andi	r24, 0xEE	; 238
    13b8:	80 61       	ori	r24, 0x10	; 16
    13ba:	11 c0       	rjmp	.+34     	; 0x13de <__vector_10+0xd0>
    13bc:	c0 ff       	sbrs	r28, 0
    13be:	16 c0       	rjmp	.+44     	; 0x13ec <__vector_10+0xde>
    13c0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    13c4:	8e 7e       	andi	r24, 0xEE	; 238
    13c6:	80 61       	ori	r24, 0x10	; 16
    13c8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    13cc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    13d0:	8e 7e       	andi	r24, 0xEE	; 238
    13d2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    13d6:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <_usbSuspendState>
    13da:	8e 7e       	andi	r24, 0xEE	; 238
    13dc:	81 60       	ori	r24, 0x01	; 1
    13de:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <_usbSuspendState>
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <__vector_10+0xde>
    13e4:	5d 9a       	sbi	0x0b, 5	; 11
    13e6:	cd cf       	rjmp	.-102    	; 0x1382 <__vector_10+0x74>
    13e8:	28 9a       	sbi	0x05, 0	; 5
    13ea:	d6 cf       	rjmp	.-84     	; 0x1398 <__vector_10+0x8a>
    13ec:	ff 91       	pop	r31
    13ee:	ef 91       	pop	r30
    13f0:	cf 91       	pop	r28
    13f2:	bf 91       	pop	r27
    13f4:	af 91       	pop	r26
    13f6:	9f 91       	pop	r25
    13f8:	8f 91       	pop	r24
    13fa:	7f 91       	pop	r23
    13fc:	6f 91       	pop	r22
    13fe:	5f 91       	pop	r21
    1400:	4f 91       	pop	r20
    1402:	3f 91       	pop	r19
    1404:	2f 91       	pop	r18
    1406:	0f 90       	pop	r0
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	0f 90       	pop	r0
    140c:	1f 90       	pop	r1
    140e:	18 95       	reti

00001410 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    1410:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <_usbConfiguration>
	_usbCurrentStatus = 0;
    1414:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <_usbCurrentStatus>
	_usbSuspendState = 0;
    1418:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <_usbSuspendState>
	USB_ClockEnable();
    141c:	0e 94 52 06 	call	0xca4	; 0xca4 <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    1420:	e1 ee       	ldi	r30, 0xE1	; 225
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	8e 7e       	andi	r24, 0xEE	; 238
    1428:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    142a:	8d e0       	ldi	r24, 0x0D	; 13
    142c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
	
	TX_RX_LED_INIT;
    1430:	55 9a       	sbi	0x0a, 5	; 10
    1432:	20 9a       	sbi	0x04, 0	; 4
    1434:	08 95       	ret

00001436 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1436:	1f 92       	push	r1
    1438:	0f 92       	push	r0
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	0f 92       	push	r0
    143e:	11 24       	eor	r1, r1
    1440:	2f 93       	push	r18
    1442:	3f 93       	push	r19
    1444:	8f 93       	push	r24
    1446:	9f 93       	push	r25
    1448:	af 93       	push	r26
    144a:	bf 93       	push	r27
    144c:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <timer0_millis>
    1450:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <timer0_millis+0x1>
    1454:	a0 91 19 04 	lds	r26, 0x0419	; 0x800419 <timer0_millis+0x2>
    1458:	b0 91 1a 04 	lds	r27, 0x041A	; 0x80041a <timer0_millis+0x3>
    145c:	30 91 16 04 	lds	r19, 0x0416	; 0x800416 <timer0_fract>
    1460:	23 e0       	ldi	r18, 0x03	; 3
    1462:	23 0f       	add	r18, r19
    1464:	2d 37       	cpi	r18, 0x7D	; 125
    1466:	20 f4       	brcc	.+8      	; 0x1470 <__vector_23+0x3a>
    1468:	01 96       	adiw	r24, 0x01	; 1
    146a:	a1 1d       	adc	r26, r1
    146c:	b1 1d       	adc	r27, r1
    146e:	05 c0       	rjmp	.+10     	; 0x147a <__vector_23+0x44>
    1470:	26 e8       	ldi	r18, 0x86	; 134
    1472:	23 0f       	add	r18, r19
    1474:	02 96       	adiw	r24, 0x02	; 2
    1476:	a1 1d       	adc	r26, r1
    1478:	b1 1d       	adc	r27, r1
    147a:	20 93 16 04 	sts	0x0416, r18	; 0x800416 <timer0_fract>
    147e:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <timer0_millis>
    1482:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <timer0_millis+0x1>
    1486:	a0 93 19 04 	sts	0x0419, r26	; 0x800419 <timer0_millis+0x2>
    148a:	b0 93 1a 04 	sts	0x041A, r27	; 0x80041a <timer0_millis+0x3>
    148e:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <timer0_overflow_count>
    1492:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <timer0_overflow_count+0x1>
    1496:	a0 91 1d 04 	lds	r26, 0x041D	; 0x80041d <timer0_overflow_count+0x2>
    149a:	b0 91 1e 04 	lds	r27, 0x041E	; 0x80041e <timer0_overflow_count+0x3>
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	a1 1d       	adc	r26, r1
    14a2:	b1 1d       	adc	r27, r1
    14a4:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <timer0_overflow_count>
    14a8:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <timer0_overflow_count+0x1>
    14ac:	a0 93 1d 04 	sts	0x041D, r26	; 0x80041d <timer0_overflow_count+0x2>
    14b0:	b0 93 1e 04 	sts	0x041E, r27	; 0x80041e <timer0_overflow_count+0x3>
    14b4:	bf 91       	pop	r27
    14b6:	af 91       	pop	r26
    14b8:	9f 91       	pop	r25
    14ba:	8f 91       	pop	r24
    14bc:	3f 91       	pop	r19
    14be:	2f 91       	pop	r18
    14c0:	0f 90       	pop	r0
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	0f 90       	pop	r0
    14c6:	1f 90       	pop	r1
    14c8:	18 95       	reti

000014ca <millis>:
    14ca:	2f b7       	in	r18, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	60 91 17 04 	lds	r22, 0x0417	; 0x800417 <timer0_millis>
    14d2:	70 91 18 04 	lds	r23, 0x0418	; 0x800418 <timer0_millis+0x1>
    14d6:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <timer0_millis+0x2>
    14da:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <timer0_millis+0x3>
    14de:	2f bf       	out	0x3f, r18	; 63
    14e0:	08 95       	ret

000014e2 <micros>:
    14e2:	3f b7       	in	r19, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <timer0_overflow_count>
    14ea:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <timer0_overflow_count+0x1>
    14ee:	a0 91 1d 04 	lds	r26, 0x041D	; 0x80041d <timer0_overflow_count+0x2>
    14f2:	b0 91 1e 04 	lds	r27, 0x041E	; 0x80041e <timer0_overflow_count+0x3>
    14f6:	26 b5       	in	r18, 0x26	; 38
    14f8:	a8 9b       	sbis	0x15, 0	; 21
    14fa:	05 c0       	rjmp	.+10     	; 0x1506 <micros+0x24>
    14fc:	2f 3f       	cpi	r18, 0xFF	; 255
    14fe:	19 f0       	breq	.+6      	; 0x1506 <micros+0x24>
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	a1 1d       	adc	r26, r1
    1504:	b1 1d       	adc	r27, r1
    1506:	3f bf       	out	0x3f, r19	; 63
    1508:	ba 2f       	mov	r27, r26
    150a:	a9 2f       	mov	r26, r25
    150c:	98 2f       	mov	r25, r24
    150e:	88 27       	eor	r24, r24
    1510:	82 0f       	add	r24, r18
    1512:	91 1d       	adc	r25, r1
    1514:	a1 1d       	adc	r26, r1
    1516:	b1 1d       	adc	r27, r1
    1518:	bc 01       	movw	r22, r24
    151a:	cd 01       	movw	r24, r26
    151c:	42 e0       	ldi	r20, 0x02	; 2
    151e:	66 0f       	add	r22, r22
    1520:	77 1f       	adc	r23, r23
    1522:	88 1f       	adc	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	4a 95       	dec	r20
    1528:	d1 f7       	brne	.-12     	; 0x151e <micros+0x3c>
    152a:	08 95       	ret

0000152c <delay>:
    152c:	8f 92       	push	r8
    152e:	9f 92       	push	r9
    1530:	af 92       	push	r10
    1532:	bf 92       	push	r11
    1534:	cf 92       	push	r12
    1536:	df 92       	push	r13
    1538:	ef 92       	push	r14
    153a:	ff 92       	push	r15
    153c:	6b 01       	movw	r12, r22
    153e:	7c 01       	movw	r14, r24
    1540:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <micros>
    1544:	4b 01       	movw	r8, r22
    1546:	5c 01       	movw	r10, r24
    1548:	c1 14       	cp	r12, r1
    154a:	d1 04       	cpc	r13, r1
    154c:	e1 04       	cpc	r14, r1
    154e:	f1 04       	cpc	r15, r1
    1550:	01 f1       	breq	.+64     	; 0x1592 <delay+0x66>
    1552:	0e 94 50 14 	call	0x28a0	; 0x28a0 <yield>
    1556:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <micros>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	88 19       	sub	r24, r8
    1560:	99 09       	sbc	r25, r9
    1562:	aa 09       	sbc	r26, r10
    1564:	bb 09       	sbc	r27, r11
    1566:	88 3e       	cpi	r24, 0xE8	; 232
    1568:	93 40       	sbci	r25, 0x03	; 3
    156a:	a1 05       	cpc	r26, r1
    156c:	b1 05       	cpc	r27, r1
    156e:	60 f3       	brcs	.-40     	; 0x1548 <delay+0x1c>
    1570:	21 e0       	ldi	r18, 0x01	; 1
    1572:	c2 1a       	sub	r12, r18
    1574:	d1 08       	sbc	r13, r1
    1576:	e1 08       	sbc	r14, r1
    1578:	f1 08       	sbc	r15, r1
    157a:	88 ee       	ldi	r24, 0xE8	; 232
    157c:	88 0e       	add	r8, r24
    157e:	83 e0       	ldi	r24, 0x03	; 3
    1580:	98 1e       	adc	r9, r24
    1582:	a1 1c       	adc	r10, r1
    1584:	b1 1c       	adc	r11, r1
    1586:	c1 14       	cp	r12, r1
    1588:	d1 04       	cpc	r13, r1
    158a:	e1 04       	cpc	r14, r1
    158c:	f1 04       	cpc	r15, r1
    158e:	19 f7       	brne	.-58     	; 0x1556 <delay+0x2a>
    1590:	db cf       	rjmp	.-74     	; 0x1548 <delay+0x1c>
    1592:	ff 90       	pop	r15
    1594:	ef 90       	pop	r14
    1596:	df 90       	pop	r13
    1598:	cf 90       	pop	r12
    159a:	bf 90       	pop	r11
    159c:	af 90       	pop	r10
    159e:	9f 90       	pop	r9
    15a0:	8f 90       	pop	r8
    15a2:	08 95       	ret

000015a4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    15a4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    15a6:	84 b5       	in	r24, 0x24	; 36
    15a8:	82 60       	ori	r24, 0x02	; 2
    15aa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    15ac:	84 b5       	in	r24, 0x24	; 36
    15ae:	81 60       	ori	r24, 0x01	; 1
    15b0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    15b2:	85 b5       	in	r24, 0x25	; 37
    15b4:	82 60       	ori	r24, 0x02	; 2
    15b6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    15b8:	85 b5       	in	r24, 0x25	; 37
    15ba:	81 60       	ori	r24, 0x01	; 1
    15bc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    15be:	ee e6       	ldi	r30, 0x6E	; 110
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	81 60       	ori	r24, 0x01	; 1
    15c6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    15c8:	e1 e8       	ldi	r30, 0x81	; 129
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    15ce:	80 81       	ld	r24, Z
    15d0:	82 60       	ori	r24, 0x02	; 2
    15d2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    15d4:	80 81       	ld	r24, Z
    15d6:	81 60       	ori	r24, 0x01	; 1
    15d8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    15da:	e0 e8       	ldi	r30, 0x80	; 128
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	81 60       	ori	r24, 0x01	; 1
    15e2:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    15e4:	e1 e9       	ldi	r30, 0x91	; 145
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	82 60       	ori	r24, 0x02	; 2
    15ec:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    15ee:	80 81       	ld	r24, Z
    15f0:	81 60       	ori	r24, 0x01	; 1
    15f2:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    15f4:	e0 e9       	ldi	r30, 0x90	; 144
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	81 60       	ori	r24, 0x01	; 1
    15fc:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    15fe:	e1 ec       	ldi	r30, 0xC1	; 193
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	84 60       	ori	r24, 0x04	; 4
    1606:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    1608:	80 81       	ld	r24, Z
    160a:	82 60       	ori	r24, 0x02	; 2
    160c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    160e:	80 81       	ld	r24, Z
    1610:	81 60       	ori	r24, 0x01	; 1
    1612:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    1614:	e3 ec       	ldi	r30, 0xC3	; 195
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	81 60       	ori	r24, 0x01	; 1
    161c:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    161e:	e0 ec       	ldi	r30, 0xC0	; 192
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	82 60       	ori	r24, 0x02	; 2
    1626:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    1628:	e2 ec       	ldi	r30, 0xC2	; 194
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	81 60       	ori	r24, 0x01	; 1
    1630:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1632:	ea e7       	ldi	r30, 0x7A	; 122
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	84 60       	ori	r24, 0x04	; 4
    163a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    163c:	80 81       	ld	r24, Z
    163e:	82 60       	ori	r24, 0x02	; 2
    1640:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1642:	80 81       	ld	r24, Z
    1644:	81 60       	ori	r24, 0x01	; 1
    1646:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1648:	80 81       	ld	r24, Z
    164a:	80 68       	ori	r24, 0x80	; 128
    164c:	80 83       	st	Z, r24
    164e:	08 95       	ret

00001650 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	fc 01       	movw	r30, r24
    1654:	31 97       	sbiw	r30, 0x01	; 1
    1656:	ef 30       	cpi	r30, 0x0F	; 15
    1658:	f1 05       	cpc	r31, r1
    165a:	b0 f5       	brcc	.+108    	; 0x16c8 <turnOffPWM+0x78>
    165c:	ea 5a       	subi	r30, 0xAA	; 170
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	0c 94 07 19 	jmp	0x320e	; 0x320e <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1664:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1668:	8f 77       	andi	r24, 0x7F	; 127
    166a:	03 c0       	rjmp	.+6      	; 0x1672 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    166c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1670:	8f 7d       	andi	r24, 0xDF	; 223
    1672:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1676:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1678:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    167c:	87 7f       	andi	r24, 0xF7	; 247
    167e:	f9 cf       	rjmp	.-14     	; 0x1672 <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1680:	84 b5       	in	r24, 0x24	; 36
    1682:	8f 77       	andi	r24, 0x7F	; 127
    1684:	02 c0       	rjmp	.+4      	; 0x168a <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1686:	84 b5       	in	r24, 0x24	; 36
    1688:	8f 7d       	andi	r24, 0xDF	; 223
    168a:	84 bd       	out	0x24, r24	; 36
    168c:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    168e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    1692:	8f 77       	andi	r24, 0x7F	; 127
    1694:	07 c0       	rjmp	.+14     	; 0x16a4 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1696:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    169a:	8f 7d       	andi	r24, 0xDF	; 223
    169c:	03 c0       	rjmp	.+6      	; 0x16a4 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    169e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    16a2:	87 7f       	andi	r24, 0xF7	; 247
    16a4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    16a8:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    16aa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    16ae:	8f 77       	andi	r24, 0x7F	; 127
    16b0:	03 c0       	rjmp	.+6      	; 0x16b8 <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    16b2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    16b6:	8f 7d       	andi	r24, 0xDF	; 223
    16b8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    16bc:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    16be:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    16c2:	87 7f       	andi	r24, 0xF7	; 247
    16c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    16c8:	08 95       	ret

000016ca <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	fc 01       	movw	r30, r24
    16d2:	e4 5e       	subi	r30, 0xE4	; 228
    16d4:	fe 4f       	sbci	r31, 0xFE	; 254
    16d6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    16d8:	fc 01       	movw	r30, r24
    16da:	e5 5c       	subi	r30, 0xC5	; 197
    16dc:	fe 4f       	sbci	r31, 0xFE	; 254
    16de:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    16e0:	88 23       	and	r24, r24
    16e2:	61 f1       	breq	.+88     	; 0x173c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	fc 01       	movw	r30, r24
    16ec:	e8 59       	subi	r30, 0x98	; 152
    16ee:	fe 4f       	sbci	r31, 0xFE	; 254
    16f0:	c5 91       	lpm	r28, Z+
    16f2:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    16f4:	fc 01       	movw	r30, r24
    16f6:	e6 5a       	subi	r30, 0xA6	; 166
    16f8:	fe 4f       	sbci	r31, 0xFE	; 254
    16fa:	a5 91       	lpm	r26, Z+
    16fc:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    16fe:	61 11       	cpse	r22, r1
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1702:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1704:	f8 94       	cli
		*reg &= ~bit;
    1706:	88 81       	ld	r24, Y
    1708:	20 95       	com	r18
    170a:	82 23       	and	r24, r18
    170c:	88 83       	st	Y, r24
		*out &= ~bit;
    170e:	ec 91       	ld	r30, X
    1710:	2e 23       	and	r18, r30
    1712:	0b c0       	rjmp	.+22     	; 0x172a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1714:	62 30       	cpi	r22, 0x02	; 2
    1716:	61 f4       	brne	.+24     	; 0x1730 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1718:	9f b7       	in	r25, 0x3f	; 63
                cli();
    171a:	f8 94       	cli
		*reg &= ~bit;
    171c:	88 81       	ld	r24, Y
    171e:	32 2f       	mov	r19, r18
    1720:	30 95       	com	r19
    1722:	83 23       	and	r24, r19
    1724:	88 83       	st	Y, r24
		*out |= bit;
    1726:	ec 91       	ld	r30, X
    1728:	2e 2b       	or	r18, r30
    172a:	2c 93       	st	X, r18
		SREG = oldSREG;
    172c:	9f bf       	out	0x3f, r25	; 63
    172e:	06 c0       	rjmp	.+12     	; 0x173c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1730:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1732:	f8 94       	cli
		*reg |= bit;
    1734:	e8 81       	ld	r30, Y
    1736:	2e 2b       	or	r18, r30
    1738:	28 83       	st	Y, r18
		SREG = oldSREG;
    173a:	8f bf       	out	0x3f, r24	; 63
	}
}
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	08 95       	ret

00001742 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1742:	1f 93       	push	r17
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	f9 01       	movw	r30, r18
    174e:	e3 50       	subi	r30, 0x03	; 3
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1754:	f9 01       	movw	r30, r18
    1756:	e4 5e       	subi	r30, 0xE4	; 228
    1758:	fe 4f       	sbci	r31, 0xFE	; 254
    175a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    175c:	f9 01       	movw	r30, r18
    175e:	e5 5c       	subi	r30, 0xC5	; 197
    1760:	fe 4f       	sbci	r31, 0xFE	; 254
    1762:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1764:	cc 23       	and	r28, r28
    1766:	c1 f0       	breq	.+48     	; 0x1798 <digitalWrite+0x56>
    1768:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    176a:	81 11       	cpse	r24, r1
    176c:	0e 94 28 0b 	call	0x1650	; 0x1650 <turnOffPWM>

	out = portOutputRegister(port);
    1770:	ec 2f       	mov	r30, r28
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	ee 0f       	add	r30, r30
    1776:	ff 1f       	adc	r31, r31
    1778:	e6 5a       	subi	r30, 0xA6	; 166
    177a:	fe 4f       	sbci	r31, 0xFE	; 254
    177c:	a5 91       	lpm	r26, Z+
    177e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1780:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1782:	f8 94       	cli

	if (val == LOW) {
    1784:	11 11       	cpse	r17, r1
    1786:	04 c0       	rjmp	.+8      	; 0x1790 <digitalWrite+0x4e>
		*out &= ~bit;
    1788:	8c 91       	ld	r24, X
    178a:	d0 95       	com	r29
    178c:	d8 23       	and	r29, r24
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1790:	ec 91       	ld	r30, X
    1792:	de 2b       	or	r29, r30
    1794:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1796:	9f bf       	out	0x3f, r25	; 63
}
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	1f 91       	pop	r17
    179e:	08 95       	ret

000017a0 <_ZN6StringD1Ev>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    17a0:	fc 01       	movw	r30, r24
    17a2:	80 81       	ld	r24, Z
    17a4:	91 81       	ldd	r25, Z+1	; 0x01
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	11 f0       	breq	.+4      	; 0x17ae <_ZN6StringD1Ev+0xe>
    17aa:	0c 94 bf 19 	jmp	0x337e	; 0x337e <free>
    17ae:	08 95       	ret

000017b0 <_ZN6String10invalidateEv>:
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	ec 01       	movw	r28, r24
    17b6:	88 81       	ld	r24, Y
    17b8:	99 81       	ldd	r25, Y+1	; 0x01
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	11 f0       	breq	.+4      	; 0x17c2 <_ZN6String10invalidateEv+0x12>
    17be:	0e 94 bf 19 	call	0x337e	; 0x337e <free>
    17c2:	19 82       	std	Y+1, r1	; 0x01
    17c4:	18 82       	st	Y, r1
    17c6:	1d 82       	std	Y+5, r1	; 0x05
    17c8:	1c 82       	std	Y+4, r1	; 0x04
    17ca:	1b 82       	std	Y+3, r1	; 0x03
    17cc:	1a 82       	std	Y+2, r1	; 0x02
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	08 95       	ret

000017d4 <_ZN6String12changeBufferEj>:
    17d4:	0f 93       	push	r16
    17d6:	1f 93       	push	r17
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	ec 01       	movw	r28, r24
    17de:	8b 01       	movw	r16, r22
    17e0:	6f 5f       	subi	r22, 0xFF	; 255
    17e2:	7f 4f       	sbci	r23, 0xFF	; 255
    17e4:	88 81       	ld	r24, Y
    17e6:	99 81       	ldd	r25, Y+1	; 0x01
    17e8:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <realloc>
    17ec:	00 97       	sbiw	r24, 0x00	; 0
    17ee:	31 f0       	breq	.+12     	; 0x17fc <_ZN6String12changeBufferEj+0x28>
    17f0:	99 83       	std	Y+1, r25	; 0x01
    17f2:	88 83       	st	Y, r24
    17f4:	1b 83       	std	Y+3, r17	; 0x03
    17f6:	0a 83       	std	Y+2, r16	; 0x02
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	01 c0       	rjmp	.+2      	; 0x17fe <_ZN6String12changeBufferEj+0x2a>
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	1f 91       	pop	r17
    1804:	0f 91       	pop	r16
    1806:	08 95       	ret

00001808 <_ZN6String7reserveEj>:
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	ec 01       	movw	r28, r24
    180e:	88 81       	ld	r24, Y
    1810:	99 81       	ldd	r25, Y+1	; 0x01
    1812:	89 2b       	or	r24, r25
    1814:	29 f0       	breq	.+10     	; 0x1820 <_ZN6String7reserveEj+0x18>
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	9b 81       	ldd	r25, Y+3	; 0x03
    181a:	86 17       	cp	r24, r22
    181c:	97 07       	cpc	r25, r23
    181e:	60 f4       	brcc	.+24     	; 0x1838 <_ZN6String7reserveEj+0x30>
    1820:	ce 01       	movw	r24, r28
    1822:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_ZN6String12changeBufferEj>
    1826:	88 23       	and	r24, r24
    1828:	41 f0       	breq	.+16     	; 0x183a <_ZN6String7reserveEj+0x32>
    182a:	8c 81       	ldd	r24, Y+4	; 0x04
    182c:	9d 81       	ldd	r25, Y+5	; 0x05
    182e:	89 2b       	or	r24, r25
    1830:	19 f4       	brne	.+6      	; 0x1838 <_ZN6String7reserveEj+0x30>
    1832:	e8 81       	ld	r30, Y
    1834:	f9 81       	ldd	r31, Y+1	; 0x01
    1836:	10 82       	st	Z, r1
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	08 95       	ret

00001840 <_ZN6String4copyEPKcj>:
    1840:	ef 92       	push	r14
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	ec 01       	movw	r28, r24
    184e:	7b 01       	movw	r14, r22
    1850:	8a 01       	movw	r16, r20
    1852:	ba 01       	movw	r22, r20
    1854:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN6String7reserveEj>
    1858:	81 11       	cpse	r24, r1
    185a:	04 c0       	rjmp	.+8      	; 0x1864 <_ZN6String4copyEPKcj+0x24>
    185c:	ce 01       	movw	r24, r28
    185e:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_ZN6String10invalidateEv>
    1862:	07 c0       	rjmp	.+14     	; 0x1872 <_ZN6String4copyEPKcj+0x32>
    1864:	1d 83       	std	Y+5, r17	; 0x05
    1866:	0c 83       	std	Y+4, r16	; 0x04
    1868:	b7 01       	movw	r22, r14
    186a:	88 81       	ld	r24, Y
    186c:	99 81       	ldd	r25, Y+1	; 0x01
    186e:	0e 94 c7 1b 	call	0x378e	; 0x378e <strcpy>
    1872:	ce 01       	movw	r24, r28
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	1f 91       	pop	r17
    187a:	0f 91       	pop	r16
    187c:	ff 90       	pop	r15
    187e:	ef 90       	pop	r14
    1880:	08 95       	ret

00001882 <_ZN6StringC1EPKc>:
    1882:	fc 01       	movw	r30, r24
    1884:	11 82       	std	Z+1, r1	; 0x01
    1886:	10 82       	st	Z, r1
    1888:	13 82       	std	Z+3, r1	; 0x03
    188a:	12 82       	std	Z+2, r1	; 0x02
    188c:	15 82       	std	Z+5, r1	; 0x05
    188e:	14 82       	std	Z+4, r1	; 0x04
    1890:	61 15       	cp	r22, r1
    1892:	71 05       	cpc	r23, r1
    1894:	51 f0       	breq	.+20     	; 0x18aa <_ZN6StringC1EPKc+0x28>
    1896:	fb 01       	movw	r30, r22
    1898:	01 90       	ld	r0, Z+
    189a:	00 20       	and	r0, r0
    189c:	e9 f7       	brne	.-6      	; 0x1898 <_ZN6StringC1EPKc+0x16>
    189e:	31 97       	sbiw	r30, 0x01	; 1
    18a0:	af 01       	movw	r20, r30
    18a2:	46 1b       	sub	r20, r22
    18a4:	57 0b       	sbc	r21, r23
    18a6:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <_ZN6String4copyEPKcj>
    18aa:	08 95       	ret

000018ac <_ZN6StringaSEPKc>:
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	ec 01       	movw	r28, r24
    18b2:	61 15       	cp	r22, r1
    18b4:	71 05       	cpc	r23, r1
    18b6:	59 f0       	breq	.+22     	; 0x18ce <_ZN6StringaSEPKc+0x22>
    18b8:	fb 01       	movw	r30, r22
    18ba:	01 90       	ld	r0, Z+
    18bc:	00 20       	and	r0, r0
    18be:	e9 f7       	brne	.-6      	; 0x18ba <_ZN6StringaSEPKc+0xe>
    18c0:	31 97       	sbiw	r30, 0x01	; 1
    18c2:	af 01       	movw	r20, r30
    18c4:	46 1b       	sub	r20, r22
    18c6:	57 0b       	sbc	r21, r23
    18c8:	0e 94 20 0c 	call	0x1840	; 0x1840 <_ZN6String4copyEPKcj>
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <_ZN6StringaSEPKc+0x26>
    18ce:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <_ZN6String10invalidateEv>
    18d2:	ce 01       	movw	r24, r28
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	08 95       	ret

000018da <_ZN6String6concatEPKcj>:
    18da:	ef 92       	push	r14
    18dc:	ff 92       	push	r15
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	61 15       	cp	r22, r1
    18e8:	71 05       	cpc	r23, r1
    18ea:	11 f4       	brne	.+4      	; 0x18f0 <_ZN6String6concatEPKcj+0x16>
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	1c c0       	rjmp	.+56     	; 0x1928 <_ZN6String6concatEPKcj+0x4e>
    18f0:	41 15       	cp	r20, r1
    18f2:	51 05       	cpc	r21, r1
    18f4:	c1 f0       	breq	.+48     	; 0x1926 <_ZN6String6concatEPKcj+0x4c>
    18f6:	7b 01       	movw	r14, r22
    18f8:	ec 01       	movw	r28, r24
    18fa:	8c 81       	ldd	r24, Y+4	; 0x04
    18fc:	9d 81       	ldd	r25, Y+5	; 0x05
    18fe:	8a 01       	movw	r16, r20
    1900:	08 0f       	add	r16, r24
    1902:	19 1f       	adc	r17, r25
    1904:	b8 01       	movw	r22, r16
    1906:	ce 01       	movw	r24, r28
    1908:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN6String7reserveEj>
    190c:	88 23       	and	r24, r24
    190e:	71 f3       	breq	.-36     	; 0x18ec <_ZN6String6concatEPKcj+0x12>
    1910:	28 81       	ld	r18, Y
    1912:	39 81       	ldd	r19, Y+1	; 0x01
    1914:	8c 81       	ldd	r24, Y+4	; 0x04
    1916:	9d 81       	ldd	r25, Y+5	; 0x05
    1918:	b7 01       	movw	r22, r14
    191a:	82 0f       	add	r24, r18
    191c:	93 1f       	adc	r25, r19
    191e:	0e 94 c7 1b 	call	0x378e	; 0x378e <strcpy>
    1922:	1d 83       	std	Y+5, r17	; 0x05
    1924:	0c 83       	std	Y+4, r16	; 0x04
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	df 91       	pop	r29
    192a:	cf 91       	pop	r28
    192c:	1f 91       	pop	r17
    192e:	0f 91       	pop	r16
    1930:	ff 90       	pop	r15
    1932:	ef 90       	pop	r14
    1934:	08 95       	ret

00001936 <_ZN6String6concatEc>:
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	00 d0       	rcall	.+0      	; 0x193c <_ZN6String6concatEc+0x6>
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	69 83       	std	Y+1, r22	; 0x01
    1942:	1a 82       	std	Y+2, r1	; 0x02
    1944:	41 e0       	ldi	r20, 0x01	; 1
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	be 01       	movw	r22, r28
    194a:	6f 5f       	subi	r22, 0xFF	; 255
    194c:	7f 4f       	sbci	r23, 0xFF	; 255
    194e:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN6String6concatEPKcj>
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	08 95       	ret

0000195c <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
	if (!bufsize || !buf) return;
    1964:	41 15       	cp	r20, r1
    1966:	51 05       	cpc	r21, r1
    1968:	19 f1       	breq	.+70     	; 0x19b0 <_ZNK6String8getBytesEPhjj+0x54>
    196a:	61 15       	cp	r22, r1
    196c:	71 05       	cpc	r23, r1
    196e:	01 f1       	breq	.+64     	; 0x19b0 <_ZNK6String8getBytesEPhjj+0x54>
	if (index >= len) {
    1970:	dc 01       	movw	r26, r24
    1972:	14 96       	adiw	r26, 0x04	; 4
    1974:	ed 91       	ld	r30, X+
    1976:	fc 91       	ld	r31, X
    1978:	15 97       	sbiw	r26, 0x05	; 5
    197a:	2e 17       	cp	r18, r30
    197c:	3f 07       	cpc	r19, r31
    197e:	18 f0       	brcs	.+6      	; 0x1986 <_ZNK6String8getBytesEPhjj+0x2a>
		buf[0] = 0;
    1980:	fb 01       	movw	r30, r22
    1982:	10 82       	st	Z, r1
		return;
    1984:	15 c0       	rjmp	.+42     	; 0x19b0 <_ZNK6String8getBytesEPhjj+0x54>
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    1986:	e2 1b       	sub	r30, r18
    1988:	f3 0b       	sbc	r31, r19
    198a:	ea 01       	movw	r28, r20
    198c:	21 97       	sbiw	r28, 0x01	; 1
    198e:	ec 17       	cp	r30, r28
    1990:	fd 07       	cpc	r31, r29
    1992:	08 f4       	brcc	.+2      	; 0x1996 <_ZNK6String8getBytesEPhjj+0x3a>
    1994:	ef 01       	movw	r28, r30
    1996:	8b 01       	movw	r16, r22
    1998:	fc 01       	movw	r30, r24
	strncpy((char *)buf, buffer + index, n);
    199a:	60 81       	ld	r22, Z
    199c:	71 81       	ldd	r23, Z+1	; 0x01
    199e:	62 0f       	add	r22, r18
    19a0:	73 1f       	adc	r23, r19
    19a2:	ae 01       	movw	r20, r28
    19a4:	c8 01       	movw	r24, r16
    19a6:	0e 94 ce 1b 	call	0x379c	; 0x379c <strncpy>
	buf[n] = 0;
    19aa:	c0 0f       	add	r28, r16
    19ac:	d1 1f       	adc	r29, r17
    19ae:	18 82       	st	Y, r1
}
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	08 95       	ret

000019ba <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	08 95       	ret

000019be <_ZN15RHGenericDriver14setPromiscuousEb>:
    return false;
}

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
    19be:	fc 01       	movw	r30, r24
    19c0:	64 83       	std	Z+4, r22	; 0x04
    19c2:	08 95       	ret

000019c4 <_ZN15RHGenericDriver14setThisAddressEh>:
}

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
    19c4:	fc 01       	movw	r30, r24
    19c6:	63 83       	std	Z+3, r22	; 0x03
    19c8:	08 95       	ret

000019ca <_ZN15RHGenericDriver11setHeaderToEh>:
}

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
    19ca:	fc 01       	movw	r30, r24
    19cc:	61 87       	std	Z+9, r22	; 0x09
    19ce:	08 95       	ret

000019d0 <_ZN15RHGenericDriver13setHeaderFromEh>:
}

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
    19d0:	fc 01       	movw	r30, r24
    19d2:	62 87       	std	Z+10, r22	; 0x0a
    19d4:	08 95       	ret

000019d6 <_ZN15RHGenericDriver11setHeaderIdEh>:
}

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
    19d6:	fc 01       	movw	r30, r24
    19d8:	63 87       	std	Z+11, r22	; 0x0b
    19da:	08 95       	ret

000019dc <_ZN15RHGenericDriver14setHeaderFlagsEhh>:
}

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    19dc:	fc 01       	movw	r30, r24
    _txHeaderFlags &= ~clear;
    _txHeaderFlags |= set;
    19de:	40 95       	com	r20
    19e0:	94 85       	ldd	r25, Z+12	; 0x0c
    19e2:	49 23       	and	r20, r25
    19e4:	64 2b       	or	r22, r20
    19e6:	64 87       	std	Z+12, r22	; 0x0c
    19e8:	08 95       	ret

000019ea <_ZN15RHGenericDriver8headerToEv>:
}

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
    19ea:	fc 01       	movw	r30, r24
    19ec:	85 81       	ldd	r24, Z+5	; 0x05
}
    19ee:	08 95       	ret

000019f0 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
    19f0:	fc 01       	movw	r30, r24
    19f2:	86 81       	ldd	r24, Z+6	; 0x06
}
    19f4:	08 95       	ret

000019f6 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
    19f6:	fc 01       	movw	r30, r24
    19f8:	87 81       	ldd	r24, Z+7	; 0x07
}
    19fa:	08 95       	ret

000019fc <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
    19fc:	fc 01       	movw	r30, r24
    19fe:	80 85       	ldd	r24, Z+8	; 0x08
}
    1a00:	08 95       	ret

00001a02 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
    1a02:	fc 01       	movw	r30, r24
    1a04:	85 85       	ldd	r24, Z+13	; 0x0d
    1a06:	96 85       	ldd	r25, Z+14	; 0x0e
}
    1a08:	08 95       	ret

00001a0a <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
}
    1a0e:	08 95       	ret

00001a10 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
    1a10:	fc 01       	movw	r30, r24
    1a12:	62 83       	std	Z+2, r22	; 0x02
    1a14:	08 95       	ret

00001a16 <_ZN15RHGenericDriver15isChannelActiveEv>:
}

bool  RHGenericDriver::sleep()
{
    return false;
}
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	08 95       	ret

00001a1a <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	87 85       	ldd	r24, Z+15	; 0x0f
    1a1e:	90 89       	ldd	r25, Z+16	; 0x10
}
    1a20:	08 95       	ret

00001a22 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
    1a22:	fc 01       	movw	r30, r24
    1a24:	81 89       	ldd	r24, Z+17	; 0x11
    1a26:	92 89       	ldd	r25, Z+18	; 0x12
}
    1a28:	08 95       	ret

00001a2a <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	83 89       	ldd	r24, Z+19	; 0x13
    1a2e:	94 89       	ldd	r25, Z+20	; 0x14
}
    1a30:	08 95       	ret

00001a32 <_ZN15RHGenericDriver13waitAvailableEv>:
    return true;
}

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	ec 01       	movw	r28, r24
    while (!available())
    1a38:	e8 81       	ld	r30, Y
    1a3a:	f9 81       	ldd	r31, Y+1	; 0x01
    1a3c:	02 80       	ldd	r0, Z+2	; 0x02
    1a3e:	f3 81       	ldd	r31, Z+3	; 0x03
    1a40:	e0 2d       	mov	r30, r0
    1a42:	ce 01       	movw	r24, r28
    1a44:	09 95       	icall
    1a46:	81 11       	cpse	r24, r1
    1a48:	03 c0       	rjmp	.+6      	; 0x1a50 <_ZN15RHGenericDriver13waitAvailableEv+0x1e>
	YIELD;
    1a4a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <yield>
}

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
    while (!available())
    1a4e:	f4 cf       	rjmp	.-24     	; 0x1a38 <_ZN15RHGenericDriver13waitAvailableEv+0x6>
	YIELD;
}
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	08 95       	ret

00001a56 <_ZN15RHGenericDriver14waitPacketSentEv>:
    }
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	ec 01       	movw	r28, r24
    while (_mode == RHModeTx)
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	83 30       	cpi	r24, 0x03	; 3
    1a60:	19 f4       	brne	.+6      	; 0x1a68 <_ZN15RHGenericDriver14waitPacketSentEv+0x12>
	YIELD; // Wait for any previous transmit to finish
    1a62:	0e 94 50 14 	call	0x28a0	; 0x28a0 <yield>
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
    1a66:	fa cf       	rjmp	.-12     	; 0x1a5c <_ZN15RHGenericDriver14waitPacketSentEv+0x6>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	df 91       	pop	r29
    1a6c:	cf 91       	pop	r28
    1a6e:	08 95       	ret

00001a70 <_ZN15RHGenericDriver20waitAvailableTimeoutEj>:

// Blocks until a valid message is received or timeout expires
// Return true if there is a message available
// Works correctly even on millis() rollover
bool RHGenericDriver::waitAvailableTimeout(uint16_t timeout)
{
    1a70:	8f 92       	push	r8
    1a72:	9f 92       	push	r9
    1a74:	af 92       	push	r10
    1a76:	bf 92       	push	r11
    1a78:	cf 92       	push	r12
    1a7a:	df 92       	push	r13
    1a7c:	ef 92       	push	r14
    1a7e:	ff 92       	push	r15
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	ec 01       	movw	r28, r24
    1a86:	6b 01       	movw	r12, r22
    unsigned long starttime = millis();
    1a88:	0e 94 65 0a 	call	0x14ca	; 0x14ca <millis>
    1a8c:	4b 01       	movw	r8, r22
    1a8e:	5c 01       	movw	r10, r24
    while ((millis() - starttime) < timeout)
    1a90:	e1 2c       	mov	r14, r1
    1a92:	f1 2c       	mov	r15, r1
    1a94:	0e 94 65 0a 	call	0x14ca	; 0x14ca <millis>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	88 19       	sub	r24, r8
    1a9e:	99 09       	sbc	r25, r9
    1aa0:	aa 09       	sbc	r26, r10
    1aa2:	bb 09       	sbc	r27, r11
    1aa4:	8c 15       	cp	r24, r12
    1aa6:	9d 05       	cpc	r25, r13
    1aa8:	ae 05       	cpc	r26, r14
    1aaa:	bf 05       	cpc	r27, r15
    1aac:	60 f4       	brcc	.+24     	; 0x1ac6 <_ZN15RHGenericDriver20waitAvailableTimeoutEj+0x56>
    {
        if (available())
    1aae:	e8 81       	ld	r30, Y
    1ab0:	f9 81       	ldd	r31, Y+1	; 0x01
    1ab2:	02 80       	ldd	r0, Z+2	; 0x02
    1ab4:	f3 81       	ldd	r31, Z+3	; 0x03
    1ab6:	e0 2d       	mov	r30, r0
    1ab8:	ce 01       	movw	r24, r28
    1aba:	09 95       	icall
    1abc:	81 11       	cpse	r24, r1
    1abe:	04 c0       	rjmp	.+8      	; 0x1ac8 <_ZN15RHGenericDriver20waitAvailableTimeoutEj+0x58>
	{
           return true;
	}
	YIELD;
    1ac0:	0e 94 50 14 	call	0x28a0	; 0x28a0 <yield>
// Return true if there is a message available
// Works correctly even on millis() rollover
bool RHGenericDriver::waitAvailableTimeout(uint16_t timeout)
{
    unsigned long starttime = millis();
    while ((millis() - starttime) < timeout)
    1ac4:	e7 cf       	rjmp	.-50     	; 0x1a94 <_ZN15RHGenericDriver20waitAvailableTimeoutEj+0x24>
	{
           return true;
	}
	YIELD;
    }
    return false;
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
}
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	9f 90       	pop	r9
    1ada:	8f 90       	pop	r8
    1adc:	08 95       	ret

00001ade <_ZN15RHGenericDriver14waitPacketSentEj>:
	YIELD; // Wait for any previous transmit to finish
    return true;
}

bool RHGenericDriver::waitPacketSent(uint16_t timeout)
{
    1ade:	8f 92       	push	r8
    1ae0:	9f 92       	push	r9
    1ae2:	af 92       	push	r10
    1ae4:	bf 92       	push	r11
    1ae6:	cf 92       	push	r12
    1ae8:	df 92       	push	r13
    1aea:	ef 92       	push	r14
    1aec:	ff 92       	push	r15
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	ec 01       	movw	r28, r24
    1af4:	6b 01       	movw	r12, r22
    unsigned long starttime = millis();
    1af6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <millis>
    1afa:	4b 01       	movw	r8, r22
    1afc:	5c 01       	movw	r10, r24
    while ((millis() - starttime) < timeout)
    1afe:	e1 2c       	mov	r14, r1
    1b00:	f1 2c       	mov	r15, r1
    1b02:	0e 94 65 0a 	call	0x14ca	; 0x14ca <millis>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	88 19       	sub	r24, r8
    1b0c:	99 09       	sbc	r25, r9
    1b0e:	aa 09       	sbc	r26, r10
    1b10:	bb 09       	sbc	r27, r11
    1b12:	8c 15       	cp	r24, r12
    1b14:	9d 05       	cpc	r25, r13
    1b16:	ae 05       	cpc	r26, r14
    1b18:	bf 05       	cpc	r27, r15
    1b1a:	30 f4       	brcc	.+12     	; 0x1b28 <_ZN15RHGenericDriver14waitPacketSentEj+0x4a>
    {
        if (_mode != RHModeTx) // Any previous transmit finished?
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	83 30       	cpi	r24, 0x03	; 3
    1b20:	29 f4       	brne	.+10     	; 0x1b2c <_ZN15RHGenericDriver14waitPacketSentEj+0x4e>
           return true;
	YIELD;
    1b22:	0e 94 50 14 	call	0x28a0	; 0x28a0 <yield>
}

bool RHGenericDriver::waitPacketSent(uint16_t timeout)
{
    unsigned long starttime = millis();
    while ((millis() - starttime) < timeout)
    1b26:	ed cf       	rjmp	.-38     	; 0x1b02 <_ZN15RHGenericDriver14waitPacketSentEj+0x24>
    {
        if (_mode != RHModeTx) // Any previous transmit finished?
           return true;
	YIELD;
    }
    return false;
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	01 c0       	rjmp	.+2      	; 0x1b2e <_ZN15RHGenericDriver14waitPacketSentEj+0x50>
{
    unsigned long starttime = millis();
    while ((millis() - starttime) < timeout)
    {
        if (_mode != RHModeTx) // Any previous transmit finished?
           return true;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
	YIELD;
    }
    return false;
}
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	ff 90       	pop	r15
    1b34:	ef 90       	pop	r14
    1b36:	df 90       	pop	r13
    1b38:	cf 90       	pop	r12
    1b3a:	bf 90       	pop	r11
    1b3c:	af 90       	pop	r10
    1b3e:	9f 90       	pop	r9
    1b40:	8f 90       	pop	r8
    1b42:	08 95       	ret

00001b44 <_ZN15RHGenericDriver7waitCADEv>:

// Wait until no channel activity detected or timeout
bool RHGenericDriver::waitCAD()
{
    1b44:	cf 92       	push	r12
    1b46:	df 92       	push	r13
    1b48:	ef 92       	push	r14
    1b4a:	ff 92       	push	r15
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    if (!_cad_timeout)
    1b50:	fc 01       	movw	r30, r24
    1b52:	26 89       	ldd	r18, Z+22	; 0x16
    1b54:	37 89       	ldd	r19, Z+23	; 0x17
    1b56:	23 2b       	or	r18, r19
    1b58:	91 f1       	breq	.+100    	; 0x1bbe <_ZN15RHGenericDriver7waitCADEv+0x7a>
    1b5a:	ec 01       	movw	r28, r24
    // Wait for any channel activity to finish or timeout
    // Sophisticated DCF function...
    // DCF : BackoffTime = random() x aSlotTime
    // 100 - 1000 ms
    // 10 sec timeout
    unsigned long t = millis();
    1b5c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <millis>
    1b60:	6b 01       	movw	r12, r22
    1b62:	7c 01       	movw	r14, r24
    while (isChannelActive())
    1b64:	e8 81       	ld	r30, Y
    1b66:	f9 81       	ldd	r31, Y+1	; 0x01
    1b68:	04 88       	ldd	r0, Z+20	; 0x14
    1b6a:	f5 89       	ldd	r31, Z+21	; 0x15
    1b6c:	e0 2d       	mov	r30, r0
    1b6e:	ce 01       	movw	r24, r28
    1b70:	09 95       	icall
    1b72:	88 23       	and	r24, r24
    1b74:	21 f1       	breq	.+72     	; 0x1bbe <_ZN15RHGenericDriver7waitCADEv+0x7a>
    {
         if (millis() - t > _cad_timeout) 
    1b76:	0e 94 65 0a 	call	0x14ca	; 0x14ca <millis>
    1b7a:	ab 01       	movw	r20, r22
    1b7c:	bc 01       	movw	r22, r24
    1b7e:	4c 19       	sub	r20, r12
    1b80:	5d 09       	sbc	r21, r13
    1b82:	6e 09       	sbc	r22, r14
    1b84:	7f 09       	sbc	r23, r15
    1b86:	8e 89       	ldd	r24, Y+22	; 0x16
    1b88:	9f 89       	ldd	r25, Y+23	; 0x17
    1b8a:	a0 e0       	ldi	r26, 0x00	; 0
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	84 17       	cp	r24, r20
    1b90:	95 07       	cpc	r25, r21
    1b92:	a6 07       	cpc	r26, r22
    1b94:	b7 07       	cpc	r27, r23
    1b96:	a8 f0       	brcs	.+42     	; 0x1bc2 <_ZN15RHGenericDriver7waitCADEv+0x7e>
	     return false;
#if (RH_PLATFORM == RH_PLATFORM_STM32) // stdlib on STMF103 gets confused if random is redefined
	 delay(_random(1, 10) * 100);
#else
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
    1b98:	2a e0       	ldi	r18, 0x0A	; 10
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	50 e0       	ldi	r21, 0x00	; 0
    1ba0:	61 e0       	ldi	r22, 0x01	; 1
    1ba2:	70 e0       	ldi	r23, 0x00	; 0
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	0e 94 18 16 	call	0x2c30	; 0x2c30 <_Z6randomll>
    1bac:	9b 01       	movw	r18, r22
    1bae:	ac 01       	movw	r20, r24
    1bb0:	a4 e6       	ldi	r26, 0x64	; 100
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	0e 94 0d 19 	call	0x321a	; 0x321a <__muluhisi3>
    1bb8:	0e 94 96 0a 	call	0x152c	; 0x152c <delay>
    1bbc:	d3 cf       	rjmp	.-90     	; 0x1b64 <_ZN15RHGenericDriver7waitCADEv+0x20>

// Wait until no channel activity detected or timeout
bool RHGenericDriver::waitCAD()
{
    if (!_cad_timeout)
	return true;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	01 c0       	rjmp	.+2      	; 0x1bc4 <_ZN15RHGenericDriver7waitCADEv+0x80>
    // 10 sec timeout
    unsigned long t = millis();
    while (isChannelActive())
    {
         if (millis() - t > _cad_timeout) 
	     return false;
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
#endif
    }

    return true;
}
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	ff 90       	pop	r15
    1bca:	ef 90       	pop	r14
    1bcc:	df 90       	pop	r13
    1bce:	cf 90       	pop	r12
    1bd0:	08 95       	ret

00001bd2 <_ZN15RHGenericDriverC1Ev>:
// Copyright (C) 2014 Mike McCauley
// $Id: RHGenericDriver.cpp,v 1.23 2018/02/11 23:57:18 mikem Exp $

#include <RHGenericDriver.h>

RHGenericDriver::RHGenericDriver()
    1bd2:	fc 01       	movw	r30, r24
    _txHeaderId(0),
    _txHeaderFlags(0),
    _rxBad(0),
    _rxGood(0),
    _txGood(0),
    _cad_timeout(0)
    1bd4:	80 e1       	ldi	r24, 0x10	; 16
    1bd6:	92 e0       	ldi	r25, 0x02	; 2
    1bd8:	91 83       	std	Z+1, r25	; 0x01
    1bda:	80 83       	st	Z, r24
    1bdc:	12 82       	std	Z+2, r1	; 0x02
    1bde:	8f ef       	ldi	r24, 0xFF	; 255
    1be0:	83 83       	std	Z+3, r24	; 0x03
    1be2:	81 87       	std	Z+9, r24	; 0x09
    1be4:	82 87       	std	Z+10, r24	; 0x0a
    1be6:	13 86       	std	Z+11, r1	; 0x0b
    1be8:	14 86       	std	Z+12, r1	; 0x0c
    1bea:	10 8a       	std	Z+16, r1	; 0x10
    1bec:	17 86       	std	Z+15, r1	; 0x0f
    1bee:	12 8a       	std	Z+18, r1	; 0x12
    1bf0:	11 8a       	std	Z+17, r1	; 0x11
    1bf2:	14 8a       	std	Z+20, r1	; 0x14
    1bf4:	13 8a       	std	Z+19, r1	; 0x13
    1bf6:	17 8a       	std	Z+23, r1	; 0x17
    1bf8:	16 8a       	std	Z+22, r1	; 0x16
    1bfa:	08 95       	ret

00001bfc <_ZN13RHHardwareSPI8transferEh>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    1bfc:	6e bd       	out	0x2e, r22	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    1bfe:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    1c00:	0d b4       	in	r0, 0x2d	; 45
    1c02:	07 fe       	sbrs	r0, 7
    1c04:	fd cf       	rjmp	.-6      	; 0x1c00 <_ZN13RHHardwareSPI8transferEh+0x4>
    return SPDR;
    1c06:	8e b5       	in	r24, 0x2e	; 46
}

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
    return SPI.transfer(data);
}
    1c08:	08 95       	ret

00001c0a <_ZN13RHHardwareSPI15attachInterruptEv>:
    SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((clockDiv >> 2) & SPI_2XCLOCK_MASK);
  }
  // These undocumented functions should not be used.  SPI.transfer()
  // polls the hardware flag which is automatically cleared as the
  // AVR responds to SPI's interrupt
  inline static void attachInterrupt() { SPCR |= _BV(SPIE); }
    1c0a:	8c b5       	in	r24, 0x2c	; 44
    1c0c:	80 68       	ori	r24, 0x80	; 128
    1c0e:	8c bd       	out	0x2c, r24	; 44
    1c10:	08 95       	ret

00001c12 <_ZN13RHHardwareSPI15detachInterruptEv>:
  inline static void detachInterrupt() { SPCR &= ~_BV(SPIE); }
    1c12:	8c b5       	in	r24, 0x2c	; 44
    1c14:	8f 77       	andi	r24, 0x7F	; 127
    1c16:	8c bd       	out	0x2c, r24	; 44
    1c18:	08 95       	ret

00001c1a <_ZN13RHHardwareSPI16beginTransactionEv>:
{
    return SPI.end();
}

void RHHardwareSPI::beginTransaction()
{
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	45 81       	ldd	r20, Z+5	; 0x05
    1c1e:	36 81       	ldd	r19, Z+6	; 0x06

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    1c20:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <_ZN8SPIClass13interruptModeE>
    1c24:	88 23       	and	r24, r24
    1c26:	99 f0       	breq	.+38     	; 0x1c4e <_ZN13RHHardwareSPI16beginTransactionEv+0x34>
      uint8_t sreg = SREG;
    1c28:	2f b7       	in	r18, 0x3f	; 63
      noInterrupts();
    1c2a:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1c2c:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <_ZN8SPIClass13interruptModeE>
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	59 f4       	brne	.+22     	; 0x1c4a <_ZN13RHHardwareSPI16beginTransactionEv+0x30>
        interruptSave = SPI_AVR_EIMSK;
    1c34:	8d b3       	in	r24, 0x1d	; 29
    1c36:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    1c3a:	9d b3       	in	r25, 0x1d	; 29
    1c3c:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <_ZN8SPIClass13interruptMaskE>
    1c40:	80 95       	com	r24
    1c42:	89 23       	and	r24, r25
    1c44:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    1c46:	2f bf       	out	0x3f, r18	; 63
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <_ZN13RHHardwareSPI16beginTransactionEv+0x34>
      } else
      #endif
      {
        interruptSave = sreg;
    1c4a:	20 93 2d 04 	sts	0x042D, r18	; 0x80042d <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    1c4e:	4c bd       	out	0x2c, r20	; 44
    SPSR = settings.spsr;
    1c50:	3d bd       	out	0x2d, r19	; 45
    1c52:	08 95       	ret

00001c54 <_ZN13RHHardwareSPI14usingInterruptEh>:
    SPI.endTransaction();
#endif
}

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
    1c54:	08 95       	ret

00001c56 <_ZN13RHHardwareSPI5beginEv>:
    SPI.detachInterrupt();
#endif
}
    
void RHHardwareSPI::begin() 
{
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	fc 01       	movw	r30, r24
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
    1c5c:	82 81       	ldd	r24, Z+2	; 0x02
    1c5e:	84 30       	cpi	r24, 0x04	; 4
    1c60:	59 f0       	breq	.+22     	; 0x1c78 <_ZN13RHHardwareSPI5beginEv+0x22>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
    1c62:	83 30       	cpi	r24, 0x03	; 3
    1c64:	71 f0       	breq	.+28     	; 0x1c82 <_ZN13RHHardwareSPI5beginEv+0x2c>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
    1c66:	82 30       	cpi	r24, 0x02	; 2
    1c68:	89 f0       	breq	.+34     	; 0x1c8c <_ZN13RHHardwareSPI5beginEv+0x36>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	a1 f0       	breq	.+40     	; 0x1c96 <_ZN13RHHardwareSPI5beginEv+0x40>
       frequency = 2000000;
   else
       frequency = 1000000;
    1c6e:	40 e4       	ldi	r20, 0x40	; 64
    1c70:	52 e4       	ldi	r21, 0x42	; 66
    1c72:	6f e0       	ldi	r22, 0x0F	; 15
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	13 c0       	rjmp	.+38     	; 0x1c9e <_ZN13RHHardwareSPI5beginEv+0x48>
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
       frequency = 16000000;
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	54 e2       	ldi	r21, 0x24	; 36
    1c7c:	64 ef       	ldi	r22, 0xF4	; 244
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	0e c0       	rjmp	.+28     	; 0x1c9e <_ZN13RHHardwareSPI5beginEv+0x48>
   else if (_frequency == Frequency8MHz)
       frequency = 8000000;
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	52 e1       	ldi	r21, 0x12	; 18
    1c86:	6a e7       	ldi	r22, 0x7A	; 122
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	09 c0       	rjmp	.+18     	; 0x1c9e <_ZN13RHHardwareSPI5beginEv+0x48>
   else if (_frequency == Frequency4MHz)
       frequency = 4000000;
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	59 e0       	ldi	r21, 0x09	; 9
    1c90:	6d e3       	ldi	r22, 0x3D	; 61
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	04 c0       	rjmp	.+8      	; 0x1c9e <_ZN13RHHardwareSPI5beginEv+0x48>
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
    1c96:	40 e8       	ldi	r20, 0x80	; 128
    1c98:	54 e8       	ldi	r21, 0x84	; 132
    1c9a:	6e e1       	ldi	r22, 0x1E	; 30
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;

    uint8_t dataMode;
    if (_dataMode == DataMode0)
    1c9e:	84 81       	ldd	r24, Z+4	; 0x04
    1ca0:	88 23       	and	r24, r24
    1ca2:	61 f0       	breq	.+24     	; 0x1cbc <_ZN13RHHardwareSPI5beginEv+0x66>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	31 f0       	breq	.+12     	; 0x1cb4 <_ZN13RHHardwareSPI5beginEv+0x5e>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
    1ca8:	82 30       	cpi	r24, 0x02	; 2
    1caa:	31 f0       	breq	.+12     	; 0x1cb8 <_ZN13RHHardwareSPI5beginEv+0x62>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
    1cac:	83 30       	cpi	r24, 0x03	; 3
    1cae:	31 f4       	brne	.+12     	; 0x1cbc <_ZN13RHHardwareSPI5beginEv+0x66>
	dataMode = SPI_MODE3;
    1cb0:	9c e0       	ldi	r25, 0x0C	; 12
    1cb2:	05 c0       	rjmp	.+10     	; 0x1cbe <_ZN13RHHardwareSPI5beginEv+0x68>

    uint8_t dataMode;
    if (_dataMode == DataMode0)
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
	dataMode = SPI_MODE1;
    1cb4:	94 e0       	ldi	r25, 0x04	; 4
    1cb6:	03 c0       	rjmp	.+6      	; 0x1cbe <_ZN13RHHardwareSPI5beginEv+0x68>
    else if (_dataMode == DataMode2)
	dataMode = SPI_MODE2;
    1cb8:	98 e0       	ldi	r25, 0x08	; 8
    1cba:	01 c0       	rjmp	.+2      	; 0x1cbe <_ZN13RHHardwareSPI5beginEv+0x68>
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	00 e0       	ldi	r16, 0x00	; 0
    1cc0:	12 e1       	ldi	r17, 0x12	; 18
    1cc2:	2a e7       	ldi	r18, 0x7A	; 122
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    1cc8:	40 17       	cp	r20, r16
    1cca:	51 07       	cpc	r21, r17
    1ccc:	62 07       	cpc	r22, r18
    1cce:	73 07       	cpc	r23, r19
    1cd0:	40 f4       	brcc	.+16     	; 0x1ce2 <_ZN13RHHardwareSPI5beginEv+0x8c>
        clockSetting /= 2;
    1cd2:	36 95       	lsr	r19
    1cd4:	27 95       	ror	r18
    1cd6:	17 95       	ror	r17
    1cd8:	07 95       	ror	r16
        clockDiv++;
    1cda:	8f 5f       	subi	r24, 0xFF	; 255
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    1cdc:	86 30       	cpi	r24, 0x06	; 6
    1cde:	a1 f7       	brne	.-24     	; 0x1cc8 <_ZN13RHHardwareSPI5beginEv+0x72>
      }
    }

    // Compensate for the duplicate fosc/64
    if (clockDiv == 6)
    clockDiv = 7;
    1ce0:	87 e0       	ldi	r24, 0x07	; 7

    // Invert the SPI2X bit
    clockDiv ^= 0x1;
    1ce2:	21 e0       	ldi	r18, 0x01	; 1
    1ce4:	28 27       	eor	r18, r24

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    1ce6:	83 81       	ldd	r24, Z+3	; 0x03
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	11 f0       	breq	.+4      	; 0x1cf0 <_ZN13RHHardwareSPI5beginEv+0x9a>
    1cec:	80 e5       	ldi	r24, 0x50	; 80
    1cee:	01 c0       	rjmp	.+2      	; 0x1cf2 <_ZN13RHHardwareSPI5beginEv+0x9c>
    1cf0:	80 e7       	ldi	r24, 0x70	; 112

    // Save the settings for use in transactions
   _settings = SPISettings(frequency, bitOrder, dataMode);
    1cf2:	32 2f       	mov	r19, r18
    1cf4:	36 95       	lsr	r19
    1cf6:	93 2b       	or	r25, r19
    1cf8:	98 2b       	or	r25, r24
    1cfa:	95 83       	std	Z+5, r25	; 0x05
    1cfc:	21 70       	andi	r18, 0x01	; 1
    1cfe:	26 83       	std	Z+6, r18	; 0x06
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    else
	dataMode = SPI_MODE0;

    // Save the settings for use in transactions
   _settings = SPISettings(frequency, bitOrder, dataMode);
   SPI.begin();
    1d04:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <_ZN8SPIClass5beginEv>

00001d08 <_ZN13RHHardwareSPI3endEv>:
#endif // SPI_HAS_TRANSACTION
}

void RHHardwareSPI::end() 
{
    return SPI.end();
    1d08:	0c 94 20 13 	jmp	0x2640	; 0x2640 <_ZN8SPIClass3endEv>

00001d0c <_ZN13RHHardwareSPI14endTransactionEv>:
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    1d0c:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <_ZN8SPIClass13interruptModeE>
    1d10:	88 23       	and	r24, r24
    1d12:	61 f0       	breq	.+24     	; 0x1d2c <_ZN13RHHardwareSPI14endTransactionEv+0x20>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    1d14:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    1d16:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1d18:	20 91 2f 04 	lds	r18, 0x042F	; 0x80042f <_ZN8SPIClass13interruptModeE>
    1d1c:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZN8SPIClass13interruptSaveE>
    1d20:	21 30       	cpi	r18, 0x01	; 1
    1d22:	19 f4       	brne	.+6      	; 0x1d2a <_ZN13RHHardwareSPI14endTransactionEv+0x1e>
        SPI_AVR_EIMSK = interruptSave;
    1d24:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    1d26:	9f bf       	out	0x3f, r25	; 63
    1d28:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
    1d2a:	8f bf       	out	0x3f, r24	; 63
    1d2c:	08 95       	ret

00001d2e <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	ec 01       	movw	r28, r24
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
    1d34:	0e 94 48 16 	call	0x2c90	; 0x2c90 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
    1d38:	8c e4       	ldi	r24, 0x4C	; 76
    1d3a:	92 e0       	ldi	r25, 0x02	; 2
    1d3c:	99 83       	std	Y+1, r25	; 0x01
    1d3e:	88 83       	st	Y, r24
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    1d40:	80 e5       	ldi	r24, 0x50	; 80
    1d42:	8d 83       	std	Y+5, r24	; 0x05
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    1d44:	1e 82       	std	Y+6, r1	; 0x06
{
}
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	08 95       	ret

00001d4c <_GLOBAL__sub_I_hardware_spi>:
// $Id: RHHardwareSPI.cpp,v 1.20 2018/02/11 23:57:18 mikem Exp $

#include <RHHardwareSPI.h>

// Declare a single default instance of the hardware SPI interface class
RHHardwareSPI hardware_spi;
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	8f e1       	ldi	r24, 0x1F	; 31
    1d54:	94 e0       	ldi	r25, 0x04	; 4
    1d56:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>

00001d5a <_ZN7RH_RF6916maxMessageLengthEv>:
    printRegister(RH_RF69_REG_58_TESTLNA);
    printRegister(RH_RF69_REG_6F_TESTDAGC);
    printRegister(RH_RF69_REG_71_TESTAFC);

    return true;
}
    1d5a:	8c e3       	ldi	r24, 0x3C	; 60
    1d5c:	08 95       	ret

00001d5e <_ZN7RH_RF6916setEncryptionKeyEPh.part.4.constprop.5>:
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	ec 01       	movw	r28, r24
    1d64:	6d e3       	ldi	r22, 0x3D	; 61
    1d66:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <_ZN11RHSPIDriver7spiReadEh>
    1d6a:	48 2f       	mov	r20, r24
    1d6c:	4e 7f       	andi	r20, 0xFE	; 254
    1d6e:	6d e3       	ldi	r22, 0x3D	; 61
    1d70:	ce 01       	movw	r24, r28
    1d72:	df 91       	pop	r29
    1d74:	cf 91       	pop	r28
    1d76:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>

00001d7a <_ZN7RH_RF694recvEPhS0_>:
    1d7a:	cf 92       	push	r12
    1d7c:	df 92       	push	r13
    1d7e:	ef 92       	push	r14
    1d80:	ff 92       	push	r15
    1d82:	0f 93       	push	r16
    1d84:	1f 93       	push	r17
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	ec 01       	movw	r28, r24
    1d8c:	6b 01       	movw	r12, r22
    1d8e:	8a 01       	movw	r16, r20
    1d90:	e8 81       	ld	r30, Y
    1d92:	f9 81       	ldd	r31, Y+1	; 0x01
    1d94:	02 80       	ldd	r0, Z+2	; 0x02
    1d96:	f3 81       	ldd	r31, Z+3	; 0x03
    1d98:	e0 2d       	mov	r30, r0
    1d9a:	09 95       	icall
    1d9c:	f8 2e       	mov	r15, r24
    1d9e:	88 23       	and	r24, r24
    1da0:	e1 f0       	breq	.+56     	; 0x1dda <_ZN7RH_RF694recvEPhS0_+0x60>
    1da2:	c1 14       	cp	r12, r1
    1da4:	d1 04       	cpc	r13, r1
    1da6:	b1 f0       	breq	.+44     	; 0x1dd4 <_ZN7RH_RF694recvEPhS0_+0x5a>
    1da8:	01 15       	cp	r16, r1
    1daa:	11 05       	cpc	r17, r1
    1dac:	99 f0       	breq	.+38     	; 0x1dd4 <_ZN7RH_RF694recvEPhS0_+0x5a>
    1dae:	ef b6       	in	r14, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	89 a1       	ldd	r24, Y+33	; 0x21
    1db4:	f8 01       	movw	r30, r16
    1db6:	90 81       	ld	r25, Z
    1db8:	89 17       	cp	r24, r25
    1dba:	10 f4       	brcc	.+4      	; 0x1dc0 <_ZN7RH_RF694recvEPhS0_+0x46>
    1dbc:	89 a1       	ldd	r24, Y+33	; 0x21
    1dbe:	80 83       	st	Z, r24
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	40 81       	ld	r20, Z
    1dc4:	50 e0       	ldi	r21, 0x00	; 0
    1dc6:	be 01       	movw	r22, r28
    1dc8:	6e 5d       	subi	r22, 0xDE	; 222
    1dca:	7f 4f       	sbci	r23, 0xFF	; 255
    1dcc:	c6 01       	movw	r24, r12
    1dce:	0e 94 be 1b 	call	0x377c	; 0x377c <memcpy>
    1dd2:	ef be       	out	0x3f, r14	; 63
    1dd4:	c2 5a       	subi	r28, 0xA2	; 162
    1dd6:	df 4f       	sbci	r29, 0xFF	; 255
    1dd8:	18 82       	st	Y, r1
    1dda:	8f 2d       	mov	r24, r15
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	1f 91       	pop	r17
    1de2:	0f 91       	pop	r16
    1de4:	ff 90       	pop	r15
    1de6:	ef 90       	pop	r14
    1de8:	df 90       	pop	r13
    1dea:	cf 90       	pop	r12
    1dec:	08 95       	ret

00001dee <_ZN7RH_RF695sleepEv>:
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	fc 01       	movw	r30, r24
    1df4:	22 81       	ldd	r18, Z+2	; 0x02
    1df6:	21 30       	cpi	r18, 0x01	; 1
    1df8:	39 f0       	breq	.+14     	; 0x1e08 <_ZN7RH_RF695sleepEv+0x1a>
    1dfa:	ec 01       	movw	r28, r24
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	8a 83       	std	Y+2, r24	; 0x02
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	08 95       	ret

00001e10 <_ZN7RH_RF69C1EhhR12RHGenericSPI>:
    1e10:	1f 93       	push	r17
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	ec 01       	movw	r28, r24
    1e18:	14 2f       	mov	r17, r20
    1e1a:	a9 01       	movw	r20, r18
    1e1c:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
    1e20:	86 e6       	ldi	r24, 0x66	; 102
    1e22:	92 e0       	ldi	r25, 0x02	; 2
    1e24:	99 83       	std	Y+1, r25	; 0x01
    1e26:	88 83       	st	Y, r24
    1e28:	1c 8f       	std	Y+28, r17	; 0x1c
    1e2a:	84 e0       	ldi	r24, 0x04	; 4
    1e2c:	8e 8f       	std	Y+30, r24	; 0x1e
    1e2e:	8f ef       	ldi	r24, 0xFF	; 255
    1e30:	8d 8f       	std	Y+29, r24	; 0x1d
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	1f 91       	pop	r17
    1e38:	08 95       	ret

00001e3a <_ZN7RH_RF698readFifoEv>:
    1e3a:	ef 92       	push	r14
    1e3c:	ff 92       	push	r15
    1e3e:	0f 93       	push	r16
    1e40:	1f 93       	push	r17
    1e42:	cf 93       	push	r28
    1e44:	df 93       	push	r29
    1e46:	ec 01       	movw	r28, r24
    1e48:	ff b6       	in	r15, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	60 e0       	ldi	r22, 0x00	; 0
    1e4e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e50:	0e 94 a1 0b 	call	0x1742	; 0x1742 <digitalWrite>
    1e54:	88 8d       	ldd	r24, Y+24	; 0x18
    1e56:	99 8d       	ldd	r25, Y+25	; 0x19
    1e58:	dc 01       	movw	r26, r24
    1e5a:	ed 91       	ld	r30, X+
    1e5c:	fc 91       	ld	r31, X
    1e5e:	00 88       	ldd	r0, Z+16	; 0x10
    1e60:	f1 89       	ldd	r31, Z+17	; 0x11
    1e62:	e0 2d       	mov	r30, r0
    1e64:	09 95       	icall
    1e66:	88 8d       	ldd	r24, Y+24	; 0x18
    1e68:	99 8d       	ldd	r25, Y+25	; 0x19
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	ed 91       	ld	r30, X+
    1e6e:	fc 91       	ld	r31, X
    1e70:	01 90       	ld	r0, Z+
    1e72:	f0 81       	ld	r31, Z
    1e74:	e0 2d       	mov	r30, r0
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	09 95       	icall
    1e7a:	88 8d       	ldd	r24, Y+24	; 0x18
    1e7c:	99 8d       	ldd	r25, Y+25	; 0x19
    1e7e:	dc 01       	movw	r26, r24
    1e80:	ed 91       	ld	r30, X+
    1e82:	fc 91       	ld	r31, X
    1e84:	01 90       	ld	r0, Z+
    1e86:	f0 81       	ld	r31, Z
    1e88:	e0 2d       	mov	r30, r0
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	09 95       	icall
    1e8e:	08 2f       	mov	r16, r24
    1e90:	8c ef       	ldi	r24, 0xFC	; 252
    1e92:	80 0f       	add	r24, r16
    1e94:	8d 33       	cpi	r24, 0x3D	; 61
    1e96:	00 f5       	brcc	.+64     	; 0x1ed8 <_ZN7RH_RF698readFifoEv+0x9e>
    1e98:	88 8d       	ldd	r24, Y+24	; 0x18
    1e9a:	99 8d       	ldd	r25, Y+25	; 0x19
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	ed 91       	ld	r30, X+
    1ea0:	fc 91       	ld	r31, X
    1ea2:	01 90       	ld	r0, Z+
    1ea4:	f0 81       	ld	r31, Z
    1ea6:	e0 2d       	mov	r30, r0
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	09 95       	icall
    1eac:	8d 83       	std	Y+5, r24	; 0x05
    1eae:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb0:	81 11       	cpse	r24, r1
    1eb2:	27 c0       	rjmp	.+78     	; 0x1f02 <_ZN7RH_RF698readFifoEv+0xc8>
    1eb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	98 17       	cp	r25, r24
    1eba:	19 f1       	breq	.+70     	; 0x1f02 <_ZN7RH_RF698readFifoEv+0xc8>
    1ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebe:	8f 3f       	cpi	r24, 0xFF	; 255
    1ec0:	59 f4       	brne	.+22     	; 0x1ed8 <_ZN7RH_RF698readFifoEv+0x9e>
    1ec2:	1f c0       	rjmp	.+62     	; 0x1f02 <_ZN7RH_RF698readFifoEv+0xc8>
    1ec4:	89 89       	ldd	r24, Y+17	; 0x11
    1ec6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ec8:	01 96       	adiw	r24, 0x01	; 1
    1eca:	9a 8b       	std	Y+18, r25	; 0x12
    1ecc:	89 8b       	std	Y+17, r24	; 0x11
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	e2 5a       	subi	r30, 0xA2	; 162
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	80 83       	st	Z, r24
    1ed8:	61 e0       	ldi	r22, 0x01	; 1
    1eda:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1edc:	0e 94 a1 0b 	call	0x1742	; 0x1742 <digitalWrite>
    1ee0:	88 8d       	ldd	r24, Y+24	; 0x18
    1ee2:	99 8d       	ldd	r25, Y+25	; 0x19
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	ed 91       	ld	r30, X+
    1ee8:	fc 91       	ld	r31, X
    1eea:	02 88       	ldd	r0, Z+18	; 0x12
    1eec:	f3 89       	ldd	r31, Z+19	; 0x13
    1eee:	e0 2d       	mov	r30, r0
    1ef0:	09 95       	icall
    1ef2:	ff be       	out	0x3f, r15	; 63
    1ef4:	df 91       	pop	r29
    1ef6:	cf 91       	pop	r28
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	ef 90       	pop	r14
    1f00:	08 95       	ret
    1f02:	88 8d       	ldd	r24, Y+24	; 0x18
    1f04:	99 8d       	ldd	r25, Y+25	; 0x19
    1f06:	dc 01       	movw	r26, r24
    1f08:	ed 91       	ld	r30, X+
    1f0a:	fc 91       	ld	r31, X
    1f0c:	01 90       	ld	r0, Z+
    1f0e:	f0 81       	ld	r31, Z
    1f10:	e0 2d       	mov	r30, r0
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	09 95       	icall
    1f16:	8e 83       	std	Y+6, r24	; 0x06
    1f18:	88 8d       	ldd	r24, Y+24	; 0x18
    1f1a:	99 8d       	ldd	r25, Y+25	; 0x19
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	ed 91       	ld	r30, X+
    1f20:	fc 91       	ld	r31, X
    1f22:	01 90       	ld	r0, Z+
    1f24:	f0 81       	ld	r31, Z
    1f26:	e0 2d       	mov	r30, r0
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	09 95       	icall
    1f2c:	8f 83       	std	Y+7, r24	; 0x07
    1f2e:	88 8d       	ldd	r24, Y+24	; 0x18
    1f30:	99 8d       	ldd	r25, Y+25	; 0x19
    1f32:	dc 01       	movw	r26, r24
    1f34:	ed 91       	ld	r30, X+
    1f36:	fc 91       	ld	r31, X
    1f38:	01 90       	ld	r0, Z+
    1f3a:	f0 81       	ld	r31, Z
    1f3c:	e0 2d       	mov	r30, r0
    1f3e:	60 e0       	ldi	r22, 0x00	; 0
    1f40:	09 95       	icall
    1f42:	88 87       	std	Y+8, r24	; 0x08
    1f44:	19 a2       	std	Y+33, r1	; 0x21
    1f46:	10 e0       	ldi	r17, 0x00	; 0
    1f48:	04 50       	subi	r16, 0x04	; 4
    1f4a:	11 09       	sbc	r17, r1
    1f4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	80 17       	cp	r24, r16
    1f52:	91 07       	cpc	r25, r17
    1f54:	0c f0       	brlt	.+2      	; 0x1f58 <_ZN7RH_RF698readFifoEv+0x11e>
    1f56:	b6 cf       	rjmp	.-148    	; 0x1ec4 <_ZN7RH_RF698readFifoEv+0x8a>
    1f58:	e9 a0       	ldd	r14, Y+33	; 0x21
    1f5a:	88 8d       	ldd	r24, Y+24	; 0x18
    1f5c:	99 8d       	ldd	r25, Y+25	; 0x19
    1f5e:	dc 01       	movw	r26, r24
    1f60:	ed 91       	ld	r30, X+
    1f62:	fc 91       	ld	r31, X
    1f64:	01 90       	ld	r0, Z+
    1f66:	f0 81       	ld	r31, Z
    1f68:	e0 2d       	mov	r30, r0
    1f6a:	60 e0       	ldi	r22, 0x00	; 0
    1f6c:	09 95       	icall
    1f6e:	fe 01       	movw	r30, r28
    1f70:	ee 0d       	add	r30, r14
    1f72:	f1 1d       	adc	r31, r1
    1f74:	82 a3       	std	Z+34, r24	; 0x22
    1f76:	89 a1       	ldd	r24, Y+33	; 0x21
    1f78:	8f 5f       	subi	r24, 0xFF	; 255
    1f7a:	89 a3       	std	Y+33, r24	; 0x21
    1f7c:	e7 cf       	rjmp	.-50     	; 0x1f4c <_ZN7RH_RF698readFifoEv+0x112>

00001f7e <_ZN7RH_RF6912setFrequencyEff>:
    1f7e:	cf 92       	push	r12
    1f80:	df 92       	push	r13
    1f82:	ef 92       	push	r14
    1f84:	ff 92       	push	r15
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	ec 01       	movw	r28, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	ba 01       	movw	r22, r20
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	34 e2       	ldi	r19, 0x24	; 36
    1f94:	44 e7       	ldi	r20, 0x74	; 116
    1f96:	59 e4       	ldi	r21, 0x49	; 73
    1f98:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__mulsf3>
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	34 e2       	ldi	r19, 0x24	; 36
    1fa0:	44 e7       	ldi	r20, 0x74	; 116
    1fa2:	52 e4       	ldi	r21, 0x42	; 66
    1fa4:	0e 94 67 17 	call	0x2ece	; 0x2ece <__divsf3>
    1fa8:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <__fixunssfsi>
    1fac:	6b 01       	movw	r12, r22
    1fae:	7c 01       	movw	r14, r24
    1fb0:	a7 01       	movw	r20, r14
    1fb2:	66 27       	eor	r22, r22
    1fb4:	77 27       	eor	r23, r23
    1fb6:	67 e0       	ldi	r22, 0x07	; 7
    1fb8:	ce 01       	movw	r24, r28
    1fba:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    1fbe:	77 27       	eor	r23, r23
    1fc0:	6f 2d       	mov	r22, r15
    1fc2:	5e 2d       	mov	r21, r14
    1fc4:	4d 2d       	mov	r20, r13
    1fc6:	68 e0       	ldi	r22, 0x08	; 8
    1fc8:	ce 01       	movw	r24, r28
    1fca:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    1fce:	4c 2d       	mov	r20, r12
    1fd0:	69 e0       	ldi	r22, 0x09	; 9
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	df 91       	pop	r29
    1fdc:	cf 91       	pop	r28
    1fde:	ff 90       	pop	r15
    1fe0:	ef 90       	pop	r14
    1fe2:	df 90       	pop	r13
    1fe4:	cf 90       	pop	r12
    1fe6:	08 95       	ret

00001fe8 <_ZN7RH_RF699setOpModeEh>:
    1fe8:	1f 93       	push	r17
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	ec 01       	movw	r28, r24
    1ff0:	16 2f       	mov	r17, r22
    1ff2:	61 e0       	ldi	r22, 0x01	; 1
    1ff4:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <_ZN11RHSPIDriver7spiReadEh>
    1ff8:	41 2f       	mov	r20, r17
    1ffa:	4c 71       	andi	r20, 0x1C	; 28
    1ffc:	83 7e       	andi	r24, 0xE3	; 227
    1ffe:	48 2b       	or	r20, r24
    2000:	61 e0       	ldi	r22, 0x01	; 1
    2002:	ce 01       	movw	r24, r28
    2004:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    2008:	67 e2       	ldi	r22, 0x27	; 39
    200a:	ce 01       	movw	r24, r28
    200c:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <_ZN11RHSPIDriver7spiReadEh>
    2010:	87 ff       	sbrs	r24, 7
    2012:	fa cf       	rjmp	.-12     	; 0x2008 <_ZN7RH_RF699setOpModeEh+0x20>
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	1f 91       	pop	r17
    201a:	08 95       	ret

0000201c <_ZN7RH_RF6911setModeIdleEv>:
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
    2020:	fc 01       	movw	r30, r24
    2022:	22 81       	ldd	r18, Z+2	; 0x02
    2024:	22 30       	cpi	r18, 0x02	; 2
    2026:	a1 f0       	breq	.+40     	; 0x2050 <_ZN7RH_RF6911setModeIdleEv+0x34>
    2028:	ec 01       	movw	r28, r24
    202a:	80 a1       	ldd	r24, Z+32	; 0x20
    202c:	82 31       	cpi	r24, 0x12	; 18
    202e:	54 f0       	brlt	.+20     	; 0x2044 <_ZN7RH_RF6911setModeIdleEv+0x28>
    2030:	45 e5       	ldi	r20, 0x55	; 85
    2032:	6a e5       	ldi	r22, 0x5A	; 90
    2034:	cf 01       	movw	r24, r30
    2036:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    203a:	40 e7       	ldi	r20, 0x70	; 112
    203c:	6c e5       	ldi	r22, 0x5C	; 92
    203e:	ce 01       	movw	r24, r28
    2040:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    2044:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2046:	ce 01       	movw	r24, r28
    2048:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <_ZN7RH_RF699setOpModeEh>
    204c:	82 e0       	ldi	r24, 0x02	; 2
    204e:	8a 83       	std	Y+2, r24	; 0x02
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	08 95       	ret

00002056 <_ZN7RH_RF6915handleInterruptEv>:
    2056:	1f 93       	push	r17
    2058:	cf 93       	push	r28
    205a:	df 93       	push	r29
    205c:	ec 01       	movw	r28, r24
    205e:	68 e2       	ldi	r22, 0x28	; 40
    2060:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <_ZN11RHSPIDriver7spiReadEh>
    2064:	18 2f       	mov	r17, r24
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	83 30       	cpi	r24, 0x03	; 3
    206a:	11 f4       	brne	.+4      	; 0x2070 <_ZN7RH_RF6915handleInterruptEv+0x1a>
    206c:	13 fd       	sbrc	r17, 3
    206e:	23 c0       	rjmp	.+70     	; 0x20b6 <_ZN7RH_RF6915handleInterruptEv+0x60>
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	84 30       	cpi	r24, 0x04	; 4
    2074:	49 f5       	brne	.+82     	; 0x20c8 <_ZN7RH_RF6915handleInterruptEv+0x72>
    2076:	12 ff       	sbrs	r17, 2
    2078:	27 c0       	rjmp	.+78     	; 0x20c8 <_ZN7RH_RF6915handleInterruptEv+0x72>
    207a:	64 e2       	ldi	r22, 0x24	; 36
    207c:	ce 01       	movw	r24, r28
    207e:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <_ZN11RHSPIDriver7spiReadEh>
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	95 95       	asr	r25
    2086:	87 95       	ror	r24
    2088:	91 95       	neg	r25
    208a:	81 95       	neg	r24
    208c:	91 09       	sbc	r25, r1
    208e:	9e 87       	std	Y+14, r25	; 0x0e
    2090:	8d 87       	std	Y+13, r24	; 0x0d
    2092:	0e 94 65 0a 	call	0x14ca	; 0x14ca <millis>
    2096:	fe 01       	movw	r30, r28
    2098:	e1 5a       	subi	r30, 0xA1	; 161
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	60 83       	st	Z, r22
    209e:	71 83       	std	Z+1, r23	; 0x01
    20a0:	82 83       	std	Z+2, r24	; 0x02
    20a2:	93 83       	std	Z+3, r25	; 0x03
    20a4:	ce 01       	movw	r24, r28
    20a6:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN7RH_RF6911setModeIdleEv>
    20aa:	ce 01       	movw	r24, r28
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	1f 91       	pop	r17
    20b2:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <_ZN7RH_RF698readFifoEv>
    20b6:	ce 01       	movw	r24, r28
    20b8:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN7RH_RF6911setModeIdleEv>
    20bc:	8b 89       	ldd	r24, Y+19	; 0x13
    20be:	9c 89       	ldd	r25, Y+20	; 0x14
    20c0:	01 96       	adiw	r24, 0x01	; 1
    20c2:	9c 8b       	std	Y+20, r25	; 0x14
    20c4:	8b 8b       	std	Y+19, r24	; 0x13
    20c6:	d4 cf       	rjmp	.-88     	; 0x2070 <_ZN7RH_RF6915handleInterruptEv+0x1a>
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
    20cc:	1f 91       	pop	r17
    20ce:	08 95       	ret

000020d0 <_ZN7RH_RF694isr0Ev>:
    20d0:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <_ZN7RH_RF6919_deviceForInterruptE>
    20d4:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <_ZN7RH_RF6919_deviceForInterruptE+0x1>
    20d8:	00 97       	sbiw	r24, 0x00	; 0
    20da:	11 f0       	breq	.+4      	; 0x20e0 <_ZN7RH_RF694isr0Ev+0x10>
    20dc:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <_ZN7RH_RF6915handleInterruptEv>
    20e0:	08 95       	ret

000020e2 <_ZN7RH_RF694isr1Ev>:
    20e2:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <_ZN7RH_RF6919_deviceForInterruptE+0x2>
    20e6:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <_ZN7RH_RF6919_deviceForInterruptE+0x3>
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	11 f0       	breq	.+4      	; 0x20f2 <_ZN7RH_RF694isr1Ev+0x10>
    20ee:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <_ZN7RH_RF6915handleInterruptEv>
    20f2:	08 95       	ret

000020f4 <_ZN7RH_RF694isr2Ev>:
    20f4:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <_ZN7RH_RF6919_deviceForInterruptE+0x4>
    20f8:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <_ZN7RH_RF6919_deviceForInterruptE+0x5>
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	11 f0       	breq	.+4      	; 0x2104 <_ZN7RH_RF694isr2Ev+0x10>
    2100:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <_ZN7RH_RF6915handleInterruptEv>
    2104:	08 95       	ret

00002106 <_ZN7RH_RF699setModeRxEv>:
    2106:	cf 93       	push	r28
    2108:	df 93       	push	r29
    210a:	fc 01       	movw	r30, r24
    210c:	22 81       	ldd	r18, Z+2	; 0x02
    210e:	24 30       	cpi	r18, 0x04	; 4
    2110:	c9 f0       	breq	.+50     	; 0x2144 <_ZN7RH_RF699setModeRxEv+0x3e>
    2112:	ec 01       	movw	r28, r24
    2114:	80 a1       	ldd	r24, Z+32	; 0x20
    2116:	82 31       	cpi	r24, 0x12	; 18
    2118:	54 f0       	brlt	.+20     	; 0x212e <_ZN7RH_RF699setModeRxEv+0x28>
    211a:	45 e5       	ldi	r20, 0x55	; 85
    211c:	6a e5       	ldi	r22, 0x5A	; 90
    211e:	cf 01       	movw	r24, r30
    2120:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    2124:	40 e7       	ldi	r20, 0x70	; 112
    2126:	6c e5       	ldi	r22, 0x5C	; 92
    2128:	ce 01       	movw	r24, r28
    212a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    212e:	40 e4       	ldi	r20, 0x40	; 64
    2130:	65 e2       	ldi	r22, 0x25	; 37
    2132:	ce 01       	movw	r24, r28
    2134:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    2138:	60 e1       	ldi	r22, 0x10	; 16
    213a:	ce 01       	movw	r24, r28
    213c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <_ZN7RH_RF699setOpModeEh>
    2140:	84 e0       	ldi	r24, 0x04	; 4
    2142:	8a 83       	std	Y+2, r24	; 0x02
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <_ZN7RH_RF699availableEv>:
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	fc 01       	movw	r30, r24
    2150:	22 81       	ldd	r18, Z+2	; 0x02
    2152:	23 30       	cpi	r18, 0x03	; 3
    2154:	39 f0       	breq	.+14     	; 0x2164 <_ZN7RH_RF699availableEv+0x1a>
    2156:	ec 01       	movw	r28, r24
    2158:	0e 94 83 10 	call	0x2106	; 0x2106 <_ZN7RH_RF699setModeRxEv>
    215c:	c2 5a       	subi	r28, 0xA2	; 162
    215e:	df 4f       	sbci	r29, 0xFF	; 255
    2160:	88 81       	ld	r24, Y
    2162:	01 c0       	rjmp	.+2      	; 0x2166 <_ZN7RH_RF699availableEv+0x1c>
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	08 95       	ret

0000216c <_ZN7RH_RF699setModeTxEv>:
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	fc 01       	movw	r30, r24
    2172:	22 81       	ldd	r18, Z+2	; 0x02
    2174:	23 30       	cpi	r18, 0x03	; 3
    2176:	c9 f0       	breq	.+50     	; 0x21aa <_ZN7RH_RF699setModeTxEv+0x3e>
    2178:	ec 01       	movw	r28, r24
    217a:	80 a1       	ldd	r24, Z+32	; 0x20
    217c:	82 31       	cpi	r24, 0x12	; 18
    217e:	54 f0       	brlt	.+20     	; 0x2194 <_ZN7RH_RF699setModeTxEv+0x28>
    2180:	4d e5       	ldi	r20, 0x5D	; 93
    2182:	6a e5       	ldi	r22, 0x5A	; 90
    2184:	cf 01       	movw	r24, r30
    2186:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    218a:	4c e7       	ldi	r20, 0x7C	; 124
    218c:	6c e5       	ldi	r22, 0x5C	; 92
    218e:	ce 01       	movw	r24, r28
    2190:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	65 e2       	ldi	r22, 0x25	; 37
    2198:	ce 01       	movw	r24, r28
    219a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    219e:	6c e0       	ldi	r22, 0x0C	; 12
    21a0:	ce 01       	movw	r24, r28
    21a2:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <_ZN7RH_RF699setOpModeEh>
    21a6:	83 e0       	ldi	r24, 0x03	; 3
    21a8:	8a 83       	std	Y+2, r24	; 0x02
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	08 95       	ret

000021b0 <_ZN7RH_RF694sendEPKhh>:
    21b0:	bf 92       	push	r11
    21b2:	cf 92       	push	r12
    21b4:	df 92       	push	r13
    21b6:	ef 92       	push	r14
    21b8:	ff 92       	push	r15
    21ba:	0f 93       	push	r16
    21bc:	1f 93       	push	r17
    21be:	cf 93       	push	r28
    21c0:	df 93       	push	r29
    21c2:	ec 01       	movw	r28, r24
    21c4:	b6 2e       	mov	r11, r22
    21c6:	c7 2e       	mov	r12, r23
    21c8:	14 2f       	mov	r17, r20
    21ca:	4d 33       	cpi	r20, 0x3D	; 61
    21cc:	10 f0       	brcs	.+4      	; 0x21d2 <_ZN7RH_RF694sendEPKhh+0x22>
    21ce:	00 e0       	ldi	r16, 0x00	; 0
    21d0:	6f c0       	rjmp	.+222    	; 0x22b0 <_ZN7RH_RF694sendEPKhh+0x100>
    21d2:	e8 81       	ld	r30, Y
    21d4:	f9 81       	ldd	r31, Y+1	; 0x01
    21d6:	04 84       	ldd	r0, Z+12	; 0x0c
    21d8:	f5 85       	ldd	r31, Z+13	; 0x0d
    21da:	e0 2d       	mov	r30, r0
    21dc:	09 95       	icall
    21de:	ce 01       	movw	r24, r28
    21e0:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN7RH_RF6911setModeIdleEv>
    21e4:	e8 81       	ld	r30, Y
    21e6:	f9 81       	ldd	r31, Y+1	; 0x01
    21e8:	02 88       	ldd	r0, Z+18	; 0x12
    21ea:	f3 89       	ldd	r31, Z+19	; 0x13
    21ec:	e0 2d       	mov	r30, r0
    21ee:	ce 01       	movw	r24, r28
    21f0:	09 95       	icall
    21f2:	08 2f       	mov	r16, r24
    21f4:	88 23       	and	r24, r24
    21f6:	59 f3       	breq	.-42     	; 0x21ce <_ZN7RH_RF694sendEPKhh+0x1e>
    21f8:	df b6       	in	r13, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	60 e0       	ldi	r22, 0x00	; 0
    21fe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2200:	0e 94 a1 0b 	call	0x1742	; 0x1742 <digitalWrite>
    2204:	88 8d       	ldd	r24, Y+24	; 0x18
    2206:	99 8d       	ldd	r25, Y+25	; 0x19
    2208:	dc 01       	movw	r26, r24
    220a:	ed 91       	ld	r30, X+
    220c:	fc 91       	ld	r31, X
    220e:	01 90       	ld	r0, Z+
    2210:	f0 81       	ld	r31, Z
    2212:	e0 2d       	mov	r30, r0
    2214:	60 e8       	ldi	r22, 0x80	; 128
    2216:	09 95       	icall
    2218:	88 8d       	ldd	r24, Y+24	; 0x18
    221a:	99 8d       	ldd	r25, Y+25	; 0x19
    221c:	dc 01       	movw	r26, r24
    221e:	ed 91       	ld	r30, X+
    2220:	fc 91       	ld	r31, X
    2222:	01 90       	ld	r0, Z+
    2224:	f0 81       	ld	r31, Z
    2226:	e0 2d       	mov	r30, r0
    2228:	64 e0       	ldi	r22, 0x04	; 4
    222a:	61 0f       	add	r22, r17
    222c:	09 95       	icall
    222e:	88 8d       	ldd	r24, Y+24	; 0x18
    2230:	99 8d       	ldd	r25, Y+25	; 0x19
    2232:	dc 01       	movw	r26, r24
    2234:	ed 91       	ld	r30, X+
    2236:	fc 91       	ld	r31, X
    2238:	01 90       	ld	r0, Z+
    223a:	f0 81       	ld	r31, Z
    223c:	e0 2d       	mov	r30, r0
    223e:	69 85       	ldd	r22, Y+9	; 0x09
    2240:	09 95       	icall
    2242:	88 8d       	ldd	r24, Y+24	; 0x18
    2244:	99 8d       	ldd	r25, Y+25	; 0x19
    2246:	dc 01       	movw	r26, r24
    2248:	ed 91       	ld	r30, X+
    224a:	fc 91       	ld	r31, X
    224c:	01 90       	ld	r0, Z+
    224e:	f0 81       	ld	r31, Z
    2250:	e0 2d       	mov	r30, r0
    2252:	6a 85       	ldd	r22, Y+10	; 0x0a
    2254:	09 95       	icall
    2256:	88 8d       	ldd	r24, Y+24	; 0x18
    2258:	99 8d       	ldd	r25, Y+25	; 0x19
    225a:	dc 01       	movw	r26, r24
    225c:	ed 91       	ld	r30, X+
    225e:	fc 91       	ld	r31, X
    2260:	01 90       	ld	r0, Z+
    2262:	f0 81       	ld	r31, Z
    2264:	e0 2d       	mov	r30, r0
    2266:	6b 85       	ldd	r22, Y+11	; 0x0b
    2268:	09 95       	icall
    226a:	88 8d       	ldd	r24, Y+24	; 0x18
    226c:	99 8d       	ldd	r25, Y+25	; 0x19
    226e:	dc 01       	movw	r26, r24
    2270:	ed 91       	ld	r30, X+
    2272:	fc 91       	ld	r31, X
    2274:	01 90       	ld	r0, Z+
    2276:	f0 81       	ld	r31, Z
    2278:	e0 2d       	mov	r30, r0
    227a:	6c 85       	ldd	r22, Y+12	; 0x0c
    227c:	09 95       	icall
    227e:	eb 2c       	mov	r14, r11
    2280:	fc 2c       	mov	r15, r12
    2282:	11 50       	subi	r17, 0x01	; 1
    2284:	68 f0       	brcs	.+26     	; 0x22a0 <_ZN7RH_RF694sendEPKhh+0xf0>
    2286:	88 8d       	ldd	r24, Y+24	; 0x18
    2288:	99 8d       	ldd	r25, Y+25	; 0x19
    228a:	f7 01       	movw	r30, r14
    228c:	61 91       	ld	r22, Z+
    228e:	7f 01       	movw	r14, r30
    2290:	dc 01       	movw	r26, r24
    2292:	ed 91       	ld	r30, X+
    2294:	fc 91       	ld	r31, X
    2296:	01 90       	ld	r0, Z+
    2298:	f0 81       	ld	r31, Z
    229a:	e0 2d       	mov	r30, r0
    229c:	09 95       	icall
    229e:	f1 cf       	rjmp	.-30     	; 0x2282 <_ZN7RH_RF694sendEPKhh+0xd2>
    22a0:	61 e0       	ldi	r22, 0x01	; 1
    22a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22a4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <digitalWrite>
    22a8:	df be       	out	0x3f, r13	; 63
    22aa:	ce 01       	movw	r24, r28
    22ac:	0e 94 b6 10 	call	0x216c	; 0x216c <_ZN7RH_RF699setModeTxEv>
    22b0:	80 2f       	mov	r24, r16
    22b2:	df 91       	pop	r29
    22b4:	cf 91       	pop	r28
    22b6:	1f 91       	pop	r17
    22b8:	0f 91       	pop	r16
    22ba:	ff 90       	pop	r15
    22bc:	ef 90       	pop	r14
    22be:	df 90       	pop	r13
    22c0:	cf 90       	pop	r12
    22c2:	bf 90       	pop	r11
    22c4:	08 95       	ret

000022c6 <_ZN7RH_RF6910setTxPowerEab>:
    22c6:	fc 01       	movw	r30, r24
    22c8:	60 a3       	std	Z+32, r22	; 0x20
    22ca:	44 23       	and	r20, r20
    22cc:	99 f0       	breq	.+38     	; 0x22f4 <_ZN7RH_RF6910setTxPowerEab+0x2e>
    22ce:	6e 3f       	cpi	r22, 0xFE	; 254
    22d0:	14 f4       	brge	.+4      	; 0x22d6 <_ZN7RH_RF6910setTxPowerEab+0x10>
    22d2:	8e ef       	ldi	r24, 0xFE	; 254
    22d4:	80 a3       	std	Z+32, r24	; 0x20
    22d6:	40 a1       	ldd	r20, Z+32	; 0x20
    22d8:	4e 30       	cpi	r20, 0x0E	; 14
    22da:	24 f4       	brge	.+8      	; 0x22e4 <_ZN7RH_RF6910setTxPowerEab+0x1e>
    22dc:	4e 5e       	subi	r20, 0xEE	; 238
    22de:	4f 71       	andi	r20, 0x1F	; 31
    22e0:	40 64       	ori	r20, 0x40	; 64
    22e2:	15 c0       	rjmp	.+42     	; 0x230e <_ZN7RH_RF6910setTxPowerEab+0x48>
    22e4:	42 31       	cpi	r20, 0x12	; 18
    22e6:	1c f0       	brlt	.+6      	; 0x22ee <_ZN7RH_RF6910setTxPowerEab+0x28>
    22e8:	45 5f       	subi	r20, 0xF5	; 245
    22ea:	4f 71       	andi	r20, 0x1F	; 31
    22ec:	01 c0       	rjmp	.+2      	; 0x22f0 <_ZN7RH_RF6910setTxPowerEab+0x2a>
    22ee:	42 5f       	subi	r20, 0xF2	; 242
    22f0:	40 66       	ori	r20, 0x60	; 96
    22f2:	0d c0       	rjmp	.+26     	; 0x230e <_ZN7RH_RF6910setTxPowerEab+0x48>
    22f4:	6e 3e       	cpi	r22, 0xEE	; 238
    22f6:	14 f4       	brge	.+4      	; 0x22fc <_ZN7RH_RF6910setTxPowerEab+0x36>
    22f8:	8e ee       	ldi	r24, 0xEE	; 238
    22fa:	80 a3       	std	Z+32, r24	; 0x20
    22fc:	80 a1       	ldd	r24, Z+32	; 0x20
    22fe:	8e 30       	cpi	r24, 0x0E	; 14
    2300:	14 f0       	brlt	.+4      	; 0x2306 <_ZN7RH_RF6910setTxPowerEab+0x40>
    2302:	8d e0       	ldi	r24, 0x0D	; 13
    2304:	80 a3       	std	Z+32, r24	; 0x20
    2306:	40 a1       	ldd	r20, Z+32	; 0x20
    2308:	4e 5e       	subi	r20, 0xEE	; 238
    230a:	4f 71       	andi	r20, 0x1F	; 31
    230c:	40 68       	ori	r20, 0x80	; 128
    230e:	61 e1       	ldi	r22, 0x11	; 17
    2310:	cf 01       	movw	r24, r30
    2312:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>

00002316 <_ZN7RH_RF6917setModemRegistersEPKNS_11ModemConfigE>:
    2316:	0f 93       	push	r16
    2318:	1f 93       	push	r17
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	ec 01       	movw	r28, r24
    2320:	8b 01       	movw	r16, r22
    2322:	25 e0       	ldi	r18, 0x05	; 5
    2324:	ab 01       	movw	r20, r22
    2326:	62 e0       	ldi	r22, 0x02	; 2
    2328:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    232c:	a8 01       	movw	r20, r16
    232e:	4b 5f       	subi	r20, 0xFB	; 251
    2330:	5f 4f       	sbci	r21, 0xFF	; 255
    2332:	22 e0       	ldi	r18, 0x02	; 2
    2334:	69 e1       	ldi	r22, 0x19	; 25
    2336:	ce 01       	movw	r24, r28
    2338:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    233c:	f8 01       	movw	r30, r16
    233e:	47 81       	ldd	r20, Z+7	; 0x07
    2340:	67 e3       	ldi	r22, 0x37	; 55
    2342:	ce 01       	movw	r24, r28
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	1f 91       	pop	r17
    234a:	0f 91       	pop	r16
    234c:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>

00002350 <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE>:
    2350:	0f 93       	push	r16
    2352:	1f 93       	push	r17
    2354:	cf 93       	push	r28
    2356:	df 93       	push	r29
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	28 97       	sbiw	r28, 0x08	; 8
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	6c 31       	cpi	r22, 0x1C	; 28
    236c:	71 05       	cpc	r23, r1
    236e:	b4 f4       	brge	.+44     	; 0x239c <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE+0x4c>
    2370:	8c 01       	movw	r16, r24
    2372:	83 e0       	ldi	r24, 0x03	; 3
    2374:	66 0f       	add	r22, r22
    2376:	77 1f       	adc	r23, r23
    2378:	8a 95       	dec	r24
    237a:	e1 f7       	brne	.-8      	; 0x2374 <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE+0x24>
    237c:	6a 58       	subi	r22, 0x8A	; 138
    237e:	7e 4f       	sbci	r23, 0xFE	; 254
    2380:	48 e0       	ldi	r20, 0x08	; 8
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	ce 01       	movw	r24, r28
    2386:	01 96       	adiw	r24, 0x01	; 1
    2388:	0e 94 b5 1b 	call	0x376a	; 0x376a <memcpy_P>
    238c:	be 01       	movw	r22, r28
    238e:	6f 5f       	subi	r22, 0xFF	; 255
    2390:	7f 4f       	sbci	r23, 0xFF	; 255
    2392:	c8 01       	movw	r24, r16
    2394:	0e 94 8b 11 	call	0x2316	; 0x2316 <_ZN7RH_RF6917setModemRegistersEPKNS_11ModemConfigE>
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	01 c0       	rjmp	.+2      	; 0x239e <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE+0x4e>
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	28 96       	adiw	r28, 0x08	; 8
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	df 91       	pop	r29
    23ac:	cf 91       	pop	r28
    23ae:	1f 91       	pop	r17
    23b0:	0f 91       	pop	r16
    23b2:	08 95       	ret

000023b4 <_ZN7RH_RF6917setPreambleLengthEj>:
    23b4:	1f 93       	push	r17
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	ec 01       	movw	r28, r24
    23bc:	16 2f       	mov	r17, r22
    23be:	47 2f       	mov	r20, r23
    23c0:	6c e2       	ldi	r22, 0x2C	; 44
    23c2:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    23c6:	41 2f       	mov	r20, r17
    23c8:	6d e2       	ldi	r22, 0x2D	; 45
    23ca:	ce 01       	movw	r24, r28
    23cc:	df 91       	pop	r29
    23ce:	cf 91       	pop	r28
    23d0:	1f 91       	pop	r17
    23d2:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>

000023d6 <_ZN7RH_RF6912setSyncWordsEPKhh>:
    23d6:	ef 92       	push	r14
    23d8:	ff 92       	push	r15
    23da:	0f 93       	push	r16
    23dc:	1f 93       	push	r17
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
    23e2:	8c 01       	movw	r16, r24
    23e4:	7b 01       	movw	r14, r22
    23e6:	c4 2f       	mov	r28, r20
    23e8:	6e e2       	ldi	r22, 0x2E	; 46
    23ea:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <_ZN11RHSPIDriver7spiReadEh>
    23ee:	d8 2f       	mov	r29, r24
    23f0:	e1 14       	cp	r14, r1
    23f2:	f1 04       	cpc	r15, r1
    23f4:	61 f0       	breq	.+24     	; 0x240e <_ZN7RH_RF6912setSyncWordsEPKhh+0x38>
    23f6:	8f ef       	ldi	r24, 0xFF	; 255
    23f8:	8c 0f       	add	r24, r28
    23fa:	84 30       	cpi	r24, 0x04	; 4
    23fc:	40 f4       	brcc	.+16     	; 0x240e <_ZN7RH_RF6912setSyncWordsEPKhh+0x38>
    23fe:	2c 2f       	mov	r18, r28
    2400:	a7 01       	movw	r20, r14
    2402:	6f e2       	ldi	r22, 0x2F	; 47
    2404:	c8 01       	movw	r24, r16
    2406:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    240a:	d0 68       	ori	r29, 0x80	; 128
    240c:	01 c0       	rjmp	.+2      	; 0x2410 <_ZN7RH_RF6912setSyncWordsEPKhh+0x3a>
    240e:	df 77       	andi	r29, 0x7F	; 127
    2410:	2c 2f       	mov	r18, r28
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	21 50       	subi	r18, 0x01	; 1
    2416:	31 09       	sbc	r19, r1
    2418:	83 e0       	ldi	r24, 0x03	; 3
    241a:	22 0f       	add	r18, r18
    241c:	33 1f       	adc	r19, r19
    241e:	8a 95       	dec	r24
    2420:	e1 f7       	brne	.-8      	; 0x241a <_ZN7RH_RF6912setSyncWordsEPKhh+0x44>
    2422:	d7 7c       	andi	r29, 0xC7	; 199
    2424:	4d 2f       	mov	r20, r29
    2426:	42 2b       	or	r20, r18
    2428:	6e e2       	ldi	r22, 0x2E	; 46
    242a:	c8 01       	movw	r24, r16
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	1f 91       	pop	r17
    2432:	0f 91       	pop	r16
    2434:	ff 90       	pop	r15
    2436:	ef 90       	pop	r14
    2438:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>

0000243c <_ZN7RH_RF6916setEncryptionKeyEPh>:
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	61 15       	cp	r22, r1
    2442:	71 05       	cpc	r23, r1
    2444:	91 f0       	breq	.+36     	; 0x246a <_ZN7RH_RF6916setEncryptionKeyEPh+0x2e>
    2446:	ab 01       	movw	r20, r22
    2448:	ec 01       	movw	r28, r24
    244a:	20 e1       	ldi	r18, 0x10	; 16
    244c:	6e e3       	ldi	r22, 0x3E	; 62
    244e:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    2452:	6d e3       	ldi	r22, 0x3D	; 61
    2454:	ce 01       	movw	r24, r28
    2456:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <_ZN11RHSPIDriver7spiReadEh>
    245a:	48 2f       	mov	r20, r24
    245c:	41 60       	ori	r20, 0x01	; 1
    245e:	6d e3       	ldi	r22, 0x3D	; 61
    2460:	ce 01       	movw	r24, r28
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <_ZN7RH_RF6916setEncryptionKeyEPh.part.4.constprop.5>

00002472 <_ZN7RH_RF694initEv>:
{
    _idleMode = idleMode;
}

bool RH_RF69::init()
{
    2472:	df 92       	push	r13
    2474:	ef 92       	push	r14
    2476:	ff 92       	push	r15
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
    2480:	00 d0       	rcall	.+0      	; 0x2482 <_ZN7RH_RF694initEv+0x10>
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	7c 01       	movw	r14, r24
    if (!RHSPIDriver::init())
    2488:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <_ZN11RHSPIDriver4initEv>
    248c:	d8 2e       	mov	r13, r24
    248e:	81 11       	cpse	r24, r1
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <_ZN7RH_RF694initEv+0x24>
	return false;
    2492:	d1 2c       	mov	r13, r1
    2494:	94 c0       	rjmp	.+296    	; 0x25be <_ZN7RH_RF694initEv+0x14c>

    // Determine the interrupt number that corresponds to the interruptPin
    int interruptNumber = digitalPinToInterrupt(_interruptPin);
    2496:	f7 01       	movw	r30, r14
    2498:	84 8d       	ldd	r24, Z+28	; 0x1c
    249a:	88 23       	and	r24, r24
    249c:	51 f0       	breq	.+20     	; 0x24b2 <_ZN7RH_RF694initEv+0x40>
    249e:	81 30       	cpi	r24, 0x01	; 1
    24a0:	51 f0       	breq	.+20     	; 0x24b6 <_ZN7RH_RF694initEv+0x44>
    24a2:	82 30       	cpi	r24, 0x02	; 2
    24a4:	51 f0       	breq	.+20     	; 0x24ba <_ZN7RH_RF694initEv+0x48>
    24a6:	83 30       	cpi	r24, 0x03	; 3
    24a8:	51 f0       	breq	.+20     	; 0x24be <_ZN7RH_RF694initEv+0x4c>
    24aa:	87 30       	cpi	r24, 0x07	; 7
    24ac:	91 f7       	brne	.-28     	; 0x2492 <_ZN7RH_RF694initEv+0x20>
    24ae:	14 e0       	ldi	r17, 0x04	; 4
    24b0:	07 c0       	rjmp	.+14     	; 0x24c0 <_ZN7RH_RF694initEv+0x4e>
    24b2:	12 e0       	ldi	r17, 0x02	; 2
    24b4:	05 c0       	rjmp	.+10     	; 0x24c0 <_ZN7RH_RF694initEv+0x4e>
    24b6:	13 e0       	ldi	r17, 0x03	; 3
    24b8:	03 c0       	rjmp	.+6      	; 0x24c0 <_ZN7RH_RF694initEv+0x4e>
    24ba:	11 e0       	ldi	r17, 0x01	; 1
    24bc:	01 c0       	rjmp	.+2      	; 0x24c0 <_ZN7RH_RF694initEv+0x4e>
    24be:	10 e0       	ldi	r17, 0x00	; 0
#ifdef RH_ATTACHINTERRUPT_TAKES_PIN_NUMBER
    interruptNumber = _interruptPin;
#endif

    // Tell the low level SPI interface we will use SPI within this interrupt
    spiUsingInterrupt(interruptNumber);
    24c0:	61 2f       	mov	r22, r17
    24c2:	c7 01       	movw	r24, r14
    24c4:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <_ZN11RHSPIDriver17spiUsingInterruptEh>

    // Get the device type and check it
    // This also tests whether we are really connected to a device
    // My test devices return 0x24
    _deviceType = spiRead(RH_RF69_REG_10_VERSION);
    24c8:	60 e1       	ldi	r22, 0x10	; 16
    24ca:	c7 01       	movw	r24, r14
    24cc:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <_ZN11RHSPIDriver7spiReadEh>
    24d0:	f7 01       	movw	r30, r14
    24d2:	87 8f       	std	Z+31, r24	; 0x1f
    if (_deviceType == 00 ||
    24d4:	81 50       	subi	r24, 0x01	; 1
    24d6:	8e 3f       	cpi	r24, 0xFE	; 254
    24d8:	e0 f6       	brcc	.-72     	; 0x2492 <_ZN7RH_RF694initEv+0x20>
	return false;

    // Add by Adrien van den Bossche <vandenbo@univ-tlse2.fr> for Teensy
    // ARM M4 requires the below. else pin interrupt doesn't work properly.
    // On all other platforms, its innocuous, belt and braces
    pinMode(_interruptPin, INPUT);
    24da:	60 e0       	ldi	r22, 0x00	; 0
    24dc:	f7 01       	movw	r30, r14
    24de:	84 8d       	ldd	r24, Z+28	; 0x1c
    24e0:	0e 94 65 0b 	call	0x16ca	; 0x16ca <pinMode>
    // Since there are a limited number of interrupt glue functions isr*() available,
    // we can only support a limited number of devices simultaneously
    // ON some devices, notably most Arduinos, the interrupt pin passed in is actuallt the
    // interrupt number. You have to figure out the interruptnumber-to-interruptpin mapping
    // yourself based on knwledge of what Arduino board you are running on.
    if (_myInterruptIndex == 0xff)
    24e4:	f7 01       	movw	r30, r14
    24e6:	85 8d       	ldd	r24, Z+29	; 0x1d
    24e8:	8f 3f       	cpi	r24, 0xFF	; 255
    24ea:	49 f4       	brne	.+18     	; 0x24fe <_ZN7RH_RF694initEv+0x8c>
    {
	// First run, no interrupt allocated yet
	if (_interruptCount <= RH_RF69_NUM_INTERRUPTS)
    24ec:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <_ZN7RH_RF6915_interruptCountE>
    24f0:	84 30       	cpi	r24, 0x04	; 4
    24f2:	78 f6       	brcc	.-98     	; 0x2492 <_ZN7RH_RF694initEv+0x20>
	    _myInterruptIndex = _interruptCount++;
    24f4:	91 e0       	ldi	r25, 0x01	; 1
    24f6:	98 0f       	add	r25, r24
    24f8:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZN7RH_RF6915_interruptCountE>
    24fc:	85 8f       	std	Z+29, r24	; 0x1d
	else
	    return false; // Too many devices, not enough interrupt vectors
    }
    _deviceForInterrupt[_myInterruptIndex] = this;
    24fe:	f7 01       	movw	r30, r14
    2500:	85 8d       	ldd	r24, Z+29	; 0x1d
    2502:	e8 2f       	mov	r30, r24
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	ee 0f       	add	r30, r30
    2508:	ff 1f       	adc	r31, r31
    250a:	e9 5d       	subi	r30, 0xD9	; 217
    250c:	fb 4f       	sbci	r31, 0xFB	; 251
    250e:	f1 82       	std	Z+1, r15	; 0x01
    2510:	e0 82       	st	Z, r14
    if (_myInterruptIndex == 0)
    2512:	81 11       	cpse	r24, r1
    2514:	05 c0       	rjmp	.+10     	; 0x2520 <_ZN7RH_RF694initEv+0xae>
	attachInterrupt(interruptNumber, isr0, RISING);
    2516:	43 e0       	ldi	r20, 0x03	; 3
    2518:	50 e0       	ldi	r21, 0x00	; 0
    251a:	68 e6       	ldi	r22, 0x68	; 104
    251c:	70 e1       	ldi	r23, 0x10	; 16
    251e:	0e c0       	rjmp	.+28     	; 0x253c <_ZN7RH_RF694initEv+0xca>
    else if (_myInterruptIndex == 1)
    2520:	81 30       	cpi	r24, 0x01	; 1
    2522:	29 f4       	brne	.+10     	; 0x252e <_ZN7RH_RF694initEv+0xbc>
	attachInterrupt(interruptNumber, isr1, RISING);
    2524:	43 e0       	ldi	r20, 0x03	; 3
    2526:	50 e0       	ldi	r21, 0x00	; 0
    2528:	61 e7       	ldi	r22, 0x71	; 113
    252a:	70 e1       	ldi	r23, 0x10	; 16
    252c:	07 c0       	rjmp	.+14     	; 0x253c <_ZN7RH_RF694initEv+0xca>
    else if (_myInterruptIndex == 2)
    252e:	82 30       	cpi	r24, 0x02	; 2
    2530:	09 f0       	breq	.+2      	; 0x2534 <_ZN7RH_RF694initEv+0xc2>
    2532:	af cf       	rjmp	.-162    	; 0x2492 <_ZN7RH_RF694initEv+0x20>
	attachInterrupt(interruptNumber, isr2, RISING);
    2534:	43 e0       	ldi	r20, 0x03	; 3
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	6a e7       	ldi	r22, 0x7A	; 122
    253a:	70 e1       	ldi	r23, 0x10	; 16
    253c:	81 2f       	mov	r24, r17
    253e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <attachInterrupt>
    else
	return false; // Too many devices, not enough interrupt vectors

    setModeIdle();
    2542:	c7 01       	movw	r24, r14
    2544:	0e 94 0e 10 	call	0x201c	; 0x201c <_ZN7RH_RF6911setModeIdleEv>
    // 2 CRC CCITT octets computed on the header, length and data (this in the modem config data)
    // 0 to 60 bytes data
    // RSSI Threshold -114dBm
    // We dont use the RH_RF69s address filtering: instead we prepend our own headers to the beginning
    // of the RH_RF69 payload
    spiWrite(RH_RF69_REG_3C_FIFOTHRESH, RH_RF69_FIFOTHRESH_TXSTARTCONDITION_NOTEMPTY | 0x0f); // thresh 15 is default
    2548:	4f e8       	ldi	r20, 0x8F	; 143
    254a:	6c e3       	ldi	r22, 0x3C	; 60
    254c:	c7 01       	movw	r24, r14
    254e:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    // SYNCCONFIG is default. SyncSize is set later by setSyncWords()
//    spiWrite(RH_RF69_REG_2E_SYNCCONFIG, RH_RF69_SYNCCONFIG_SYNCON); // auto, tolerance 0
    // PAYLOADLENGTH is default
//    spiWrite(RH_RF69_REG_38_PAYLOADLENGTH, RH_RF69_FIFO_SIZE); // max size only for RX
    // PACKETCONFIG 2 is default
    spiWrite(RH_RF69_REG_6F_TESTDAGC, RH_RF69_TESTDAGC_CONTINUOUSDAGC_IMPROVED_LOWBETAOFF);
    2552:	40 e3       	ldi	r20, 0x30	; 48
    2554:	6f e6       	ldi	r22, 0x6F	; 111
    2556:	c7 01       	movw	r24, r14
    2558:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    // If high power boost set previously, disable it
    spiWrite(RH_RF69_REG_5A_TESTPA1, RH_RF69_TESTPA1_NORMAL);
    255c:	45 e5       	ldi	r20, 0x55	; 85
    255e:	6a e5       	ldi	r22, 0x5A	; 90
    2560:	c7 01       	movw	r24, r14
    2562:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_NORMAL);
    2566:	40 e7       	ldi	r20, 0x70	; 112
    2568:	6c e5       	ldi	r22, 0x5C	; 92
    256a:	c7 01       	movw	r24, r14
    256c:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN11RHSPIDriver8spiWriteEhh>

    // The following can be changed later by the user if necessary.
    // Set up default configuration
    uint8_t syncwords[] = { 0x2d, 0xd4 };
    2570:	8d e2       	ldi	r24, 0x2D	; 45
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	84 ed       	ldi	r24, 0xD4	; 212
    2576:	8a 83       	std	Y+2, r24	; 0x02
    setSyncWords(syncwords, sizeof(syncwords)); // Same as RF22's
    2578:	42 e0       	ldi	r20, 0x02	; 2
    257a:	be 01       	movw	r22, r28
    257c:	6f 5f       	subi	r22, 0xFF	; 255
    257e:	7f 4f       	sbci	r23, 0xFF	; 255
    2580:	c7 01       	movw	r24, r14
    2582:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <_ZN7RH_RF6912setSyncWordsEPKhh>
    // Reasonably fast and reliable default speed and modulation
    setModemConfig(GFSK_Rb250Fd250);
    2586:	62 e1       	ldi	r22, 0x12	; 18
    2588:	c7 01       	movw	r24, r14
    258a:	0e 94 a8 11 	call	0x2350	; 0x2350 <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE>

    // 3 would be sufficient, but this is the same as RF22's
    setPreambleLength(4);
    258e:	64 e0       	ldi	r22, 0x04	; 4
    2590:	70 e0       	ldi	r23, 0x00	; 0
    2592:	c7 01       	movw	r24, r14
    2594:	0e 94 da 11 	call	0x23b4	; 0x23b4 <_ZN7RH_RF6917setPreambleLengthEj>
    // An innocuous ISM frequency, same as RF22's
    setFrequency(434.0);
    2598:	0d ec       	ldi	r16, 0xCD	; 205
    259a:	1c ec       	ldi	r17, 0xCC	; 204
    259c:	2c e4       	ldi	r18, 0x4C	; 76
    259e:	3d e3       	ldi	r19, 0x3D	; 61
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	50 e0       	ldi	r21, 0x00	; 0
    25a4:	69 ed       	ldi	r22, 0xD9	; 217
    25a6:	73 e4       	ldi	r23, 0x43	; 67
    25a8:	c7 01       	movw	r24, r14
    25aa:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <_ZN7RH_RF6912setFrequencyEff>
    25ae:	c7 01       	movw	r24, r14
    25b0:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <_ZN7RH_RF6916setEncryptionKeyEPh.part.4.constprop.5>
    // No encryption
    setEncryptionKey(NULL);
    // +13dBm, same as power-on default
    setTxPower(13);
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	6d e0       	ldi	r22, 0x0D	; 13
    25b8:	c7 01       	movw	r24, r14
    25ba:	0e 94 63 11 	call	0x22c6	; 0x22c6 <_ZN7RH_RF6910setTxPowerEab>

    return true;
}
    25be:	8d 2d       	mov	r24, r13
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	df 91       	pop	r29
    25c6:	cf 91       	pop	r28
    25c8:	1f 91       	pop	r17
    25ca:	0f 91       	pop	r16
    25cc:	ff 90       	pop	r15
    25ce:	ef 90       	pop	r14
    25d0:	df 90       	pop	r13
    25d2:	08 95       	ret

000025d4 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    25d4:	cf 93       	push	r28
  uint8_t sreg = SREG;
    25d6:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    25d8:	f8 94       	cli
  if (!initialized) {
    25da:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <_ZN8SPIClass11initializedE>
    25de:	81 11       	cpse	r24, r1
    25e0:	27 c0       	rjmp	.+78     	; 0x2630 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    25e2:	ec e4       	ldi	r30, 0x4C	; 76
    25e4:	f1 e0       	ldi	r31, 0x01	; 1
    25e6:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    25e8:	ed e2       	ldi	r30, 0x2D	; 45
    25ea:	f1 e0       	ldi	r31, 0x01	; 1
    25ec:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    25ee:	e8 2f       	mov	r30, r24
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	ee 0f       	add	r30, r30
    25f4:	ff 1f       	adc	r31, r31
    25f6:	e8 59       	subi	r30, 0x98	; 152
    25f8:	fe 4f       	sbci	r31, 0xFE	; 254
    25fa:	a5 91       	lpm	r26, Z+
    25fc:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    25fe:	ec 91       	ld	r30, X
    2600:	e9 23       	and	r30, r25
    2602:	21 f4       	brne	.+8      	; 0x260c <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    2604:	61 e0       	ldi	r22, 0x01	; 1
    2606:	81 e1       	ldi	r24, 0x11	; 17
    2608:	0e 94 a1 0b 	call	0x1742	; 0x1742 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    260c:	61 e0       	ldi	r22, 0x01	; 1
    260e:	81 e1       	ldi	r24, 0x11	; 17
    2610:	0e 94 65 0b 	call	0x16ca	; 0x16ca <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    2614:	8c b5       	in	r24, 0x2c	; 44
    2616:	80 61       	ori	r24, 0x10	; 16
    2618:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    261a:	8c b5       	in	r24, 0x2c	; 44
    261c:	80 64       	ori	r24, 0x40	; 64
    261e:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    2620:	61 e0       	ldi	r22, 0x01	; 1
    2622:	8f e0       	ldi	r24, 0x0F	; 15
    2624:	0e 94 65 0b 	call	0x16ca	; 0x16ca <pinMode>
    pinMode(MOSI, OUTPUT);
    2628:	61 e0       	ldi	r22, 0x01	; 1
    262a:	80 e1       	ldi	r24, 0x10	; 16
    262c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <pinMode>
  }
  initialized++; // reference count
    2630:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <_ZN8SPIClass11initializedE>
    2634:	8f 5f       	subi	r24, 0xFF	; 255
    2636:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    263a:	cf bf       	out	0x3f, r28	; 63
}
    263c:	cf 91       	pop	r28
    263e:	08 95       	ret

00002640 <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  uint8_t sreg = SREG;
    2640:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    2642:	f8 94       	cli
  // Decrease the reference counter
  if (initialized)
    2644:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <_ZN8SPIClass11initializedE>
    2648:	88 23       	and	r24, r24
    264a:	19 f0       	breq	.+6      	; 0x2652 <_ZN8SPIClass3endEv+0x12>
    initialized--;
    264c:	81 50       	subi	r24, 0x01	; 1
    264e:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <_ZN8SPIClass11initializedE>
  // If there are no more references disable SPI
  if (!initialized) {
    2652:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <_ZN8SPIClass11initializedE>
    2656:	81 11       	cpse	r24, r1
    2658:	05 c0       	rjmp	.+10     	; 0x2664 <_ZN8SPIClass3endEv+0x24>
    SPCR &= ~_BV(SPE);
    265a:	8c b5       	in	r24, 0x2c	; 44
    265c:	8f 7b       	andi	r24, 0xBF	; 191
    265e:	8c bd       	out	0x2c, r24	; 44
    interruptMode = 0;
    2660:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <_ZN8SPIClass13interruptModeE>
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
    2664:	9f bf       	out	0x3f, r25	; 63
    2666:	08 95       	ret

00002668 <__cxa_pure_virtual>:
    2668:	0e 94 b0 1b 	call	0x3760	; 0x3760 <abort>

0000266c <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    266c:	cf 93       	push	r28
    266e:	df 93       	push	r29
    2670:	1f 92       	push	r1
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	69 83       	std	Y+1, r22	; 0x01
    2678:	dc 01       	movw	r26, r24
    267a:	ed 91       	ld	r30, X+
    267c:	fc 91       	ld	r31, X
    267e:	02 80       	ldd	r0, Z+2	; 0x02
    2680:	f3 81       	ldd	r31, Z+3	; 0x03
    2682:	e0 2d       	mov	r30, r0
    2684:	41 e0       	ldi	r20, 0x01	; 1
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	be 01       	movw	r22, r28
    268a:	6f 5f       	subi	r22, 0xFF	; 255
    268c:	7f 4f       	sbci	r23, 0xFF	; 255
    268e:	09 95       	icall
    2690:	0f 90       	pop	r0
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	08 95       	ret

00002698 <_ZN7Serial_4peekEv>:
    2698:	cf 93       	push	r28
    269a:	df 93       	push	r29
    269c:	ec 01       	movw	r28, r24
    269e:	8c 85       	ldd	r24, Y+12	; 0x0c
    26a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    26a2:	97 ff       	sbrs	r25, 7
    26a4:	05 c0       	rjmp	.+10     	; 0x26b0 <_ZN7Serial_4peekEv+0x18>
    26a6:	82 e0       	ldi	r24, 0x02	; 2
    26a8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_Z8USB_Recvh>
    26ac:	9d 87       	std	Y+13, r25	; 0x0d
    26ae:	8c 87       	std	Y+12, r24	; 0x0c
    26b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    26b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	08 95       	ret

000026ba <_ZN7Serial_17availableForWriteEv>:
    26ba:	83 e0       	ldi	r24, 0x03	; 3
    26bc:	0e 94 ff 06 	call	0xdfe	; 0xdfe <_Z13USB_SendSpaceh>
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	08 95       	ret

000026c4 <_ZN7Serial_5flushEv>:
    26c4:	83 e0       	ldi	r24, 0x03	; 3
    26c6:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <_Z9USB_Flushh>

000026ca <_ZN7Serial_9availableEv>:
    26ca:	fc 01       	movw	r30, r24
    26cc:	84 85       	ldd	r24, Z+12	; 0x0c
    26ce:	95 85       	ldd	r25, Z+13	; 0x0d
    26d0:	97 fd       	sbrc	r25, 7
    26d2:	06 c0       	rjmp	.+12     	; 0x26e0 <_ZN7Serial_9availableEv+0x16>
    26d4:	82 e0       	ldi	r24, 0x02	; 2
    26d6:	0e 94 93 06 	call	0xd26	; 0xd26 <_Z13USB_Availableh>
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	01 96       	adiw	r24, 0x01	; 1
    26de:	08 95       	ret
    26e0:	82 e0       	ldi	r24, 0x02	; 2
    26e2:	0e 94 93 06 	call	0xd26	; 0xd26 <_Z13USB_Availableh>
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	08 95       	ret

000026ea <_ZN7Serial_4readEv>:
    26ea:	fc 01       	movw	r30, r24
    26ec:	84 85       	ldd	r24, Z+12	; 0x0c
    26ee:	95 85       	ldd	r25, Z+13	; 0x0d
    26f0:	97 fd       	sbrc	r25, 7
    26f2:	05 c0       	rjmp	.+10     	; 0x26fe <_ZN7Serial_4readEv+0x14>
    26f4:	2f ef       	ldi	r18, 0xFF	; 255
    26f6:	3f ef       	ldi	r19, 0xFF	; 255
    26f8:	35 87       	std	Z+13, r19	; 0x0d
    26fa:	24 87       	std	Z+12, r18	; 0x0c
    26fc:	08 95       	ret
    26fe:	82 e0       	ldi	r24, 0x02	; 2
    2700:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <_Z8USB_Recvh>

00002704 <_ZN7Serial_5writeEPKhj>:
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	ec 01       	movw	r28, r24
    270a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_ZL12_usbLineInfo+0x7>
    270e:	88 23       	and	r24, r24
    2710:	31 f0       	breq	.+12     	; 0x271e <_ZN7Serial_5writeEPKhj+0x1a>
    2712:	83 e0       	ldi	r24, 0x03	; 3
    2714:	0e 94 19 07 	call	0xe32	; 0xe32 <_Z8USB_SendhPKvi>
    2718:	18 16       	cp	r1, r24
    271a:	19 06       	cpc	r1, r25
    271c:	34 f0       	brlt	.+12     	; 0x272a <_ZN7Serial_5writeEPKhj+0x26>
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9b 83       	std	Y+3, r25	; 0x03
    2724:	8a 83       	std	Y+2, r24	; 0x02
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	df 91       	pop	r29
    272c:	cf 91       	pop	r28
    272e:	08 95       	ret

00002730 <_Z16isLUFAbootloaderv>:
    2730:	ee ef       	ldi	r30, 0xFE	; 254
    2732:	ff e7       	ldi	r31, 0x7F	; 127
    2734:	25 91       	lpm	r18, Z+
    2736:	34 91       	lpm	r19, Z
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	2b 3f       	cpi	r18, 0xFB	; 251
    273c:	3c 4d       	sbci	r19, 0xDC	; 220
    273e:	09 f0       	breq	.+2      	; 0x2742 <_Z16isLUFAbootloaderv+0x12>
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	08 95       	ret

00002744 <_Z16CDC_GetInterfacePh>:
    2744:	fc 01       	movw	r30, r24
    2746:	90 81       	ld	r25, Z
    2748:	9e 5f       	subi	r25, 0xFE	; 254
    274a:	90 83       	st	Z, r25
    274c:	42 e4       	ldi	r20, 0x42	; 66
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	6e e4       	ldi	r22, 0x4E	; 78
    2752:	72 e0       	ldi	r23, 0x02	; 2
    2754:	80 e8       	ldi	r24, 0x80	; 128
    2756:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <_Z15USB_SendControlhPKvi>

0000275a <_Z9CDC_SetupR8USBSetup>:
    275a:	fc 01       	movw	r30, r24
    275c:	81 81       	ldd	r24, Z+1	; 0x01
    275e:	90 81       	ld	r25, Z
    2760:	91 3a       	cpi	r25, 0xA1	; 161
    2762:	59 f4       	brne	.+22     	; 0x277a <_Z9CDC_SetupR8USBSetup+0x20>
    2764:	81 32       	cpi	r24, 0x21	; 33
    2766:	09 f0       	breq	.+2      	; 0x276a <_Z9CDC_SetupR8USBSetup+0x10>
    2768:	65 c0       	rjmp	.+202    	; 0x2834 <_Z9CDC_SetupR8USBSetup+0xda>
    276a:	47 e0       	ldi	r20, 0x07	; 7
    276c:	50 e0       	ldi	r21, 0x00	; 0
    276e:	65 e1       	ldi	r22, 0x15	; 21
    2770:	71 e0       	ldi	r23, 0x01	; 1
    2772:	80 e0       	ldi	r24, 0x00	; 0
    2774:	0e 94 c9 07 	call	0xf92	; 0xf92 <_Z15USB_SendControlhPKvi>
    2778:	5b c0       	rjmp	.+182    	; 0x2830 <_Z9CDC_SetupR8USBSetup+0xd6>
    277a:	91 32       	cpi	r25, 0x21	; 33
    277c:	09 f0       	breq	.+2      	; 0x2780 <_Z9CDC_SetupR8USBSetup+0x26>
    277e:	5a c0       	rjmp	.+180    	; 0x2834 <_Z9CDC_SetupR8USBSetup+0xda>
    2780:	83 32       	cpi	r24, 0x23	; 35
    2782:	69 f4       	brne	.+26     	; 0x279e <_Z9CDC_SetupR8USBSetup+0x44>
    2784:	82 81       	ldd	r24, Z+2	; 0x02
    2786:	93 81       	ldd	r25, Z+3	; 0x03
    2788:	a0 e0       	ldi	r26, 0x00	; 0
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_ZL10breakValue>
    2790:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_ZL10breakValue+0x1>
    2794:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <_ZL10breakValue+0x2>
    2798:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <_ZL10breakValue+0x3>
    279c:	49 c0       	rjmp	.+146    	; 0x2830 <_Z9CDC_SetupR8USBSetup+0xd6>
    279e:	80 32       	cpi	r24, 0x20	; 32
    27a0:	39 f4       	brne	.+14     	; 0x27b0 <_Z9CDC_SetupR8USBSetup+0x56>
    27a2:	67 e0       	ldi	r22, 0x07	; 7
    27a4:	70 e0       	ldi	r23, 0x00	; 0
    27a6:	85 e1       	ldi	r24, 0x15	; 21
    27a8:	91 e0       	ldi	r25, 0x01	; 1
    27aa:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <_Z15USB_RecvControlPvi>
    27ae:	40 c0       	rjmp	.+128    	; 0x2830 <_Z9CDC_SetupR8USBSetup+0xd6>
    27b0:	82 32       	cpi	r24, 0x22	; 34
    27b2:	09 f0       	breq	.+2      	; 0x27b6 <_Z9CDC_SetupR8USBSetup+0x5c>
    27b4:	3d c0       	rjmp	.+122    	; 0x2830 <_Z9CDC_SetupR8USBSetup+0xd6>
    27b6:	82 81       	ldd	r24, Z+2	; 0x02
    27b8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <_ZL12_usbLineInfo+0x7>
    27bc:	0e 94 98 13 	call	0x2730	; 0x2730 <_Z16isLUFAbootloaderv>
    27c0:	88 23       	and	r24, r24
    27c2:	19 f0       	breq	.+6      	; 0x27ca <_Z9CDC_SetupR8USBSetup+0x70>
    27c4:	ee ef       	ldi	r30, 0xFE	; 254
    27c6:	fa e0       	ldi	r31, 0x0A	; 10
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <_Z9CDC_SetupR8USBSetup+0x74>
    27ca:	e0 e0       	ldi	r30, 0x00	; 0
    27cc:	f8 e0       	ldi	r31, 0x08	; 8
    27ce:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_ZL12_usbLineInfo>
    27d2:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <_ZL12_usbLineInfo+0x1>
    27d6:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <_ZL12_usbLineInfo+0x2>
    27da:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <_ZL12_usbLineInfo+0x3>
    27de:	80 3b       	cpi	r24, 0xB0	; 176
    27e0:	94 40       	sbci	r25, 0x04	; 4
    27e2:	a1 05       	cpc	r26, r1
    27e4:	b1 05       	cpc	r27, r1
    27e6:	41 f5       	brne	.+80     	; 0x2838 <_Z9CDC_SetupR8USBSetup+0xde>
    27e8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <_ZL12_usbLineInfo+0x7>
    27ec:	80 fd       	sbrc	r24, 0
    27ee:	24 c0       	rjmp	.+72     	; 0x2838 <_Z9CDC_SetupR8USBSetup+0xde>
    27f0:	ee 3f       	cpi	r30, 0xFE	; 254
    27f2:	8a e0       	ldi	r24, 0x0A	; 10
    27f4:	f8 07       	cpc	r31, r24
    27f6:	51 f0       	breq	.+20     	; 0x280c <_Z9CDC_SetupR8USBSetup+0xb2>
    27f8:	80 81       	ld	r24, Z
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	87 37       	cpi	r24, 0x77	; 119
    27fe:	27 e7       	ldi	r18, 0x77	; 119
    2800:	92 07       	cpc	r25, r18
    2802:	21 f0       	breq	.+8      	; 0x280c <_Z9CDC_SetupR8USBSetup+0xb2>
    2804:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x66d>
    2808:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x66c>
    280c:	87 e7       	ldi	r24, 0x77	; 119
    280e:	97 e7       	ldi	r25, 0x77	; 119
    2810:	91 83       	std	Z+1, r25	; 0x01
    2812:	80 83       	st	Z, r24
    2814:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2818:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <_ZL11wdtcsr_save>
    281c:	9b e0       	ldi	r25, 0x0B	; 11
    281e:	88 e1       	ldi	r24, 0x18	; 24
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	a8 95       	wdr
    2826:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	08 95       	ret
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	08 95       	ret
    2838:	80 81       	ld	r24, Z
    283a:	91 81       	ldd	r25, Z+1	; 0x01
    283c:	87 37       	cpi	r24, 0x77	; 119
    283e:	97 47       	sbci	r25, 0x77	; 119
    2840:	b9 f7       	brne	.-18     	; 0x2830 <_Z9CDC_SetupR8USBSetup+0xd6>
    2842:	a8 95       	wdr
    2844:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2848:	88 61       	ori	r24, 0x18	; 24
    284a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    284e:	80 91 81 04 	lds	r24, 0x0481	; 0x800481 <_ZL11wdtcsr_save>
    2852:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2856:	ee 3f       	cpi	r30, 0xFE	; 254
    2858:	8a e0       	ldi	r24, 0x0A	; 10
    285a:	f8 07       	cpc	r31, r24
    285c:	39 f0       	breq	.+14     	; 0x286c <_Z9CDC_SetupR8USBSetup+0x112>
    285e:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x66c>
    2862:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x66d>
    2866:	91 83       	std	Z+1, r25	; 0x01
    2868:	80 83       	st	Z, r24
    286a:	e2 cf       	rjmp	.-60     	; 0x2830 <_Z9CDC_SetupR8USBSetup+0xd6>
    286c:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x66d>
    2870:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x66c>
    2874:	dd cf       	rjmp	.-70     	; 0x2830 <_Z9CDC_SetupR8USBSetup+0xd6>

00002876 <_GLOBAL__sub_I__cdcInterface>:
    2876:	e1 e3       	ldi	r30, 0x31	; 49
    2878:	f4 e0       	ldi	r31, 0x04	; 4
    287a:	13 82       	std	Z+3, r1	; 0x03
    287c:	12 82       	std	Z+2, r1	; 0x02
    287e:	88 ee       	ldi	r24, 0xE8	; 232
    2880:	93 e0       	ldi	r25, 0x03	; 3
    2882:	a0 e0       	ldi	r26, 0x00	; 0
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	84 83       	std	Z+4, r24	; 0x04
    2888:	95 83       	std	Z+5, r25	; 0x05
    288a:	a6 83       	std	Z+6, r26	; 0x06
    288c:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    288e:	82 ea       	ldi	r24, 0xA2	; 162
    2890:	92 e0       	ldi	r25, 0x02	; 2
    2892:	91 83       	std	Z+1, r25	; 0x01
    2894:	80 83       	st	Z, r24
    2896:	8f ef       	ldi	r24, 0xFF	; 255
    2898:	9f ef       	ldi	r25, 0xFF	; 255
    289a:	95 87       	std	Z+13, r25	; 0x0d
    289c:	84 87       	std	Z+12, r24	; 0x0c
    289e:	08 95       	ret

000028a0 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    28a0:	08 95       	ret

000028a2 <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    28a2:	ef 92       	push	r14
    28a4:	ff 92       	push	r15
    28a6:	0f 93       	push	r16
    28a8:	1f 93       	push	r17
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	7b 01       	movw	r14, r22
    28b0:	fc 01       	movw	r30, r24
    28b2:	c2 81       	ldd	r28, Z+2	; 0x02
    28b4:	d3 81       	ldd	r29, Z+3	; 0x03
    28b6:	00 e0       	ldi	r16, 0x00	; 0
    28b8:	10 e0       	ldi	r17, 0x00	; 0
    28ba:	20 97       	sbiw	r28, 0x00	; 0
    28bc:	81 f0       	breq	.+32     	; 0x28de <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    28be:	e8 81       	ld	r30, Y
    28c0:	f9 81       	ldd	r31, Y+1	; 0x01
    28c2:	02 80       	ldd	r0, Z+2	; 0x02
    28c4:	f3 81       	ldd	r31, Z+3	; 0x03
    28c6:	e0 2d       	mov	r30, r0
    28c8:	b7 01       	movw	r22, r14
    28ca:	ce 01       	movw	r24, r28
    28cc:	09 95       	icall
    28ce:	97 fd       	sbrc	r25, 7
    28d0:	08 c0       	rjmp	.+16     	; 0x28e2 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    28d2:	08 0f       	add	r16, r24
    28d4:	19 1f       	adc	r17, r25
    28d6:	08 84       	ldd	r0, Y+8	; 0x08
    28d8:	d9 85       	ldd	r29, Y+9	; 0x09
    28da:	c0 2d       	mov	r28, r0
    28dc:	ee cf       	rjmp	.-36     	; 0x28ba <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    28de:	c8 01       	movw	r24, r16
    28e0:	02 c0       	rjmp	.+4      	; 0x28e6 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    28e2:	8f ef       	ldi	r24, 0xFF	; 255
    28e4:	9f ef       	ldi	r25, 0xFF	; 255
    28e6:	df 91       	pop	r29
    28e8:	cf 91       	pop	r28
    28ea:	1f 91       	pop	r17
    28ec:	0f 91       	pop	r16
    28ee:	ff 90       	pop	r15
    28f0:	ef 90       	pop	r14
    28f2:	08 95       	ret

000028f4 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    28f4:	0f 93       	push	r16
    28f6:	1f 93       	push	r17
    28f8:	cf 93       	push	r28
    28fa:	df 93       	push	r29
    28fc:	8b 01       	movw	r16, r22
    28fe:	fc 01       	movw	r30, r24
    2900:	c2 81       	ldd	r28, Z+2	; 0x02
    2902:	d3 81       	ldd	r29, Z+3	; 0x03
    2904:	20 97       	sbiw	r28, 0x00	; 0
    2906:	71 f0       	breq	.+28     	; 0x2924 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    2908:	e8 81       	ld	r30, Y
    290a:	f9 81       	ldd	r31, Y+1	; 0x01
    290c:	04 80       	ldd	r0, Z+4	; 0x04
    290e:	f5 81       	ldd	r31, Z+5	; 0x05
    2910:	e0 2d       	mov	r30, r0
    2912:	b8 01       	movw	r22, r16
    2914:	ce 01       	movw	r24, r28
    2916:	09 95       	icall
    2918:	00 97       	sbiw	r24, 0x00	; 0
    291a:	31 f4       	brne	.+12     	; 0x2928 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    291c:	08 84       	ldd	r0, Y+8	; 0x08
    291e:	d9 85       	ldd	r29, Y+9	; 0x09
    2920:	c0 2d       	mov	r28, r0
    2922:	f0 cf       	rjmp	.-32     	; 0x2904 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	df 91       	pop	r29
    292a:	cf 91       	pop	r28
    292c:	1f 91       	pop	r17
    292e:	0f 91       	pop	r16
    2930:	08 95       	ret

00002932 <_ZN13PluggableUSB_12getShortNameEPc>:
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	8b 01       	movw	r16, r22
    293c:	fc 01       	movw	r30, r24
    293e:	c2 81       	ldd	r28, Z+2	; 0x02
    2940:	d3 81       	ldd	r29, Z+3	; 0x03
    2942:	20 97       	sbiw	r28, 0x00	; 0
    2944:	71 f0       	breq	.+28     	; 0x2962 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    2946:	e8 81       	ld	r30, Y
    2948:	f9 81       	ldd	r31, Y+1	; 0x01
    294a:	06 80       	ldd	r0, Z+6	; 0x06
    294c:	f7 81       	ldd	r31, Z+7	; 0x07
    294e:	e0 2d       	mov	r30, r0
    2950:	b8 01       	movw	r22, r16
    2952:	ce 01       	movw	r24, r28
    2954:	09 95       	icall
    2956:	08 0f       	add	r16, r24
    2958:	11 1d       	adc	r17, r1
    295a:	08 84       	ldd	r0, Y+8	; 0x08
    295c:	d9 85       	ldd	r29, Y+9	; 0x09
    295e:	c0 2d       	mov	r28, r0
    2960:	f0 cf       	rjmp	.-32     	; 0x2942 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    2962:	f8 01       	movw	r30, r16
    2964:	10 82       	st	Z, r1
    2966:	df 91       	pop	r29
    2968:	cf 91       	pop	r28
    296a:	1f 91       	pop	r17
    296c:	0f 91       	pop	r16
    296e:	08 95       	ret

00002970 <_ZN13PluggableUSB_5setupER8USBSetup>:
    2970:	0f 93       	push	r16
    2972:	1f 93       	push	r17
    2974:	cf 93       	push	r28
    2976:	df 93       	push	r29
    2978:	8b 01       	movw	r16, r22
    297a:	fc 01       	movw	r30, r24
    297c:	c2 81       	ldd	r28, Z+2	; 0x02
    297e:	d3 81       	ldd	r29, Z+3	; 0x03
    2980:	20 97       	sbiw	r28, 0x00	; 0
    2982:	71 f0       	breq	.+28     	; 0x29a0 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    2984:	e8 81       	ld	r30, Y
    2986:	f9 81       	ldd	r31, Y+1	; 0x01
    2988:	01 90       	ld	r0, Z+
    298a:	f0 81       	ld	r31, Z
    298c:	e0 2d       	mov	r30, r0
    298e:	b8 01       	movw	r22, r16
    2990:	ce 01       	movw	r24, r28
    2992:	09 95       	icall
    2994:	81 11       	cpse	r24, r1
    2996:	05 c0       	rjmp	.+10     	; 0x29a2 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    2998:	08 84       	ldd	r0, Y+8	; 0x08
    299a:	d9 85       	ldd	r29, Y+9	; 0x09
    299c:	c0 2d       	mov	r28, r0
    299e:	f0 cf       	rjmp	.-32     	; 0x2980 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	1f 91       	pop	r17
    29a8:	0f 91       	pop	r16
    29aa:	08 95       	ret

000029ac <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    29ac:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <_ZGVZ12PluggableUSBvE3obj>
    29b0:	81 11       	cpse	r24, r1
    29b2:	0d c0       	rjmp	.+26     	; 0x29ce <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    29b4:	82 e0       	ldi	r24, 0x02	; 2
    29b6:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <_ZZ12PluggableUSBvE3obj>
    29ba:	84 e0       	ldi	r24, 0x04	; 4
    29bc:	80 93 83 04 	sts	0x0483, r24	; 0x800483 <_ZZ12PluggableUSBvE3obj+0x1>
    29c0:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <_ZZ12PluggableUSBvE3obj+0x3>
    29c4:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    29ce:	82 e8       	ldi	r24, 0x82	; 130
    29d0:	94 e0       	ldi	r25, 0x04	; 4
    29d2:	08 95       	ret

000029d4 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    29d4:	08 95       	ret

000029d6 <attachInterrupt>:
    29d6:	85 30       	cpi	r24, 0x05	; 5
    29d8:	08 f0       	brcs	.+2      	; 0x29dc <attachInterrupt+0x6>
    29da:	4c c0       	rjmp	.+152    	; 0x2a74 <attachInterrupt+0x9e>
    29dc:	e8 2f       	mov	r30, r24
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	ee 0f       	add	r30, r30
    29e2:	ff 1f       	adc	r31, r31
    29e4:	e3 5e       	subi	r30, 0xE3	; 227
    29e6:	fe 4f       	sbci	r31, 0xFE	; 254
    29e8:	71 83       	std	Z+1, r23	; 0x01
    29ea:	60 83       	st	Z, r22
    29ec:	82 30       	cpi	r24, 0x02	; 2
    29ee:	e1 f0       	breq	.+56     	; 0x2a28 <attachInterrupt+0x52>
    29f0:	18 f4       	brcc	.+6      	; 0x29f8 <attachInterrupt+0x22>
    29f2:	81 30       	cpi	r24, 0x01	; 1
    29f4:	69 f0       	breq	.+26     	; 0x2a10 <attachInterrupt+0x3a>
    29f6:	04 c0       	rjmp	.+8      	; 0x2a00 <attachInterrupt+0x2a>
    29f8:	83 30       	cpi	r24, 0x03	; 3
    29fa:	19 f1       	breq	.+70     	; 0x2a42 <attachInterrupt+0x6c>
    29fc:	84 30       	cpi	r24, 0x04	; 4
    29fe:	71 f1       	breq	.+92     	; 0x2a5c <attachInterrupt+0x86>
    2a00:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2a04:	8c 7f       	andi	r24, 0xFC	; 252
    2a06:	48 2b       	or	r20, r24
    2a08:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2a0c:	e8 9a       	sbi	0x1d, 0	; 29
    2a0e:	08 95       	ret
    2a10:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2a14:	83 7f       	andi	r24, 0xF3	; 243
    2a16:	44 0f       	add	r20, r20
    2a18:	55 1f       	adc	r21, r21
    2a1a:	44 0f       	add	r20, r20
    2a1c:	55 1f       	adc	r21, r21
    2a1e:	48 2b       	or	r20, r24
    2a20:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2a24:	e9 9a       	sbi	0x1d, 1	; 29
    2a26:	08 95       	ret
    2a28:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2a2c:	8f 7c       	andi	r24, 0xCF	; 207
    2a2e:	34 e0       	ldi	r19, 0x04	; 4
    2a30:	44 0f       	add	r20, r20
    2a32:	55 1f       	adc	r21, r21
    2a34:	3a 95       	dec	r19
    2a36:	e1 f7       	brne	.-8      	; 0x2a30 <attachInterrupt+0x5a>
    2a38:	48 2b       	or	r20, r24
    2a3a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2a3e:	ea 9a       	sbi	0x1d, 2	; 29
    2a40:	08 95       	ret
    2a42:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2a46:	8f 73       	andi	r24, 0x3F	; 63
    2a48:	26 e0       	ldi	r18, 0x06	; 6
    2a4a:	44 0f       	add	r20, r20
    2a4c:	55 1f       	adc	r21, r21
    2a4e:	2a 95       	dec	r18
    2a50:	e1 f7       	brne	.-8      	; 0x2a4a <attachInterrupt+0x74>
    2a52:	48 2b       	or	r20, r24
    2a54:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2a58:	eb 9a       	sbi	0x1d, 3	; 29
    2a5a:	08 95       	ret
    2a5c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f806a>
    2a60:	8f 7c       	andi	r24, 0xCF	; 207
    2a62:	94 e0       	ldi	r25, 0x04	; 4
    2a64:	44 0f       	add	r20, r20
    2a66:	55 1f       	adc	r21, r21
    2a68:	9a 95       	dec	r25
    2a6a:	e1 f7       	brne	.-8      	; 0x2a64 <attachInterrupt+0x8e>
    2a6c:	48 2b       	or	r20, r24
    2a6e:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f806a>
    2a72:	ee 9a       	sbi	0x1d, 6	; 29
    2a74:	08 95       	ret

00002a76 <__vector_1>:
    intFunc[interrupt](); \
  }

#if defined(__AVR_ATmega32U4__)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    2a76:	1f 92       	push	r1
    2a78:	0f 92       	push	r0
    2a7a:	0f b6       	in	r0, 0x3f	; 63
    2a7c:	0f 92       	push	r0
    2a7e:	11 24       	eor	r1, r1
    2a80:	2f 93       	push	r18
    2a82:	3f 93       	push	r19
    2a84:	4f 93       	push	r20
    2a86:	5f 93       	push	r21
    2a88:	6f 93       	push	r22
    2a8a:	7f 93       	push	r23
    2a8c:	8f 93       	push	r24
    2a8e:	9f 93       	push	r25
    2a90:	af 93       	push	r26
    2a92:	bf 93       	push	r27
    2a94:	ef 93       	push	r30
    2a96:	ff 93       	push	r31
    2a98:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <intFunc>
    2a9c:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <intFunc+0x1>
    2aa0:	09 95       	icall
    2aa2:	ff 91       	pop	r31
    2aa4:	ef 91       	pop	r30
    2aa6:	bf 91       	pop	r27
    2aa8:	af 91       	pop	r26
    2aaa:	9f 91       	pop	r25
    2aac:	8f 91       	pop	r24
    2aae:	7f 91       	pop	r23
    2ab0:	6f 91       	pop	r22
    2ab2:	5f 91       	pop	r21
    2ab4:	4f 91       	pop	r20
    2ab6:	3f 91       	pop	r19
    2ab8:	2f 91       	pop	r18
    2aba:	0f 90       	pop	r0
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	0f 90       	pop	r0
    2ac0:	1f 90       	pop	r1
    2ac2:	18 95       	reti

00002ac4 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    2ac4:	1f 92       	push	r1
    2ac6:	0f 92       	push	r0
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	0f 92       	push	r0
    2acc:	11 24       	eor	r1, r1
    2ace:	2f 93       	push	r18
    2ad0:	3f 93       	push	r19
    2ad2:	4f 93       	push	r20
    2ad4:	5f 93       	push	r21
    2ad6:	6f 93       	push	r22
    2ad8:	7f 93       	push	r23
    2ada:	8f 93       	push	r24
    2adc:	9f 93       	push	r25
    2ade:	af 93       	push	r26
    2ae0:	bf 93       	push	r27
    2ae2:	ef 93       	push	r30
    2ae4:	ff 93       	push	r31
    2ae6:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <intFunc+0x2>
    2aea:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <intFunc+0x3>
    2aee:	09 95       	icall
    2af0:	ff 91       	pop	r31
    2af2:	ef 91       	pop	r30
    2af4:	bf 91       	pop	r27
    2af6:	af 91       	pop	r26
    2af8:	9f 91       	pop	r25
    2afa:	8f 91       	pop	r24
    2afc:	7f 91       	pop	r23
    2afe:	6f 91       	pop	r22
    2b00:	5f 91       	pop	r21
    2b02:	4f 91       	pop	r20
    2b04:	3f 91       	pop	r19
    2b06:	2f 91       	pop	r18
    2b08:	0f 90       	pop	r0
    2b0a:	0f be       	out	0x3f, r0	; 63
    2b0c:	0f 90       	pop	r0
    2b0e:	1f 90       	pop	r1
    2b10:	18 95       	reti

00002b12 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
    2b12:	1f 92       	push	r1
    2b14:	0f 92       	push	r0
    2b16:	0f b6       	in	r0, 0x3f	; 63
    2b18:	0f 92       	push	r0
    2b1a:	11 24       	eor	r1, r1
    2b1c:	2f 93       	push	r18
    2b1e:	3f 93       	push	r19
    2b20:	4f 93       	push	r20
    2b22:	5f 93       	push	r21
    2b24:	6f 93       	push	r22
    2b26:	7f 93       	push	r23
    2b28:	8f 93       	push	r24
    2b2a:	9f 93       	push	r25
    2b2c:	af 93       	push	r26
    2b2e:	bf 93       	push	r27
    2b30:	ef 93       	push	r30
    2b32:	ff 93       	push	r31
    2b34:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <intFunc+0x4>
    2b38:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <intFunc+0x5>
    2b3c:	09 95       	icall
    2b3e:	ff 91       	pop	r31
    2b40:	ef 91       	pop	r30
    2b42:	bf 91       	pop	r27
    2b44:	af 91       	pop	r26
    2b46:	9f 91       	pop	r25
    2b48:	8f 91       	pop	r24
    2b4a:	7f 91       	pop	r23
    2b4c:	6f 91       	pop	r22
    2b4e:	5f 91       	pop	r21
    2b50:	4f 91       	pop	r20
    2b52:	3f 91       	pop	r19
    2b54:	2f 91       	pop	r18
    2b56:	0f 90       	pop	r0
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	0f 90       	pop	r0
    2b5c:	1f 90       	pop	r1
    2b5e:	18 95       	reti

00002b60 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
    2b60:	1f 92       	push	r1
    2b62:	0f 92       	push	r0
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	0f 92       	push	r0
    2b68:	11 24       	eor	r1, r1
    2b6a:	2f 93       	push	r18
    2b6c:	3f 93       	push	r19
    2b6e:	4f 93       	push	r20
    2b70:	5f 93       	push	r21
    2b72:	6f 93       	push	r22
    2b74:	7f 93       	push	r23
    2b76:	8f 93       	push	r24
    2b78:	9f 93       	push	r25
    2b7a:	af 93       	push	r26
    2b7c:	bf 93       	push	r27
    2b7e:	ef 93       	push	r30
    2b80:	ff 93       	push	r31
    2b82:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <intFunc+0x6>
    2b86:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <intFunc+0x7>
    2b8a:	09 95       	icall
    2b8c:	ff 91       	pop	r31
    2b8e:	ef 91       	pop	r30
    2b90:	bf 91       	pop	r27
    2b92:	af 91       	pop	r26
    2b94:	9f 91       	pop	r25
    2b96:	8f 91       	pop	r24
    2b98:	7f 91       	pop	r23
    2b9a:	6f 91       	pop	r22
    2b9c:	5f 91       	pop	r21
    2b9e:	4f 91       	pop	r20
    2ba0:	3f 91       	pop	r19
    2ba2:	2f 91       	pop	r18
    2ba4:	0f 90       	pop	r0
    2ba6:	0f be       	out	0x3f, r0	; 63
    2ba8:	0f 90       	pop	r0
    2baa:	1f 90       	pop	r1
    2bac:	18 95       	reti

00002bae <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)
    2bae:	1f 92       	push	r1
    2bb0:	0f 92       	push	r0
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	0f 92       	push	r0
    2bb6:	11 24       	eor	r1, r1
    2bb8:	2f 93       	push	r18
    2bba:	3f 93       	push	r19
    2bbc:	4f 93       	push	r20
    2bbe:	5f 93       	push	r21
    2bc0:	6f 93       	push	r22
    2bc2:	7f 93       	push	r23
    2bc4:	8f 93       	push	r24
    2bc6:	9f 93       	push	r25
    2bc8:	af 93       	push	r26
    2bca:	bf 93       	push	r27
    2bcc:	ef 93       	push	r30
    2bce:	ff 93       	push	r31
    2bd0:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <intFunc+0x8>
    2bd4:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <intFunc+0x9>
    2bd8:	09 95       	icall
    2bda:	ff 91       	pop	r31
    2bdc:	ef 91       	pop	r30
    2bde:	bf 91       	pop	r27
    2be0:	af 91       	pop	r26
    2be2:	9f 91       	pop	r25
    2be4:	8f 91       	pop	r24
    2be6:	7f 91       	pop	r23
    2be8:	6f 91       	pop	r22
    2bea:	5f 91       	pop	r21
    2bec:	4f 91       	pop	r20
    2bee:	3f 91       	pop	r19
    2bf0:	2f 91       	pop	r18
    2bf2:	0f 90       	pop	r0
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	0f 90       	pop	r0
    2bf8:	1f 90       	pop	r1
    2bfa:	18 95       	reti

00002bfc <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
    2bfc:	cf 92       	push	r12
    2bfe:	df 92       	push	r13
    2c00:	ef 92       	push	r14
    2c02:	ff 92       	push	r15
  if (howbig == 0) {
    2c04:	61 15       	cp	r22, r1
    2c06:	71 05       	cpc	r23, r1
    2c08:	81 05       	cpc	r24, r1
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	49 f0       	breq	.+18     	; 0x2c20 <_Z6randoml+0x24>
    2c0e:	6b 01       	movw	r12, r22
    2c10:	7c 01       	movw	r14, r24
    return 0;
  }
  return random() % howbig;
    2c12:	0e 94 93 1a 	call	0x3526	; 0x3526 <random>
    2c16:	a7 01       	movw	r20, r14
    2c18:	96 01       	movw	r18, r12
    2c1a:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__divmodsi4>
    2c1e:	03 c0       	rjmp	.+6      	; 0x2c26 <_Z6randoml+0x2a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    2c20:	60 e0       	ldi	r22, 0x00	; 0
    2c22:	70 e0       	ldi	r23, 0x00	; 0
    2c24:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
    2c26:	ff 90       	pop	r15
    2c28:	ef 90       	pop	r14
    2c2a:	df 90       	pop	r13
    2c2c:	cf 90       	pop	r12
    2c2e:	08 95       	ret

00002c30 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    2c30:	cf 92       	push	r12
    2c32:	df 92       	push	r13
    2c34:	ef 92       	push	r14
    2c36:	ff 92       	push	r15
    2c38:	0f 93       	push	r16
    2c3a:	1f 93       	push	r17
  if (howsmall >= howbig) {
    2c3c:	62 17       	cp	r22, r18
    2c3e:	73 07       	cpc	r23, r19
    2c40:	84 07       	cpc	r24, r20
    2c42:	95 07       	cpc	r25, r21
    2c44:	84 f4       	brge	.+32     	; 0x2c66 <_Z6randomll+0x36>
    2c46:	89 01       	movw	r16, r18
    2c48:	9a 01       	movw	r18, r20
    2c4a:	6b 01       	movw	r12, r22
    2c4c:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    2c4e:	c9 01       	movw	r24, r18
    2c50:	b8 01       	movw	r22, r16
    2c52:	6c 19       	sub	r22, r12
    2c54:	7d 09       	sbc	r23, r13
    2c56:	8e 09       	sbc	r24, r14
    2c58:	9f 09       	sbc	r25, r15
    2c5a:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <_Z6randoml>
    2c5e:	6c 0d       	add	r22, r12
    2c60:	7d 1d       	adc	r23, r13
    2c62:	8e 1d       	adc	r24, r14
    2c64:	9f 1d       	adc	r25, r15
}
    2c66:	1f 91       	pop	r17
    2c68:	0f 91       	pop	r16
    2c6a:	ff 90       	pop	r15
    2c6c:	ef 90       	pop	r14
    2c6e:	df 90       	pop	r13
    2c70:	cf 90       	pop	r12
    2c72:	08 95       	ret

00002c74 <_ZN12RHGenericSPI15attachInterruptEv>:
    virtual uint8_t transfer(uint8_t data) = 0;

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
    2c74:	08 95       	ret

00002c76 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
    2c76:	08 95       	ret

00002c78 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
    2c78:	08 95       	ret

00002c7a <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
    2c7a:	08 95       	ret

00002c7c <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Tells the SPI support software that SPI transactions will occur with the interrupt
    /// handler assocated with interruptNumber
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){}
    2c7c:	08 95       	ret

00002c7e <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
    2c7e:	fc 01       	movw	r30, r24
    2c80:	63 83       	std	Z+3, r22	; 0x03
    2c82:	08 95       	ret

00002c84 <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:
}

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
    2c84:	fc 01       	movw	r30, r24
    2c86:	64 83       	std	Z+4, r22	; 0x04
    2c88:	08 95       	ret

00002c8a <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:
}

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	62 83       	std	Z+2, r22	; 0x02
    2c8e:	08 95       	ret

00002c90 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
// Contributed by Joanna Rutkowska
// $Id: RHGenericSPI.cpp,v 1.2 2014/04/12 05:26:05 mikem Exp $

#include <RHGenericSPI.h>

RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
    2c90:	fc 01       	movw	r30, r24
    :
    _frequency(frequency),
    _bitOrder(bitOrder),
    _dataMode(dataMode)
    2c92:	84 eb       	ldi	r24, 0xB4	; 180
    2c94:	92 e0       	ldi	r25, 0x02	; 2
    2c96:	91 83       	std	Z+1, r25	; 0x01
    2c98:	80 83       	st	Z, r24
    2c9a:	62 83       	std	Z+2, r22	; 0x02
    2c9c:	43 83       	std	Z+3, r20	; 0x03
    2c9e:	24 83       	std	Z+4, r18	; 0x04
    2ca0:	08 95       	ret

00002ca2 <_ZN11RHSPIDriver4initEv>:
    return status;
}

void RHSPIDriver::setSlaveSelectPin(uint8_t slaveSelectPin)
{
    _slaveSelectPin = slaveSelectPin;
    2ca2:	cf 93       	push	r28
    2ca4:	df 93       	push	r29
    2ca6:	ec 01       	movw	r28, r24
    2ca8:	88 8d       	ldd	r24, Y+24	; 0x18
    2caa:	99 8d       	ldd	r25, Y+25	; 0x19
    2cac:	dc 01       	movw	r26, r24
    2cae:	ed 91       	ld	r30, X+
    2cb0:	fc 91       	ld	r31, X
    2cb2:	06 80       	ldd	r0, Z+6	; 0x06
    2cb4:	f7 81       	ldd	r31, Z+7	; 0x07
    2cb6:	e0 2d       	mov	r30, r0
    2cb8:	09 95       	icall
    2cba:	61 e0       	ldi	r22, 0x01	; 1
    2cbc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cbe:	0e 94 65 0b 	call	0x16ca	; 0x16ca <pinMode>
    2cc2:	61 e0       	ldi	r22, 0x01	; 1
    2cc4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cc6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <digitalWrite>
    2cca:	64 e6       	ldi	r22, 0x64	; 100
    2ccc:	70 e0       	ldi	r23, 0x00	; 0
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	0e 94 96 0a 	call	0x152c	; 0x152c <delay>
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	08 95       	ret

00002cde <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
    2cde:	ef 92       	push	r14
    2ce0:	ff 92       	push	r15
    2ce2:	1f 93       	push	r17
    2ce4:	cf 93       	push	r28
    2ce6:	df 93       	push	r29
    2ce8:	ec 01       	movw	r28, r24
    2cea:	16 2f       	mov	r17, r22
    2cec:	7a 01       	movw	r14, r20
    2cee:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <_ZN15RHGenericDriverC1Ev>
    2cf2:	8e ec       	ldi	r24, 0xCE	; 206
    2cf4:	92 e0       	ldi	r25, 0x02	; 2
    2cf6:	99 83       	std	Y+1, r25	; 0x01
    2cf8:	88 83       	st	Y, r24
    2cfa:	f9 8e       	std	Y+25, r15	; 0x19
    2cfc:	e8 8e       	std	Y+24, r14	; 0x18
    2cfe:	1a 8f       	std	Y+26, r17	; 0x1a
    2d00:	df 91       	pop	r29
    2d02:	cf 91       	pop	r28
    2d04:	1f 91       	pop	r17
    2d06:	ff 90       	pop	r15
    2d08:	ef 90       	pop	r14
    2d0a:	08 95       	ret

00002d0c <_ZN11RHSPIDriver7spiReadEh>:
    2d0c:	0f 93       	push	r16
    2d0e:	1f 93       	push	r17
    2d10:	cf 93       	push	r28
    2d12:	df 93       	push	r29
    2d14:	ec 01       	movw	r28, r24
    2d16:	16 2f       	mov	r17, r22
    2d18:	0f b7       	in	r16, 0x3f	; 63
    2d1a:	f8 94       	cli
    2d1c:	88 8d       	ldd	r24, Y+24	; 0x18
    2d1e:	99 8d       	ldd	r25, Y+25	; 0x19
    2d20:	dc 01       	movw	r26, r24
    2d22:	ed 91       	ld	r30, X+
    2d24:	fc 91       	ld	r31, X
    2d26:	00 88       	ldd	r0, Z+16	; 0x10
    2d28:	f1 89       	ldd	r31, Z+17	; 0x11
    2d2a:	e0 2d       	mov	r30, r0
    2d2c:	09 95       	icall
    2d2e:	60 e0       	ldi	r22, 0x00	; 0
    2d30:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d32:	0e 94 a1 0b 	call	0x1742	; 0x1742 <digitalWrite>
    2d36:	88 8d       	ldd	r24, Y+24	; 0x18
    2d38:	99 8d       	ldd	r25, Y+25	; 0x19
    2d3a:	61 2f       	mov	r22, r17
    2d3c:	6f 77       	andi	r22, 0x7F	; 127
    2d3e:	dc 01       	movw	r26, r24
    2d40:	ed 91       	ld	r30, X+
    2d42:	fc 91       	ld	r31, X
    2d44:	01 90       	ld	r0, Z+
    2d46:	f0 81       	ld	r31, Z
    2d48:	e0 2d       	mov	r30, r0
    2d4a:	09 95       	icall
    2d4c:	88 8d       	ldd	r24, Y+24	; 0x18
    2d4e:	99 8d       	ldd	r25, Y+25	; 0x19
    2d50:	dc 01       	movw	r26, r24
    2d52:	ed 91       	ld	r30, X+
    2d54:	fc 91       	ld	r31, X
    2d56:	01 90       	ld	r0, Z+
    2d58:	f0 81       	ld	r31, Z
    2d5a:	e0 2d       	mov	r30, r0
    2d5c:	60 e0       	ldi	r22, 0x00	; 0
    2d5e:	09 95       	icall
    2d60:	18 2f       	mov	r17, r24
    2d62:	61 e0       	ldi	r22, 0x01	; 1
    2d64:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d66:	0e 94 a1 0b 	call	0x1742	; 0x1742 <digitalWrite>
    2d6a:	88 8d       	ldd	r24, Y+24	; 0x18
    2d6c:	99 8d       	ldd	r25, Y+25	; 0x19
    2d6e:	dc 01       	movw	r26, r24
    2d70:	ed 91       	ld	r30, X+
    2d72:	fc 91       	ld	r31, X
    2d74:	02 88       	ldd	r0, Z+18	; 0x12
    2d76:	f3 89       	ldd	r31, Z+19	; 0x13
    2d78:	e0 2d       	mov	r30, r0
    2d7a:	09 95       	icall
    2d7c:	0f bf       	out	0x3f, r16	; 63
    2d7e:	81 2f       	mov	r24, r17
    2d80:	df 91       	pop	r29
    2d82:	cf 91       	pop	r28
    2d84:	1f 91       	pop	r17
    2d86:	0f 91       	pop	r16
    2d88:	08 95       	ret

00002d8a <_ZN11RHSPIDriver8spiWriteEhh>:
    2d8a:	ff 92       	push	r15
    2d8c:	0f 93       	push	r16
    2d8e:	1f 93       	push	r17
    2d90:	cf 93       	push	r28
    2d92:	df 93       	push	r29
    2d94:	ec 01       	movw	r28, r24
    2d96:	16 2f       	mov	r17, r22
    2d98:	f4 2e       	mov	r15, r20
    2d9a:	0f b7       	in	r16, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	88 8d       	ldd	r24, Y+24	; 0x18
    2da0:	99 8d       	ldd	r25, Y+25	; 0x19
    2da2:	dc 01       	movw	r26, r24
    2da4:	ed 91       	ld	r30, X+
    2da6:	fc 91       	ld	r31, X
    2da8:	00 88       	ldd	r0, Z+16	; 0x10
    2daa:	f1 89       	ldd	r31, Z+17	; 0x11
    2dac:	e0 2d       	mov	r30, r0
    2dae:	09 95       	icall
    2db0:	60 e0       	ldi	r22, 0x00	; 0
    2db2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2db4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <digitalWrite>
    2db8:	88 8d       	ldd	r24, Y+24	; 0x18
    2dba:	99 8d       	ldd	r25, Y+25	; 0x19
    2dbc:	61 2f       	mov	r22, r17
    2dbe:	60 68       	ori	r22, 0x80	; 128
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	ed 91       	ld	r30, X+
    2dc4:	fc 91       	ld	r31, X
    2dc6:	01 90       	ld	r0, Z+
    2dc8:	f0 81       	ld	r31, Z
    2dca:	e0 2d       	mov	r30, r0
    2dcc:	09 95       	icall
    2dce:	18 2f       	mov	r17, r24
    2dd0:	88 8d       	ldd	r24, Y+24	; 0x18
    2dd2:	99 8d       	ldd	r25, Y+25	; 0x19
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	ed 91       	ld	r30, X+
    2dd8:	fc 91       	ld	r31, X
    2dda:	01 90       	ld	r0, Z+
    2ddc:	f0 81       	ld	r31, Z
    2dde:	e0 2d       	mov	r30, r0
    2de0:	6f 2d       	mov	r22, r15
    2de2:	09 95       	icall
    2de4:	61 e0       	ldi	r22, 0x01	; 1
    2de6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2de8:	0e 94 a1 0b 	call	0x1742	; 0x1742 <digitalWrite>
    2dec:	88 8d       	ldd	r24, Y+24	; 0x18
    2dee:	99 8d       	ldd	r25, Y+25	; 0x19
    2df0:	dc 01       	movw	r26, r24
    2df2:	ed 91       	ld	r30, X+
    2df4:	fc 91       	ld	r31, X
    2df6:	02 88       	ldd	r0, Z+18	; 0x12
    2df8:	f3 89       	ldd	r31, Z+19	; 0x13
    2dfa:	e0 2d       	mov	r30, r0
    2dfc:	09 95       	icall
    2dfe:	0f bf       	out	0x3f, r16	; 63
    2e00:	81 2f       	mov	r24, r17
    2e02:	df 91       	pop	r29
    2e04:	cf 91       	pop	r28
    2e06:	1f 91       	pop	r17
    2e08:	0f 91       	pop	r16
    2e0a:	ff 90       	pop	r15
    2e0c:	08 95       	ret

00002e0e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
    2e0e:	bf 92       	push	r11
    2e10:	cf 92       	push	r12
    2e12:	df 92       	push	r13
    2e14:	ef 92       	push	r14
    2e16:	ff 92       	push	r15
    2e18:	0f 93       	push	r16
    2e1a:	1f 93       	push	r17
    2e1c:	cf 93       	push	r28
    2e1e:	df 93       	push	r29
    2e20:	ec 01       	movw	r28, r24
    2e22:	06 2f       	mov	r16, r22
    2e24:	b4 2e       	mov	r11, r20
    2e26:	c5 2e       	mov	r12, r21
    2e28:	12 2f       	mov	r17, r18
    2e2a:	df b6       	in	r13, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	88 8d       	ldd	r24, Y+24	; 0x18
    2e30:	99 8d       	ldd	r25, Y+25	; 0x19
    2e32:	dc 01       	movw	r26, r24
    2e34:	ed 91       	ld	r30, X+
    2e36:	fc 91       	ld	r31, X
    2e38:	00 88       	ldd	r0, Z+16	; 0x10
    2e3a:	f1 89       	ldd	r31, Z+17	; 0x11
    2e3c:	e0 2d       	mov	r30, r0
    2e3e:	09 95       	icall
    2e40:	60 e0       	ldi	r22, 0x00	; 0
    2e42:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e44:	0e 94 a1 0b 	call	0x1742	; 0x1742 <digitalWrite>
    2e48:	88 8d       	ldd	r24, Y+24	; 0x18
    2e4a:	99 8d       	ldd	r25, Y+25	; 0x19
    2e4c:	60 2f       	mov	r22, r16
    2e4e:	60 68       	ori	r22, 0x80	; 128
    2e50:	dc 01       	movw	r26, r24
    2e52:	ed 91       	ld	r30, X+
    2e54:	fc 91       	ld	r31, X
    2e56:	01 90       	ld	r0, Z+
    2e58:	f0 81       	ld	r31, Z
    2e5a:	e0 2d       	mov	r30, r0
    2e5c:	09 95       	icall
    2e5e:	08 2f       	mov	r16, r24
    2e60:	eb 2c       	mov	r14, r11
    2e62:	fc 2c       	mov	r15, r12
    2e64:	11 23       	and	r17, r17
    2e66:	71 f0       	breq	.+28     	; 0x2e84 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x76>
    2e68:	88 8d       	ldd	r24, Y+24	; 0x18
    2e6a:	99 8d       	ldd	r25, Y+25	; 0x19
    2e6c:	f7 01       	movw	r30, r14
    2e6e:	61 91       	ld	r22, Z+
    2e70:	7f 01       	movw	r14, r30
    2e72:	dc 01       	movw	r26, r24
    2e74:	ed 91       	ld	r30, X+
    2e76:	fc 91       	ld	r31, X
    2e78:	01 90       	ld	r0, Z+
    2e7a:	f0 81       	ld	r31, Z
    2e7c:	e0 2d       	mov	r30, r0
    2e7e:	09 95       	icall
    2e80:	11 50       	subi	r17, 0x01	; 1
    2e82:	f0 cf       	rjmp	.-32     	; 0x2e64 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x56>
    2e84:	61 e0       	ldi	r22, 0x01	; 1
    2e86:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e88:	0e 94 a1 0b 	call	0x1742	; 0x1742 <digitalWrite>
    2e8c:	88 8d       	ldd	r24, Y+24	; 0x18
    2e8e:	99 8d       	ldd	r25, Y+25	; 0x19
    2e90:	dc 01       	movw	r26, r24
    2e92:	ed 91       	ld	r30, X+
    2e94:	fc 91       	ld	r31, X
    2e96:	02 88       	ldd	r0, Z+18	; 0x12
    2e98:	f3 89       	ldd	r31, Z+19	; 0x13
    2e9a:	e0 2d       	mov	r30, r0
    2e9c:	09 95       	icall
    2e9e:	df be       	out	0x3f, r13	; 63
    2ea0:	80 2f       	mov	r24, r16
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	1f 91       	pop	r17
    2ea8:	0f 91       	pop	r16
    2eaa:	ff 90       	pop	r15
    2eac:	ef 90       	pop	r14
    2eae:	df 90       	pop	r13
    2eb0:	cf 90       	pop	r12
    2eb2:	bf 90       	pop	r11
    2eb4:	08 95       	ret

00002eb6 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
}

void RHSPIDriver::spiUsingInterrupt(uint8_t interruptNumber)
{
    _spi.usingInterrupt(interruptNumber);
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	58 96       	adiw	r26, 0x18	; 24
    2eba:	8d 91       	ld	r24, X+
    2ebc:	9c 91       	ld	r25, X
    2ebe:	59 97       	sbiw	r26, 0x19	; 25
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	ed 91       	ld	r30, X+
    2ec4:	fc 91       	ld	r31, X
    2ec6:	04 88       	ldd	r0, Z+20	; 0x14
    2ec8:	f5 89       	ldd	r31, Z+21	; 0x15
    2eca:	e0 2d       	mov	r30, r0
    2ecc:	09 94       	ijmp

00002ece <__divsf3>:
    2ece:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__divsf3x>
    2ed2:	0c 94 1f 18 	jmp	0x303e	; 0x303e <__fp_round>
    2ed6:	0e 94 18 18 	call	0x3030	; 0x3030 <__fp_pscB>
    2eda:	58 f0       	brcs	.+22     	; 0x2ef2 <__divsf3+0x24>
    2edc:	0e 94 11 18 	call	0x3022	; 0x3022 <__fp_pscA>
    2ee0:	40 f0       	brcs	.+16     	; 0x2ef2 <__divsf3+0x24>
    2ee2:	29 f4       	brne	.+10     	; 0x2eee <__divsf3+0x20>
    2ee4:	5f 3f       	cpi	r21, 0xFF	; 255
    2ee6:	29 f0       	breq	.+10     	; 0x2ef2 <__divsf3+0x24>
    2ee8:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__fp_inf>
    2eec:	51 11       	cpse	r21, r1
    2eee:	0c 94 53 18 	jmp	0x30a6	; 0x30a6 <__fp_szero>
    2ef2:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__fp_nan>

00002ef6 <__divsf3x>:
    2ef6:	0e 94 30 18 	call	0x3060	; 0x3060 <__fp_split3>
    2efa:	68 f3       	brcs	.-38     	; 0x2ed6 <__divsf3+0x8>

00002efc <__divsf3_pse>:
    2efc:	99 23       	and	r25, r25
    2efe:	b1 f3       	breq	.-20     	; 0x2eec <__divsf3+0x1e>
    2f00:	55 23       	and	r21, r21
    2f02:	91 f3       	breq	.-28     	; 0x2ee8 <__divsf3+0x1a>
    2f04:	95 1b       	sub	r25, r21
    2f06:	55 0b       	sbc	r21, r21
    2f08:	bb 27       	eor	r27, r27
    2f0a:	aa 27       	eor	r26, r26
    2f0c:	62 17       	cp	r22, r18
    2f0e:	73 07       	cpc	r23, r19
    2f10:	84 07       	cpc	r24, r20
    2f12:	38 f0       	brcs	.+14     	; 0x2f22 <__divsf3_pse+0x26>
    2f14:	9f 5f       	subi	r25, 0xFF	; 255
    2f16:	5f 4f       	sbci	r21, 0xFF	; 255
    2f18:	22 0f       	add	r18, r18
    2f1a:	33 1f       	adc	r19, r19
    2f1c:	44 1f       	adc	r20, r20
    2f1e:	aa 1f       	adc	r26, r26
    2f20:	a9 f3       	breq	.-22     	; 0x2f0c <__divsf3_pse+0x10>
    2f22:	35 d0       	rcall	.+106    	; 0x2f8e <__divsf3_pse+0x92>
    2f24:	0e 2e       	mov	r0, r30
    2f26:	3a f0       	brmi	.+14     	; 0x2f36 <__divsf3_pse+0x3a>
    2f28:	e0 e8       	ldi	r30, 0x80	; 128
    2f2a:	32 d0       	rcall	.+100    	; 0x2f90 <__divsf3_pse+0x94>
    2f2c:	91 50       	subi	r25, 0x01	; 1
    2f2e:	50 40       	sbci	r21, 0x00	; 0
    2f30:	e6 95       	lsr	r30
    2f32:	00 1c       	adc	r0, r0
    2f34:	ca f7       	brpl	.-14     	; 0x2f28 <__divsf3_pse+0x2c>
    2f36:	2b d0       	rcall	.+86     	; 0x2f8e <__divsf3_pse+0x92>
    2f38:	fe 2f       	mov	r31, r30
    2f3a:	29 d0       	rcall	.+82     	; 0x2f8e <__divsf3_pse+0x92>
    2f3c:	66 0f       	add	r22, r22
    2f3e:	77 1f       	adc	r23, r23
    2f40:	88 1f       	adc	r24, r24
    2f42:	bb 1f       	adc	r27, r27
    2f44:	26 17       	cp	r18, r22
    2f46:	37 07       	cpc	r19, r23
    2f48:	48 07       	cpc	r20, r24
    2f4a:	ab 07       	cpc	r26, r27
    2f4c:	b0 e8       	ldi	r27, 0x80	; 128
    2f4e:	09 f0       	breq	.+2      	; 0x2f52 <__divsf3_pse+0x56>
    2f50:	bb 0b       	sbc	r27, r27
    2f52:	80 2d       	mov	r24, r0
    2f54:	bf 01       	movw	r22, r30
    2f56:	ff 27       	eor	r31, r31
    2f58:	93 58       	subi	r25, 0x83	; 131
    2f5a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f5c:	3a f0       	brmi	.+14     	; 0x2f6c <__divsf3_pse+0x70>
    2f5e:	9e 3f       	cpi	r25, 0xFE	; 254
    2f60:	51 05       	cpc	r21, r1
    2f62:	78 f0       	brcs	.+30     	; 0x2f82 <__divsf3_pse+0x86>
    2f64:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__fp_inf>
    2f68:	0c 94 53 18 	jmp	0x30a6	; 0x30a6 <__fp_szero>
    2f6c:	5f 3f       	cpi	r21, 0xFF	; 255
    2f6e:	e4 f3       	brlt	.-8      	; 0x2f68 <__divsf3_pse+0x6c>
    2f70:	98 3e       	cpi	r25, 0xE8	; 232
    2f72:	d4 f3       	brlt	.-12     	; 0x2f68 <__divsf3_pse+0x6c>
    2f74:	86 95       	lsr	r24
    2f76:	77 95       	ror	r23
    2f78:	67 95       	ror	r22
    2f7a:	b7 95       	ror	r27
    2f7c:	f7 95       	ror	r31
    2f7e:	9f 5f       	subi	r25, 0xFF	; 255
    2f80:	c9 f7       	brne	.-14     	; 0x2f74 <__divsf3_pse+0x78>
    2f82:	88 0f       	add	r24, r24
    2f84:	91 1d       	adc	r25, r1
    2f86:	96 95       	lsr	r25
    2f88:	87 95       	ror	r24
    2f8a:	97 f9       	bld	r25, 7
    2f8c:	08 95       	ret
    2f8e:	e1 e0       	ldi	r30, 0x01	; 1
    2f90:	66 0f       	add	r22, r22
    2f92:	77 1f       	adc	r23, r23
    2f94:	88 1f       	adc	r24, r24
    2f96:	bb 1f       	adc	r27, r27
    2f98:	62 17       	cp	r22, r18
    2f9a:	73 07       	cpc	r23, r19
    2f9c:	84 07       	cpc	r24, r20
    2f9e:	ba 07       	cpc	r27, r26
    2fa0:	20 f0       	brcs	.+8      	; 0x2faa <__divsf3_pse+0xae>
    2fa2:	62 1b       	sub	r22, r18
    2fa4:	73 0b       	sbc	r23, r19
    2fa6:	84 0b       	sbc	r24, r20
    2fa8:	ba 0b       	sbc	r27, r26
    2faa:	ee 1f       	adc	r30, r30
    2fac:	88 f7       	brcc	.-30     	; 0x2f90 <__divsf3_pse+0x94>
    2fae:	e0 95       	com	r30
    2fb0:	08 95       	ret

00002fb2 <__fixunssfsi>:
    2fb2:	0e 94 38 18 	call	0x3070	; 0x3070 <__fp_splitA>
    2fb6:	88 f0       	brcs	.+34     	; 0x2fda <__fixunssfsi+0x28>
    2fb8:	9f 57       	subi	r25, 0x7F	; 127
    2fba:	98 f0       	brcs	.+38     	; 0x2fe2 <__fixunssfsi+0x30>
    2fbc:	b9 2f       	mov	r27, r25
    2fbe:	99 27       	eor	r25, r25
    2fc0:	b7 51       	subi	r27, 0x17	; 23
    2fc2:	b0 f0       	brcs	.+44     	; 0x2ff0 <__fixunssfsi+0x3e>
    2fc4:	e1 f0       	breq	.+56     	; 0x2ffe <__fixunssfsi+0x4c>
    2fc6:	66 0f       	add	r22, r22
    2fc8:	77 1f       	adc	r23, r23
    2fca:	88 1f       	adc	r24, r24
    2fcc:	99 1f       	adc	r25, r25
    2fce:	1a f0       	brmi	.+6      	; 0x2fd6 <__fixunssfsi+0x24>
    2fd0:	ba 95       	dec	r27
    2fd2:	c9 f7       	brne	.-14     	; 0x2fc6 <__fixunssfsi+0x14>
    2fd4:	14 c0       	rjmp	.+40     	; 0x2ffe <__fixunssfsi+0x4c>
    2fd6:	b1 30       	cpi	r27, 0x01	; 1
    2fd8:	91 f0       	breq	.+36     	; 0x2ffe <__fixunssfsi+0x4c>
    2fda:	0e 94 52 18 	call	0x30a4	; 0x30a4 <__fp_zero>
    2fde:	b1 e0       	ldi	r27, 0x01	; 1
    2fe0:	08 95       	ret
    2fe2:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <__fp_zero>
    2fe6:	67 2f       	mov	r22, r23
    2fe8:	78 2f       	mov	r23, r24
    2fea:	88 27       	eor	r24, r24
    2fec:	b8 5f       	subi	r27, 0xF8	; 248
    2fee:	39 f0       	breq	.+14     	; 0x2ffe <__fixunssfsi+0x4c>
    2ff0:	b9 3f       	cpi	r27, 0xF9	; 249
    2ff2:	cc f3       	brlt	.-14     	; 0x2fe6 <__fixunssfsi+0x34>
    2ff4:	86 95       	lsr	r24
    2ff6:	77 95       	ror	r23
    2ff8:	67 95       	ror	r22
    2ffa:	b3 95       	inc	r27
    2ffc:	d9 f7       	brne	.-10     	; 0x2ff4 <__fixunssfsi+0x42>
    2ffe:	3e f4       	brtc	.+14     	; 0x300e <__fixunssfsi+0x5c>
    3000:	90 95       	com	r25
    3002:	80 95       	com	r24
    3004:	70 95       	com	r23
    3006:	61 95       	neg	r22
    3008:	7f 4f       	sbci	r23, 0xFF	; 255
    300a:	8f 4f       	sbci	r24, 0xFF	; 255
    300c:	9f 4f       	sbci	r25, 0xFF	; 255
    300e:	08 95       	ret

00003010 <__fp_inf>:
    3010:	97 f9       	bld	r25, 7
    3012:	9f 67       	ori	r25, 0x7F	; 127
    3014:	80 e8       	ldi	r24, 0x80	; 128
    3016:	70 e0       	ldi	r23, 0x00	; 0
    3018:	60 e0       	ldi	r22, 0x00	; 0
    301a:	08 95       	ret

0000301c <__fp_nan>:
    301c:	9f ef       	ldi	r25, 0xFF	; 255
    301e:	80 ec       	ldi	r24, 0xC0	; 192
    3020:	08 95       	ret

00003022 <__fp_pscA>:
    3022:	00 24       	eor	r0, r0
    3024:	0a 94       	dec	r0
    3026:	16 16       	cp	r1, r22
    3028:	17 06       	cpc	r1, r23
    302a:	18 06       	cpc	r1, r24
    302c:	09 06       	cpc	r0, r25
    302e:	08 95       	ret

00003030 <__fp_pscB>:
    3030:	00 24       	eor	r0, r0
    3032:	0a 94       	dec	r0
    3034:	12 16       	cp	r1, r18
    3036:	13 06       	cpc	r1, r19
    3038:	14 06       	cpc	r1, r20
    303a:	05 06       	cpc	r0, r21
    303c:	08 95       	ret

0000303e <__fp_round>:
    303e:	09 2e       	mov	r0, r25
    3040:	03 94       	inc	r0
    3042:	00 0c       	add	r0, r0
    3044:	11 f4       	brne	.+4      	; 0x304a <__fp_round+0xc>
    3046:	88 23       	and	r24, r24
    3048:	52 f0       	brmi	.+20     	; 0x305e <__fp_round+0x20>
    304a:	bb 0f       	add	r27, r27
    304c:	40 f4       	brcc	.+16     	; 0x305e <__fp_round+0x20>
    304e:	bf 2b       	or	r27, r31
    3050:	11 f4       	brne	.+4      	; 0x3056 <__fp_round+0x18>
    3052:	60 ff       	sbrs	r22, 0
    3054:	04 c0       	rjmp	.+8      	; 0x305e <__fp_round+0x20>
    3056:	6f 5f       	subi	r22, 0xFF	; 255
    3058:	7f 4f       	sbci	r23, 0xFF	; 255
    305a:	8f 4f       	sbci	r24, 0xFF	; 255
    305c:	9f 4f       	sbci	r25, 0xFF	; 255
    305e:	08 95       	ret

00003060 <__fp_split3>:
    3060:	57 fd       	sbrc	r21, 7
    3062:	90 58       	subi	r25, 0x80	; 128
    3064:	44 0f       	add	r20, r20
    3066:	55 1f       	adc	r21, r21
    3068:	59 f0       	breq	.+22     	; 0x3080 <__fp_splitA+0x10>
    306a:	5f 3f       	cpi	r21, 0xFF	; 255
    306c:	71 f0       	breq	.+28     	; 0x308a <__fp_splitA+0x1a>
    306e:	47 95       	ror	r20

00003070 <__fp_splitA>:
    3070:	88 0f       	add	r24, r24
    3072:	97 fb       	bst	r25, 7
    3074:	99 1f       	adc	r25, r25
    3076:	61 f0       	breq	.+24     	; 0x3090 <__fp_splitA+0x20>
    3078:	9f 3f       	cpi	r25, 0xFF	; 255
    307a:	79 f0       	breq	.+30     	; 0x309a <__fp_splitA+0x2a>
    307c:	87 95       	ror	r24
    307e:	08 95       	ret
    3080:	12 16       	cp	r1, r18
    3082:	13 06       	cpc	r1, r19
    3084:	14 06       	cpc	r1, r20
    3086:	55 1f       	adc	r21, r21
    3088:	f2 cf       	rjmp	.-28     	; 0x306e <__fp_split3+0xe>
    308a:	46 95       	lsr	r20
    308c:	f1 df       	rcall	.-30     	; 0x3070 <__fp_splitA>
    308e:	08 c0       	rjmp	.+16     	; 0x30a0 <__fp_splitA+0x30>
    3090:	16 16       	cp	r1, r22
    3092:	17 06       	cpc	r1, r23
    3094:	18 06       	cpc	r1, r24
    3096:	99 1f       	adc	r25, r25
    3098:	f1 cf       	rjmp	.-30     	; 0x307c <__fp_splitA+0xc>
    309a:	86 95       	lsr	r24
    309c:	71 05       	cpc	r23, r1
    309e:	61 05       	cpc	r22, r1
    30a0:	08 94       	sec
    30a2:	08 95       	ret

000030a4 <__fp_zero>:
    30a4:	e8 94       	clt

000030a6 <__fp_szero>:
    30a6:	bb 27       	eor	r27, r27
    30a8:	66 27       	eor	r22, r22
    30aa:	77 27       	eor	r23, r23
    30ac:	cb 01       	movw	r24, r22
    30ae:	97 f9       	bld	r25, 7
    30b0:	08 95       	ret

000030b2 <__mulsf3>:
    30b2:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <__mulsf3x>
    30b6:	0c 94 1f 18 	jmp	0x303e	; 0x303e <__fp_round>
    30ba:	0e 94 11 18 	call	0x3022	; 0x3022 <__fp_pscA>
    30be:	38 f0       	brcs	.+14     	; 0x30ce <__mulsf3+0x1c>
    30c0:	0e 94 18 18 	call	0x3030	; 0x3030 <__fp_pscB>
    30c4:	20 f0       	brcs	.+8      	; 0x30ce <__mulsf3+0x1c>
    30c6:	95 23       	and	r25, r21
    30c8:	11 f0       	breq	.+4      	; 0x30ce <__mulsf3+0x1c>
    30ca:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__fp_inf>
    30ce:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__fp_nan>
    30d2:	11 24       	eor	r1, r1
    30d4:	0c 94 53 18 	jmp	0x30a6	; 0x30a6 <__fp_szero>

000030d8 <__mulsf3x>:
    30d8:	0e 94 30 18 	call	0x3060	; 0x3060 <__fp_split3>
    30dc:	70 f3       	brcs	.-36     	; 0x30ba <__mulsf3+0x8>

000030de <__mulsf3_pse>:
    30de:	95 9f       	mul	r25, r21
    30e0:	c1 f3       	breq	.-16     	; 0x30d2 <__mulsf3+0x20>
    30e2:	95 0f       	add	r25, r21
    30e4:	50 e0       	ldi	r21, 0x00	; 0
    30e6:	55 1f       	adc	r21, r21
    30e8:	62 9f       	mul	r22, r18
    30ea:	f0 01       	movw	r30, r0
    30ec:	72 9f       	mul	r23, r18
    30ee:	bb 27       	eor	r27, r27
    30f0:	f0 0d       	add	r31, r0
    30f2:	b1 1d       	adc	r27, r1
    30f4:	63 9f       	mul	r22, r19
    30f6:	aa 27       	eor	r26, r26
    30f8:	f0 0d       	add	r31, r0
    30fa:	b1 1d       	adc	r27, r1
    30fc:	aa 1f       	adc	r26, r26
    30fe:	64 9f       	mul	r22, r20
    3100:	66 27       	eor	r22, r22
    3102:	b0 0d       	add	r27, r0
    3104:	a1 1d       	adc	r26, r1
    3106:	66 1f       	adc	r22, r22
    3108:	82 9f       	mul	r24, r18
    310a:	22 27       	eor	r18, r18
    310c:	b0 0d       	add	r27, r0
    310e:	a1 1d       	adc	r26, r1
    3110:	62 1f       	adc	r22, r18
    3112:	73 9f       	mul	r23, r19
    3114:	b0 0d       	add	r27, r0
    3116:	a1 1d       	adc	r26, r1
    3118:	62 1f       	adc	r22, r18
    311a:	83 9f       	mul	r24, r19
    311c:	a0 0d       	add	r26, r0
    311e:	61 1d       	adc	r22, r1
    3120:	22 1f       	adc	r18, r18
    3122:	74 9f       	mul	r23, r20
    3124:	33 27       	eor	r19, r19
    3126:	a0 0d       	add	r26, r0
    3128:	61 1d       	adc	r22, r1
    312a:	23 1f       	adc	r18, r19
    312c:	84 9f       	mul	r24, r20
    312e:	60 0d       	add	r22, r0
    3130:	21 1d       	adc	r18, r1
    3132:	82 2f       	mov	r24, r18
    3134:	76 2f       	mov	r23, r22
    3136:	6a 2f       	mov	r22, r26
    3138:	11 24       	eor	r1, r1
    313a:	9f 57       	subi	r25, 0x7F	; 127
    313c:	50 40       	sbci	r21, 0x00	; 0
    313e:	9a f0       	brmi	.+38     	; 0x3166 <__mulsf3_pse+0x88>
    3140:	f1 f0       	breq	.+60     	; 0x317e <__mulsf3_pse+0xa0>
    3142:	88 23       	and	r24, r24
    3144:	4a f0       	brmi	.+18     	; 0x3158 <__mulsf3_pse+0x7a>
    3146:	ee 0f       	add	r30, r30
    3148:	ff 1f       	adc	r31, r31
    314a:	bb 1f       	adc	r27, r27
    314c:	66 1f       	adc	r22, r22
    314e:	77 1f       	adc	r23, r23
    3150:	88 1f       	adc	r24, r24
    3152:	91 50       	subi	r25, 0x01	; 1
    3154:	50 40       	sbci	r21, 0x00	; 0
    3156:	a9 f7       	brne	.-22     	; 0x3142 <__mulsf3_pse+0x64>
    3158:	9e 3f       	cpi	r25, 0xFE	; 254
    315a:	51 05       	cpc	r21, r1
    315c:	80 f0       	brcs	.+32     	; 0x317e <__mulsf3_pse+0xa0>
    315e:	0c 94 08 18 	jmp	0x3010	; 0x3010 <__fp_inf>
    3162:	0c 94 53 18 	jmp	0x30a6	; 0x30a6 <__fp_szero>
    3166:	5f 3f       	cpi	r21, 0xFF	; 255
    3168:	e4 f3       	brlt	.-8      	; 0x3162 <__mulsf3_pse+0x84>
    316a:	98 3e       	cpi	r25, 0xE8	; 232
    316c:	d4 f3       	brlt	.-12     	; 0x3162 <__mulsf3_pse+0x84>
    316e:	86 95       	lsr	r24
    3170:	77 95       	ror	r23
    3172:	67 95       	ror	r22
    3174:	b7 95       	ror	r27
    3176:	f7 95       	ror	r31
    3178:	e7 95       	ror	r30
    317a:	9f 5f       	subi	r25, 0xFF	; 255
    317c:	c1 f7       	brne	.-16     	; 0x316e <__mulsf3_pse+0x90>
    317e:	fe 2b       	or	r31, r30
    3180:	88 0f       	add	r24, r24
    3182:	91 1d       	adc	r25, r1
    3184:	96 95       	lsr	r25
    3186:	87 95       	ror	r24
    3188:	97 f9       	bld	r25, 7
    318a:	08 95       	ret

0000318c <__udivmodsi4>:
    318c:	a1 e2       	ldi	r26, 0x21	; 33
    318e:	1a 2e       	mov	r1, r26
    3190:	aa 1b       	sub	r26, r26
    3192:	bb 1b       	sub	r27, r27
    3194:	fd 01       	movw	r30, r26
    3196:	0d c0       	rjmp	.+26     	; 0x31b2 <__udivmodsi4_ep>

00003198 <__udivmodsi4_loop>:
    3198:	aa 1f       	adc	r26, r26
    319a:	bb 1f       	adc	r27, r27
    319c:	ee 1f       	adc	r30, r30
    319e:	ff 1f       	adc	r31, r31
    31a0:	a2 17       	cp	r26, r18
    31a2:	b3 07       	cpc	r27, r19
    31a4:	e4 07       	cpc	r30, r20
    31a6:	f5 07       	cpc	r31, r21
    31a8:	20 f0       	brcs	.+8      	; 0x31b2 <__udivmodsi4_ep>
    31aa:	a2 1b       	sub	r26, r18
    31ac:	b3 0b       	sbc	r27, r19
    31ae:	e4 0b       	sbc	r30, r20
    31b0:	f5 0b       	sbc	r31, r21

000031b2 <__udivmodsi4_ep>:
    31b2:	66 1f       	adc	r22, r22
    31b4:	77 1f       	adc	r23, r23
    31b6:	88 1f       	adc	r24, r24
    31b8:	99 1f       	adc	r25, r25
    31ba:	1a 94       	dec	r1
    31bc:	69 f7       	brne	.-38     	; 0x3198 <__udivmodsi4_loop>
    31be:	60 95       	com	r22
    31c0:	70 95       	com	r23
    31c2:	80 95       	com	r24
    31c4:	90 95       	com	r25
    31c6:	9b 01       	movw	r18, r22
    31c8:	ac 01       	movw	r20, r24
    31ca:	bd 01       	movw	r22, r26
    31cc:	cf 01       	movw	r24, r30
    31ce:	08 95       	ret

000031d0 <__divmodsi4>:
    31d0:	05 2e       	mov	r0, r21
    31d2:	97 fb       	bst	r25, 7
    31d4:	1e f4       	brtc	.+6      	; 0x31dc <__divmodsi4+0xc>
    31d6:	00 94       	com	r0
    31d8:	0e 94 ff 18 	call	0x31fe	; 0x31fe <__negsi2>
    31dc:	57 fd       	sbrc	r21, 7
    31de:	07 d0       	rcall	.+14     	; 0x31ee <__divmodsi4_neg2>
    31e0:	0e 94 c6 18 	call	0x318c	; 0x318c <__udivmodsi4>
    31e4:	07 fc       	sbrc	r0, 7
    31e6:	03 d0       	rcall	.+6      	; 0x31ee <__divmodsi4_neg2>
    31e8:	4e f4       	brtc	.+18     	; 0x31fc <__divmodsi4_exit>
    31ea:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__negsi2>

000031ee <__divmodsi4_neg2>:
    31ee:	50 95       	com	r21
    31f0:	40 95       	com	r20
    31f2:	30 95       	com	r19
    31f4:	21 95       	neg	r18
    31f6:	3f 4f       	sbci	r19, 0xFF	; 255
    31f8:	4f 4f       	sbci	r20, 0xFF	; 255
    31fa:	5f 4f       	sbci	r21, 0xFF	; 255

000031fc <__divmodsi4_exit>:
    31fc:	08 95       	ret

000031fe <__negsi2>:
    31fe:	90 95       	com	r25
    3200:	80 95       	com	r24
    3202:	70 95       	com	r23
    3204:	61 95       	neg	r22
    3206:	7f 4f       	sbci	r23, 0xFF	; 255
    3208:	8f 4f       	sbci	r24, 0xFF	; 255
    320a:	9f 4f       	sbci	r25, 0xFF	; 255
    320c:	08 95       	ret

0000320e <__tablejump2__>:
    320e:	ee 0f       	add	r30, r30
    3210:	ff 1f       	adc	r31, r31
    3212:	05 90       	lpm	r0, Z+
    3214:	f4 91       	lpm	r31, Z
    3216:	e0 2d       	mov	r30, r0
    3218:	09 94       	ijmp

0000321a <__muluhisi3>:
    321a:	0e 94 18 19 	call	0x3230	; 0x3230 <__umulhisi3>
    321e:	a5 9f       	mul	r26, r21
    3220:	90 0d       	add	r25, r0
    3222:	b4 9f       	mul	r27, r20
    3224:	90 0d       	add	r25, r0
    3226:	a4 9f       	mul	r26, r20
    3228:	80 0d       	add	r24, r0
    322a:	91 1d       	adc	r25, r1
    322c:	11 24       	eor	r1, r1
    322e:	08 95       	ret

00003230 <__umulhisi3>:
    3230:	a2 9f       	mul	r26, r18
    3232:	b0 01       	movw	r22, r0
    3234:	b3 9f       	mul	r27, r19
    3236:	c0 01       	movw	r24, r0
    3238:	a3 9f       	mul	r26, r19
    323a:	70 0d       	add	r23, r0
    323c:	81 1d       	adc	r24, r1
    323e:	11 24       	eor	r1, r1
    3240:	91 1d       	adc	r25, r1
    3242:	b2 9f       	mul	r27, r18
    3244:	70 0d       	add	r23, r0
    3246:	81 1d       	adc	r24, r1
    3248:	11 24       	eor	r1, r1
    324a:	91 1d       	adc	r25, r1
    324c:	08 95       	ret

0000324e <malloc>:
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	82 30       	cpi	r24, 0x02	; 2
    3258:	91 05       	cpc	r25, r1
    325a:	10 f4       	brcc	.+4      	; 0x3260 <malloc+0x12>
    325c:	82 e0       	ldi	r24, 0x02	; 2
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	e0 91 90 04 	lds	r30, 0x0490	; 0x800490 <__flp>
    3264:	f0 91 91 04 	lds	r31, 0x0491	; 0x800491 <__flp+0x1>
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	a0 e0       	ldi	r26, 0x00	; 0
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	30 97       	sbiw	r30, 0x00	; 0
    3272:	19 f1       	breq	.+70     	; 0x32ba <malloc+0x6c>
    3274:	40 81       	ld	r20, Z
    3276:	51 81       	ldd	r21, Z+1	; 0x01
    3278:	02 81       	ldd	r16, Z+2	; 0x02
    327a:	13 81       	ldd	r17, Z+3	; 0x03
    327c:	48 17       	cp	r20, r24
    327e:	59 07       	cpc	r21, r25
    3280:	c8 f0       	brcs	.+50     	; 0x32b4 <malloc+0x66>
    3282:	84 17       	cp	r24, r20
    3284:	95 07       	cpc	r25, r21
    3286:	69 f4       	brne	.+26     	; 0x32a2 <malloc+0x54>
    3288:	10 97       	sbiw	r26, 0x00	; 0
    328a:	31 f0       	breq	.+12     	; 0x3298 <malloc+0x4a>
    328c:	12 96       	adiw	r26, 0x02	; 2
    328e:	0c 93       	st	X, r16
    3290:	12 97       	sbiw	r26, 0x02	; 2
    3292:	13 96       	adiw	r26, 0x03	; 3
    3294:	1c 93       	st	X, r17
    3296:	27 c0       	rjmp	.+78     	; 0x32e6 <malloc+0x98>
    3298:	00 93 90 04 	sts	0x0490, r16	; 0x800490 <__flp>
    329c:	10 93 91 04 	sts	0x0491, r17	; 0x800491 <__flp+0x1>
    32a0:	22 c0       	rjmp	.+68     	; 0x32e6 <malloc+0x98>
    32a2:	21 15       	cp	r18, r1
    32a4:	31 05       	cpc	r19, r1
    32a6:	19 f0       	breq	.+6      	; 0x32ae <malloc+0x60>
    32a8:	42 17       	cp	r20, r18
    32aa:	53 07       	cpc	r21, r19
    32ac:	18 f4       	brcc	.+6      	; 0x32b4 <malloc+0x66>
    32ae:	9a 01       	movw	r18, r20
    32b0:	bd 01       	movw	r22, r26
    32b2:	ef 01       	movw	r28, r30
    32b4:	df 01       	movw	r26, r30
    32b6:	f8 01       	movw	r30, r16
    32b8:	db cf       	rjmp	.-74     	; 0x3270 <malloc+0x22>
    32ba:	21 15       	cp	r18, r1
    32bc:	31 05       	cpc	r19, r1
    32be:	f9 f0       	breq	.+62     	; 0x32fe <malloc+0xb0>
    32c0:	28 1b       	sub	r18, r24
    32c2:	39 0b       	sbc	r19, r25
    32c4:	24 30       	cpi	r18, 0x04	; 4
    32c6:	31 05       	cpc	r19, r1
    32c8:	80 f4       	brcc	.+32     	; 0x32ea <malloc+0x9c>
    32ca:	8a 81       	ldd	r24, Y+2	; 0x02
    32cc:	9b 81       	ldd	r25, Y+3	; 0x03
    32ce:	61 15       	cp	r22, r1
    32d0:	71 05       	cpc	r23, r1
    32d2:	21 f0       	breq	.+8      	; 0x32dc <malloc+0x8e>
    32d4:	fb 01       	movw	r30, r22
    32d6:	93 83       	std	Z+3, r25	; 0x03
    32d8:	82 83       	std	Z+2, r24	; 0x02
    32da:	04 c0       	rjmp	.+8      	; 0x32e4 <malloc+0x96>
    32dc:	90 93 91 04 	sts	0x0491, r25	; 0x800491 <__flp+0x1>
    32e0:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <__flp>
    32e4:	fe 01       	movw	r30, r28
    32e6:	32 96       	adiw	r30, 0x02	; 2
    32e8:	44 c0       	rjmp	.+136    	; 0x3372 <malloc+0x124>
    32ea:	fe 01       	movw	r30, r28
    32ec:	e2 0f       	add	r30, r18
    32ee:	f3 1f       	adc	r31, r19
    32f0:	81 93       	st	Z+, r24
    32f2:	91 93       	st	Z+, r25
    32f4:	22 50       	subi	r18, 0x02	; 2
    32f6:	31 09       	sbc	r19, r1
    32f8:	39 83       	std	Y+1, r19	; 0x01
    32fa:	28 83       	st	Y, r18
    32fc:	3a c0       	rjmp	.+116    	; 0x3372 <malloc+0x124>
    32fe:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <__brkval>
    3302:	30 91 8f 04 	lds	r19, 0x048F	; 0x80048f <__brkval+0x1>
    3306:	23 2b       	or	r18, r19
    3308:	41 f4       	brne	.+16     	; 0x331a <malloc+0xcc>
    330a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    330e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3312:	30 93 8f 04 	sts	0x048F, r19	; 0x80048f <__brkval+0x1>
    3316:	20 93 8e 04 	sts	0x048E, r18	; 0x80048e <__brkval>
    331a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    331e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3322:	21 15       	cp	r18, r1
    3324:	31 05       	cpc	r19, r1
    3326:	41 f4       	brne	.+16     	; 0x3338 <malloc+0xea>
    3328:	2d b7       	in	r18, 0x3d	; 61
    332a:	3e b7       	in	r19, 0x3e	; 62
    332c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3330:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3334:	24 1b       	sub	r18, r20
    3336:	35 0b       	sbc	r19, r21
    3338:	e0 91 8e 04 	lds	r30, 0x048E	; 0x80048e <__brkval>
    333c:	f0 91 8f 04 	lds	r31, 0x048F	; 0x80048f <__brkval+0x1>
    3340:	e2 17       	cp	r30, r18
    3342:	f3 07       	cpc	r31, r19
    3344:	a0 f4       	brcc	.+40     	; 0x336e <malloc+0x120>
    3346:	2e 1b       	sub	r18, r30
    3348:	3f 0b       	sbc	r19, r31
    334a:	28 17       	cp	r18, r24
    334c:	39 07       	cpc	r19, r25
    334e:	78 f0       	brcs	.+30     	; 0x336e <malloc+0x120>
    3350:	ac 01       	movw	r20, r24
    3352:	4e 5f       	subi	r20, 0xFE	; 254
    3354:	5f 4f       	sbci	r21, 0xFF	; 255
    3356:	24 17       	cp	r18, r20
    3358:	35 07       	cpc	r19, r21
    335a:	48 f0       	brcs	.+18     	; 0x336e <malloc+0x120>
    335c:	4e 0f       	add	r20, r30
    335e:	5f 1f       	adc	r21, r31
    3360:	50 93 8f 04 	sts	0x048F, r21	; 0x80048f <__brkval+0x1>
    3364:	40 93 8e 04 	sts	0x048E, r20	; 0x80048e <__brkval>
    3368:	81 93       	st	Z+, r24
    336a:	91 93       	st	Z+, r25
    336c:	02 c0       	rjmp	.+4      	; 0x3372 <malloc+0x124>
    336e:	e0 e0       	ldi	r30, 0x00	; 0
    3370:	f0 e0       	ldi	r31, 0x00	; 0
    3372:	cf 01       	movw	r24, r30
    3374:	df 91       	pop	r29
    3376:	cf 91       	pop	r28
    3378:	1f 91       	pop	r17
    337a:	0f 91       	pop	r16
    337c:	08 95       	ret

0000337e <free>:
    337e:	cf 93       	push	r28
    3380:	df 93       	push	r29
    3382:	00 97       	sbiw	r24, 0x00	; 0
    3384:	09 f4       	brne	.+2      	; 0x3388 <free+0xa>
    3386:	81 c0       	rjmp	.+258    	; 0x348a <free+0x10c>
    3388:	fc 01       	movw	r30, r24
    338a:	32 97       	sbiw	r30, 0x02	; 2
    338c:	13 82       	std	Z+3, r1	; 0x03
    338e:	12 82       	std	Z+2, r1	; 0x02
    3390:	a0 91 90 04 	lds	r26, 0x0490	; 0x800490 <__flp>
    3394:	b0 91 91 04 	lds	r27, 0x0491	; 0x800491 <__flp+0x1>
    3398:	10 97       	sbiw	r26, 0x00	; 0
    339a:	81 f4       	brne	.+32     	; 0x33bc <free+0x3e>
    339c:	20 81       	ld	r18, Z
    339e:	31 81       	ldd	r19, Z+1	; 0x01
    33a0:	82 0f       	add	r24, r18
    33a2:	93 1f       	adc	r25, r19
    33a4:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <__brkval>
    33a8:	30 91 8f 04 	lds	r19, 0x048F	; 0x80048f <__brkval+0x1>
    33ac:	28 17       	cp	r18, r24
    33ae:	39 07       	cpc	r19, r25
    33b0:	51 f5       	brne	.+84     	; 0x3406 <free+0x88>
    33b2:	f0 93 8f 04 	sts	0x048F, r31	; 0x80048f <__brkval+0x1>
    33b6:	e0 93 8e 04 	sts	0x048E, r30	; 0x80048e <__brkval>
    33ba:	67 c0       	rjmp	.+206    	; 0x348a <free+0x10c>
    33bc:	ed 01       	movw	r28, r26
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	ce 17       	cp	r28, r30
    33c4:	df 07       	cpc	r29, r31
    33c6:	40 f4       	brcc	.+16     	; 0x33d8 <free+0x5a>
    33c8:	4a 81       	ldd	r20, Y+2	; 0x02
    33ca:	5b 81       	ldd	r21, Y+3	; 0x03
    33cc:	9e 01       	movw	r18, r28
    33ce:	41 15       	cp	r20, r1
    33d0:	51 05       	cpc	r21, r1
    33d2:	f1 f0       	breq	.+60     	; 0x3410 <free+0x92>
    33d4:	ea 01       	movw	r28, r20
    33d6:	f5 cf       	rjmp	.-22     	; 0x33c2 <free+0x44>
    33d8:	d3 83       	std	Z+3, r29	; 0x03
    33da:	c2 83       	std	Z+2, r28	; 0x02
    33dc:	40 81       	ld	r20, Z
    33de:	51 81       	ldd	r21, Z+1	; 0x01
    33e0:	84 0f       	add	r24, r20
    33e2:	95 1f       	adc	r25, r21
    33e4:	c8 17       	cp	r28, r24
    33e6:	d9 07       	cpc	r29, r25
    33e8:	59 f4       	brne	.+22     	; 0x3400 <free+0x82>
    33ea:	88 81       	ld	r24, Y
    33ec:	99 81       	ldd	r25, Y+1	; 0x01
    33ee:	84 0f       	add	r24, r20
    33f0:	95 1f       	adc	r25, r21
    33f2:	02 96       	adiw	r24, 0x02	; 2
    33f4:	91 83       	std	Z+1, r25	; 0x01
    33f6:	80 83       	st	Z, r24
    33f8:	8a 81       	ldd	r24, Y+2	; 0x02
    33fa:	9b 81       	ldd	r25, Y+3	; 0x03
    33fc:	93 83       	std	Z+3, r25	; 0x03
    33fe:	82 83       	std	Z+2, r24	; 0x02
    3400:	21 15       	cp	r18, r1
    3402:	31 05       	cpc	r19, r1
    3404:	29 f4       	brne	.+10     	; 0x3410 <free+0x92>
    3406:	f0 93 91 04 	sts	0x0491, r31	; 0x800491 <__flp+0x1>
    340a:	e0 93 90 04 	sts	0x0490, r30	; 0x800490 <__flp>
    340e:	3d c0       	rjmp	.+122    	; 0x348a <free+0x10c>
    3410:	e9 01       	movw	r28, r18
    3412:	fb 83       	std	Y+3, r31	; 0x03
    3414:	ea 83       	std	Y+2, r30	; 0x02
    3416:	49 91       	ld	r20, Y+
    3418:	59 91       	ld	r21, Y+
    341a:	c4 0f       	add	r28, r20
    341c:	d5 1f       	adc	r29, r21
    341e:	ec 17       	cp	r30, r28
    3420:	fd 07       	cpc	r31, r29
    3422:	61 f4       	brne	.+24     	; 0x343c <free+0xbe>
    3424:	80 81       	ld	r24, Z
    3426:	91 81       	ldd	r25, Z+1	; 0x01
    3428:	84 0f       	add	r24, r20
    342a:	95 1f       	adc	r25, r21
    342c:	02 96       	adiw	r24, 0x02	; 2
    342e:	e9 01       	movw	r28, r18
    3430:	99 83       	std	Y+1, r25	; 0x01
    3432:	88 83       	st	Y, r24
    3434:	82 81       	ldd	r24, Z+2	; 0x02
    3436:	93 81       	ldd	r25, Z+3	; 0x03
    3438:	9b 83       	std	Y+3, r25	; 0x03
    343a:	8a 83       	std	Y+2, r24	; 0x02
    343c:	e0 e0       	ldi	r30, 0x00	; 0
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	12 96       	adiw	r26, 0x02	; 2
    3442:	8d 91       	ld	r24, X+
    3444:	9c 91       	ld	r25, X
    3446:	13 97       	sbiw	r26, 0x03	; 3
    3448:	00 97       	sbiw	r24, 0x00	; 0
    344a:	19 f0       	breq	.+6      	; 0x3452 <free+0xd4>
    344c:	fd 01       	movw	r30, r26
    344e:	dc 01       	movw	r26, r24
    3450:	f7 cf       	rjmp	.-18     	; 0x3440 <free+0xc2>
    3452:	8d 91       	ld	r24, X+
    3454:	9c 91       	ld	r25, X
    3456:	11 97       	sbiw	r26, 0x01	; 1
    3458:	9d 01       	movw	r18, r26
    345a:	2e 5f       	subi	r18, 0xFE	; 254
    345c:	3f 4f       	sbci	r19, 0xFF	; 255
    345e:	82 0f       	add	r24, r18
    3460:	93 1f       	adc	r25, r19
    3462:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <__brkval>
    3466:	30 91 8f 04 	lds	r19, 0x048F	; 0x80048f <__brkval+0x1>
    346a:	28 17       	cp	r18, r24
    346c:	39 07       	cpc	r19, r25
    346e:	69 f4       	brne	.+26     	; 0x348a <free+0x10c>
    3470:	30 97       	sbiw	r30, 0x00	; 0
    3472:	29 f4       	brne	.+10     	; 0x347e <free+0x100>
    3474:	10 92 91 04 	sts	0x0491, r1	; 0x800491 <__flp+0x1>
    3478:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <__flp>
    347c:	02 c0       	rjmp	.+4      	; 0x3482 <free+0x104>
    347e:	13 82       	std	Z+3, r1	; 0x03
    3480:	12 82       	std	Z+2, r1	; 0x02
    3482:	b0 93 8f 04 	sts	0x048F, r27	; 0x80048f <__brkval+0x1>
    3486:	a0 93 8e 04 	sts	0x048E, r26	; 0x80048e <__brkval>
    348a:	df 91       	pop	r29
    348c:	cf 91       	pop	r28
    348e:	08 95       	ret

00003490 <random_r>:
    3490:	8f 92       	push	r8
    3492:	9f 92       	push	r9
    3494:	af 92       	push	r10
    3496:	bf 92       	push	r11
    3498:	cf 92       	push	r12
    349a:	df 92       	push	r13
    349c:	ef 92       	push	r14
    349e:	ff 92       	push	r15
    34a0:	cf 93       	push	r28
    34a2:	df 93       	push	r29
    34a4:	ec 01       	movw	r28, r24
    34a6:	68 81       	ld	r22, Y
    34a8:	79 81       	ldd	r23, Y+1	; 0x01
    34aa:	8a 81       	ldd	r24, Y+2	; 0x02
    34ac:	9b 81       	ldd	r25, Y+3	; 0x03
    34ae:	61 15       	cp	r22, r1
    34b0:	71 05       	cpc	r23, r1
    34b2:	81 05       	cpc	r24, r1
    34b4:	91 05       	cpc	r25, r1
    34b6:	21 f4       	brne	.+8      	; 0x34c0 <random_r+0x30>
    34b8:	64 e2       	ldi	r22, 0x24	; 36
    34ba:	79 ed       	ldi	r23, 0xD9	; 217
    34bc:	8b e5       	ldi	r24, 0x5B	; 91
    34be:	97 e0       	ldi	r25, 0x07	; 7
    34c0:	2d e1       	ldi	r18, 0x1D	; 29
    34c2:	33 ef       	ldi	r19, 0xF3	; 243
    34c4:	41 e0       	ldi	r20, 0x01	; 1
    34c6:	50 e0       	ldi	r21, 0x00	; 0
    34c8:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__divmodsi4>
    34cc:	49 01       	movw	r8, r18
    34ce:	5a 01       	movw	r10, r20
    34d0:	9b 01       	movw	r18, r22
    34d2:	ac 01       	movw	r20, r24
    34d4:	a7 ea       	ldi	r26, 0xA7	; 167
    34d6:	b1 e4       	ldi	r27, 0x41	; 65
    34d8:	0e 94 0d 19 	call	0x321a	; 0x321a <__muluhisi3>
    34dc:	6b 01       	movw	r12, r22
    34de:	7c 01       	movw	r14, r24
    34e0:	ac ee       	ldi	r26, 0xEC	; 236
    34e2:	b4 ef       	ldi	r27, 0xF4	; 244
    34e4:	a5 01       	movw	r20, r10
    34e6:	94 01       	movw	r18, r8
    34e8:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__mulohisi3>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	8c 0d       	add	r24, r12
    34f2:	9d 1d       	adc	r25, r13
    34f4:	ae 1d       	adc	r26, r14
    34f6:	bf 1d       	adc	r27, r15
    34f8:	b7 ff       	sbrs	r27, 7
    34fa:	03 c0       	rjmp	.+6      	; 0x3502 <random_r+0x72>
    34fc:	01 97       	sbiw	r24, 0x01	; 1
    34fe:	a1 09       	sbc	r26, r1
    3500:	b0 48       	sbci	r27, 0x80	; 128
    3502:	88 83       	st	Y, r24
    3504:	99 83       	std	Y+1, r25	; 0x01
    3506:	aa 83       	std	Y+2, r26	; 0x02
    3508:	bb 83       	std	Y+3, r27	; 0x03
    350a:	bc 01       	movw	r22, r24
    350c:	cd 01       	movw	r24, r26
    350e:	9f 77       	andi	r25, 0x7F	; 127
    3510:	df 91       	pop	r29
    3512:	cf 91       	pop	r28
    3514:	ff 90       	pop	r15
    3516:	ef 90       	pop	r14
    3518:	df 90       	pop	r13
    351a:	cf 90       	pop	r12
    351c:	bf 90       	pop	r11
    351e:	af 90       	pop	r10
    3520:	9f 90       	pop	r9
    3522:	8f 90       	pop	r8
    3524:	08 95       	ret

00003526 <random>:
    3526:	8f 92       	push	r8
    3528:	9f 92       	push	r9
    352a:	af 92       	push	r10
    352c:	bf 92       	push	r11
    352e:	cf 92       	push	r12
    3530:	df 92       	push	r13
    3532:	ef 92       	push	r14
    3534:	ff 92       	push	r15
    3536:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <next>
    353a:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <next+0x1>
    353e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <next+0x2>
    3542:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <next+0x3>
    3546:	61 15       	cp	r22, r1
    3548:	71 05       	cpc	r23, r1
    354a:	81 05       	cpc	r24, r1
    354c:	91 05       	cpc	r25, r1
    354e:	21 f4       	brne	.+8      	; 0x3558 <random+0x32>
    3550:	64 e2       	ldi	r22, 0x24	; 36
    3552:	79 ed       	ldi	r23, 0xD9	; 217
    3554:	8b e5       	ldi	r24, 0x5B	; 91
    3556:	97 e0       	ldi	r25, 0x07	; 7
    3558:	2d e1       	ldi	r18, 0x1D	; 29
    355a:	33 ef       	ldi	r19, 0xF3	; 243
    355c:	41 e0       	ldi	r20, 0x01	; 1
    355e:	50 e0       	ldi	r21, 0x00	; 0
    3560:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__divmodsi4>
    3564:	49 01       	movw	r8, r18
    3566:	5a 01       	movw	r10, r20
    3568:	9b 01       	movw	r18, r22
    356a:	ac 01       	movw	r20, r24
    356c:	a7 ea       	ldi	r26, 0xA7	; 167
    356e:	b1 e4       	ldi	r27, 0x41	; 65
    3570:	0e 94 0d 19 	call	0x321a	; 0x321a <__muluhisi3>
    3574:	6b 01       	movw	r12, r22
    3576:	7c 01       	movw	r14, r24
    3578:	ac ee       	ldi	r26, 0xEC	; 236
    357a:	b4 ef       	ldi	r27, 0xF4	; 244
    357c:	a5 01       	movw	r20, r10
    357e:	94 01       	movw	r18, r8
    3580:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__mulohisi3>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	8c 0d       	add	r24, r12
    358a:	9d 1d       	adc	r25, r13
    358c:	ae 1d       	adc	r26, r14
    358e:	bf 1d       	adc	r27, r15
    3590:	b7 ff       	sbrs	r27, 7
    3592:	03 c0       	rjmp	.+6      	; 0x359a <random+0x74>
    3594:	01 97       	sbiw	r24, 0x01	; 1
    3596:	a1 09       	sbc	r26, r1
    3598:	b0 48       	sbci	r27, 0x80	; 128
    359a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    359e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    35a2:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    35a6:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    35aa:	bc 01       	movw	r22, r24
    35ac:	cd 01       	movw	r24, r26
    35ae:	9f 77       	andi	r25, 0x7F	; 127
    35b0:	ff 90       	pop	r15
    35b2:	ef 90       	pop	r14
    35b4:	df 90       	pop	r13
    35b6:	cf 90       	pop	r12
    35b8:	bf 90       	pop	r11
    35ba:	af 90       	pop	r10
    35bc:	9f 90       	pop	r9
    35be:	8f 90       	pop	r8
    35c0:	08 95       	ret

000035c2 <srandom>:
    35c2:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <next>
    35c6:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <next+0x1>
    35ca:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <next+0x2>
    35ce:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <next+0x3>
    35d2:	08 95       	ret

000035d4 <realloc>:
    35d4:	a0 e0       	ldi	r26, 0x00	; 0
    35d6:	b0 e0       	ldi	r27, 0x00	; 0
    35d8:	e0 ef       	ldi	r30, 0xF0	; 240
    35da:	fa e1       	ldi	r31, 0x1A	; 26
    35dc:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__prologue_saves__+0x8>
    35e0:	ec 01       	movw	r28, r24
    35e2:	00 97       	sbiw	r24, 0x00	; 0
    35e4:	21 f4       	brne	.+8      	; 0x35ee <realloc+0x1a>
    35e6:	cb 01       	movw	r24, r22
    35e8:	0e 94 27 19 	call	0x324e	; 0x324e <malloc>
    35ec:	b4 c0       	rjmp	.+360    	; 0x3756 <realloc+0x182>
    35ee:	fc 01       	movw	r30, r24
    35f0:	e6 0f       	add	r30, r22
    35f2:	f7 1f       	adc	r31, r23
    35f4:	9c 01       	movw	r18, r24
    35f6:	22 50       	subi	r18, 0x02	; 2
    35f8:	31 09       	sbc	r19, r1
    35fa:	e2 17       	cp	r30, r18
    35fc:	f3 07       	cpc	r31, r19
    35fe:	08 f4       	brcc	.+2      	; 0x3602 <realloc+0x2e>
    3600:	a8 c0       	rjmp	.+336    	; 0x3752 <realloc+0x17e>
    3602:	d9 01       	movw	r26, r18
    3604:	0d 91       	ld	r16, X+
    3606:	1c 91       	ld	r17, X
    3608:	11 97       	sbiw	r26, 0x01	; 1
    360a:	06 17       	cp	r16, r22
    360c:	17 07       	cpc	r17, r23
    360e:	b0 f0       	brcs	.+44     	; 0x363c <realloc+0x68>
    3610:	05 30       	cpi	r16, 0x05	; 5
    3612:	11 05       	cpc	r17, r1
    3614:	08 f4       	brcc	.+2      	; 0x3618 <realloc+0x44>
    3616:	9b c0       	rjmp	.+310    	; 0x374e <realloc+0x17a>
    3618:	c8 01       	movw	r24, r16
    361a:	04 97       	sbiw	r24, 0x04	; 4
    361c:	86 17       	cp	r24, r22
    361e:	97 07       	cpc	r25, r23
    3620:	08 f4       	brcc	.+2      	; 0x3624 <realloc+0x50>
    3622:	95 c0       	rjmp	.+298    	; 0x374e <realloc+0x17a>
    3624:	02 50       	subi	r16, 0x02	; 2
    3626:	11 09       	sbc	r17, r1
    3628:	06 1b       	sub	r16, r22
    362a:	17 0b       	sbc	r17, r23
    362c:	01 93       	st	Z+, r16
    362e:	11 93       	st	Z+, r17
    3630:	6d 93       	st	X+, r22
    3632:	7c 93       	st	X, r23
    3634:	cf 01       	movw	r24, r30
    3636:	0e 94 bf 19 	call	0x337e	; 0x337e <free>
    363a:	89 c0       	rjmp	.+274    	; 0x374e <realloc+0x17a>
    363c:	5b 01       	movw	r10, r22
    363e:	a0 1a       	sub	r10, r16
    3640:	b1 0a       	sbc	r11, r17
    3642:	4c 01       	movw	r8, r24
    3644:	80 0e       	add	r8, r16
    3646:	91 1e       	adc	r9, r17
    3648:	a0 91 90 04 	lds	r26, 0x0490	; 0x800490 <__flp>
    364c:	b0 91 91 04 	lds	r27, 0x0491	; 0x800491 <__flp+0x1>
    3650:	61 2c       	mov	r6, r1
    3652:	71 2c       	mov	r7, r1
    3654:	e1 2c       	mov	r14, r1
    3656:	f1 2c       	mov	r15, r1
    3658:	10 97       	sbiw	r26, 0x00	; 0
    365a:	09 f4       	brne	.+2      	; 0x365e <realloc+0x8a>
    365c:	46 c0       	rjmp	.+140    	; 0x36ea <realloc+0x116>
    365e:	8d 91       	ld	r24, X+
    3660:	9c 91       	ld	r25, X
    3662:	11 97       	sbiw	r26, 0x01	; 1
    3664:	a8 15       	cp	r26, r8
    3666:	b9 05       	cpc	r27, r9
    3668:	b1 f5       	brne	.+108    	; 0x36d6 <realloc+0x102>
    366a:	6c 01       	movw	r12, r24
    366c:	42 e0       	ldi	r20, 0x02	; 2
    366e:	c4 0e       	add	r12, r20
    3670:	d1 1c       	adc	r13, r1
    3672:	ca 14       	cp	r12, r10
    3674:	db 04       	cpc	r13, r11
    3676:	78 f1       	brcs	.+94     	; 0x36d6 <realloc+0x102>
    3678:	4c 01       	movw	r8, r24
    367a:	8a 18       	sub	r8, r10
    367c:	9b 08       	sbc	r9, r11
    367e:	64 01       	movw	r12, r8
    3680:	42 e0       	ldi	r20, 0x02	; 2
    3682:	c4 0e       	add	r12, r20
    3684:	d1 1c       	adc	r13, r1
    3686:	12 96       	adiw	r26, 0x02	; 2
    3688:	bc 90       	ld	r11, X
    368a:	12 97       	sbiw	r26, 0x02	; 2
    368c:	13 96       	adiw	r26, 0x03	; 3
    368e:	ac 91       	ld	r26, X
    3690:	b5 e0       	ldi	r27, 0x05	; 5
    3692:	cb 16       	cp	r12, r27
    3694:	d1 04       	cpc	r13, r1
    3696:	40 f0       	brcs	.+16     	; 0x36a8 <realloc+0xd4>
    3698:	b2 82       	std	Z+2, r11	; 0x02
    369a:	a3 83       	std	Z+3, r26	; 0x03
    369c:	91 82       	std	Z+1, r9	; 0x01
    369e:	80 82       	st	Z, r8
    36a0:	d9 01       	movw	r26, r18
    36a2:	6d 93       	st	X+, r22
    36a4:	7c 93       	st	X, r23
    36a6:	09 c0       	rjmp	.+18     	; 0x36ba <realloc+0xe6>
    36a8:	0e 5f       	subi	r16, 0xFE	; 254
    36aa:	1f 4f       	sbci	r17, 0xFF	; 255
    36ac:	80 0f       	add	r24, r16
    36ae:	91 1f       	adc	r25, r17
    36b0:	f9 01       	movw	r30, r18
    36b2:	91 83       	std	Z+1, r25	; 0x01
    36b4:	80 83       	st	Z, r24
    36b6:	eb 2d       	mov	r30, r11
    36b8:	fa 2f       	mov	r31, r26
    36ba:	e1 14       	cp	r14, r1
    36bc:	f1 04       	cpc	r15, r1
    36be:	31 f0       	breq	.+12     	; 0x36cc <realloc+0xf8>
    36c0:	d7 01       	movw	r26, r14
    36c2:	13 96       	adiw	r26, 0x03	; 3
    36c4:	fc 93       	st	X, r31
    36c6:	ee 93       	st	-X, r30
    36c8:	12 97       	sbiw	r26, 0x02	; 2
    36ca:	41 c0       	rjmp	.+130    	; 0x374e <realloc+0x17a>
    36cc:	f0 93 91 04 	sts	0x0491, r31	; 0x800491 <__flp+0x1>
    36d0:	e0 93 90 04 	sts	0x0490, r30	; 0x800490 <__flp>
    36d4:	3c c0       	rjmp	.+120    	; 0x374e <realloc+0x17a>
    36d6:	68 16       	cp	r6, r24
    36d8:	79 06       	cpc	r7, r25
    36da:	08 f4       	brcc	.+2      	; 0x36de <realloc+0x10a>
    36dc:	3c 01       	movw	r6, r24
    36de:	7d 01       	movw	r14, r26
    36e0:	12 96       	adiw	r26, 0x02	; 2
    36e2:	0d 90       	ld	r0, X+
    36e4:	bc 91       	ld	r27, X
    36e6:	a0 2d       	mov	r26, r0
    36e8:	b7 cf       	rjmp	.-146    	; 0x3658 <realloc+0x84>
    36ea:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <__brkval>
    36ee:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <__brkval+0x1>
    36f2:	88 16       	cp	r8, r24
    36f4:	99 06       	cpc	r9, r25
    36f6:	e1 f4       	brne	.+56     	; 0x3730 <realloc+0x15c>
    36f8:	66 16       	cp	r6, r22
    36fa:	77 06       	cpc	r7, r23
    36fc:	c8 f4       	brcc	.+50     	; 0x3730 <realloc+0x15c>
    36fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3702:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3706:	00 97       	sbiw	r24, 0x00	; 0
    3708:	41 f4       	brne	.+16     	; 0x371a <realloc+0x146>
    370a:	8d b7       	in	r24, 0x3d	; 61
    370c:	9e b7       	in	r25, 0x3e	; 62
    370e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3712:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3716:	84 1b       	sub	r24, r20
    3718:	95 0b       	sbc	r25, r21
    371a:	e8 17       	cp	r30, r24
    371c:	f9 07       	cpc	r31, r25
    371e:	c8 f4       	brcc	.+50     	; 0x3752 <realloc+0x17e>
    3720:	f0 93 8f 04 	sts	0x048F, r31	; 0x80048f <__brkval+0x1>
    3724:	e0 93 8e 04 	sts	0x048E, r30	; 0x80048e <__brkval>
    3728:	f9 01       	movw	r30, r18
    372a:	71 83       	std	Z+1, r23	; 0x01
    372c:	60 83       	st	Z, r22
    372e:	0f c0       	rjmp	.+30     	; 0x374e <realloc+0x17a>
    3730:	cb 01       	movw	r24, r22
    3732:	0e 94 27 19 	call	0x324e	; 0x324e <malloc>
    3736:	7c 01       	movw	r14, r24
    3738:	00 97       	sbiw	r24, 0x00	; 0
    373a:	59 f0       	breq	.+22     	; 0x3752 <realloc+0x17e>
    373c:	a8 01       	movw	r20, r16
    373e:	be 01       	movw	r22, r28
    3740:	0e 94 be 1b 	call	0x377c	; 0x377c <memcpy>
    3744:	ce 01       	movw	r24, r28
    3746:	0e 94 bf 19 	call	0x337e	; 0x337e <free>
    374a:	c7 01       	movw	r24, r14
    374c:	04 c0       	rjmp	.+8      	; 0x3756 <realloc+0x182>
    374e:	ce 01       	movw	r24, r28
    3750:	02 c0       	rjmp	.+4      	; 0x3756 <realloc+0x182>
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	cd b7       	in	r28, 0x3d	; 61
    3758:	de b7       	in	r29, 0x3e	; 62
    375a:	ee e0       	ldi	r30, 0x0E	; 14
    375c:	0c 94 05 1c 	jmp	0x380a	; 0x380a <__epilogue_restores__+0x8>

00003760 <abort>:
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	f8 94       	cli
    3766:	0c 94 1c 1c 	jmp	0x3838	; 0x3838 <__do_global_dtors>

0000376a <memcpy_P>:
    376a:	fb 01       	movw	r30, r22
    376c:	dc 01       	movw	r26, r24
    376e:	02 c0       	rjmp	.+4      	; 0x3774 <memcpy_P+0xa>
    3770:	05 90       	lpm	r0, Z+
    3772:	0d 92       	st	X+, r0
    3774:	41 50       	subi	r20, 0x01	; 1
    3776:	50 40       	sbci	r21, 0x00	; 0
    3778:	d8 f7       	brcc	.-10     	; 0x3770 <memcpy_P+0x6>
    377a:	08 95       	ret

0000377c <memcpy>:
    377c:	fb 01       	movw	r30, r22
    377e:	dc 01       	movw	r26, r24
    3780:	02 c0       	rjmp	.+4      	; 0x3786 <memcpy+0xa>
    3782:	01 90       	ld	r0, Z+
    3784:	0d 92       	st	X+, r0
    3786:	41 50       	subi	r20, 0x01	; 1
    3788:	50 40       	sbci	r21, 0x00	; 0
    378a:	d8 f7       	brcc	.-10     	; 0x3782 <memcpy+0x6>
    378c:	08 95       	ret

0000378e <strcpy>:
    378e:	fb 01       	movw	r30, r22
    3790:	dc 01       	movw	r26, r24
    3792:	01 90       	ld	r0, Z+
    3794:	0d 92       	st	X+, r0
    3796:	00 20       	and	r0, r0
    3798:	e1 f7       	brne	.-8      	; 0x3792 <strcpy+0x4>
    379a:	08 95       	ret

0000379c <strncpy>:
    379c:	fb 01       	movw	r30, r22
    379e:	dc 01       	movw	r26, r24
    37a0:	41 50       	subi	r20, 0x01	; 1
    37a2:	50 40       	sbci	r21, 0x00	; 0
    37a4:	48 f0       	brcs	.+18     	; 0x37b8 <strncpy+0x1c>
    37a6:	01 90       	ld	r0, Z+
    37a8:	0d 92       	st	X+, r0
    37aa:	00 20       	and	r0, r0
    37ac:	c9 f7       	brne	.-14     	; 0x37a0 <strncpy+0x4>
    37ae:	01 c0       	rjmp	.+2      	; 0x37b2 <strncpy+0x16>
    37b0:	1d 92       	st	X+, r1
    37b2:	41 50       	subi	r20, 0x01	; 1
    37b4:	50 40       	sbci	r21, 0x00	; 0
    37b6:	e0 f7       	brcc	.-8      	; 0x37b0 <strncpy+0x14>
    37b8:	08 95       	ret

000037ba <__mulshisi3>:
    37ba:	b7 ff       	sbrs	r27, 7
    37bc:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__muluhisi3>

000037c0 <__mulohisi3>:
    37c0:	0e 94 0d 19 	call	0x321a	; 0x321a <__muluhisi3>
    37c4:	82 1b       	sub	r24, r18
    37c6:	93 0b       	sbc	r25, r19
    37c8:	08 95       	ret

000037ca <__prologue_saves__>:
    37ca:	2f 92       	push	r2
    37cc:	3f 92       	push	r3
    37ce:	4f 92       	push	r4
    37d0:	5f 92       	push	r5
    37d2:	6f 92       	push	r6
    37d4:	7f 92       	push	r7
    37d6:	8f 92       	push	r8
    37d8:	9f 92       	push	r9
    37da:	af 92       	push	r10
    37dc:	bf 92       	push	r11
    37de:	cf 92       	push	r12
    37e0:	df 92       	push	r13
    37e2:	ef 92       	push	r14
    37e4:	ff 92       	push	r15
    37e6:	0f 93       	push	r16
    37e8:	1f 93       	push	r17
    37ea:	cf 93       	push	r28
    37ec:	df 93       	push	r29
    37ee:	cd b7       	in	r28, 0x3d	; 61
    37f0:	de b7       	in	r29, 0x3e	; 62
    37f2:	ca 1b       	sub	r28, r26
    37f4:	db 0b       	sbc	r29, r27
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	f8 94       	cli
    37fa:	de bf       	out	0x3e, r29	; 62
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	cd bf       	out	0x3d, r28	; 61
    3800:	09 94       	ijmp

00003802 <__epilogue_restores__>:
    3802:	2a 88       	ldd	r2, Y+18	; 0x12
    3804:	39 88       	ldd	r3, Y+17	; 0x11
    3806:	48 88       	ldd	r4, Y+16	; 0x10
    3808:	5f 84       	ldd	r5, Y+15	; 0x0f
    380a:	6e 84       	ldd	r6, Y+14	; 0x0e
    380c:	7d 84       	ldd	r7, Y+13	; 0x0d
    380e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3810:	9b 84       	ldd	r9, Y+11	; 0x0b
    3812:	aa 84       	ldd	r10, Y+10	; 0x0a
    3814:	b9 84       	ldd	r11, Y+9	; 0x09
    3816:	c8 84       	ldd	r12, Y+8	; 0x08
    3818:	df 80       	ldd	r13, Y+7	; 0x07
    381a:	ee 80       	ldd	r14, Y+6	; 0x06
    381c:	fd 80       	ldd	r15, Y+5	; 0x05
    381e:	0c 81       	ldd	r16, Y+4	; 0x04
    3820:	1b 81       	ldd	r17, Y+3	; 0x03
    3822:	aa 81       	ldd	r26, Y+2	; 0x02
    3824:	b9 81       	ldd	r27, Y+1	; 0x01
    3826:	ce 0f       	add	r28, r30
    3828:	d1 1d       	adc	r29, r1
    382a:	0f b6       	in	r0, 0x3f	; 63
    382c:	f8 94       	cli
    382e:	de bf       	out	0x3e, r29	; 62
    3830:	0f be       	out	0x3f, r0	; 63
    3832:	cd bf       	out	0x3d, r28	; 61
    3834:	ed 01       	movw	r28, r26
    3836:	08 95       	ret

00003838 <__do_global_dtors>:
    3838:	11 e0       	ldi	r17, 0x01	; 1
    383a:	cc e4       	ldi	r28, 0x4C	; 76
    383c:	d1 e0       	ldi	r29, 0x01	; 1
    383e:	04 c0       	rjmp	.+8      	; 0x3848 <__do_global_dtors+0x10>
    3840:	fe 01       	movw	r30, r28
    3842:	0e 94 07 19 	call	0x320e	; 0x320e <__tablejump2__>
    3846:	21 96       	adiw	r28, 0x01	; 1
    3848:	cd 34       	cpi	r28, 0x4D	; 77
    384a:	d1 07       	cpc	r29, r17
    384c:	c9 f7       	brne	.-14     	; 0x3840 <__do_global_dtors+0x8>
    384e:	f8 94       	cli

00003850 <__stop_program>:
    3850:	ff cf       	rjmp	.-2      	; 0x3850 <__stop_program>
