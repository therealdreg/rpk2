
leoencchat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001dc  00800100  00003856  000038ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003856  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000206  008002dc  008002dc  00003ac6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003ac6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003af8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000b80  00000000  00000000  00003b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017b85  00000000  00000000  000046b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000490e  00000000  00000000  0001c23d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006155  00000000  00000000  00020b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002514  00000000  00000000  00026ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004ee2  00000000  00000000  000291b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bf84  00000000  00000000  0002e096  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c30  00000000  00000000  0003a01a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__dtors_end>
       4:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__vector_1>
       8:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <__vector_2>
       c:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__vector_3>
      10:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__vector_4>
      14:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      18:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      1c:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <__vector_7>
      20:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      24:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      28:	0c 94 82 09 	jmp	0x1304	; 0x1304 <__vector_10>
      2c:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__vector_11>
      30:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      34:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      38:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      3c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      40:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      44:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      48:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      4c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      50:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      54:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      58:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      5c:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__vector_23>
      60:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      64:	0c 94 24 04 	jmp	0x848	; 0x848 <__vector_25>
      68:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__vector_26>
      6c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      70:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      74:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      78:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      7c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      80:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      84:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      88:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      8c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      90:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      94:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      98:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      9c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      a0:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      a4:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      a8:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      ac:	3b 0b       	sbc	r19, r27
      ae:	3e 0b       	sbc	r19, r30
      b0:	2d 0b       	sbc	r18, r29
      b2:	31 0b       	sbc	r19, r17
      b4:	37 0b       	sbc	r19, r23
      b6:	5f 0b       	sbc	r21, r31
      b8:	5f 0b       	sbc	r21, r31
      ba:	5f 0b       	sbc	r21, r31
      bc:	42 0b       	sbc	r20, r18
      be:	46 0b       	sbc	r20, r22
      c0:	4a 0b       	sbc	r20, r26
      c2:	50 0b       	sbc	r21, r16
      c4:	54 0b       	sbc	r21, r20
      c6:	5f 0b       	sbc	r21, r31
      c8:	5a 0b       	sbc	r21, r26

000000ca <USB_DeviceDescriptorIAD>:
      ca:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      da:	03 01                                               ..

000000dc <STRING_MANUFACTURER>:
      dc:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000e8 <STRING_PRODUCT>:
      e8:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000000f9 <STRING_LANGUAGE>:
      f9:	04 03 09 04                                         ....

000000fd <digital_pin_to_timer_PGM>:
      fd:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

0000011c <digital_pin_to_bit_mask_PGM>:
     11c:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     12c:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

0000013b <digital_pin_to_port_PGM>:
     13b:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     14b:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

0000015a <port_to_output_PGM>:
     15a:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000168 <port_to_mode_PGM>:
     168:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000176 <_ZL18MODEM_CONFIG_TABLE>:
     176:	00 3e 80 00 52 f4 f4 d0 00 34 15 00 4f f4 f4 d0     .>..R....4..O...
     186:	00 1a 0b 00 9d f4 f4 d0 00 0d 05 01 3b f4 f4 d0     ............;...
     196:	00 06 83 02 75 f3 f3 d0 00 03 41 04 ea f2 f2 d0     ....u.....A.....
     1a6:	00 02 2c 07 ae e2 e2 d0 00 01 00 08 00 e1 e1 d0     ..,.............
     1b6:	00 00 80 10 00 e0 e0 d0 00 02 40 03 33 42 42 d0     ..........@.3BB.
     1c6:	01 3e 80 00 52 f4 f5 d0 01 34 15 00 4f f4 f4 d0     .>..R....4..O...
     1d6:	01 1a 0b 00 9d f4 f4 d0 01 0d 05 01 3b f4 f4 d0     ............;...
     1e6:	01 06 83 02 75 f3 f3 d0 01 03 41 04 ea f2 f2 d0     ....u.....A.....
     1f6:	01 02 2c 07 ae e2 e2 d0 01 01 00 08 00 e1 e1 d0     ..,.............
     206:	01 00 80 10 00 e0 e0 d0 01 02 40 03 33 42 42 d0     ..........@.3BB.
     216:	08 7d 00 00 10 88 88 d0 08 68 2b 00 10 f1 f1 d0     .}.......h+.....
     226:	08 34 15 00 10 f5 f5 d0 08 1a 0b 00 10 f4 f4 d0     .4..............
     236:	08 0d 05 00 10 f3 f3 d0 08 06 83 00 10 f2 f2 d0     ................
     246:	08 03 e8 00 10 e2 e2 d0                             ........

0000024e <_cdcInterface>:
     24e:	08 0b 00 02 02 02 00 00 09 04 00 00 01 02 02 00     ................
     25e:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     26e:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     27e:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
	...

00000290 <__ctors_start>:
     290:	a8 01       	movw	r20, r16
     292:	86 04       	cpc	r8, r6
     294:	a1 0e       	add	r10, r17
     296:	36 14       	cp	r3, r6

00000298 <__ctors_end>:
     298:	b6 01       	movw	r22, r12

0000029a <__dtors_end>:
     29a:	11 24       	eor	r1, r1
     29c:	1f be       	out	0x3f, r1	; 63
     29e:	cf ef       	ldi	r28, 0xFF	; 255
     2a0:	da e0       	ldi	r29, 0x0A	; 10
     2a2:	de bf       	out	0x3e, r29	; 62
     2a4:	cd bf       	out	0x3d, r28	; 61

000002a6 <__do_copy_data>:
     2a6:	12 e0       	ldi	r17, 0x02	; 2
     2a8:	a0 e0       	ldi	r26, 0x00	; 0
     2aa:	b1 e0       	ldi	r27, 0x01	; 1
     2ac:	e6 e5       	ldi	r30, 0x56	; 86
     2ae:	f8 e3       	ldi	r31, 0x38	; 56
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <__do_copy_data+0x10>
     2b2:	05 90       	lpm	r0, Z+
     2b4:	0d 92       	st	X+, r0
     2b6:	ac 3d       	cpi	r26, 0xDC	; 220
     2b8:	b1 07       	cpc	r27, r17
     2ba:	d9 f7       	brne	.-10     	; 0x2b2 <__do_copy_data+0xc>

000002bc <__do_clear_bss>:
     2bc:	24 e0       	ldi	r18, 0x04	; 4
     2be:	ac ed       	ldi	r26, 0xDC	; 220
     2c0:	b2 e0       	ldi	r27, 0x02	; 2
     2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <.do_clear_bss_start>

000002c4 <.do_clear_bss_loop>:
     2c4:	1d 92       	st	X+, r1

000002c6 <.do_clear_bss_start>:
     2c6:	a2 3e       	cpi	r26, 0xE2	; 226
     2c8:	b2 07       	cpc	r27, r18
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <.do_clear_bss_loop>

000002cc <__do_global_ctors>:
     2cc:	11 e0       	ldi	r17, 0x01	; 1
     2ce:	cc e4       	ldi	r28, 0x4C	; 76
     2d0:	d1 e0       	ldi	r29, 0x01	; 1
     2d2:	04 c0       	rjmp	.+8      	; 0x2dc <__do_global_ctors+0x10>
     2d4:	21 97       	sbiw	r28, 0x01	; 1
     2d6:	fe 01       	movw	r30, r28
     2d8:	0e 94 02 19 	call	0x3204	; 0x3204 <__tablejump2__>
     2dc:	c8 34       	cpi	r28, 0x48	; 72
     2de:	d1 07       	cpc	r29, r17
     2e0:	c9 f7       	brne	.-14     	; 0x2d4 <__do_global_ctors+0x8>
     2e2:	0e 94 b4 04 	call	0x968	; 0x968 <main>
     2e6:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__do_global_dtors>

000002ea <__bad_interrupt>:
     2ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002ee <_Z18switch_usb_to_at90v>:
char rfdata[RH_RF69_MAX_MESSAGE_LEN + 1] = { 0 }; // Data to be sent through RF


void switch_usb_to_at90(void)
{
    set_bit(DDRD, DDD7);
     2ee:	57 9a       	sbi	0x0a, 7	; 10
    delay(500);
     2f0:	64 ef       	ldi	r22, 0xF4	; 244
     2f2:	71 e0       	ldi	r23, 0x01	; 1
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 91 0a 	call	0x1522	; 0x1522 <delay>
    clear_bit(PORTD, PD7);
     2fc:	5f 98       	cbi	0x0b, 7	; 11
    delay(500);
     2fe:	64 ef       	ldi	r22, 0xF4	; 244
     300:	71 e0       	ldi	r23, 0x01	; 1
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 91 0a 	call	0x1522	; 0x1522 <delay>
    clear_bit(PORTF, PF1);
     30a:	89 98       	cbi	0x11, 1	; 17
    delay(500);
     30c:	64 ef       	ldi	r22, 0xF4	; 244
     30e:	71 e0       	ldi	r23, 0x01	; 1
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 91 0a 	call	0x1522	; 0x1522 <delay>
    set_bit(DDRF, DDF0);
     318:	80 9a       	sbi	0x10, 0	; 16
    delay(500);
     31a:	64 ef       	ldi	r22, 0xF4	; 244
     31c:	71 e0       	ldi	r23, 0x01	; 1
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 91 0a 	call	0x1522	; 0x1522 <delay>
    set_bit(PORTF, PF0);
     326:	88 9a       	sbi	0x11, 0	; 17
    delay(500);
     328:	64 ef       	ldi	r22, 0xF4	; 244
     32a:	71 e0       	ldi	r23, 0x01	; 1
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 91 0a 	call	0x1522	; 0x1522 <delay>
    set_bit(DDRF, DDF1);
     334:	81 9a       	sbi	0x10, 1	; 16
    delay(500);
     336:	64 ef       	ldi	r22, 0xF4	; 244
     338:	71 e0       	ldi	r23, 0x01	; 1
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 91 0a 	call	0x1522	; 0x1522 <delay>
    set_bit(PORTF, PF1);
     342:	89 9a       	sbi	0x11, 1	; 17
    delay(500);
     344:	64 ef       	ldi	r22, 0xF4	; 244
     346:	71 e0       	ldi	r23, 0x01	; 1
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <delay>

00000350 <_GLOBAL__sub_I_rf69>:
#define RFM69_RST     4  
#define LED_1           8
#define LED_2           9
#define Serial Serial1

RH_RF69 rf69(RFM69_CS, RFM69_INT);
     350:	2f e6       	ldi	r18, 0x6F	; 111
     352:	34 e0       	ldi	r19, 0x04	; 4
     354:	43 e0       	ldi	r20, 0x03	; 3
     356:	67 e0       	ldi	r22, 0x07	; 7
     358:	8c e5       	ldi	r24, 0x5C	; 92
     35a:	93 e0       	ldi	r25, 0x03	; 3
     35c:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <_ZN7RH_RF69C1EhhR12RHGenericSPI>

String serial_input = "";       // Hold serial input
     360:	64 ed       	ldi	r22, 0xD4	; 212
     362:	71 e0       	ldi	r23, 0x01	; 1
     364:	86 e5       	ldi	r24, 0x56	; 86
     366:	93 e0       	ldi	r25, 0x03	; 3
     368:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <_ZN6StringC1EPKc>

0000036c <_GLOBAL__sub_D_rf69>:
     36c:	86 e5       	ldi	r24, 0x56	; 86
     36e:	93 e0       	ldi	r25, 0x03	; 3
     370:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <_ZN6StringD1Ev>

00000374 <setup>:
    set_bit(PORTF, PF1);
    delay(500);
}

void setup() 
{
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	60 97       	sbiw	r28, 0x10	; 16
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     38c:	26 e0       	ldi	r18, 0x06	; 6
     38e:	40 e8       	ldi	r20, 0x80	; 128
     390:	55 e2       	ldi	r21, 0x25	; 37
     392:	60 e0       	ldi	r22, 0x00	; 0
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	8f eb       	ldi	r24, 0xBF	; 191
     398:	93 e0       	ldi	r25, 0x03	; 3
     39a:	0e 94 bf 03 	call	0x77e	; 0x77e <_ZN14HardwareSerial5beginEmh>
  Serial.begin(9600);

 switch_usb_to_at90();
     39e:	0e 94 77 01 	call	0x2ee	; 0x2ee <_Z18switch_usb_to_at90v>
    
 pinMode(A5, OUTPUT);     
     3a2:	61 e0       	ldi	r22, 0x01	; 1
     3a4:	87 e1       	ldi	r24, 0x17	; 23
     3a6:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <pinMode>
 digitalWrite(A5, HIGH);
     3aa:	61 e0       	ldi	r22, 0x01	; 1
     3ac:	87 e1       	ldi	r24, 0x17	; 23
     3ae:	0e 94 9c 0b 	call	0x1738	; 0x1738 <digitalWrite>

  pinMode(LED_1, OUTPUT);
     3b2:	61 e0       	ldi	r22, 0x01	; 1
     3b4:	88 e0       	ldi	r24, 0x08	; 8
     3b6:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <pinMode>
  pinMode(LED_2, OUTPUT);
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	89 e0       	ldi	r24, 0x09	; 9
     3be:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <pinMode>
      
  pinMode(RFM69_RST, OUTPUT);
     3c2:	61 e0       	ldi	r22, 0x01	; 1
     3c4:	84 e0       	ldi	r24, 0x04	; 4
     3c6:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <pinMode>
  digitalWrite(RFM69_RST, LOW);
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	84 e0       	ldi	r24, 0x04	; 4
     3ce:	0e 94 9c 0b 	call	0x1738	; 0x1738 <digitalWrite>

  Serial.println("\r\n\r\nArduino Leonardo RFM69 RX Test!");
     3d2:	68 e3       	ldi	r22, 0x38	; 56
     3d4:	71 e0       	ldi	r23, 0x01	; 1
     3d6:	8f eb       	ldi	r24, 0xBF	; 191
     3d8:	93 e0       	ldi	r25, 0x03	; 3
     3da:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN5Print7printlnEPKc>
  Serial.println();
     3de:	8f eb       	ldi	r24, 0xBF	; 191
     3e0:	93 e0       	ldi	r25, 0x03	; 3
     3e2:	0e 94 1d 05 	call	0xa3a	; 0xa3a <_ZN5Print7printlnEv>

  // manual reset
  digitalWrite(RFM69_RST, HIGH);
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	84 e0       	ldi	r24, 0x04	; 4
     3ea:	0e 94 9c 0b 	call	0x1738	; 0x1738 <digitalWrite>
  delay(10);
     3ee:	6a e0       	ldi	r22, 0x0A	; 10
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 91 0a 	call	0x1522	; 0x1522 <delay>
  digitalWrite(RFM69_RST, LOW);
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	84 e0       	ldi	r24, 0x04	; 4
     3fe:	0e 94 9c 0b 	call	0x1738	; 0x1738 <digitalWrite>
  delay(10);
     402:	6a e0       	ldi	r22, 0x0A	; 10
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 91 0a 	call	0x1522	; 0x1522 <delay>
  
  if (!rf69.init()) {
     40e:	8c e5       	ldi	r24, 0x5C	; 92
     410:	93 e0       	ldi	r25, 0x03	; 3
     412:	0e 94 34 12 	call	0x2468	; 0x2468 <_ZN7RH_RF694initEv>
     416:	81 11       	cpse	r24, r1
     418:	07 c0       	rjmp	.+14     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
    Serial.println("RFM69 radio init failed");
     41a:	6c e5       	ldi	r22, 0x5C	; 92
     41c:	71 e0       	ldi	r23, 0x01	; 1
     41e:	8f eb       	ldi	r24, 0xBF	; 191
     420:	93 e0       	ldi	r25, 0x03	; 3
     422:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN5Print7printlnEPKc>
     426:	ff cf       	rjmp	.-2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
    while (1);
  }
  Serial.println("RFM69 radio init OK!");
     428:	64 e7       	ldi	r22, 0x74	; 116
     42a:	71 e0       	ldi	r23, 0x01	; 1
     42c:	8f eb       	ldi	r24, 0xBF	; 191
     42e:	93 e0       	ldi	r25, 0x03	; 3
     430:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN5Print7printlnEPKc>
  
  // Defaults after init are 434.0MHz, modulation GFSK_Rb250Fd250, +13dbM (for low power module)
  // No encryption
  if (!rf69.setFrequency(RF69_FREQ)) {
     434:	0d ec       	ldi	r16, 0xCD	; 205
     436:	1c ec       	ldi	r17, 0xCC	; 204
     438:	2c e4       	ldi	r18, 0x4C	; 76
     43a:	3d e3       	ldi	r19, 0x3D	; 61
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	50 e0       	ldi	r21, 0x00	; 0
     440:	69 ed       	ldi	r22, 0xD9	; 217
     442:	73 e4       	ldi	r23, 0x43	; 67
     444:	8c e5       	ldi	r24, 0x5C	; 92
     446:	93 e0       	ldi	r25, 0x03	; 3
     448:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <_ZN7RH_RF6912setFrequencyEff>
     44c:	81 11       	cpse	r24, r1
     44e:	06 c0       	rjmp	.+12     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
    Serial.println("setFrequency failed");
     450:	69 e8       	ldi	r22, 0x89	; 137
     452:	71 e0       	ldi	r23, 0x01	; 1
     454:	8f eb       	ldi	r24, 0xBF	; 191
     456:	93 e0       	ldi	r25, 0x03	; 3
     458:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN5Print7printlnEPKc>
  }

  // If you are using a high power RF69 eg RFM69HW, you *must* set a Tx power with the
  // ishighpowermodule flag set like this:
  rf69.setTxPower(20, true);  // range from 14-20 for power, 2nd arg must be true for 69HCW
     45c:	41 e0       	ldi	r20, 0x01	; 1
     45e:	64 e1       	ldi	r22, 0x14	; 20
     460:	8c e5       	ldi	r24, 0x5C	; 92
     462:	93 e0       	ldi	r25, 0x03	; 3
     464:	0e 94 5e 11 	call	0x22bc	; 0x22bc <_ZN7RH_RF6910setTxPowerEab>

  // The encryption key has to be the same as the one in the server
  uint8_t key[] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
     468:	80 e1       	ldi	r24, 0x10	; 16
     46a:	e8 e2       	ldi	r30, 0x28	; 40
     46c:	f1 e0       	ldi	r31, 0x01	; 1
     46e:	de 01       	movw	r26, r28
     470:	11 96       	adiw	r26, 0x01	; 1
     472:	01 90       	ld	r0, Z+
     474:	0d 92       	st	X+, r0
     476:	8a 95       	dec	r24
     478:	e1 f7       	brne	.-8      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
  rf69.setEncryptionKey(key);
     47a:	be 01       	movw	r22, r28
     47c:	6f 5f       	subi	r22, 0xFF	; 255
     47e:	7f 4f       	sbci	r23, 0xFF	; 255
     480:	8c e5       	ldi	r24, 0x5C	; 92
     482:	93 e0       	ldi	r25, 0x03	; 3
     484:	0e 94 19 12 	call	0x2432	; 0x2432 <_ZN7RH_RF6916setEncryptionKeyEPh>
  


  Serial.print("RFM69 radio @");  Serial.print((int)RF69_FREQ);  Serial.println(" MHz");
     488:	6d e9       	ldi	r22, 0x9D	; 157
     48a:	71 e0       	ldi	r23, 0x01	; 1
     48c:	8f eb       	ldi	r24, 0xBF	; 191
     48e:	93 e0       	ldi	r25, 0x03	; 3
     490:	0e 94 14 05 	call	0xa28	; 0xa28 <_ZN5Print5printEPKc>
     494:	4a e0       	ldi	r20, 0x0A	; 10
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	62 eb       	ldi	r22, 0xB2	; 178
     49a:	71 e0       	ldi	r23, 0x01	; 1
     49c:	8f eb       	ldi	r24, 0xBF	; 191
     49e:	93 e0       	ldi	r25, 0x03	; 3
     4a0:	0e 94 d6 05 	call	0xbac	; 0xbac <_ZN5Print5printEii>
     4a4:	6b ea       	ldi	r22, 0xAB	; 171
     4a6:	71 e0       	ldi	r23, 0x01	; 1
     4a8:	8f eb       	ldi	r24, 0xBF	; 191
     4aa:	93 e0       	ldi	r25, 0x03	; 3
     4ac:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN5Print7printlnEPKc>
}
     4b0:	60 96       	adiw	r28, 0x10	; 16
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	f8 94       	cli
     4b6:	de bf       	out	0x3e, r29	; 62
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	08 95       	ret

000004c6 <loop>:

void loop() {
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29

  // Check if there is any character to read
	while (Serial.available()) {
     4ca:	8f eb       	ldi	r24, 0xBF	; 191
     4cc:	93 e0       	ldi	r25, 0x03	; 3
     4ce:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN14HardwareSerial9availableEv>
     4d2:	89 2b       	or	r24, r25
     4d4:	71 f0       	breq	.+28     	; 0x4f2 <loop+0x2c>
		// Read 1 byte
		char input_char = (char)Serial.read();
     4d6:	8f eb       	ldi	r24, 0xBF	; 191
     4d8:	93 e0       	ldi	r25, 0x03	; 3
     4da:	0e 94 ff 02 	call	0x5fe	; 0x5fe <_ZN14HardwareSerial4readEv>
		    if (input_char != '\n'  && input_char != '\r') {
     4de:	8a 30       	cpi	r24, 0x0A	; 10
     4e0:	a1 f1       	breq	.+104    	; 0x54a <loop+0x84>
     4e2:	8d 30       	cpi	r24, 0x0D	; 13
     4e4:	91 f3       	breq	.-28     	; 0x4ca <loop+0x4>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     4e6:	68 2f       	mov	r22, r24
     4e8:	86 e5       	ldi	r24, 0x56	; 86
     4ea:	93 e0       	ldi	r25, 0x03	; 3
     4ec:	0e 94 96 0c 	call	0x192c	; 0x192c <_ZN6String6concatEc>
     4f0:	ec cf       	rjmp	.-40     	; 0x4ca <loop+0x4>
					memset(rfdata, 0, strlen(rfdata));
				}
	}
	
  // Check if there is anything to receive
  if (rf69.recv(rec_buf, &rec_buf_len)) {
     4f2:	4a e0       	ldi	r20, 0x0A	; 10
     4f4:	51 e0       	ldi	r21, 0x01	; 1
     4f6:	69 e1       	ldi	r22, 0x19	; 25
     4f8:	73 e0       	ldi	r23, 0x03	; 3
     4fa:	8c e5       	ldi	r24, 0x5C	; 92
     4fc:	93 e0       	ldi	r25, 0x03	; 3
     4fe:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <_ZN7RH_RF694recvEPhS0_>
     502:	88 23       	and	r24, r24
     504:	d1 f0       	breq	.+52     	; 0x53a <loop+0x74>
	  if (!rec_buf_len) return;
     506:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rec_buf_len>
     50a:	88 23       	and	r24, r24
     50c:	09 f4       	brne	.+2      	; 0x510 <loop+0x4a>
     50e:	5a c0       	rjmp	.+180    	; 0x5c4 <loop+0xfe>
	  Serial.print("Feather: "); Serial.println((char*)rec_buf);
     510:	60 eb       	ldi	r22, 0xB0	; 176
     512:	71 e0       	ldi	r23, 0x01	; 1
     514:	8f eb       	ldi	r24, 0xBF	; 191
     516:	93 e0       	ldi	r25, 0x03	; 3
     518:	0e 94 14 05 	call	0xa28	; 0xa28 <_ZN5Print5printEPKc>
     51c:	69 e1       	ldi	r22, 0x19	; 25
     51e:	73 e0       	ldi	r23, 0x03	; 3
     520:	8f eb       	ldi	r24, 0xBF	; 191
     522:	93 e0       	ldi	r25, 0x03	; 3
     524:	0e 94 33 05 	call	0xa66	; 0xa66 <_ZN5Print7printlnEPKc>
		memset(rec_buf, 0, rec_buf_len);
     528:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <rec_buf_len>
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	89 e1       	ldi	r24, 0x19	; 25
     534:	93 e0       	ldi	r25, 0x03	; 3
     536:	0e 94 c2 1b 	call	0x3784	; 0x3784 <memset>
  }

	// Delay between loop iterations
	delay(500);
     53a:	64 ef       	ldi	r22, 0xF4	; 244
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
	  Serial.print("Feather: "); Serial.println((char*)rec_buf);
		memset(rec_buf, 0, rec_buf_len);
  }

	// Delay between loop iterations
	delay(500);
     546:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <delay>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	4c e3       	ldi	r20, 0x3C	; 60
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	6c ed       	ldi	r22, 0xDC	; 220
     554:	72 e0       	ldi	r23, 0x02	; 2
     556:	86 e5       	ldi	r24, 0x56	; 86
     558:	93 e0       	ldi	r25, 0x03	; 3
     55a:	0e 94 a9 0c 	call	0x1952	; 0x1952 <_ZNK6String8getBytesEPhjj>
				// If eol clean input and send it through rf
				if (input_char == '\n') {
					// Cast input buffer to char array
					serial_input.toCharArray(rfdata, RH_RF69_MAX_MESSAGE_LEN);
					// Send the data
					rf69.send((uint8_t *)rfdata, strlen(rfdata));
     55e:	cc ed       	ldi	r28, 0xDC	; 220
     560:	d2 e0       	ldi	r29, 0x02	; 2
     562:	fe 01       	movw	r30, r28
     564:	01 90       	ld	r0, Z+
     566:	00 20       	and	r0, r0
     568:	e9 f7       	brne	.-6      	; 0x564 <loop+0x9e>
     56a:	31 97       	sbiw	r30, 0x01	; 1
     56c:	af 01       	movw	r20, r30
     56e:	4c 5d       	subi	r20, 0xDC	; 220
     570:	52 40       	sbci	r21, 0x02	; 2
     572:	be 01       	movw	r22, r28
     574:	8c e5       	ldi	r24, 0x5C	; 92
     576:	93 e0       	ldi	r25, 0x03	; 3
     578:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <_ZN7RH_RF694sendEPKhh>
					rf69.waitPacketSent();
     57c:	8c e5       	ldi	r24, 0x5C	; 92
     57e:	93 e0       	ldi	r25, 0x03	; 3
     580:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <_ZN15RHGenericDriver14waitPacketSentEv>
					Serial.print("Leo: "); Serial.println(serial_input);
     584:	6a eb       	ldi	r22, 0xBA	; 186
     586:	71 e0       	ldi	r23, 0x01	; 1
     588:	8f eb       	ldi	r24, 0xBF	; 191
     58a:	93 e0       	ldi	r25, 0x03	; 3
     58c:	0e 94 14 05 	call	0xa28	; 0xa28 <_ZN5Print5printEPKc>
     590:	66 e5       	ldi	r22, 0x56	; 86
     592:	73 e0       	ldi	r23, 0x03	; 3
     594:	8f eb       	ldi	r24, 0xBF	; 191
     596:	93 e0       	ldi	r25, 0x03	; 3
     598:	0e 94 21 05 	call	0xa42	; 0xa42 <_ZN5Print7printlnERK6String>
					// Clear input buffer
					serial_input = "";
     59c:	64 ed       	ldi	r22, 0xD4	; 212
     59e:	71 e0       	ldi	r23, 0x01	; 1
     5a0:	86 e5       	ldi	r24, 0x56	; 86
     5a2:	93 e0       	ldi	r25, 0x03	; 3
     5a4:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <_ZN6StringaSEPKc>
					memset(rfdata, 0, strlen(rfdata));
     5a8:	fe 01       	movw	r30, r28
     5aa:	01 90       	ld	r0, Z+
     5ac:	00 20       	and	r0, r0
     5ae:	e9 f7       	brne	.-6      	; 0x5aa <loop+0xe4>
     5b0:	31 97       	sbiw	r30, 0x01	; 1
     5b2:	af 01       	movw	r20, r30
     5b4:	4c 5d       	subi	r20, 0xDC	; 220
     5b6:	52 40       	sbci	r21, 0x02	; 2
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	ce 01       	movw	r24, r28
     5be:	0e 94 c2 1b 	call	0x3784	; 0x3784 <memset>
     5c2:	83 cf       	rjmp	.-250    	; 0x4ca <loop+0x4>
		memset(rec_buf, 0, rec_buf_len);
  }

	// Delay between loop iterations
	delay(500);
}
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	08 95       	ret

000005ca <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     5ca:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     5cc:	91 8d       	ldd	r25, Z+25	; 0x19
     5ce:	22 8d       	ldd	r18, Z+26	; 0x1a
     5d0:	89 2f       	mov	r24, r25
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	80 5c       	subi	r24, 0xC0	; 192
     5d6:	9f 4f       	sbci	r25, 0xFF	; 255
     5d8:	82 1b       	sub	r24, r18
     5da:	91 09       	sbc	r25, r1
}
     5dc:	8f 73       	andi	r24, 0x3F	; 63
     5de:	99 27       	eor	r25, r25
     5e0:	08 95       	ret

000005e2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     5e2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     5e4:	91 8d       	ldd	r25, Z+25	; 0x19
     5e6:	82 8d       	ldd	r24, Z+26	; 0x1a
     5e8:	98 17       	cp	r25, r24
     5ea:	31 f0       	breq	.+12     	; 0x5f8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     5ec:	82 8d       	ldd	r24, Z+26	; 0x1a
     5ee:	e8 0f       	add	r30, r24
     5f0:	f1 1d       	adc	r31, r1
     5f2:	85 8d       	ldd	r24, Z+29	; 0x1d
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     5f8:	8f ef       	ldi	r24, 0xFF	; 255
     5fa:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     5fc:	08 95       	ret

000005fe <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     5fe:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     600:	91 8d       	ldd	r25, Z+25	; 0x19
     602:	82 8d       	ldd	r24, Z+26	; 0x1a
     604:	98 17       	cp	r25, r24
     606:	61 f0       	breq	.+24     	; 0x620 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     608:	82 8d       	ldd	r24, Z+26	; 0x1a
     60a:	df 01       	movw	r26, r30
     60c:	a8 0f       	add	r26, r24
     60e:	b1 1d       	adc	r27, r1
     610:	5d 96       	adiw	r26, 0x1d	; 29
     612:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     614:	92 8d       	ldd	r25, Z+26	; 0x1a
     616:	9f 5f       	subi	r25, 0xFF	; 255
     618:	9f 73       	andi	r25, 0x3F	; 63
     61a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     620:	8f ef       	ldi	r24, 0xFF	; 255
     622:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     624:	08 95       	ret

00000626 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     626:	fc 01       	movw	r30, r24
     628:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     62a:	44 8d       	ldd	r20, Z+28	; 0x1c
     62c:	25 2f       	mov	r18, r21
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	84 2f       	mov	r24, r20
     632:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     634:	82 1b       	sub	r24, r18
     636:	93 0b       	sbc	r25, r19
     638:	54 17       	cp	r21, r20
     63a:	10 f0       	brcs	.+4      	; 0x640 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     63c:	cf 96       	adiw	r24, 0x3f	; 63
     63e:	08 95       	ret
  return tail - head - 1;
     640:	01 97       	sbiw	r24, 0x01	; 1
}
     642:	08 95       	ret

00000644 <_Z14serialEventRunv>:
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     644:	8c e7       	ldi	r24, 0x7C	; 124
     646:	94 e0       	ldi	r25, 0x04	; 4
     648:	89 2b       	or	r24, r25
     64a:	49 f0       	breq	.+18     	; 0x65e <_Z14serialEventRunv+0x1a>
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	89 2b       	or	r24, r25
     652:	29 f0       	breq	.+10     	; 0x65e <_Z14serialEventRunv+0x1a>
     654:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <_Z17Serial1_availablev>
     658:	81 11       	cpse	r24, r1
     65a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     65e:	08 95       	ret

00000660 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     660:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     662:	84 8d       	ldd	r24, Z+28	; 0x1c
     664:	df 01       	movw	r26, r30
     666:	a8 0f       	add	r26, r24
     668:	b1 1d       	adc	r27, r1
     66a:	a3 5a       	subi	r26, 0xA3	; 163
     66c:	bf 4f       	sbci	r27, 0xFF	; 255
     66e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     670:	84 8d       	ldd	r24, Z+28	; 0x1c
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	01 96       	adiw	r24, 0x01	; 1
     676:	8f 73       	andi	r24, 0x3F	; 63
     678:	99 27       	eor	r25, r25
     67a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     67c:	a6 89       	ldd	r26, Z+22	; 0x16
     67e:	b7 89       	ldd	r27, Z+23	; 0x17
     680:	2c 93       	st	X, r18
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     682:	a0 89       	ldd	r26, Z+16	; 0x10
     684:	b1 89       	ldd	r27, Z+17	; 0x11
     686:	8c 91       	ld	r24, X
     688:	82 74       	andi	r24, 0x42	; 66
     68a:	8c 93       	st	X, r24
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     68c:	93 8d       	ldd	r25, Z+27	; 0x1b
     68e:	84 8d       	ldd	r24, Z+28	; 0x1c
     690:	98 13       	cpse	r25, r24
     692:	06 c0       	rjmp	.+12     	; 0x6a0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     694:	02 88       	ldd	r0, Z+18	; 0x12
     696:	f3 89       	ldd	r31, Z+19	; 0x13
     698:	e0 2d       	mov	r30, r0
     69a:	80 81       	ld	r24, Z
     69c:	8f 7d       	andi	r24, 0xDF	; 223
     69e:	80 83       	st	Z, r24
     6a0:	08 95       	ret

000006a2 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	ec 01       	movw	r28, r24
  _written = true;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     6b4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6b8:	98 13       	cpse	r25, r24
     6ba:	05 c0       	rjmp	.+10     	; 0x6c6 <_ZN14HardwareSerial5writeEh+0x24>
     6bc:	e8 89       	ldd	r30, Y+16	; 0x10
     6be:	f9 89       	ldd	r31, Y+17	; 0x11
     6c0:	80 81       	ld	r24, Z
     6c2:	85 fd       	sbrc	r24, 5
     6c4:	26 c0       	rjmp	.+76     	; 0x712 <_ZN14HardwareSerial5writeEh+0x70>
     6c6:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     6c8:	0b 8d       	ldd	r16, Y+27	; 0x1b
     6ca:	10 e0       	ldi	r17, 0x00	; 0
     6cc:	0f 5f       	subi	r16, 0xFF	; 255
     6ce:	1f 4f       	sbci	r17, 0xFF	; 255
     6d0:	0f 73       	andi	r16, 0x3F	; 63
     6d2:	11 27       	eor	r17, r17
     6d4:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     6d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6d8:	e8 12       	cpse	r14, r24
     6da:	0c c0       	rjmp	.+24     	; 0x6f4 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	07 fc       	sbrc	r0, 7
     6e0:	fa cf       	rjmp	.-12     	; 0x6d6 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     6e2:	e8 89       	ldd	r30, Y+16	; 0x10
     6e4:	f9 89       	ldd	r31, Y+17	; 0x11
     6e6:	80 81       	ld	r24, Z
     6e8:	85 ff       	sbrs	r24, 5
     6ea:	f5 cf       	rjmp	.-22     	; 0x6d6 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     6ec:	ce 01       	movw	r24, r28
     6ee:	0e 94 30 03 	call	0x660	; 0x660 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     6f2:	f1 cf       	rjmp	.-30     	; 0x6d6 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     6f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6f6:	fe 01       	movw	r30, r28
     6f8:	e8 0f       	add	r30, r24
     6fa:	f1 1d       	adc	r31, r1
     6fc:	e3 5a       	subi	r30, 0xA3	; 163
     6fe:	ff 4f       	sbci	r31, 0xFF	; 255
     700:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     702:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     704:	f8 94       	cli
    _tx_buffer_head = i;
     706:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     708:	ea 89       	ldd	r30, Y+18	; 0x12
     70a:	fb 89       	ldd	r31, Y+19	; 0x13
     70c:	80 81       	ld	r24, Z
     70e:	80 62       	ori	r24, 0x20	; 32
     710:	09 c0       	rjmp	.+18     	; 0x724 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     712:	9f b7       	in	r25, 0x3f	; 63
     714:	f8 94       	cli
      *_udr = c;
     716:	ee 89       	ldd	r30, Y+22	; 0x16
     718:	ff 89       	ldd	r31, Y+23	; 0x17
     71a:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     71c:	e8 89       	ldd	r30, Y+16	; 0x10
     71e:	f9 89       	ldd	r31, Y+17	; 0x11
     720:	80 81       	ld	r24, Z
     722:	82 74       	andi	r24, 0x42	; 66
     724:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     726:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	ff 90       	pop	r15
     736:	ef 90       	pop	r14
     738:	08 95       	ret

0000073a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     740:	88 8d       	ldd	r24, Y+24	; 0x18
     742:	88 23       	and	r24, r24
     744:	c9 f0       	breq	.+50     	; 0x778 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     746:	ea 89       	ldd	r30, Y+18	; 0x12
     748:	fb 89       	ldd	r31, Y+19	; 0x13
     74a:	80 81       	ld	r24, Z
     74c:	85 fd       	sbrc	r24, 5
     74e:	05 c0       	rjmp	.+10     	; 0x75a <_ZN14HardwareSerial5flushEv+0x20>
     750:	a8 89       	ldd	r26, Y+16	; 0x10
     752:	b9 89       	ldd	r27, Y+17	; 0x11
     754:	8c 91       	ld	r24, X
     756:	86 fd       	sbrc	r24, 6
     758:	0f c0       	rjmp	.+30     	; 0x778 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	07 fc       	sbrc	r0, 7
     75e:	f5 cf       	rjmp	.-22     	; 0x74a <_ZN14HardwareSerial5flushEv+0x10>
     760:	80 81       	ld	r24, Z
     762:	85 ff       	sbrs	r24, 5
     764:	f2 cf       	rjmp	.-28     	; 0x74a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     766:	a8 89       	ldd	r26, Y+16	; 0x10
     768:	b9 89       	ldd	r27, Y+17	; 0x11
     76a:	8c 91       	ld	r24, X
     76c:	85 ff       	sbrs	r24, 5
     76e:	ed cf       	rjmp	.-38     	; 0x74a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     770:	ce 01       	movw	r24, r28
     772:	0e 94 30 03 	call	0x660	; 0x660 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     776:	e7 cf       	rjmp	.-50     	; 0x746 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	08 95       	ret

0000077e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     77e:	cf 92       	push	r12
     780:	df 92       	push	r13
     782:	ef 92       	push	r14
     784:	ff 92       	push	r15
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	ec 01       	movw	r28, r24
     78e:	6a 01       	movw	r12, r20
     790:	7b 01       	movw	r14, r22
     792:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     794:	e8 89       	ldd	r30, Y+16	; 0x10
     796:	f9 89       	ldd	r31, Y+17	; 0x11
     798:	82 e0       	ldi	r24, 0x02	; 2
     79a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     79c:	41 15       	cp	r20, r1
     79e:	51 4e       	sbci	r21, 0xE1	; 225
     7a0:	61 05       	cpc	r22, r1
     7a2:	71 05       	cpc	r23, r1
     7a4:	b1 f0       	breq	.+44     	; 0x7d2 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	79 e0       	ldi	r23, 0x09	; 9
     7aa:	8d e3       	ldi	r24, 0x3D	; 61
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	a7 01       	movw	r20, r14
     7b0:	96 01       	movw	r18, r12
     7b2:	0e 94 c1 18 	call	0x3182	; 0x3182 <__udivmodsi4>
     7b6:	da 01       	movw	r26, r20
     7b8:	c9 01       	movw	r24, r18
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	a1 09       	sbc	r26, r1
     7be:	b1 09       	sbc	r27, r1
     7c0:	b6 95       	lsr	r27
     7c2:	a7 95       	ror	r26
     7c4:	97 95       	ror	r25
     7c6:	87 95       	ror	r24
     7c8:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     7ca:	21 15       	cp	r18, r1
     7cc:	80 e1       	ldi	r24, 0x10	; 16
     7ce:	38 07       	cpc	r19, r24
     7d0:	a8 f0       	brcs	.+42     	; 0x7fc <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     7d2:	e8 89       	ldd	r30, Y+16	; 0x10
     7d4:	f9 89       	ldd	r31, Y+17	; 0x11
     7d6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     7d8:	60 e8       	ldi	r22, 0x80	; 128
     7da:	74 e8       	ldi	r23, 0x84	; 132
     7dc:	8e e1       	ldi	r24, 0x1E	; 30
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	a7 01       	movw	r20, r14
     7e2:	96 01       	movw	r18, r12
     7e4:	0e 94 c1 18 	call	0x3182	; 0x3182 <__udivmodsi4>
     7e8:	da 01       	movw	r26, r20
     7ea:	c9 01       	movw	r24, r18
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	a1 09       	sbc	r26, r1
     7f0:	b1 09       	sbc	r27, r1
     7f2:	b6 95       	lsr	r27
     7f4:	a7 95       	ror	r26
     7f6:	97 95       	ror	r25
     7f8:	87 95       	ror	r24
     7fa:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     7fc:	ec 85       	ldd	r30, Y+12	; 0x0c
     7fe:	fd 85       	ldd	r31, Y+13	; 0x0d
     800:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     802:	ee 85       	ldd	r30, Y+14	; 0x0e
     804:	ff 85       	ldd	r31, Y+15	; 0x0f
     806:	20 83       	st	Z, r18

  _written = false;
     808:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     80a:	ec 89       	ldd	r30, Y+20	; 0x14
     80c:	fd 89       	ldd	r31, Y+21	; 0x15
     80e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     810:	ea 89       	ldd	r30, Y+18	; 0x12
     812:	fb 89       	ldd	r31, Y+19	; 0x13
     814:	80 81       	ld	r24, Z
     816:	80 61       	ori	r24, 0x10	; 16
     818:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     81a:	ea 89       	ldd	r30, Y+18	; 0x12
     81c:	fb 89       	ldd	r31, Y+19	; 0x13
     81e:	80 81       	ld	r24, Z
     820:	88 60       	ori	r24, 0x08	; 8
     822:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     824:	ea 89       	ldd	r30, Y+18	; 0x12
     826:	fb 89       	ldd	r31, Y+19	; 0x13
     828:	80 81       	ld	r24, Z
     82a:	80 68       	ori	r24, 0x80	; 128
     82c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     82e:	ea 89       	ldd	r30, Y+18	; 0x12
     830:	fb 89       	ldd	r31, Y+19	; 0x13
     832:	80 81       	ld	r24, Z
     834:	8f 7d       	andi	r24, 0xDF	; 223
     836:	80 83       	st	Z, r24
}
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	ff 90       	pop	r15
     840:	ef 90       	pop	r14
     842:	df 90       	pop	r13
     844:	cf 90       	pop	r12
     846:	08 95       	ret

00000848 <__vector_25>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     848:	1f 92       	push	r1
     84a:	0f 92       	push	r0
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	0f 92       	push	r0
     850:	11 24       	eor	r1, r1
     852:	2f 93       	push	r18
     854:	8f 93       	push	r24
     856:	9f 93       	push	r25
     858:	ef 93       	push	r30
     85a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     85c:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <Serial1+0x10>
     860:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <Serial1+0x11>
     864:	80 81       	ld	r24, Z
     866:	e0 91 d5 03 	lds	r30, 0x03D5	; 0x8003d5 <Serial1+0x16>
     86a:	f0 91 d6 03 	lds	r31, 0x03D6	; 0x8003d6 <Serial1+0x17>
     86e:	82 fd       	sbrc	r24, 2
     870:	12 c0       	rjmp	.+36     	; 0x896 <__vector_25+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     872:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     874:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <Serial1+0x19>
     878:	8f 5f       	subi	r24, 0xFF	; 255
     87a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     87c:	20 91 d9 03 	lds	r18, 0x03D9	; 0x8003d9 <Serial1+0x1a>
     880:	82 17       	cp	r24, r18
     882:	51 f0       	breq	.+20     	; 0x898 <__vector_25+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     884:	e0 91 d8 03 	lds	r30, 0x03D8	; 0x8003d8 <Serial1+0x19>
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	e1 54       	subi	r30, 0x41	; 65
     88c:	fc 4f       	sbci	r31, 0xFC	; 252
     88e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     890:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <Serial1+0x19>
     894:	01 c0       	rjmp	.+2      	; 0x898 <__vector_25+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     896:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
     898:	ff 91       	pop	r31
     89a:	ef 91       	pop	r30
     89c:	9f 91       	pop	r25
     89e:	8f 91       	pop	r24
     8a0:	2f 91       	pop	r18
     8a2:	0f 90       	pop	r0
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	0f 90       	pop	r0
     8a8:	1f 90       	pop	r1
     8aa:	18 95       	reti

000008ac <__vector_26>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     8ac:	1f 92       	push	r1
     8ae:	0f 92       	push	r0
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	0f 92       	push	r0
     8b4:	11 24       	eor	r1, r1
     8b6:	2f 93       	push	r18
     8b8:	3f 93       	push	r19
     8ba:	4f 93       	push	r20
     8bc:	5f 93       	push	r21
     8be:	6f 93       	push	r22
     8c0:	7f 93       	push	r23
     8c2:	8f 93       	push	r24
     8c4:	9f 93       	push	r25
     8c6:	af 93       	push	r26
     8c8:	bf 93       	push	r27
     8ca:	ef 93       	push	r30
     8cc:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
     8ce:	8f eb       	ldi	r24, 0xBF	; 191
     8d0:	93 e0       	ldi	r25, 0x03	; 3
     8d2:	0e 94 30 03 	call	0x660	; 0x660 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     8d6:	ff 91       	pop	r31
     8d8:	ef 91       	pop	r30
     8da:	bf 91       	pop	r27
     8dc:	af 91       	pop	r26
     8de:	9f 91       	pop	r25
     8e0:	8f 91       	pop	r24
     8e2:	7f 91       	pop	r23
     8e4:	6f 91       	pop	r22
     8e6:	5f 91       	pop	r21
     8e8:	4f 91       	pop	r20
     8ea:	3f 91       	pop	r19
     8ec:	2f 91       	pop	r18
     8ee:	0f 90       	pop	r0
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	0f 90       	pop	r0
     8f4:	1f 90       	pop	r1
     8f6:	18 95       	reti

000008f8 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
     8f8:	8f eb       	ldi	r24, 0xBF	; 191
     8fa:	93 e0       	ldi	r25, 0x03	; 3
     8fc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN14HardwareSerial9availableEv>
     900:	21 e0       	ldi	r18, 0x01	; 1
     902:	89 2b       	or	r24, r25
     904:	09 f4       	brne	.+2      	; 0x908 <_Z17Serial1_availablev+0x10>
     906:	20 e0       	ldi	r18, 0x00	; 0
}
     908:	82 2f       	mov	r24, r18
     90a:	08 95       	ret

0000090c <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     90c:	ef eb       	ldi	r30, 0xBF	; 191
     90e:	f3 e0       	ldi	r31, 0x03	; 3
     910:	13 82       	std	Z+3, r1	; 0x03
     912:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     914:	88 ee       	ldi	r24, 0xE8	; 232
     916:	93 e0       	ldi	r25, 0x03	; 3
     918:	a0 e0       	ldi	r26, 0x00	; 0
     91a:	b0 e0       	ldi	r27, 0x00	; 0
     91c:	84 83       	std	Z+4, r24	; 0x04
     91e:	95 83       	std	Z+5, r25	; 0x05
     920:	a6 83       	std	Z+6, r26	; 0x06
     922:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     924:	84 ec       	ldi	r24, 0xC4	; 196
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	91 83       	std	Z+1, r25	; 0x01
     92a:	80 83       	st	Z, r24
     92c:	8d ec       	ldi	r24, 0xCD	; 205
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	95 87       	std	Z+13, r25	; 0x0d
     932:	84 87       	std	Z+12, r24	; 0x0c
     934:	8c ec       	ldi	r24, 0xCC	; 204
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	97 87       	std	Z+15, r25	; 0x0f
     93a:	86 87       	std	Z+14, r24	; 0x0e
     93c:	88 ec       	ldi	r24, 0xC8	; 200
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	91 8b       	std	Z+17, r25	; 0x11
     942:	80 8b       	std	Z+16, r24	; 0x10
     944:	89 ec       	ldi	r24, 0xC9	; 201
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	93 8b       	std	Z+19, r25	; 0x13
     94a:	82 8b       	std	Z+18, r24	; 0x12
     94c:	8a ec       	ldi	r24, 0xCA	; 202
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	95 8b       	std	Z+21, r25	; 0x15
     952:	84 8b       	std	Z+20, r24	; 0x14
     954:	8e ec       	ldi	r24, 0xCE	; 206
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	97 8b       	std	Z+23, r25	; 0x17
     95a:	86 8b       	std	Z+22, r24	; 0x16
     95c:	11 8e       	std	Z+25, r1	; 0x19
     95e:	12 8e       	std	Z+26, r1	; 0x1a
     960:	13 8e       	std	Z+27, r1	; 0x1b
     962:	14 8e       	std	Z+28, r1	; 0x1c
     964:	08 95       	ret

00000966 <initVariant>:
     966:	08 95       	ret

00000968 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     968:	0e 94 cd 0a 	call	0x159a	; 0x159a <init>

	initVariant();
     96c:	0e 94 b3 04 	call	0x966	; 0x966 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
     970:	8c e5       	ldi	r24, 0x5C	; 92
     972:	94 e0       	ldi	r25, 0x04	; 4
     974:	0e 94 03 0a 	call	0x1406	; 0x1406 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
     978:	0e 94 ba 01 	call	0x374	; 0x374 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     97c:	c2 e2       	ldi	r28, 0x22	; 34
     97e:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
     980:	0e 94 63 02 	call	0x4c6	; 0x4c6 <loop>
		if (serialEventRun) serialEventRun();
     984:	20 97       	sbiw	r28, 0x00	; 0
     986:	e1 f3       	breq	.-8      	; 0x980 <main+0x18>
     988:	0e 94 22 03 	call	0x644	; 0x644 <_Z14serialEventRunv>
     98c:	f9 cf       	rjmp	.-14     	; 0x980 <main+0x18>

0000098e <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     98e:	cf 92       	push	r12
     990:	df 92       	push	r13
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	6c 01       	movw	r12, r24
     9a0:	7a 01       	movw	r14, r20
     9a2:	8b 01       	movw	r16, r22
     9a4:	c0 e0       	ldi	r28, 0x00	; 0
     9a6:	d0 e0       	ldi	r29, 0x00	; 0
     9a8:	ce 15       	cp	r28, r14
     9aa:	df 05       	cpc	r29, r15
     9ac:	81 f0       	breq	.+32     	; 0x9ce <_ZN5Print5writeEPKhj+0x40>
     9ae:	d8 01       	movw	r26, r16
     9b0:	6d 91       	ld	r22, X+
     9b2:	8d 01       	movw	r16, r26
     9b4:	d6 01       	movw	r26, r12
     9b6:	ed 91       	ld	r30, X+
     9b8:	fc 91       	ld	r31, X
     9ba:	01 90       	ld	r0, Z+
     9bc:	f0 81       	ld	r31, Z
     9be:	e0 2d       	mov	r30, r0
     9c0:	c6 01       	movw	r24, r12
     9c2:	09 95       	icall
     9c4:	89 2b       	or	r24, r25
     9c6:	11 f0       	breq	.+4      	; 0x9cc <_ZN5Print5writeEPKhj+0x3e>
     9c8:	21 96       	adiw	r28, 0x01	; 1
     9ca:	ee cf       	rjmp	.-36     	; 0x9a8 <_ZN5Print5writeEPKhj+0x1a>
     9cc:	7e 01       	movw	r14, r28
     9ce:	c7 01       	movw	r24, r14
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	df 90       	pop	r13
     9de:	cf 90       	pop	r12
     9e0:	08 95       	ret

000009e2 <_ZN5Print5writeEPKc>:
     9e2:	61 15       	cp	r22, r1
     9e4:	71 05       	cpc	r23, r1
     9e6:	79 f0       	breq	.+30     	; 0xa06 <__DATA_REGION_LENGTH__+0x6>
     9e8:	fb 01       	movw	r30, r22
     9ea:	01 90       	ld	r0, Z+
     9ec:	00 20       	and	r0, r0
     9ee:	e9 f7       	brne	.-6      	; 0x9ea <_ZN5Print5writeEPKc+0x8>
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	af 01       	movw	r20, r30
     9f4:	46 1b       	sub	r20, r22
     9f6:	57 0b       	sbc	r21, r23
     9f8:	dc 01       	movw	r26, r24
     9fa:	ed 91       	ld	r30, X+
     9fc:	fc 91       	ld	r31, X
     9fe:	02 80       	ldd	r0, Z+2	; 0x02
     a00:	f3 81       	ldd	r31, Z+3	; 0x03
     a02:	e0 2d       	mov	r30, r0
     a04:	09 94       	ijmp
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	08 95       	ret

00000a0c <_ZN5Print5printERK6String>:
     a0c:	db 01       	movw	r26, r22
     a0e:	14 96       	adiw	r26, 0x04	; 4
     a10:	4d 91       	ld	r20, X+
     a12:	5c 91       	ld	r21, X
     a14:	15 97       	sbiw	r26, 0x05	; 5
     a16:	6d 91       	ld	r22, X+
     a18:	7c 91       	ld	r23, X
     a1a:	dc 01       	movw	r26, r24
     a1c:	ed 91       	ld	r30, X+
     a1e:	fc 91       	ld	r31, X
     a20:	02 80       	ldd	r0, Z+2	; 0x02
     a22:	f3 81       	ldd	r31, Z+3	; 0x03
     a24:	e0 2d       	mov	r30, r0
     a26:	09 94       	ijmp

00000a28 <_ZN5Print5printEPKc>:
     a28:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <_ZN5Print5writeEPKc>

00000a2c <_ZN5Print5printEc>:
     a2c:	dc 01       	movw	r26, r24
     a2e:	ed 91       	ld	r30, X+
     a30:	fc 91       	ld	r31, X
     a32:	01 90       	ld	r0, Z+
     a34:	f0 81       	ld	r31, Z
     a36:	e0 2d       	mov	r30, r0
     a38:	09 94       	ijmp

00000a3a <_ZN5Print7printlnEv>:
     a3a:	62 ed       	ldi	r22, 0xD2	; 210
     a3c:	71 e0       	ldi	r23, 0x01	; 1
     a3e:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <_ZN5Print5writeEPKc>

00000a42 <_ZN5Print7printlnERK6String>:
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	ec 01       	movw	r28, r24
     a4c:	0e 94 06 05 	call	0xa0c	; 0xa0c <_ZN5Print5printERK6String>
     a50:	8c 01       	movw	r16, r24
     a52:	ce 01       	movw	r24, r28
     a54:	0e 94 1d 05 	call	0xa3a	; 0xa3a <_ZN5Print7printlnEv>
     a58:	80 0f       	add	r24, r16
     a5a:	91 1f       	adc	r25, r17
     a5c:	df 91       	pop	r29
     a5e:	cf 91       	pop	r28
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	08 95       	ret

00000a66 <_ZN5Print7printlnEPKc>:
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	ec 01       	movw	r28, r24
     a70:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN5Print5writeEPKc>
     a74:	8c 01       	movw	r16, r24
     a76:	ce 01       	movw	r24, r28
     a78:	0e 94 1d 05 	call	0xa3a	; 0xa3a <_ZN5Print7printlnEv>
     a7c:	80 0f       	add	r24, r16
     a7e:	91 1f       	adc	r25, r17
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	08 95       	ret

00000a8a <_ZN5Print11printNumberEmh>:
     a8a:	8f 92       	push	r8
     a8c:	9f 92       	push	r9
     a8e:	af 92       	push	r10
     a90:	bf 92       	push	r11
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	a1 97       	sbiw	r28, 0x21	; 33
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cd bf       	out	0x3d, r28	; 61
     aae:	7c 01       	movw	r14, r24
     ab0:	fa 01       	movw	r30, r20
     ab2:	cb 01       	movw	r24, r22
     ab4:	19 a2       	std	Y+33, r1	; 0x21
     ab6:	22 30       	cpi	r18, 0x02	; 2
     ab8:	08 f4       	brcc	.+2      	; 0xabc <_ZN5Print11printNumberEmh+0x32>
     aba:	2a e0       	ldi	r18, 0x0A	; 10
     abc:	8e 01       	movw	r16, r28
     abe:	0f 5d       	subi	r16, 0xDF	; 223
     ac0:	1f 4f       	sbci	r17, 0xFF	; 255
     ac2:	82 2e       	mov	r8, r18
     ac4:	91 2c       	mov	r9, r1
     ac6:	a1 2c       	mov	r10, r1
     ac8:	b1 2c       	mov	r11, r1
     aca:	bf 01       	movw	r22, r30
     acc:	a5 01       	movw	r20, r10
     ace:	94 01       	movw	r18, r8
     ad0:	0e 94 c1 18 	call	0x3182	; 0x3182 <__udivmodsi4>
     ad4:	f9 01       	movw	r30, r18
     ad6:	ca 01       	movw	r24, r20
     ad8:	01 50       	subi	r16, 0x01	; 1
     ada:	11 09       	sbc	r17, r1
     adc:	6a 30       	cpi	r22, 0x0A	; 10
     ade:	10 f4       	brcc	.+4      	; 0xae4 <_ZN5Print11printNumberEmh+0x5a>
     ae0:	60 5d       	subi	r22, 0xD0	; 208
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <_ZN5Print11printNumberEmh+0x5c>
     ae4:	69 5c       	subi	r22, 0xC9	; 201
     ae6:	d8 01       	movw	r26, r16
     ae8:	6c 93       	st	X, r22
     aea:	23 2b       	or	r18, r19
     aec:	24 2b       	or	r18, r20
     aee:	25 2b       	or	r18, r21
     af0:	61 f7       	brne	.-40     	; 0xaca <_ZN5Print11printNumberEmh+0x40>
     af2:	b8 01       	movw	r22, r16
     af4:	c7 01       	movw	r24, r14
     af6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <_ZN5Print5writeEPKc>
     afa:	a1 96       	adiw	r28, 0x21	; 33
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	f8 94       	cli
     b00:	de bf       	out	0x3e, r29	; 62
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	cd bf       	out	0x3d, r28	; 61
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	1f 91       	pop	r17
     b0c:	0f 91       	pop	r16
     b0e:	ff 90       	pop	r15
     b10:	ef 90       	pop	r14
     b12:	bf 90       	pop	r11
     b14:	af 90       	pop	r10
     b16:	9f 90       	pop	r9
     b18:	8f 90       	pop	r8
     b1a:	08 95       	ret

00000b1c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     b1c:	cf 92       	push	r12
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
  if (base == 0) {
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	81 f4       	brne	.+32     	; 0xb52 <_ZN5Print5printEli+0x36>
    return write(n);
     b32:	dc 01       	movw	r26, r24
     b34:	ed 91       	ld	r30, X+
     b36:	fc 91       	ld	r31, X
     b38:	01 90       	ld	r0, Z+
     b3a:	f0 81       	ld	r31, Z
     b3c:	e0 2d       	mov	r30, r0
     b3e:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	df 90       	pop	r13
     b4e:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     b50:	09 94       	ijmp
  } else if (base == 10) {
     b52:	2a 30       	cpi	r18, 0x0A	; 10
     b54:	31 05       	cpc	r19, r1
     b56:	01 f5       	brne	.+64     	; 0xb98 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     b58:	77 ff       	sbrs	r23, 7
     b5a:	1d c0       	rjmp	.+58     	; 0xb96 <_ZN5Print5printEli+0x7a>
     b5c:	6a 01       	movw	r12, r20
     b5e:	7b 01       	movw	r14, r22
     b60:	ec 01       	movw	r28, r24
      int t = print('-');
     b62:	6d e2       	ldi	r22, 0x2D	; 45
     b64:	0e 94 16 05 	call	0xa2c	; 0xa2c <_ZN5Print5printEc>
     b68:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     b6a:	44 27       	eor	r20, r20
     b6c:	55 27       	eor	r21, r21
     b6e:	ba 01       	movw	r22, r20
     b70:	4c 19       	sub	r20, r12
     b72:	5d 09       	sbc	r21, r13
     b74:	6e 09       	sbc	r22, r14
     b76:	7f 09       	sbc	r23, r15
     b78:	2a e0       	ldi	r18, 0x0A	; 10
     b7a:	ce 01       	movw	r24, r28
     b7c:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN5Print11printNumberEmh>
     b80:	80 0f       	add	r24, r16
     b82:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	cf 90       	pop	r12
     b94:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     b96:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     ba8:	0c 94 45 05 	jmp	0xa8a	; 0xa8a <_ZN5Print11printNumberEmh>

00000bac <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     bac:	9a 01       	movw	r18, r20
  return print((long) n, base);
     bae:	ab 01       	movw	r20, r22
     bb0:	77 0f       	add	r23, r23
     bb2:	66 0b       	sbc	r22, r22
     bb4:	77 0b       	sbc	r23, r23
     bb6:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <_ZN5Print5printEli>

00000bba <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
     bba:	61 50       	subi	r22, 0x01	; 1
     bbc:	30 f0       	brcs	.+12     	; 0xbca <_ZL4RecvPVhh+0x10>
     bbe:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     bc2:	fc 01       	movw	r30, r24
     bc4:	20 83       	st	Z, r18
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	f8 cf       	rjmp	.-16     	; 0xbba <_ZL4RecvPVhh>
     bca:	28 98       	cbi	0x05, 0	; 5
     bcc:	84 e6       	ldi	r24, 0x64	; 100
     bce:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <RxLEDPulse>
     bd2:	08 95       	ret

00000bd4 <_ZL11SendControlh>:
     bd4:	40 91 5f 04 	lds	r20, 0x045F	; 0x80045f <_ZL6_cmark>
     bd8:	50 91 60 04 	lds	r21, 0x0460	; 0x800460 <_ZL6_cmark+0x1>
     bdc:	20 91 5d 04 	lds	r18, 0x045D	; 0x80045d <_ZL5_cend>
     be0:	30 91 5e 04 	lds	r19, 0x045E	; 0x80045e <_ZL5_cend+0x1>
     be4:	42 17       	cp	r20, r18
     be6:	53 07       	cpc	r21, r19
     be8:	b4 f4       	brge	.+44     	; 0xc16 <_ZL11SendControlh+0x42>
     bea:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     bee:	95 70       	andi	r25, 0x05	; 5
     bf0:	e1 f3       	breq	.-8      	; 0xbea <_ZL11SendControlh+0x16>
     bf2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     bf6:	92 fd       	sbrc	r25, 2
     bf8:	19 c0       	rjmp	.+50     	; 0xc2c <_ZL11SendControlh+0x58>
     bfa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     bfe:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <_ZL6_cmark>
     c02:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <_ZL6_cmark+0x1>
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	8f 73       	andi	r24, 0x3F	; 63
     c0a:	99 27       	eor	r25, r25
     c0c:	89 2b       	or	r24, r25
     c0e:	19 f4       	brne	.+6      	; 0xc16 <_ZL11SendControlh+0x42>
     c10:	8e ef       	ldi	r24, 0xFE	; 254
     c12:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     c16:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <_ZL6_cmark>
     c1a:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <_ZL6_cmark+0x1>
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <_ZL6_cmark+0x1>
     c24:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <_ZL6_cmark>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	08 95       	ret
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	08 95       	ret

00000c30 <_ZL24USB_SendStringDescriptorPKhhh>:
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	d8 2e       	mov	r13, r24
     c40:	f9 2e       	mov	r15, r25
     c42:	e4 2e       	mov	r14, r20
     c44:	06 2f       	mov	r16, r22
     c46:	10 e0       	ldi	r17, 0x00	; 0
     c48:	c8 01       	movw	r24, r16
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	88 0f       	add	r24, r24
     c4e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZL11SendControlh>
     c52:	83 e0       	ldi	r24, 0x03	; 3
     c54:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZL11SendControlh>
     c58:	cd 2d       	mov	r28, r13
     c5a:	df 2d       	mov	r29, r15
     c5c:	0c 0f       	add	r16, r28
     c5e:	1d 1f       	adc	r17, r29
     c60:	c0 17       	cp	r28, r16
     c62:	d1 07       	cpc	r29, r17
     c64:	89 f0       	breq	.+34     	; 0xc88 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
     c66:	e7 fe       	sbrs	r14, 7
     c68:	03 c0       	rjmp	.+6      	; 0xc70 <_ZL24USB_SendStringDescriptorPKhhh+0x40>
     c6a:	fe 01       	movw	r30, r28
     c6c:	84 91       	lpm	r24, Z
     c6e:	01 c0       	rjmp	.+2      	; 0xc72 <_ZL24USB_SendStringDescriptorPKhhh+0x42>
     c70:	88 81       	ld	r24, Y
     c72:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZL11SendControlh>
     c76:	f8 2e       	mov	r15, r24
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZL11SendControlh>
     c7e:	8f 21       	and	r24, r15
     c80:	21 96       	adiw	r28, 0x01	; 1
     c82:	81 11       	cpse	r24, r1
     c84:	ed cf       	rjmp	.-38     	; 0xc60 <_ZL24USB_SendStringDescriptorPKhhh+0x30>
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	08 95       	ret

00000c9a <_ZL15USB_ClockEnablev>:
     c9a:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
     c9e:	81 60       	ori	r24, 0x01	; 1
     ca0:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
     ca4:	80 ea       	ldi	r24, 0xA0	; 160
     ca6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     caa:	89 b5       	in	r24, 0x29	; 41
     cac:	80 61       	ori	r24, 0x10	; 16
     cae:	89 bd       	out	0x29, r24	; 41
     cb0:	89 b5       	in	r24, 0x29	; 41
     cb2:	82 60       	ori	r24, 0x02	; 2
     cb4:	89 bd       	out	0x29, r24	; 41
     cb6:	09 b4       	in	r0, 0x29	; 41
     cb8:	00 fe       	sbrs	r0, 0
     cba:	fd cf       	rjmp	.-6      	; 0xcb6 <_ZL15USB_ClockEnablev+0x1c>
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 91 0a 	call	0x1522	; 0x1522 <delay>
     cc8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     ccc:	8f 7c       	andi	r24, 0xCF	; 207
     cce:	80 61       	ori	r24, 0x10	; 16
     cd0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     cd4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     cd8:	80 7f       	andi	r24, 0xF0	; 240
     cda:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     cde:	08 95       	ret

00000ce0 <_ZL14SendInterfacesv>:
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	1f 92       	push	r1
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	19 82       	std	Y+1, r1	; 0x01
     cec:	ce 01       	movw	r24, r28
     cee:	01 96       	adiw	r24, 0x01	; 1
     cf0:	0e 94 9d 13 	call	0x273a	; 0x273a <_Z16CDC_GetInterfacePh>
     cf4:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_Z12PluggableUSBv>
     cf8:	be 01       	movw	r22, r28
     cfa:	6f 5f       	subi	r22, 0xFF	; 255
     cfc:	7f 4f       	sbci	r23, 0xFF	; 255
     cfe:	0e 94 4c 14 	call	0x2898	; 0x2898 <_ZN13PluggableUSB_12getInterfaceEPh>
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	0f 90       	pop	r0
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <_ZN6LockEPC1Eh>:
     d0c:	2f b7       	in	r18, 0x3f	; 63
     d0e:	fc 01       	movw	r30, r24
     d10:	20 83       	st	Z, r18
     d12:	f8 94       	cli
     d14:	67 70       	andi	r22, 0x07	; 7
     d16:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     d1a:	08 95       	ret

00000d1c <_Z13USB_Availableh>:
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	1f 92       	push	r1
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	68 2f       	mov	r22, r24
     d28:	ce 01       	movw	r24, r28
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN6LockEPC1Eh>
     d30:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     d34:	99 81       	ldd	r25, Y+1	; 0x01
     d36:	9f bf       	out	0x3f, r25	; 63
     d38:	0f 90       	pop	r0
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	08 95       	ret

00000d40 <_Z8USB_RecvhPvi>:
     d40:	ef 92       	push	r14
     d42:	ff 92       	push	r15
     d44:	0f 93       	push	r16
     d46:	1f 93       	push	r17
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	1f 92       	push	r1
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <_usbConfiguration>
     d56:	99 23       	and	r25, r25
     d58:	11 f0       	breq	.+4      	; 0xd5e <_Z8USB_RecvhPvi+0x1e>
     d5a:	57 ff       	sbrs	r21, 7
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <_Z8USB_RecvhPvi+0x24>
     d5e:	8f ef       	ldi	r24, 0xFF	; 255
     d60:	9f ef       	ldi	r25, 0xFF	; 255
     d62:	29 c0       	rjmp	.+82     	; 0xdb6 <_Z8USB_RecvhPvi+0x76>
     d64:	8a 01       	movw	r16, r20
     d66:	7b 01       	movw	r14, r22
     d68:	68 2f       	mov	r22, r24
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN6LockEPC1Eh>
     d72:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	02 17       	cp	r16, r18
     d7a:	13 07       	cpc	r17, r19
     d7c:	0c f4       	brge	.+2      	; 0xd80 <_Z8USB_RecvhPvi+0x40>
     d7e:	98 01       	movw	r18, r16
     d80:	82 2f       	mov	r24, r18
     d82:	f7 01       	movw	r30, r14
     d84:	94 e6       	ldi	r25, 0x64	; 100
     d86:	81 50       	subi	r24, 0x01	; 1
     d88:	38 f0       	brcs	.+14     	; 0xd98 <_Z8USB_RecvhPvi+0x58>
     d8a:	28 98       	cbi	0x05, 0	; 5
     d8c:	90 93 64 04 	sts	0x0464, r25	; 0x800464 <RxLEDPulse>
     d90:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     d94:	41 93       	st	Z+, r20
     d96:	f7 cf       	rjmp	.-18     	; 0xd86 <_Z8USB_RecvhPvi+0x46>
     d98:	21 15       	cp	r18, r1
     d9a:	31 05       	cpc	r19, r1
     d9c:	21 f0       	breq	.+8      	; 0xda6 <_Z8USB_RecvhPvi+0x66>
     d9e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     da2:	88 23       	and	r24, r24
     da4:	21 f0       	breq	.+8      	; 0xdae <_Z8USB_RecvhPvi+0x6e>
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	8f bf       	out	0x3f, r24	; 63
     daa:	c9 01       	movw	r24, r18
     dac:	04 c0       	rjmp	.+8      	; 0xdb6 <_Z8USB_RecvhPvi+0x76>
     dae:	8b e6       	ldi	r24, 0x6B	; 107
     db0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     db4:	f8 cf       	rjmp	.-16     	; 0xda6 <_Z8USB_RecvhPvi+0x66>
     db6:	0f 90       	pop	r0
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	ff 90       	pop	r15
     dc2:	ef 90       	pop	r14
     dc4:	08 95       	ret

00000dc6 <_Z8USB_Recvh>:
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	1f 92       	push	r1
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	41 e0       	ldi	r20, 0x01	; 1
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	be 01       	movw	r22, r28
     dd6:	6f 5f       	subi	r22, 0xFF	; 255
     dd8:	7f 4f       	sbci	r23, 0xFF	; 255
     dda:	0e 94 a0 06 	call	0xd40	; 0xd40 <_Z8USB_RecvhPvi>
     dde:	01 97       	sbiw	r24, 0x01	; 1
     de0:	19 f4       	brne	.+6      	; 0xde8 <_Z8USB_Recvh+0x22>
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	02 c0       	rjmp	.+4      	; 0xdec <_Z8USB_Recvh+0x26>
     de8:	8f ef       	ldi	r24, 0xFF	; 255
     dea:	9f ef       	ldi	r25, 0xFF	; 255
     dec:	0f 90       	pop	r0
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	08 95       	ret

00000df4 <_Z13USB_SendSpaceh>:
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	1f 92       	push	r1
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	68 2f       	mov	r22, r24
     e00:	ce 01       	movw	r24, r28
     e02:	01 96       	adiw	r24, 0x01	; 1
     e04:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN6LockEPC1Eh>
     e08:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     e0c:	89 2f       	mov	r24, r25
     e0e:	80 72       	andi	r24, 0x20	; 32
     e10:	95 ff       	sbrs	r25, 5
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <_Z13USB_SendSpaceh+0x28>
     e14:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     e18:	80 e4       	ldi	r24, 0x40	; 64
     e1a:	89 1b       	sub	r24, r25
     e1c:	99 81       	ldd	r25, Y+1	; 0x01
     e1e:	9f bf       	out	0x3f, r25	; 63
     e20:	0f 90       	pop	r0
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	08 95       	ret

00000e28 <_Z8USB_SendhPKvi>:
     e28:	5f 92       	push	r5
     e2a:	6f 92       	push	r6
     e2c:	7f 92       	push	r7
     e2e:	8f 92       	push	r8
     e30:	9f 92       	push	r9
     e32:	af 92       	push	r10
     e34:	bf 92       	push	r11
     e36:	cf 92       	push	r12
     e38:	df 92       	push	r13
     e3a:	ef 92       	push	r14
     e3c:	ff 92       	push	r15
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	1f 92       	push	r1
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	98 2e       	mov	r9, r24
     e4e:	6b 01       	movw	r12, r22
     e50:	b4 2e       	mov	r11, r20
     e52:	05 2f       	mov	r16, r21
     e54:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <_usbConfiguration>
     e58:	81 11       	cpse	r24, r1
     e5a:	03 c0       	rjmp	.+6      	; 0xe62 <_Z8USB_SendhPKvi+0x3a>
     e5c:	8f ef       	ldi	r24, 0xFF	; 255
     e5e:	9f ef       	ldi	r25, 0xFF	; 255
     e60:	77 c0       	rjmp	.+238    	; 0xf50 <_Z8USB_SendhPKvi+0x128>
     e62:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <_usbSuspendState>
     e66:	80 ff       	sbrs	r24, 0
     e68:	05 c0       	rjmp	.+10     	; 0xe74 <_Z8USB_SendhPKvi+0x4c>
     e6a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     e6e:	82 60       	ori	r24, 0x02	; 2
     e70:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     e74:	eb 2c       	mov	r14, r11
     e76:	f0 2e       	mov	r15, r16
     e78:	a1 2c       	mov	r10, r1
     e7a:	8a ef       	ldi	r24, 0xFA	; 250
     e7c:	88 2e       	mov	r8, r24
     e7e:	89 2d       	mov	r24, r9
     e80:	80 72       	andi	r24, 0x20	; 32
     e82:	68 2e       	mov	r6, r24
     e84:	89 2d       	mov	r24, r9
     e86:	80 74       	andi	r24, 0x40	; 64
     e88:	58 2e       	mov	r5, r24
     e8a:	9a e3       	ldi	r25, 0x3A	; 58
     e8c:	79 2e       	mov	r7, r25
     e8e:	e1 14       	cp	r14, r1
     e90:	f1 04       	cpc	r15, r1
     e92:	19 f4       	brne	.+6      	; 0xe9a <_Z8USB_SendhPKvi+0x72>
     e94:	aa 20       	and	r10, r10
     e96:	09 f4       	brne	.+2      	; 0xe9a <_Z8USB_SendhPKvi+0x72>
     e98:	55 c0       	rjmp	.+170    	; 0xf44 <_Z8USB_SendhPKvi+0x11c>
     e9a:	89 2d       	mov	r24, r9
     e9c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <_Z13USB_SendSpaceh>
     ea0:	18 2f       	mov	r17, r24
     ea2:	81 11       	cpse	r24, r1
     ea4:	0a c0       	rjmp	.+20     	; 0xeba <_Z8USB_SendhPKvi+0x92>
     ea6:	8a 94       	dec	r8
     ea8:	88 20       	and	r8, r8
     eaa:	c1 f2       	breq	.-80     	; 0xe5c <_Z8USB_SendhPKvi+0x34>
     eac:	61 e0       	ldi	r22, 0x01	; 1
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 91 0a 	call	0x1522	; 0x1522 <delay>
     eb8:	ea cf       	rjmp	.-44     	; 0xe8e <_Z8USB_SendhPKvi+0x66>
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	e8 16       	cp	r14, r24
     ebe:	f9 06       	cpc	r15, r25
     ec0:	0c f4       	brge	.+2      	; 0xec4 <_Z8USB_SendhPKvi+0x9c>
     ec2:	1e 2d       	mov	r17, r14
     ec4:	69 2d       	mov	r22, r9
     ec6:	ce 01       	movw	r24, r28
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN6LockEPC1Eh>
     ece:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     ed2:	85 ff       	sbrs	r24, 5
     ed4:	34 c0       	rjmp	.+104    	; 0xf3e <_Z8USB_SendhPKvi+0x116>
     ed6:	81 2f       	mov	r24, r17
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	e8 1a       	sub	r14, r24
     edc:	f9 0a       	sbc	r15, r25
     ede:	66 20       	and	r6, r6
     ee0:	29 f0       	breq	.+10     	; 0xeec <_Z8USB_SendhPKvi+0xc4>
     ee2:	11 50       	subi	r17, 0x01	; 1
     ee4:	a0 f0       	brcs	.+40     	; 0xf0e <_Z8USB_SendhPKvi+0xe6>
     ee6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     eea:	fb cf       	rjmp	.-10     	; 0xee2 <_Z8USB_SendhPKvi+0xba>
     eec:	f6 01       	movw	r30, r12
     eee:	97 fe       	sbrs	r9, 7
     ef0:	0a c0       	rjmp	.+20     	; 0xf06 <_Z8USB_SendhPKvi+0xde>
     ef2:	11 50       	subi	r17, 0x01	; 1
     ef4:	50 f0       	brcs	.+20     	; 0xf0a <_Z8USB_SendhPKvi+0xe2>
     ef6:	24 91       	lpm	r18, Z
     ef8:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     efc:	31 96       	adiw	r30, 0x01	; 1
     efe:	f9 cf       	rjmp	.-14     	; 0xef2 <_Z8USB_SendhPKvi+0xca>
     f00:	21 91       	ld	r18, Z+
     f02:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     f06:	11 50       	subi	r17, 0x01	; 1
     f08:	d8 f7       	brcc	.-10     	; 0xf00 <_Z8USB_SendhPKvi+0xd8>
     f0a:	c8 0e       	add	r12, r24
     f0c:	d9 1e       	adc	r13, r25
     f0e:	aa 20       	and	r10, r10
     f10:	19 f0       	breq	.+6      	; 0xf18 <_Z8USB_SendhPKvi+0xf0>
     f12:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f16:	0b c0       	rjmp	.+22     	; 0xf2e <_Z8USB_SendhPKvi+0x106>
     f18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f1c:	85 fd       	sbrc	r24, 5
     f1e:	09 c0       	rjmp	.+18     	; 0xf32 <_Z8USB_SendhPKvi+0x10a>
     f20:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f24:	aa 24       	eor	r10, r10
     f26:	a3 94       	inc	r10
     f28:	e1 14       	cp	r14, r1
     f2a:	f1 04       	cpc	r15, r1
     f2c:	41 f0       	breq	.+16     	; 0xf3e <_Z8USB_SendhPKvi+0x116>
     f2e:	a1 2c       	mov	r10, r1
     f30:	06 c0       	rjmp	.+12     	; 0xf3e <_Z8USB_SendhPKvi+0x116>
     f32:	e1 14       	cp	r14, r1
     f34:	f1 04       	cpc	r15, r1
     f36:	19 f4       	brne	.+6      	; 0xf3e <_Z8USB_SendhPKvi+0x116>
     f38:	51 10       	cpse	r5, r1
     f3a:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	8f bf       	out	0x3f, r24	; 63
     f42:	a5 cf       	rjmp	.-182    	; 0xe8e <_Z8USB_SendhPKvi+0x66>
     f44:	5d 98       	cbi	0x0b, 5	; 11
     f46:	84 e6       	ldi	r24, 0x64	; 100
     f48:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <TxLEDPulse>
     f4c:	8b 2d       	mov	r24, r11
     f4e:	90 2f       	mov	r25, r16
     f50:	0f 90       	pop	r0
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	cf 90       	pop	r12
     f62:	bf 90       	pop	r11
     f64:	af 90       	pop	r10
     f66:	9f 90       	pop	r9
     f68:	8f 90       	pop	r8
     f6a:	7f 90       	pop	r7
     f6c:	6f 90       	pop	r6
     f6e:	5f 90       	pop	r5
     f70:	08 95       	ret

00000f72 <_Z11InitControli>:
     f72:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     f76:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <_ZL6_cmark+0x1>
     f7a:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <_ZL6_cmark>
     f7e:	90 93 5e 04 	sts	0x045E, r25	; 0x80045e <_ZL5_cend+0x1>
     f82:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <_ZL5_cend>
     f86:	08 95       	ret

00000f88 <_Z15USB_SendControlhPKvi>:
     f88:	df 92       	push	r13
     f8a:	ef 92       	push	r14
     f8c:	ff 92       	push	r15
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	d8 2e       	mov	r13, r24
     f98:	8a 01       	movw	r16, r20
     f9a:	7b 01       	movw	r14, r22
     f9c:	e4 0e       	add	r14, r20
     f9e:	f5 1e       	adc	r15, r21
     fa0:	eb 01       	movw	r28, r22
     fa2:	ce 15       	cp	r28, r14
     fa4:	df 05       	cpc	r29, r15
     fa6:	71 f0       	breq	.+28     	; 0xfc4 <_Z15USB_SendControlhPKvi+0x3c>
     fa8:	d7 fe       	sbrs	r13, 7
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <_Z15USB_SendControlhPKvi+0x2a>
     fac:	fe 01       	movw	r30, r28
     fae:	84 91       	lpm	r24, Z
     fb0:	01 c0       	rjmp	.+2      	; 0xfb4 <_Z15USB_SendControlhPKvi+0x2c>
     fb2:	88 81       	ld	r24, Y
     fb4:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZL11SendControlh>
     fb8:	21 96       	adiw	r28, 0x01	; 1
     fba:	81 11       	cpse	r24, r1
     fbc:	f2 cf       	rjmp	.-28     	; 0xfa2 <_Z15USB_SendControlhPKvi+0x1a>
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	9f ef       	ldi	r25, 0xFF	; 255
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <_Z15USB_SendControlhPKvi+0x3e>
     fc4:	c8 01       	movw	r24, r16
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	df 90       	pop	r13
     fd4:	08 95       	ret

00000fd6 <_Z15USB_RecvControlPvi>:
     fd6:	af 92       	push	r10
     fd8:	bf 92       	push	r11
     fda:	df 92       	push	r13
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	5c 01       	movw	r10, r24
     fea:	8b 01       	movw	r16, r22
     fec:	eb 01       	movw	r28, r22
     fee:	9b ef       	ldi	r25, 0xFB	; 251
     ff0:	d9 2e       	mov	r13, r25
     ff2:	20 97       	sbiw	r28, 0x00	; 0
     ff4:	c1 f0       	breq	.+48     	; 0x1026 <_Z15USB_RecvControlPvi+0x50>
     ff6:	7e 01       	movw	r14, r28
     ff8:	c1 34       	cpi	r28, 0x41	; 65
     ffa:	d1 05       	cpc	r29, r1
     ffc:	1c f0       	brlt	.+6      	; 0x1004 <_Z15USB_RecvControlPvi+0x2e>
     ffe:	80 e4       	ldi	r24, 0x40	; 64
    1000:	e8 2e       	mov	r14, r24
    1002:	f1 2c       	mov	r15, r1
    1004:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1008:	82 ff       	sbrs	r24, 2
    100a:	fc cf       	rjmp	.-8      	; 0x1004 <_Z15USB_RecvControlPvi+0x2e>
    100c:	c8 01       	movw	r24, r16
    100e:	8c 1b       	sub	r24, r28
    1010:	9d 0b       	sbc	r25, r29
    1012:	6e 2d       	mov	r22, r14
    1014:	8a 0d       	add	r24, r10
    1016:	9b 1d       	adc	r25, r11
    1018:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZL4RecvPVhh>
    101c:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1020:	ce 19       	sub	r28, r14
    1022:	df 09       	sbc	r29, r15
    1024:	e6 cf       	rjmp	.-52     	; 0xff2 <_Z15USB_RecvControlPvi+0x1c>
    1026:	c8 01       	movw	r24, r16
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	df 90       	pop	r13
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	08 95       	ret

0000103c <__vector_11>:
    103c:	1f 92       	push	r1
    103e:	0f 92       	push	r0
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	0f 92       	push	r0
    1044:	11 24       	eor	r1, r1
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	2f 93       	push	r18
    1054:	3f 93       	push	r19
    1056:	4f 93       	push	r20
    1058:	5f 93       	push	r21
    105a:	6f 93       	push	r22
    105c:	7f 93       	push	r23
    105e:	8f 93       	push	r24
    1060:	9f 93       	push	r25
    1062:	af 93       	push	r26
    1064:	bf 93       	push	r27
    1066:	ef 93       	push	r30
    1068:	ff 93       	push	r31
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	6c 97       	sbiw	r28, 0x1c	; 28
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    107c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1080:	83 ff       	sbrs	r24, 3
    1082:	17 c1       	rjmp	.+558    	; 0x12b2 <__vector_11+0x276>
    1084:	68 e0       	ldi	r22, 0x08	; 8
    1086:	ce 01       	movw	r24, r28
    1088:	45 96       	adiw	r24, 0x15	; 21
    108a:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZL4RecvPVhh>
    108e:	82 ef       	ldi	r24, 0xF2	; 242
    1090:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1094:	8d 89       	ldd	r24, Y+21	; 0x15
    1096:	87 ff       	sbrs	r24, 7
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <__vector_11+0x68>
    109a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    109e:	90 ff       	sbrs	r25, 0
    10a0:	fc cf       	rjmp	.-8      	; 0x109a <__vector_11+0x5e>
    10a2:	03 c0       	rjmp	.+6      	; 0x10aa <__vector_11+0x6e>
    10a4:	9e ef       	ldi	r25, 0xFE	; 254
    10a6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    10aa:	98 2f       	mov	r25, r24
    10ac:	90 76       	andi	r25, 0x60	; 96
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <__vector_11+0x76>
    10b0:	d8 c0       	rjmp	.+432    	; 0x1262 <__vector_11+0x226>
    10b2:	9e 89       	ldd	r25, Y+22	; 0x16
    10b4:	4f 89       	ldd	r20, Y+23	; 0x17
    10b6:	58 8d       	ldd	r21, Y+24	; 0x18
    10b8:	2f 89       	ldd	r18, Y+23	; 0x17
    10ba:	18 8d       	ldd	r17, Y+24	; 0x18
    10bc:	91 11       	cpse	r25, r1
    10be:	0c c0       	rjmp	.+24     	; 0x10d8 <__vector_11+0x9c>
    10c0:	80 38       	cpi	r24, 0x80	; 128
    10c2:	29 f4       	brne	.+10     	; 0x10ce <__vector_11+0x92>
    10c4:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <_usbCurrentStatus>
    10c8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <__vector_11+0x96>
    10ce:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    10d2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    10d6:	e6 c0       	rjmp	.+460    	; 0x12a4 <__vector_11+0x268>
    10d8:	91 30       	cpi	r25, 0x01	; 1
    10da:	51 f4       	brne	.+20     	; 0x10f0 <__vector_11+0xb4>
    10dc:	81 11       	cpse	r24, r1
    10de:	e2 c0       	rjmp	.+452    	; 0x12a4 <__vector_11+0x268>
    10e0:	41 30       	cpi	r20, 0x01	; 1
    10e2:	51 05       	cpc	r21, r1
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <__vector_11+0xac>
    10e6:	de c0       	rjmp	.+444    	; 0x12a4 <__vector_11+0x268>
    10e8:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <_usbCurrentStatus>
    10ec:	8d 7f       	andi	r24, 0xFD	; 253
    10ee:	0b c0       	rjmp	.+22     	; 0x1106 <__vector_11+0xca>
    10f0:	93 30       	cpi	r25, 0x03	; 3
    10f2:	61 f4       	brne	.+24     	; 0x110c <__vector_11+0xd0>
    10f4:	81 11       	cpse	r24, r1
    10f6:	d6 c0       	rjmp	.+428    	; 0x12a4 <__vector_11+0x268>
    10f8:	41 30       	cpi	r20, 0x01	; 1
    10fa:	51 05       	cpc	r21, r1
    10fc:	09 f0       	breq	.+2      	; 0x1100 <__vector_11+0xc4>
    10fe:	d2 c0       	rjmp	.+420    	; 0x12a4 <__vector_11+0x268>
    1100:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <_usbCurrentStatus>
    1104:	82 60       	ori	r24, 0x02	; 2
    1106:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <_usbCurrentStatus>
    110a:	cc c0       	rjmp	.+408    	; 0x12a4 <__vector_11+0x268>
    110c:	95 30       	cpi	r25, 0x05	; 5
    110e:	49 f4       	brne	.+18     	; 0x1122 <__vector_11+0xe6>
    1110:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1114:	80 ff       	sbrs	r24, 0
    1116:	fc cf       	rjmp	.-8      	; 0x1110 <__vector_11+0xd4>
    1118:	82 2f       	mov	r24, r18
    111a:	80 68       	ori	r24, 0x80	; 128
    111c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    1120:	c1 c0       	rjmp	.+386    	; 0x12a4 <__vector_11+0x268>
    1122:	96 30       	cpi	r25, 0x06	; 6
    1124:	09 f0       	breq	.+2      	; 0x1128 <__vector_11+0xec>
    1126:	70 c0       	rjmp	.+224    	; 0x1208 <__vector_11+0x1cc>
    1128:	eb 8c       	ldd	r14, Y+27	; 0x1b
    112a:	fc 8c       	ldd	r15, Y+28	; 0x1c
    112c:	12 30       	cpi	r17, 0x02	; 2
    112e:	69 f5       	brne	.+90     	; 0x118a <__vector_11+0x14e>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 b9 07 	call	0xf72	; 0xf72 <_Z11InitControli>
    1138:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZL14SendInterfacesv>
    113c:	99 e0       	ldi	r25, 0x09	; 9
    113e:	9e 01       	movw	r18, r28
    1140:	2f 5f       	subi	r18, 0xFF	; 255
    1142:	3f 4f       	sbci	r19, 0xFF	; 255
    1144:	69 01       	movw	r12, r18
    1146:	f9 01       	movw	r30, r18
    1148:	29 2f       	mov	r18, r25
    114a:	11 92       	st	Z+, r1
    114c:	2a 95       	dec	r18
    114e:	e9 f7       	brne	.-6      	; 0x114a <__vector_11+0x10e>
    1150:	99 83       	std	Y+1, r25	; 0x01
    1152:	1a 83       	std	Y+2, r17	; 0x02
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	9e 83       	std	Y+6, r25	; 0x06
    1158:	90 ea       	ldi	r25, 0xA0	; 160
    115a:	98 87       	std	Y+8, r25	; 0x08
    115c:	9a ef       	ldi	r25, 0xFA	; 250
    115e:	99 87       	std	Y+9, r25	; 0x09
    1160:	20 91 5f 04 	lds	r18, 0x045F	; 0x80045f <_ZL6_cmark>
    1164:	30 91 60 04 	lds	r19, 0x0460	; 0x800460 <_ZL6_cmark+0x1>
    1168:	27 5f       	subi	r18, 0xF7	; 247
    116a:	3f 4f       	sbci	r19, 0xFF	; 255
    116c:	3c 83       	std	Y+4, r19	; 0x04
    116e:	2b 83       	std	Y+3, r18	; 0x03
    1170:	8d 83       	std	Y+5, r24	; 0x05
    1172:	c7 01       	movw	r24, r14
    1174:	0e 94 b9 07 	call	0xf72	; 0xf72 <_Z11InitControli>
    1178:	49 e0       	ldi	r20, 0x09	; 9
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	b6 01       	movw	r22, r12
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	0e 94 c4 07 	call	0xf88	; 0xf88 <_Z15USB_SendControlhPKvi>
    1184:	0e 94 70 06 	call	0xce0	; 0xce0 <_ZL14SendInterfacesv>
    1188:	8d c0       	rjmp	.+282    	; 0x12a4 <__vector_11+0x268>
    118a:	c7 01       	movw	r24, r14
    118c:	0e 94 b9 07 	call	0xf72	; 0xf72 <_Z11InitControli>
    1190:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_Z12PluggableUSBv>
    1194:	be 01       	movw	r22, r28
    1196:	6b 5e       	subi	r22, 0xEB	; 235
    1198:	7f 4f       	sbci	r23, 0xFF	; 255
    119a:	0e 94 75 14 	call	0x28ea	; 0x28ea <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	19 f0       	breq	.+6      	; 0x11a8 <__vector_11+0x16c>
    11a2:	0c f0       	brlt	.+2      	; 0x11a6 <__vector_11+0x16a>
    11a4:	7f c0       	rjmp	.+254    	; 0x12a4 <__vector_11+0x268>
    11a6:	82 c0       	rjmp	.+260    	; 0x12ac <__vector_11+0x270>
    11a8:	11 30       	cpi	r17, 0x01	; 1
    11aa:	09 f4       	brne	.+2      	; 0x11ae <__vector_11+0x172>
    11ac:	70 c0       	rjmp	.+224    	; 0x128e <__vector_11+0x252>
    11ae:	13 30       	cpi	r17, 0x03	; 3
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <__vector_11+0x178>
    11b2:	7c c0       	rjmp	.+248    	; 0x12ac <__vector_11+0x270>
    11b4:	8f 89       	ldd	r24, Y+23	; 0x17
    11b6:	88 23       	and	r24, r24
    11b8:	09 f4       	brne	.+2      	; 0x11bc <__vector_11+0x180>
    11ba:	6c c0       	rjmp	.+216    	; 0x1294 <__vector_11+0x258>
    11bc:	82 30       	cpi	r24, 0x02	; 2
    11be:	29 f4       	brne	.+10     	; 0x11ca <__vector_11+0x18e>
    11c0:	40 e8       	ldi	r20, 0x80	; 128
    11c2:	60 e1       	ldi	r22, 0x10	; 16
    11c4:	88 ee       	ldi	r24, 0xE8	; 232
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	06 c0       	rjmp	.+12     	; 0x11d6 <__vector_11+0x19a>
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	39 f4       	brne	.+14     	; 0x11dc <__vector_11+0x1a0>
    11ce:	40 e8       	ldi	r20, 0x80	; 128
    11d0:	6b e0       	ldi	r22, 0x0B	; 11
    11d2:	8c ed       	ldi	r24, 0xDC	; 220
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZL24USB_SendStringDescriptorPKhhh>
    11da:	56 c0       	rjmp	.+172    	; 0x1288 <__vector_11+0x24c>
    11dc:	83 30       	cpi	r24, 0x03	; 3
    11de:	09 f0       	breq	.+2      	; 0x11e2 <__vector_11+0x1a6>
    11e0:	65 c0       	rjmp	.+202    	; 0x12ac <__vector_11+0x270>
    11e2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_Z12PluggableUSBv>
    11e6:	8e 01       	movw	r16, r28
    11e8:	0f 5f       	subi	r16, 0xFF	; 255
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
    11ec:	b8 01       	movw	r22, r16
    11ee:	0e 94 94 14 	call	0x2928	; 0x2928 <_ZN13PluggableUSB_12getShortNameEPc>
    11f2:	f8 01       	movw	r30, r16
    11f4:	01 90       	ld	r0, Z+
    11f6:	00 20       	and	r0, r0
    11f8:	e9 f7       	brne	.-6      	; 0x11f4 <__vector_11+0x1b8>
    11fa:	31 97       	sbiw	r30, 0x01	; 1
    11fc:	bf 01       	movw	r22, r30
    11fe:	60 1b       	sub	r22, r16
    1200:	71 0b       	sbc	r23, r17
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	c8 01       	movw	r24, r16
    1206:	e7 cf       	rjmp	.-50     	; 0x11d6 <__vector_11+0x19a>
    1208:	97 30       	cpi	r25, 0x07	; 7
    120a:	09 f4       	brne	.+2      	; 0x120e <__vector_11+0x1d2>
    120c:	4f c0       	rjmp	.+158    	; 0x12ac <__vector_11+0x270>
    120e:	98 30       	cpi	r25, 0x08	; 8
    1210:	21 f4       	brne	.+8      	; 0x121a <__vector_11+0x1de>
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1218:	45 c0       	rjmp	.+138    	; 0x12a4 <__vector_11+0x268>
    121a:	99 30       	cpi	r25, 0x09	; 9
    121c:	09 f0       	breq	.+2      	; 0x1220 <__vector_11+0x1e4>
    121e:	42 c0       	rjmp	.+132    	; 0x12a4 <__vector_11+0x268>
    1220:	83 70       	andi	r24, 0x03	; 3
    1222:	09 f0       	breq	.+2      	; 0x1226 <__vector_11+0x1ea>
    1224:	43 c0       	rjmp	.+134    	; 0x12ac <__vector_11+0x270>
    1226:	ec e0       	ldi	r30, 0x0C	; 12
    1228:	f1 e0       	ldi	r31, 0x01	; 1
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	31 e0       	ldi	r19, 0x01	; 1
    122e:	96 e3       	ldi	r25, 0x36	; 54
    1230:	20 81       	ld	r18, Z
    1232:	21 11       	cpse	r18, r1
    1234:	09 c0       	rjmp	.+18     	; 0x1248 <__vector_11+0x20c>
    1236:	8e e7       	ldi	r24, 0x7E	; 126
    1238:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
    123c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
    1240:	8f 89       	ldd	r24, Y+23	; 0x17
    1242:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <_usbConfiguration>
    1246:	2e c0       	rjmp	.+92     	; 0x12a4 <__vector_11+0x268>
    1248:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    124c:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1250:	21 91       	ld	r18, Z+
    1252:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1256:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    125a:	8f 5f       	subi	r24, 0xFF	; 255
    125c:	87 30       	cpi	r24, 0x07	; 7
    125e:	41 f7       	brne	.-48     	; 0x1230 <__vector_11+0x1f4>
    1260:	ea cf       	rjmp	.-44     	; 0x1236 <__vector_11+0x1fa>
    1262:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1264:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1266:	0e 94 b9 07 	call	0xf72	; 0xf72 <_Z11InitControli>
    126a:	89 8d       	ldd	r24, Y+25	; 0x19
    126c:	81 11       	cpse	r24, r1
    126e:	05 c0       	rjmp	.+10     	; 0x127a <__vector_11+0x23e>
    1270:	ce 01       	movw	r24, r28
    1272:	45 96       	adiw	r24, 0x15	; 21
    1274:	0e 94 a8 13 	call	0x2750	; 0x2750 <_Z9CDC_SetupR8USBSetup>
    1278:	07 c0       	rjmp	.+14     	; 0x1288 <__vector_11+0x24c>
    127a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <_Z12PluggableUSBv>
    127e:	be 01       	movw	r22, r28
    1280:	6b 5e       	subi	r22, 0xEB	; 235
    1282:	7f 4f       	sbci	r23, 0xFF	; 255
    1284:	0e 94 b3 14 	call	0x2966	; 0x2966 <_ZN13PluggableUSB_5setupER8USBSetup>
    1288:	88 23       	and	r24, r24
    128a:	81 f0       	breq	.+32     	; 0x12ac <__vector_11+0x270>
    128c:	0b c0       	rjmp	.+22     	; 0x12a4 <__vector_11+0x268>
    128e:	6a ec       	ldi	r22, 0xCA	; 202
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <__vector_11+0x25c>
    1294:	69 ef       	ldi	r22, 0xF9	; 249
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	fb 01       	movw	r30, r22
    129a:	44 91       	lpm	r20, Z
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	80 e8       	ldi	r24, 0x80	; 128
    12a0:	0e 94 c4 07 	call	0xf88	; 0xf88 <_Z15USB_SendControlhPKvi>
    12a4:	8e ef       	ldi	r24, 0xFE	; 254
    12a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <__vector_11+0x276>
    12ac:	81 e2       	ldi	r24, 0x21	; 33
    12ae:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    12b2:	6c 96       	adiw	r28, 0x1c	; 28
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	ff 91       	pop	r31
    12c4:	ef 91       	pop	r30
    12c6:	bf 91       	pop	r27
    12c8:	af 91       	pop	r26
    12ca:	9f 91       	pop	r25
    12cc:	8f 91       	pop	r24
    12ce:	7f 91       	pop	r23
    12d0:	6f 91       	pop	r22
    12d2:	5f 91       	pop	r21
    12d4:	4f 91       	pop	r20
    12d6:	3f 91       	pop	r19
    12d8:	2f 91       	pop	r18
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	ff 90       	pop	r15
    12e0:	ef 90       	pop	r14
    12e2:	df 90       	pop	r13
    12e4:	cf 90       	pop	r12
    12e6:	0f 90       	pop	r0
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	0f 90       	pop	r0
    12ec:	1f 90       	pop	r1
    12ee:	18 95       	reti

000012f0 <_Z9USB_Flushh>:
    12f0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    12f4:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    12f8:	88 23       	and	r24, r24
    12fa:	19 f0       	breq	.+6      	; 0x1302 <_Z9USB_Flushh+0x12>
    12fc:	8a e3       	ldi	r24, 0x3A	; 58
    12fe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1302:	08 95       	ret

00001304 <__vector_10>:
    1304:	1f 92       	push	r1
    1306:	0f 92       	push	r0
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	0f 92       	push	r0
    130c:	11 24       	eor	r1, r1
    130e:	2f 93       	push	r18
    1310:	3f 93       	push	r19
    1312:	4f 93       	push	r20
    1314:	5f 93       	push	r21
    1316:	6f 93       	push	r22
    1318:	7f 93       	push	r23
    131a:	8f 93       	push	r24
    131c:	9f 93       	push	r25
    131e:	af 93       	push	r26
    1320:	bf 93       	push	r27
    1322:	cf 93       	push	r28
    1324:	ef 93       	push	r30
    1326:	ff 93       	push	r31
    1328:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    132c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1330:	83 7f       	andi	r24, 0xF3	; 243
    1332:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1336:	c3 ff       	sbrs	r28, 3
    1338:	0f c0       	rjmp	.+30     	; 0x1358 <__vector_10+0x54>
    133a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1344:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1348:	82 e3       	ldi	r24, 0x32	; 50
    134a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    134e:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <_usbConfiguration>
    1352:	88 e0       	ldi	r24, 0x08	; 8
    1354:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1358:	c2 ff       	sbrs	r28, 2
    135a:	19 c0       	rjmp	.+50     	; 0x138e <__vector_10+0x8a>
    135c:	83 e0       	ldi	r24, 0x03	; 3
    135e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_Z9USB_Flushh>
    1362:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <TxLEDPulse>
    1366:	88 23       	and	r24, r24
    1368:	39 f0       	breq	.+14     	; 0x1378 <__vector_10+0x74>
    136a:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <TxLEDPulse>
    136e:	81 50       	subi	r24, 0x01	; 1
    1370:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <TxLEDPulse>
    1374:	88 23       	and	r24, r24
    1376:	89 f1       	breq	.+98     	; 0x13da <__vector_10+0xd6>
    1378:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <RxLEDPulse>
    137c:	88 23       	and	r24, r24
    137e:	39 f0       	breq	.+14     	; 0x138e <__vector_10+0x8a>
    1380:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <RxLEDPulse>
    1384:	81 50       	subi	r24, 0x01	; 1
    1386:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <RxLEDPulse>
    138a:	88 23       	and	r24, r24
    138c:	41 f1       	breq	.+80     	; 0x13de <__vector_10+0xda>
    138e:	c4 ff       	sbrs	r28, 4
    1390:	10 c0       	rjmp	.+32     	; 0x13b2 <__vector_10+0xae>
    1392:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1396:	8e 7e       	andi	r24, 0xEE	; 238
    1398:	81 60       	ori	r24, 0x01	; 1
    139a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    139e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    13a2:	8f 7e       	andi	r24, 0xEF	; 239
    13a4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    13a8:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <_usbSuspendState>
    13ac:	8e 7e       	andi	r24, 0xEE	; 238
    13ae:	80 61       	ori	r24, 0x10	; 16
    13b0:	11 c0       	rjmp	.+34     	; 0x13d4 <__vector_10+0xd0>
    13b2:	c0 ff       	sbrs	r28, 0
    13b4:	16 c0       	rjmp	.+44     	; 0x13e2 <__vector_10+0xde>
    13b6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    13ba:	8e 7e       	andi	r24, 0xEE	; 238
    13bc:	80 61       	ori	r24, 0x10	; 16
    13be:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    13c2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    13c6:	8e 7e       	andi	r24, 0xEE	; 238
    13c8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    13cc:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <_usbSuspendState>
    13d0:	8e 7e       	andi	r24, 0xEE	; 238
    13d2:	81 60       	ori	r24, 0x01	; 1
    13d4:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <_usbSuspendState>
    13d8:	04 c0       	rjmp	.+8      	; 0x13e2 <__vector_10+0xde>
    13da:	5d 9a       	sbi	0x0b, 5	; 11
    13dc:	cd cf       	rjmp	.-102    	; 0x1378 <__vector_10+0x74>
    13de:	28 9a       	sbi	0x05, 0	; 5
    13e0:	d6 cf       	rjmp	.-84     	; 0x138e <__vector_10+0x8a>
    13e2:	ff 91       	pop	r31
    13e4:	ef 91       	pop	r30
    13e6:	cf 91       	pop	r28
    13e8:	bf 91       	pop	r27
    13ea:	af 91       	pop	r26
    13ec:	9f 91       	pop	r25
    13ee:	8f 91       	pop	r24
    13f0:	7f 91       	pop	r23
    13f2:	6f 91       	pop	r22
    13f4:	5f 91       	pop	r21
    13f6:	4f 91       	pop	r20
    13f8:	3f 91       	pop	r19
    13fa:	2f 91       	pop	r18
    13fc:	0f 90       	pop	r0
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	0f 90       	pop	r0
    1402:	1f 90       	pop	r1
    1404:	18 95       	reti

00001406 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    1406:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <_usbConfiguration>
	_usbCurrentStatus = 0;
    140a:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <_usbCurrentStatus>
	_usbSuspendState = 0;
    140e:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <_usbSuspendState>
	USB_ClockEnable();
    1412:	0e 94 4d 06 	call	0xc9a	; 0xc9a <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    1416:	e1 ee       	ldi	r30, 0xE1	; 225
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	8e 7e       	andi	r24, 0xEE	; 238
    141e:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    1420:	8d e0       	ldi	r24, 0x0D	; 13
    1422:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
	
	TX_RX_LED_INIT;
    1426:	55 9a       	sbi	0x0a, 5	; 10
    1428:	20 9a       	sbi	0x04, 0	; 4
    142a:	08 95       	ret

0000142c <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    142c:	1f 92       	push	r1
    142e:	0f 92       	push	r0
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	0f 92       	push	r0
    1434:	11 24       	eor	r1, r1
    1436:	2f 93       	push	r18
    1438:	3f 93       	push	r19
    143a:	8f 93       	push	r24
    143c:	9f 93       	push	r25
    143e:	af 93       	push	r26
    1440:	bf 93       	push	r27
    1442:	80 91 67 04 	lds	r24, 0x0467	; 0x800467 <timer0_millis>
    1446:	90 91 68 04 	lds	r25, 0x0468	; 0x800468 <timer0_millis+0x1>
    144a:	a0 91 69 04 	lds	r26, 0x0469	; 0x800469 <timer0_millis+0x2>
    144e:	b0 91 6a 04 	lds	r27, 0x046A	; 0x80046a <timer0_millis+0x3>
    1452:	30 91 66 04 	lds	r19, 0x0466	; 0x800466 <timer0_fract>
    1456:	23 e0       	ldi	r18, 0x03	; 3
    1458:	23 0f       	add	r18, r19
    145a:	2d 37       	cpi	r18, 0x7D	; 125
    145c:	20 f4       	brcc	.+8      	; 0x1466 <__vector_23+0x3a>
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	a1 1d       	adc	r26, r1
    1462:	b1 1d       	adc	r27, r1
    1464:	05 c0       	rjmp	.+10     	; 0x1470 <__vector_23+0x44>
    1466:	26 e8       	ldi	r18, 0x86	; 134
    1468:	23 0f       	add	r18, r19
    146a:	02 96       	adiw	r24, 0x02	; 2
    146c:	a1 1d       	adc	r26, r1
    146e:	b1 1d       	adc	r27, r1
    1470:	20 93 66 04 	sts	0x0466, r18	; 0x800466 <timer0_fract>
    1474:	80 93 67 04 	sts	0x0467, r24	; 0x800467 <timer0_millis>
    1478:	90 93 68 04 	sts	0x0468, r25	; 0x800468 <timer0_millis+0x1>
    147c:	a0 93 69 04 	sts	0x0469, r26	; 0x800469 <timer0_millis+0x2>
    1480:	b0 93 6a 04 	sts	0x046A, r27	; 0x80046a <timer0_millis+0x3>
    1484:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <timer0_overflow_count>
    1488:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <timer0_overflow_count+0x1>
    148c:	a0 91 6d 04 	lds	r26, 0x046D	; 0x80046d <timer0_overflow_count+0x2>
    1490:	b0 91 6e 04 	lds	r27, 0x046E	; 0x80046e <timer0_overflow_count+0x3>
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	a1 1d       	adc	r26, r1
    1498:	b1 1d       	adc	r27, r1
    149a:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <timer0_overflow_count>
    149e:	90 93 6c 04 	sts	0x046C, r25	; 0x80046c <timer0_overflow_count+0x1>
    14a2:	a0 93 6d 04 	sts	0x046D, r26	; 0x80046d <timer0_overflow_count+0x2>
    14a6:	b0 93 6e 04 	sts	0x046E, r27	; 0x80046e <timer0_overflow_count+0x3>
    14aa:	bf 91       	pop	r27
    14ac:	af 91       	pop	r26
    14ae:	9f 91       	pop	r25
    14b0:	8f 91       	pop	r24
    14b2:	3f 91       	pop	r19
    14b4:	2f 91       	pop	r18
    14b6:	0f 90       	pop	r0
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	0f 90       	pop	r0
    14bc:	1f 90       	pop	r1
    14be:	18 95       	reti

000014c0 <millis>:
    14c0:	2f b7       	in	r18, 0x3f	; 63
    14c2:	f8 94       	cli
    14c4:	60 91 67 04 	lds	r22, 0x0467	; 0x800467 <timer0_millis>
    14c8:	70 91 68 04 	lds	r23, 0x0468	; 0x800468 <timer0_millis+0x1>
    14cc:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <timer0_millis+0x2>
    14d0:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <timer0_millis+0x3>
    14d4:	2f bf       	out	0x3f, r18	; 63
    14d6:	08 95       	ret

000014d8 <micros>:
    14d8:	3f b7       	in	r19, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <timer0_overflow_count>
    14e0:	90 91 6c 04 	lds	r25, 0x046C	; 0x80046c <timer0_overflow_count+0x1>
    14e4:	a0 91 6d 04 	lds	r26, 0x046D	; 0x80046d <timer0_overflow_count+0x2>
    14e8:	b0 91 6e 04 	lds	r27, 0x046E	; 0x80046e <timer0_overflow_count+0x3>
    14ec:	26 b5       	in	r18, 0x26	; 38
    14ee:	a8 9b       	sbis	0x15, 0	; 21
    14f0:	05 c0       	rjmp	.+10     	; 0x14fc <micros+0x24>
    14f2:	2f 3f       	cpi	r18, 0xFF	; 255
    14f4:	19 f0       	breq	.+6      	; 0x14fc <micros+0x24>
    14f6:	01 96       	adiw	r24, 0x01	; 1
    14f8:	a1 1d       	adc	r26, r1
    14fa:	b1 1d       	adc	r27, r1
    14fc:	3f bf       	out	0x3f, r19	; 63
    14fe:	ba 2f       	mov	r27, r26
    1500:	a9 2f       	mov	r26, r25
    1502:	98 2f       	mov	r25, r24
    1504:	88 27       	eor	r24, r24
    1506:	82 0f       	add	r24, r18
    1508:	91 1d       	adc	r25, r1
    150a:	a1 1d       	adc	r26, r1
    150c:	b1 1d       	adc	r27, r1
    150e:	bc 01       	movw	r22, r24
    1510:	cd 01       	movw	r24, r26
    1512:	42 e0       	ldi	r20, 0x02	; 2
    1514:	66 0f       	add	r22, r22
    1516:	77 1f       	adc	r23, r23
    1518:	88 1f       	adc	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	4a 95       	dec	r20
    151e:	d1 f7       	brne	.-12     	; 0x1514 <micros+0x3c>
    1520:	08 95       	ret

00001522 <delay>:
    1522:	8f 92       	push	r8
    1524:	9f 92       	push	r9
    1526:	af 92       	push	r10
    1528:	bf 92       	push	r11
    152a:	cf 92       	push	r12
    152c:	df 92       	push	r13
    152e:	ef 92       	push	r14
    1530:	ff 92       	push	r15
    1532:	6b 01       	movw	r12, r22
    1534:	7c 01       	movw	r14, r24
    1536:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <micros>
    153a:	4b 01       	movw	r8, r22
    153c:	5c 01       	movw	r10, r24
    153e:	c1 14       	cp	r12, r1
    1540:	d1 04       	cpc	r13, r1
    1542:	e1 04       	cpc	r14, r1
    1544:	f1 04       	cpc	r15, r1
    1546:	01 f1       	breq	.+64     	; 0x1588 <delay+0x66>
    1548:	0e 94 4b 14 	call	0x2896	; 0x2896 <yield>
    154c:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <micros>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	88 19       	sub	r24, r8
    1556:	99 09       	sbc	r25, r9
    1558:	aa 09       	sbc	r26, r10
    155a:	bb 09       	sbc	r27, r11
    155c:	88 3e       	cpi	r24, 0xE8	; 232
    155e:	93 40       	sbci	r25, 0x03	; 3
    1560:	a1 05       	cpc	r26, r1
    1562:	b1 05       	cpc	r27, r1
    1564:	60 f3       	brcs	.-40     	; 0x153e <delay+0x1c>
    1566:	21 e0       	ldi	r18, 0x01	; 1
    1568:	c2 1a       	sub	r12, r18
    156a:	d1 08       	sbc	r13, r1
    156c:	e1 08       	sbc	r14, r1
    156e:	f1 08       	sbc	r15, r1
    1570:	88 ee       	ldi	r24, 0xE8	; 232
    1572:	88 0e       	add	r8, r24
    1574:	83 e0       	ldi	r24, 0x03	; 3
    1576:	98 1e       	adc	r9, r24
    1578:	a1 1c       	adc	r10, r1
    157a:	b1 1c       	adc	r11, r1
    157c:	c1 14       	cp	r12, r1
    157e:	d1 04       	cpc	r13, r1
    1580:	e1 04       	cpc	r14, r1
    1582:	f1 04       	cpc	r15, r1
    1584:	19 f7       	brne	.-58     	; 0x154c <delay+0x2a>
    1586:	db cf       	rjmp	.-74     	; 0x153e <delay+0x1c>
    1588:	ff 90       	pop	r15
    158a:	ef 90       	pop	r14
    158c:	df 90       	pop	r13
    158e:	cf 90       	pop	r12
    1590:	bf 90       	pop	r11
    1592:	af 90       	pop	r10
    1594:	9f 90       	pop	r9
    1596:	8f 90       	pop	r8
    1598:	08 95       	ret

0000159a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    159a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    159c:	84 b5       	in	r24, 0x24	; 36
    159e:	82 60       	ori	r24, 0x02	; 2
    15a0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    15a2:	84 b5       	in	r24, 0x24	; 36
    15a4:	81 60       	ori	r24, 0x01	; 1
    15a6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    15a8:	85 b5       	in	r24, 0x25	; 37
    15aa:	82 60       	ori	r24, 0x02	; 2
    15ac:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    15ae:	85 b5       	in	r24, 0x25	; 37
    15b0:	81 60       	ori	r24, 0x01	; 1
    15b2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    15b4:	ee e6       	ldi	r30, 0x6E	; 110
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	81 60       	ori	r24, 0x01	; 1
    15bc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    15be:	e1 e8       	ldi	r30, 0x81	; 129
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    15c4:	80 81       	ld	r24, Z
    15c6:	82 60       	ori	r24, 0x02	; 2
    15c8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    15ca:	80 81       	ld	r24, Z
    15cc:	81 60       	ori	r24, 0x01	; 1
    15ce:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    15d0:	e0 e8       	ldi	r30, 0x80	; 128
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	81 60       	ori	r24, 0x01	; 1
    15d8:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    15da:	e1 e9       	ldi	r30, 0x91	; 145
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	82 60       	ori	r24, 0x02	; 2
    15e2:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    15e4:	80 81       	ld	r24, Z
    15e6:	81 60       	ori	r24, 0x01	; 1
    15e8:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    15ea:	e0 e9       	ldi	r30, 0x90	; 144
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	81 60       	ori	r24, 0x01	; 1
    15f2:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    15f4:	e1 ec       	ldi	r30, 0xC1	; 193
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	84 60       	ori	r24, 0x04	; 4
    15fc:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    15fe:	80 81       	ld	r24, Z
    1600:	82 60       	ori	r24, 0x02	; 2
    1602:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1604:	80 81       	ld	r24, Z
    1606:	81 60       	ori	r24, 0x01	; 1
    1608:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    160a:	e3 ec       	ldi	r30, 0xC3	; 195
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	81 60       	ori	r24, 0x01	; 1
    1612:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    1614:	e0 ec       	ldi	r30, 0xC0	; 192
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	82 60       	ori	r24, 0x02	; 2
    161c:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    161e:	e2 ec       	ldi	r30, 0xC2	; 194
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	81 60       	ori	r24, 0x01	; 1
    1626:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1628:	ea e7       	ldi	r30, 0x7A	; 122
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	84 60       	ori	r24, 0x04	; 4
    1630:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1632:	80 81       	ld	r24, Z
    1634:	82 60       	ori	r24, 0x02	; 2
    1636:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1638:	80 81       	ld	r24, Z
    163a:	81 60       	ori	r24, 0x01	; 1
    163c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    163e:	80 81       	ld	r24, Z
    1640:	80 68       	ori	r24, 0x80	; 128
    1642:	80 83       	st	Z, r24
    1644:	08 95       	ret

00001646 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	fc 01       	movw	r30, r24
    164a:	31 97       	sbiw	r30, 0x01	; 1
    164c:	ef 30       	cpi	r30, 0x0F	; 15
    164e:	f1 05       	cpc	r31, r1
    1650:	b0 f5       	brcc	.+108    	; 0x16be <turnOffPWM+0x78>
    1652:	ea 5a       	subi	r30, 0xAA	; 170
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	0c 94 02 19 	jmp	0x3204	; 0x3204 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    165a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    165e:	8f 77       	andi	r24, 0x7F	; 127
    1660:	03 c0       	rjmp	.+6      	; 0x1668 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1662:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1666:	8f 7d       	andi	r24, 0xDF	; 223
    1668:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    166c:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    166e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1672:	87 7f       	andi	r24, 0xF7	; 247
    1674:	f9 cf       	rjmp	.-14     	; 0x1668 <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1676:	84 b5       	in	r24, 0x24	; 36
    1678:	8f 77       	andi	r24, 0x7F	; 127
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    167c:	84 b5       	in	r24, 0x24	; 36
    167e:	8f 7d       	andi	r24, 0xDF	; 223
    1680:	84 bd       	out	0x24, r24	; 36
    1682:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1684:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    1688:	8f 77       	andi	r24, 0x7F	; 127
    168a:	07 c0       	rjmp	.+14     	; 0x169a <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    168c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    1690:	8f 7d       	andi	r24, 0xDF	; 223
    1692:	03 c0       	rjmp	.+6      	; 0x169a <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1694:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    1698:	87 7f       	andi	r24, 0xF7	; 247
    169a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    169e:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    16a0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    16a4:	8f 77       	andi	r24, 0x7F	; 127
    16a6:	03 c0       	rjmp	.+6      	; 0x16ae <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    16a8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    16ac:	8f 7d       	andi	r24, 0xDF	; 223
    16ae:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    16b2:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    16b4:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    16b8:	87 7f       	andi	r24, 0xF7	; 247
    16ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    16be:	08 95       	ret

000016c0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	fc 01       	movw	r30, r24
    16c8:	e4 5e       	subi	r30, 0xE4	; 228
    16ca:	fe 4f       	sbci	r31, 0xFE	; 254
    16cc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    16ce:	fc 01       	movw	r30, r24
    16d0:	e5 5c       	subi	r30, 0xC5	; 197
    16d2:	fe 4f       	sbci	r31, 0xFE	; 254
    16d4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    16d6:	88 23       	and	r24, r24
    16d8:	61 f1       	breq	.+88     	; 0x1732 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	fc 01       	movw	r30, r24
    16e2:	e8 59       	subi	r30, 0x98	; 152
    16e4:	fe 4f       	sbci	r31, 0xFE	; 254
    16e6:	c5 91       	lpm	r28, Z+
    16e8:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    16ea:	fc 01       	movw	r30, r24
    16ec:	e6 5a       	subi	r30, 0xA6	; 166
    16ee:	fe 4f       	sbci	r31, 0xFE	; 254
    16f0:	a5 91       	lpm	r26, Z+
    16f2:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    16f4:	61 11       	cpse	r22, r1
    16f6:	09 c0       	rjmp	.+18     	; 0x170a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    16f8:	9f b7       	in	r25, 0x3f	; 63
                cli();
    16fa:	f8 94       	cli
		*reg &= ~bit;
    16fc:	88 81       	ld	r24, Y
    16fe:	20 95       	com	r18
    1700:	82 23       	and	r24, r18
    1702:	88 83       	st	Y, r24
		*out &= ~bit;
    1704:	ec 91       	ld	r30, X
    1706:	2e 23       	and	r18, r30
    1708:	0b c0       	rjmp	.+22     	; 0x1720 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    170a:	62 30       	cpi	r22, 0x02	; 2
    170c:	61 f4       	brne	.+24     	; 0x1726 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    170e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1710:	f8 94       	cli
		*reg &= ~bit;
    1712:	88 81       	ld	r24, Y
    1714:	32 2f       	mov	r19, r18
    1716:	30 95       	com	r19
    1718:	83 23       	and	r24, r19
    171a:	88 83       	st	Y, r24
		*out |= bit;
    171c:	ec 91       	ld	r30, X
    171e:	2e 2b       	or	r18, r30
    1720:	2c 93       	st	X, r18
		SREG = oldSREG;
    1722:	9f bf       	out	0x3f, r25	; 63
    1724:	06 c0       	rjmp	.+12     	; 0x1732 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1726:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1728:	f8 94       	cli
		*reg |= bit;
    172a:	e8 81       	ld	r30, Y
    172c:	2e 2b       	or	r18, r30
    172e:	28 83       	st	Y, r18
		SREG = oldSREG;
    1730:	8f bf       	out	0x3f, r24	; 63
	}
}
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	08 95       	ret

00001738 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1738:	1f 93       	push	r17
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	f9 01       	movw	r30, r18
    1744:	e3 50       	subi	r30, 0x03	; 3
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    174a:	f9 01       	movw	r30, r18
    174c:	e4 5e       	subi	r30, 0xE4	; 228
    174e:	fe 4f       	sbci	r31, 0xFE	; 254
    1750:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1752:	f9 01       	movw	r30, r18
    1754:	e5 5c       	subi	r30, 0xC5	; 197
    1756:	fe 4f       	sbci	r31, 0xFE	; 254
    1758:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    175a:	cc 23       	and	r28, r28
    175c:	c1 f0       	breq	.+48     	; 0x178e <digitalWrite+0x56>
    175e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1760:	81 11       	cpse	r24, r1
    1762:	0e 94 23 0b 	call	0x1646	; 0x1646 <turnOffPWM>

	out = portOutputRegister(port);
    1766:	ec 2f       	mov	r30, r28
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	ee 0f       	add	r30, r30
    176c:	ff 1f       	adc	r31, r31
    176e:	e6 5a       	subi	r30, 0xA6	; 166
    1770:	fe 4f       	sbci	r31, 0xFE	; 254
    1772:	a5 91       	lpm	r26, Z+
    1774:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1776:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1778:	f8 94       	cli

	if (val == LOW) {
    177a:	11 11       	cpse	r17, r1
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <digitalWrite+0x4e>
		*out &= ~bit;
    177e:	8c 91       	ld	r24, X
    1780:	d0 95       	com	r29
    1782:	d8 23       	and	r29, r24
    1784:	02 c0       	rjmp	.+4      	; 0x178a <digitalWrite+0x52>
	} else {
		*out |= bit;
    1786:	ec 91       	ld	r30, X
    1788:	de 2b       	or	r29, r30
    178a:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    178c:	9f bf       	out	0x3f, r25	; 63
}
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	08 95       	ret

00001796 <_ZN6StringD1Ev>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    1796:	fc 01       	movw	r30, r24
    1798:	80 81       	ld	r24, Z
    179a:	91 81       	ldd	r25, Z+1	; 0x01
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	11 f0       	breq	.+4      	; 0x17a4 <_ZN6StringD1Ev+0xe>
    17a0:	0c 94 ba 19 	jmp	0x3374	; 0x3374 <free>
    17a4:	08 95       	ret

000017a6 <_ZN6String10invalidateEv>:
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	ec 01       	movw	r28, r24
    17ac:	88 81       	ld	r24, Y
    17ae:	99 81       	ldd	r25, Y+1	; 0x01
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	11 f0       	breq	.+4      	; 0x17b8 <_ZN6String10invalidateEv+0x12>
    17b4:	0e 94 ba 19 	call	0x3374	; 0x3374 <free>
    17b8:	19 82       	std	Y+1, r1	; 0x01
    17ba:	18 82       	st	Y, r1
    17bc:	1d 82       	std	Y+5, r1	; 0x05
    17be:	1c 82       	std	Y+4, r1	; 0x04
    17c0:	1b 82       	std	Y+3, r1	; 0x03
    17c2:	1a 82       	std	Y+2, r1	; 0x02
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	08 95       	ret

000017ca <_ZN6String12changeBufferEj>:
    17ca:	0f 93       	push	r16
    17cc:	1f 93       	push	r17
    17ce:	cf 93       	push	r28
    17d0:	df 93       	push	r29
    17d2:	ec 01       	movw	r28, r24
    17d4:	8b 01       	movw	r16, r22
    17d6:	6f 5f       	subi	r22, 0xFF	; 255
    17d8:	7f 4f       	sbci	r23, 0xFF	; 255
    17da:	88 81       	ld	r24, Y
    17dc:	99 81       	ldd	r25, Y+1	; 0x01
    17de:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <realloc>
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	31 f0       	breq	.+12     	; 0x17f2 <_ZN6String12changeBufferEj+0x28>
    17e6:	99 83       	std	Y+1, r25	; 0x01
    17e8:	88 83       	st	Y, r24
    17ea:	1b 83       	std	Y+3, r17	; 0x03
    17ec:	0a 83       	std	Y+2, r16	; 0x02
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	01 c0       	rjmp	.+2      	; 0x17f4 <_ZN6String12changeBufferEj+0x2a>
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	1f 91       	pop	r17
    17fa:	0f 91       	pop	r16
    17fc:	08 95       	ret

000017fe <_ZN6String7reserveEj>:
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	ec 01       	movw	r28, r24
    1804:	88 81       	ld	r24, Y
    1806:	99 81       	ldd	r25, Y+1	; 0x01
    1808:	89 2b       	or	r24, r25
    180a:	29 f0       	breq	.+10     	; 0x1816 <_ZN6String7reserveEj+0x18>
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	9b 81       	ldd	r25, Y+3	; 0x03
    1810:	86 17       	cp	r24, r22
    1812:	97 07       	cpc	r25, r23
    1814:	60 f4       	brcc	.+24     	; 0x182e <_ZN6String7reserveEj+0x30>
    1816:	ce 01       	movw	r24, r28
    1818:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <_ZN6String12changeBufferEj>
    181c:	88 23       	and	r24, r24
    181e:	41 f0       	breq	.+16     	; 0x1830 <_ZN6String7reserveEj+0x32>
    1820:	8c 81       	ldd	r24, Y+4	; 0x04
    1822:	9d 81       	ldd	r25, Y+5	; 0x05
    1824:	89 2b       	or	r24, r25
    1826:	19 f4       	brne	.+6      	; 0x182e <_ZN6String7reserveEj+0x30>
    1828:	e8 81       	ld	r30, Y
    182a:	f9 81       	ldd	r31, Y+1	; 0x01
    182c:	10 82       	st	Z, r1
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	08 95       	ret

00001836 <_ZN6String4copyEPKcj>:
    1836:	ef 92       	push	r14
    1838:	ff 92       	push	r15
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	ec 01       	movw	r28, r24
    1844:	7b 01       	movw	r14, r22
    1846:	8a 01       	movw	r16, r20
    1848:	ba 01       	movw	r22, r20
    184a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <_ZN6String7reserveEj>
    184e:	81 11       	cpse	r24, r1
    1850:	04 c0       	rjmp	.+8      	; 0x185a <_ZN6String4copyEPKcj+0x24>
    1852:	ce 01       	movw	r24, r28
    1854:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <_ZN6String10invalidateEv>
    1858:	07 c0       	rjmp	.+14     	; 0x1868 <_ZN6String4copyEPKcj+0x32>
    185a:	1d 83       	std	Y+5, r17	; 0x05
    185c:	0c 83       	std	Y+4, r16	; 0x04
    185e:	b7 01       	movw	r22, r14
    1860:	88 81       	ld	r24, Y
    1862:	99 81       	ldd	r25, Y+1	; 0x01
    1864:	0e 94 c9 1b 	call	0x3792	; 0x3792 <strcpy>
    1868:	ce 01       	movw	r24, r28
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	1f 91       	pop	r17
    1870:	0f 91       	pop	r16
    1872:	ff 90       	pop	r15
    1874:	ef 90       	pop	r14
    1876:	08 95       	ret

00001878 <_ZN6StringC1EPKc>:
    1878:	fc 01       	movw	r30, r24
    187a:	11 82       	std	Z+1, r1	; 0x01
    187c:	10 82       	st	Z, r1
    187e:	13 82       	std	Z+3, r1	; 0x03
    1880:	12 82       	std	Z+2, r1	; 0x02
    1882:	15 82       	std	Z+5, r1	; 0x05
    1884:	14 82       	std	Z+4, r1	; 0x04
    1886:	61 15       	cp	r22, r1
    1888:	71 05       	cpc	r23, r1
    188a:	51 f0       	breq	.+20     	; 0x18a0 <_ZN6StringC1EPKc+0x28>
    188c:	fb 01       	movw	r30, r22
    188e:	01 90       	ld	r0, Z+
    1890:	00 20       	and	r0, r0
    1892:	e9 f7       	brne	.-6      	; 0x188e <_ZN6StringC1EPKc+0x16>
    1894:	31 97       	sbiw	r30, 0x01	; 1
    1896:	af 01       	movw	r20, r30
    1898:	46 1b       	sub	r20, r22
    189a:	57 0b       	sbc	r21, r23
    189c:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <_ZN6String4copyEPKcj>
    18a0:	08 95       	ret

000018a2 <_ZN6StringaSEPKc>:
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	ec 01       	movw	r28, r24
    18a8:	61 15       	cp	r22, r1
    18aa:	71 05       	cpc	r23, r1
    18ac:	59 f0       	breq	.+22     	; 0x18c4 <_ZN6StringaSEPKc+0x22>
    18ae:	fb 01       	movw	r30, r22
    18b0:	01 90       	ld	r0, Z+
    18b2:	00 20       	and	r0, r0
    18b4:	e9 f7       	brne	.-6      	; 0x18b0 <_ZN6StringaSEPKc+0xe>
    18b6:	31 97       	sbiw	r30, 0x01	; 1
    18b8:	af 01       	movw	r20, r30
    18ba:	46 1b       	sub	r20, r22
    18bc:	57 0b       	sbc	r21, r23
    18be:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN6String4copyEPKcj>
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <_ZN6StringaSEPKc+0x26>
    18c4:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <_ZN6String10invalidateEv>
    18c8:	ce 01       	movw	r24, r28
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	08 95       	ret

000018d0 <_ZN6String6concatEPKcj>:
    18d0:	ef 92       	push	r14
    18d2:	ff 92       	push	r15
    18d4:	0f 93       	push	r16
    18d6:	1f 93       	push	r17
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	61 15       	cp	r22, r1
    18de:	71 05       	cpc	r23, r1
    18e0:	11 f4       	brne	.+4      	; 0x18e6 <_ZN6String6concatEPKcj+0x16>
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	1c c0       	rjmp	.+56     	; 0x191e <_ZN6String6concatEPKcj+0x4e>
    18e6:	41 15       	cp	r20, r1
    18e8:	51 05       	cpc	r21, r1
    18ea:	c1 f0       	breq	.+48     	; 0x191c <_ZN6String6concatEPKcj+0x4c>
    18ec:	7b 01       	movw	r14, r22
    18ee:	ec 01       	movw	r28, r24
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	9d 81       	ldd	r25, Y+5	; 0x05
    18f4:	8a 01       	movw	r16, r20
    18f6:	08 0f       	add	r16, r24
    18f8:	19 1f       	adc	r17, r25
    18fa:	b8 01       	movw	r22, r16
    18fc:	ce 01       	movw	r24, r28
    18fe:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <_ZN6String7reserveEj>
    1902:	88 23       	and	r24, r24
    1904:	71 f3       	breq	.-36     	; 0x18e2 <_ZN6String6concatEPKcj+0x12>
    1906:	28 81       	ld	r18, Y
    1908:	39 81       	ldd	r19, Y+1	; 0x01
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
    190c:	9d 81       	ldd	r25, Y+5	; 0x05
    190e:	b7 01       	movw	r22, r14
    1910:	82 0f       	add	r24, r18
    1912:	93 1f       	adc	r25, r19
    1914:	0e 94 c9 1b 	call	0x3792	; 0x3792 <strcpy>
    1918:	1d 83       	std	Y+5, r17	; 0x05
    191a:	0c 83       	std	Y+4, r16	; 0x04
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	ff 90       	pop	r15
    1928:	ef 90       	pop	r14
    192a:	08 95       	ret

0000192c <_ZN6String6concatEc>:
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	00 d0       	rcall	.+0      	; 0x1932 <_ZN6String6concatEc+0x6>
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	69 83       	std	Y+1, r22	; 0x01
    1938:	1a 82       	std	Y+2, r1	; 0x02
    193a:	41 e0       	ldi	r20, 0x01	; 1
    193c:	50 e0       	ldi	r21, 0x00	; 0
    193e:	be 01       	movw	r22, r28
    1940:	6f 5f       	subi	r22, 0xFF	; 255
    1942:	7f 4f       	sbci	r23, 0xFF	; 255
    1944:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <_ZN6String6concatEPKcj>
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	08 95       	ret

00001952 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
	if (!bufsize || !buf) return;
    195a:	41 15       	cp	r20, r1
    195c:	51 05       	cpc	r21, r1
    195e:	19 f1       	breq	.+70     	; 0x19a6 <_ZNK6String8getBytesEPhjj+0x54>
    1960:	61 15       	cp	r22, r1
    1962:	71 05       	cpc	r23, r1
    1964:	01 f1       	breq	.+64     	; 0x19a6 <_ZNK6String8getBytesEPhjj+0x54>
	if (index >= len) {
    1966:	dc 01       	movw	r26, r24
    1968:	14 96       	adiw	r26, 0x04	; 4
    196a:	ed 91       	ld	r30, X+
    196c:	fc 91       	ld	r31, X
    196e:	15 97       	sbiw	r26, 0x05	; 5
    1970:	2e 17       	cp	r18, r30
    1972:	3f 07       	cpc	r19, r31
    1974:	18 f0       	brcs	.+6      	; 0x197c <_ZNK6String8getBytesEPhjj+0x2a>
		buf[0] = 0;
    1976:	fb 01       	movw	r30, r22
    1978:	10 82       	st	Z, r1
		return;
    197a:	15 c0       	rjmp	.+42     	; 0x19a6 <_ZNK6String8getBytesEPhjj+0x54>
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    197c:	e2 1b       	sub	r30, r18
    197e:	f3 0b       	sbc	r31, r19
    1980:	ea 01       	movw	r28, r20
    1982:	21 97       	sbiw	r28, 0x01	; 1
    1984:	ec 17       	cp	r30, r28
    1986:	fd 07       	cpc	r31, r29
    1988:	08 f4       	brcc	.+2      	; 0x198c <_ZNK6String8getBytesEPhjj+0x3a>
    198a:	ef 01       	movw	r28, r30
    198c:	8b 01       	movw	r16, r22
    198e:	fc 01       	movw	r30, r24
	strncpy((char *)buf, buffer + index, n);
    1990:	60 81       	ld	r22, Z
    1992:	71 81       	ldd	r23, Z+1	; 0x01
    1994:	62 0f       	add	r22, r18
    1996:	73 1f       	adc	r23, r19
    1998:	ae 01       	movw	r20, r28
    199a:	c8 01       	movw	r24, r16
    199c:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <strncpy>
	buf[n] = 0;
    19a0:	c0 0f       	add	r28, r16
    19a2:	d1 1f       	adc	r29, r17
    19a4:	18 82       	st	Y, r1
}
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	1f 91       	pop	r17
    19ac:	0f 91       	pop	r16
    19ae:	08 95       	ret

000019b0 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	08 95       	ret

000019b4 <_ZN15RHGenericDriver14setPromiscuousEb>:
    return false;
}

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
    19b4:	fc 01       	movw	r30, r24
    19b6:	64 83       	std	Z+4, r22	; 0x04
    19b8:	08 95       	ret

000019ba <_ZN15RHGenericDriver14setThisAddressEh>:
}

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
    19ba:	fc 01       	movw	r30, r24
    19bc:	63 83       	std	Z+3, r22	; 0x03
    19be:	08 95       	ret

000019c0 <_ZN15RHGenericDriver11setHeaderToEh>:
}

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
    19c0:	fc 01       	movw	r30, r24
    19c2:	61 87       	std	Z+9, r22	; 0x09
    19c4:	08 95       	ret

000019c6 <_ZN15RHGenericDriver13setHeaderFromEh>:
}

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
    19c6:	fc 01       	movw	r30, r24
    19c8:	62 87       	std	Z+10, r22	; 0x0a
    19ca:	08 95       	ret

000019cc <_ZN15RHGenericDriver11setHeaderIdEh>:
}

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
    19cc:	fc 01       	movw	r30, r24
    19ce:	63 87       	std	Z+11, r22	; 0x0b
    19d0:	08 95       	ret

000019d2 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:
}

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    19d2:	fc 01       	movw	r30, r24
    _txHeaderFlags &= ~clear;
    _txHeaderFlags |= set;
    19d4:	40 95       	com	r20
    19d6:	94 85       	ldd	r25, Z+12	; 0x0c
    19d8:	49 23       	and	r20, r25
    19da:	64 2b       	or	r22, r20
    19dc:	64 87       	std	Z+12, r22	; 0x0c
    19de:	08 95       	ret

000019e0 <_ZN15RHGenericDriver8headerToEv>:
}

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
    19e0:	fc 01       	movw	r30, r24
    19e2:	85 81       	ldd	r24, Z+5	; 0x05
}
    19e4:	08 95       	ret

000019e6 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
    19e6:	fc 01       	movw	r30, r24
    19e8:	86 81       	ldd	r24, Z+6	; 0x06
}
    19ea:	08 95       	ret

000019ec <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
    19ec:	fc 01       	movw	r30, r24
    19ee:	87 81       	ldd	r24, Z+7	; 0x07
}
    19f0:	08 95       	ret

000019f2 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
    19f2:	fc 01       	movw	r30, r24
    19f4:	80 85       	ldd	r24, Z+8	; 0x08
}
    19f6:	08 95       	ret

000019f8 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
    19f8:	fc 01       	movw	r30, r24
    19fa:	85 85       	ldd	r24, Z+13	; 0x0d
    19fc:	96 85       	ldd	r25, Z+14	; 0x0e
}
    19fe:	08 95       	ret

00001a00 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
    1a00:	fc 01       	movw	r30, r24
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
}
    1a04:	08 95       	ret

00001a06 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
    1a06:	fc 01       	movw	r30, r24
    1a08:	62 83       	std	Z+2, r22	; 0x02
    1a0a:	08 95       	ret

00001a0c <_ZN15RHGenericDriver15isChannelActiveEv>:
}

bool  RHGenericDriver::sleep()
{
    return false;
}
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	08 95       	ret

00001a10 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
    1a10:	fc 01       	movw	r30, r24
    1a12:	87 85       	ldd	r24, Z+15	; 0x0f
    1a14:	90 89       	ldd	r25, Z+16	; 0x10
}
    1a16:	08 95       	ret

00001a18 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
    1a18:	fc 01       	movw	r30, r24
    1a1a:	81 89       	ldd	r24, Z+17	; 0x11
    1a1c:	92 89       	ldd	r25, Z+18	; 0x12
}
    1a1e:	08 95       	ret

00001a20 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
    1a20:	fc 01       	movw	r30, r24
    1a22:	83 89       	ldd	r24, Z+19	; 0x13
    1a24:	94 89       	ldd	r25, Z+20	; 0x14
}
    1a26:	08 95       	ret

00001a28 <_ZN15RHGenericDriver13waitAvailableEv>:
    return true;
}

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	ec 01       	movw	r28, r24
    while (!available())
    1a2e:	e8 81       	ld	r30, Y
    1a30:	f9 81       	ldd	r31, Y+1	; 0x01
    1a32:	02 80       	ldd	r0, Z+2	; 0x02
    1a34:	f3 81       	ldd	r31, Z+3	; 0x03
    1a36:	e0 2d       	mov	r30, r0
    1a38:	ce 01       	movw	r24, r28
    1a3a:	09 95       	icall
    1a3c:	81 11       	cpse	r24, r1
    1a3e:	03 c0       	rjmp	.+6      	; 0x1a46 <_ZN15RHGenericDriver13waitAvailableEv+0x1e>
	YIELD;
    1a40:	0e 94 4b 14 	call	0x2896	; 0x2896 <yield>
}

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
    while (!available())
    1a44:	f4 cf       	rjmp	.-24     	; 0x1a2e <_ZN15RHGenericDriver13waitAvailableEv+0x6>
	YIELD;
}
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	08 95       	ret

00001a4c <_ZN15RHGenericDriver14waitPacketSentEv>:
    }
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	ec 01       	movw	r28, r24
    while (_mode == RHModeTx)
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	83 30       	cpi	r24, 0x03	; 3
    1a56:	19 f4       	brne	.+6      	; 0x1a5e <_ZN15RHGenericDriver14waitPacketSentEv+0x12>
	YIELD; // Wait for any previous transmit to finish
    1a58:	0e 94 4b 14 	call	0x2896	; 0x2896 <yield>
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
    1a5c:	fa cf       	rjmp	.-12     	; 0x1a52 <_ZN15RHGenericDriver14waitPacketSentEv+0x6>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	08 95       	ret

00001a66 <_ZN15RHGenericDriver20waitAvailableTimeoutEj>:

// Blocks until a valid message is received or timeout expires
// Return true if there is a message available
// Works correctly even on millis() rollover
bool RHGenericDriver::waitAvailableTimeout(uint16_t timeout)
{
    1a66:	8f 92       	push	r8
    1a68:	9f 92       	push	r9
    1a6a:	af 92       	push	r10
    1a6c:	bf 92       	push	r11
    1a6e:	cf 92       	push	r12
    1a70:	df 92       	push	r13
    1a72:	ef 92       	push	r14
    1a74:	ff 92       	push	r15
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	ec 01       	movw	r28, r24
    1a7c:	6b 01       	movw	r12, r22
    unsigned long starttime = millis();
    1a7e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <millis>
    1a82:	4b 01       	movw	r8, r22
    1a84:	5c 01       	movw	r10, r24
    while ((millis() - starttime) < timeout)
    1a86:	e1 2c       	mov	r14, r1
    1a88:	f1 2c       	mov	r15, r1
    1a8a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <millis>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	88 19       	sub	r24, r8
    1a94:	99 09       	sbc	r25, r9
    1a96:	aa 09       	sbc	r26, r10
    1a98:	bb 09       	sbc	r27, r11
    1a9a:	8c 15       	cp	r24, r12
    1a9c:	9d 05       	cpc	r25, r13
    1a9e:	ae 05       	cpc	r26, r14
    1aa0:	bf 05       	cpc	r27, r15
    1aa2:	60 f4       	brcc	.+24     	; 0x1abc <_ZN15RHGenericDriver20waitAvailableTimeoutEj+0x56>
    {
        if (available())
    1aa4:	e8 81       	ld	r30, Y
    1aa6:	f9 81       	ldd	r31, Y+1	; 0x01
    1aa8:	02 80       	ldd	r0, Z+2	; 0x02
    1aaa:	f3 81       	ldd	r31, Z+3	; 0x03
    1aac:	e0 2d       	mov	r30, r0
    1aae:	ce 01       	movw	r24, r28
    1ab0:	09 95       	icall
    1ab2:	81 11       	cpse	r24, r1
    1ab4:	04 c0       	rjmp	.+8      	; 0x1abe <_ZN15RHGenericDriver20waitAvailableTimeoutEj+0x58>
	{
           return true;
	}
	YIELD;
    1ab6:	0e 94 4b 14 	call	0x2896	; 0x2896 <yield>
// Return true if there is a message available
// Works correctly even on millis() rollover
bool RHGenericDriver::waitAvailableTimeout(uint16_t timeout)
{
    unsigned long starttime = millis();
    while ((millis() - starttime) < timeout)
    1aba:	e7 cf       	rjmp	.-50     	; 0x1a8a <_ZN15RHGenericDriver20waitAvailableTimeoutEj+0x24>
	{
           return true;
	}
	YIELD;
    }
    return false;
    1abc:	80 e0       	ldi	r24, 0x00	; 0
}
    1abe:	df 91       	pop	r29
    1ac0:	cf 91       	pop	r28
    1ac2:	ff 90       	pop	r15
    1ac4:	ef 90       	pop	r14
    1ac6:	df 90       	pop	r13
    1ac8:	cf 90       	pop	r12
    1aca:	bf 90       	pop	r11
    1acc:	af 90       	pop	r10
    1ace:	9f 90       	pop	r9
    1ad0:	8f 90       	pop	r8
    1ad2:	08 95       	ret

00001ad4 <_ZN15RHGenericDriver14waitPacketSentEj>:
	YIELD; // Wait for any previous transmit to finish
    return true;
}

bool RHGenericDriver::waitPacketSent(uint16_t timeout)
{
    1ad4:	8f 92       	push	r8
    1ad6:	9f 92       	push	r9
    1ad8:	af 92       	push	r10
    1ada:	bf 92       	push	r11
    1adc:	cf 92       	push	r12
    1ade:	df 92       	push	r13
    1ae0:	ef 92       	push	r14
    1ae2:	ff 92       	push	r15
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	ec 01       	movw	r28, r24
    1aea:	6b 01       	movw	r12, r22
    unsigned long starttime = millis();
    1aec:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <millis>
    1af0:	4b 01       	movw	r8, r22
    1af2:	5c 01       	movw	r10, r24
    while ((millis() - starttime) < timeout)
    1af4:	e1 2c       	mov	r14, r1
    1af6:	f1 2c       	mov	r15, r1
    1af8:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <millis>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	88 19       	sub	r24, r8
    1b02:	99 09       	sbc	r25, r9
    1b04:	aa 09       	sbc	r26, r10
    1b06:	bb 09       	sbc	r27, r11
    1b08:	8c 15       	cp	r24, r12
    1b0a:	9d 05       	cpc	r25, r13
    1b0c:	ae 05       	cpc	r26, r14
    1b0e:	bf 05       	cpc	r27, r15
    1b10:	30 f4       	brcc	.+12     	; 0x1b1e <_ZN15RHGenericDriver14waitPacketSentEj+0x4a>
    {
        if (_mode != RHModeTx) // Any previous transmit finished?
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	83 30       	cpi	r24, 0x03	; 3
    1b16:	29 f4       	brne	.+10     	; 0x1b22 <_ZN15RHGenericDriver14waitPacketSentEj+0x4e>
           return true;
	YIELD;
    1b18:	0e 94 4b 14 	call	0x2896	; 0x2896 <yield>
}

bool RHGenericDriver::waitPacketSent(uint16_t timeout)
{
    unsigned long starttime = millis();
    while ((millis() - starttime) < timeout)
    1b1c:	ed cf       	rjmp	.-38     	; 0x1af8 <_ZN15RHGenericDriver14waitPacketSentEj+0x24>
    {
        if (_mode != RHModeTx) // Any previous transmit finished?
           return true;
	YIELD;
    }
    return false;
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <_ZN15RHGenericDriver14waitPacketSentEj+0x50>
{
    unsigned long starttime = millis();
    while ((millis() - starttime) < timeout)
    {
        if (_mode != RHModeTx) // Any previous transmit finished?
           return true;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
	YIELD;
    }
    return false;
}
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	ff 90       	pop	r15
    1b2a:	ef 90       	pop	r14
    1b2c:	df 90       	pop	r13
    1b2e:	cf 90       	pop	r12
    1b30:	bf 90       	pop	r11
    1b32:	af 90       	pop	r10
    1b34:	9f 90       	pop	r9
    1b36:	8f 90       	pop	r8
    1b38:	08 95       	ret

00001b3a <_ZN15RHGenericDriver7waitCADEv>:

// Wait until no channel activity detected or timeout
bool RHGenericDriver::waitCAD()
{
    1b3a:	cf 92       	push	r12
    1b3c:	df 92       	push	r13
    1b3e:	ef 92       	push	r14
    1b40:	ff 92       	push	r15
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    if (!_cad_timeout)
    1b46:	fc 01       	movw	r30, r24
    1b48:	26 89       	ldd	r18, Z+22	; 0x16
    1b4a:	37 89       	ldd	r19, Z+23	; 0x17
    1b4c:	23 2b       	or	r18, r19
    1b4e:	91 f1       	breq	.+100    	; 0x1bb4 <_ZN15RHGenericDriver7waitCADEv+0x7a>
    1b50:	ec 01       	movw	r28, r24
    // Wait for any channel activity to finish or timeout
    // Sophisticated DCF function...
    // DCF : BackoffTime = random() x aSlotTime
    // 100 - 1000 ms
    // 10 sec timeout
    unsigned long t = millis();
    1b52:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <millis>
    1b56:	6b 01       	movw	r12, r22
    1b58:	7c 01       	movw	r14, r24
    while (isChannelActive())
    1b5a:	e8 81       	ld	r30, Y
    1b5c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b5e:	04 88       	ldd	r0, Z+20	; 0x14
    1b60:	f5 89       	ldd	r31, Z+21	; 0x15
    1b62:	e0 2d       	mov	r30, r0
    1b64:	ce 01       	movw	r24, r28
    1b66:	09 95       	icall
    1b68:	88 23       	and	r24, r24
    1b6a:	21 f1       	breq	.+72     	; 0x1bb4 <_ZN15RHGenericDriver7waitCADEv+0x7a>
    {
         if (millis() - t > _cad_timeout) 
    1b6c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <millis>
    1b70:	ab 01       	movw	r20, r22
    1b72:	bc 01       	movw	r22, r24
    1b74:	4c 19       	sub	r20, r12
    1b76:	5d 09       	sbc	r21, r13
    1b78:	6e 09       	sbc	r22, r14
    1b7a:	7f 09       	sbc	r23, r15
    1b7c:	8e 89       	ldd	r24, Y+22	; 0x16
    1b7e:	9f 89       	ldd	r25, Y+23	; 0x17
    1b80:	a0 e0       	ldi	r26, 0x00	; 0
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	84 17       	cp	r24, r20
    1b86:	95 07       	cpc	r25, r21
    1b88:	a6 07       	cpc	r26, r22
    1b8a:	b7 07       	cpc	r27, r23
    1b8c:	a8 f0       	brcs	.+42     	; 0x1bb8 <_ZN15RHGenericDriver7waitCADEv+0x7e>
	     return false;
#if (RH_PLATFORM == RH_PLATFORM_STM32) // stdlib on STMF103 gets confused if random is redefined
	 delay(_random(1, 10) * 100);
#else
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
    1b8e:	2a e0       	ldi	r18, 0x0A	; 10
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	50 e0       	ldi	r21, 0x00	; 0
    1b96:	61 e0       	ldi	r22, 0x01	; 1
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <_Z6randomll>
    1ba2:	9b 01       	movw	r18, r22
    1ba4:	ac 01       	movw	r20, r24
    1ba6:	a4 e6       	ldi	r26, 0x64	; 100
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	0e 94 08 19 	call	0x3210	; 0x3210 <__muluhisi3>
    1bae:	0e 94 91 0a 	call	0x1522	; 0x1522 <delay>
    1bb2:	d3 cf       	rjmp	.-90     	; 0x1b5a <_ZN15RHGenericDriver7waitCADEv+0x20>

// Wait until no channel activity detected or timeout
bool RHGenericDriver::waitCAD()
{
    if (!_cad_timeout)
	return true;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	01 c0       	rjmp	.+2      	; 0x1bba <_ZN15RHGenericDriver7waitCADEv+0x80>
    // 10 sec timeout
    unsigned long t = millis();
    while (isChannelActive())
    {
         if (millis() - t > _cad_timeout) 
	     return false;
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
#endif
    }

    return true;
}
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	ff 90       	pop	r15
    1bc0:	ef 90       	pop	r14
    1bc2:	df 90       	pop	r13
    1bc4:	cf 90       	pop	r12
    1bc6:	08 95       	ret

00001bc8 <_ZN15RHGenericDriverC1Ev>:
// Copyright (C) 2014 Mike McCauley
// $Id: RHGenericDriver.cpp,v 1.23 2018/02/11 23:57:18 mikem Exp $

#include <RHGenericDriver.h>

RHGenericDriver::RHGenericDriver()
    1bc8:	fc 01       	movw	r30, r24
    _txHeaderId(0),
    _txHeaderFlags(0),
    _rxBad(0),
    _rxGood(0),
    _txGood(0),
    _cad_timeout(0)
    1bca:	85 ee       	ldi	r24, 0xE5	; 229
    1bcc:	91 e0       	ldi	r25, 0x01	; 1
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
    1bd2:	12 82       	std	Z+2, r1	; 0x02
    1bd4:	8f ef       	ldi	r24, 0xFF	; 255
    1bd6:	83 83       	std	Z+3, r24	; 0x03
    1bd8:	81 87       	std	Z+9, r24	; 0x09
    1bda:	82 87       	std	Z+10, r24	; 0x0a
    1bdc:	13 86       	std	Z+11, r1	; 0x0b
    1bde:	14 86       	std	Z+12, r1	; 0x0c
    1be0:	10 8a       	std	Z+16, r1	; 0x10
    1be2:	17 86       	std	Z+15, r1	; 0x0f
    1be4:	12 8a       	std	Z+18, r1	; 0x12
    1be6:	11 8a       	std	Z+17, r1	; 0x11
    1be8:	14 8a       	std	Z+20, r1	; 0x14
    1bea:	13 8a       	std	Z+19, r1	; 0x13
    1bec:	17 8a       	std	Z+23, r1	; 0x17
    1bee:	16 8a       	std	Z+22, r1	; 0x16
    1bf0:	08 95       	ret

00001bf2 <_ZN13RHHardwareSPI8transferEh>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    1bf2:	6e bd       	out	0x2e, r22	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    1bf4:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    1bf6:	0d b4       	in	r0, 0x2d	; 45
    1bf8:	07 fe       	sbrs	r0, 7
    1bfa:	fd cf       	rjmp	.-6      	; 0x1bf6 <_ZN13RHHardwareSPI8transferEh+0x4>
    return SPDR;
    1bfc:	8e b5       	in	r24, 0x2e	; 46
}

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
    return SPI.transfer(data);
}
    1bfe:	08 95       	ret

00001c00 <_ZN13RHHardwareSPI15attachInterruptEv>:
    SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((clockDiv >> 2) & SPI_2XCLOCK_MASK);
  }
  // These undocumented functions should not be used.  SPI.transfer()
  // polls the hardware flag which is automatically cleared as the
  // AVR responds to SPI's interrupt
  inline static void attachInterrupt() { SPCR |= _BV(SPIE); }
    1c00:	8c b5       	in	r24, 0x2c	; 44
    1c02:	80 68       	ori	r24, 0x80	; 128
    1c04:	8c bd       	out	0x2c, r24	; 44
    1c06:	08 95       	ret

00001c08 <_ZN13RHHardwareSPI15detachInterruptEv>:
  inline static void detachInterrupt() { SPCR &= ~_BV(SPIE); }
    1c08:	8c b5       	in	r24, 0x2c	; 44
    1c0a:	8f 77       	andi	r24, 0x7F	; 127
    1c0c:	8c bd       	out	0x2c, r24	; 44
    1c0e:	08 95       	ret

00001c10 <_ZN13RHHardwareSPI16beginTransactionEv>:
{
    return SPI.end();
}

void RHHardwareSPI::beginTransaction()
{
    1c10:	fc 01       	movw	r30, r24
    1c12:	45 81       	ldd	r20, Z+5	; 0x05
    1c14:	36 81       	ldd	r19, Z+6	; 0x06

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    1c16:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <_ZN8SPIClass13interruptModeE>
    1c1a:	88 23       	and	r24, r24
    1c1c:	99 f0       	breq	.+38     	; 0x1c44 <_ZN13RHHardwareSPI16beginTransactionEv+0x34>
      uint8_t sreg = SREG;
    1c1e:	2f b7       	in	r18, 0x3f	; 63
      noInterrupts();
    1c20:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1c22:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <_ZN8SPIClass13interruptModeE>
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	59 f4       	brne	.+22     	; 0x1c40 <_ZN13RHHardwareSPI16beginTransactionEv+0x30>
        interruptSave = SPI_AVR_EIMSK;
    1c2a:	8d b3       	in	r24, 0x1d	; 29
    1c2c:	80 93 7d 04 	sts	0x047D, r24	; 0x80047d <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    1c30:	9d b3       	in	r25, 0x1d	; 29
    1c32:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <_ZN8SPIClass13interruptMaskE>
    1c36:	80 95       	com	r24
    1c38:	89 23       	and	r24, r25
    1c3a:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    1c3c:	2f bf       	out	0x3f, r18	; 63
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <_ZN13RHHardwareSPI16beginTransactionEv+0x34>
      } else
      #endif
      {
        interruptSave = sreg;
    1c40:	20 93 7d 04 	sts	0x047D, r18	; 0x80047d <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    1c44:	4c bd       	out	0x2c, r20	; 44
    SPSR = settings.spsr;
    1c46:	3d bd       	out	0x2d, r19	; 45
    1c48:	08 95       	ret

00001c4a <_ZN13RHHardwareSPI14usingInterruptEh>:
    SPI.endTransaction();
#endif
}

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
    1c4a:	08 95       	ret

00001c4c <_ZN13RHHardwareSPI5beginEv>:
    SPI.detachInterrupt();
#endif
}
    
void RHHardwareSPI::begin() 
{
    1c4c:	0f 93       	push	r16
    1c4e:	1f 93       	push	r17
    1c50:	fc 01       	movw	r30, r24
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	84 30       	cpi	r24, 0x04	; 4
    1c56:	59 f0       	breq	.+22     	; 0x1c6e <_ZN13RHHardwareSPI5beginEv+0x22>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
    1c58:	83 30       	cpi	r24, 0x03	; 3
    1c5a:	71 f0       	breq	.+28     	; 0x1c78 <_ZN13RHHardwareSPI5beginEv+0x2c>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
    1c5c:	82 30       	cpi	r24, 0x02	; 2
    1c5e:	89 f0       	breq	.+34     	; 0x1c82 <_ZN13RHHardwareSPI5beginEv+0x36>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	a1 f0       	breq	.+40     	; 0x1c8c <_ZN13RHHardwareSPI5beginEv+0x40>
       frequency = 2000000;
   else
       frequency = 1000000;
    1c64:	40 e4       	ldi	r20, 0x40	; 64
    1c66:	52 e4       	ldi	r21, 0x42	; 66
    1c68:	6f e0       	ldi	r22, 0x0F	; 15
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	13 c0       	rjmp	.+38     	; 0x1c94 <_ZN13RHHardwareSPI5beginEv+0x48>
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
       frequency = 16000000;
    1c6e:	40 e0       	ldi	r20, 0x00	; 0
    1c70:	54 e2       	ldi	r21, 0x24	; 36
    1c72:	64 ef       	ldi	r22, 0xF4	; 244
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	0e c0       	rjmp	.+28     	; 0x1c94 <_ZN13RHHardwareSPI5beginEv+0x48>
   else if (_frequency == Frequency8MHz)
       frequency = 8000000;
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	52 e1       	ldi	r21, 0x12	; 18
    1c7c:	6a e7       	ldi	r22, 0x7A	; 122
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	09 c0       	rjmp	.+18     	; 0x1c94 <_ZN13RHHardwareSPI5beginEv+0x48>
   else if (_frequency == Frequency4MHz)
       frequency = 4000000;
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	59 e0       	ldi	r21, 0x09	; 9
    1c86:	6d e3       	ldi	r22, 0x3D	; 61
    1c88:	70 e0       	ldi	r23, 0x00	; 0
    1c8a:	04 c0       	rjmp	.+8      	; 0x1c94 <_ZN13RHHardwareSPI5beginEv+0x48>
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
    1c8c:	40 e8       	ldi	r20, 0x80	; 128
    1c8e:	54 e8       	ldi	r21, 0x84	; 132
    1c90:	6e e1       	ldi	r22, 0x1E	; 30
    1c92:	70 e0       	ldi	r23, 0x00	; 0
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;

    uint8_t dataMode;
    if (_dataMode == DataMode0)
    1c94:	84 81       	ldd	r24, Z+4	; 0x04
    1c96:	88 23       	and	r24, r24
    1c98:	61 f0       	breq	.+24     	; 0x1cb2 <_ZN13RHHardwareSPI5beginEv+0x66>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
    1c9a:	81 30       	cpi	r24, 0x01	; 1
    1c9c:	31 f0       	breq	.+12     	; 0x1caa <_ZN13RHHardwareSPI5beginEv+0x5e>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
    1c9e:	82 30       	cpi	r24, 0x02	; 2
    1ca0:	31 f0       	breq	.+12     	; 0x1cae <_ZN13RHHardwareSPI5beginEv+0x62>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
    1ca2:	83 30       	cpi	r24, 0x03	; 3
    1ca4:	31 f4       	brne	.+12     	; 0x1cb2 <_ZN13RHHardwareSPI5beginEv+0x66>
	dataMode = SPI_MODE3;
    1ca6:	9c e0       	ldi	r25, 0x0C	; 12
    1ca8:	05 c0       	rjmp	.+10     	; 0x1cb4 <_ZN13RHHardwareSPI5beginEv+0x68>

    uint8_t dataMode;
    if (_dataMode == DataMode0)
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
	dataMode = SPI_MODE1;
    1caa:	94 e0       	ldi	r25, 0x04	; 4
    1cac:	03 c0       	rjmp	.+6      	; 0x1cb4 <_ZN13RHHardwareSPI5beginEv+0x68>
    else if (_dataMode == DataMode2)
	dataMode = SPI_MODE2;
    1cae:	98 e0       	ldi	r25, 0x08	; 8
    1cb0:	01 c0       	rjmp	.+2      	; 0x1cb4 <_ZN13RHHardwareSPI5beginEv+0x68>
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	00 e0       	ldi	r16, 0x00	; 0
    1cb6:	12 e1       	ldi	r17, 0x12	; 18
    1cb8:	2a e7       	ldi	r18, 0x7A	; 122
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    1cbe:	40 17       	cp	r20, r16
    1cc0:	51 07       	cpc	r21, r17
    1cc2:	62 07       	cpc	r22, r18
    1cc4:	73 07       	cpc	r23, r19
    1cc6:	40 f4       	brcc	.+16     	; 0x1cd8 <_ZN13RHHardwareSPI5beginEv+0x8c>
        clockSetting /= 2;
    1cc8:	36 95       	lsr	r19
    1cca:	27 95       	ror	r18
    1ccc:	17 95       	ror	r17
    1cce:	07 95       	ror	r16
        clockDiv++;
    1cd0:	8f 5f       	subi	r24, 0xFF	; 255
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    1cd2:	86 30       	cpi	r24, 0x06	; 6
    1cd4:	a1 f7       	brne	.-24     	; 0x1cbe <_ZN13RHHardwareSPI5beginEv+0x72>
      }
    }

    // Compensate for the duplicate fosc/64
    if (clockDiv == 6)
    clockDiv = 7;
    1cd6:	87 e0       	ldi	r24, 0x07	; 7

    // Invert the SPI2X bit
    clockDiv ^= 0x1;
    1cd8:	21 e0       	ldi	r18, 0x01	; 1
    1cda:	28 27       	eor	r18, r24

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    1cdc:	83 81       	ldd	r24, Z+3	; 0x03
    1cde:	81 30       	cpi	r24, 0x01	; 1
    1ce0:	11 f0       	breq	.+4      	; 0x1ce6 <_ZN13RHHardwareSPI5beginEv+0x9a>
    1ce2:	80 e5       	ldi	r24, 0x50	; 80
    1ce4:	01 c0       	rjmp	.+2      	; 0x1ce8 <_ZN13RHHardwareSPI5beginEv+0x9c>
    1ce6:	80 e7       	ldi	r24, 0x70	; 112

    // Save the settings for use in transactions
   _settings = SPISettings(frequency, bitOrder, dataMode);
    1ce8:	32 2f       	mov	r19, r18
    1cea:	36 95       	lsr	r19
    1cec:	93 2b       	or	r25, r19
    1cee:	98 2b       	or	r25, r24
    1cf0:	95 83       	std	Z+5, r25	; 0x05
    1cf2:	21 70       	andi	r18, 0x01	; 1
    1cf4:	26 83       	std	Z+6, r18	; 0x06
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
    1cf6:	1f 91       	pop	r17
    1cf8:	0f 91       	pop	r16
    else
	dataMode = SPI_MODE0;

    // Save the settings for use in transactions
   _settings = SPISettings(frequency, bitOrder, dataMode);
   SPI.begin();
    1cfa:	0c 94 e5 12 	jmp	0x25ca	; 0x25ca <_ZN8SPIClass5beginEv>

00001cfe <_ZN13RHHardwareSPI3endEv>:
#endif // SPI_HAS_TRANSACTION
}

void RHHardwareSPI::end() 
{
    return SPI.end();
    1cfe:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <_ZN8SPIClass3endEv>

00001d02 <_ZN13RHHardwareSPI14endTransactionEv>:
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    1d02:	80 91 7f 04 	lds	r24, 0x047F	; 0x80047f <_ZN8SPIClass13interruptModeE>
    1d06:	88 23       	and	r24, r24
    1d08:	61 f0       	breq	.+24     	; 0x1d22 <_ZN13RHHardwareSPI14endTransactionEv+0x20>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    1d0a:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    1d0c:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1d0e:	20 91 7f 04 	lds	r18, 0x047F	; 0x80047f <_ZN8SPIClass13interruptModeE>
    1d12:	80 91 7d 04 	lds	r24, 0x047D	; 0x80047d <_ZN8SPIClass13interruptSaveE>
    1d16:	21 30       	cpi	r18, 0x01	; 1
    1d18:	19 f4       	brne	.+6      	; 0x1d20 <_ZN13RHHardwareSPI14endTransactionEv+0x1e>
        SPI_AVR_EIMSK = interruptSave;
    1d1a:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    1d1c:	9f bf       	out	0x3f, r25	; 63
    1d1e:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
    1d20:	8f bf       	out	0x3f, r24	; 63
    1d22:	08 95       	ret

00001d24 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	ec 01       	movw	r28, r24
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
    1d2a:	0e 94 43 16 	call	0x2c86	; 0x2c86 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
    1d2e:	81 e2       	ldi	r24, 0x21	; 33
    1d30:	92 e0       	ldi	r25, 0x02	; 2
    1d32:	99 83       	std	Y+1, r25	; 0x01
    1d34:	88 83       	st	Y, r24
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    1d36:	80 e5       	ldi	r24, 0x50	; 80
    1d38:	8d 83       	std	Y+5, r24	; 0x05
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    1d3a:	1e 82       	std	Y+6, r1	; 0x06
{
}
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	08 95       	ret

00001d42 <_GLOBAL__sub_I_hardware_spi>:
// $Id: RHHardwareSPI.cpp,v 1.20 2018/02/11 23:57:18 mikem Exp $

#include <RHHardwareSPI.h>

// Declare a single default instance of the hardware SPI interface class
RHHardwareSPI hardware_spi;
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	8f e6       	ldi	r24, 0x6F	; 111
    1d4a:	94 e0       	ldi	r25, 0x04	; 4
    1d4c:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>

00001d50 <_ZN7RH_RF6916maxMessageLengthEv>:
    printRegister(RH_RF69_REG_58_TESTLNA);
    printRegister(RH_RF69_REG_6F_TESTDAGC);
    printRegister(RH_RF69_REG_71_TESTAFC);

    return true;
}
    1d50:	8c e3       	ldi	r24, 0x3C	; 60
    1d52:	08 95       	ret

00001d54 <_ZN7RH_RF6916setEncryptionKeyEPh.part.4.constprop.5>:
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	ec 01       	movw	r28, r24
    1d5a:	6d e3       	ldi	r22, 0x3D	; 61
    1d5c:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN11RHSPIDriver7spiReadEh>
    1d60:	48 2f       	mov	r20, r24
    1d62:	4e 7f       	andi	r20, 0xFE	; 254
    1d64:	6d e3       	ldi	r22, 0x3D	; 61
    1d66:	ce 01       	movw	r24, r28
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>

00001d70 <_ZN7RH_RF694recvEPhS0_>:
    1d70:	cf 92       	push	r12
    1d72:	df 92       	push	r13
    1d74:	ef 92       	push	r14
    1d76:	ff 92       	push	r15
    1d78:	0f 93       	push	r16
    1d7a:	1f 93       	push	r17
    1d7c:	cf 93       	push	r28
    1d7e:	df 93       	push	r29
    1d80:	ec 01       	movw	r28, r24
    1d82:	6b 01       	movw	r12, r22
    1d84:	8a 01       	movw	r16, r20
    1d86:	e8 81       	ld	r30, Y
    1d88:	f9 81       	ldd	r31, Y+1	; 0x01
    1d8a:	02 80       	ldd	r0, Z+2	; 0x02
    1d8c:	f3 81       	ldd	r31, Z+3	; 0x03
    1d8e:	e0 2d       	mov	r30, r0
    1d90:	09 95       	icall
    1d92:	f8 2e       	mov	r15, r24
    1d94:	88 23       	and	r24, r24
    1d96:	e1 f0       	breq	.+56     	; 0x1dd0 <_ZN7RH_RF694recvEPhS0_+0x60>
    1d98:	c1 14       	cp	r12, r1
    1d9a:	d1 04       	cpc	r13, r1
    1d9c:	b1 f0       	breq	.+44     	; 0x1dca <_ZN7RH_RF694recvEPhS0_+0x5a>
    1d9e:	01 15       	cp	r16, r1
    1da0:	11 05       	cpc	r17, r1
    1da2:	99 f0       	breq	.+38     	; 0x1dca <_ZN7RH_RF694recvEPhS0_+0x5a>
    1da4:	ef b6       	in	r14, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	89 a1       	ldd	r24, Y+33	; 0x21
    1daa:	f8 01       	movw	r30, r16
    1dac:	90 81       	ld	r25, Z
    1dae:	89 17       	cp	r24, r25
    1db0:	10 f4       	brcc	.+4      	; 0x1db6 <_ZN7RH_RF694recvEPhS0_+0x46>
    1db2:	89 a1       	ldd	r24, Y+33	; 0x21
    1db4:	80 83       	st	Z, r24
    1db6:	f8 01       	movw	r30, r16
    1db8:	40 81       	ld	r20, Z
    1dba:	50 e0       	ldi	r21, 0x00	; 0
    1dbc:	be 01       	movw	r22, r28
    1dbe:	6e 5d       	subi	r22, 0xDE	; 222
    1dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc2:	c6 01       	movw	r24, r12
    1dc4:	0e 94 b9 1b 	call	0x3772	; 0x3772 <memcpy>
    1dc8:	ef be       	out	0x3f, r14	; 63
    1dca:	c2 5a       	subi	r28, 0xA2	; 162
    1dcc:	df 4f       	sbci	r29, 0xFF	; 255
    1dce:	18 82       	st	Y, r1
    1dd0:	8f 2d       	mov	r24, r15
    1dd2:	df 91       	pop	r29
    1dd4:	cf 91       	pop	r28
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	ff 90       	pop	r15
    1ddc:	ef 90       	pop	r14
    1dde:	df 90       	pop	r13
    1de0:	cf 90       	pop	r12
    1de2:	08 95       	ret

00001de4 <_ZN7RH_RF695sleepEv>:
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	fc 01       	movw	r30, r24
    1dea:	22 81       	ldd	r18, Z+2	; 0x02
    1dec:	21 30       	cpi	r18, 0x01	; 1
    1dee:	39 f0       	breq	.+14     	; 0x1dfe <_ZN7RH_RF695sleepEv+0x1a>
    1df0:	ec 01       	movw	r28, r24
    1df2:	40 e0       	ldi	r20, 0x00	; 0
    1df4:	61 e0       	ldi	r22, 0x01	; 1
    1df6:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	8a 83       	std	Y+2, r24	; 0x02
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	08 95       	ret

00001e06 <_ZN7RH_RF69C1EhhR12RHGenericSPI>:
    1e06:	1f 93       	push	r17
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	ec 01       	movw	r28, r24
    1e0e:	14 2f       	mov	r17, r20
    1e10:	a9 01       	movw	r20, r18
    1e12:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
    1e16:	8b e3       	ldi	r24, 0x3B	; 59
    1e18:	92 e0       	ldi	r25, 0x02	; 2
    1e1a:	99 83       	std	Y+1, r25	; 0x01
    1e1c:	88 83       	st	Y, r24
    1e1e:	1c 8f       	std	Y+28, r17	; 0x1c
    1e20:	84 e0       	ldi	r24, 0x04	; 4
    1e22:	8e 8f       	std	Y+30, r24	; 0x1e
    1e24:	8f ef       	ldi	r24, 0xFF	; 255
    1e26:	8d 8f       	std	Y+29, r24	; 0x1d
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	1f 91       	pop	r17
    1e2e:	08 95       	ret

00001e30 <_ZN7RH_RF698readFifoEv>:
    1e30:	ef 92       	push	r14
    1e32:	ff 92       	push	r15
    1e34:	0f 93       	push	r16
    1e36:	1f 93       	push	r17
    1e38:	cf 93       	push	r28
    1e3a:	df 93       	push	r29
    1e3c:	ec 01       	movw	r28, r24
    1e3e:	ff b6       	in	r15, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	60 e0       	ldi	r22, 0x00	; 0
    1e44:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e46:	0e 94 9c 0b 	call	0x1738	; 0x1738 <digitalWrite>
    1e4a:	88 8d       	ldd	r24, Y+24	; 0x18
    1e4c:	99 8d       	ldd	r25, Y+25	; 0x19
    1e4e:	dc 01       	movw	r26, r24
    1e50:	ed 91       	ld	r30, X+
    1e52:	fc 91       	ld	r31, X
    1e54:	00 88       	ldd	r0, Z+16	; 0x10
    1e56:	f1 89       	ldd	r31, Z+17	; 0x11
    1e58:	e0 2d       	mov	r30, r0
    1e5a:	09 95       	icall
    1e5c:	88 8d       	ldd	r24, Y+24	; 0x18
    1e5e:	99 8d       	ldd	r25, Y+25	; 0x19
    1e60:	dc 01       	movw	r26, r24
    1e62:	ed 91       	ld	r30, X+
    1e64:	fc 91       	ld	r31, X
    1e66:	01 90       	ld	r0, Z+
    1e68:	f0 81       	ld	r31, Z
    1e6a:	e0 2d       	mov	r30, r0
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	09 95       	icall
    1e70:	88 8d       	ldd	r24, Y+24	; 0x18
    1e72:	99 8d       	ldd	r25, Y+25	; 0x19
    1e74:	dc 01       	movw	r26, r24
    1e76:	ed 91       	ld	r30, X+
    1e78:	fc 91       	ld	r31, X
    1e7a:	01 90       	ld	r0, Z+
    1e7c:	f0 81       	ld	r31, Z
    1e7e:	e0 2d       	mov	r30, r0
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	09 95       	icall
    1e84:	08 2f       	mov	r16, r24
    1e86:	8c ef       	ldi	r24, 0xFC	; 252
    1e88:	80 0f       	add	r24, r16
    1e8a:	8d 33       	cpi	r24, 0x3D	; 61
    1e8c:	00 f5       	brcc	.+64     	; 0x1ece <_ZN7RH_RF698readFifoEv+0x9e>
    1e8e:	88 8d       	ldd	r24, Y+24	; 0x18
    1e90:	99 8d       	ldd	r25, Y+25	; 0x19
    1e92:	dc 01       	movw	r26, r24
    1e94:	ed 91       	ld	r30, X+
    1e96:	fc 91       	ld	r31, X
    1e98:	01 90       	ld	r0, Z+
    1e9a:	f0 81       	ld	r31, Z
    1e9c:	e0 2d       	mov	r30, r0
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	09 95       	icall
    1ea2:	8d 83       	std	Y+5, r24	; 0x05
    1ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea6:	81 11       	cpse	r24, r1
    1ea8:	27 c0       	rjmp	.+78     	; 0x1ef8 <_ZN7RH_RF698readFifoEv+0xc8>
    1eaa:	9d 81       	ldd	r25, Y+5	; 0x05
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	98 17       	cp	r25, r24
    1eb0:	19 f1       	breq	.+70     	; 0x1ef8 <_ZN7RH_RF698readFifoEv+0xc8>
    1eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb4:	8f 3f       	cpi	r24, 0xFF	; 255
    1eb6:	59 f4       	brne	.+22     	; 0x1ece <_ZN7RH_RF698readFifoEv+0x9e>
    1eb8:	1f c0       	rjmp	.+62     	; 0x1ef8 <_ZN7RH_RF698readFifoEv+0xc8>
    1eba:	89 89       	ldd	r24, Y+17	; 0x11
    1ebc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	9a 8b       	std	Y+18, r25	; 0x12
    1ec2:	89 8b       	std	Y+17, r24	; 0x11
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	e2 5a       	subi	r30, 0xA2	; 162
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	80 83       	st	Z, r24
    1ece:	61 e0       	ldi	r22, 0x01	; 1
    1ed0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ed2:	0e 94 9c 0b 	call	0x1738	; 0x1738 <digitalWrite>
    1ed6:	88 8d       	ldd	r24, Y+24	; 0x18
    1ed8:	99 8d       	ldd	r25, Y+25	; 0x19
    1eda:	dc 01       	movw	r26, r24
    1edc:	ed 91       	ld	r30, X+
    1ede:	fc 91       	ld	r31, X
    1ee0:	02 88       	ldd	r0, Z+18	; 0x12
    1ee2:	f3 89       	ldd	r31, Z+19	; 0x13
    1ee4:	e0 2d       	mov	r30, r0
    1ee6:	09 95       	icall
    1ee8:	ff be       	out	0x3f, r15	; 63
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	1f 91       	pop	r17
    1ef0:	0f 91       	pop	r16
    1ef2:	ff 90       	pop	r15
    1ef4:	ef 90       	pop	r14
    1ef6:	08 95       	ret
    1ef8:	88 8d       	ldd	r24, Y+24	; 0x18
    1efa:	99 8d       	ldd	r25, Y+25	; 0x19
    1efc:	dc 01       	movw	r26, r24
    1efe:	ed 91       	ld	r30, X+
    1f00:	fc 91       	ld	r31, X
    1f02:	01 90       	ld	r0, Z+
    1f04:	f0 81       	ld	r31, Z
    1f06:	e0 2d       	mov	r30, r0
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	09 95       	icall
    1f0c:	8e 83       	std	Y+6, r24	; 0x06
    1f0e:	88 8d       	ldd	r24, Y+24	; 0x18
    1f10:	99 8d       	ldd	r25, Y+25	; 0x19
    1f12:	dc 01       	movw	r26, r24
    1f14:	ed 91       	ld	r30, X+
    1f16:	fc 91       	ld	r31, X
    1f18:	01 90       	ld	r0, Z+
    1f1a:	f0 81       	ld	r31, Z
    1f1c:	e0 2d       	mov	r30, r0
    1f1e:	60 e0       	ldi	r22, 0x00	; 0
    1f20:	09 95       	icall
    1f22:	8f 83       	std	Y+7, r24	; 0x07
    1f24:	88 8d       	ldd	r24, Y+24	; 0x18
    1f26:	99 8d       	ldd	r25, Y+25	; 0x19
    1f28:	dc 01       	movw	r26, r24
    1f2a:	ed 91       	ld	r30, X+
    1f2c:	fc 91       	ld	r31, X
    1f2e:	01 90       	ld	r0, Z+
    1f30:	f0 81       	ld	r31, Z
    1f32:	e0 2d       	mov	r30, r0
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	09 95       	icall
    1f38:	88 87       	std	Y+8, r24	; 0x08
    1f3a:	19 a2       	std	Y+33, r1	; 0x21
    1f3c:	10 e0       	ldi	r17, 0x00	; 0
    1f3e:	04 50       	subi	r16, 0x04	; 4
    1f40:	11 09       	sbc	r17, r1
    1f42:	89 a1       	ldd	r24, Y+33	; 0x21
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	80 17       	cp	r24, r16
    1f48:	91 07       	cpc	r25, r17
    1f4a:	0c f0       	brlt	.+2      	; 0x1f4e <_ZN7RH_RF698readFifoEv+0x11e>
    1f4c:	b6 cf       	rjmp	.-148    	; 0x1eba <_ZN7RH_RF698readFifoEv+0x8a>
    1f4e:	e9 a0       	ldd	r14, Y+33	; 0x21
    1f50:	88 8d       	ldd	r24, Y+24	; 0x18
    1f52:	99 8d       	ldd	r25, Y+25	; 0x19
    1f54:	dc 01       	movw	r26, r24
    1f56:	ed 91       	ld	r30, X+
    1f58:	fc 91       	ld	r31, X
    1f5a:	01 90       	ld	r0, Z+
    1f5c:	f0 81       	ld	r31, Z
    1f5e:	e0 2d       	mov	r30, r0
    1f60:	60 e0       	ldi	r22, 0x00	; 0
    1f62:	09 95       	icall
    1f64:	fe 01       	movw	r30, r28
    1f66:	ee 0d       	add	r30, r14
    1f68:	f1 1d       	adc	r31, r1
    1f6a:	82 a3       	std	Z+34, r24	; 0x22
    1f6c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6e:	8f 5f       	subi	r24, 0xFF	; 255
    1f70:	89 a3       	std	Y+33, r24	; 0x21
    1f72:	e7 cf       	rjmp	.-50     	; 0x1f42 <_ZN7RH_RF698readFifoEv+0x112>

00001f74 <_ZN7RH_RF6912setFrequencyEff>:
    1f74:	cf 92       	push	r12
    1f76:	df 92       	push	r13
    1f78:	ef 92       	push	r14
    1f7a:	ff 92       	push	r15
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	ec 01       	movw	r28, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	ba 01       	movw	r22, r20
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	34 e2       	ldi	r19, 0x24	; 36
    1f8a:	44 e7       	ldi	r20, 0x74	; 116
    1f8c:	59 e4       	ldi	r21, 0x49	; 73
    1f8e:	0e 94 54 18 	call	0x30a8	; 0x30a8 <__mulsf3>
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	34 e2       	ldi	r19, 0x24	; 36
    1f96:	44 e7       	ldi	r20, 0x74	; 116
    1f98:	52 e4       	ldi	r21, 0x42	; 66
    1f9a:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <__divsf3>
    1f9e:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__fixunssfsi>
    1fa2:	6b 01       	movw	r12, r22
    1fa4:	7c 01       	movw	r14, r24
    1fa6:	a7 01       	movw	r20, r14
    1fa8:	66 27       	eor	r22, r22
    1faa:	77 27       	eor	r23, r23
    1fac:	67 e0       	ldi	r22, 0x07	; 7
    1fae:	ce 01       	movw	r24, r28
    1fb0:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    1fb4:	77 27       	eor	r23, r23
    1fb6:	6f 2d       	mov	r22, r15
    1fb8:	5e 2d       	mov	r21, r14
    1fba:	4d 2d       	mov	r20, r13
    1fbc:	68 e0       	ldi	r22, 0x08	; 8
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    1fc4:	4c 2d       	mov	r20, r12
    1fc6:	69 e0       	ldi	r22, 0x09	; 9
    1fc8:	ce 01       	movw	r24, r28
    1fca:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	ff 90       	pop	r15
    1fd6:	ef 90       	pop	r14
    1fd8:	df 90       	pop	r13
    1fda:	cf 90       	pop	r12
    1fdc:	08 95       	ret

00001fde <_ZN7RH_RF699setOpModeEh>:
    1fde:	1f 93       	push	r17
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	ec 01       	movw	r28, r24
    1fe6:	16 2f       	mov	r17, r22
    1fe8:	61 e0       	ldi	r22, 0x01	; 1
    1fea:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN11RHSPIDriver7spiReadEh>
    1fee:	41 2f       	mov	r20, r17
    1ff0:	4c 71       	andi	r20, 0x1C	; 28
    1ff2:	83 7e       	andi	r24, 0xE3	; 227
    1ff4:	48 2b       	or	r20, r24
    1ff6:	61 e0       	ldi	r22, 0x01	; 1
    1ff8:	ce 01       	movw	r24, r28
    1ffa:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    1ffe:	67 e2       	ldi	r22, 0x27	; 39
    2000:	ce 01       	movw	r24, r28
    2002:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN11RHSPIDriver7spiReadEh>
    2006:	87 ff       	sbrs	r24, 7
    2008:	fa cf       	rjmp	.-12     	; 0x1ffe <_ZN7RH_RF699setOpModeEh+0x20>
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	1f 91       	pop	r17
    2010:	08 95       	ret

00002012 <_ZN7RH_RF6911setModeIdleEv>:
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	fc 01       	movw	r30, r24
    2018:	22 81       	ldd	r18, Z+2	; 0x02
    201a:	22 30       	cpi	r18, 0x02	; 2
    201c:	a1 f0       	breq	.+40     	; 0x2046 <_ZN7RH_RF6911setModeIdleEv+0x34>
    201e:	ec 01       	movw	r28, r24
    2020:	80 a1       	ldd	r24, Z+32	; 0x20
    2022:	82 31       	cpi	r24, 0x12	; 18
    2024:	54 f0       	brlt	.+20     	; 0x203a <_ZN7RH_RF6911setModeIdleEv+0x28>
    2026:	45 e5       	ldi	r20, 0x55	; 85
    2028:	6a e5       	ldi	r22, 0x5A	; 90
    202a:	cf 01       	movw	r24, r30
    202c:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    2030:	40 e7       	ldi	r20, 0x70	; 112
    2032:	6c e5       	ldi	r22, 0x5C	; 92
    2034:	ce 01       	movw	r24, r28
    2036:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    203a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    203c:	ce 01       	movw	r24, r28
    203e:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <_ZN7RH_RF699setOpModeEh>
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	8a 83       	std	Y+2, r24	; 0x02
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	08 95       	ret

0000204c <_ZN7RH_RF6915handleInterruptEv>:
    204c:	1f 93       	push	r17
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	ec 01       	movw	r28, r24
    2054:	68 e2       	ldi	r22, 0x28	; 40
    2056:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN11RHSPIDriver7spiReadEh>
    205a:	18 2f       	mov	r17, r24
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	83 30       	cpi	r24, 0x03	; 3
    2060:	11 f4       	brne	.+4      	; 0x2066 <_ZN7RH_RF6915handleInterruptEv+0x1a>
    2062:	13 fd       	sbrc	r17, 3
    2064:	23 c0       	rjmp	.+70     	; 0x20ac <_ZN7RH_RF6915handleInterruptEv+0x60>
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	84 30       	cpi	r24, 0x04	; 4
    206a:	49 f5       	brne	.+82     	; 0x20be <_ZN7RH_RF6915handleInterruptEv+0x72>
    206c:	12 ff       	sbrs	r17, 2
    206e:	27 c0       	rjmp	.+78     	; 0x20be <_ZN7RH_RF6915handleInterruptEv+0x72>
    2070:	64 e2       	ldi	r22, 0x24	; 36
    2072:	ce 01       	movw	r24, r28
    2074:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN11RHSPIDriver7spiReadEh>
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	95 95       	asr	r25
    207c:	87 95       	ror	r24
    207e:	91 95       	neg	r25
    2080:	81 95       	neg	r24
    2082:	91 09       	sbc	r25, r1
    2084:	9e 87       	std	Y+14, r25	; 0x0e
    2086:	8d 87       	std	Y+13, r24	; 0x0d
    2088:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <millis>
    208c:	fe 01       	movw	r30, r28
    208e:	e1 5a       	subi	r30, 0xA1	; 161
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	60 83       	st	Z, r22
    2094:	71 83       	std	Z+1, r23	; 0x01
    2096:	82 83       	std	Z+2, r24	; 0x02
    2098:	93 83       	std	Z+3, r25	; 0x03
    209a:	ce 01       	movw	r24, r28
    209c:	0e 94 09 10 	call	0x2012	; 0x2012 <_ZN7RH_RF6911setModeIdleEv>
    20a0:	ce 01       	movw	r24, r28
    20a2:	df 91       	pop	r29
    20a4:	cf 91       	pop	r28
    20a6:	1f 91       	pop	r17
    20a8:	0c 94 18 0f 	jmp	0x1e30	; 0x1e30 <_ZN7RH_RF698readFifoEv>
    20ac:	ce 01       	movw	r24, r28
    20ae:	0e 94 09 10 	call	0x2012	; 0x2012 <_ZN7RH_RF6911setModeIdleEv>
    20b2:	8b 89       	ldd	r24, Y+19	; 0x13
    20b4:	9c 89       	ldd	r25, Y+20	; 0x14
    20b6:	01 96       	adiw	r24, 0x01	; 1
    20b8:	9c 8b       	std	Y+20, r25	; 0x14
    20ba:	8b 8b       	std	Y+19, r24	; 0x13
    20bc:	d4 cf       	rjmp	.-88     	; 0x2066 <_ZN7RH_RF6915handleInterruptEv+0x1a>
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	1f 91       	pop	r17
    20c4:	08 95       	ret

000020c6 <_ZN7RH_RF694isr0Ev>:
    20c6:	80 91 77 04 	lds	r24, 0x0477	; 0x800477 <_ZN7RH_RF6919_deviceForInterruptE>
    20ca:	90 91 78 04 	lds	r25, 0x0478	; 0x800478 <_ZN7RH_RF6919_deviceForInterruptE+0x1>
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	11 f0       	breq	.+4      	; 0x20d6 <_ZN7RH_RF694isr0Ev+0x10>
    20d2:	0c 94 26 10 	jmp	0x204c	; 0x204c <_ZN7RH_RF6915handleInterruptEv>
    20d6:	08 95       	ret

000020d8 <_ZN7RH_RF694isr1Ev>:
    20d8:	80 91 79 04 	lds	r24, 0x0479	; 0x800479 <_ZN7RH_RF6919_deviceForInterruptE+0x2>
    20dc:	90 91 7a 04 	lds	r25, 0x047A	; 0x80047a <_ZN7RH_RF6919_deviceForInterruptE+0x3>
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	11 f0       	breq	.+4      	; 0x20e8 <_ZN7RH_RF694isr1Ev+0x10>
    20e4:	0c 94 26 10 	jmp	0x204c	; 0x204c <_ZN7RH_RF6915handleInterruptEv>
    20e8:	08 95       	ret

000020ea <_ZN7RH_RF694isr2Ev>:
    20ea:	80 91 7b 04 	lds	r24, 0x047B	; 0x80047b <_ZN7RH_RF6919_deviceForInterruptE+0x4>
    20ee:	90 91 7c 04 	lds	r25, 0x047C	; 0x80047c <_ZN7RH_RF6919_deviceForInterruptE+0x5>
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	11 f0       	breq	.+4      	; 0x20fa <_ZN7RH_RF694isr2Ev+0x10>
    20f6:	0c 94 26 10 	jmp	0x204c	; 0x204c <_ZN7RH_RF6915handleInterruptEv>
    20fa:	08 95       	ret

000020fc <_ZN7RH_RF699setModeRxEv>:
    20fc:	cf 93       	push	r28
    20fe:	df 93       	push	r29
    2100:	fc 01       	movw	r30, r24
    2102:	22 81       	ldd	r18, Z+2	; 0x02
    2104:	24 30       	cpi	r18, 0x04	; 4
    2106:	c9 f0       	breq	.+50     	; 0x213a <_ZN7RH_RF699setModeRxEv+0x3e>
    2108:	ec 01       	movw	r28, r24
    210a:	80 a1       	ldd	r24, Z+32	; 0x20
    210c:	82 31       	cpi	r24, 0x12	; 18
    210e:	54 f0       	brlt	.+20     	; 0x2124 <_ZN7RH_RF699setModeRxEv+0x28>
    2110:	45 e5       	ldi	r20, 0x55	; 85
    2112:	6a e5       	ldi	r22, 0x5A	; 90
    2114:	cf 01       	movw	r24, r30
    2116:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    211a:	40 e7       	ldi	r20, 0x70	; 112
    211c:	6c e5       	ldi	r22, 0x5C	; 92
    211e:	ce 01       	movw	r24, r28
    2120:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    2124:	40 e4       	ldi	r20, 0x40	; 64
    2126:	65 e2       	ldi	r22, 0x25	; 37
    2128:	ce 01       	movw	r24, r28
    212a:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    212e:	60 e1       	ldi	r22, 0x10	; 16
    2130:	ce 01       	movw	r24, r28
    2132:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <_ZN7RH_RF699setOpModeEh>
    2136:	84 e0       	ldi	r24, 0x04	; 4
    2138:	8a 83       	std	Y+2, r24	; 0x02
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	08 95       	ret

00002140 <_ZN7RH_RF699availableEv>:
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	fc 01       	movw	r30, r24
    2146:	22 81       	ldd	r18, Z+2	; 0x02
    2148:	23 30       	cpi	r18, 0x03	; 3
    214a:	39 f0       	breq	.+14     	; 0x215a <_ZN7RH_RF699availableEv+0x1a>
    214c:	ec 01       	movw	r28, r24
    214e:	0e 94 7e 10 	call	0x20fc	; 0x20fc <_ZN7RH_RF699setModeRxEv>
    2152:	c2 5a       	subi	r28, 0xA2	; 162
    2154:	df 4f       	sbci	r29, 0xFF	; 255
    2156:	88 81       	ld	r24, Y
    2158:	01 c0       	rjmp	.+2      	; 0x215c <_ZN7RH_RF699availableEv+0x1c>
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	08 95       	ret

00002162 <_ZN7RH_RF699setModeTxEv>:
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	fc 01       	movw	r30, r24
    2168:	22 81       	ldd	r18, Z+2	; 0x02
    216a:	23 30       	cpi	r18, 0x03	; 3
    216c:	c9 f0       	breq	.+50     	; 0x21a0 <_ZN7RH_RF699setModeTxEv+0x3e>
    216e:	ec 01       	movw	r28, r24
    2170:	80 a1       	ldd	r24, Z+32	; 0x20
    2172:	82 31       	cpi	r24, 0x12	; 18
    2174:	54 f0       	brlt	.+20     	; 0x218a <_ZN7RH_RF699setModeTxEv+0x28>
    2176:	4d e5       	ldi	r20, 0x5D	; 93
    2178:	6a e5       	ldi	r22, 0x5A	; 90
    217a:	cf 01       	movw	r24, r30
    217c:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    2180:	4c e7       	ldi	r20, 0x7C	; 124
    2182:	6c e5       	ldi	r22, 0x5C	; 92
    2184:	ce 01       	movw	r24, r28
    2186:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	65 e2       	ldi	r22, 0x25	; 37
    218e:	ce 01       	movw	r24, r28
    2190:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    2194:	6c e0       	ldi	r22, 0x0C	; 12
    2196:	ce 01       	movw	r24, r28
    2198:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <_ZN7RH_RF699setOpModeEh>
    219c:	83 e0       	ldi	r24, 0x03	; 3
    219e:	8a 83       	std	Y+2, r24	; 0x02
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
    21a4:	08 95       	ret

000021a6 <_ZN7RH_RF694sendEPKhh>:
    21a6:	bf 92       	push	r11
    21a8:	cf 92       	push	r12
    21aa:	df 92       	push	r13
    21ac:	ef 92       	push	r14
    21ae:	ff 92       	push	r15
    21b0:	0f 93       	push	r16
    21b2:	1f 93       	push	r17
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	ec 01       	movw	r28, r24
    21ba:	b6 2e       	mov	r11, r22
    21bc:	c7 2e       	mov	r12, r23
    21be:	14 2f       	mov	r17, r20
    21c0:	4d 33       	cpi	r20, 0x3D	; 61
    21c2:	10 f0       	brcs	.+4      	; 0x21c8 <_ZN7RH_RF694sendEPKhh+0x22>
    21c4:	00 e0       	ldi	r16, 0x00	; 0
    21c6:	6f c0       	rjmp	.+222    	; 0x22a6 <_ZN7RH_RF694sendEPKhh+0x100>
    21c8:	e8 81       	ld	r30, Y
    21ca:	f9 81       	ldd	r31, Y+1	; 0x01
    21cc:	04 84       	ldd	r0, Z+12	; 0x0c
    21ce:	f5 85       	ldd	r31, Z+13	; 0x0d
    21d0:	e0 2d       	mov	r30, r0
    21d2:	09 95       	icall
    21d4:	ce 01       	movw	r24, r28
    21d6:	0e 94 09 10 	call	0x2012	; 0x2012 <_ZN7RH_RF6911setModeIdleEv>
    21da:	e8 81       	ld	r30, Y
    21dc:	f9 81       	ldd	r31, Y+1	; 0x01
    21de:	02 88       	ldd	r0, Z+18	; 0x12
    21e0:	f3 89       	ldd	r31, Z+19	; 0x13
    21e2:	e0 2d       	mov	r30, r0
    21e4:	ce 01       	movw	r24, r28
    21e6:	09 95       	icall
    21e8:	08 2f       	mov	r16, r24
    21ea:	88 23       	and	r24, r24
    21ec:	59 f3       	breq	.-42     	; 0x21c4 <_ZN7RH_RF694sendEPKhh+0x1e>
    21ee:	df b6       	in	r13, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21f6:	0e 94 9c 0b 	call	0x1738	; 0x1738 <digitalWrite>
    21fa:	88 8d       	ldd	r24, Y+24	; 0x18
    21fc:	99 8d       	ldd	r25, Y+25	; 0x19
    21fe:	dc 01       	movw	r26, r24
    2200:	ed 91       	ld	r30, X+
    2202:	fc 91       	ld	r31, X
    2204:	01 90       	ld	r0, Z+
    2206:	f0 81       	ld	r31, Z
    2208:	e0 2d       	mov	r30, r0
    220a:	60 e8       	ldi	r22, 0x80	; 128
    220c:	09 95       	icall
    220e:	88 8d       	ldd	r24, Y+24	; 0x18
    2210:	99 8d       	ldd	r25, Y+25	; 0x19
    2212:	dc 01       	movw	r26, r24
    2214:	ed 91       	ld	r30, X+
    2216:	fc 91       	ld	r31, X
    2218:	01 90       	ld	r0, Z+
    221a:	f0 81       	ld	r31, Z
    221c:	e0 2d       	mov	r30, r0
    221e:	64 e0       	ldi	r22, 0x04	; 4
    2220:	61 0f       	add	r22, r17
    2222:	09 95       	icall
    2224:	88 8d       	ldd	r24, Y+24	; 0x18
    2226:	99 8d       	ldd	r25, Y+25	; 0x19
    2228:	dc 01       	movw	r26, r24
    222a:	ed 91       	ld	r30, X+
    222c:	fc 91       	ld	r31, X
    222e:	01 90       	ld	r0, Z+
    2230:	f0 81       	ld	r31, Z
    2232:	e0 2d       	mov	r30, r0
    2234:	69 85       	ldd	r22, Y+9	; 0x09
    2236:	09 95       	icall
    2238:	88 8d       	ldd	r24, Y+24	; 0x18
    223a:	99 8d       	ldd	r25, Y+25	; 0x19
    223c:	dc 01       	movw	r26, r24
    223e:	ed 91       	ld	r30, X+
    2240:	fc 91       	ld	r31, X
    2242:	01 90       	ld	r0, Z+
    2244:	f0 81       	ld	r31, Z
    2246:	e0 2d       	mov	r30, r0
    2248:	6a 85       	ldd	r22, Y+10	; 0x0a
    224a:	09 95       	icall
    224c:	88 8d       	ldd	r24, Y+24	; 0x18
    224e:	99 8d       	ldd	r25, Y+25	; 0x19
    2250:	dc 01       	movw	r26, r24
    2252:	ed 91       	ld	r30, X+
    2254:	fc 91       	ld	r31, X
    2256:	01 90       	ld	r0, Z+
    2258:	f0 81       	ld	r31, Z
    225a:	e0 2d       	mov	r30, r0
    225c:	6b 85       	ldd	r22, Y+11	; 0x0b
    225e:	09 95       	icall
    2260:	88 8d       	ldd	r24, Y+24	; 0x18
    2262:	99 8d       	ldd	r25, Y+25	; 0x19
    2264:	dc 01       	movw	r26, r24
    2266:	ed 91       	ld	r30, X+
    2268:	fc 91       	ld	r31, X
    226a:	01 90       	ld	r0, Z+
    226c:	f0 81       	ld	r31, Z
    226e:	e0 2d       	mov	r30, r0
    2270:	6c 85       	ldd	r22, Y+12	; 0x0c
    2272:	09 95       	icall
    2274:	eb 2c       	mov	r14, r11
    2276:	fc 2c       	mov	r15, r12
    2278:	11 50       	subi	r17, 0x01	; 1
    227a:	68 f0       	brcs	.+26     	; 0x2296 <_ZN7RH_RF694sendEPKhh+0xf0>
    227c:	88 8d       	ldd	r24, Y+24	; 0x18
    227e:	99 8d       	ldd	r25, Y+25	; 0x19
    2280:	f7 01       	movw	r30, r14
    2282:	61 91       	ld	r22, Z+
    2284:	7f 01       	movw	r14, r30
    2286:	dc 01       	movw	r26, r24
    2288:	ed 91       	ld	r30, X+
    228a:	fc 91       	ld	r31, X
    228c:	01 90       	ld	r0, Z+
    228e:	f0 81       	ld	r31, Z
    2290:	e0 2d       	mov	r30, r0
    2292:	09 95       	icall
    2294:	f1 cf       	rjmp	.-30     	; 0x2278 <_ZN7RH_RF694sendEPKhh+0xd2>
    2296:	61 e0       	ldi	r22, 0x01	; 1
    2298:	8a 8d       	ldd	r24, Y+26	; 0x1a
    229a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <digitalWrite>
    229e:	df be       	out	0x3f, r13	; 63
    22a0:	ce 01       	movw	r24, r28
    22a2:	0e 94 b1 10 	call	0x2162	; 0x2162 <_ZN7RH_RF699setModeTxEv>
    22a6:	80 2f       	mov	r24, r16
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	1f 91       	pop	r17
    22ae:	0f 91       	pop	r16
    22b0:	ff 90       	pop	r15
    22b2:	ef 90       	pop	r14
    22b4:	df 90       	pop	r13
    22b6:	cf 90       	pop	r12
    22b8:	bf 90       	pop	r11
    22ba:	08 95       	ret

000022bc <_ZN7RH_RF6910setTxPowerEab>:
    22bc:	fc 01       	movw	r30, r24
    22be:	60 a3       	std	Z+32, r22	; 0x20
    22c0:	44 23       	and	r20, r20
    22c2:	99 f0       	breq	.+38     	; 0x22ea <_ZN7RH_RF6910setTxPowerEab+0x2e>
    22c4:	6e 3f       	cpi	r22, 0xFE	; 254
    22c6:	14 f4       	brge	.+4      	; 0x22cc <_ZN7RH_RF6910setTxPowerEab+0x10>
    22c8:	8e ef       	ldi	r24, 0xFE	; 254
    22ca:	80 a3       	std	Z+32, r24	; 0x20
    22cc:	40 a1       	ldd	r20, Z+32	; 0x20
    22ce:	4e 30       	cpi	r20, 0x0E	; 14
    22d0:	24 f4       	brge	.+8      	; 0x22da <_ZN7RH_RF6910setTxPowerEab+0x1e>
    22d2:	4e 5e       	subi	r20, 0xEE	; 238
    22d4:	4f 71       	andi	r20, 0x1F	; 31
    22d6:	40 64       	ori	r20, 0x40	; 64
    22d8:	15 c0       	rjmp	.+42     	; 0x2304 <_ZN7RH_RF6910setTxPowerEab+0x48>
    22da:	42 31       	cpi	r20, 0x12	; 18
    22dc:	1c f0       	brlt	.+6      	; 0x22e4 <_ZN7RH_RF6910setTxPowerEab+0x28>
    22de:	45 5f       	subi	r20, 0xF5	; 245
    22e0:	4f 71       	andi	r20, 0x1F	; 31
    22e2:	01 c0       	rjmp	.+2      	; 0x22e6 <_ZN7RH_RF6910setTxPowerEab+0x2a>
    22e4:	42 5f       	subi	r20, 0xF2	; 242
    22e6:	40 66       	ori	r20, 0x60	; 96
    22e8:	0d c0       	rjmp	.+26     	; 0x2304 <_ZN7RH_RF6910setTxPowerEab+0x48>
    22ea:	6e 3e       	cpi	r22, 0xEE	; 238
    22ec:	14 f4       	brge	.+4      	; 0x22f2 <_ZN7RH_RF6910setTxPowerEab+0x36>
    22ee:	8e ee       	ldi	r24, 0xEE	; 238
    22f0:	80 a3       	std	Z+32, r24	; 0x20
    22f2:	80 a1       	ldd	r24, Z+32	; 0x20
    22f4:	8e 30       	cpi	r24, 0x0E	; 14
    22f6:	14 f0       	brlt	.+4      	; 0x22fc <_ZN7RH_RF6910setTxPowerEab+0x40>
    22f8:	8d e0       	ldi	r24, 0x0D	; 13
    22fa:	80 a3       	std	Z+32, r24	; 0x20
    22fc:	40 a1       	ldd	r20, Z+32	; 0x20
    22fe:	4e 5e       	subi	r20, 0xEE	; 238
    2300:	4f 71       	andi	r20, 0x1F	; 31
    2302:	40 68       	ori	r20, 0x80	; 128
    2304:	61 e1       	ldi	r22, 0x11	; 17
    2306:	cf 01       	movw	r24, r30
    2308:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>

0000230c <_ZN7RH_RF6917setModemRegistersEPKNS_11ModemConfigE>:
    230c:	0f 93       	push	r16
    230e:	1f 93       	push	r17
    2310:	cf 93       	push	r28
    2312:	df 93       	push	r29
    2314:	ec 01       	movw	r28, r24
    2316:	8b 01       	movw	r16, r22
    2318:	25 e0       	ldi	r18, 0x05	; 5
    231a:	ab 01       	movw	r20, r22
    231c:	62 e0       	ldi	r22, 0x02	; 2
    231e:	0e 94 02 17 	call	0x2e04	; 0x2e04 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    2322:	a8 01       	movw	r20, r16
    2324:	4b 5f       	subi	r20, 0xFB	; 251
    2326:	5f 4f       	sbci	r21, 0xFF	; 255
    2328:	22 e0       	ldi	r18, 0x02	; 2
    232a:	69 e1       	ldi	r22, 0x19	; 25
    232c:	ce 01       	movw	r24, r28
    232e:	0e 94 02 17 	call	0x2e04	; 0x2e04 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    2332:	f8 01       	movw	r30, r16
    2334:	47 81       	ldd	r20, Z+7	; 0x07
    2336:	67 e3       	ldi	r22, 0x37	; 55
    2338:	ce 01       	movw	r24, r28
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	1f 91       	pop	r17
    2340:	0f 91       	pop	r16
    2342:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>

00002346 <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE>:
    2346:	0f 93       	push	r16
    2348:	1f 93       	push	r17
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	28 97       	sbiw	r28, 0x08	; 8
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	70 e0       	ldi	r23, 0x00	; 0
    2360:	6c 31       	cpi	r22, 0x1C	; 28
    2362:	71 05       	cpc	r23, r1
    2364:	b4 f4       	brge	.+44     	; 0x2392 <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE+0x4c>
    2366:	8c 01       	movw	r16, r24
    2368:	83 e0       	ldi	r24, 0x03	; 3
    236a:	66 0f       	add	r22, r22
    236c:	77 1f       	adc	r23, r23
    236e:	8a 95       	dec	r24
    2370:	e1 f7       	brne	.-8      	; 0x236a <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE+0x24>
    2372:	6a 58       	subi	r22, 0x8A	; 138
    2374:	7e 4f       	sbci	r23, 0xFE	; 254
    2376:	48 e0       	ldi	r20, 0x08	; 8
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	ce 01       	movw	r24, r28
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	0e 94 b0 1b 	call	0x3760	; 0x3760 <memcpy_P>
    2382:	be 01       	movw	r22, r28
    2384:	6f 5f       	subi	r22, 0xFF	; 255
    2386:	7f 4f       	sbci	r23, 0xFF	; 255
    2388:	c8 01       	movw	r24, r16
    238a:	0e 94 86 11 	call	0x230c	; 0x230c <_ZN7RH_RF6917setModemRegistersEPKNS_11ModemConfigE>
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	01 c0       	rjmp	.+2      	; 0x2394 <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE+0x4e>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	28 96       	adiw	r28, 0x08	; 8
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	1f 91       	pop	r17
    23a6:	0f 91       	pop	r16
    23a8:	08 95       	ret

000023aa <_ZN7RH_RF6917setPreambleLengthEj>:
    23aa:	1f 93       	push	r17
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	ec 01       	movw	r28, r24
    23b2:	16 2f       	mov	r17, r22
    23b4:	47 2f       	mov	r20, r23
    23b6:	6c e2       	ldi	r22, 0x2C	; 44
    23b8:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    23bc:	41 2f       	mov	r20, r17
    23be:	6d e2       	ldi	r22, 0x2D	; 45
    23c0:	ce 01       	movw	r24, r28
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	1f 91       	pop	r17
    23c8:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>

000023cc <_ZN7RH_RF6912setSyncWordsEPKhh>:
    23cc:	ef 92       	push	r14
    23ce:	ff 92       	push	r15
    23d0:	0f 93       	push	r16
    23d2:	1f 93       	push	r17
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	8c 01       	movw	r16, r24
    23da:	7b 01       	movw	r14, r22
    23dc:	c4 2f       	mov	r28, r20
    23de:	6e e2       	ldi	r22, 0x2E	; 46
    23e0:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN11RHSPIDriver7spiReadEh>
    23e4:	d8 2f       	mov	r29, r24
    23e6:	e1 14       	cp	r14, r1
    23e8:	f1 04       	cpc	r15, r1
    23ea:	61 f0       	breq	.+24     	; 0x2404 <_ZN7RH_RF6912setSyncWordsEPKhh+0x38>
    23ec:	8f ef       	ldi	r24, 0xFF	; 255
    23ee:	8c 0f       	add	r24, r28
    23f0:	84 30       	cpi	r24, 0x04	; 4
    23f2:	40 f4       	brcc	.+16     	; 0x2404 <_ZN7RH_RF6912setSyncWordsEPKhh+0x38>
    23f4:	2c 2f       	mov	r18, r28
    23f6:	a7 01       	movw	r20, r14
    23f8:	6f e2       	ldi	r22, 0x2F	; 47
    23fa:	c8 01       	movw	r24, r16
    23fc:	0e 94 02 17 	call	0x2e04	; 0x2e04 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    2400:	d0 68       	ori	r29, 0x80	; 128
    2402:	01 c0       	rjmp	.+2      	; 0x2406 <_ZN7RH_RF6912setSyncWordsEPKhh+0x3a>
    2404:	df 77       	andi	r29, 0x7F	; 127
    2406:	2c 2f       	mov	r18, r28
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	21 50       	subi	r18, 0x01	; 1
    240c:	31 09       	sbc	r19, r1
    240e:	83 e0       	ldi	r24, 0x03	; 3
    2410:	22 0f       	add	r18, r18
    2412:	33 1f       	adc	r19, r19
    2414:	8a 95       	dec	r24
    2416:	e1 f7       	brne	.-8      	; 0x2410 <_ZN7RH_RF6912setSyncWordsEPKhh+0x44>
    2418:	d7 7c       	andi	r29, 0xC7	; 199
    241a:	4d 2f       	mov	r20, r29
    241c:	42 2b       	or	r20, r18
    241e:	6e e2       	ldi	r22, 0x2E	; 46
    2420:	c8 01       	movw	r24, r16
    2422:	df 91       	pop	r29
    2424:	cf 91       	pop	r28
    2426:	1f 91       	pop	r17
    2428:	0f 91       	pop	r16
    242a:	ff 90       	pop	r15
    242c:	ef 90       	pop	r14
    242e:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>

00002432 <_ZN7RH_RF6916setEncryptionKeyEPh>:
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	61 15       	cp	r22, r1
    2438:	71 05       	cpc	r23, r1
    243a:	91 f0       	breq	.+36     	; 0x2460 <_ZN7RH_RF6916setEncryptionKeyEPh+0x2e>
    243c:	ab 01       	movw	r20, r22
    243e:	ec 01       	movw	r28, r24
    2440:	20 e1       	ldi	r18, 0x10	; 16
    2442:	6e e3       	ldi	r22, 0x3E	; 62
    2444:	0e 94 02 17 	call	0x2e04	; 0x2e04 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    2448:	6d e3       	ldi	r22, 0x3D	; 61
    244a:	ce 01       	movw	r24, r28
    244c:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN11RHSPIDriver7spiReadEh>
    2450:	48 2f       	mov	r20, r24
    2452:	41 60       	ori	r20, 0x01	; 1
    2454:	6d e3       	ldi	r22, 0x3D	; 61
    2456:	ce 01       	movw	r24, r28
    2458:	df 91       	pop	r29
    245a:	cf 91       	pop	r28
    245c:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    2460:	df 91       	pop	r29
    2462:	cf 91       	pop	r28
    2464:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <_ZN7RH_RF6916setEncryptionKeyEPh.part.4.constprop.5>

00002468 <_ZN7RH_RF694initEv>:
{
    _idleMode = idleMode;
}

bool RH_RF69::init()
{
    2468:	df 92       	push	r13
    246a:	ef 92       	push	r14
    246c:	ff 92       	push	r15
    246e:	0f 93       	push	r16
    2470:	1f 93       	push	r17
    2472:	cf 93       	push	r28
    2474:	df 93       	push	r29
    2476:	00 d0       	rcall	.+0      	; 0x2478 <_ZN7RH_RF694initEv+0x10>
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	7c 01       	movw	r14, r24
    if (!RHSPIDriver::init())
    247e:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <_ZN11RHSPIDriver4initEv>
    2482:	d8 2e       	mov	r13, r24
    2484:	81 11       	cpse	r24, r1
    2486:	02 c0       	rjmp	.+4      	; 0x248c <_ZN7RH_RF694initEv+0x24>
	return false;
    2488:	d1 2c       	mov	r13, r1
    248a:	94 c0       	rjmp	.+296    	; 0x25b4 <_ZN7RH_RF694initEv+0x14c>

    // Determine the interrupt number that corresponds to the interruptPin
    int interruptNumber = digitalPinToInterrupt(_interruptPin);
    248c:	f7 01       	movw	r30, r14
    248e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2490:	88 23       	and	r24, r24
    2492:	51 f0       	breq	.+20     	; 0x24a8 <_ZN7RH_RF694initEv+0x40>
    2494:	81 30       	cpi	r24, 0x01	; 1
    2496:	51 f0       	breq	.+20     	; 0x24ac <_ZN7RH_RF694initEv+0x44>
    2498:	82 30       	cpi	r24, 0x02	; 2
    249a:	51 f0       	breq	.+20     	; 0x24b0 <_ZN7RH_RF694initEv+0x48>
    249c:	83 30       	cpi	r24, 0x03	; 3
    249e:	51 f0       	breq	.+20     	; 0x24b4 <_ZN7RH_RF694initEv+0x4c>
    24a0:	87 30       	cpi	r24, 0x07	; 7
    24a2:	91 f7       	brne	.-28     	; 0x2488 <_ZN7RH_RF694initEv+0x20>
    24a4:	14 e0       	ldi	r17, 0x04	; 4
    24a6:	07 c0       	rjmp	.+14     	; 0x24b6 <_ZN7RH_RF694initEv+0x4e>
    24a8:	12 e0       	ldi	r17, 0x02	; 2
    24aa:	05 c0       	rjmp	.+10     	; 0x24b6 <_ZN7RH_RF694initEv+0x4e>
    24ac:	13 e0       	ldi	r17, 0x03	; 3
    24ae:	03 c0       	rjmp	.+6      	; 0x24b6 <_ZN7RH_RF694initEv+0x4e>
    24b0:	11 e0       	ldi	r17, 0x01	; 1
    24b2:	01 c0       	rjmp	.+2      	; 0x24b6 <_ZN7RH_RF694initEv+0x4e>
    24b4:	10 e0       	ldi	r17, 0x00	; 0
#ifdef RH_ATTACHINTERRUPT_TAKES_PIN_NUMBER
    interruptNumber = _interruptPin;
#endif

    // Tell the low level SPI interface we will use SPI within this interrupt
    spiUsingInterrupt(interruptNumber);
    24b6:	61 2f       	mov	r22, r17
    24b8:	c7 01       	movw	r24, r14
    24ba:	0e 94 56 17 	call	0x2eac	; 0x2eac <_ZN11RHSPIDriver17spiUsingInterruptEh>

    // Get the device type and check it
    // This also tests whether we are really connected to a device
    // My test devices return 0x24
    _deviceType = spiRead(RH_RF69_REG_10_VERSION);
    24be:	60 e1       	ldi	r22, 0x10	; 16
    24c0:	c7 01       	movw	r24, r14
    24c2:	0e 94 81 16 	call	0x2d02	; 0x2d02 <_ZN11RHSPIDriver7spiReadEh>
    24c6:	f7 01       	movw	r30, r14
    24c8:	87 8f       	std	Z+31, r24	; 0x1f
    if (_deviceType == 00 ||
    24ca:	81 50       	subi	r24, 0x01	; 1
    24cc:	8e 3f       	cpi	r24, 0xFE	; 254
    24ce:	e0 f6       	brcc	.-72     	; 0x2488 <_ZN7RH_RF694initEv+0x20>
	return false;

    // Add by Adrien van den Bossche <vandenbo@univ-tlse2.fr> for Teensy
    // ARM M4 requires the below. else pin interrupt doesn't work properly.
    // On all other platforms, its innocuous, belt and braces
    pinMode(_interruptPin, INPUT);
    24d0:	60 e0       	ldi	r22, 0x00	; 0
    24d2:	f7 01       	movw	r30, r14
    24d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    24d6:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <pinMode>
    // Since there are a limited number of interrupt glue functions isr*() available,
    // we can only support a limited number of devices simultaneously
    // ON some devices, notably most Arduinos, the interrupt pin passed in is actuallt the
    // interrupt number. You have to figure out the interruptnumber-to-interruptpin mapping
    // yourself based on knwledge of what Arduino board you are running on.
    if (_myInterruptIndex == 0xff)
    24da:	f7 01       	movw	r30, r14
    24dc:	85 8d       	ldd	r24, Z+29	; 0x1d
    24de:	8f 3f       	cpi	r24, 0xFF	; 255
    24e0:	49 f4       	brne	.+18     	; 0x24f4 <_ZN7RH_RF694initEv+0x8c>
    {
	// First run, no interrupt allocated yet
	if (_interruptCount <= RH_RF69_NUM_INTERRUPTS)
    24e2:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <_ZN7RH_RF6915_interruptCountE>
    24e6:	84 30       	cpi	r24, 0x04	; 4
    24e8:	78 f6       	brcc	.-98     	; 0x2488 <_ZN7RH_RF694initEv+0x20>
	    _myInterruptIndex = _interruptCount++;
    24ea:	91 e0       	ldi	r25, 0x01	; 1
    24ec:	98 0f       	add	r25, r24
    24ee:	90 93 76 04 	sts	0x0476, r25	; 0x800476 <_ZN7RH_RF6915_interruptCountE>
    24f2:	85 8f       	std	Z+29, r24	; 0x1d
	else
	    return false; // Too many devices, not enough interrupt vectors
    }
    _deviceForInterrupt[_myInterruptIndex] = this;
    24f4:	f7 01       	movw	r30, r14
    24f6:	85 8d       	ldd	r24, Z+29	; 0x1d
    24f8:	e8 2f       	mov	r30, r24
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	ee 0f       	add	r30, r30
    24fe:	ff 1f       	adc	r31, r31
    2500:	e9 58       	subi	r30, 0x89	; 137
    2502:	fb 4f       	sbci	r31, 0xFB	; 251
    2504:	f1 82       	std	Z+1, r15	; 0x01
    2506:	e0 82       	st	Z, r14
    if (_myInterruptIndex == 0)
    2508:	81 11       	cpse	r24, r1
    250a:	05 c0       	rjmp	.+10     	; 0x2516 <_ZN7RH_RF694initEv+0xae>
	attachInterrupt(interruptNumber, isr0, RISING);
    250c:	43 e0       	ldi	r20, 0x03	; 3
    250e:	50 e0       	ldi	r21, 0x00	; 0
    2510:	63 e6       	ldi	r22, 0x63	; 99
    2512:	70 e1       	ldi	r23, 0x10	; 16
    2514:	0e c0       	rjmp	.+28     	; 0x2532 <_ZN7RH_RF694initEv+0xca>
    else if (_myInterruptIndex == 1)
    2516:	81 30       	cpi	r24, 0x01	; 1
    2518:	29 f4       	brne	.+10     	; 0x2524 <_ZN7RH_RF694initEv+0xbc>
	attachInterrupt(interruptNumber, isr1, RISING);
    251a:	43 e0       	ldi	r20, 0x03	; 3
    251c:	50 e0       	ldi	r21, 0x00	; 0
    251e:	6c e6       	ldi	r22, 0x6C	; 108
    2520:	70 e1       	ldi	r23, 0x10	; 16
    2522:	07 c0       	rjmp	.+14     	; 0x2532 <_ZN7RH_RF694initEv+0xca>
    else if (_myInterruptIndex == 2)
    2524:	82 30       	cpi	r24, 0x02	; 2
    2526:	09 f0       	breq	.+2      	; 0x252a <_ZN7RH_RF694initEv+0xc2>
    2528:	af cf       	rjmp	.-162    	; 0x2488 <_ZN7RH_RF694initEv+0x20>
	attachInterrupt(interruptNumber, isr2, RISING);
    252a:	43 e0       	ldi	r20, 0x03	; 3
    252c:	50 e0       	ldi	r21, 0x00	; 0
    252e:	65 e7       	ldi	r22, 0x75	; 117
    2530:	70 e1       	ldi	r23, 0x10	; 16
    2532:	81 2f       	mov	r24, r17
    2534:	0e 94 e6 14 	call	0x29cc	; 0x29cc <attachInterrupt>
    else
	return false; // Too many devices, not enough interrupt vectors

    setModeIdle();
    2538:	c7 01       	movw	r24, r14
    253a:	0e 94 09 10 	call	0x2012	; 0x2012 <_ZN7RH_RF6911setModeIdleEv>
    // 2 CRC CCITT octets computed on the header, length and data (this in the modem config data)
    // 0 to 60 bytes data
    // RSSI Threshold -114dBm
    // We dont use the RH_RF69s address filtering: instead we prepend our own headers to the beginning
    // of the RH_RF69 payload
    spiWrite(RH_RF69_REG_3C_FIFOTHRESH, RH_RF69_FIFOTHRESH_TXSTARTCONDITION_NOTEMPTY | 0x0f); // thresh 15 is default
    253e:	4f e8       	ldi	r20, 0x8F	; 143
    2540:	6c e3       	ldi	r22, 0x3C	; 60
    2542:	c7 01       	movw	r24, r14
    2544:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    // SYNCCONFIG is default. SyncSize is set later by setSyncWords()
//    spiWrite(RH_RF69_REG_2E_SYNCCONFIG, RH_RF69_SYNCCONFIG_SYNCON); // auto, tolerance 0
    // PAYLOADLENGTH is default
//    spiWrite(RH_RF69_REG_38_PAYLOADLENGTH, RH_RF69_FIFO_SIZE); // max size only for RX
    // PACKETCONFIG 2 is default
    spiWrite(RH_RF69_REG_6F_TESTDAGC, RH_RF69_TESTDAGC_CONTINUOUSDAGC_IMPROVED_LOWBETAOFF);
    2548:	40 e3       	ldi	r20, 0x30	; 48
    254a:	6f e6       	ldi	r22, 0x6F	; 111
    254c:	c7 01       	movw	r24, r14
    254e:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    // If high power boost set previously, disable it
    spiWrite(RH_RF69_REG_5A_TESTPA1, RH_RF69_TESTPA1_NORMAL);
    2552:	45 e5       	ldi	r20, 0x55	; 85
    2554:	6a e5       	ldi	r22, 0x5A	; 90
    2556:	c7 01       	movw	r24, r14
    2558:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_NORMAL);
    255c:	40 e7       	ldi	r20, 0x70	; 112
    255e:	6c e5       	ldi	r22, 0x5C	; 92
    2560:	c7 01       	movw	r24, r14
    2562:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN11RHSPIDriver8spiWriteEhh>

    // The following can be changed later by the user if necessary.
    // Set up default configuration
    uint8_t syncwords[] = { 0x2d, 0xd4 };
    2566:	8d e2       	ldi	r24, 0x2D	; 45
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	84 ed       	ldi	r24, 0xD4	; 212
    256c:	8a 83       	std	Y+2, r24	; 0x02
    setSyncWords(syncwords, sizeof(syncwords)); // Same as RF22's
    256e:	42 e0       	ldi	r20, 0x02	; 2
    2570:	be 01       	movw	r22, r28
    2572:	6f 5f       	subi	r22, 0xFF	; 255
    2574:	7f 4f       	sbci	r23, 0xFF	; 255
    2576:	c7 01       	movw	r24, r14
    2578:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_ZN7RH_RF6912setSyncWordsEPKhh>
    // Reasonably fast and reliable default speed and modulation
    setModemConfig(GFSK_Rb250Fd250);
    257c:	62 e1       	ldi	r22, 0x12	; 18
    257e:	c7 01       	movw	r24, r14
    2580:	0e 94 a3 11 	call	0x2346	; 0x2346 <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE>

    // 3 would be sufficient, but this is the same as RF22's
    setPreambleLength(4);
    2584:	64 e0       	ldi	r22, 0x04	; 4
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	c7 01       	movw	r24, r14
    258a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <_ZN7RH_RF6917setPreambleLengthEj>
    // An innocuous ISM frequency, same as RF22's
    setFrequency(434.0);
    258e:	0d ec       	ldi	r16, 0xCD	; 205
    2590:	1c ec       	ldi	r17, 0xCC	; 204
    2592:	2c e4       	ldi	r18, 0x4C	; 76
    2594:	3d e3       	ldi	r19, 0x3D	; 61
    2596:	40 e0       	ldi	r20, 0x00	; 0
    2598:	50 e0       	ldi	r21, 0x00	; 0
    259a:	69 ed       	ldi	r22, 0xD9	; 217
    259c:	73 e4       	ldi	r23, 0x43	; 67
    259e:	c7 01       	movw	r24, r14
    25a0:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <_ZN7RH_RF6912setFrequencyEff>
    25a4:	c7 01       	movw	r24, r14
    25a6:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <_ZN7RH_RF6916setEncryptionKeyEPh.part.4.constprop.5>
    // No encryption
    setEncryptionKey(NULL);
    // +13dBm, same as power-on default
    setTxPower(13);
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	6d e0       	ldi	r22, 0x0D	; 13
    25ae:	c7 01       	movw	r24, r14
    25b0:	0e 94 5e 11 	call	0x22bc	; 0x22bc <_ZN7RH_RF6910setTxPowerEab>

    return true;
}
    25b4:	8d 2d       	mov	r24, r13
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	df 91       	pop	r29
    25bc:	cf 91       	pop	r28
    25be:	1f 91       	pop	r17
    25c0:	0f 91       	pop	r16
    25c2:	ff 90       	pop	r15
    25c4:	ef 90       	pop	r14
    25c6:	df 90       	pop	r13
    25c8:	08 95       	ret

000025ca <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    25ca:	cf 93       	push	r28
  uint8_t sreg = SREG;
    25cc:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    25ce:	f8 94       	cli
  if (!initialized) {
    25d0:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <_ZN8SPIClass11initializedE>
    25d4:	81 11       	cpse	r24, r1
    25d6:	27 c0       	rjmp	.+78     	; 0x2626 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    25d8:	ec e4       	ldi	r30, 0x4C	; 76
    25da:	f1 e0       	ldi	r31, 0x01	; 1
    25dc:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    25de:	ed e2       	ldi	r30, 0x2D	; 45
    25e0:	f1 e0       	ldi	r31, 0x01	; 1
    25e2:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    25e4:	e8 2f       	mov	r30, r24
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	ee 0f       	add	r30, r30
    25ea:	ff 1f       	adc	r31, r31
    25ec:	e8 59       	subi	r30, 0x98	; 152
    25ee:	fe 4f       	sbci	r31, 0xFE	; 254
    25f0:	a5 91       	lpm	r26, Z+
    25f2:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    25f4:	ec 91       	ld	r30, X
    25f6:	e9 23       	and	r30, r25
    25f8:	21 f4       	brne	.+8      	; 0x2602 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    25fa:	61 e0       	ldi	r22, 0x01	; 1
    25fc:	81 e1       	ldi	r24, 0x11	; 17
    25fe:	0e 94 9c 0b 	call	0x1738	; 0x1738 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    2602:	61 e0       	ldi	r22, 0x01	; 1
    2604:	81 e1       	ldi	r24, 0x11	; 17
    2606:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    260a:	8c b5       	in	r24, 0x2c	; 44
    260c:	80 61       	ori	r24, 0x10	; 16
    260e:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    2610:	8c b5       	in	r24, 0x2c	; 44
    2612:	80 64       	ori	r24, 0x40	; 64
    2614:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    2616:	61 e0       	ldi	r22, 0x01	; 1
    2618:	8f e0       	ldi	r24, 0x0F	; 15
    261a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <pinMode>
    pinMode(MOSI, OUTPUT);
    261e:	61 e0       	ldi	r22, 0x01	; 1
    2620:	80 e1       	ldi	r24, 0x10	; 16
    2622:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <pinMode>
  }
  initialized++; // reference count
    2626:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <_ZN8SPIClass11initializedE>
    262a:	8f 5f       	subi	r24, 0xFF	; 255
    262c:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    2630:	cf bf       	out	0x3f, r28	; 63
}
    2632:	cf 91       	pop	r28
    2634:	08 95       	ret

00002636 <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  uint8_t sreg = SREG;
    2636:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    2638:	f8 94       	cli
  // Decrease the reference counter
  if (initialized)
    263a:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <_ZN8SPIClass11initializedE>
    263e:	88 23       	and	r24, r24
    2640:	19 f0       	breq	.+6      	; 0x2648 <_ZN8SPIClass3endEv+0x12>
    initialized--;
    2642:	81 50       	subi	r24, 0x01	; 1
    2644:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <_ZN8SPIClass11initializedE>
  // If there are no more references disable SPI
  if (!initialized) {
    2648:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <_ZN8SPIClass11initializedE>
    264c:	81 11       	cpse	r24, r1
    264e:	05 c0       	rjmp	.+10     	; 0x265a <_ZN8SPIClass3endEv+0x24>
    SPCR &= ~_BV(SPE);
    2650:	8c b5       	in	r24, 0x2c	; 44
    2652:	8f 7b       	andi	r24, 0xBF	; 191
    2654:	8c bd       	out	0x2c, r24	; 44
    interruptMode = 0;
    2656:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <_ZN8SPIClass13interruptModeE>
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
    265a:	9f bf       	out	0x3f, r25	; 63
    265c:	08 95       	ret

0000265e <__cxa_pure_virtual>:
    265e:	0e 94 ab 1b 	call	0x3756	; 0x3756 <abort>

00002662 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    2662:	cf 93       	push	r28
    2664:	df 93       	push	r29
    2666:	1f 92       	push	r1
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	69 83       	std	Y+1, r22	; 0x01
    266e:	dc 01       	movw	r26, r24
    2670:	ed 91       	ld	r30, X+
    2672:	fc 91       	ld	r31, X
    2674:	02 80       	ldd	r0, Z+2	; 0x02
    2676:	f3 81       	ldd	r31, Z+3	; 0x03
    2678:	e0 2d       	mov	r30, r0
    267a:	41 e0       	ldi	r20, 0x01	; 1
    267c:	50 e0       	ldi	r21, 0x00	; 0
    267e:	be 01       	movw	r22, r28
    2680:	6f 5f       	subi	r22, 0xFF	; 255
    2682:	7f 4f       	sbci	r23, 0xFF	; 255
    2684:	09 95       	icall
    2686:	0f 90       	pop	r0
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	08 95       	ret

0000268e <_ZN7Serial_4peekEv>:
    268e:	cf 93       	push	r28
    2690:	df 93       	push	r29
    2692:	ec 01       	movw	r28, r24
    2694:	8c 85       	ldd	r24, Y+12	; 0x0c
    2696:	9d 85       	ldd	r25, Y+13	; 0x0d
    2698:	97 ff       	sbrs	r25, 7
    269a:	05 c0       	rjmp	.+10     	; 0x26a6 <_ZN7Serial_4peekEv+0x18>
    269c:	82 e0       	ldi	r24, 0x02	; 2
    269e:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <_Z8USB_Recvh>
    26a2:	9d 87       	std	Y+13, r25	; 0x0d
    26a4:	8c 87       	std	Y+12, r24	; 0x0c
    26a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    26a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	08 95       	ret

000026b0 <_ZN7Serial_17availableForWriteEv>:
    26b0:	83 e0       	ldi	r24, 0x03	; 3
    26b2:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <_Z13USB_SendSpaceh>
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	08 95       	ret

000026ba <_ZN7Serial_5flushEv>:
    26ba:	83 e0       	ldi	r24, 0x03	; 3
    26bc:	0c 94 78 09 	jmp	0x12f0	; 0x12f0 <_Z9USB_Flushh>

000026c0 <_ZN7Serial_9availableEv>:
    26c0:	fc 01       	movw	r30, r24
    26c2:	84 85       	ldd	r24, Z+12	; 0x0c
    26c4:	95 85       	ldd	r25, Z+13	; 0x0d
    26c6:	97 fd       	sbrc	r25, 7
    26c8:	06 c0       	rjmp	.+12     	; 0x26d6 <_ZN7Serial_9availableEv+0x16>
    26ca:	82 e0       	ldi	r24, 0x02	; 2
    26cc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <_Z13USB_Availableh>
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	01 96       	adiw	r24, 0x01	; 1
    26d4:	08 95       	ret
    26d6:	82 e0       	ldi	r24, 0x02	; 2
    26d8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <_Z13USB_Availableh>
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	08 95       	ret

000026e0 <_ZN7Serial_4readEv>:
    26e0:	fc 01       	movw	r30, r24
    26e2:	84 85       	ldd	r24, Z+12	; 0x0c
    26e4:	95 85       	ldd	r25, Z+13	; 0x0d
    26e6:	97 fd       	sbrc	r25, 7
    26e8:	05 c0       	rjmp	.+10     	; 0x26f4 <_ZN7Serial_4readEv+0x14>
    26ea:	2f ef       	ldi	r18, 0xFF	; 255
    26ec:	3f ef       	ldi	r19, 0xFF	; 255
    26ee:	35 87       	std	Z+13, r19	; 0x0d
    26f0:	24 87       	std	Z+12, r18	; 0x0c
    26f2:	08 95       	ret
    26f4:	82 e0       	ldi	r24, 0x02	; 2
    26f6:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <_Z8USB_Recvh>

000026fa <_ZN7Serial_5writeEPKhj>:
    26fa:	cf 93       	push	r28
    26fc:	df 93       	push	r29
    26fe:	ec 01       	movw	r28, r24
    2700:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    2704:	88 23       	and	r24, r24
    2706:	31 f0       	breq	.+12     	; 0x2714 <_ZN7Serial_5writeEPKhj+0x1a>
    2708:	83 e0       	ldi	r24, 0x03	; 3
    270a:	0e 94 14 07 	call	0xe28	; 0xe28 <_Z8USB_SendhPKvi>
    270e:	18 16       	cp	r1, r24
    2710:	19 06       	cpc	r1, r25
    2712:	34 f0       	brlt	.+12     	; 0x2720 <_ZN7Serial_5writeEPKhj+0x26>
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	9b 83       	std	Y+3, r25	; 0x03
    271a:	8a 83       	std	Y+2, r24	; 0x02
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	08 95       	ret

00002726 <_Z16isLUFAbootloaderv>:
    2726:	ee ef       	ldi	r30, 0xFE	; 254
    2728:	ff e7       	ldi	r31, 0x7F	; 127
    272a:	25 91       	lpm	r18, Z+
    272c:	34 91       	lpm	r19, Z
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	2b 3f       	cpi	r18, 0xFB	; 251
    2732:	3c 4d       	sbci	r19, 0xDC	; 220
    2734:	09 f0       	breq	.+2      	; 0x2738 <_Z16isLUFAbootloaderv+0x12>
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	08 95       	ret

0000273a <_Z16CDC_GetInterfacePh>:
    273a:	fc 01       	movw	r30, r24
    273c:	90 81       	ld	r25, Z
    273e:	9e 5f       	subi	r25, 0xFE	; 254
    2740:	90 83       	st	Z, r25
    2742:	42 e4       	ldi	r20, 0x42	; 66
    2744:	50 e0       	ldi	r21, 0x00	; 0
    2746:	6e e4       	ldi	r22, 0x4E	; 78
    2748:	72 e0       	ldi	r23, 0x02	; 2
    274a:	80 e8       	ldi	r24, 0x80	; 128
    274c:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <_Z15USB_SendControlhPKvi>

00002750 <_Z9CDC_SetupR8USBSetup>:
    2750:	fc 01       	movw	r30, r24
    2752:	81 81       	ldd	r24, Z+1	; 0x01
    2754:	90 81       	ld	r25, Z
    2756:	91 3a       	cpi	r25, 0xA1	; 161
    2758:	59 f4       	brne	.+22     	; 0x2770 <_Z9CDC_SetupR8USBSetup+0x20>
    275a:	81 32       	cpi	r24, 0x21	; 33
    275c:	09 f0       	breq	.+2      	; 0x2760 <_Z9CDC_SetupR8USBSetup+0x10>
    275e:	65 c0       	rjmp	.+202    	; 0x282a <_Z9CDC_SetupR8USBSetup+0xda>
    2760:	47 e0       	ldi	r20, 0x07	; 7
    2762:	50 e0       	ldi	r21, 0x00	; 0
    2764:	66 e1       	ldi	r22, 0x16	; 22
    2766:	71 e0       	ldi	r23, 0x01	; 1
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	0e 94 c4 07 	call	0xf88	; 0xf88 <_Z15USB_SendControlhPKvi>
    276e:	5b c0       	rjmp	.+182    	; 0x2826 <_Z9CDC_SetupR8USBSetup+0xd6>
    2770:	91 32       	cpi	r25, 0x21	; 33
    2772:	09 f0       	breq	.+2      	; 0x2776 <_Z9CDC_SetupR8USBSetup+0x26>
    2774:	5a c0       	rjmp	.+180    	; 0x282a <_Z9CDC_SetupR8USBSetup+0xda>
    2776:	83 32       	cpi	r24, 0x23	; 35
    2778:	69 f4       	brne	.+26     	; 0x2794 <_Z9CDC_SetupR8USBSetup+0x44>
    277a:	82 81       	ldd	r24, Z+2	; 0x02
    277c:	93 81       	ldd	r25, Z+3	; 0x03
    277e:	a0 e0       	ldi	r26, 0x00	; 0
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZL10breakValue>
    2786:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_ZL10breakValue+0x1>
    278a:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <_ZL10breakValue+0x2>
    278e:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <_ZL10breakValue+0x3>
    2792:	49 c0       	rjmp	.+146    	; 0x2826 <_Z9CDC_SetupR8USBSetup+0xd6>
    2794:	80 32       	cpi	r24, 0x20	; 32
    2796:	39 f4       	brne	.+14     	; 0x27a6 <_Z9CDC_SetupR8USBSetup+0x56>
    2798:	67 e0       	ldi	r22, 0x07	; 7
    279a:	70 e0       	ldi	r23, 0x00	; 0
    279c:	86 e1       	ldi	r24, 0x16	; 22
    279e:	91 e0       	ldi	r25, 0x01	; 1
    27a0:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <_Z15USB_RecvControlPvi>
    27a4:	40 c0       	rjmp	.+128    	; 0x2826 <_Z9CDC_SetupR8USBSetup+0xd6>
    27a6:	82 32       	cpi	r24, 0x22	; 34
    27a8:	09 f0       	breq	.+2      	; 0x27ac <_Z9CDC_SetupR8USBSetup+0x5c>
    27aa:	3d c0       	rjmp	.+122    	; 0x2826 <_Z9CDC_SetupR8USBSetup+0xd6>
    27ac:	82 81       	ldd	r24, Z+2	; 0x02
    27ae:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <_ZL12_usbLineInfo+0x7>
    27b2:	0e 94 93 13 	call	0x2726	; 0x2726 <_Z16isLUFAbootloaderv>
    27b6:	88 23       	and	r24, r24
    27b8:	19 f0       	breq	.+6      	; 0x27c0 <_Z9CDC_SetupR8USBSetup+0x70>
    27ba:	ee ef       	ldi	r30, 0xFE	; 254
    27bc:	fa e0       	ldi	r31, 0x0A	; 10
    27be:	02 c0       	rjmp	.+4      	; 0x27c4 <_Z9CDC_SetupR8USBSetup+0x74>
    27c0:	e0 e0       	ldi	r30, 0x00	; 0
    27c2:	f8 e0       	ldi	r31, 0x08	; 8
    27c4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_ZL12_usbLineInfo>
    27c8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_ZL12_usbLineInfo+0x1>
    27cc:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_ZL12_usbLineInfo+0x2>
    27d0:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_ZL12_usbLineInfo+0x3>
    27d4:	80 3b       	cpi	r24, 0xB0	; 176
    27d6:	94 40       	sbci	r25, 0x04	; 4
    27d8:	a1 05       	cpc	r26, r1
    27da:	b1 05       	cpc	r27, r1
    27dc:	41 f5       	brne	.+80     	; 0x282e <_Z9CDC_SetupR8USBSetup+0xde>
    27de:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <_ZL12_usbLineInfo+0x7>
    27e2:	80 fd       	sbrc	r24, 0
    27e4:	24 c0       	rjmp	.+72     	; 0x282e <_Z9CDC_SetupR8USBSetup+0xde>
    27e6:	ee 3f       	cpi	r30, 0xFE	; 254
    27e8:	8a e0       	ldi	r24, 0x0A	; 10
    27ea:	f8 07       	cpc	r31, r24
    27ec:	51 f0       	breq	.+20     	; 0x2802 <_Z9CDC_SetupR8USBSetup+0xb2>
    27ee:	80 81       	ld	r24, Z
    27f0:	91 81       	ldd	r25, Z+1	; 0x01
    27f2:	87 37       	cpi	r24, 0x77	; 119
    27f4:	27 e7       	ldi	r18, 0x77	; 119
    27f6:	92 07       	cpc	r25, r18
    27f8:	21 f0       	breq	.+8      	; 0x2802 <_Z9CDC_SetupR8USBSetup+0xb2>
    27fa:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x61d>
    27fe:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x61c>
    2802:	87 e7       	ldi	r24, 0x77	; 119
    2804:	97 e7       	ldi	r25, 0x77	; 119
    2806:	91 83       	std	Z+1, r25	; 0x01
    2808:	80 83       	st	Z, r24
    280a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    280e:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <_ZL11wdtcsr_save>
    2812:	9b e0       	ldi	r25, 0x0B	; 11
    2814:	88 e1       	ldi	r24, 0x18	; 24
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	a8 95       	wdr
    281c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2820:	0f be       	out	0x3f, r0	; 63
    2822:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	08 95       	ret
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	08 95       	ret
    282e:	80 81       	ld	r24, Z
    2830:	91 81       	ldd	r25, Z+1	; 0x01
    2832:	87 37       	cpi	r24, 0x77	; 119
    2834:	97 47       	sbci	r25, 0x77	; 119
    2836:	b9 f7       	brne	.-18     	; 0x2826 <_Z9CDC_SetupR8USBSetup+0xd6>
    2838:	a8 95       	wdr
    283a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    283e:	88 61       	ori	r24, 0x18	; 24
    2840:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    2844:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <_ZL11wdtcsr_save>
    2848:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    284c:	ee 3f       	cpi	r30, 0xFE	; 254
    284e:	8a e0       	ldi	r24, 0x0A	; 10
    2850:	f8 07       	cpc	r31, r24
    2852:	39 f0       	breq	.+14     	; 0x2862 <_Z9CDC_SetupR8USBSetup+0x112>
    2854:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x61c>
    2858:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x61d>
    285c:	91 83       	std	Z+1, r25	; 0x01
    285e:	80 83       	st	Z, r24
    2860:	e2 cf       	rjmp	.-60     	; 0x2826 <_Z9CDC_SetupR8USBSetup+0xd6>
    2862:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x61d>
    2866:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x61c>
    286a:	dd cf       	rjmp	.-70     	; 0x2826 <_Z9CDC_SetupR8USBSetup+0xd6>

0000286c <_GLOBAL__sub_I__cdcInterface>:
    286c:	e1 e8       	ldi	r30, 0x81	; 129
    286e:	f4 e0       	ldi	r31, 0x04	; 4
    2870:	13 82       	std	Z+3, r1	; 0x03
    2872:	12 82       	std	Z+2, r1	; 0x02
    2874:	88 ee       	ldi	r24, 0xE8	; 232
    2876:	93 e0       	ldi	r25, 0x03	; 3
    2878:	a0 e0       	ldi	r26, 0x00	; 0
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	84 83       	std	Z+4, r24	; 0x04
    287e:	95 83       	std	Z+5, r25	; 0x05
    2880:	a6 83       	std	Z+6, r26	; 0x06
    2882:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    2884:	87 e7       	ldi	r24, 0x77	; 119
    2886:	92 e0       	ldi	r25, 0x02	; 2
    2888:	91 83       	std	Z+1, r25	; 0x01
    288a:	80 83       	st	Z, r24
    288c:	8f ef       	ldi	r24, 0xFF	; 255
    288e:	9f ef       	ldi	r25, 0xFF	; 255
    2890:	95 87       	std	Z+13, r25	; 0x0d
    2892:	84 87       	std	Z+12, r24	; 0x0c
    2894:	08 95       	ret

00002896 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2896:	08 95       	ret

00002898 <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    2898:	ef 92       	push	r14
    289a:	ff 92       	push	r15
    289c:	0f 93       	push	r16
    289e:	1f 93       	push	r17
    28a0:	cf 93       	push	r28
    28a2:	df 93       	push	r29
    28a4:	7b 01       	movw	r14, r22
    28a6:	fc 01       	movw	r30, r24
    28a8:	c2 81       	ldd	r28, Z+2	; 0x02
    28aa:	d3 81       	ldd	r29, Z+3	; 0x03
    28ac:	00 e0       	ldi	r16, 0x00	; 0
    28ae:	10 e0       	ldi	r17, 0x00	; 0
    28b0:	20 97       	sbiw	r28, 0x00	; 0
    28b2:	81 f0       	breq	.+32     	; 0x28d4 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    28b4:	e8 81       	ld	r30, Y
    28b6:	f9 81       	ldd	r31, Y+1	; 0x01
    28b8:	02 80       	ldd	r0, Z+2	; 0x02
    28ba:	f3 81       	ldd	r31, Z+3	; 0x03
    28bc:	e0 2d       	mov	r30, r0
    28be:	b7 01       	movw	r22, r14
    28c0:	ce 01       	movw	r24, r28
    28c2:	09 95       	icall
    28c4:	97 fd       	sbrc	r25, 7
    28c6:	08 c0       	rjmp	.+16     	; 0x28d8 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    28c8:	08 0f       	add	r16, r24
    28ca:	19 1f       	adc	r17, r25
    28cc:	08 84       	ldd	r0, Y+8	; 0x08
    28ce:	d9 85       	ldd	r29, Y+9	; 0x09
    28d0:	c0 2d       	mov	r28, r0
    28d2:	ee cf       	rjmp	.-36     	; 0x28b0 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    28d4:	c8 01       	movw	r24, r16
    28d6:	02 c0       	rjmp	.+4      	; 0x28dc <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    28d8:	8f ef       	ldi	r24, 0xFF	; 255
    28da:	9f ef       	ldi	r25, 0xFF	; 255
    28dc:	df 91       	pop	r29
    28de:	cf 91       	pop	r28
    28e0:	1f 91       	pop	r17
    28e2:	0f 91       	pop	r16
    28e4:	ff 90       	pop	r15
    28e6:	ef 90       	pop	r14
    28e8:	08 95       	ret

000028ea <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    28ea:	0f 93       	push	r16
    28ec:	1f 93       	push	r17
    28ee:	cf 93       	push	r28
    28f0:	df 93       	push	r29
    28f2:	8b 01       	movw	r16, r22
    28f4:	fc 01       	movw	r30, r24
    28f6:	c2 81       	ldd	r28, Z+2	; 0x02
    28f8:	d3 81       	ldd	r29, Z+3	; 0x03
    28fa:	20 97       	sbiw	r28, 0x00	; 0
    28fc:	71 f0       	breq	.+28     	; 0x291a <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    28fe:	e8 81       	ld	r30, Y
    2900:	f9 81       	ldd	r31, Y+1	; 0x01
    2902:	04 80       	ldd	r0, Z+4	; 0x04
    2904:	f5 81       	ldd	r31, Z+5	; 0x05
    2906:	e0 2d       	mov	r30, r0
    2908:	b8 01       	movw	r22, r16
    290a:	ce 01       	movw	r24, r28
    290c:	09 95       	icall
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	31 f4       	brne	.+12     	; 0x291e <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    2912:	08 84       	ldd	r0, Y+8	; 0x08
    2914:	d9 85       	ldd	r29, Y+9	; 0x09
    2916:	c0 2d       	mov	r28, r0
    2918:	f0 cf       	rjmp	.-32     	; 0x28fa <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	1f 91       	pop	r17
    2924:	0f 91       	pop	r16
    2926:	08 95       	ret

00002928 <_ZN13PluggableUSB_12getShortNameEPc>:
    2928:	0f 93       	push	r16
    292a:	1f 93       	push	r17
    292c:	cf 93       	push	r28
    292e:	df 93       	push	r29
    2930:	8b 01       	movw	r16, r22
    2932:	fc 01       	movw	r30, r24
    2934:	c2 81       	ldd	r28, Z+2	; 0x02
    2936:	d3 81       	ldd	r29, Z+3	; 0x03
    2938:	20 97       	sbiw	r28, 0x00	; 0
    293a:	71 f0       	breq	.+28     	; 0x2958 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    293c:	e8 81       	ld	r30, Y
    293e:	f9 81       	ldd	r31, Y+1	; 0x01
    2940:	06 80       	ldd	r0, Z+6	; 0x06
    2942:	f7 81       	ldd	r31, Z+7	; 0x07
    2944:	e0 2d       	mov	r30, r0
    2946:	b8 01       	movw	r22, r16
    2948:	ce 01       	movw	r24, r28
    294a:	09 95       	icall
    294c:	08 0f       	add	r16, r24
    294e:	11 1d       	adc	r17, r1
    2950:	08 84       	ldd	r0, Y+8	; 0x08
    2952:	d9 85       	ldd	r29, Y+9	; 0x09
    2954:	c0 2d       	mov	r28, r0
    2956:	f0 cf       	rjmp	.-32     	; 0x2938 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    2958:	f8 01       	movw	r30, r16
    295a:	10 82       	st	Z, r1
    295c:	df 91       	pop	r29
    295e:	cf 91       	pop	r28
    2960:	1f 91       	pop	r17
    2962:	0f 91       	pop	r16
    2964:	08 95       	ret

00002966 <_ZN13PluggableUSB_5setupER8USBSetup>:
    2966:	0f 93       	push	r16
    2968:	1f 93       	push	r17
    296a:	cf 93       	push	r28
    296c:	df 93       	push	r29
    296e:	8b 01       	movw	r16, r22
    2970:	fc 01       	movw	r30, r24
    2972:	c2 81       	ldd	r28, Z+2	; 0x02
    2974:	d3 81       	ldd	r29, Z+3	; 0x03
    2976:	20 97       	sbiw	r28, 0x00	; 0
    2978:	71 f0       	breq	.+28     	; 0x2996 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    297a:	e8 81       	ld	r30, Y
    297c:	f9 81       	ldd	r31, Y+1	; 0x01
    297e:	01 90       	ld	r0, Z+
    2980:	f0 81       	ld	r31, Z
    2982:	e0 2d       	mov	r30, r0
    2984:	b8 01       	movw	r22, r16
    2986:	ce 01       	movw	r24, r28
    2988:	09 95       	icall
    298a:	81 11       	cpse	r24, r1
    298c:	05 c0       	rjmp	.+10     	; 0x2998 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    298e:	08 84       	ldd	r0, Y+8	; 0x08
    2990:	d9 85       	ldd	r29, Y+9	; 0x09
    2992:	c0 2d       	mov	r28, r0
    2994:	f0 cf       	rjmp	.-32     	; 0x2976 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	1f 91       	pop	r17
    299e:	0f 91       	pop	r16
    29a0:	08 95       	ret

000029a2 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    29a2:	80 91 d6 04 	lds	r24, 0x04D6	; 0x8004d6 <_ZGVZ12PluggableUSBvE3obj>
    29a6:	81 11       	cpse	r24, r1
    29a8:	0d c0       	rjmp	.+26     	; 0x29c4 <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    29aa:	82 e0       	ldi	r24, 0x02	; 2
    29ac:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <_ZZ12PluggableUSBvE3obj>
    29b0:	84 e0       	ldi	r24, 0x04	; 4
    29b2:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <_ZZ12PluggableUSBvE3obj+0x1>
    29b6:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <_ZZ12PluggableUSBvE3obj+0x3>
    29ba:	10 92 d4 04 	sts	0x04D4, r1	; 0x8004d4 <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	80 93 d6 04 	sts	0x04D6, r24	; 0x8004d6 <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    29c4:	82 ed       	ldi	r24, 0xD2	; 210
    29c6:	94 e0       	ldi	r25, 0x04	; 4
    29c8:	08 95       	ret

000029ca <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    29ca:	08 95       	ret

000029cc <attachInterrupt>:
    29cc:	85 30       	cpi	r24, 0x05	; 5
    29ce:	08 f0       	brcs	.+2      	; 0x29d2 <attachInterrupt+0x6>
    29d0:	4c c0       	rjmp	.+152    	; 0x2a6a <attachInterrupt+0x9e>
    29d2:	e8 2f       	mov	r30, r24
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	ee 0f       	add	r30, r30
    29d8:	ff 1f       	adc	r31, r31
    29da:	e2 5e       	subi	r30, 0xE2	; 226
    29dc:	fe 4f       	sbci	r31, 0xFE	; 254
    29de:	71 83       	std	Z+1, r23	; 0x01
    29e0:	60 83       	st	Z, r22
    29e2:	82 30       	cpi	r24, 0x02	; 2
    29e4:	e1 f0       	breq	.+56     	; 0x2a1e <attachInterrupt+0x52>
    29e6:	18 f4       	brcc	.+6      	; 0x29ee <attachInterrupt+0x22>
    29e8:	81 30       	cpi	r24, 0x01	; 1
    29ea:	69 f0       	breq	.+26     	; 0x2a06 <attachInterrupt+0x3a>
    29ec:	04 c0       	rjmp	.+8      	; 0x29f6 <attachInterrupt+0x2a>
    29ee:	83 30       	cpi	r24, 0x03	; 3
    29f0:	19 f1       	breq	.+70     	; 0x2a38 <attachInterrupt+0x6c>
    29f2:	84 30       	cpi	r24, 0x04	; 4
    29f4:	71 f1       	breq	.+92     	; 0x2a52 <attachInterrupt+0x86>
    29f6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    29fa:	8c 7f       	andi	r24, 0xFC	; 252
    29fc:	48 2b       	or	r20, r24
    29fe:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2a02:	e8 9a       	sbi	0x1d, 0	; 29
    2a04:	08 95       	ret
    2a06:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2a0a:	83 7f       	andi	r24, 0xF3	; 243
    2a0c:	44 0f       	add	r20, r20
    2a0e:	55 1f       	adc	r21, r21
    2a10:	44 0f       	add	r20, r20
    2a12:	55 1f       	adc	r21, r21
    2a14:	48 2b       	or	r20, r24
    2a16:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2a1a:	e9 9a       	sbi	0x1d, 1	; 29
    2a1c:	08 95       	ret
    2a1e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2a22:	8f 7c       	andi	r24, 0xCF	; 207
    2a24:	34 e0       	ldi	r19, 0x04	; 4
    2a26:	44 0f       	add	r20, r20
    2a28:	55 1f       	adc	r21, r21
    2a2a:	3a 95       	dec	r19
    2a2c:	e1 f7       	brne	.-8      	; 0x2a26 <attachInterrupt+0x5a>
    2a2e:	48 2b       	or	r20, r24
    2a30:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2a34:	ea 9a       	sbi	0x1d, 2	; 29
    2a36:	08 95       	ret
    2a38:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2a3c:	8f 73       	andi	r24, 0x3F	; 63
    2a3e:	26 e0       	ldi	r18, 0x06	; 6
    2a40:	44 0f       	add	r20, r20
    2a42:	55 1f       	adc	r21, r21
    2a44:	2a 95       	dec	r18
    2a46:	e1 f7       	brne	.-8      	; 0x2a40 <attachInterrupt+0x74>
    2a48:	48 2b       	or	r20, r24
    2a4a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2a4e:	eb 9a       	sbi	0x1d, 3	; 29
    2a50:	08 95       	ret
    2a52:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f806a>
    2a56:	8f 7c       	andi	r24, 0xCF	; 207
    2a58:	94 e0       	ldi	r25, 0x04	; 4
    2a5a:	44 0f       	add	r20, r20
    2a5c:	55 1f       	adc	r21, r21
    2a5e:	9a 95       	dec	r25
    2a60:	e1 f7       	brne	.-8      	; 0x2a5a <attachInterrupt+0x8e>
    2a62:	48 2b       	or	r20, r24
    2a64:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f806a>
    2a68:	ee 9a       	sbi	0x1d, 6	; 29
    2a6a:	08 95       	ret

00002a6c <__vector_1>:
    intFunc[interrupt](); \
  }

#if defined(__AVR_ATmega32U4__)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    2a6c:	1f 92       	push	r1
    2a6e:	0f 92       	push	r0
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	0f 92       	push	r0
    2a74:	11 24       	eor	r1, r1
    2a76:	2f 93       	push	r18
    2a78:	3f 93       	push	r19
    2a7a:	4f 93       	push	r20
    2a7c:	5f 93       	push	r21
    2a7e:	6f 93       	push	r22
    2a80:	7f 93       	push	r23
    2a82:	8f 93       	push	r24
    2a84:	9f 93       	push	r25
    2a86:	af 93       	push	r26
    2a88:	bf 93       	push	r27
    2a8a:	ef 93       	push	r30
    2a8c:	ff 93       	push	r31
    2a8e:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <intFunc>
    2a92:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <intFunc+0x1>
    2a96:	09 95       	icall
    2a98:	ff 91       	pop	r31
    2a9a:	ef 91       	pop	r30
    2a9c:	bf 91       	pop	r27
    2a9e:	af 91       	pop	r26
    2aa0:	9f 91       	pop	r25
    2aa2:	8f 91       	pop	r24
    2aa4:	7f 91       	pop	r23
    2aa6:	6f 91       	pop	r22
    2aa8:	5f 91       	pop	r21
    2aaa:	4f 91       	pop	r20
    2aac:	3f 91       	pop	r19
    2aae:	2f 91       	pop	r18
    2ab0:	0f 90       	pop	r0
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	0f 90       	pop	r0
    2ab6:	1f 90       	pop	r1
    2ab8:	18 95       	reti

00002aba <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    2aba:	1f 92       	push	r1
    2abc:	0f 92       	push	r0
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	0f 92       	push	r0
    2ac2:	11 24       	eor	r1, r1
    2ac4:	2f 93       	push	r18
    2ac6:	3f 93       	push	r19
    2ac8:	4f 93       	push	r20
    2aca:	5f 93       	push	r21
    2acc:	6f 93       	push	r22
    2ace:	7f 93       	push	r23
    2ad0:	8f 93       	push	r24
    2ad2:	9f 93       	push	r25
    2ad4:	af 93       	push	r26
    2ad6:	bf 93       	push	r27
    2ad8:	ef 93       	push	r30
    2ada:	ff 93       	push	r31
    2adc:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <intFunc+0x2>
    2ae0:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <intFunc+0x3>
    2ae4:	09 95       	icall
    2ae6:	ff 91       	pop	r31
    2ae8:	ef 91       	pop	r30
    2aea:	bf 91       	pop	r27
    2aec:	af 91       	pop	r26
    2aee:	9f 91       	pop	r25
    2af0:	8f 91       	pop	r24
    2af2:	7f 91       	pop	r23
    2af4:	6f 91       	pop	r22
    2af6:	5f 91       	pop	r21
    2af8:	4f 91       	pop	r20
    2afa:	3f 91       	pop	r19
    2afc:	2f 91       	pop	r18
    2afe:	0f 90       	pop	r0
    2b00:	0f be       	out	0x3f, r0	; 63
    2b02:	0f 90       	pop	r0
    2b04:	1f 90       	pop	r1
    2b06:	18 95       	reti

00002b08 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
    2b08:	1f 92       	push	r1
    2b0a:	0f 92       	push	r0
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	0f 92       	push	r0
    2b10:	11 24       	eor	r1, r1
    2b12:	2f 93       	push	r18
    2b14:	3f 93       	push	r19
    2b16:	4f 93       	push	r20
    2b18:	5f 93       	push	r21
    2b1a:	6f 93       	push	r22
    2b1c:	7f 93       	push	r23
    2b1e:	8f 93       	push	r24
    2b20:	9f 93       	push	r25
    2b22:	af 93       	push	r26
    2b24:	bf 93       	push	r27
    2b26:	ef 93       	push	r30
    2b28:	ff 93       	push	r31
    2b2a:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <intFunc+0x4>
    2b2e:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <intFunc+0x5>
    2b32:	09 95       	icall
    2b34:	ff 91       	pop	r31
    2b36:	ef 91       	pop	r30
    2b38:	bf 91       	pop	r27
    2b3a:	af 91       	pop	r26
    2b3c:	9f 91       	pop	r25
    2b3e:	8f 91       	pop	r24
    2b40:	7f 91       	pop	r23
    2b42:	6f 91       	pop	r22
    2b44:	5f 91       	pop	r21
    2b46:	4f 91       	pop	r20
    2b48:	3f 91       	pop	r19
    2b4a:	2f 91       	pop	r18
    2b4c:	0f 90       	pop	r0
    2b4e:	0f be       	out	0x3f, r0	; 63
    2b50:	0f 90       	pop	r0
    2b52:	1f 90       	pop	r1
    2b54:	18 95       	reti

00002b56 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
    2b56:	1f 92       	push	r1
    2b58:	0f 92       	push	r0
    2b5a:	0f b6       	in	r0, 0x3f	; 63
    2b5c:	0f 92       	push	r0
    2b5e:	11 24       	eor	r1, r1
    2b60:	2f 93       	push	r18
    2b62:	3f 93       	push	r19
    2b64:	4f 93       	push	r20
    2b66:	5f 93       	push	r21
    2b68:	6f 93       	push	r22
    2b6a:	7f 93       	push	r23
    2b6c:	8f 93       	push	r24
    2b6e:	9f 93       	push	r25
    2b70:	af 93       	push	r26
    2b72:	bf 93       	push	r27
    2b74:	ef 93       	push	r30
    2b76:	ff 93       	push	r31
    2b78:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <intFunc+0x6>
    2b7c:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <intFunc+0x7>
    2b80:	09 95       	icall
    2b82:	ff 91       	pop	r31
    2b84:	ef 91       	pop	r30
    2b86:	bf 91       	pop	r27
    2b88:	af 91       	pop	r26
    2b8a:	9f 91       	pop	r25
    2b8c:	8f 91       	pop	r24
    2b8e:	7f 91       	pop	r23
    2b90:	6f 91       	pop	r22
    2b92:	5f 91       	pop	r21
    2b94:	4f 91       	pop	r20
    2b96:	3f 91       	pop	r19
    2b98:	2f 91       	pop	r18
    2b9a:	0f 90       	pop	r0
    2b9c:	0f be       	out	0x3f, r0	; 63
    2b9e:	0f 90       	pop	r0
    2ba0:	1f 90       	pop	r1
    2ba2:	18 95       	reti

00002ba4 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)
    2ba4:	1f 92       	push	r1
    2ba6:	0f 92       	push	r0
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	0f 92       	push	r0
    2bac:	11 24       	eor	r1, r1
    2bae:	2f 93       	push	r18
    2bb0:	3f 93       	push	r19
    2bb2:	4f 93       	push	r20
    2bb4:	5f 93       	push	r21
    2bb6:	6f 93       	push	r22
    2bb8:	7f 93       	push	r23
    2bba:	8f 93       	push	r24
    2bbc:	9f 93       	push	r25
    2bbe:	af 93       	push	r26
    2bc0:	bf 93       	push	r27
    2bc2:	ef 93       	push	r30
    2bc4:	ff 93       	push	r31
    2bc6:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <intFunc+0x8>
    2bca:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <intFunc+0x9>
    2bce:	09 95       	icall
    2bd0:	ff 91       	pop	r31
    2bd2:	ef 91       	pop	r30
    2bd4:	bf 91       	pop	r27
    2bd6:	af 91       	pop	r26
    2bd8:	9f 91       	pop	r25
    2bda:	8f 91       	pop	r24
    2bdc:	7f 91       	pop	r23
    2bde:	6f 91       	pop	r22
    2be0:	5f 91       	pop	r21
    2be2:	4f 91       	pop	r20
    2be4:	3f 91       	pop	r19
    2be6:	2f 91       	pop	r18
    2be8:	0f 90       	pop	r0
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	0f 90       	pop	r0
    2bee:	1f 90       	pop	r1
    2bf0:	18 95       	reti

00002bf2 <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
    2bf2:	cf 92       	push	r12
    2bf4:	df 92       	push	r13
    2bf6:	ef 92       	push	r14
    2bf8:	ff 92       	push	r15
  if (howbig == 0) {
    2bfa:	61 15       	cp	r22, r1
    2bfc:	71 05       	cpc	r23, r1
    2bfe:	81 05       	cpc	r24, r1
    2c00:	91 05       	cpc	r25, r1
    2c02:	49 f0       	breq	.+18     	; 0x2c16 <_Z6randoml+0x24>
    2c04:	6b 01       	movw	r12, r22
    2c06:	7c 01       	movw	r14, r24
    return 0;
  }
  return random() % howbig;
    2c08:	0e 94 8e 1a 	call	0x351c	; 0x351c <random>
    2c0c:	a7 01       	movw	r20, r14
    2c0e:	96 01       	movw	r18, r12
    2c10:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__divmodsi4>
    2c14:	03 c0       	rjmp	.+6      	; 0x2c1c <_Z6randoml+0x2a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    2c16:	60 e0       	ldi	r22, 0x00	; 0
    2c18:	70 e0       	ldi	r23, 0x00	; 0
    2c1a:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
    2c1c:	ff 90       	pop	r15
    2c1e:	ef 90       	pop	r14
    2c20:	df 90       	pop	r13
    2c22:	cf 90       	pop	r12
    2c24:	08 95       	ret

00002c26 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    2c26:	cf 92       	push	r12
    2c28:	df 92       	push	r13
    2c2a:	ef 92       	push	r14
    2c2c:	ff 92       	push	r15
    2c2e:	0f 93       	push	r16
    2c30:	1f 93       	push	r17
  if (howsmall >= howbig) {
    2c32:	62 17       	cp	r22, r18
    2c34:	73 07       	cpc	r23, r19
    2c36:	84 07       	cpc	r24, r20
    2c38:	95 07       	cpc	r25, r21
    2c3a:	84 f4       	brge	.+32     	; 0x2c5c <_Z6randomll+0x36>
    2c3c:	89 01       	movw	r16, r18
    2c3e:	9a 01       	movw	r18, r20
    2c40:	6b 01       	movw	r12, r22
    2c42:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    2c44:	c9 01       	movw	r24, r18
    2c46:	b8 01       	movw	r22, r16
    2c48:	6c 19       	sub	r22, r12
    2c4a:	7d 09       	sbc	r23, r13
    2c4c:	8e 09       	sbc	r24, r14
    2c4e:	9f 09       	sbc	r25, r15
    2c50:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <_Z6randoml>
    2c54:	6c 0d       	add	r22, r12
    2c56:	7d 1d       	adc	r23, r13
    2c58:	8e 1d       	adc	r24, r14
    2c5a:	9f 1d       	adc	r25, r15
}
    2c5c:	1f 91       	pop	r17
    2c5e:	0f 91       	pop	r16
    2c60:	ff 90       	pop	r15
    2c62:	ef 90       	pop	r14
    2c64:	df 90       	pop	r13
    2c66:	cf 90       	pop	r12
    2c68:	08 95       	ret

00002c6a <_ZN12RHGenericSPI15attachInterruptEv>:
    virtual uint8_t transfer(uint8_t data) = 0;

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
    2c6a:	08 95       	ret

00002c6c <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
    2c6c:	08 95       	ret

00002c6e <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
    2c6e:	08 95       	ret

00002c70 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
    2c70:	08 95       	ret

00002c72 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Tells the SPI support software that SPI transactions will occur with the interrupt
    /// handler assocated with interruptNumber
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){}
    2c72:	08 95       	ret

00002c74 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
    2c74:	fc 01       	movw	r30, r24
    2c76:	63 83       	std	Z+3, r22	; 0x03
    2c78:	08 95       	ret

00002c7a <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:
}

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	64 83       	std	Z+4, r22	; 0x04
    2c7e:	08 95       	ret

00002c80 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:
}

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
    2c80:	fc 01       	movw	r30, r24
    2c82:	62 83       	std	Z+2, r22	; 0x02
    2c84:	08 95       	ret

00002c86 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
// Contributed by Joanna Rutkowska
// $Id: RHGenericSPI.cpp,v 1.2 2014/04/12 05:26:05 mikem Exp $

#include <RHGenericSPI.h>

RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
    2c86:	fc 01       	movw	r30, r24
    :
    _frequency(frequency),
    _bitOrder(bitOrder),
    _dataMode(dataMode)
    2c88:	89 e8       	ldi	r24, 0x89	; 137
    2c8a:	92 e0       	ldi	r25, 0x02	; 2
    2c8c:	91 83       	std	Z+1, r25	; 0x01
    2c8e:	80 83       	st	Z, r24
    2c90:	62 83       	std	Z+2, r22	; 0x02
    2c92:	43 83       	std	Z+3, r20	; 0x03
    2c94:	24 83       	std	Z+4, r18	; 0x04
    2c96:	08 95       	ret

00002c98 <_ZN11RHSPIDriver4initEv>:
    return status;
}

void RHSPIDriver::setSlaveSelectPin(uint8_t slaveSelectPin)
{
    _slaveSelectPin = slaveSelectPin;
    2c98:	cf 93       	push	r28
    2c9a:	df 93       	push	r29
    2c9c:	ec 01       	movw	r28, r24
    2c9e:	88 8d       	ldd	r24, Y+24	; 0x18
    2ca0:	99 8d       	ldd	r25, Y+25	; 0x19
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	ed 91       	ld	r30, X+
    2ca6:	fc 91       	ld	r31, X
    2ca8:	06 80       	ldd	r0, Z+6	; 0x06
    2caa:	f7 81       	ldd	r31, Z+7	; 0x07
    2cac:	e0 2d       	mov	r30, r0
    2cae:	09 95       	icall
    2cb0:	61 e0       	ldi	r22, 0x01	; 1
    2cb2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cb4:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <pinMode>
    2cb8:	61 e0       	ldi	r22, 0x01	; 1
    2cba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2cbc:	0e 94 9c 0b 	call	0x1738	; 0x1738 <digitalWrite>
    2cc0:	64 e6       	ldi	r22, 0x64	; 100
    2cc2:	70 e0       	ldi	r23, 0x00	; 0
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	0e 94 91 0a 	call	0x1522	; 0x1522 <delay>
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	08 95       	ret

00002cd4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
    2cd4:	ef 92       	push	r14
    2cd6:	ff 92       	push	r15
    2cd8:	1f 93       	push	r17
    2cda:	cf 93       	push	r28
    2cdc:	df 93       	push	r29
    2cde:	ec 01       	movw	r28, r24
    2ce0:	16 2f       	mov	r17, r22
    2ce2:	7a 01       	movw	r14, r20
    2ce4:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <_ZN15RHGenericDriverC1Ev>
    2ce8:	83 ea       	ldi	r24, 0xA3	; 163
    2cea:	92 e0       	ldi	r25, 0x02	; 2
    2cec:	99 83       	std	Y+1, r25	; 0x01
    2cee:	88 83       	st	Y, r24
    2cf0:	f9 8e       	std	Y+25, r15	; 0x19
    2cf2:	e8 8e       	std	Y+24, r14	; 0x18
    2cf4:	1a 8f       	std	Y+26, r17	; 0x1a
    2cf6:	df 91       	pop	r29
    2cf8:	cf 91       	pop	r28
    2cfa:	1f 91       	pop	r17
    2cfc:	ff 90       	pop	r15
    2cfe:	ef 90       	pop	r14
    2d00:	08 95       	ret

00002d02 <_ZN11RHSPIDriver7spiReadEh>:
    2d02:	0f 93       	push	r16
    2d04:	1f 93       	push	r17
    2d06:	cf 93       	push	r28
    2d08:	df 93       	push	r29
    2d0a:	ec 01       	movw	r28, r24
    2d0c:	16 2f       	mov	r17, r22
    2d0e:	0f b7       	in	r16, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	88 8d       	ldd	r24, Y+24	; 0x18
    2d14:	99 8d       	ldd	r25, Y+25	; 0x19
    2d16:	dc 01       	movw	r26, r24
    2d18:	ed 91       	ld	r30, X+
    2d1a:	fc 91       	ld	r31, X
    2d1c:	00 88       	ldd	r0, Z+16	; 0x10
    2d1e:	f1 89       	ldd	r31, Z+17	; 0x11
    2d20:	e0 2d       	mov	r30, r0
    2d22:	09 95       	icall
    2d24:	60 e0       	ldi	r22, 0x00	; 0
    2d26:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d28:	0e 94 9c 0b 	call	0x1738	; 0x1738 <digitalWrite>
    2d2c:	88 8d       	ldd	r24, Y+24	; 0x18
    2d2e:	99 8d       	ldd	r25, Y+25	; 0x19
    2d30:	61 2f       	mov	r22, r17
    2d32:	6f 77       	andi	r22, 0x7F	; 127
    2d34:	dc 01       	movw	r26, r24
    2d36:	ed 91       	ld	r30, X+
    2d38:	fc 91       	ld	r31, X
    2d3a:	01 90       	ld	r0, Z+
    2d3c:	f0 81       	ld	r31, Z
    2d3e:	e0 2d       	mov	r30, r0
    2d40:	09 95       	icall
    2d42:	88 8d       	ldd	r24, Y+24	; 0x18
    2d44:	99 8d       	ldd	r25, Y+25	; 0x19
    2d46:	dc 01       	movw	r26, r24
    2d48:	ed 91       	ld	r30, X+
    2d4a:	fc 91       	ld	r31, X
    2d4c:	01 90       	ld	r0, Z+
    2d4e:	f0 81       	ld	r31, Z
    2d50:	e0 2d       	mov	r30, r0
    2d52:	60 e0       	ldi	r22, 0x00	; 0
    2d54:	09 95       	icall
    2d56:	18 2f       	mov	r17, r24
    2d58:	61 e0       	ldi	r22, 0x01	; 1
    2d5a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d5c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <digitalWrite>
    2d60:	88 8d       	ldd	r24, Y+24	; 0x18
    2d62:	99 8d       	ldd	r25, Y+25	; 0x19
    2d64:	dc 01       	movw	r26, r24
    2d66:	ed 91       	ld	r30, X+
    2d68:	fc 91       	ld	r31, X
    2d6a:	02 88       	ldd	r0, Z+18	; 0x12
    2d6c:	f3 89       	ldd	r31, Z+19	; 0x13
    2d6e:	e0 2d       	mov	r30, r0
    2d70:	09 95       	icall
    2d72:	0f bf       	out	0x3f, r16	; 63
    2d74:	81 2f       	mov	r24, r17
    2d76:	df 91       	pop	r29
    2d78:	cf 91       	pop	r28
    2d7a:	1f 91       	pop	r17
    2d7c:	0f 91       	pop	r16
    2d7e:	08 95       	ret

00002d80 <_ZN11RHSPIDriver8spiWriteEhh>:
    2d80:	ff 92       	push	r15
    2d82:	0f 93       	push	r16
    2d84:	1f 93       	push	r17
    2d86:	cf 93       	push	r28
    2d88:	df 93       	push	r29
    2d8a:	ec 01       	movw	r28, r24
    2d8c:	16 2f       	mov	r17, r22
    2d8e:	f4 2e       	mov	r15, r20
    2d90:	0f b7       	in	r16, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	88 8d       	ldd	r24, Y+24	; 0x18
    2d96:	99 8d       	ldd	r25, Y+25	; 0x19
    2d98:	dc 01       	movw	r26, r24
    2d9a:	ed 91       	ld	r30, X+
    2d9c:	fc 91       	ld	r31, X
    2d9e:	00 88       	ldd	r0, Z+16	; 0x10
    2da0:	f1 89       	ldd	r31, Z+17	; 0x11
    2da2:	e0 2d       	mov	r30, r0
    2da4:	09 95       	icall
    2da6:	60 e0       	ldi	r22, 0x00	; 0
    2da8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2daa:	0e 94 9c 0b 	call	0x1738	; 0x1738 <digitalWrite>
    2dae:	88 8d       	ldd	r24, Y+24	; 0x18
    2db0:	99 8d       	ldd	r25, Y+25	; 0x19
    2db2:	61 2f       	mov	r22, r17
    2db4:	60 68       	ori	r22, 0x80	; 128
    2db6:	dc 01       	movw	r26, r24
    2db8:	ed 91       	ld	r30, X+
    2dba:	fc 91       	ld	r31, X
    2dbc:	01 90       	ld	r0, Z+
    2dbe:	f0 81       	ld	r31, Z
    2dc0:	e0 2d       	mov	r30, r0
    2dc2:	09 95       	icall
    2dc4:	18 2f       	mov	r17, r24
    2dc6:	88 8d       	ldd	r24, Y+24	; 0x18
    2dc8:	99 8d       	ldd	r25, Y+25	; 0x19
    2dca:	dc 01       	movw	r26, r24
    2dcc:	ed 91       	ld	r30, X+
    2dce:	fc 91       	ld	r31, X
    2dd0:	01 90       	ld	r0, Z+
    2dd2:	f0 81       	ld	r31, Z
    2dd4:	e0 2d       	mov	r30, r0
    2dd6:	6f 2d       	mov	r22, r15
    2dd8:	09 95       	icall
    2dda:	61 e0       	ldi	r22, 0x01	; 1
    2ddc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2dde:	0e 94 9c 0b 	call	0x1738	; 0x1738 <digitalWrite>
    2de2:	88 8d       	ldd	r24, Y+24	; 0x18
    2de4:	99 8d       	ldd	r25, Y+25	; 0x19
    2de6:	dc 01       	movw	r26, r24
    2de8:	ed 91       	ld	r30, X+
    2dea:	fc 91       	ld	r31, X
    2dec:	02 88       	ldd	r0, Z+18	; 0x12
    2dee:	f3 89       	ldd	r31, Z+19	; 0x13
    2df0:	e0 2d       	mov	r30, r0
    2df2:	09 95       	icall
    2df4:	0f bf       	out	0x3f, r16	; 63
    2df6:	81 2f       	mov	r24, r17
    2df8:	df 91       	pop	r29
    2dfa:	cf 91       	pop	r28
    2dfc:	1f 91       	pop	r17
    2dfe:	0f 91       	pop	r16
    2e00:	ff 90       	pop	r15
    2e02:	08 95       	ret

00002e04 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
    2e04:	bf 92       	push	r11
    2e06:	cf 92       	push	r12
    2e08:	df 92       	push	r13
    2e0a:	ef 92       	push	r14
    2e0c:	ff 92       	push	r15
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
    2e12:	cf 93       	push	r28
    2e14:	df 93       	push	r29
    2e16:	ec 01       	movw	r28, r24
    2e18:	06 2f       	mov	r16, r22
    2e1a:	b4 2e       	mov	r11, r20
    2e1c:	c5 2e       	mov	r12, r21
    2e1e:	12 2f       	mov	r17, r18
    2e20:	df b6       	in	r13, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	88 8d       	ldd	r24, Y+24	; 0x18
    2e26:	99 8d       	ldd	r25, Y+25	; 0x19
    2e28:	dc 01       	movw	r26, r24
    2e2a:	ed 91       	ld	r30, X+
    2e2c:	fc 91       	ld	r31, X
    2e2e:	00 88       	ldd	r0, Z+16	; 0x10
    2e30:	f1 89       	ldd	r31, Z+17	; 0x11
    2e32:	e0 2d       	mov	r30, r0
    2e34:	09 95       	icall
    2e36:	60 e0       	ldi	r22, 0x00	; 0
    2e38:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e3a:	0e 94 9c 0b 	call	0x1738	; 0x1738 <digitalWrite>
    2e3e:	88 8d       	ldd	r24, Y+24	; 0x18
    2e40:	99 8d       	ldd	r25, Y+25	; 0x19
    2e42:	60 2f       	mov	r22, r16
    2e44:	60 68       	ori	r22, 0x80	; 128
    2e46:	dc 01       	movw	r26, r24
    2e48:	ed 91       	ld	r30, X+
    2e4a:	fc 91       	ld	r31, X
    2e4c:	01 90       	ld	r0, Z+
    2e4e:	f0 81       	ld	r31, Z
    2e50:	e0 2d       	mov	r30, r0
    2e52:	09 95       	icall
    2e54:	08 2f       	mov	r16, r24
    2e56:	eb 2c       	mov	r14, r11
    2e58:	fc 2c       	mov	r15, r12
    2e5a:	11 23       	and	r17, r17
    2e5c:	71 f0       	breq	.+28     	; 0x2e7a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x76>
    2e5e:	88 8d       	ldd	r24, Y+24	; 0x18
    2e60:	99 8d       	ldd	r25, Y+25	; 0x19
    2e62:	f7 01       	movw	r30, r14
    2e64:	61 91       	ld	r22, Z+
    2e66:	7f 01       	movw	r14, r30
    2e68:	dc 01       	movw	r26, r24
    2e6a:	ed 91       	ld	r30, X+
    2e6c:	fc 91       	ld	r31, X
    2e6e:	01 90       	ld	r0, Z+
    2e70:	f0 81       	ld	r31, Z
    2e72:	e0 2d       	mov	r30, r0
    2e74:	09 95       	icall
    2e76:	11 50       	subi	r17, 0x01	; 1
    2e78:	f0 cf       	rjmp	.-32     	; 0x2e5a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x56>
    2e7a:	61 e0       	ldi	r22, 0x01	; 1
    2e7c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e7e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <digitalWrite>
    2e82:	88 8d       	ldd	r24, Y+24	; 0x18
    2e84:	99 8d       	ldd	r25, Y+25	; 0x19
    2e86:	dc 01       	movw	r26, r24
    2e88:	ed 91       	ld	r30, X+
    2e8a:	fc 91       	ld	r31, X
    2e8c:	02 88       	ldd	r0, Z+18	; 0x12
    2e8e:	f3 89       	ldd	r31, Z+19	; 0x13
    2e90:	e0 2d       	mov	r30, r0
    2e92:	09 95       	icall
    2e94:	df be       	out	0x3f, r13	; 63
    2e96:	80 2f       	mov	r24, r16
    2e98:	df 91       	pop	r29
    2e9a:	cf 91       	pop	r28
    2e9c:	1f 91       	pop	r17
    2e9e:	0f 91       	pop	r16
    2ea0:	ff 90       	pop	r15
    2ea2:	ef 90       	pop	r14
    2ea4:	df 90       	pop	r13
    2ea6:	cf 90       	pop	r12
    2ea8:	bf 90       	pop	r11
    2eaa:	08 95       	ret

00002eac <_ZN11RHSPIDriver17spiUsingInterruptEh>:
}

void RHSPIDriver::spiUsingInterrupt(uint8_t interruptNumber)
{
    _spi.usingInterrupt(interruptNumber);
    2eac:	dc 01       	movw	r26, r24
    2eae:	58 96       	adiw	r26, 0x18	; 24
    2eb0:	8d 91       	ld	r24, X+
    2eb2:	9c 91       	ld	r25, X
    2eb4:	59 97       	sbiw	r26, 0x19	; 25
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	ed 91       	ld	r30, X+
    2eba:	fc 91       	ld	r31, X
    2ebc:	04 88       	ldd	r0, Z+20	; 0x14
    2ebe:	f5 89       	ldd	r31, Z+21	; 0x15
    2ec0:	e0 2d       	mov	r30, r0
    2ec2:	09 94       	ijmp

00002ec4 <__divsf3>:
    2ec4:	0e 94 76 17 	call	0x2eec	; 0x2eec <__divsf3x>
    2ec8:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__fp_round>
    2ecc:	0e 94 13 18 	call	0x3026	; 0x3026 <__fp_pscB>
    2ed0:	58 f0       	brcs	.+22     	; 0x2ee8 <__divsf3+0x24>
    2ed2:	0e 94 0c 18 	call	0x3018	; 0x3018 <__fp_pscA>
    2ed6:	40 f0       	brcs	.+16     	; 0x2ee8 <__divsf3+0x24>
    2ed8:	29 f4       	brne	.+10     	; 0x2ee4 <__divsf3+0x20>
    2eda:	5f 3f       	cpi	r21, 0xFF	; 255
    2edc:	29 f0       	breq	.+10     	; 0x2ee8 <__divsf3+0x24>
    2ede:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__fp_inf>
    2ee2:	51 11       	cpse	r21, r1
    2ee4:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__fp_szero>
    2ee8:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__fp_nan>

00002eec <__divsf3x>:
    2eec:	0e 94 2b 18 	call	0x3056	; 0x3056 <__fp_split3>
    2ef0:	68 f3       	brcs	.-38     	; 0x2ecc <__divsf3+0x8>

00002ef2 <__divsf3_pse>:
    2ef2:	99 23       	and	r25, r25
    2ef4:	b1 f3       	breq	.-20     	; 0x2ee2 <__divsf3+0x1e>
    2ef6:	55 23       	and	r21, r21
    2ef8:	91 f3       	breq	.-28     	; 0x2ede <__divsf3+0x1a>
    2efa:	95 1b       	sub	r25, r21
    2efc:	55 0b       	sbc	r21, r21
    2efe:	bb 27       	eor	r27, r27
    2f00:	aa 27       	eor	r26, r26
    2f02:	62 17       	cp	r22, r18
    2f04:	73 07       	cpc	r23, r19
    2f06:	84 07       	cpc	r24, r20
    2f08:	38 f0       	brcs	.+14     	; 0x2f18 <__divsf3_pse+0x26>
    2f0a:	9f 5f       	subi	r25, 0xFF	; 255
    2f0c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f0e:	22 0f       	add	r18, r18
    2f10:	33 1f       	adc	r19, r19
    2f12:	44 1f       	adc	r20, r20
    2f14:	aa 1f       	adc	r26, r26
    2f16:	a9 f3       	breq	.-22     	; 0x2f02 <__divsf3_pse+0x10>
    2f18:	35 d0       	rcall	.+106    	; 0x2f84 <__divsf3_pse+0x92>
    2f1a:	0e 2e       	mov	r0, r30
    2f1c:	3a f0       	brmi	.+14     	; 0x2f2c <__divsf3_pse+0x3a>
    2f1e:	e0 e8       	ldi	r30, 0x80	; 128
    2f20:	32 d0       	rcall	.+100    	; 0x2f86 <__divsf3_pse+0x94>
    2f22:	91 50       	subi	r25, 0x01	; 1
    2f24:	50 40       	sbci	r21, 0x00	; 0
    2f26:	e6 95       	lsr	r30
    2f28:	00 1c       	adc	r0, r0
    2f2a:	ca f7       	brpl	.-14     	; 0x2f1e <__divsf3_pse+0x2c>
    2f2c:	2b d0       	rcall	.+86     	; 0x2f84 <__divsf3_pse+0x92>
    2f2e:	fe 2f       	mov	r31, r30
    2f30:	29 d0       	rcall	.+82     	; 0x2f84 <__divsf3_pse+0x92>
    2f32:	66 0f       	add	r22, r22
    2f34:	77 1f       	adc	r23, r23
    2f36:	88 1f       	adc	r24, r24
    2f38:	bb 1f       	adc	r27, r27
    2f3a:	26 17       	cp	r18, r22
    2f3c:	37 07       	cpc	r19, r23
    2f3e:	48 07       	cpc	r20, r24
    2f40:	ab 07       	cpc	r26, r27
    2f42:	b0 e8       	ldi	r27, 0x80	; 128
    2f44:	09 f0       	breq	.+2      	; 0x2f48 <__divsf3_pse+0x56>
    2f46:	bb 0b       	sbc	r27, r27
    2f48:	80 2d       	mov	r24, r0
    2f4a:	bf 01       	movw	r22, r30
    2f4c:	ff 27       	eor	r31, r31
    2f4e:	93 58       	subi	r25, 0x83	; 131
    2f50:	5f 4f       	sbci	r21, 0xFF	; 255
    2f52:	3a f0       	brmi	.+14     	; 0x2f62 <__divsf3_pse+0x70>
    2f54:	9e 3f       	cpi	r25, 0xFE	; 254
    2f56:	51 05       	cpc	r21, r1
    2f58:	78 f0       	brcs	.+30     	; 0x2f78 <__divsf3_pse+0x86>
    2f5a:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__fp_inf>
    2f5e:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__fp_szero>
    2f62:	5f 3f       	cpi	r21, 0xFF	; 255
    2f64:	e4 f3       	brlt	.-8      	; 0x2f5e <__divsf3_pse+0x6c>
    2f66:	98 3e       	cpi	r25, 0xE8	; 232
    2f68:	d4 f3       	brlt	.-12     	; 0x2f5e <__divsf3_pse+0x6c>
    2f6a:	86 95       	lsr	r24
    2f6c:	77 95       	ror	r23
    2f6e:	67 95       	ror	r22
    2f70:	b7 95       	ror	r27
    2f72:	f7 95       	ror	r31
    2f74:	9f 5f       	subi	r25, 0xFF	; 255
    2f76:	c9 f7       	brne	.-14     	; 0x2f6a <__divsf3_pse+0x78>
    2f78:	88 0f       	add	r24, r24
    2f7a:	91 1d       	adc	r25, r1
    2f7c:	96 95       	lsr	r25
    2f7e:	87 95       	ror	r24
    2f80:	97 f9       	bld	r25, 7
    2f82:	08 95       	ret
    2f84:	e1 e0       	ldi	r30, 0x01	; 1
    2f86:	66 0f       	add	r22, r22
    2f88:	77 1f       	adc	r23, r23
    2f8a:	88 1f       	adc	r24, r24
    2f8c:	bb 1f       	adc	r27, r27
    2f8e:	62 17       	cp	r22, r18
    2f90:	73 07       	cpc	r23, r19
    2f92:	84 07       	cpc	r24, r20
    2f94:	ba 07       	cpc	r27, r26
    2f96:	20 f0       	brcs	.+8      	; 0x2fa0 <__divsf3_pse+0xae>
    2f98:	62 1b       	sub	r22, r18
    2f9a:	73 0b       	sbc	r23, r19
    2f9c:	84 0b       	sbc	r24, r20
    2f9e:	ba 0b       	sbc	r27, r26
    2fa0:	ee 1f       	adc	r30, r30
    2fa2:	88 f7       	brcc	.-30     	; 0x2f86 <__divsf3_pse+0x94>
    2fa4:	e0 95       	com	r30
    2fa6:	08 95       	ret

00002fa8 <__fixunssfsi>:
    2fa8:	0e 94 33 18 	call	0x3066	; 0x3066 <__fp_splitA>
    2fac:	88 f0       	brcs	.+34     	; 0x2fd0 <__fixunssfsi+0x28>
    2fae:	9f 57       	subi	r25, 0x7F	; 127
    2fb0:	98 f0       	brcs	.+38     	; 0x2fd8 <__fixunssfsi+0x30>
    2fb2:	b9 2f       	mov	r27, r25
    2fb4:	99 27       	eor	r25, r25
    2fb6:	b7 51       	subi	r27, 0x17	; 23
    2fb8:	b0 f0       	brcs	.+44     	; 0x2fe6 <__fixunssfsi+0x3e>
    2fba:	e1 f0       	breq	.+56     	; 0x2ff4 <__fixunssfsi+0x4c>
    2fbc:	66 0f       	add	r22, r22
    2fbe:	77 1f       	adc	r23, r23
    2fc0:	88 1f       	adc	r24, r24
    2fc2:	99 1f       	adc	r25, r25
    2fc4:	1a f0       	brmi	.+6      	; 0x2fcc <__fixunssfsi+0x24>
    2fc6:	ba 95       	dec	r27
    2fc8:	c9 f7       	brne	.-14     	; 0x2fbc <__fixunssfsi+0x14>
    2fca:	14 c0       	rjmp	.+40     	; 0x2ff4 <__fixunssfsi+0x4c>
    2fcc:	b1 30       	cpi	r27, 0x01	; 1
    2fce:	91 f0       	breq	.+36     	; 0x2ff4 <__fixunssfsi+0x4c>
    2fd0:	0e 94 4d 18 	call	0x309a	; 0x309a <__fp_zero>
    2fd4:	b1 e0       	ldi	r27, 0x01	; 1
    2fd6:	08 95       	ret
    2fd8:	0c 94 4d 18 	jmp	0x309a	; 0x309a <__fp_zero>
    2fdc:	67 2f       	mov	r22, r23
    2fde:	78 2f       	mov	r23, r24
    2fe0:	88 27       	eor	r24, r24
    2fe2:	b8 5f       	subi	r27, 0xF8	; 248
    2fe4:	39 f0       	breq	.+14     	; 0x2ff4 <__fixunssfsi+0x4c>
    2fe6:	b9 3f       	cpi	r27, 0xF9	; 249
    2fe8:	cc f3       	brlt	.-14     	; 0x2fdc <__fixunssfsi+0x34>
    2fea:	86 95       	lsr	r24
    2fec:	77 95       	ror	r23
    2fee:	67 95       	ror	r22
    2ff0:	b3 95       	inc	r27
    2ff2:	d9 f7       	brne	.-10     	; 0x2fea <__fixunssfsi+0x42>
    2ff4:	3e f4       	brtc	.+14     	; 0x3004 <__fixunssfsi+0x5c>
    2ff6:	90 95       	com	r25
    2ff8:	80 95       	com	r24
    2ffa:	70 95       	com	r23
    2ffc:	61 95       	neg	r22
    2ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    3000:	8f 4f       	sbci	r24, 0xFF	; 255
    3002:	9f 4f       	sbci	r25, 0xFF	; 255
    3004:	08 95       	ret

00003006 <__fp_inf>:
    3006:	97 f9       	bld	r25, 7
    3008:	9f 67       	ori	r25, 0x7F	; 127
    300a:	80 e8       	ldi	r24, 0x80	; 128
    300c:	70 e0       	ldi	r23, 0x00	; 0
    300e:	60 e0       	ldi	r22, 0x00	; 0
    3010:	08 95       	ret

00003012 <__fp_nan>:
    3012:	9f ef       	ldi	r25, 0xFF	; 255
    3014:	80 ec       	ldi	r24, 0xC0	; 192
    3016:	08 95       	ret

00003018 <__fp_pscA>:
    3018:	00 24       	eor	r0, r0
    301a:	0a 94       	dec	r0
    301c:	16 16       	cp	r1, r22
    301e:	17 06       	cpc	r1, r23
    3020:	18 06       	cpc	r1, r24
    3022:	09 06       	cpc	r0, r25
    3024:	08 95       	ret

00003026 <__fp_pscB>:
    3026:	00 24       	eor	r0, r0
    3028:	0a 94       	dec	r0
    302a:	12 16       	cp	r1, r18
    302c:	13 06       	cpc	r1, r19
    302e:	14 06       	cpc	r1, r20
    3030:	05 06       	cpc	r0, r21
    3032:	08 95       	ret

00003034 <__fp_round>:
    3034:	09 2e       	mov	r0, r25
    3036:	03 94       	inc	r0
    3038:	00 0c       	add	r0, r0
    303a:	11 f4       	brne	.+4      	; 0x3040 <__fp_round+0xc>
    303c:	88 23       	and	r24, r24
    303e:	52 f0       	brmi	.+20     	; 0x3054 <__fp_round+0x20>
    3040:	bb 0f       	add	r27, r27
    3042:	40 f4       	brcc	.+16     	; 0x3054 <__fp_round+0x20>
    3044:	bf 2b       	or	r27, r31
    3046:	11 f4       	brne	.+4      	; 0x304c <__fp_round+0x18>
    3048:	60 ff       	sbrs	r22, 0
    304a:	04 c0       	rjmp	.+8      	; 0x3054 <__fp_round+0x20>
    304c:	6f 5f       	subi	r22, 0xFF	; 255
    304e:	7f 4f       	sbci	r23, 0xFF	; 255
    3050:	8f 4f       	sbci	r24, 0xFF	; 255
    3052:	9f 4f       	sbci	r25, 0xFF	; 255
    3054:	08 95       	ret

00003056 <__fp_split3>:
    3056:	57 fd       	sbrc	r21, 7
    3058:	90 58       	subi	r25, 0x80	; 128
    305a:	44 0f       	add	r20, r20
    305c:	55 1f       	adc	r21, r21
    305e:	59 f0       	breq	.+22     	; 0x3076 <__fp_splitA+0x10>
    3060:	5f 3f       	cpi	r21, 0xFF	; 255
    3062:	71 f0       	breq	.+28     	; 0x3080 <__fp_splitA+0x1a>
    3064:	47 95       	ror	r20

00003066 <__fp_splitA>:
    3066:	88 0f       	add	r24, r24
    3068:	97 fb       	bst	r25, 7
    306a:	99 1f       	adc	r25, r25
    306c:	61 f0       	breq	.+24     	; 0x3086 <__fp_splitA+0x20>
    306e:	9f 3f       	cpi	r25, 0xFF	; 255
    3070:	79 f0       	breq	.+30     	; 0x3090 <__fp_splitA+0x2a>
    3072:	87 95       	ror	r24
    3074:	08 95       	ret
    3076:	12 16       	cp	r1, r18
    3078:	13 06       	cpc	r1, r19
    307a:	14 06       	cpc	r1, r20
    307c:	55 1f       	adc	r21, r21
    307e:	f2 cf       	rjmp	.-28     	; 0x3064 <__fp_split3+0xe>
    3080:	46 95       	lsr	r20
    3082:	f1 df       	rcall	.-30     	; 0x3066 <__fp_splitA>
    3084:	08 c0       	rjmp	.+16     	; 0x3096 <__fp_splitA+0x30>
    3086:	16 16       	cp	r1, r22
    3088:	17 06       	cpc	r1, r23
    308a:	18 06       	cpc	r1, r24
    308c:	99 1f       	adc	r25, r25
    308e:	f1 cf       	rjmp	.-30     	; 0x3072 <__fp_splitA+0xc>
    3090:	86 95       	lsr	r24
    3092:	71 05       	cpc	r23, r1
    3094:	61 05       	cpc	r22, r1
    3096:	08 94       	sec
    3098:	08 95       	ret

0000309a <__fp_zero>:
    309a:	e8 94       	clt

0000309c <__fp_szero>:
    309c:	bb 27       	eor	r27, r27
    309e:	66 27       	eor	r22, r22
    30a0:	77 27       	eor	r23, r23
    30a2:	cb 01       	movw	r24, r22
    30a4:	97 f9       	bld	r25, 7
    30a6:	08 95       	ret

000030a8 <__mulsf3>:
    30a8:	0e 94 67 18 	call	0x30ce	; 0x30ce <__mulsf3x>
    30ac:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__fp_round>
    30b0:	0e 94 0c 18 	call	0x3018	; 0x3018 <__fp_pscA>
    30b4:	38 f0       	brcs	.+14     	; 0x30c4 <__mulsf3+0x1c>
    30b6:	0e 94 13 18 	call	0x3026	; 0x3026 <__fp_pscB>
    30ba:	20 f0       	brcs	.+8      	; 0x30c4 <__mulsf3+0x1c>
    30bc:	95 23       	and	r25, r21
    30be:	11 f0       	breq	.+4      	; 0x30c4 <__mulsf3+0x1c>
    30c0:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__fp_inf>
    30c4:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__fp_nan>
    30c8:	11 24       	eor	r1, r1
    30ca:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__fp_szero>

000030ce <__mulsf3x>:
    30ce:	0e 94 2b 18 	call	0x3056	; 0x3056 <__fp_split3>
    30d2:	70 f3       	brcs	.-36     	; 0x30b0 <__mulsf3+0x8>

000030d4 <__mulsf3_pse>:
    30d4:	95 9f       	mul	r25, r21
    30d6:	c1 f3       	breq	.-16     	; 0x30c8 <__mulsf3+0x20>
    30d8:	95 0f       	add	r25, r21
    30da:	50 e0       	ldi	r21, 0x00	; 0
    30dc:	55 1f       	adc	r21, r21
    30de:	62 9f       	mul	r22, r18
    30e0:	f0 01       	movw	r30, r0
    30e2:	72 9f       	mul	r23, r18
    30e4:	bb 27       	eor	r27, r27
    30e6:	f0 0d       	add	r31, r0
    30e8:	b1 1d       	adc	r27, r1
    30ea:	63 9f       	mul	r22, r19
    30ec:	aa 27       	eor	r26, r26
    30ee:	f0 0d       	add	r31, r0
    30f0:	b1 1d       	adc	r27, r1
    30f2:	aa 1f       	adc	r26, r26
    30f4:	64 9f       	mul	r22, r20
    30f6:	66 27       	eor	r22, r22
    30f8:	b0 0d       	add	r27, r0
    30fa:	a1 1d       	adc	r26, r1
    30fc:	66 1f       	adc	r22, r22
    30fe:	82 9f       	mul	r24, r18
    3100:	22 27       	eor	r18, r18
    3102:	b0 0d       	add	r27, r0
    3104:	a1 1d       	adc	r26, r1
    3106:	62 1f       	adc	r22, r18
    3108:	73 9f       	mul	r23, r19
    310a:	b0 0d       	add	r27, r0
    310c:	a1 1d       	adc	r26, r1
    310e:	62 1f       	adc	r22, r18
    3110:	83 9f       	mul	r24, r19
    3112:	a0 0d       	add	r26, r0
    3114:	61 1d       	adc	r22, r1
    3116:	22 1f       	adc	r18, r18
    3118:	74 9f       	mul	r23, r20
    311a:	33 27       	eor	r19, r19
    311c:	a0 0d       	add	r26, r0
    311e:	61 1d       	adc	r22, r1
    3120:	23 1f       	adc	r18, r19
    3122:	84 9f       	mul	r24, r20
    3124:	60 0d       	add	r22, r0
    3126:	21 1d       	adc	r18, r1
    3128:	82 2f       	mov	r24, r18
    312a:	76 2f       	mov	r23, r22
    312c:	6a 2f       	mov	r22, r26
    312e:	11 24       	eor	r1, r1
    3130:	9f 57       	subi	r25, 0x7F	; 127
    3132:	50 40       	sbci	r21, 0x00	; 0
    3134:	9a f0       	brmi	.+38     	; 0x315c <__mulsf3_pse+0x88>
    3136:	f1 f0       	breq	.+60     	; 0x3174 <__mulsf3_pse+0xa0>
    3138:	88 23       	and	r24, r24
    313a:	4a f0       	brmi	.+18     	; 0x314e <__mulsf3_pse+0x7a>
    313c:	ee 0f       	add	r30, r30
    313e:	ff 1f       	adc	r31, r31
    3140:	bb 1f       	adc	r27, r27
    3142:	66 1f       	adc	r22, r22
    3144:	77 1f       	adc	r23, r23
    3146:	88 1f       	adc	r24, r24
    3148:	91 50       	subi	r25, 0x01	; 1
    314a:	50 40       	sbci	r21, 0x00	; 0
    314c:	a9 f7       	brne	.-22     	; 0x3138 <__mulsf3_pse+0x64>
    314e:	9e 3f       	cpi	r25, 0xFE	; 254
    3150:	51 05       	cpc	r21, r1
    3152:	80 f0       	brcs	.+32     	; 0x3174 <__mulsf3_pse+0xa0>
    3154:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__fp_inf>
    3158:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__fp_szero>
    315c:	5f 3f       	cpi	r21, 0xFF	; 255
    315e:	e4 f3       	brlt	.-8      	; 0x3158 <__mulsf3_pse+0x84>
    3160:	98 3e       	cpi	r25, 0xE8	; 232
    3162:	d4 f3       	brlt	.-12     	; 0x3158 <__mulsf3_pse+0x84>
    3164:	86 95       	lsr	r24
    3166:	77 95       	ror	r23
    3168:	67 95       	ror	r22
    316a:	b7 95       	ror	r27
    316c:	f7 95       	ror	r31
    316e:	e7 95       	ror	r30
    3170:	9f 5f       	subi	r25, 0xFF	; 255
    3172:	c1 f7       	brne	.-16     	; 0x3164 <__mulsf3_pse+0x90>
    3174:	fe 2b       	or	r31, r30
    3176:	88 0f       	add	r24, r24
    3178:	91 1d       	adc	r25, r1
    317a:	96 95       	lsr	r25
    317c:	87 95       	ror	r24
    317e:	97 f9       	bld	r25, 7
    3180:	08 95       	ret

00003182 <__udivmodsi4>:
    3182:	a1 e2       	ldi	r26, 0x21	; 33
    3184:	1a 2e       	mov	r1, r26
    3186:	aa 1b       	sub	r26, r26
    3188:	bb 1b       	sub	r27, r27
    318a:	fd 01       	movw	r30, r26
    318c:	0d c0       	rjmp	.+26     	; 0x31a8 <__udivmodsi4_ep>

0000318e <__udivmodsi4_loop>:
    318e:	aa 1f       	adc	r26, r26
    3190:	bb 1f       	adc	r27, r27
    3192:	ee 1f       	adc	r30, r30
    3194:	ff 1f       	adc	r31, r31
    3196:	a2 17       	cp	r26, r18
    3198:	b3 07       	cpc	r27, r19
    319a:	e4 07       	cpc	r30, r20
    319c:	f5 07       	cpc	r31, r21
    319e:	20 f0       	brcs	.+8      	; 0x31a8 <__udivmodsi4_ep>
    31a0:	a2 1b       	sub	r26, r18
    31a2:	b3 0b       	sbc	r27, r19
    31a4:	e4 0b       	sbc	r30, r20
    31a6:	f5 0b       	sbc	r31, r21

000031a8 <__udivmodsi4_ep>:
    31a8:	66 1f       	adc	r22, r22
    31aa:	77 1f       	adc	r23, r23
    31ac:	88 1f       	adc	r24, r24
    31ae:	99 1f       	adc	r25, r25
    31b0:	1a 94       	dec	r1
    31b2:	69 f7       	brne	.-38     	; 0x318e <__udivmodsi4_loop>
    31b4:	60 95       	com	r22
    31b6:	70 95       	com	r23
    31b8:	80 95       	com	r24
    31ba:	90 95       	com	r25
    31bc:	9b 01       	movw	r18, r22
    31be:	ac 01       	movw	r20, r24
    31c0:	bd 01       	movw	r22, r26
    31c2:	cf 01       	movw	r24, r30
    31c4:	08 95       	ret

000031c6 <__divmodsi4>:
    31c6:	05 2e       	mov	r0, r21
    31c8:	97 fb       	bst	r25, 7
    31ca:	1e f4       	brtc	.+6      	; 0x31d2 <__divmodsi4+0xc>
    31cc:	00 94       	com	r0
    31ce:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__negsi2>
    31d2:	57 fd       	sbrc	r21, 7
    31d4:	07 d0       	rcall	.+14     	; 0x31e4 <__divmodsi4_neg2>
    31d6:	0e 94 c1 18 	call	0x3182	; 0x3182 <__udivmodsi4>
    31da:	07 fc       	sbrc	r0, 7
    31dc:	03 d0       	rcall	.+6      	; 0x31e4 <__divmodsi4_neg2>
    31de:	4e f4       	brtc	.+18     	; 0x31f2 <__divmodsi4_exit>
    31e0:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__negsi2>

000031e4 <__divmodsi4_neg2>:
    31e4:	50 95       	com	r21
    31e6:	40 95       	com	r20
    31e8:	30 95       	com	r19
    31ea:	21 95       	neg	r18
    31ec:	3f 4f       	sbci	r19, 0xFF	; 255
    31ee:	4f 4f       	sbci	r20, 0xFF	; 255
    31f0:	5f 4f       	sbci	r21, 0xFF	; 255

000031f2 <__divmodsi4_exit>:
    31f2:	08 95       	ret

000031f4 <__negsi2>:
    31f4:	90 95       	com	r25
    31f6:	80 95       	com	r24
    31f8:	70 95       	com	r23
    31fa:	61 95       	neg	r22
    31fc:	7f 4f       	sbci	r23, 0xFF	; 255
    31fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3200:	9f 4f       	sbci	r25, 0xFF	; 255
    3202:	08 95       	ret

00003204 <__tablejump2__>:
    3204:	ee 0f       	add	r30, r30
    3206:	ff 1f       	adc	r31, r31
    3208:	05 90       	lpm	r0, Z+
    320a:	f4 91       	lpm	r31, Z
    320c:	e0 2d       	mov	r30, r0
    320e:	09 94       	ijmp

00003210 <__muluhisi3>:
    3210:	0e 94 13 19 	call	0x3226	; 0x3226 <__umulhisi3>
    3214:	a5 9f       	mul	r26, r21
    3216:	90 0d       	add	r25, r0
    3218:	b4 9f       	mul	r27, r20
    321a:	90 0d       	add	r25, r0
    321c:	a4 9f       	mul	r26, r20
    321e:	80 0d       	add	r24, r0
    3220:	91 1d       	adc	r25, r1
    3222:	11 24       	eor	r1, r1
    3224:	08 95       	ret

00003226 <__umulhisi3>:
    3226:	a2 9f       	mul	r26, r18
    3228:	b0 01       	movw	r22, r0
    322a:	b3 9f       	mul	r27, r19
    322c:	c0 01       	movw	r24, r0
    322e:	a3 9f       	mul	r26, r19
    3230:	70 0d       	add	r23, r0
    3232:	81 1d       	adc	r24, r1
    3234:	11 24       	eor	r1, r1
    3236:	91 1d       	adc	r25, r1
    3238:	b2 9f       	mul	r27, r18
    323a:	70 0d       	add	r23, r0
    323c:	81 1d       	adc	r24, r1
    323e:	11 24       	eor	r1, r1
    3240:	91 1d       	adc	r25, r1
    3242:	08 95       	ret

00003244 <malloc>:
    3244:	0f 93       	push	r16
    3246:	1f 93       	push	r17
    3248:	cf 93       	push	r28
    324a:	df 93       	push	r29
    324c:	82 30       	cpi	r24, 0x02	; 2
    324e:	91 05       	cpc	r25, r1
    3250:	10 f4       	brcc	.+4      	; 0x3256 <malloc+0x12>
    3252:	82 e0       	ldi	r24, 0x02	; 2
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	e0 91 e0 04 	lds	r30, 0x04E0	; 0x8004e0 <__flp>
    325a:	f0 91 e1 04 	lds	r31, 0x04E1	; 0x8004e1 <__flp+0x1>
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	a0 e0       	ldi	r26, 0x00	; 0
    3264:	b0 e0       	ldi	r27, 0x00	; 0
    3266:	30 97       	sbiw	r30, 0x00	; 0
    3268:	19 f1       	breq	.+70     	; 0x32b0 <malloc+0x6c>
    326a:	40 81       	ld	r20, Z
    326c:	51 81       	ldd	r21, Z+1	; 0x01
    326e:	02 81       	ldd	r16, Z+2	; 0x02
    3270:	13 81       	ldd	r17, Z+3	; 0x03
    3272:	48 17       	cp	r20, r24
    3274:	59 07       	cpc	r21, r25
    3276:	c8 f0       	brcs	.+50     	; 0x32aa <malloc+0x66>
    3278:	84 17       	cp	r24, r20
    327a:	95 07       	cpc	r25, r21
    327c:	69 f4       	brne	.+26     	; 0x3298 <malloc+0x54>
    327e:	10 97       	sbiw	r26, 0x00	; 0
    3280:	31 f0       	breq	.+12     	; 0x328e <malloc+0x4a>
    3282:	12 96       	adiw	r26, 0x02	; 2
    3284:	0c 93       	st	X, r16
    3286:	12 97       	sbiw	r26, 0x02	; 2
    3288:	13 96       	adiw	r26, 0x03	; 3
    328a:	1c 93       	st	X, r17
    328c:	27 c0       	rjmp	.+78     	; 0x32dc <malloc+0x98>
    328e:	00 93 e0 04 	sts	0x04E0, r16	; 0x8004e0 <__flp>
    3292:	10 93 e1 04 	sts	0x04E1, r17	; 0x8004e1 <__flp+0x1>
    3296:	22 c0       	rjmp	.+68     	; 0x32dc <malloc+0x98>
    3298:	21 15       	cp	r18, r1
    329a:	31 05       	cpc	r19, r1
    329c:	19 f0       	breq	.+6      	; 0x32a4 <malloc+0x60>
    329e:	42 17       	cp	r20, r18
    32a0:	53 07       	cpc	r21, r19
    32a2:	18 f4       	brcc	.+6      	; 0x32aa <malloc+0x66>
    32a4:	9a 01       	movw	r18, r20
    32a6:	bd 01       	movw	r22, r26
    32a8:	ef 01       	movw	r28, r30
    32aa:	df 01       	movw	r26, r30
    32ac:	f8 01       	movw	r30, r16
    32ae:	db cf       	rjmp	.-74     	; 0x3266 <malloc+0x22>
    32b0:	21 15       	cp	r18, r1
    32b2:	31 05       	cpc	r19, r1
    32b4:	f9 f0       	breq	.+62     	; 0x32f4 <malloc+0xb0>
    32b6:	28 1b       	sub	r18, r24
    32b8:	39 0b       	sbc	r19, r25
    32ba:	24 30       	cpi	r18, 0x04	; 4
    32bc:	31 05       	cpc	r19, r1
    32be:	80 f4       	brcc	.+32     	; 0x32e0 <malloc+0x9c>
    32c0:	8a 81       	ldd	r24, Y+2	; 0x02
    32c2:	9b 81       	ldd	r25, Y+3	; 0x03
    32c4:	61 15       	cp	r22, r1
    32c6:	71 05       	cpc	r23, r1
    32c8:	21 f0       	breq	.+8      	; 0x32d2 <malloc+0x8e>
    32ca:	fb 01       	movw	r30, r22
    32cc:	93 83       	std	Z+3, r25	; 0x03
    32ce:	82 83       	std	Z+2, r24	; 0x02
    32d0:	04 c0       	rjmp	.+8      	; 0x32da <malloc+0x96>
    32d2:	90 93 e1 04 	sts	0x04E1, r25	; 0x8004e1 <__flp+0x1>
    32d6:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <__flp>
    32da:	fe 01       	movw	r30, r28
    32dc:	32 96       	adiw	r30, 0x02	; 2
    32de:	44 c0       	rjmp	.+136    	; 0x3368 <malloc+0x124>
    32e0:	fe 01       	movw	r30, r28
    32e2:	e2 0f       	add	r30, r18
    32e4:	f3 1f       	adc	r31, r19
    32e6:	81 93       	st	Z+, r24
    32e8:	91 93       	st	Z+, r25
    32ea:	22 50       	subi	r18, 0x02	; 2
    32ec:	31 09       	sbc	r19, r1
    32ee:	39 83       	std	Y+1, r19	; 0x01
    32f0:	28 83       	st	Y, r18
    32f2:	3a c0       	rjmp	.+116    	; 0x3368 <malloc+0x124>
    32f4:	20 91 de 04 	lds	r18, 0x04DE	; 0x8004de <__brkval>
    32f8:	30 91 df 04 	lds	r19, 0x04DF	; 0x8004df <__brkval+0x1>
    32fc:	23 2b       	or	r18, r19
    32fe:	41 f4       	brne	.+16     	; 0x3310 <malloc+0xcc>
    3300:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3304:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3308:	30 93 df 04 	sts	0x04DF, r19	; 0x8004df <__brkval+0x1>
    330c:	20 93 de 04 	sts	0x04DE, r18	; 0x8004de <__brkval>
    3310:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3314:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3318:	21 15       	cp	r18, r1
    331a:	31 05       	cpc	r19, r1
    331c:	41 f4       	brne	.+16     	; 0x332e <malloc+0xea>
    331e:	2d b7       	in	r18, 0x3d	; 61
    3320:	3e b7       	in	r19, 0x3e	; 62
    3322:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3326:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    332a:	24 1b       	sub	r18, r20
    332c:	35 0b       	sbc	r19, r21
    332e:	e0 91 de 04 	lds	r30, 0x04DE	; 0x8004de <__brkval>
    3332:	f0 91 df 04 	lds	r31, 0x04DF	; 0x8004df <__brkval+0x1>
    3336:	e2 17       	cp	r30, r18
    3338:	f3 07       	cpc	r31, r19
    333a:	a0 f4       	brcc	.+40     	; 0x3364 <malloc+0x120>
    333c:	2e 1b       	sub	r18, r30
    333e:	3f 0b       	sbc	r19, r31
    3340:	28 17       	cp	r18, r24
    3342:	39 07       	cpc	r19, r25
    3344:	78 f0       	brcs	.+30     	; 0x3364 <malloc+0x120>
    3346:	ac 01       	movw	r20, r24
    3348:	4e 5f       	subi	r20, 0xFE	; 254
    334a:	5f 4f       	sbci	r21, 0xFF	; 255
    334c:	24 17       	cp	r18, r20
    334e:	35 07       	cpc	r19, r21
    3350:	48 f0       	brcs	.+18     	; 0x3364 <malloc+0x120>
    3352:	4e 0f       	add	r20, r30
    3354:	5f 1f       	adc	r21, r31
    3356:	50 93 df 04 	sts	0x04DF, r21	; 0x8004df <__brkval+0x1>
    335a:	40 93 de 04 	sts	0x04DE, r20	; 0x8004de <__brkval>
    335e:	81 93       	st	Z+, r24
    3360:	91 93       	st	Z+, r25
    3362:	02 c0       	rjmp	.+4      	; 0x3368 <malloc+0x124>
    3364:	e0 e0       	ldi	r30, 0x00	; 0
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	cf 01       	movw	r24, r30
    336a:	df 91       	pop	r29
    336c:	cf 91       	pop	r28
    336e:	1f 91       	pop	r17
    3370:	0f 91       	pop	r16
    3372:	08 95       	ret

00003374 <free>:
    3374:	cf 93       	push	r28
    3376:	df 93       	push	r29
    3378:	00 97       	sbiw	r24, 0x00	; 0
    337a:	09 f4       	brne	.+2      	; 0x337e <free+0xa>
    337c:	81 c0       	rjmp	.+258    	; 0x3480 <free+0x10c>
    337e:	fc 01       	movw	r30, r24
    3380:	32 97       	sbiw	r30, 0x02	; 2
    3382:	13 82       	std	Z+3, r1	; 0x03
    3384:	12 82       	std	Z+2, r1	; 0x02
    3386:	a0 91 e0 04 	lds	r26, 0x04E0	; 0x8004e0 <__flp>
    338a:	b0 91 e1 04 	lds	r27, 0x04E1	; 0x8004e1 <__flp+0x1>
    338e:	10 97       	sbiw	r26, 0x00	; 0
    3390:	81 f4       	brne	.+32     	; 0x33b2 <free+0x3e>
    3392:	20 81       	ld	r18, Z
    3394:	31 81       	ldd	r19, Z+1	; 0x01
    3396:	82 0f       	add	r24, r18
    3398:	93 1f       	adc	r25, r19
    339a:	20 91 de 04 	lds	r18, 0x04DE	; 0x8004de <__brkval>
    339e:	30 91 df 04 	lds	r19, 0x04DF	; 0x8004df <__brkval+0x1>
    33a2:	28 17       	cp	r18, r24
    33a4:	39 07       	cpc	r19, r25
    33a6:	51 f5       	brne	.+84     	; 0x33fc <free+0x88>
    33a8:	f0 93 df 04 	sts	0x04DF, r31	; 0x8004df <__brkval+0x1>
    33ac:	e0 93 de 04 	sts	0x04DE, r30	; 0x8004de <__brkval>
    33b0:	67 c0       	rjmp	.+206    	; 0x3480 <free+0x10c>
    33b2:	ed 01       	movw	r28, r26
    33b4:	20 e0       	ldi	r18, 0x00	; 0
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	ce 17       	cp	r28, r30
    33ba:	df 07       	cpc	r29, r31
    33bc:	40 f4       	brcc	.+16     	; 0x33ce <free+0x5a>
    33be:	4a 81       	ldd	r20, Y+2	; 0x02
    33c0:	5b 81       	ldd	r21, Y+3	; 0x03
    33c2:	9e 01       	movw	r18, r28
    33c4:	41 15       	cp	r20, r1
    33c6:	51 05       	cpc	r21, r1
    33c8:	f1 f0       	breq	.+60     	; 0x3406 <free+0x92>
    33ca:	ea 01       	movw	r28, r20
    33cc:	f5 cf       	rjmp	.-22     	; 0x33b8 <free+0x44>
    33ce:	d3 83       	std	Z+3, r29	; 0x03
    33d0:	c2 83       	std	Z+2, r28	; 0x02
    33d2:	40 81       	ld	r20, Z
    33d4:	51 81       	ldd	r21, Z+1	; 0x01
    33d6:	84 0f       	add	r24, r20
    33d8:	95 1f       	adc	r25, r21
    33da:	c8 17       	cp	r28, r24
    33dc:	d9 07       	cpc	r29, r25
    33de:	59 f4       	brne	.+22     	; 0x33f6 <free+0x82>
    33e0:	88 81       	ld	r24, Y
    33e2:	99 81       	ldd	r25, Y+1	; 0x01
    33e4:	84 0f       	add	r24, r20
    33e6:	95 1f       	adc	r25, r21
    33e8:	02 96       	adiw	r24, 0x02	; 2
    33ea:	91 83       	std	Z+1, r25	; 0x01
    33ec:	80 83       	st	Z, r24
    33ee:	8a 81       	ldd	r24, Y+2	; 0x02
    33f0:	9b 81       	ldd	r25, Y+3	; 0x03
    33f2:	93 83       	std	Z+3, r25	; 0x03
    33f4:	82 83       	std	Z+2, r24	; 0x02
    33f6:	21 15       	cp	r18, r1
    33f8:	31 05       	cpc	r19, r1
    33fa:	29 f4       	brne	.+10     	; 0x3406 <free+0x92>
    33fc:	f0 93 e1 04 	sts	0x04E1, r31	; 0x8004e1 <__flp+0x1>
    3400:	e0 93 e0 04 	sts	0x04E0, r30	; 0x8004e0 <__flp>
    3404:	3d c0       	rjmp	.+122    	; 0x3480 <free+0x10c>
    3406:	e9 01       	movw	r28, r18
    3408:	fb 83       	std	Y+3, r31	; 0x03
    340a:	ea 83       	std	Y+2, r30	; 0x02
    340c:	49 91       	ld	r20, Y+
    340e:	59 91       	ld	r21, Y+
    3410:	c4 0f       	add	r28, r20
    3412:	d5 1f       	adc	r29, r21
    3414:	ec 17       	cp	r30, r28
    3416:	fd 07       	cpc	r31, r29
    3418:	61 f4       	brne	.+24     	; 0x3432 <free+0xbe>
    341a:	80 81       	ld	r24, Z
    341c:	91 81       	ldd	r25, Z+1	; 0x01
    341e:	84 0f       	add	r24, r20
    3420:	95 1f       	adc	r25, r21
    3422:	02 96       	adiw	r24, 0x02	; 2
    3424:	e9 01       	movw	r28, r18
    3426:	99 83       	std	Y+1, r25	; 0x01
    3428:	88 83       	st	Y, r24
    342a:	82 81       	ldd	r24, Z+2	; 0x02
    342c:	93 81       	ldd	r25, Z+3	; 0x03
    342e:	9b 83       	std	Y+3, r25	; 0x03
    3430:	8a 83       	std	Y+2, r24	; 0x02
    3432:	e0 e0       	ldi	r30, 0x00	; 0
    3434:	f0 e0       	ldi	r31, 0x00	; 0
    3436:	12 96       	adiw	r26, 0x02	; 2
    3438:	8d 91       	ld	r24, X+
    343a:	9c 91       	ld	r25, X
    343c:	13 97       	sbiw	r26, 0x03	; 3
    343e:	00 97       	sbiw	r24, 0x00	; 0
    3440:	19 f0       	breq	.+6      	; 0x3448 <free+0xd4>
    3442:	fd 01       	movw	r30, r26
    3444:	dc 01       	movw	r26, r24
    3446:	f7 cf       	rjmp	.-18     	; 0x3436 <free+0xc2>
    3448:	8d 91       	ld	r24, X+
    344a:	9c 91       	ld	r25, X
    344c:	11 97       	sbiw	r26, 0x01	; 1
    344e:	9d 01       	movw	r18, r26
    3450:	2e 5f       	subi	r18, 0xFE	; 254
    3452:	3f 4f       	sbci	r19, 0xFF	; 255
    3454:	82 0f       	add	r24, r18
    3456:	93 1f       	adc	r25, r19
    3458:	20 91 de 04 	lds	r18, 0x04DE	; 0x8004de <__brkval>
    345c:	30 91 df 04 	lds	r19, 0x04DF	; 0x8004df <__brkval+0x1>
    3460:	28 17       	cp	r18, r24
    3462:	39 07       	cpc	r19, r25
    3464:	69 f4       	brne	.+26     	; 0x3480 <free+0x10c>
    3466:	30 97       	sbiw	r30, 0x00	; 0
    3468:	29 f4       	brne	.+10     	; 0x3474 <free+0x100>
    346a:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <__flp+0x1>
    346e:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <__flp>
    3472:	02 c0       	rjmp	.+4      	; 0x3478 <free+0x104>
    3474:	13 82       	std	Z+3, r1	; 0x03
    3476:	12 82       	std	Z+2, r1	; 0x02
    3478:	b0 93 df 04 	sts	0x04DF, r27	; 0x8004df <__brkval+0x1>
    347c:	a0 93 de 04 	sts	0x04DE, r26	; 0x8004de <__brkval>
    3480:	df 91       	pop	r29
    3482:	cf 91       	pop	r28
    3484:	08 95       	ret

00003486 <random_r>:
    3486:	8f 92       	push	r8
    3488:	9f 92       	push	r9
    348a:	af 92       	push	r10
    348c:	bf 92       	push	r11
    348e:	cf 92       	push	r12
    3490:	df 92       	push	r13
    3492:	ef 92       	push	r14
    3494:	ff 92       	push	r15
    3496:	cf 93       	push	r28
    3498:	df 93       	push	r29
    349a:	ec 01       	movw	r28, r24
    349c:	68 81       	ld	r22, Y
    349e:	79 81       	ldd	r23, Y+1	; 0x01
    34a0:	8a 81       	ldd	r24, Y+2	; 0x02
    34a2:	9b 81       	ldd	r25, Y+3	; 0x03
    34a4:	61 15       	cp	r22, r1
    34a6:	71 05       	cpc	r23, r1
    34a8:	81 05       	cpc	r24, r1
    34aa:	91 05       	cpc	r25, r1
    34ac:	21 f4       	brne	.+8      	; 0x34b6 <random_r+0x30>
    34ae:	64 e2       	ldi	r22, 0x24	; 36
    34b0:	79 ed       	ldi	r23, 0xD9	; 217
    34b2:	8b e5       	ldi	r24, 0x5B	; 91
    34b4:	97 e0       	ldi	r25, 0x07	; 7
    34b6:	2d e1       	ldi	r18, 0x1D	; 29
    34b8:	33 ef       	ldi	r19, 0xF3	; 243
    34ba:	41 e0       	ldi	r20, 0x01	; 1
    34bc:	50 e0       	ldi	r21, 0x00	; 0
    34be:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__divmodsi4>
    34c2:	49 01       	movw	r8, r18
    34c4:	5a 01       	movw	r10, r20
    34c6:	9b 01       	movw	r18, r22
    34c8:	ac 01       	movw	r20, r24
    34ca:	a7 ea       	ldi	r26, 0xA7	; 167
    34cc:	b1 e4       	ldi	r27, 0x41	; 65
    34ce:	0e 94 08 19 	call	0x3210	; 0x3210 <__muluhisi3>
    34d2:	6b 01       	movw	r12, r22
    34d4:	7c 01       	movw	r14, r24
    34d6:	ac ee       	ldi	r26, 0xEC	; 236
    34d8:	b4 ef       	ldi	r27, 0xF4	; 244
    34da:	a5 01       	movw	r20, r10
    34dc:	94 01       	movw	r18, r8
    34de:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <__mulohisi3>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	8c 0d       	add	r24, r12
    34e8:	9d 1d       	adc	r25, r13
    34ea:	ae 1d       	adc	r26, r14
    34ec:	bf 1d       	adc	r27, r15
    34ee:	b7 ff       	sbrs	r27, 7
    34f0:	03 c0       	rjmp	.+6      	; 0x34f8 <random_r+0x72>
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	a1 09       	sbc	r26, r1
    34f6:	b0 48       	sbci	r27, 0x80	; 128
    34f8:	88 83       	st	Y, r24
    34fa:	99 83       	std	Y+1, r25	; 0x01
    34fc:	aa 83       	std	Y+2, r26	; 0x02
    34fe:	bb 83       	std	Y+3, r27	; 0x03
    3500:	bc 01       	movw	r22, r24
    3502:	cd 01       	movw	r24, r26
    3504:	9f 77       	andi	r25, 0x7F	; 127
    3506:	df 91       	pop	r29
    3508:	cf 91       	pop	r28
    350a:	ff 90       	pop	r15
    350c:	ef 90       	pop	r14
    350e:	df 90       	pop	r13
    3510:	cf 90       	pop	r12
    3512:	bf 90       	pop	r11
    3514:	af 90       	pop	r10
    3516:	9f 90       	pop	r9
    3518:	8f 90       	pop	r8
    351a:	08 95       	ret

0000351c <random>:
    351c:	8f 92       	push	r8
    351e:	9f 92       	push	r9
    3520:	af 92       	push	r10
    3522:	bf 92       	push	r11
    3524:	cf 92       	push	r12
    3526:	df 92       	push	r13
    3528:	ef 92       	push	r14
    352a:	ff 92       	push	r15
    352c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <next>
    3530:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <next+0x1>
    3534:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <next+0x2>
    3538:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <next+0x3>
    353c:	61 15       	cp	r22, r1
    353e:	71 05       	cpc	r23, r1
    3540:	81 05       	cpc	r24, r1
    3542:	91 05       	cpc	r25, r1
    3544:	21 f4       	brne	.+8      	; 0x354e <random+0x32>
    3546:	64 e2       	ldi	r22, 0x24	; 36
    3548:	79 ed       	ldi	r23, 0xD9	; 217
    354a:	8b e5       	ldi	r24, 0x5B	; 91
    354c:	97 e0       	ldi	r25, 0x07	; 7
    354e:	2d e1       	ldi	r18, 0x1D	; 29
    3550:	33 ef       	ldi	r19, 0xF3	; 243
    3552:	41 e0       	ldi	r20, 0x01	; 1
    3554:	50 e0       	ldi	r21, 0x00	; 0
    3556:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__divmodsi4>
    355a:	49 01       	movw	r8, r18
    355c:	5a 01       	movw	r10, r20
    355e:	9b 01       	movw	r18, r22
    3560:	ac 01       	movw	r20, r24
    3562:	a7 ea       	ldi	r26, 0xA7	; 167
    3564:	b1 e4       	ldi	r27, 0x41	; 65
    3566:	0e 94 08 19 	call	0x3210	; 0x3210 <__muluhisi3>
    356a:	6b 01       	movw	r12, r22
    356c:	7c 01       	movw	r14, r24
    356e:	ac ee       	ldi	r26, 0xEC	; 236
    3570:	b4 ef       	ldi	r27, 0xF4	; 244
    3572:	a5 01       	movw	r20, r10
    3574:	94 01       	movw	r18, r8
    3576:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <__mulohisi3>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	8c 0d       	add	r24, r12
    3580:	9d 1d       	adc	r25, r13
    3582:	ae 1d       	adc	r26, r14
    3584:	bf 1d       	adc	r27, r15
    3586:	b7 ff       	sbrs	r27, 7
    3588:	03 c0       	rjmp	.+6      	; 0x3590 <random+0x74>
    358a:	01 97       	sbiw	r24, 0x01	; 1
    358c:	a1 09       	sbc	r26, r1
    358e:	b0 48       	sbci	r27, 0x80	; 128
    3590:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    3594:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    3598:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    359c:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    35a0:	bc 01       	movw	r22, r24
    35a2:	cd 01       	movw	r24, r26
    35a4:	9f 77       	andi	r25, 0x7F	; 127
    35a6:	ff 90       	pop	r15
    35a8:	ef 90       	pop	r14
    35aa:	df 90       	pop	r13
    35ac:	cf 90       	pop	r12
    35ae:	bf 90       	pop	r11
    35b0:	af 90       	pop	r10
    35b2:	9f 90       	pop	r9
    35b4:	8f 90       	pop	r8
    35b6:	08 95       	ret

000035b8 <srandom>:
    35b8:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <next>
    35bc:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <next+0x1>
    35c0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <next+0x2>
    35c4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <next+0x3>
    35c8:	08 95       	ret

000035ca <realloc>:
    35ca:	a0 e0       	ldi	r26, 0x00	; 0
    35cc:	b0 e0       	ldi	r27, 0x00	; 0
    35ce:	eb ee       	ldi	r30, 0xEB	; 235
    35d0:	fa e1       	ldi	r31, 0x1A	; 26
    35d2:	0c 94 eb 1b 	jmp	0x37d6	; 0x37d6 <__prologue_saves__+0x8>
    35d6:	ec 01       	movw	r28, r24
    35d8:	00 97       	sbiw	r24, 0x00	; 0
    35da:	21 f4       	brne	.+8      	; 0x35e4 <realloc+0x1a>
    35dc:	cb 01       	movw	r24, r22
    35de:	0e 94 22 19 	call	0x3244	; 0x3244 <malloc>
    35e2:	b4 c0       	rjmp	.+360    	; 0x374c <realloc+0x182>
    35e4:	fc 01       	movw	r30, r24
    35e6:	e6 0f       	add	r30, r22
    35e8:	f7 1f       	adc	r31, r23
    35ea:	9c 01       	movw	r18, r24
    35ec:	22 50       	subi	r18, 0x02	; 2
    35ee:	31 09       	sbc	r19, r1
    35f0:	e2 17       	cp	r30, r18
    35f2:	f3 07       	cpc	r31, r19
    35f4:	08 f4       	brcc	.+2      	; 0x35f8 <realloc+0x2e>
    35f6:	a8 c0       	rjmp	.+336    	; 0x3748 <realloc+0x17e>
    35f8:	d9 01       	movw	r26, r18
    35fa:	0d 91       	ld	r16, X+
    35fc:	1c 91       	ld	r17, X
    35fe:	11 97       	sbiw	r26, 0x01	; 1
    3600:	06 17       	cp	r16, r22
    3602:	17 07       	cpc	r17, r23
    3604:	b0 f0       	brcs	.+44     	; 0x3632 <realloc+0x68>
    3606:	05 30       	cpi	r16, 0x05	; 5
    3608:	11 05       	cpc	r17, r1
    360a:	08 f4       	brcc	.+2      	; 0x360e <realloc+0x44>
    360c:	9b c0       	rjmp	.+310    	; 0x3744 <realloc+0x17a>
    360e:	c8 01       	movw	r24, r16
    3610:	04 97       	sbiw	r24, 0x04	; 4
    3612:	86 17       	cp	r24, r22
    3614:	97 07       	cpc	r25, r23
    3616:	08 f4       	brcc	.+2      	; 0x361a <realloc+0x50>
    3618:	95 c0       	rjmp	.+298    	; 0x3744 <realloc+0x17a>
    361a:	02 50       	subi	r16, 0x02	; 2
    361c:	11 09       	sbc	r17, r1
    361e:	06 1b       	sub	r16, r22
    3620:	17 0b       	sbc	r17, r23
    3622:	01 93       	st	Z+, r16
    3624:	11 93       	st	Z+, r17
    3626:	6d 93       	st	X+, r22
    3628:	7c 93       	st	X, r23
    362a:	cf 01       	movw	r24, r30
    362c:	0e 94 ba 19 	call	0x3374	; 0x3374 <free>
    3630:	89 c0       	rjmp	.+274    	; 0x3744 <realloc+0x17a>
    3632:	5b 01       	movw	r10, r22
    3634:	a0 1a       	sub	r10, r16
    3636:	b1 0a       	sbc	r11, r17
    3638:	4c 01       	movw	r8, r24
    363a:	80 0e       	add	r8, r16
    363c:	91 1e       	adc	r9, r17
    363e:	a0 91 e0 04 	lds	r26, 0x04E0	; 0x8004e0 <__flp>
    3642:	b0 91 e1 04 	lds	r27, 0x04E1	; 0x8004e1 <__flp+0x1>
    3646:	61 2c       	mov	r6, r1
    3648:	71 2c       	mov	r7, r1
    364a:	e1 2c       	mov	r14, r1
    364c:	f1 2c       	mov	r15, r1
    364e:	10 97       	sbiw	r26, 0x00	; 0
    3650:	09 f4       	brne	.+2      	; 0x3654 <realloc+0x8a>
    3652:	46 c0       	rjmp	.+140    	; 0x36e0 <realloc+0x116>
    3654:	8d 91       	ld	r24, X+
    3656:	9c 91       	ld	r25, X
    3658:	11 97       	sbiw	r26, 0x01	; 1
    365a:	a8 15       	cp	r26, r8
    365c:	b9 05       	cpc	r27, r9
    365e:	b1 f5       	brne	.+108    	; 0x36cc <realloc+0x102>
    3660:	6c 01       	movw	r12, r24
    3662:	42 e0       	ldi	r20, 0x02	; 2
    3664:	c4 0e       	add	r12, r20
    3666:	d1 1c       	adc	r13, r1
    3668:	ca 14       	cp	r12, r10
    366a:	db 04       	cpc	r13, r11
    366c:	78 f1       	brcs	.+94     	; 0x36cc <realloc+0x102>
    366e:	4c 01       	movw	r8, r24
    3670:	8a 18       	sub	r8, r10
    3672:	9b 08       	sbc	r9, r11
    3674:	64 01       	movw	r12, r8
    3676:	42 e0       	ldi	r20, 0x02	; 2
    3678:	c4 0e       	add	r12, r20
    367a:	d1 1c       	adc	r13, r1
    367c:	12 96       	adiw	r26, 0x02	; 2
    367e:	bc 90       	ld	r11, X
    3680:	12 97       	sbiw	r26, 0x02	; 2
    3682:	13 96       	adiw	r26, 0x03	; 3
    3684:	ac 91       	ld	r26, X
    3686:	b5 e0       	ldi	r27, 0x05	; 5
    3688:	cb 16       	cp	r12, r27
    368a:	d1 04       	cpc	r13, r1
    368c:	40 f0       	brcs	.+16     	; 0x369e <realloc+0xd4>
    368e:	b2 82       	std	Z+2, r11	; 0x02
    3690:	a3 83       	std	Z+3, r26	; 0x03
    3692:	91 82       	std	Z+1, r9	; 0x01
    3694:	80 82       	st	Z, r8
    3696:	d9 01       	movw	r26, r18
    3698:	6d 93       	st	X+, r22
    369a:	7c 93       	st	X, r23
    369c:	09 c0       	rjmp	.+18     	; 0x36b0 <realloc+0xe6>
    369e:	0e 5f       	subi	r16, 0xFE	; 254
    36a0:	1f 4f       	sbci	r17, 0xFF	; 255
    36a2:	80 0f       	add	r24, r16
    36a4:	91 1f       	adc	r25, r17
    36a6:	f9 01       	movw	r30, r18
    36a8:	91 83       	std	Z+1, r25	; 0x01
    36aa:	80 83       	st	Z, r24
    36ac:	eb 2d       	mov	r30, r11
    36ae:	fa 2f       	mov	r31, r26
    36b0:	e1 14       	cp	r14, r1
    36b2:	f1 04       	cpc	r15, r1
    36b4:	31 f0       	breq	.+12     	; 0x36c2 <realloc+0xf8>
    36b6:	d7 01       	movw	r26, r14
    36b8:	13 96       	adiw	r26, 0x03	; 3
    36ba:	fc 93       	st	X, r31
    36bc:	ee 93       	st	-X, r30
    36be:	12 97       	sbiw	r26, 0x02	; 2
    36c0:	41 c0       	rjmp	.+130    	; 0x3744 <realloc+0x17a>
    36c2:	f0 93 e1 04 	sts	0x04E1, r31	; 0x8004e1 <__flp+0x1>
    36c6:	e0 93 e0 04 	sts	0x04E0, r30	; 0x8004e0 <__flp>
    36ca:	3c c0       	rjmp	.+120    	; 0x3744 <realloc+0x17a>
    36cc:	68 16       	cp	r6, r24
    36ce:	79 06       	cpc	r7, r25
    36d0:	08 f4       	brcc	.+2      	; 0x36d4 <realloc+0x10a>
    36d2:	3c 01       	movw	r6, r24
    36d4:	7d 01       	movw	r14, r26
    36d6:	12 96       	adiw	r26, 0x02	; 2
    36d8:	0d 90       	ld	r0, X+
    36da:	bc 91       	ld	r27, X
    36dc:	a0 2d       	mov	r26, r0
    36de:	b7 cf       	rjmp	.-146    	; 0x364e <realloc+0x84>
    36e0:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <__brkval>
    36e4:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <__brkval+0x1>
    36e8:	88 16       	cp	r8, r24
    36ea:	99 06       	cpc	r9, r25
    36ec:	e1 f4       	brne	.+56     	; 0x3726 <realloc+0x15c>
    36ee:	66 16       	cp	r6, r22
    36f0:	77 06       	cpc	r7, r23
    36f2:	c8 f4       	brcc	.+50     	; 0x3726 <realloc+0x15c>
    36f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    36f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    36fc:	00 97       	sbiw	r24, 0x00	; 0
    36fe:	41 f4       	brne	.+16     	; 0x3710 <realloc+0x146>
    3700:	8d b7       	in	r24, 0x3d	; 61
    3702:	9e b7       	in	r25, 0x3e	; 62
    3704:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3708:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    370c:	84 1b       	sub	r24, r20
    370e:	95 0b       	sbc	r25, r21
    3710:	e8 17       	cp	r30, r24
    3712:	f9 07       	cpc	r31, r25
    3714:	c8 f4       	brcc	.+50     	; 0x3748 <realloc+0x17e>
    3716:	f0 93 df 04 	sts	0x04DF, r31	; 0x8004df <__brkval+0x1>
    371a:	e0 93 de 04 	sts	0x04DE, r30	; 0x8004de <__brkval>
    371e:	f9 01       	movw	r30, r18
    3720:	71 83       	std	Z+1, r23	; 0x01
    3722:	60 83       	st	Z, r22
    3724:	0f c0       	rjmp	.+30     	; 0x3744 <realloc+0x17a>
    3726:	cb 01       	movw	r24, r22
    3728:	0e 94 22 19 	call	0x3244	; 0x3244 <malloc>
    372c:	7c 01       	movw	r14, r24
    372e:	00 97       	sbiw	r24, 0x00	; 0
    3730:	59 f0       	breq	.+22     	; 0x3748 <realloc+0x17e>
    3732:	a8 01       	movw	r20, r16
    3734:	be 01       	movw	r22, r28
    3736:	0e 94 b9 1b 	call	0x3772	; 0x3772 <memcpy>
    373a:	ce 01       	movw	r24, r28
    373c:	0e 94 ba 19 	call	0x3374	; 0x3374 <free>
    3740:	c7 01       	movw	r24, r14
    3742:	04 c0       	rjmp	.+8      	; 0x374c <realloc+0x182>
    3744:	ce 01       	movw	r24, r28
    3746:	02 c0       	rjmp	.+4      	; 0x374c <realloc+0x182>
    3748:	80 e0       	ldi	r24, 0x00	; 0
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	cd b7       	in	r28, 0x3d	; 61
    374e:	de b7       	in	r29, 0x3e	; 62
    3750:	ee e0       	ldi	r30, 0x0E	; 14
    3752:	0c 94 07 1c 	jmp	0x380e	; 0x380e <__epilogue_restores__+0x8>

00003756 <abort>:
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	f8 94       	cli
    375c:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__do_global_dtors>

00003760 <memcpy_P>:
    3760:	fb 01       	movw	r30, r22
    3762:	dc 01       	movw	r26, r24
    3764:	02 c0       	rjmp	.+4      	; 0x376a <memcpy_P+0xa>
    3766:	05 90       	lpm	r0, Z+
    3768:	0d 92       	st	X+, r0
    376a:	41 50       	subi	r20, 0x01	; 1
    376c:	50 40       	sbci	r21, 0x00	; 0
    376e:	d8 f7       	brcc	.-10     	; 0x3766 <memcpy_P+0x6>
    3770:	08 95       	ret

00003772 <memcpy>:
    3772:	fb 01       	movw	r30, r22
    3774:	dc 01       	movw	r26, r24
    3776:	02 c0       	rjmp	.+4      	; 0x377c <memcpy+0xa>
    3778:	01 90       	ld	r0, Z+
    377a:	0d 92       	st	X+, r0
    377c:	41 50       	subi	r20, 0x01	; 1
    377e:	50 40       	sbci	r21, 0x00	; 0
    3780:	d8 f7       	brcc	.-10     	; 0x3778 <memcpy+0x6>
    3782:	08 95       	ret

00003784 <memset>:
    3784:	dc 01       	movw	r26, r24
    3786:	01 c0       	rjmp	.+2      	; 0x378a <memset+0x6>
    3788:	6d 93       	st	X+, r22
    378a:	41 50       	subi	r20, 0x01	; 1
    378c:	50 40       	sbci	r21, 0x00	; 0
    378e:	e0 f7       	brcc	.-8      	; 0x3788 <memset+0x4>
    3790:	08 95       	ret

00003792 <strcpy>:
    3792:	fb 01       	movw	r30, r22
    3794:	dc 01       	movw	r26, r24
    3796:	01 90       	ld	r0, Z+
    3798:	0d 92       	st	X+, r0
    379a:	00 20       	and	r0, r0
    379c:	e1 f7       	brne	.-8      	; 0x3796 <strcpy+0x4>
    379e:	08 95       	ret

000037a0 <strncpy>:
    37a0:	fb 01       	movw	r30, r22
    37a2:	dc 01       	movw	r26, r24
    37a4:	41 50       	subi	r20, 0x01	; 1
    37a6:	50 40       	sbci	r21, 0x00	; 0
    37a8:	48 f0       	brcs	.+18     	; 0x37bc <strncpy+0x1c>
    37aa:	01 90       	ld	r0, Z+
    37ac:	0d 92       	st	X+, r0
    37ae:	00 20       	and	r0, r0
    37b0:	c9 f7       	brne	.-14     	; 0x37a4 <strncpy+0x4>
    37b2:	01 c0       	rjmp	.+2      	; 0x37b6 <strncpy+0x16>
    37b4:	1d 92       	st	X+, r1
    37b6:	41 50       	subi	r20, 0x01	; 1
    37b8:	50 40       	sbci	r21, 0x00	; 0
    37ba:	e0 f7       	brcc	.-8      	; 0x37b4 <strncpy+0x14>
    37bc:	08 95       	ret

000037be <__mulshisi3>:
    37be:	b7 ff       	sbrs	r27, 7
    37c0:	0c 94 08 19 	jmp	0x3210	; 0x3210 <__muluhisi3>

000037c4 <__mulohisi3>:
    37c4:	0e 94 08 19 	call	0x3210	; 0x3210 <__muluhisi3>
    37c8:	82 1b       	sub	r24, r18
    37ca:	93 0b       	sbc	r25, r19
    37cc:	08 95       	ret

000037ce <__prologue_saves__>:
    37ce:	2f 92       	push	r2
    37d0:	3f 92       	push	r3
    37d2:	4f 92       	push	r4
    37d4:	5f 92       	push	r5
    37d6:	6f 92       	push	r6
    37d8:	7f 92       	push	r7
    37da:	8f 92       	push	r8
    37dc:	9f 92       	push	r9
    37de:	af 92       	push	r10
    37e0:	bf 92       	push	r11
    37e2:	cf 92       	push	r12
    37e4:	df 92       	push	r13
    37e6:	ef 92       	push	r14
    37e8:	ff 92       	push	r15
    37ea:	0f 93       	push	r16
    37ec:	1f 93       	push	r17
    37ee:	cf 93       	push	r28
    37f0:	df 93       	push	r29
    37f2:	cd b7       	in	r28, 0x3d	; 61
    37f4:	de b7       	in	r29, 0x3e	; 62
    37f6:	ca 1b       	sub	r28, r26
    37f8:	db 0b       	sbc	r29, r27
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	f8 94       	cli
    37fe:	de bf       	out	0x3e, r29	; 62
    3800:	0f be       	out	0x3f, r0	; 63
    3802:	cd bf       	out	0x3d, r28	; 61
    3804:	09 94       	ijmp

00003806 <__epilogue_restores__>:
    3806:	2a 88       	ldd	r2, Y+18	; 0x12
    3808:	39 88       	ldd	r3, Y+17	; 0x11
    380a:	48 88       	ldd	r4, Y+16	; 0x10
    380c:	5f 84       	ldd	r5, Y+15	; 0x0f
    380e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3810:	7d 84       	ldd	r7, Y+13	; 0x0d
    3812:	8c 84       	ldd	r8, Y+12	; 0x0c
    3814:	9b 84       	ldd	r9, Y+11	; 0x0b
    3816:	aa 84       	ldd	r10, Y+10	; 0x0a
    3818:	b9 84       	ldd	r11, Y+9	; 0x09
    381a:	c8 84       	ldd	r12, Y+8	; 0x08
    381c:	df 80       	ldd	r13, Y+7	; 0x07
    381e:	ee 80       	ldd	r14, Y+6	; 0x06
    3820:	fd 80       	ldd	r15, Y+5	; 0x05
    3822:	0c 81       	ldd	r16, Y+4	; 0x04
    3824:	1b 81       	ldd	r17, Y+3	; 0x03
    3826:	aa 81       	ldd	r26, Y+2	; 0x02
    3828:	b9 81       	ldd	r27, Y+1	; 0x01
    382a:	ce 0f       	add	r28, r30
    382c:	d1 1d       	adc	r29, r1
    382e:	0f b6       	in	r0, 0x3f	; 63
    3830:	f8 94       	cli
    3832:	de bf       	out	0x3e, r29	; 62
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	cd bf       	out	0x3d, r28	; 61
    3838:	ed 01       	movw	r28, r26
    383a:	08 95       	ret

0000383c <__do_global_dtors>:
    383c:	11 e0       	ldi	r17, 0x01	; 1
    383e:	cc e4       	ldi	r28, 0x4C	; 76
    3840:	d1 e0       	ldi	r29, 0x01	; 1
    3842:	04 c0       	rjmp	.+8      	; 0x384c <__do_global_dtors+0x10>
    3844:	fe 01       	movw	r30, r28
    3846:	0e 94 02 19 	call	0x3204	; 0x3204 <__tablejump2__>
    384a:	21 96       	adiw	r28, 0x01	; 1
    384c:	cd 34       	cpi	r28, 0x4D	; 77
    384e:	d1 07       	cpc	r29, r17
    3850:	c9 f7       	brne	.-14     	; 0x3844 <__do_global_dtors+0x8>
    3852:	f8 94       	cli

00003854 <__stop_program>:
    3854:	ff cf       	rjmp	.-2      	; 0x3854 <__stop_program>
