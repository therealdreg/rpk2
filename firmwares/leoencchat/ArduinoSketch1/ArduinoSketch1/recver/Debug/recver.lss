
recver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e6  00800100  00003932  000039c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003932  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000186  008002e6  008002e6  00003bac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003bac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003bdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000c28  00000000  00000000  00003c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001a440  00000000  00000000  00004844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004eb9  00000000  00000000  0001ec84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000067ed  00000000  00000000  00023b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002860  00000000  00000000  0002a32c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004faf  00000000  00000000  0002cb8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d56a  00000000  00000000  00031b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000cf8  00000000  00000000  0003f0a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 01 	jmp	0x298	; 0x298 <__ctors_end>
       4:	0c 94 b6 15 	jmp	0x2b6c	; 0x2b6c <__vector_1>
       8:	0c 94 dd 15 	jmp	0x2bba	; 0x2bba <__vector_2>
       c:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__vector_3>
      10:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__vector_4>
      14:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      18:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      1c:	0c 94 52 16 	jmp	0x2ca4	; 0x2ca4 <__vector_7>
      20:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      24:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      28:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__vector_10>
      2c:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__vector_11>
      30:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      34:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      38:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      3c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      40:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      44:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      48:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      4c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      50:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      54:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      58:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      5c:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <__vector_23>
      60:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      64:	0c 94 65 05 	jmp	0xaca	; 0xaca <__vector_25>
      68:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__vector_26>
      6c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      70:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      74:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      78:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      7c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      80:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      84:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      88:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      8c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      90:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      94:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      98:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      9c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      a0:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      a4:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      a8:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__bad_interrupt>
      ac:	ec 0c       	add	r14, r12
      ae:	ef 0c       	add	r14, r15
      b0:	de 0c       	add	r13, r14
      b2:	e2 0c       	add	r14, r2
      b4:	e8 0c       	add	r14, r8
      b6:	10 0d       	add	r17, r0
      b8:	10 0d       	add	r17, r0
      ba:	10 0d       	add	r17, r0
      bc:	f3 0c       	add	r15, r3
      be:	f7 0c       	add	r15, r7
      c0:	fb 0c       	add	r15, r11
      c2:	01 0d       	add	r16, r1
      c4:	05 0d       	add	r16, r5
      c6:	10 0d       	add	r17, r0
      c8:	0b 0d       	add	r16, r11

000000ca <__trampolines_end>:
      ca:	08 0b       	sbc	r16, r24
      cc:	00 02       	muls	r16, r16
      ce:	02 02       	muls	r16, r18
      d0:	00 00       	nop
      d2:	09 04       	cpc	r0, r9
      d4:	00 00       	nop
      d6:	01 02       	muls	r16, r17
      d8:	02 00       	.word	0x0002	; ????
      da:	00 05       	cpc	r16, r0
      dc:	24 00       	.word	0x0024	; ????
      de:	10 01       	movw	r2, r0
      e0:	05 24       	eor	r0, r5
      e2:	01 01       	movw	r0, r2
      e4:	01 04       	cpc	r0, r1
      e6:	24 02       	muls	r18, r20
      e8:	06 05       	cpc	r16, r6
      ea:	24 06       	cpc	r2, r20
      ec:	00 01       	movw	r0, r0
      ee:	07 05       	cpc	r16, r7
      f0:	81 03       	fmuls	r16, r17
      f2:	10 00       	.word	0x0010	; ????
      f4:	40 09       	sbc	r20, r0
      f6:	04 01       	movw	r0, r8
      f8:	00 02       	muls	r16, r16
      fa:	0a 00       	.word	0x000a	; ????
      fc:	00 00       	nop
      fe:	07 05       	cpc	r16, r7
     100:	02 02       	muls	r16, r18
     102:	40 00       	.word	0x0040	; ????
     104:	00 07       	cpc	r16, r16
     106:	05 83       	std	Z+5, r16	; 0x05
     108:	02 40       	sbci	r16, 0x02	; 2
	...

0000010c <USB_DeviceDescriptorIAD>:
     10c:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
     11c:	03 01                                               ..

0000011e <STRING_MANUFACTURER>:
     11e:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

0000012a <STRING_PRODUCT>:
     12a:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

0000013b <STRING_LANGUAGE>:
     13b:	04 03 09 04                                         ....

0000013f <digital_pin_to_timer_PGM>:
     13f:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

0000015e <digital_pin_to_bit_mask_PGM>:
     15e:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     16e:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

0000017d <digital_pin_to_port_PGM>:
     17d:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     18d:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

0000019c <port_to_output_PGM>:
     19c:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

000001aa <port_to_mode_PGM>:
     1aa:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

000001b8 <_ZL18MODEM_CONFIG_TABLE>:
     1b8:	00 3e 80 00 52 f4 f4 d0 00 34 15 00 4f f4 f4 d0     .>..R....4..O...
     1c8:	00 1a 0b 00 9d f4 f4 d0 00 0d 05 01 3b f4 f4 d0     ............;...
     1d8:	00 06 83 02 75 f3 f3 d0 00 03 41 04 ea f2 f2 d0     ....u.....A.....
     1e8:	00 02 2c 07 ae e2 e2 d0 00 01 00 08 00 e1 e1 d0     ..,.............
     1f8:	00 00 80 10 00 e0 e0 d0 00 02 40 03 33 42 42 d0     ..........@.3BB.
     208:	01 3e 80 00 52 f4 f5 d0 01 34 15 00 4f f4 f4 d0     .>..R....4..O...
     218:	01 1a 0b 00 9d f4 f4 d0 01 0d 05 01 3b f4 f4 d0     ............;...
     228:	01 06 83 02 75 f3 f3 d0 01 03 41 04 ea f2 f2 d0     ....u.....A.....
     238:	01 02 2c 07 ae e2 e2 d0 01 01 00 08 00 e1 e1 d0     ..,.............
     248:	01 00 80 10 00 e0 e0 d0 01 02 40 03 33 42 42 d0     ..........@.3BB.
     258:	08 7d 00 00 10 88 88 d0 08 68 2b 00 10 f1 f1 d0     .}.......h+.....
     268:	08 34 15 00 10 f5 f5 d0 08 1a 0b 00 10 f4 f4 d0     .4..............
     278:	08 0d 05 00 10 f3 f3 d0 08 06 83 00 10 f2 f2 d0     ................
     288:	08 03 e8 00 10 e2 e2 d0                             ........

00000290 <__ctors_start>:
     290:	a7 01       	movw	r20, r14
     292:	11 04       	cpc	r1, r1
     294:	c7 05       	cpc	r28, r7
     296:	3b 10       	cpse	r3, r11

00000298 <__ctors_end>:
     298:	11 24       	eor	r1, r1
     29a:	1f be       	out	0x3f, r1	; 63
     29c:	cf ef       	ldi	r28, 0xFF	; 255
     29e:	da e0       	ldi	r29, 0x0A	; 10
     2a0:	de bf       	out	0x3e, r29	; 62
     2a2:	cd bf       	out	0x3d, r28	; 61

000002a4 <__do_copy_data>:
     2a4:	12 e0       	ldi	r17, 0x02	; 2
     2a6:	a0 e0       	ldi	r26, 0x00	; 0
     2a8:	b1 e0       	ldi	r27, 0x01	; 1
     2aa:	e2 e3       	ldi	r30, 0x32	; 50
     2ac:	f9 e3       	ldi	r31, 0x39	; 57
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <__do_copy_data+0x10>
     2b0:	05 90       	lpm	r0, Z+
     2b2:	0d 92       	st	X+, r0
     2b4:	a6 3e       	cpi	r26, 0xE6	; 230
     2b6:	b1 07       	cpc	r27, r17
     2b8:	d9 f7       	brne	.-10     	; 0x2b0 <__do_copy_data+0xc>

000002ba <__do_clear_bss>:
     2ba:	24 e0       	ldi	r18, 0x04	; 4
     2bc:	a6 ee       	ldi	r26, 0xE6	; 230
     2be:	b2 e0       	ldi	r27, 0x02	; 2
     2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <.do_clear_bss_start>

000002c2 <.do_clear_bss_loop>:
     2c2:	1d 92       	st	X+, r1

000002c4 <.do_clear_bss_start>:
     2c4:	ac 36       	cpi	r26, 0x6C	; 108
     2c6:	b2 07       	cpc	r27, r18
     2c8:	e1 f7       	brne	.-8      	; 0x2c2 <.do_clear_bss_loop>

000002ca <__do_global_ctors>:
     2ca:	11 e0       	ldi	r17, 0x01	; 1
     2cc:	cc e4       	ldi	r28, 0x4C	; 76
     2ce:	d1 e0       	ldi	r29, 0x01	; 1
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <__do_global_ctors+0x10>
     2d2:	21 97       	sbiw	r28, 0x01	; 1
     2d4:	fe 01       	movw	r30, r28
     2d6:	0e 94 82 19 	call	0x3304	; 0x3304 <__tablejump2__>
     2da:	c8 34       	cpi	r28, 0x48	; 72
     2dc:	d1 07       	cpc	r29, r17
     2de:	c9 f7       	brne	.-14     	; 0x2d2 <__do_global_ctors+0x8>
     2e0:	0e 94 f5 05 	call	0xbea	; 0xbea <main>
     2e4:	0c 94 97 1c 	jmp	0x392e	; 0x392e <_exit>

000002e8 <__bad_interrupt>:
     2e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002ec <_Z18switch_usb_to_at90v>:
const int MAX_BUFF_SIZE = 40;
const uint16_t MAX_REPLY_TIME_MS = 1000;

void switch_usb_to_at90(void)
{
    set_bit(DDRD, DDD7);
     2ec:	57 9a       	sbi	0x0a, 7	; 10
    delay(500);
     2ee:	64 ef       	ldi	r22, 0xF4	; 244
     2f0:	71 e0       	ldi	r23, 0x01	; 1
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 42 0c 	call	0x1884	; 0x1884 <delay>
    clear_bit(PORTD, PD7);
     2fa:	5f 98       	cbi	0x0b, 7	; 11
    delay(500);
     2fc:	64 ef       	ldi	r22, 0xF4	; 244
     2fe:	71 e0       	ldi	r23, 0x01	; 1
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 42 0c 	call	0x1884	; 0x1884 <delay>
    clear_bit(PORTF, PF1);
     308:	89 98       	cbi	0x11, 1	; 17
    delay(500);
     30a:	64 ef       	ldi	r22, 0xF4	; 244
     30c:	71 e0       	ldi	r23, 0x01	; 1
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 42 0c 	call	0x1884	; 0x1884 <delay>
    set_bit(DDRF, DDF0);
     316:	80 9a       	sbi	0x10, 0	; 16
    delay(500);
     318:	64 ef       	ldi	r22, 0xF4	; 244
     31a:	71 e0       	ldi	r23, 0x01	; 1
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 42 0c 	call	0x1884	; 0x1884 <delay>
    set_bit(PORTF, PF0);
     324:	88 9a       	sbi	0x11, 0	; 17
    delay(500);
     326:	64 ef       	ldi	r22, 0xF4	; 244
     328:	71 e0       	ldi	r23, 0x01	; 1
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 42 0c 	call	0x1884	; 0x1884 <delay>
    set_bit(DDRF, DDF1);
     332:	81 9a       	sbi	0x10, 1	; 16
    delay(500);
     334:	64 ef       	ldi	r22, 0xF4	; 244
     336:	71 e0       	ldi	r23, 0x01	; 1
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 42 0c 	call	0x1884	; 0x1884 <delay>
    set_bit(PORTF, PF1);
     340:	89 9a       	sbi	0x11, 1	; 17
    delay(500);
     342:	64 ef       	ldi	r22, 0xF4	; 244
     344:	71 e0       	ldi	r23, 0x01	; 1
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <delay>

0000034e <_GLOBAL__sub_I__Z5Blinkhhhh>:
#define RFM69_CS      7 
#define RFM69_RST     4  
#define LED_1           8
#define LED_2           9

RH_RF69 rf69(RFM69_CS, RFM69_INT);
     34e:	2a e4       	ldi	r18, 0x4A	; 74
     350:	34 e0       	ldi	r19, 0x04	; 4
     352:	43 e0       	ldi	r20, 0x03	; 3
     354:	67 e0       	ldi	r22, 0x07	; 7
     356:	86 ee       	ldi	r24, 0xE6	; 230
     358:	92 e0       	ldi	r25, 0x02	; 2
     35a:	0c 94 9d 10 	jmp	0x213a	; 0x213a <_ZN7RH_RF69C1EhhR12RHGenericSPI>

0000035e <setup>:
    set_bit(PORTF, PF1);
    delay(500);
}

void setup() 
{
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	60 97       	sbiw	r28, 0x10	; 16
     36c:	0f b6       	in	r0, 0x3f	; 63
     36e:	f8 94       	cli
     370:	de bf       	out	0x3e, r29	; 62
     372:	0f be       	out	0x3f, r0	; 63
     374:	cd bf       	out	0x3d, r28	; 61
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     376:	26 e0       	ldi	r18, 0x06	; 6
     378:	40 e8       	ldi	r20, 0x80	; 128
     37a:	55 e2       	ldi	r21, 0x25	; 37
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	8a e9       	ldi	r24, 0x9A	; 154
     382:	93 e0       	ldi	r25, 0x03	; 3
     384:	0e 94 00 05 	call	0xa00	; 0xa00 <_ZN14HardwareSerial5beginEmh>
  Serial1.begin(9600);
  //while (!Serial) { delay(1); }   // wait until serial console is open, remove if not tethered to computer

 switch_usb_to_at90();
     388:	0e 94 76 01 	call	0x2ec	; 0x2ec <_Z18switch_usb_to_at90v>
    
 pinMode(A5, OUTPUT);     
     38c:	61 e0       	ldi	r22, 0x01	; 1
     38e:	87 e1       	ldi	r24, 0x17	; 23
     390:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <pinMode>
 digitalWrite(A5, HIGH);
     394:	61 e0       	ldi	r22, 0x01	; 1
     396:	87 e1       	ldi	r24, 0x17	; 23
     398:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <digitalWrite>

  pinMode(LED_1, OUTPUT);
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	88 e0       	ldi	r24, 0x08	; 8
     3a0:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <pinMode>
  pinMode(LED_2, OUTPUT);
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	89 e0       	ldi	r24, 0x09	; 9
     3a8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <pinMode>
      
  pinMode(RFM69_RST, OUTPUT);
     3ac:	61 e0       	ldi	r22, 0x01	; 1
     3ae:	84 e0       	ldi	r24, 0x04	; 4
     3b0:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <pinMode>
  digitalWrite(RFM69_RST, LOW);
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	84 e0       	ldi	r24, 0x04	; 4
     3b8:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <digitalWrite>

  Serial1.println("\r\n\r\nArduino Leonardo RFM69 RX Test!");
     3bc:	67 e3       	ldi	r22, 0x37	; 55
     3be:	71 e0       	ldi	r23, 0x01	; 1
     3c0:	8a e9       	ldi	r24, 0x9A	; 154
     3c2:	93 e0       	ldi	r25, 0x03	; 3
     3c4:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN5Print7printlnEPKc>
  Serial1.println();
     3c8:	8a e9       	ldi	r24, 0x9A	; 154
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN5Print7printlnEv>

  // manual reset
  digitalWrite(RFM69_RST, HIGH);
     3d0:	61 e0       	ldi	r22, 0x01	; 1
     3d2:	84 e0       	ldi	r24, 0x04	; 4
     3d4:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <digitalWrite>
  delay(10);
     3d8:	6a e0       	ldi	r22, 0x0A	; 10
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 42 0c 	call	0x1884	; 0x1884 <delay>
  digitalWrite(RFM69_RST, LOW);
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	84 e0       	ldi	r24, 0x04	; 4
     3e8:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <digitalWrite>
  delay(10);
     3ec:	6a e0       	ldi	r22, 0x0A	; 10
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 42 0c 	call	0x1884	; 0x1884 <delay>
  
  if (!rf69.init()) {
     3f8:	86 ee       	ldi	r24, 0xE6	; 230
     3fa:	92 e0       	ldi	r25, 0x02	; 2
     3fc:	0e 94 ce 13 	call	0x279c	; 0x279c <_ZN7RH_RF694initEv>
     400:	81 11       	cpse	r24, r1
     402:	07 c0       	rjmp	.+14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
    Serial1.println("RFM69 radio init failed");
     404:	6b e5       	ldi	r22, 0x5B	; 91
     406:	71 e0       	ldi	r23, 0x01	; 1
     408:	8a e9       	ldi	r24, 0x9A	; 154
     40a:	93 e0       	ldi	r25, 0x03	; 3
     40c:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN5Print7printlnEPKc>
     410:	ff cf       	rjmp	.-2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
    while (1);
  }
  Serial1.println("RFM69 radio init OK!");
     412:	63 e7       	ldi	r22, 0x73	; 115
     414:	71 e0       	ldi	r23, 0x01	; 1
     416:	8a e9       	ldi	r24, 0x9A	; 154
     418:	93 e0       	ldi	r25, 0x03	; 3
     41a:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN5Print7printlnEPKc>
  
  // Defaults after init are 434.0MHz, modulation GFSK_Rb250Fd250, +13dbM (for low power module)
  // No encryption
  if (!rf69.setFrequency(RF69_FREQ)) {
     41e:	0d ec       	ldi	r16, 0xCD	; 205
     420:	1c ec       	ldi	r17, 0xCC	; 204
     422:	2c e4       	ldi	r18, 0x4C	; 76
     424:	3d e3       	ldi	r19, 0x3D	; 61
     426:	40 e0       	ldi	r20, 0x00	; 0
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	69 ed       	ldi	r22, 0xD9	; 217
     42c:	73 e4       	ldi	r23, 0x43	; 67
     42e:	86 ee       	ldi	r24, 0xE6	; 230
     430:	92 e0       	ldi	r25, 0x02	; 2
     432:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN7RH_RF6912setFrequencyEff>
     436:	81 11       	cpse	r24, r1
     438:	06 c0       	rjmp	.+12     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
    Serial1.println("setFrequency failed");
     43a:	68 e8       	ldi	r22, 0x88	; 136
     43c:	71 e0       	ldi	r23, 0x01	; 1
     43e:	8a e9       	ldi	r24, 0x9A	; 154
     440:	93 e0       	ldi	r25, 0x03	; 3
     442:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN5Print7printlnEPKc>
  }

  // If you are using a high power RF69 eg RFM69HW, you *must* set a Tx power with the
  // ishighpowermodule flag set like this:
  rf69.setTxPower(20, true);  // range from 14-20 for power, 2nd arg must be true for 69HCW
     446:	41 e0       	ldi	r20, 0x01	; 1
     448:	64 e1       	ldi	r22, 0x14	; 20
     44a:	86 ee       	ldi	r24, 0xE6	; 230
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN7RH_RF6910setTxPowerEab>

  // The encryption key has to be the same as the one in the server
  uint8_t key[] = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
     452:	80 e1       	ldi	r24, 0x10	; 16
     454:	e7 e2       	ldi	r30, 0x27	; 39
     456:	f1 e0       	ldi	r31, 0x01	; 1
     458:	de 01       	movw	r26, r28
     45a:	11 96       	adiw	r26, 0x01	; 1
     45c:	01 90       	ld	r0, Z+
     45e:	0d 92       	st	X+, r0
     460:	8a 95       	dec	r24
     462:	e1 f7       	brne	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
  rf69.setEncryptionKey(key);
     464:	be 01       	movw	r22, r28
     466:	6f 5f       	subi	r22, 0xFF	; 255
     468:	7f 4f       	sbci	r23, 0xFF	; 255
     46a:	86 ee       	ldi	r24, 0xE6	; 230
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	0e 94 b3 13 	call	0x2766	; 0x2766 <_ZN7RH_RF6916setEncryptionKeyEPh>
  


  Serial1.print("RFM69 radio @");  Serial1.print((int)RF69_FREQ);  Serial1.println(" MHz");
     472:	6c e9       	ldi	r22, 0x9C	; 156
     474:	71 e0       	ldi	r23, 0x01	; 1
     476:	8a e9       	ldi	r24, 0x9A	; 154
     478:	93 e0       	ldi	r25, 0x03	; 3
     47a:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN5Print5printEPKc>
     47e:	4a e0       	ldi	r20, 0x0A	; 10
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	62 eb       	ldi	r22, 0xB2	; 178
     484:	71 e0       	ldi	r23, 0x01	; 1
     486:	8a e9       	ldi	r24, 0x9A	; 154
     488:	93 e0       	ldi	r25, 0x03	; 3
     48a:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN5Print5printEii>
     48e:	6a ea       	ldi	r22, 0xAA	; 170
     490:	71 e0       	ldi	r23, 0x01	; 1
     492:	8a e9       	ldi	r24, 0x9A	; 154
     494:	93 e0       	ldi	r25, 0x03	; 3
     496:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN5Print7printlnEPKc>
}
     49a:	60 96       	adiw	r28, 0x10	; 16
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	08 95       	ret

000004b0 <_Z6rfreadv>:

void rfread() {
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	ed 97       	sbiw	r28, 0x3d	; 61
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	cd bf       	out	0x3d, r28	; 61
	 if (rf69.available()) {
     4c4:	86 ee       	ldi	r24, 0xE6	; 230
     4c6:	92 e0       	ldi	r25, 0x02	; 2
     4c8:	0e 94 3a 12 	call	0x2474	; 0x2474 <_ZN7RH_RF699availableEv>
     4cc:	88 23       	and	r24, r24
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <_Z6rfreadv+0x22>
     4d0:	43 c0       	rjmp	.+134    	; 0x558 <_Z6rfreadv+0xa8>
		 // Should be a message for us now
		 uint8_t buf[RH_RF69_MAX_MESSAGE_LEN];
		 uint8_t len = sizeof(buf);
     4d2:	8c e3       	ldi	r24, 0x3C	; 60
     4d4:	8d af       	std	Y+61, r24	; 0x3d
		 if (rf69.recv(buf, &len)) {
     4d6:	ae 01       	movw	r20, r28
     4d8:	43 5c       	subi	r20, 0xC3	; 195
     4da:	5f 4f       	sbci	r21, 0xFF	; 255
     4dc:	be 01       	movw	r22, r28
     4de:	6f 5f       	subi	r22, 0xFF	; 255
     4e0:	7f 4f       	sbci	r23, 0xFF	; 255
     4e2:	86 ee       	ldi	r24, 0xE6	; 230
     4e4:	92 e0       	ldi	r25, 0x02	; 2
     4e6:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_ZN7RH_RF694recvEPhS0_>
     4ea:	88 23       	and	r24, r24
     4ec:	a9 f1       	breq	.+106    	; 0x558 <_Z6rfreadv+0xa8>
			 if (!len) return;
     4ee:	8d ad       	ldd	r24, Y+61	; 0x3d
     4f0:	88 23       	and	r24, r24
     4f2:	91 f1       	breq	.+100    	; 0x558 <_Z6rfreadv+0xa8>
			 buf[len] = 0;
     4f4:	e1 e0       	ldi	r30, 0x01	; 1
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	ec 0f       	add	r30, r28
     4fa:	fd 1f       	adc	r31, r29
     4fc:	e8 0f       	add	r30, r24
     4fe:	f1 1d       	adc	r31, r1
     500:	10 82       	st	Z, r1
			 Serial1.print("Received [");
     502:	6f ea       	ldi	r22, 0xAF	; 175
     504:	71 e0       	ldi	r23, 0x01	; 1
     506:	8a e9       	ldi	r24, 0x9A	; 154
     508:	93 e0       	ldi	r25, 0x03	; 3
     50a:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN5Print5printEPKc>
			 Serial1.print(len);
     50e:	4a e0       	ldi	r20, 0x0A	; 10
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	6d ad       	ldd	r22, Y+61	; 0x3d
     514:	8a e9       	ldi	r24, 0x9A	; 154
     516:	93 e0       	ldi	r25, 0x03	; 3
     518:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_ZN5Print5printEhi>
			 Serial1.print("]: ");
     51c:	6a eb       	ldi	r22, 0xBA	; 186
     51e:	71 e0       	ldi	r23, 0x01	; 1
     520:	8a e9       	ldi	r24, 0x9A	; 154
     522:	93 e0       	ldi	r25, 0x03	; 3
     524:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN5Print5printEPKc>
			 Serial1.println((char*)buf);
     528:	be 01       	movw	r22, r28
     52a:	6f 5f       	subi	r22, 0xFF	; 255
     52c:	7f 4f       	sbci	r23, 0xFF	; 255
     52e:	8a e9       	ldi	r24, 0x9A	; 154
     530:	93 e0       	ldi	r25, 0x03	; 3
     532:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN5Print7printlnEPKc>
			 Serial1.print("RSSI: ");
     536:	6e eb       	ldi	r22, 0xBE	; 190
     538:	71 e0       	ldi	r23, 0x01	; 1
     53a:	8a e9       	ldi	r24, 0x9A	; 154
     53c:	93 e0       	ldi	r25, 0x03	; 3
     53e:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN5Print5printEPKc>
			 Serial1.println(rf69.lastRssi(), DEC);
     542:	86 ee       	ldi	r24, 0xE6	; 230
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <_ZN15RHGenericDriver8lastRssiEv>
     54a:	4a e0       	ldi	r20, 0x0A	; 10
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	bc 01       	movw	r22, r24
     550:	8a e9       	ldi	r24, 0x9A	; 154
     552:	93 e0       	ldi	r25, 0x03	; 3
     554:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN5Print7printlnEii>
		 }
	 }
}
     558:	ed 96       	adiw	r28, 0x3d	; 61
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	de bf       	out	0x3e, r29	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	cd bf       	out	0x3d, r28	; 61
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	08 95       	ret

0000056a <_Z12serial_to_rfv>:

void serial_to_rf() {
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	c2 54       	subi	r28, 0x42	; 66
     578:	d1 09       	sbc	r29, r1
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	f8 94       	cli
     57e:	de bf       	out	0x3e, r29	; 62
     580:	0f be       	out	0x3f, r0	; 63
     582:	cd bf       	out	0x3d, r28	; 61

	// Make sure serial is available
	while (Serial1.available()==0) {  }
     584:	8a e9       	ldi	r24, 0x9A	; 154
     586:	93 e0       	ldi	r25, 0x03	; 3
     588:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN14HardwareSerial9availableEv>
     58c:	89 2b       	or	r24, r25
     58e:	d1 f3       	breq	.-12     	; 0x584 <_Z12serial_to_rfv+0x1a>

	// Read data from serial
	String data = Serial1.readString();
     590:	6a e9       	ldi	r22, 0x9A	; 154
     592:	73 e0       	ldi	r23, 0x03	; 3
     594:	ce 01       	movw	r24, r28
     596:	cd 96       	adiw	r24, 0x3d	; 61
     598:	0e 94 74 07 	call	0xee8	; 0xee8 <_ZN6Stream10readStringEv>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	4c e3       	ldi	r20, 0x3C	; 60
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	8e 01       	movw	r16, r28
     5a6:	0f 5f       	subi	r16, 0xFF	; 255
     5a8:	1f 4f       	sbci	r17, 0xFF	; 255
     5aa:	b8 01       	movw	r22, r16
     5ac:	ce 01       	movw	r24, r28
     5ae:	cd 96       	adiw	r24, 0x3d	; 61
     5b0:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <_ZNK6String8getBytesEPhjj>
	char rfdata[RH_RF69_MAX_MESSAGE_LEN];
	data.toCharArray(rfdata, RH_RF69_MAX_MESSAGE_LEN);
	// Send a message!
	rf69.send((uint8_t *)rfdata, strlen(rfdata));
     5b4:	f8 01       	movw	r30, r16
     5b6:	01 90       	ld	r0, Z+
     5b8:	00 20       	and	r0, r0
     5ba:	e9 f7       	brne	.-6      	; 0x5b6 <_Z12serial_to_rfv+0x4c>
     5bc:	31 97       	sbiw	r30, 0x01	; 1
     5be:	af 01       	movw	r20, r30
     5c0:	40 1b       	sub	r20, r16
     5c2:	51 0b       	sbc	r21, r17
     5c4:	b8 01       	movw	r22, r16
     5c6:	86 ee       	ldi	r24, 0xE6	; 230
     5c8:	92 e0       	ldi	r25, 0x02	; 2
     5ca:	0e 94 6d 12 	call	0x24da	; 0x24da <_ZN7RH_RF694sendEPKhh>
	rf69.waitPacketSent();
     5ce:	86 ee       	ldi	r24, 0xE6	; 230
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <_ZN15RHGenericDriver14waitPacketSentEv>
	// Send own message through serial
	Serial.print("Leo: "); Serial.println(data);
     5d6:	65 ec       	ldi	r22, 0xC5	; 197
     5d8:	71 e0       	ldi	r23, 0x01	; 1
     5da:	89 e4       	ldi	r24, 0x49	; 73
     5dc:	93 e0       	ldi	r25, 0x03	; 3
     5de:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN5Print5printEPKc>
     5e2:	be 01       	movw	r22, r28
     5e4:	63 5c       	subi	r22, 0xC3	; 195
     5e6:	7f 4f       	sbci	r23, 0xFF	; 255
     5e8:	89 e4       	ldi	r24, 0x49	; 73
     5ea:	93 e0       	ldi	r25, 0x03	; 3
     5ec:	0e 94 62 06 	call	0xcc4	; 0xcc4 <_ZN5Print7printlnERK6String>

	// Make sure serial is available
	while (Serial1.available()==0) {  }

	// Read data from serial
	String data = Serial1.readString();
     5f0:	ce 01       	movw	r24, r28
     5f2:	cd 96       	adiw	r24, 0x3d	; 61
     5f4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <_ZN6StringD1Ev>
	// Send a message!
	rf69.send((uint8_t *)rfdata, strlen(rfdata));
	rf69.waitPacketSent();
	// Send own message through serial
	Serial.print("Leo: "); Serial.println(data);
}
     5f8:	ce 5b       	subi	r28, 0xBE	; 190
     5fa:	df 4f       	sbci	r29, 0xFF	; 255
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	08 95       	ret

00000610 <loop>:

void loop() {
	

	serial_to_rf();
     610:	0e 94 b5 02 	call	0x56a	; 0x56a <_Z12serial_to_rfv>
	rfread();
     614:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <_Z6rfreadv>

00000618 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	1f 92       	push	r1
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	69 83       	std	Y+1, r22	; 0x01
     624:	dc 01       	movw	r26, r24
     626:	ed 91       	ld	r30, X+
     628:	fc 91       	ld	r31, X
     62a:	02 80       	ldd	r0, Z+2	; 0x02
     62c:	f3 81       	ldd	r31, Z+3	; 0x03
     62e:	e0 2d       	mov	r30, r0
     630:	41 e0       	ldi	r20, 0x01	; 1
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	be 01       	movw	r22, r28
     636:	6f 5f       	subi	r22, 0xFF	; 255
     638:	7f 4f       	sbci	r23, 0xFF	; 255
     63a:	09 95       	icall
     63c:	0f 90       	pop	r0
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <_ZN7Serial_4peekEv>:
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	ec 01       	movw	r28, r24
     64a:	8c 85       	ldd	r24, Y+12	; 0x0c
     64c:	9d 85       	ldd	r25, Y+13	; 0x0d
     64e:	97 ff       	sbrs	r25, 7
     650:	05 c0       	rjmp	.+10     	; 0x65c <_ZN7Serial_4peekEv+0x18>
     652:	82 e0       	ldi	r24, 0x02	; 2
     654:	0e 94 94 08 	call	0x1128	; 0x1128 <_Z8USB_Recvh>
     658:	9d 87       	std	Y+13, r25	; 0x0d
     65a:	8c 87       	std	Y+12, r24	; 0x0c
     65c:	8c 85       	ldd	r24, Y+12	; 0x0c
     65e:	9d 85       	ldd	r25, Y+13	; 0x0d
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	08 95       	ret

00000666 <_ZN7Serial_17availableForWriteEv>:
     666:	83 e0       	ldi	r24, 0x03	; 3
     668:	0e 94 ab 08 	call	0x1156	; 0x1156 <_Z13USB_SendSpaceh>
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	08 95       	ret

00000670 <_ZN7Serial_5flushEv>:
     670:	83 e0       	ldi	r24, 0x03	; 3
     672:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <_Z9USB_Flushh>

00000676 <_ZN7Serial_9availableEv>:
     676:	fc 01       	movw	r30, r24
     678:	84 85       	ldd	r24, Z+12	; 0x0c
     67a:	95 85       	ldd	r25, Z+13	; 0x0d
     67c:	97 fd       	sbrc	r25, 7
     67e:	06 c0       	rjmp	.+12     	; 0x68c <_ZN7Serial_9availableEv+0x16>
     680:	82 e0       	ldi	r24, 0x02	; 2
     682:	0e 94 3f 08 	call	0x107e	; 0x107e <_Z13USB_Availableh>
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	08 95       	ret
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	0e 94 3f 08 	call	0x107e	; 0x107e <_Z13USB_Availableh>
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	08 95       	ret

00000696 <_ZN7Serial_4readEv>:
     696:	fc 01       	movw	r30, r24
     698:	84 85       	ldd	r24, Z+12	; 0x0c
     69a:	95 85       	ldd	r25, Z+13	; 0x0d
     69c:	97 fd       	sbrc	r25, 7
     69e:	05 c0       	rjmp	.+10     	; 0x6aa <_ZN7Serial_4readEv+0x14>
     6a0:	2f ef       	ldi	r18, 0xFF	; 255
     6a2:	3f ef       	ldi	r19, 0xFF	; 255
     6a4:	35 87       	std	Z+13, r19	; 0x0d
     6a6:	24 87       	std	Z+12, r18	; 0x0c
     6a8:	08 95       	ret
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	0c 94 94 08 	jmp	0x1128	; 0x1128 <_Z8USB_Recvh>

000006b0 <_ZN7Serial_5writeEPKhj>:
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	ec 01       	movw	r28, r24
     6b6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_ZL12_usbLineInfo+0x7>
     6ba:	88 23       	and	r24, r24
     6bc:	31 f0       	breq	.+12     	; 0x6ca <_ZN7Serial_5writeEPKhj+0x1a>
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	0e 94 c5 08 	call	0x118a	; 0x118a <_Z8USB_SendhPKvi>
     6c4:	18 16       	cp	r1, r24
     6c6:	19 06       	cpc	r1, r25
     6c8:	34 f0       	brlt	.+12     	; 0x6d6 <_ZN7Serial_5writeEPKhj+0x26>
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	9b 83       	std	Y+3, r25	; 0x03
     6d0:	8a 83       	std	Y+2, r24	; 0x02
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <_Z16isLUFAbootloaderv>:
     6dc:	ee ef       	ldi	r30, 0xFE	; 254
     6de:	ff e7       	ldi	r31, 0x7F	; 127
     6e0:	25 91       	lpm	r18, Z+
     6e2:	34 91       	lpm	r19, Z
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	2b 3f       	cpi	r18, 0xFB	; 251
     6e8:	3c 4d       	sbci	r19, 0xDC	; 220
     6ea:	09 f0       	breq	.+2      	; 0x6ee <_Z16isLUFAbootloaderv+0x12>
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	08 95       	ret

000006f0 <_Z16CDC_GetInterfacePh>:
     6f0:	fc 01       	movw	r30, r24
     6f2:	90 81       	ld	r25, Z
     6f4:	9e 5f       	subi	r25, 0xFE	; 254
     6f6:	90 83       	st	Z, r25
     6f8:	42 e4       	ldi	r20, 0x42	; 66
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	6a ec       	ldi	r22, 0xCA	; 202
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	80 e8       	ldi	r24, 0x80	; 128
     702:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <_Z15USB_SendControlhPKvi>

00000706 <_Z9CDC_SetupR8USBSetup>:
     706:	fc 01       	movw	r30, r24
     708:	81 81       	ldd	r24, Z+1	; 0x01
     70a:	90 81       	ld	r25, Z
     70c:	91 3a       	cpi	r25, 0xA1	; 161
     70e:	59 f4       	brne	.+22     	; 0x726 <_Z9CDC_SetupR8USBSetup+0x20>
     710:	81 32       	cpi	r24, 0x21	; 33
     712:	09 f0       	breq	.+2      	; 0x716 <_Z9CDC_SetupR8USBSetup+0x10>
     714:	65 c0       	rjmp	.+202    	; 0x7e0 <_Z9CDC_SetupR8USBSetup+0xda>
     716:	47 e0       	ldi	r20, 0x07	; 7
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	6e e0       	ldi	r22, 0x0E	; 14
     71c:	71 e0       	ldi	r23, 0x01	; 1
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z15USB_SendControlhPKvi>
     724:	5b c0       	rjmp	.+182    	; 0x7dc <_Z9CDC_SetupR8USBSetup+0xd6>
     726:	91 32       	cpi	r25, 0x21	; 33
     728:	09 f0       	breq	.+2      	; 0x72c <_Z9CDC_SetupR8USBSetup+0x26>
     72a:	5a c0       	rjmp	.+180    	; 0x7e0 <_Z9CDC_SetupR8USBSetup+0xda>
     72c:	83 32       	cpi	r24, 0x23	; 35
     72e:	69 f4       	brne	.+26     	; 0x74a <_Z9CDC_SetupR8USBSetup+0x44>
     730:	82 81       	ldd	r24, Z+2	; 0x02
     732:	93 81       	ldd	r25, Z+3	; 0x03
     734:	a0 e0       	ldi	r26, 0x00	; 0
     736:	b0 e0       	ldi	r27, 0x00	; 0
     738:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_ZL10breakValue>
     73c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_ZL10breakValue+0x1>
     740:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <_ZL10breakValue+0x2>
     744:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <_ZL10breakValue+0x3>
     748:	49 c0       	rjmp	.+146    	; 0x7dc <_Z9CDC_SetupR8USBSetup+0xd6>
     74a:	80 32       	cpi	r24, 0x20	; 32
     74c:	39 f4       	brne	.+14     	; 0x75c <_Z9CDC_SetupR8USBSetup+0x56>
     74e:	67 e0       	ldi	r22, 0x07	; 7
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	8e e0       	ldi	r24, 0x0E	; 14
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	0e 94 9c 09 	call	0x1338	; 0x1338 <_Z15USB_RecvControlPvi>
     75a:	40 c0       	rjmp	.+128    	; 0x7dc <_Z9CDC_SetupR8USBSetup+0xd6>
     75c:	82 32       	cpi	r24, 0x22	; 34
     75e:	09 f0       	breq	.+2      	; 0x762 <_Z9CDC_SetupR8USBSetup+0x5c>
     760:	3d c0       	rjmp	.+122    	; 0x7dc <_Z9CDC_SetupR8USBSetup+0xd6>
     762:	82 81       	ldd	r24, Z+2	; 0x02
     764:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <_ZL12_usbLineInfo+0x7>
     768:	0e 94 6e 03 	call	0x6dc	; 0x6dc <_Z16isLUFAbootloaderv>
     76c:	88 23       	and	r24, r24
     76e:	19 f0       	breq	.+6      	; 0x776 <_Z9CDC_SetupR8USBSetup+0x70>
     770:	ee ef       	ldi	r30, 0xFE	; 254
     772:	fa e0       	ldi	r31, 0x0A	; 10
     774:	02 c0       	rjmp	.+4      	; 0x77a <_Z9CDC_SetupR8USBSetup+0x74>
     776:	e0 e0       	ldi	r30, 0x00	; 0
     778:	f8 e0       	ldi	r31, 0x08	; 8
     77a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_ZL12_usbLineInfo>
     77e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <_ZL12_usbLineInfo+0x1>
     782:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <_ZL12_usbLineInfo+0x2>
     786:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <_ZL12_usbLineInfo+0x3>
     78a:	80 3b       	cpi	r24, 0xB0	; 176
     78c:	94 40       	sbci	r25, 0x04	; 4
     78e:	a1 05       	cpc	r26, r1
     790:	b1 05       	cpc	r27, r1
     792:	41 f5       	brne	.+80     	; 0x7e4 <_Z9CDC_SetupR8USBSetup+0xde>
     794:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <_ZL12_usbLineInfo+0x7>
     798:	80 fd       	sbrc	r24, 0
     79a:	24 c0       	rjmp	.+72     	; 0x7e4 <_Z9CDC_SetupR8USBSetup+0xde>
     79c:	ee 3f       	cpi	r30, 0xFE	; 254
     79e:	8a e0       	ldi	r24, 0x0A	; 10
     7a0:	f8 07       	cpc	r31, r24
     7a2:	51 f0       	breq	.+20     	; 0x7b8 <_Z9CDC_SetupR8USBSetup+0xb2>
     7a4:	80 81       	ld	r24, Z
     7a6:	91 81       	ldd	r25, Z+1	; 0x01
     7a8:	87 37       	cpi	r24, 0x77	; 119
     7aa:	27 e7       	ldi	r18, 0x77	; 119
     7ac:	92 07       	cpc	r25, r18
     7ae:	21 f0       	breq	.+8      	; 0x7b8 <_Z9CDC_SetupR8USBSetup+0xb2>
     7b0:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x693>
     7b4:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x692>
     7b8:	87 e7       	ldi	r24, 0x77	; 119
     7ba:	97 e7       	ldi	r25, 0x77	; 119
     7bc:	91 83       	std	Z+1, r25	; 0x01
     7be:	80 83       	st	Z, r24
     7c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     7c4:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <_ZL11wdtcsr_save>
     7c8:	9b e0       	ldi	r25, 0x0B	; 11
     7ca:	88 e1       	ldi	r24, 0x18	; 24
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	a8 95       	wdr
     7d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	08 95       	ret
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	08 95       	ret
     7e4:	80 81       	ld	r24, Z
     7e6:	91 81       	ldd	r25, Z+1	; 0x01
     7e8:	87 37       	cpi	r24, 0x77	; 119
     7ea:	97 47       	sbci	r25, 0x77	; 119
     7ec:	b9 f7       	brne	.-18     	; 0x7dc <_Z9CDC_SetupR8USBSetup+0xd6>
     7ee:	a8 95       	wdr
     7f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     7f4:	88 61       	ori	r24, 0x18	; 24
     7f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     7fa:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <_ZL11wdtcsr_save>
     7fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     802:	ee 3f       	cpi	r30, 0xFE	; 254
     804:	8a e0       	ldi	r24, 0x0A	; 10
     806:	f8 07       	cpc	r31, r24
     808:	39 f0       	breq	.+14     	; 0x818 <_Z9CDC_SetupR8USBSetup+0x112>
     80a:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x692>
     80e:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x693>
     812:	91 83       	std	Z+1, r25	; 0x01
     814:	80 83       	st	Z, r24
     816:	e2 cf       	rjmp	.-60     	; 0x7dc <_Z9CDC_SetupR8USBSetup+0xd6>
     818:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x693>
     81c:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x692>
     820:	dd cf       	rjmp	.-70     	; 0x7dc <_Z9CDC_SetupR8USBSetup+0xd6>

00000822 <_GLOBAL__sub_I__cdcInterface>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     822:	e9 e4       	ldi	r30, 0x49	; 73
     824:	f3 e0       	ldi	r31, 0x03	; 3
     826:	13 82       	std	Z+3, r1	; 0x03
     828:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     82a:	88 ee       	ldi	r24, 0xE8	; 232
     82c:	93 e0       	ldi	r25, 0x03	; 3
     82e:	a0 e0       	ldi	r26, 0x00	; 0
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	84 83       	std	Z+4, r24	; 0x04
     834:	95 83       	std	Z+5, r25	; 0x05
     836:	a6 83       	std	Z+6, r26	; 0x06
     838:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
     83a:	8f ec       	ldi	r24, 0xCF	; 207
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	91 83       	std	Z+1, r25	; 0x01
     840:	80 83       	st	Z, r24
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	9f ef       	ldi	r25, 0xFF	; 255
     846:	95 87       	std	Z+13, r25	; 0x0d
     848:	84 87       	std	Z+12, r24	; 0x0c
     84a:	08 95       	ret

0000084c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     84c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     84e:	91 8d       	ldd	r25, Z+25	; 0x19
     850:	22 8d       	ldd	r18, Z+26	; 0x1a
     852:	89 2f       	mov	r24, r25
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	80 5c       	subi	r24, 0xC0	; 192
     858:	9f 4f       	sbci	r25, 0xFF	; 255
     85a:	82 1b       	sub	r24, r18
     85c:	91 09       	sbc	r25, r1
}
     85e:	8f 73       	andi	r24, 0x3F	; 63
     860:	99 27       	eor	r25, r25
     862:	08 95       	ret

00000864 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     864:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     866:	91 8d       	ldd	r25, Z+25	; 0x19
     868:	82 8d       	ldd	r24, Z+26	; 0x1a
     86a:	98 17       	cp	r25, r24
     86c:	31 f0       	breq	.+12     	; 0x87a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     86e:	82 8d       	ldd	r24, Z+26	; 0x1a
     870:	e8 0f       	add	r30, r24
     872:	f1 1d       	adc	r31, r1
     874:	85 8d       	ldd	r24, Z+29	; 0x1d
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     87e:	08 95       	ret

00000880 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     880:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     882:	91 8d       	ldd	r25, Z+25	; 0x19
     884:	82 8d       	ldd	r24, Z+26	; 0x1a
     886:	98 17       	cp	r25, r24
     888:	61 f0       	breq	.+24     	; 0x8a2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     88a:	82 8d       	ldd	r24, Z+26	; 0x1a
     88c:	df 01       	movw	r26, r30
     88e:	a8 0f       	add	r26, r24
     890:	b1 1d       	adc	r27, r1
     892:	5d 96       	adiw	r26, 0x1d	; 29
     894:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     896:	92 8d       	ldd	r25, Z+26	; 0x1a
     898:	9f 5f       	subi	r25, 0xFF	; 255
     89a:	9f 73       	andi	r25, 0x3F	; 63
     89c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     8a2:	8f ef       	ldi	r24, 0xFF	; 255
     8a4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     8a6:	08 95       	ret

000008a8 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     8a8:	fc 01       	movw	r30, r24
     8aa:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     8ac:	44 8d       	ldd	r20, Z+28	; 0x1c
     8ae:	25 2f       	mov	r18, r21
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	84 2f       	mov	r24, r20
     8b4:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     8b6:	82 1b       	sub	r24, r18
     8b8:	93 0b       	sbc	r25, r19
     8ba:	54 17       	cp	r21, r20
     8bc:	10 f0       	brcs	.+4      	; 0x8c2 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     8be:	cf 96       	adiw	r24, 0x3f	; 63
     8c0:	08 95       	ret
  return tail - head - 1;
     8c2:	01 97       	sbiw	r24, 0x01	; 1
}
     8c4:	08 95       	ret

000008c6 <_Z14serialEventRunv>:
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     8c6:	8d eb       	ldi	r24, 0xBD	; 189
     8c8:	95 e0       	ldi	r25, 0x05	; 5
     8ca:	89 2b       	or	r24, r25
     8cc:	49 f0       	breq	.+18     	; 0x8e0 <_Z14serialEventRunv+0x1a>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	89 2b       	or	r24, r25
     8d4:	29 f0       	breq	.+10     	; 0x8e0 <_Z14serialEventRunv+0x1a>
     8d6:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_Z17Serial1_availablev>
     8da:	81 11       	cpse	r24, r1
     8dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     8e0:	08 95       	ret

000008e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     8e2:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     8e4:	84 8d       	ldd	r24, Z+28	; 0x1c
     8e6:	df 01       	movw	r26, r30
     8e8:	a8 0f       	add	r26, r24
     8ea:	b1 1d       	adc	r27, r1
     8ec:	a3 5a       	subi	r26, 0xA3	; 163
     8ee:	bf 4f       	sbci	r27, 0xFF	; 255
     8f0:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     8f2:	84 8d       	ldd	r24, Z+28	; 0x1c
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	8f 73       	andi	r24, 0x3F	; 63
     8fa:	99 27       	eor	r25, r25
     8fc:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     8fe:	a6 89       	ldd	r26, Z+22	; 0x16
     900:	b7 89       	ldd	r27, Z+23	; 0x17
     902:	2c 93       	st	X, r18
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     904:	a0 89       	ldd	r26, Z+16	; 0x10
     906:	b1 89       	ldd	r27, Z+17	; 0x11
     908:	8c 91       	ld	r24, X
     90a:	82 74       	andi	r24, 0x42	; 66
     90c:	8c 93       	st	X, r24
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     90e:	93 8d       	ldd	r25, Z+27	; 0x1b
     910:	84 8d       	ldd	r24, Z+28	; 0x1c
     912:	98 13       	cpse	r25, r24
     914:	06 c0       	rjmp	.+12     	; 0x922 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     916:	02 88       	ldd	r0, Z+18	; 0x12
     918:	f3 89       	ldd	r31, Z+19	; 0x13
     91a:	e0 2d       	mov	r30, r0
     91c:	80 81       	ld	r24, Z
     91e:	8f 7d       	andi	r24, 0xDF	; 223
     920:	80 83       	st	Z, r24
     922:	08 95       	ret

00000924 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	ec 01       	movw	r28, r24
  _written = true;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     936:	9b 8d       	ldd	r25, Y+27	; 0x1b
     938:	8c 8d       	ldd	r24, Y+28	; 0x1c
     93a:	98 13       	cpse	r25, r24
     93c:	05 c0       	rjmp	.+10     	; 0x948 <_ZN14HardwareSerial5writeEh+0x24>
     93e:	e8 89       	ldd	r30, Y+16	; 0x10
     940:	f9 89       	ldd	r31, Y+17	; 0x11
     942:	80 81       	ld	r24, Z
     944:	85 fd       	sbrc	r24, 5
     946:	26 c0       	rjmp	.+76     	; 0x994 <_ZN14HardwareSerial5writeEh+0x70>
     948:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     94a:	0b 8d       	ldd	r16, Y+27	; 0x1b
     94c:	10 e0       	ldi	r17, 0x00	; 0
     94e:	0f 5f       	subi	r16, 0xFF	; 255
     950:	1f 4f       	sbci	r17, 0xFF	; 255
     952:	0f 73       	andi	r16, 0x3F	; 63
     954:	11 27       	eor	r17, r17
     956:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     958:	8c 8d       	ldd	r24, Y+28	; 0x1c
     95a:	e8 12       	cpse	r14, r24
     95c:	0c c0       	rjmp	.+24     	; 0x976 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	07 fc       	sbrc	r0, 7
     962:	fa cf       	rjmp	.-12     	; 0x958 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     964:	e8 89       	ldd	r30, Y+16	; 0x10
     966:	f9 89       	ldd	r31, Y+17	; 0x11
     968:	80 81       	ld	r24, Z
     96a:	85 ff       	sbrs	r24, 5
     96c:	f5 cf       	rjmp	.-22     	; 0x958 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     96e:	ce 01       	movw	r24, r28
     970:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     974:	f1 cf       	rjmp	.-30     	; 0x958 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     976:	8b 8d       	ldd	r24, Y+27	; 0x1b
     978:	fe 01       	movw	r30, r28
     97a:	e8 0f       	add	r30, r24
     97c:	f1 1d       	adc	r31, r1
     97e:	e3 5a       	subi	r30, 0xA3	; 163
     980:	ff 4f       	sbci	r31, 0xFF	; 255
     982:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     984:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     986:	f8 94       	cli
    _tx_buffer_head = i;
     988:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     98a:	ea 89       	ldd	r30, Y+18	; 0x12
     98c:	fb 89       	ldd	r31, Y+19	; 0x13
     98e:	80 81       	ld	r24, Z
     990:	80 62       	ori	r24, 0x20	; 32
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     994:	9f b7       	in	r25, 0x3f	; 63
     996:	f8 94       	cli
      *_udr = c;
     998:	ee 89       	ldd	r30, Y+22	; 0x16
     99a:	ff 89       	ldd	r31, Y+23	; 0x17
     99c:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
#else
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
     99e:	e8 89       	ldd	r30, Y+16	; 0x10
     9a0:	f9 89       	ldd	r31, Y+17	; 0x11
     9a2:	80 81       	ld	r24, Z
     9a4:	82 74       	andi	r24, 0x42	; 66
     9a6:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     9a8:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	08 95       	ret

000009bc <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     9c2:	88 8d       	ldd	r24, Y+24	; 0x18
     9c4:	88 23       	and	r24, r24
     9c6:	c9 f0       	breq	.+50     	; 0x9fa <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     9c8:	ea 89       	ldd	r30, Y+18	; 0x12
     9ca:	fb 89       	ldd	r31, Y+19	; 0x13
     9cc:	80 81       	ld	r24, Z
     9ce:	85 fd       	sbrc	r24, 5
     9d0:	05 c0       	rjmp	.+10     	; 0x9dc <_ZN14HardwareSerial5flushEv+0x20>
     9d2:	a8 89       	ldd	r26, Y+16	; 0x10
     9d4:	b9 89       	ldd	r27, Y+17	; 0x11
     9d6:	8c 91       	ld	r24, X
     9d8:	86 fd       	sbrc	r24, 6
     9da:	0f c0       	rjmp	.+30     	; 0x9fa <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	07 fc       	sbrc	r0, 7
     9e0:	f5 cf       	rjmp	.-22     	; 0x9cc <_ZN14HardwareSerial5flushEv+0x10>
     9e2:	80 81       	ld	r24, Z
     9e4:	85 ff       	sbrs	r24, 5
     9e6:	f2 cf       	rjmp	.-28     	; 0x9cc <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     9e8:	a8 89       	ldd	r26, Y+16	; 0x10
     9ea:	b9 89       	ldd	r27, Y+17	; 0x11
     9ec:	8c 91       	ld	r24, X
     9ee:	85 ff       	sbrs	r24, 5
     9f0:	ed cf       	rjmp	.-38     	; 0x9cc <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     9f2:	ce 01       	movw	r24, r28
     9f4:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     9f8:	e7 cf       	rjmp	.-50     	; 0x9c8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
     9fe:	08 95       	ret

00000a00 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     a00:	cf 92       	push	r12
     a02:	df 92       	push	r13
     a04:	ef 92       	push	r14
     a06:	ff 92       	push	r15
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	ec 01       	movw	r28, r24
     a10:	6a 01       	movw	r12, r20
     a12:	7b 01       	movw	r14, r22
     a14:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     a16:	e8 89       	ldd	r30, Y+16	; 0x10
     a18:	f9 89       	ldd	r31, Y+17	; 0x11
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     a1e:	41 15       	cp	r20, r1
     a20:	51 4e       	sbci	r21, 0xE1	; 225
     a22:	61 05       	cpc	r22, r1
     a24:	71 05       	cpc	r23, r1
     a26:	b1 f0       	breq	.+44     	; 0xa54 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	79 e0       	ldi	r23, 0x09	; 9
     a2c:	8d e3       	ldi	r24, 0x3D	; 61
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	a7 01       	movw	r20, r14
     a32:	96 01       	movw	r18, r12
     a34:	0e 94 41 19 	call	0x3282	; 0x3282 <__udivmodsi4>
     a38:	da 01       	movw	r26, r20
     a3a:	c9 01       	movw	r24, r18
     a3c:	01 97       	sbiw	r24, 0x01	; 1
     a3e:	a1 09       	sbc	r26, r1
     a40:	b1 09       	sbc	r27, r1
     a42:	b6 95       	lsr	r27
     a44:	a7 95       	ror	r26
     a46:	97 95       	ror	r25
     a48:	87 95       	ror	r24
     a4a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     a4c:	21 15       	cp	r18, r1
     a4e:	80 e1       	ldi	r24, 0x10	; 16
     a50:	38 07       	cpc	r19, r24
     a52:	a8 f0       	brcs	.+42     	; 0xa7e <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     a54:	e8 89       	ldd	r30, Y+16	; 0x10
     a56:	f9 89       	ldd	r31, Y+17	; 0x11
     a58:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     a5a:	60 e8       	ldi	r22, 0x80	; 128
     a5c:	74 e8       	ldi	r23, 0x84	; 132
     a5e:	8e e1       	ldi	r24, 0x1E	; 30
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	a7 01       	movw	r20, r14
     a64:	96 01       	movw	r18, r12
     a66:	0e 94 41 19 	call	0x3282	; 0x3282 <__udivmodsi4>
     a6a:	da 01       	movw	r26, r20
     a6c:	c9 01       	movw	r24, r18
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	a1 09       	sbc	r26, r1
     a72:	b1 09       	sbc	r27, r1
     a74:	b6 95       	lsr	r27
     a76:	a7 95       	ror	r26
     a78:	97 95       	ror	r25
     a7a:	87 95       	ror	r24
     a7c:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     a7e:	ec 85       	ldd	r30, Y+12	; 0x0c
     a80:	fd 85       	ldd	r31, Y+13	; 0x0d
     a82:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     a84:	ee 85       	ldd	r30, Y+14	; 0x0e
     a86:	ff 85       	ldd	r31, Y+15	; 0x0f
     a88:	20 83       	st	Z, r18

  _written = false;
     a8a:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     a8c:	ec 89       	ldd	r30, Y+20	; 0x14
     a8e:	fd 89       	ldd	r31, Y+21	; 0x15
     a90:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     a92:	ea 89       	ldd	r30, Y+18	; 0x12
     a94:	fb 89       	ldd	r31, Y+19	; 0x13
     a96:	80 81       	ld	r24, Z
     a98:	80 61       	ori	r24, 0x10	; 16
     a9a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     a9c:	ea 89       	ldd	r30, Y+18	; 0x12
     a9e:	fb 89       	ldd	r31, Y+19	; 0x13
     aa0:	80 81       	ld	r24, Z
     aa2:	88 60       	ori	r24, 0x08	; 8
     aa4:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     aa6:	ea 89       	ldd	r30, Y+18	; 0x12
     aa8:	fb 89       	ldd	r31, Y+19	; 0x13
     aaa:	80 81       	ld	r24, Z
     aac:	80 68       	ori	r24, 0x80	; 128
     aae:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     ab0:	ea 89       	ldd	r30, Y+18	; 0x12
     ab2:	fb 89       	ldd	r31, Y+19	; 0x13
     ab4:	80 81       	ld	r24, Z
     ab6:	8f 7d       	andi	r24, 0xDF	; 223
     ab8:	80 83       	st	Z, r24
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	1f 91       	pop	r17
     ac0:	ff 90       	pop	r15
     ac2:	ef 90       	pop	r14
     ac4:	df 90       	pop	r13
     ac6:	cf 90       	pop	r12
     ac8:	08 95       	ret

00000aca <__vector_25>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	2f 93       	push	r18
     ad6:	8f 93       	push	r24
     ad8:	9f 93       	push	r25
     ada:	ef 93       	push	r30
     adc:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     ade:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <Serial1+0x10>
     ae2:	f0 91 ab 03 	lds	r31, 0x03AB	; 0x8003ab <Serial1+0x11>
     ae6:	80 81       	ld	r24, Z
     ae8:	e0 91 b0 03 	lds	r30, 0x03B0	; 0x8003b0 <Serial1+0x16>
     aec:	f0 91 b1 03 	lds	r31, 0x03B1	; 0x8003b1 <Serial1+0x17>
     af0:	82 fd       	sbrc	r24, 2
     af2:	12 c0       	rjmp	.+36     	; 0xb18 <__stack+0x19>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     af4:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     af6:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <Serial1+0x19>
     afa:	8f 5f       	subi	r24, 0xFF	; 255
     afc:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     afe:	20 91 b4 03 	lds	r18, 0x03B4	; 0x8003b4 <Serial1+0x1a>
     b02:	82 17       	cp	r24, r18
     b04:	51 f0       	breq	.+20     	; 0xb1a <__stack+0x1b>
      _rx_buffer[_rx_buffer_head] = c;
     b06:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <Serial1+0x19>
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	e6 56       	subi	r30, 0x66	; 102
     b0e:	fc 4f       	sbci	r31, 0xFC	; 252
     b10:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     b12:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <Serial1+0x19>
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <__stack+0x1b>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     b18:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
     b1a:	ff 91       	pop	r31
     b1c:	ef 91       	pop	r30
     b1e:	9f 91       	pop	r25
     b20:	8f 91       	pop	r24
     b22:	2f 91       	pop	r18
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0f 90       	pop	r0
     b2a:	1f 90       	pop	r1
     b2c:	18 95       	reti

00000b2e <__vector_26>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	2f 93       	push	r18
     b3a:	3f 93       	push	r19
     b3c:	4f 93       	push	r20
     b3e:	5f 93       	push	r21
     b40:	6f 93       	push	r22
     b42:	7f 93       	push	r23
     b44:	8f 93       	push	r24
     b46:	9f 93       	push	r25
     b48:	af 93       	push	r26
     b4a:	bf 93       	push	r27
     b4c:	ef 93       	push	r30
     b4e:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
     b50:	8a e9       	ldi	r24, 0x9A	; 154
     b52:	93 e0       	ldi	r25, 0x03	; 3
     b54:	0e 94 71 04 	call	0x8e2	; 0x8e2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     b58:	ff 91       	pop	r31
     b5a:	ef 91       	pop	r30
     b5c:	bf 91       	pop	r27
     b5e:	af 91       	pop	r26
     b60:	9f 91       	pop	r25
     b62:	8f 91       	pop	r24
     b64:	7f 91       	pop	r23
     b66:	6f 91       	pop	r22
     b68:	5f 91       	pop	r21
     b6a:	4f 91       	pop	r20
     b6c:	3f 91       	pop	r19
     b6e:	2f 91       	pop	r18
     b70:	0f 90       	pop	r0
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	0f 90       	pop	r0
     b76:	1f 90       	pop	r1
     b78:	18 95       	reti

00000b7a <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
     b7a:	8a e9       	ldi	r24, 0x9A	; 154
     b7c:	93 e0       	ldi	r25, 0x03	; 3
     b7e:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN14HardwareSerial9availableEv>
     b82:	21 e0       	ldi	r18, 0x01	; 1
     b84:	89 2b       	or	r24, r25
     b86:	09 f4       	brne	.+2      	; 0xb8a <_Z17Serial1_availablev+0x10>
     b88:	20 e0       	ldi	r18, 0x00	; 0
}
     b8a:	82 2f       	mov	r24, r18
     b8c:	08 95       	ret

00000b8e <_GLOBAL__sub_I___vector_25>:
     b8e:	ea e9       	ldi	r30, 0x9A	; 154
     b90:	f3 e0       	ldi	r31, 0x03	; 3
     b92:	13 82       	std	Z+3, r1	; 0x03
     b94:	12 82       	std	Z+2, r1	; 0x02
     b96:	88 ee       	ldi	r24, 0xE8	; 232
     b98:	93 e0       	ldi	r25, 0x03	; 3
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	84 83       	std	Z+4, r24	; 0x04
     ba0:	95 83       	std	Z+5, r25	; 0x05
     ba2:	a6 83       	std	Z+6, r26	; 0x06
     ba4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     ba6:	81 ee       	ldi	r24, 0xE1	; 225
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	91 83       	std	Z+1, r25	; 0x01
     bac:	80 83       	st	Z, r24
     bae:	8d ec       	ldi	r24, 0xCD	; 205
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	95 87       	std	Z+13, r25	; 0x0d
     bb4:	84 87       	std	Z+12, r24	; 0x0c
     bb6:	8c ec       	ldi	r24, 0xCC	; 204
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	97 87       	std	Z+15, r25	; 0x0f
     bbc:	86 87       	std	Z+14, r24	; 0x0e
     bbe:	88 ec       	ldi	r24, 0xC8	; 200
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	91 8b       	std	Z+17, r25	; 0x11
     bc4:	80 8b       	std	Z+16, r24	; 0x10
     bc6:	89 ec       	ldi	r24, 0xC9	; 201
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	93 8b       	std	Z+19, r25	; 0x13
     bcc:	82 8b       	std	Z+18, r24	; 0x12
     bce:	8a ec       	ldi	r24, 0xCA	; 202
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	95 8b       	std	Z+21, r25	; 0x15
     bd4:	84 8b       	std	Z+20, r24	; 0x14
     bd6:	8e ec       	ldi	r24, 0xCE	; 206
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	97 8b       	std	Z+23, r25	; 0x17
     bdc:	86 8b       	std	Z+22, r24	; 0x16
     bde:	11 8e       	std	Z+25, r1	; 0x19
     be0:	12 8e       	std	Z+26, r1	; 0x1a
     be2:	13 8e       	std	Z+27, r1	; 0x1b
     be4:	14 8e       	std	Z+28, r1	; 0x1c
     be6:	08 95       	ret

00000be8 <initVariant>:
     be8:	08 95       	ret

00000bea <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     bea:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <init>

	initVariant();
     bee:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
     bf2:	87 e3       	ldi	r24, 0x37	; 55
     bf4:	94 e0       	ldi	r25, 0x04	; 4
     bf6:	0e 94 b4 0b 	call	0x1768	; 0x1768 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
     bfa:	0e 94 af 01 	call	0x35e	; 0x35e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     bfe:	c3 e6       	ldi	r28, 0x63	; 99
     c00:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     c02:	0e 94 08 03 	call	0x610	; 0x610 <loop>
		if (serialEventRun) serialEventRun();
     c06:	20 97       	sbiw	r28, 0x00	; 0
     c08:	e1 f3       	breq	.-8      	; 0xc02 <main+0x18>
     c0a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_Z14serialEventRunv>
     c0e:	f9 cf       	rjmp	.-14     	; 0xc02 <main+0x18>

00000c10 <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     c10:	cf 92       	push	r12
     c12:	df 92       	push	r13
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	6c 01       	movw	r12, r24
     c22:	7a 01       	movw	r14, r20
     c24:	8b 01       	movw	r16, r22
     c26:	c0 e0       	ldi	r28, 0x00	; 0
     c28:	d0 e0       	ldi	r29, 0x00	; 0
     c2a:	ce 15       	cp	r28, r14
     c2c:	df 05       	cpc	r29, r15
     c2e:	81 f0       	breq	.+32     	; 0xc50 <_ZN5Print5writeEPKhj+0x40>
     c30:	d8 01       	movw	r26, r16
     c32:	6d 91       	ld	r22, X+
     c34:	8d 01       	movw	r16, r26
     c36:	d6 01       	movw	r26, r12
     c38:	ed 91       	ld	r30, X+
     c3a:	fc 91       	ld	r31, X
     c3c:	01 90       	ld	r0, Z+
     c3e:	f0 81       	ld	r31, Z
     c40:	e0 2d       	mov	r30, r0
     c42:	c6 01       	movw	r24, r12
     c44:	09 95       	icall
     c46:	89 2b       	or	r24, r25
     c48:	11 f0       	breq	.+4      	; 0xc4e <_ZN5Print5writeEPKhj+0x3e>
     c4a:	21 96       	adiw	r28, 0x01	; 1
     c4c:	ee cf       	rjmp	.-36     	; 0xc2a <_ZN5Print5writeEPKhj+0x1a>
     c4e:	7e 01       	movw	r14, r28
     c50:	c7 01       	movw	r24, r14
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	ff 90       	pop	r15
     c5c:	ef 90       	pop	r14
     c5e:	df 90       	pop	r13
     c60:	cf 90       	pop	r12
     c62:	08 95       	ret

00000c64 <_ZN5Print5writeEPKc>:
     c64:	61 15       	cp	r22, r1
     c66:	71 05       	cpc	r23, r1
     c68:	79 f0       	breq	.+30     	; 0xc88 <_ZN5Print5writeEPKc+0x24>
     c6a:	fb 01       	movw	r30, r22
     c6c:	01 90       	ld	r0, Z+
     c6e:	00 20       	and	r0, r0
     c70:	e9 f7       	brne	.-6      	; 0xc6c <_ZN5Print5writeEPKc+0x8>
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	af 01       	movw	r20, r30
     c76:	46 1b       	sub	r20, r22
     c78:	57 0b       	sbc	r21, r23
     c7a:	dc 01       	movw	r26, r24
     c7c:	ed 91       	ld	r30, X+
     c7e:	fc 91       	ld	r31, X
     c80:	02 80       	ldd	r0, Z+2	; 0x02
     c82:	f3 81       	ldd	r31, Z+3	; 0x03
     c84:	e0 2d       	mov	r30, r0
     c86:	09 94       	ijmp
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	08 95       	ret

00000c8e <_ZN5Print5printERK6String>:
     c8e:	db 01       	movw	r26, r22
     c90:	14 96       	adiw	r26, 0x04	; 4
     c92:	4d 91       	ld	r20, X+
     c94:	5c 91       	ld	r21, X
     c96:	15 97       	sbiw	r26, 0x05	; 5
     c98:	6d 91       	ld	r22, X+
     c9a:	7c 91       	ld	r23, X
     c9c:	dc 01       	movw	r26, r24
     c9e:	ed 91       	ld	r30, X+
     ca0:	fc 91       	ld	r31, X
     ca2:	02 80       	ldd	r0, Z+2	; 0x02
     ca4:	f3 81       	ldd	r31, Z+3	; 0x03
     ca6:	e0 2d       	mov	r30, r0
     ca8:	09 94       	ijmp

00000caa <_ZN5Print5printEPKc>:
     caa:	0c 94 32 06 	jmp	0xc64	; 0xc64 <_ZN5Print5writeEPKc>

00000cae <_ZN5Print5printEc>:
     cae:	dc 01       	movw	r26, r24
     cb0:	ed 91       	ld	r30, X+
     cb2:	fc 91       	ld	r31, X
     cb4:	01 90       	ld	r0, Z+
     cb6:	f0 81       	ld	r31, Z
     cb8:	e0 2d       	mov	r30, r0
     cba:	09 94       	ijmp

00000cbc <_ZN5Print7printlnEv>:
     cbc:	6f ee       	ldi	r22, 0xEF	; 239
     cbe:	71 e0       	ldi	r23, 0x01	; 1
     cc0:	0c 94 32 06 	jmp	0xc64	; 0xc64 <_ZN5Print5writeEPKc>

00000cc4 <_ZN5Print7printlnERK6String>:
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	ec 01       	movw	r28, r24
     cce:	0e 94 47 06 	call	0xc8e	; 0xc8e <_ZN5Print5printERK6String>
     cd2:	8c 01       	movw	r16, r24
     cd4:	ce 01       	movw	r24, r28
     cd6:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN5Print7printlnEv>
     cda:	80 0f       	add	r24, r16
     cdc:	91 1f       	adc	r25, r17
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	08 95       	ret

00000ce8 <_ZN5Print7printlnEPKc>:
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	ec 01       	movw	r28, r24
     cf2:	0e 94 32 06 	call	0xc64	; 0xc64 <_ZN5Print5writeEPKc>
     cf6:	8c 01       	movw	r16, r24
     cf8:	ce 01       	movw	r24, r28
     cfa:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN5Print7printlnEv>
     cfe:	80 0f       	add	r24, r16
     d00:	91 1f       	adc	r25, r17
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	08 95       	ret

00000d0c <_ZN5Print11printNumberEmh>:
     d0c:	8f 92       	push	r8
     d0e:	9f 92       	push	r9
     d10:	af 92       	push	r10
     d12:	bf 92       	push	r11
     d14:	ef 92       	push	r14
     d16:	ff 92       	push	r15
     d18:	0f 93       	push	r16
     d1a:	1f 93       	push	r17
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	a1 97       	sbiw	r28, 0x21	; 33
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	7c 01       	movw	r14, r24
     d32:	fa 01       	movw	r30, r20
     d34:	cb 01       	movw	r24, r22
     d36:	19 a2       	std	Y+33, r1	; 0x21
     d38:	22 30       	cpi	r18, 0x02	; 2
     d3a:	08 f4       	brcc	.+2      	; 0xd3e <_ZN5Print11printNumberEmh+0x32>
     d3c:	2a e0       	ldi	r18, 0x0A	; 10
     d3e:	8e 01       	movw	r16, r28
     d40:	0f 5d       	subi	r16, 0xDF	; 223
     d42:	1f 4f       	sbci	r17, 0xFF	; 255
     d44:	82 2e       	mov	r8, r18
     d46:	91 2c       	mov	r9, r1
     d48:	a1 2c       	mov	r10, r1
     d4a:	b1 2c       	mov	r11, r1
     d4c:	bf 01       	movw	r22, r30
     d4e:	a5 01       	movw	r20, r10
     d50:	94 01       	movw	r18, r8
     d52:	0e 94 41 19 	call	0x3282	; 0x3282 <__udivmodsi4>
     d56:	f9 01       	movw	r30, r18
     d58:	ca 01       	movw	r24, r20
     d5a:	01 50       	subi	r16, 0x01	; 1
     d5c:	11 09       	sbc	r17, r1
     d5e:	6a 30       	cpi	r22, 0x0A	; 10
     d60:	10 f4       	brcc	.+4      	; 0xd66 <_ZN5Print11printNumberEmh+0x5a>
     d62:	60 5d       	subi	r22, 0xD0	; 208
     d64:	01 c0       	rjmp	.+2      	; 0xd68 <_ZN5Print11printNumberEmh+0x5c>
     d66:	69 5c       	subi	r22, 0xC9	; 201
     d68:	d8 01       	movw	r26, r16
     d6a:	6c 93       	st	X, r22
     d6c:	23 2b       	or	r18, r19
     d6e:	24 2b       	or	r18, r20
     d70:	25 2b       	or	r18, r21
     d72:	61 f7       	brne	.-40     	; 0xd4c <_ZN5Print11printNumberEmh+0x40>
     d74:	b8 01       	movw	r22, r16
     d76:	c7 01       	movw	r24, r14
     d78:	0e 94 32 06 	call	0xc64	; 0xc64 <_ZN5Print5writeEPKc>
     d7c:	a1 96       	adiw	r28, 0x21	; 33
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	1f 91       	pop	r17
     d8e:	0f 91       	pop	r16
     d90:	ff 90       	pop	r15
     d92:	ef 90       	pop	r14
     d94:	bf 90       	pop	r11
     d96:	af 90       	pop	r10
     d98:	9f 90       	pop	r9
     d9a:	8f 90       	pop	r8
     d9c:	08 95       	ret

00000d9e <_ZN5Print5printEmi>:
     d9e:	21 15       	cp	r18, r1
     da0:	31 05       	cpc	r19, r1
     da2:	41 f4       	brne	.+16     	; 0xdb4 <_ZN5Print5printEmi+0x16>
     da4:	dc 01       	movw	r26, r24
     da6:	ed 91       	ld	r30, X+
     da8:	fc 91       	ld	r31, X
     daa:	01 90       	ld	r0, Z+
     dac:	f0 81       	ld	r31, Z
     dae:	e0 2d       	mov	r30, r0
     db0:	64 2f       	mov	r22, r20
     db2:	09 94       	ijmp
     db4:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <_ZN5Print11printNumberEmh>

00000db8 <_ZN5Print5printEhi>:
     db8:	9a 01       	movw	r18, r20
     dba:	46 2f       	mov	r20, r22
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <_ZN5Print5printEmi>

00000dc6 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     dc6:	cf 92       	push	r12
     dc8:	df 92       	push	r13
     dca:	ef 92       	push	r14
     dcc:	ff 92       	push	r15
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
  if (base == 0) {
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	81 f4       	brne	.+32     	; 0xdfc <_ZN5Print5printEli+0x36>
    return write(n);
     ddc:	dc 01       	movw	r26, r24
     dde:	ed 91       	ld	r30, X+
     de0:	fc 91       	ld	r31, X
     de2:	01 90       	ld	r0, Z+
     de4:	f0 81       	ld	r31, Z
     de6:	e0 2d       	mov	r30, r0
     de8:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	df 90       	pop	r13
     df8:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     dfa:	09 94       	ijmp
  } else if (base == 10) {
     dfc:	2a 30       	cpi	r18, 0x0A	; 10
     dfe:	31 05       	cpc	r19, r1
     e00:	01 f5       	brne	.+64     	; 0xe42 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     e02:	77 ff       	sbrs	r23, 7
     e04:	1d c0       	rjmp	.+58     	; 0xe40 <_ZN5Print5printEli+0x7a>
     e06:	6a 01       	movw	r12, r20
     e08:	7b 01       	movw	r14, r22
     e0a:	ec 01       	movw	r28, r24
      int t = print('-');
     e0c:	6d e2       	ldi	r22, 0x2D	; 45
     e0e:	0e 94 57 06 	call	0xcae	; 0xcae <_ZN5Print5printEc>
     e12:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     e14:	44 27       	eor	r20, r20
     e16:	55 27       	eor	r21, r21
     e18:	ba 01       	movw	r22, r20
     e1a:	4c 19       	sub	r20, r12
     e1c:	5d 09       	sbc	r21, r13
     e1e:	6e 09       	sbc	r22, r14
     e20:	7f 09       	sbc	r23, r15
     e22:	2a e0       	ldi	r18, 0x0A	; 10
     e24:	ce 01       	movw	r24, r28
     e26:	0e 94 86 06 	call	0xd0c	; 0xd0c <_ZN5Print11printNumberEmh>
     e2a:	80 0f       	add	r24, r16
     e2c:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ff 90       	pop	r15
     e38:	ef 90       	pop	r14
     e3a:	df 90       	pop	r13
     e3c:	cf 90       	pop	r12
     e3e:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     e40:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	ff 90       	pop	r15
     e4c:	ef 90       	pop	r14
     e4e:	df 90       	pop	r13
     e50:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     e52:	0c 94 86 06 	jmp	0xd0c	; 0xd0c <_ZN5Print11printNumberEmh>

00000e56 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     e56:	9a 01       	movw	r18, r20
  return print((long) n, base);
     e58:	ab 01       	movw	r20, r22
     e5a:	77 0f       	add	r23, r23
     e5c:	66 0b       	sbc	r22, r22
     e5e:	77 0b       	sbc	r23, r23
     e60:	0c 94 e3 06 	jmp	0xdc6	; 0xdc6 <_ZN5Print5printEli>

00000e64 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
     e64:	0f 93       	push	r16
     e66:	1f 93       	push	r17
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
     e6e:	0e 94 2b 07 	call	0xe56	; 0xe56 <_ZN5Print5printEii>
     e72:	8c 01       	movw	r16, r24
  n += println();
     e74:	ce 01       	movw	r24, r28
     e76:	0e 94 5e 06 	call	0xcbc	; 0xcbc <_ZN5Print7printlnEv>
  return n;
}
     e7a:	80 0f       	add	r24, r16
     e7c:	91 1f       	adc	r25, r17
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	08 95       	ret

00000e88 <_ZN6Stream9timedReadEv>:
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	ec 01       	movw	r28, r24
     e92:	0e 94 11 0c 	call	0x1822	; 0x1822 <millis>
     e96:	68 87       	std	Y+8, r22	; 0x08
     e98:	79 87       	std	Y+9, r23	; 0x09
     e9a:	8a 87       	std	Y+10, r24	; 0x0a
     e9c:	9b 87       	std	Y+11, r25	; 0x0b
     e9e:	e8 81       	ld	r30, Y
     ea0:	f9 81       	ldd	r31, Y+1	; 0x01
     ea2:	02 84       	ldd	r0, Z+10	; 0x0a
     ea4:	f3 85       	ldd	r31, Z+11	; 0x0b
     ea6:	e0 2d       	mov	r30, r0
     ea8:	ce 01       	movw	r24, r28
     eaa:	09 95       	icall
     eac:	97 ff       	sbrs	r25, 7
     eae:	17 c0       	rjmp	.+46     	; 0xede <_ZN6Stream9timedReadEv+0x56>
     eb0:	0e 94 11 0c 	call	0x1822	; 0x1822 <millis>
     eb4:	08 85       	ldd	r16, Y+8	; 0x08
     eb6:	19 85       	ldd	r17, Y+9	; 0x09
     eb8:	2a 85       	ldd	r18, Y+10	; 0x0a
     eba:	3b 85       	ldd	r19, Y+11	; 0x0b
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	80 1b       	sub	r24, r16
     ec2:	91 0b       	sbc	r25, r17
     ec4:	a2 0b       	sbc	r26, r18
     ec6:	b3 0b       	sbc	r27, r19
     ec8:	0c 81       	ldd	r16, Y+4	; 0x04
     eca:	1d 81       	ldd	r17, Y+5	; 0x05
     ecc:	2e 81       	ldd	r18, Y+6	; 0x06
     ece:	3f 81       	ldd	r19, Y+7	; 0x07
     ed0:	80 17       	cp	r24, r16
     ed2:	91 07       	cpc	r25, r17
     ed4:	a2 07       	cpc	r26, r18
     ed6:	b3 07       	cpc	r27, r19
     ed8:	10 f3       	brcs	.-60     	; 0xe9e <_ZN6Stream9timedReadEv+0x16>
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	9f ef       	ldi	r25, 0xFF	; 255
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	08 95       	ret

00000ee8 <_ZN6Stream10readStringEv>:

String Stream::readString()
{
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
     ef0:	ec 01       	movw	r28, r24
     ef2:	8b 01       	movw	r16, r22
  String ret;
     ef4:	61 ef       	ldi	r22, 0xF1	; 241
     ef6:	71 e0       	ldi	r23, 0x01	; 1
     ef8:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <_ZN6StringC1EPKc>
  int c = timedRead();
     efc:	c8 01       	movw	r24, r16
     efe:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN6Stream9timedReadEv>
  while (c >= 0)
     f02:	97 fd       	sbrc	r25, 7
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <_ZN6Stream10readStringEv+0x28>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
     f06:	68 2f       	mov	r22, r24
     f08:	ce 01       	movw	r24, r28
     f0a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <_ZN6String6concatEc>
     f0e:	f6 cf       	rjmp	.-20     	; 0xefc <_ZN6Stream10readStringEv+0x14>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
     f10:	ce 01       	movw	r24, r28
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	08 95       	ret

00000f1c <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
     f1c:	61 50       	subi	r22, 0x01	; 1
     f1e:	30 f0       	brcs	.+12     	; 0xf2c <_ZL4RecvPVhh+0x10>
     f20:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     f24:	fc 01       	movw	r30, r24
     f26:	20 83       	st	Z, r18
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	f8 cf       	rjmp	.-16     	; 0xf1c <_ZL4RecvPVhh>
     f2c:	28 98       	cbi	0x05, 0	; 5
     f2e:	84 e6       	ldi	r24, 0x64	; 100
     f30:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <RxLEDPulse>
     f34:	08 95       	ret

00000f36 <_ZL11SendControlh>:
     f36:	40 91 3a 04 	lds	r20, 0x043A	; 0x80043a <_ZL6_cmark>
     f3a:	50 91 3b 04 	lds	r21, 0x043B	; 0x80043b <_ZL6_cmark+0x1>
     f3e:	20 91 38 04 	lds	r18, 0x0438	; 0x800438 <_ZL5_cend>
     f42:	30 91 39 04 	lds	r19, 0x0439	; 0x800439 <_ZL5_cend+0x1>
     f46:	42 17       	cp	r20, r18
     f48:	53 07       	cpc	r21, r19
     f4a:	b4 f4       	brge	.+44     	; 0xf78 <_ZL11SendControlh+0x42>
     f4c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f50:	95 70       	andi	r25, 0x05	; 5
     f52:	e1 f3       	breq	.-8      	; 0xf4c <_ZL11SendControlh+0x16>
     f54:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f58:	92 fd       	sbrc	r25, 2
     f5a:	19 c0       	rjmp	.+50     	; 0xf8e <_ZL11SendControlh+0x58>
     f5c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     f60:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <_ZL6_cmark>
     f64:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <_ZL6_cmark+0x1>
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	8f 73       	andi	r24, 0x3F	; 63
     f6c:	99 27       	eor	r25, r25
     f6e:	89 2b       	or	r24, r25
     f70:	19 f4       	brne	.+6      	; 0xf78 <_ZL11SendControlh+0x42>
     f72:	8e ef       	ldi	r24, 0xFE	; 254
     f74:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f78:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <_ZL6_cmark>
     f7c:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <_ZL6_cmark+0x1>
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <_ZL6_cmark+0x1>
     f86:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <_ZL6_cmark>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	08 95       	ret
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	08 95       	ret

00000f92 <_ZL24USB_SendStringDescriptorPKhhh>:
     f92:	df 92       	push	r13
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	d8 2e       	mov	r13, r24
     fa2:	f9 2e       	mov	r15, r25
     fa4:	e4 2e       	mov	r14, r20
     fa6:	06 2f       	mov	r16, r22
     fa8:	10 e0       	ldi	r17, 0x00	; 0
     faa:	c8 01       	movw	r24, r16
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	88 0f       	add	r24, r24
     fb0:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZL11SendControlh>
     fb4:	83 e0       	ldi	r24, 0x03	; 3
     fb6:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZL11SendControlh>
     fba:	cd 2d       	mov	r28, r13
     fbc:	df 2d       	mov	r29, r15
     fbe:	0c 0f       	add	r16, r28
     fc0:	1d 1f       	adc	r17, r29
     fc2:	c0 17       	cp	r28, r16
     fc4:	d1 07       	cpc	r29, r17
     fc6:	89 f0       	breq	.+34     	; 0xfea <_ZL24USB_SendStringDescriptorPKhhh+0x58>
     fc8:	e7 fe       	sbrs	r14, 7
     fca:	03 c0       	rjmp	.+6      	; 0xfd2 <_ZL24USB_SendStringDescriptorPKhhh+0x40>
     fcc:	fe 01       	movw	r30, r28
     fce:	84 91       	lpm	r24, Z
     fd0:	01 c0       	rjmp	.+2      	; 0xfd4 <_ZL24USB_SendStringDescriptorPKhhh+0x42>
     fd2:	88 81       	ld	r24, Y
     fd4:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZL11SendControlh>
     fd8:	f8 2e       	mov	r15, r24
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZL11SendControlh>
     fe0:	8f 21       	and	r24, r15
     fe2:	21 96       	adiw	r28, 0x01	; 1
     fe4:	81 11       	cpse	r24, r1
     fe6:	ed cf       	rjmp	.-38     	; 0xfc2 <_ZL24USB_SendStringDescriptorPKhhh+0x30>
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	ff 90       	pop	r15
     ff6:	ef 90       	pop	r14
     ff8:	df 90       	pop	r13
     ffa:	08 95       	ret

00000ffc <_ZL15USB_ClockEnablev>:
     ffc:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
    1000:	81 60       	ori	r24, 0x01	; 1
    1002:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
    1006:	80 ea       	ldi	r24, 0xA0	; 160
    1008:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    100c:	89 b5       	in	r24, 0x29	; 41
    100e:	80 61       	ori	r24, 0x10	; 16
    1010:	89 bd       	out	0x29, r24	; 41
    1012:	89 b5       	in	r24, 0x29	; 41
    1014:	82 60       	ori	r24, 0x02	; 2
    1016:	89 bd       	out	0x29, r24	; 41
    1018:	09 b4       	in	r0, 0x29	; 41
    101a:	00 fe       	sbrs	r0, 0
    101c:	fd cf       	rjmp	.-6      	; 0x1018 <_ZL15USB_ClockEnablev+0x1c>
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 42 0c 	call	0x1884	; 0x1884 <delay>
    102a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    102e:	8f 7c       	andi	r24, 0xCF	; 207
    1030:	80 61       	ori	r24, 0x10	; 16
    1032:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    1036:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    103a:	80 7f       	andi	r24, 0xF0	; 240
    103c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    1040:	08 95       	ret

00001042 <_ZL14SendInterfacesv>:
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	1f 92       	push	r1
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	19 82       	std	Y+1, r1	; 0x01
    104e:	ce 01       	movw	r24, r28
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	0e 94 78 03 	call	0x6f0	; 0x6f0 <_Z16CDC_GetInterfacePh>
    1056:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_Z12PluggableUSBv>
    105a:	be 01       	movw	r22, r28
    105c:	6f 5f       	subi	r22, 0xFF	; 255
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	0e 94 cc 14 	call	0x2998	; 0x2998 <_ZN13PluggableUSB_12getInterfaceEPh>
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	0f 90       	pop	r0
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	08 95       	ret

0000106e <_ZN6LockEPC1Eh>:
    106e:	2f b7       	in	r18, 0x3f	; 63
    1070:	fc 01       	movw	r30, r24
    1072:	20 83       	st	Z, r18
    1074:	f8 94       	cli
    1076:	67 70       	andi	r22, 0x07	; 7
    1078:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    107c:	08 95       	ret

0000107e <_Z13USB_Availableh>:
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	1f 92       	push	r1
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	68 2f       	mov	r22, r24
    108a:	ce 01       	movw	r24, r28
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	0e 94 37 08 	call	0x106e	; 0x106e <_ZN6LockEPC1Eh>
    1092:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1096:	99 81       	ldd	r25, Y+1	; 0x01
    1098:	9f bf       	out	0x3f, r25	; 63
    109a:	0f 90       	pop	r0
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <_Z8USB_RecvhPvi>:
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	1f 92       	push	r1
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <_usbConfiguration>
    10b8:	99 23       	and	r25, r25
    10ba:	11 f0       	breq	.+4      	; 0x10c0 <_Z8USB_RecvhPvi+0x1e>
    10bc:	57 ff       	sbrs	r21, 7
    10be:	03 c0       	rjmp	.+6      	; 0x10c6 <_Z8USB_RecvhPvi+0x24>
    10c0:	8f ef       	ldi	r24, 0xFF	; 255
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	29 c0       	rjmp	.+82     	; 0x1118 <_Z8USB_RecvhPvi+0x76>
    10c6:	8a 01       	movw	r16, r20
    10c8:	7b 01       	movw	r14, r22
    10ca:	68 2f       	mov	r22, r24
    10cc:	ce 01       	movw	r24, r28
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	0e 94 37 08 	call	0x106e	; 0x106e <_ZN6LockEPC1Eh>
    10d4:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	02 17       	cp	r16, r18
    10dc:	13 07       	cpc	r17, r19
    10de:	0c f4       	brge	.+2      	; 0x10e2 <_Z8USB_RecvhPvi+0x40>
    10e0:	98 01       	movw	r18, r16
    10e2:	82 2f       	mov	r24, r18
    10e4:	f7 01       	movw	r30, r14
    10e6:	94 e6       	ldi	r25, 0x64	; 100
    10e8:	81 50       	subi	r24, 0x01	; 1
    10ea:	38 f0       	brcs	.+14     	; 0x10fa <_Z8USB_RecvhPvi+0x58>
    10ec:	28 98       	cbi	0x05, 0	; 5
    10ee:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <RxLEDPulse>
    10f2:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    10f6:	41 93       	st	Z+, r20
    10f8:	f7 cf       	rjmp	.-18     	; 0x10e8 <_Z8USB_RecvhPvi+0x46>
    10fa:	21 15       	cp	r18, r1
    10fc:	31 05       	cpc	r19, r1
    10fe:	21 f0       	breq	.+8      	; 0x1108 <_Z8USB_RecvhPvi+0x66>
    1100:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1104:	88 23       	and	r24, r24
    1106:	21 f0       	breq	.+8      	; 0x1110 <_Z8USB_RecvhPvi+0x6e>
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	8f bf       	out	0x3f, r24	; 63
    110c:	c9 01       	movw	r24, r18
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <_Z8USB_RecvhPvi+0x76>
    1110:	8b e6       	ldi	r24, 0x6B	; 107
    1112:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1116:	f8 cf       	rjmp	.-16     	; 0x1108 <_Z8USB_RecvhPvi+0x66>
    1118:	0f 90       	pop	r0
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	ff 90       	pop	r15
    1124:	ef 90       	pop	r14
    1126:	08 95       	ret

00001128 <_Z8USB_Recvh>:
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	1f 92       	push	r1
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	41 e0       	ldi	r20, 0x01	; 1
    1134:	50 e0       	ldi	r21, 0x00	; 0
    1136:	be 01       	movw	r22, r28
    1138:	6f 5f       	subi	r22, 0xFF	; 255
    113a:	7f 4f       	sbci	r23, 0xFF	; 255
    113c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <_Z8USB_RecvhPvi>
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	19 f4       	brne	.+6      	; 0x114a <_Z8USB_Recvh+0x22>
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	02 c0       	rjmp	.+4      	; 0x114e <_Z8USB_Recvh+0x26>
    114a:	8f ef       	ldi	r24, 0xFF	; 255
    114c:	9f ef       	ldi	r25, 0xFF	; 255
    114e:	0f 90       	pop	r0
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	08 95       	ret

00001156 <_Z13USB_SendSpaceh>:
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	1f 92       	push	r1
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	68 2f       	mov	r22, r24
    1162:	ce 01       	movw	r24, r28
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	0e 94 37 08 	call	0x106e	; 0x106e <_ZN6LockEPC1Eh>
    116a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    116e:	89 2f       	mov	r24, r25
    1170:	80 72       	andi	r24, 0x20	; 32
    1172:	95 ff       	sbrs	r25, 5
    1174:	04 c0       	rjmp	.+8      	; 0x117e <_Z13USB_SendSpaceh+0x28>
    1176:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    117a:	80 e4       	ldi	r24, 0x40	; 64
    117c:	89 1b       	sub	r24, r25
    117e:	99 81       	ldd	r25, Y+1	; 0x01
    1180:	9f bf       	out	0x3f, r25	; 63
    1182:	0f 90       	pop	r0
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	08 95       	ret

0000118a <_Z8USB_SendhPKvi>:
    118a:	5f 92       	push	r5
    118c:	6f 92       	push	r6
    118e:	7f 92       	push	r7
    1190:	8f 92       	push	r8
    1192:	9f 92       	push	r9
    1194:	af 92       	push	r10
    1196:	bf 92       	push	r11
    1198:	cf 92       	push	r12
    119a:	df 92       	push	r13
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	1f 92       	push	r1
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	98 2e       	mov	r9, r24
    11b0:	6b 01       	movw	r12, r22
    11b2:	b4 2e       	mov	r11, r20
    11b4:	05 2f       	mov	r16, r21
    11b6:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <_usbConfiguration>
    11ba:	81 11       	cpse	r24, r1
    11bc:	03 c0       	rjmp	.+6      	; 0x11c4 <_Z8USB_SendhPKvi+0x3a>
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	9f ef       	ldi	r25, 0xFF	; 255
    11c2:	77 c0       	rjmp	.+238    	; 0x12b2 <_Z8USB_SendhPKvi+0x128>
    11c4:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <_usbSuspendState>
    11c8:	80 ff       	sbrs	r24, 0
    11ca:	05 c0       	rjmp	.+10     	; 0x11d6 <_Z8USB_SendhPKvi+0x4c>
    11cc:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    11d0:	82 60       	ori	r24, 0x02	; 2
    11d2:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    11d6:	eb 2c       	mov	r14, r11
    11d8:	f0 2e       	mov	r15, r16
    11da:	a1 2c       	mov	r10, r1
    11dc:	8a ef       	ldi	r24, 0xFA	; 250
    11de:	88 2e       	mov	r8, r24
    11e0:	89 2d       	mov	r24, r9
    11e2:	80 72       	andi	r24, 0x20	; 32
    11e4:	68 2e       	mov	r6, r24
    11e6:	89 2d       	mov	r24, r9
    11e8:	80 74       	andi	r24, 0x40	; 64
    11ea:	58 2e       	mov	r5, r24
    11ec:	9a e3       	ldi	r25, 0x3A	; 58
    11ee:	79 2e       	mov	r7, r25
    11f0:	e1 14       	cp	r14, r1
    11f2:	f1 04       	cpc	r15, r1
    11f4:	19 f4       	brne	.+6      	; 0x11fc <_Z8USB_SendhPKvi+0x72>
    11f6:	aa 20       	and	r10, r10
    11f8:	09 f4       	brne	.+2      	; 0x11fc <_Z8USB_SendhPKvi+0x72>
    11fa:	55 c0       	rjmp	.+170    	; 0x12a6 <_Z8USB_SendhPKvi+0x11c>
    11fc:	89 2d       	mov	r24, r9
    11fe:	0e 94 ab 08 	call	0x1156	; 0x1156 <_Z13USB_SendSpaceh>
    1202:	18 2f       	mov	r17, r24
    1204:	81 11       	cpse	r24, r1
    1206:	0a c0       	rjmp	.+20     	; 0x121c <_Z8USB_SendhPKvi+0x92>
    1208:	8a 94       	dec	r8
    120a:	88 20       	and	r8, r8
    120c:	c1 f2       	breq	.-80     	; 0x11be <_Z8USB_SendhPKvi+0x34>
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0e 94 42 0c 	call	0x1884	; 0x1884 <delay>
    121a:	ea cf       	rjmp	.-44     	; 0x11f0 <_Z8USB_SendhPKvi+0x66>
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	e8 16       	cp	r14, r24
    1220:	f9 06       	cpc	r15, r25
    1222:	0c f4       	brge	.+2      	; 0x1226 <_Z8USB_SendhPKvi+0x9c>
    1224:	1e 2d       	mov	r17, r14
    1226:	69 2d       	mov	r22, r9
    1228:	ce 01       	movw	r24, r28
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	0e 94 37 08 	call	0x106e	; 0x106e <_ZN6LockEPC1Eh>
    1230:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1234:	85 ff       	sbrs	r24, 5
    1236:	34 c0       	rjmp	.+104    	; 0x12a0 <_Z8USB_SendhPKvi+0x116>
    1238:	81 2f       	mov	r24, r17
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	e8 1a       	sub	r14, r24
    123e:	f9 0a       	sbc	r15, r25
    1240:	66 20       	and	r6, r6
    1242:	29 f0       	breq	.+10     	; 0x124e <_Z8USB_SendhPKvi+0xc4>
    1244:	11 50       	subi	r17, 0x01	; 1
    1246:	a0 f0       	brcs	.+40     	; 0x1270 <_Z8USB_SendhPKvi+0xe6>
    1248:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    124c:	fb cf       	rjmp	.-10     	; 0x1244 <_Z8USB_SendhPKvi+0xba>
    124e:	f6 01       	movw	r30, r12
    1250:	97 fe       	sbrs	r9, 7
    1252:	0a c0       	rjmp	.+20     	; 0x1268 <_Z8USB_SendhPKvi+0xde>
    1254:	11 50       	subi	r17, 0x01	; 1
    1256:	50 f0       	brcs	.+20     	; 0x126c <_Z8USB_SendhPKvi+0xe2>
    1258:	24 91       	lpm	r18, Z
    125a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    125e:	31 96       	adiw	r30, 0x01	; 1
    1260:	f9 cf       	rjmp	.-14     	; 0x1254 <_Z8USB_SendhPKvi+0xca>
    1262:	21 91       	ld	r18, Z+
    1264:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1268:	11 50       	subi	r17, 0x01	; 1
    126a:	d8 f7       	brcc	.-10     	; 0x1262 <_Z8USB_SendhPKvi+0xd8>
    126c:	c8 0e       	add	r12, r24
    126e:	d9 1e       	adc	r13, r25
    1270:	aa 20       	and	r10, r10
    1272:	19 f0       	breq	.+6      	; 0x127a <_Z8USB_SendhPKvi+0xf0>
    1274:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1278:	0b c0       	rjmp	.+22     	; 0x1290 <_Z8USB_SendhPKvi+0x106>
    127a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    127e:	85 fd       	sbrc	r24, 5
    1280:	09 c0       	rjmp	.+18     	; 0x1294 <_Z8USB_SendhPKvi+0x10a>
    1282:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1286:	aa 24       	eor	r10, r10
    1288:	a3 94       	inc	r10
    128a:	e1 14       	cp	r14, r1
    128c:	f1 04       	cpc	r15, r1
    128e:	41 f0       	breq	.+16     	; 0x12a0 <_Z8USB_SendhPKvi+0x116>
    1290:	a1 2c       	mov	r10, r1
    1292:	06 c0       	rjmp	.+12     	; 0x12a0 <_Z8USB_SendhPKvi+0x116>
    1294:	e1 14       	cp	r14, r1
    1296:	f1 04       	cpc	r15, r1
    1298:	19 f4       	brne	.+6      	; 0x12a0 <_Z8USB_SendhPKvi+0x116>
    129a:	51 10       	cpse	r5, r1
    129c:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	8f bf       	out	0x3f, r24	; 63
    12a4:	a5 cf       	rjmp	.-182    	; 0x11f0 <_Z8USB_SendhPKvi+0x66>
    12a6:	5d 98       	cbi	0x0b, 5	; 11
    12a8:	84 e6       	ldi	r24, 0x64	; 100
    12aa:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <TxLEDPulse>
    12ae:	8b 2d       	mov	r24, r11
    12b0:	90 2f       	mov	r25, r16
    12b2:	0f 90       	pop	r0
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	ff 90       	pop	r15
    12be:	ef 90       	pop	r14
    12c0:	df 90       	pop	r13
    12c2:	cf 90       	pop	r12
    12c4:	bf 90       	pop	r11
    12c6:	af 90       	pop	r10
    12c8:	9f 90       	pop	r9
    12ca:	8f 90       	pop	r8
    12cc:	7f 90       	pop	r7
    12ce:	6f 90       	pop	r6
    12d0:	5f 90       	pop	r5
    12d2:	08 95       	ret

000012d4 <_Z11InitControli>:
    12d4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    12d8:	10 92 3b 04 	sts	0x043B, r1	; 0x80043b <_ZL6_cmark+0x1>
    12dc:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <_ZL6_cmark>
    12e0:	90 93 39 04 	sts	0x0439, r25	; 0x800439 <_ZL5_cend+0x1>
    12e4:	80 93 38 04 	sts	0x0438, r24	; 0x800438 <_ZL5_cend>
    12e8:	08 95       	ret

000012ea <_Z15USB_SendControlhPKvi>:
    12ea:	df 92       	push	r13
    12ec:	ef 92       	push	r14
    12ee:	ff 92       	push	r15
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	d8 2e       	mov	r13, r24
    12fa:	8a 01       	movw	r16, r20
    12fc:	7b 01       	movw	r14, r22
    12fe:	e4 0e       	add	r14, r20
    1300:	f5 1e       	adc	r15, r21
    1302:	eb 01       	movw	r28, r22
    1304:	ce 15       	cp	r28, r14
    1306:	df 05       	cpc	r29, r15
    1308:	71 f0       	breq	.+28     	; 0x1326 <_Z15USB_SendControlhPKvi+0x3c>
    130a:	d7 fe       	sbrs	r13, 7
    130c:	03 c0       	rjmp	.+6      	; 0x1314 <_Z15USB_SendControlhPKvi+0x2a>
    130e:	fe 01       	movw	r30, r28
    1310:	84 91       	lpm	r24, Z
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <_Z15USB_SendControlhPKvi+0x2c>
    1314:	88 81       	ld	r24, Y
    1316:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZL11SendControlh>
    131a:	21 96       	adiw	r28, 0x01	; 1
    131c:	81 11       	cpse	r24, r1
    131e:	f2 cf       	rjmp	.-28     	; 0x1304 <_Z15USB_SendControlhPKvi+0x1a>
    1320:	8f ef       	ldi	r24, 0xFF	; 255
    1322:	9f ef       	ldi	r25, 0xFF	; 255
    1324:	01 c0       	rjmp	.+2      	; 0x1328 <_Z15USB_SendControlhPKvi+0x3e>
    1326:	c8 01       	movw	r24, r16
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	df 90       	pop	r13
    1336:	08 95       	ret

00001338 <_Z15USB_RecvControlPvi>:
    1338:	af 92       	push	r10
    133a:	bf 92       	push	r11
    133c:	df 92       	push	r13
    133e:	ef 92       	push	r14
    1340:	ff 92       	push	r15
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	5c 01       	movw	r10, r24
    134c:	8b 01       	movw	r16, r22
    134e:	eb 01       	movw	r28, r22
    1350:	9b ef       	ldi	r25, 0xFB	; 251
    1352:	d9 2e       	mov	r13, r25
    1354:	20 97       	sbiw	r28, 0x00	; 0
    1356:	c1 f0       	breq	.+48     	; 0x1388 <_Z15USB_RecvControlPvi+0x50>
    1358:	7e 01       	movw	r14, r28
    135a:	c1 34       	cpi	r28, 0x41	; 65
    135c:	d1 05       	cpc	r29, r1
    135e:	1c f0       	brlt	.+6      	; 0x1366 <_Z15USB_RecvControlPvi+0x2e>
    1360:	80 e4       	ldi	r24, 0x40	; 64
    1362:	e8 2e       	mov	r14, r24
    1364:	f1 2c       	mov	r15, r1
    1366:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    136a:	82 ff       	sbrs	r24, 2
    136c:	fc cf       	rjmp	.-8      	; 0x1366 <_Z15USB_RecvControlPvi+0x2e>
    136e:	c8 01       	movw	r24, r16
    1370:	8c 1b       	sub	r24, r28
    1372:	9d 0b       	sbc	r25, r29
    1374:	6e 2d       	mov	r22, r14
    1376:	8a 0d       	add	r24, r10
    1378:	9b 1d       	adc	r25, r11
    137a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_ZL4RecvPVhh>
    137e:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1382:	ce 19       	sub	r28, r14
    1384:	df 09       	sbc	r29, r15
    1386:	e6 cf       	rjmp	.-52     	; 0x1354 <_Z15USB_RecvControlPvi+0x1c>
    1388:	c8 01       	movw	r24, r16
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	ff 90       	pop	r15
    1394:	ef 90       	pop	r14
    1396:	df 90       	pop	r13
    1398:	bf 90       	pop	r11
    139a:	af 90       	pop	r10
    139c:	08 95       	ret

0000139e <__vector_11>:
    139e:	1f 92       	push	r1
    13a0:	0f 92       	push	r0
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	0f 92       	push	r0
    13a6:	11 24       	eor	r1, r1
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	2f 93       	push	r18
    13b6:	3f 93       	push	r19
    13b8:	4f 93       	push	r20
    13ba:	5f 93       	push	r21
    13bc:	6f 93       	push	r22
    13be:	7f 93       	push	r23
    13c0:	8f 93       	push	r24
    13c2:	9f 93       	push	r25
    13c4:	af 93       	push	r26
    13c6:	bf 93       	push	r27
    13c8:	ef 93       	push	r30
    13ca:	ff 93       	push	r31
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	6c 97       	sbiw	r28, 0x1c	; 28
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    13de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    13e2:	83 ff       	sbrs	r24, 3
    13e4:	17 c1       	rjmp	.+558    	; 0x1614 <__vector_11+0x276>
    13e6:	68 e0       	ldi	r22, 0x08	; 8
    13e8:	ce 01       	movw	r24, r28
    13ea:	45 96       	adiw	r24, 0x15	; 21
    13ec:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_ZL4RecvPVhh>
    13f0:	82 ef       	ldi	r24, 0xF2	; 242
    13f2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    13f6:	8d 89       	ldd	r24, Y+21	; 0x15
    13f8:	87 ff       	sbrs	r24, 7
    13fa:	05 c0       	rjmp	.+10     	; 0x1406 <__vector_11+0x68>
    13fc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1400:	90 ff       	sbrs	r25, 0
    1402:	fc cf       	rjmp	.-8      	; 0x13fc <__vector_11+0x5e>
    1404:	03 c0       	rjmp	.+6      	; 0x140c <__vector_11+0x6e>
    1406:	9e ef       	ldi	r25, 0xFE	; 254
    1408:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    140c:	98 2f       	mov	r25, r24
    140e:	90 76       	andi	r25, 0x60	; 96
    1410:	09 f0       	breq	.+2      	; 0x1414 <__vector_11+0x76>
    1412:	d8 c0       	rjmp	.+432    	; 0x15c4 <__vector_11+0x226>
    1414:	9e 89       	ldd	r25, Y+22	; 0x16
    1416:	4f 89       	ldd	r20, Y+23	; 0x17
    1418:	58 8d       	ldd	r21, Y+24	; 0x18
    141a:	2f 89       	ldd	r18, Y+23	; 0x17
    141c:	18 8d       	ldd	r17, Y+24	; 0x18
    141e:	91 11       	cpse	r25, r1
    1420:	0c c0       	rjmp	.+24     	; 0x143a <__vector_11+0x9c>
    1422:	80 38       	cpi	r24, 0x80	; 128
    1424:	29 f4       	brne	.+10     	; 0x1430 <__vector_11+0x92>
    1426:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <_usbCurrentStatus>
    142a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <__vector_11+0x96>
    1430:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1434:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1438:	e6 c0       	rjmp	.+460    	; 0x1606 <__vector_11+0x268>
    143a:	91 30       	cpi	r25, 0x01	; 1
    143c:	51 f4       	brne	.+20     	; 0x1452 <__vector_11+0xb4>
    143e:	81 11       	cpse	r24, r1
    1440:	e2 c0       	rjmp	.+452    	; 0x1606 <__vector_11+0x268>
    1442:	41 30       	cpi	r20, 0x01	; 1
    1444:	51 05       	cpc	r21, r1
    1446:	09 f0       	breq	.+2      	; 0x144a <__vector_11+0xac>
    1448:	de c0       	rjmp	.+444    	; 0x1606 <__vector_11+0x268>
    144a:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <_usbCurrentStatus>
    144e:	8d 7f       	andi	r24, 0xFD	; 253
    1450:	0b c0       	rjmp	.+22     	; 0x1468 <__vector_11+0xca>
    1452:	93 30       	cpi	r25, 0x03	; 3
    1454:	61 f4       	brne	.+24     	; 0x146e <__vector_11+0xd0>
    1456:	81 11       	cpse	r24, r1
    1458:	d6 c0       	rjmp	.+428    	; 0x1606 <__vector_11+0x268>
    145a:	41 30       	cpi	r20, 0x01	; 1
    145c:	51 05       	cpc	r21, r1
    145e:	09 f0       	breq	.+2      	; 0x1462 <__vector_11+0xc4>
    1460:	d2 c0       	rjmp	.+420    	; 0x1606 <__vector_11+0x268>
    1462:	80 91 3d 04 	lds	r24, 0x043D	; 0x80043d <_usbCurrentStatus>
    1466:	82 60       	ori	r24, 0x02	; 2
    1468:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <_usbCurrentStatus>
    146c:	cc c0       	rjmp	.+408    	; 0x1606 <__vector_11+0x268>
    146e:	95 30       	cpi	r25, 0x05	; 5
    1470:	49 f4       	brne	.+18     	; 0x1484 <__vector_11+0xe6>
    1472:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1476:	80 ff       	sbrs	r24, 0
    1478:	fc cf       	rjmp	.-8      	; 0x1472 <__vector_11+0xd4>
    147a:	82 2f       	mov	r24, r18
    147c:	80 68       	ori	r24, 0x80	; 128
    147e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    1482:	c1 c0       	rjmp	.+386    	; 0x1606 <__vector_11+0x268>
    1484:	96 30       	cpi	r25, 0x06	; 6
    1486:	09 f0       	breq	.+2      	; 0x148a <__vector_11+0xec>
    1488:	70 c0       	rjmp	.+224    	; 0x156a <__vector_11+0x1cc>
    148a:	eb 8c       	ldd	r14, Y+27	; 0x1b
    148c:	fc 8c       	ldd	r15, Y+28	; 0x1c
    148e:	12 30       	cpi	r17, 0x02	; 2
    1490:	69 f5       	brne	.+90     	; 0x14ec <__vector_11+0x14e>
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_Z11InitControli>
    149a:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZL14SendInterfacesv>
    149e:	99 e0       	ldi	r25, 0x09	; 9
    14a0:	9e 01       	movw	r18, r28
    14a2:	2f 5f       	subi	r18, 0xFF	; 255
    14a4:	3f 4f       	sbci	r19, 0xFF	; 255
    14a6:	69 01       	movw	r12, r18
    14a8:	f9 01       	movw	r30, r18
    14aa:	29 2f       	mov	r18, r25
    14ac:	11 92       	st	Z+, r1
    14ae:	2a 95       	dec	r18
    14b0:	e9 f7       	brne	.-6      	; 0x14ac <__vector_11+0x10e>
    14b2:	99 83       	std	Y+1, r25	; 0x01
    14b4:	1a 83       	std	Y+2, r17	; 0x02
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	9e 83       	std	Y+6, r25	; 0x06
    14ba:	90 ea       	ldi	r25, 0xA0	; 160
    14bc:	98 87       	std	Y+8, r25	; 0x08
    14be:	9a ef       	ldi	r25, 0xFA	; 250
    14c0:	99 87       	std	Y+9, r25	; 0x09
    14c2:	20 91 3a 04 	lds	r18, 0x043A	; 0x80043a <_ZL6_cmark>
    14c6:	30 91 3b 04 	lds	r19, 0x043B	; 0x80043b <_ZL6_cmark+0x1>
    14ca:	27 5f       	subi	r18, 0xF7	; 247
    14cc:	3f 4f       	sbci	r19, 0xFF	; 255
    14ce:	3c 83       	std	Y+4, r19	; 0x04
    14d0:	2b 83       	std	Y+3, r18	; 0x03
    14d2:	8d 83       	std	Y+5, r24	; 0x05
    14d4:	c7 01       	movw	r24, r14
    14d6:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_Z11InitControli>
    14da:	49 e0       	ldi	r20, 0x09	; 9
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	b6 01       	movw	r22, r12
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z15USB_SendControlhPKvi>
    14e6:	0e 94 21 08 	call	0x1042	; 0x1042 <_ZL14SendInterfacesv>
    14ea:	8d c0       	rjmp	.+282    	; 0x1606 <__vector_11+0x268>
    14ec:	c7 01       	movw	r24, r14
    14ee:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_Z11InitControli>
    14f2:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_Z12PluggableUSBv>
    14f6:	be 01       	movw	r22, r28
    14f8:	6b 5e       	subi	r22, 0xEB	; 235
    14fa:	7f 4f       	sbci	r23, 0xFF	; 255
    14fc:	0e 94 f5 14 	call	0x29ea	; 0x29ea <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	19 f0       	breq	.+6      	; 0x150a <__vector_11+0x16c>
    1504:	0c f0       	brlt	.+2      	; 0x1508 <__vector_11+0x16a>
    1506:	7f c0       	rjmp	.+254    	; 0x1606 <__vector_11+0x268>
    1508:	82 c0       	rjmp	.+260    	; 0x160e <__vector_11+0x270>
    150a:	11 30       	cpi	r17, 0x01	; 1
    150c:	09 f4       	brne	.+2      	; 0x1510 <__vector_11+0x172>
    150e:	70 c0       	rjmp	.+224    	; 0x15f0 <__vector_11+0x252>
    1510:	13 30       	cpi	r17, 0x03	; 3
    1512:	09 f0       	breq	.+2      	; 0x1516 <__vector_11+0x178>
    1514:	7c c0       	rjmp	.+248    	; 0x160e <__vector_11+0x270>
    1516:	8f 89       	ldd	r24, Y+23	; 0x17
    1518:	88 23       	and	r24, r24
    151a:	09 f4       	brne	.+2      	; 0x151e <__vector_11+0x180>
    151c:	6c c0       	rjmp	.+216    	; 0x15f6 <__vector_11+0x258>
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	29 f4       	brne	.+10     	; 0x152c <__vector_11+0x18e>
    1522:	40 e8       	ldi	r20, 0x80	; 128
    1524:	60 e1       	ldi	r22, 0x10	; 16
    1526:	8a e2       	ldi	r24, 0x2A	; 42
    1528:	91 e0       	ldi	r25, 0x01	; 1
    152a:	06 c0       	rjmp	.+12     	; 0x1538 <__vector_11+0x19a>
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	39 f4       	brne	.+14     	; 0x153e <__vector_11+0x1a0>
    1530:	40 e8       	ldi	r20, 0x80	; 128
    1532:	6b e0       	ldi	r22, 0x0B	; 11
    1534:	8e e1       	ldi	r24, 0x1E	; 30
    1536:	91 e0       	ldi	r25, 0x01	; 1
    1538:	0e 94 c9 07 	call	0xf92	; 0xf92 <_ZL24USB_SendStringDescriptorPKhhh>
    153c:	56 c0       	rjmp	.+172    	; 0x15ea <__vector_11+0x24c>
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	09 f0       	breq	.+2      	; 0x1544 <__vector_11+0x1a6>
    1542:	65 c0       	rjmp	.+202    	; 0x160e <__vector_11+0x270>
    1544:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_Z12PluggableUSBv>
    1548:	8e 01       	movw	r16, r28
    154a:	0f 5f       	subi	r16, 0xFF	; 255
    154c:	1f 4f       	sbci	r17, 0xFF	; 255
    154e:	b8 01       	movw	r22, r16
    1550:	0e 94 14 15 	call	0x2a28	; 0x2a28 <_ZN13PluggableUSB_12getShortNameEPc>
    1554:	f8 01       	movw	r30, r16
    1556:	01 90       	ld	r0, Z+
    1558:	00 20       	and	r0, r0
    155a:	e9 f7       	brne	.-6      	; 0x1556 <__vector_11+0x1b8>
    155c:	31 97       	sbiw	r30, 0x01	; 1
    155e:	bf 01       	movw	r22, r30
    1560:	60 1b       	sub	r22, r16
    1562:	71 0b       	sbc	r23, r17
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	c8 01       	movw	r24, r16
    1568:	e7 cf       	rjmp	.-50     	; 0x1538 <__vector_11+0x19a>
    156a:	97 30       	cpi	r25, 0x07	; 7
    156c:	09 f4       	brne	.+2      	; 0x1570 <__vector_11+0x1d2>
    156e:	4f c0       	rjmp	.+158    	; 0x160e <__vector_11+0x270>
    1570:	98 30       	cpi	r25, 0x08	; 8
    1572:	21 f4       	brne	.+8      	; 0x157c <__vector_11+0x1de>
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    157a:	45 c0       	rjmp	.+138    	; 0x1606 <__vector_11+0x268>
    157c:	99 30       	cpi	r25, 0x09	; 9
    157e:	09 f0       	breq	.+2      	; 0x1582 <__vector_11+0x1e4>
    1580:	42 c0       	rjmp	.+132    	; 0x1606 <__vector_11+0x268>
    1582:	83 70       	andi	r24, 0x03	; 3
    1584:	09 f0       	breq	.+2      	; 0x1588 <__vector_11+0x1ea>
    1586:	43 c0       	rjmp	.+134    	; 0x160e <__vector_11+0x270>
    1588:	e7 e1       	ldi	r30, 0x17	; 23
    158a:	f1 e0       	ldi	r31, 0x01	; 1
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	31 e0       	ldi	r19, 0x01	; 1
    1590:	96 e3       	ldi	r25, 0x36	; 54
    1592:	20 81       	ld	r18, Z
    1594:	21 11       	cpse	r18, r1
    1596:	09 c0       	rjmp	.+18     	; 0x15aa <__vector_11+0x20c>
    1598:	8e e7       	ldi	r24, 0x7E	; 126
    159a:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
    159e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
    15a2:	8f 89       	ldd	r24, Y+23	; 0x17
    15a4:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <_usbConfiguration>
    15a8:	2e c0       	rjmp	.+92     	; 0x1606 <__vector_11+0x268>
    15aa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    15ae:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    15b2:	21 91       	ld	r18, Z+
    15b4:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    15b8:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    15bc:	8f 5f       	subi	r24, 0xFF	; 255
    15be:	87 30       	cpi	r24, 0x07	; 7
    15c0:	41 f7       	brne	.-48     	; 0x1592 <__vector_11+0x1f4>
    15c2:	ea cf       	rjmp	.-44     	; 0x1598 <__vector_11+0x1fa>
    15c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15c8:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <_Z11InitControli>
    15cc:	89 8d       	ldd	r24, Y+25	; 0x19
    15ce:	81 11       	cpse	r24, r1
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <__vector_11+0x23e>
    15d2:	ce 01       	movw	r24, r28
    15d4:	45 96       	adiw	r24, 0x15	; 21
    15d6:	0e 94 83 03 	call	0x706	; 0x706 <_Z9CDC_SetupR8USBSetup>
    15da:	07 c0       	rjmp	.+14     	; 0x15ea <__vector_11+0x24c>
    15dc:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <_Z12PluggableUSBv>
    15e0:	be 01       	movw	r22, r28
    15e2:	6b 5e       	subi	r22, 0xEB	; 235
    15e4:	7f 4f       	sbci	r23, 0xFF	; 255
    15e6:	0e 94 33 15 	call	0x2a66	; 0x2a66 <_ZN13PluggableUSB_5setupER8USBSetup>
    15ea:	88 23       	and	r24, r24
    15ec:	81 f0       	breq	.+32     	; 0x160e <__vector_11+0x270>
    15ee:	0b c0       	rjmp	.+22     	; 0x1606 <__vector_11+0x268>
    15f0:	6c e0       	ldi	r22, 0x0C	; 12
    15f2:	71 e0       	ldi	r23, 0x01	; 1
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <__vector_11+0x25c>
    15f6:	6b e3       	ldi	r22, 0x3B	; 59
    15f8:	71 e0       	ldi	r23, 0x01	; 1
    15fa:	fb 01       	movw	r30, r22
    15fc:	44 91       	lpm	r20, Z
    15fe:	50 e0       	ldi	r21, 0x00	; 0
    1600:	80 e8       	ldi	r24, 0x80	; 128
    1602:	0e 94 75 09 	call	0x12ea	; 0x12ea <_Z15USB_SendControlhPKvi>
    1606:	8e ef       	ldi	r24, 0xFE	; 254
    1608:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    160c:	03 c0       	rjmp	.+6      	; 0x1614 <__vector_11+0x276>
    160e:	81 e2       	ldi	r24, 0x21	; 33
    1610:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1614:	6c 96       	adiw	r28, 0x1c	; 28
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	ff 91       	pop	r31
    1626:	ef 91       	pop	r30
    1628:	bf 91       	pop	r27
    162a:	af 91       	pop	r26
    162c:	9f 91       	pop	r25
    162e:	8f 91       	pop	r24
    1630:	7f 91       	pop	r23
    1632:	6f 91       	pop	r22
    1634:	5f 91       	pop	r21
    1636:	4f 91       	pop	r20
    1638:	3f 91       	pop	r19
    163a:	2f 91       	pop	r18
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	ff 90       	pop	r15
    1642:	ef 90       	pop	r14
    1644:	df 90       	pop	r13
    1646:	cf 90       	pop	r12
    1648:	0f 90       	pop	r0
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	0f 90       	pop	r0
    164e:	1f 90       	pop	r1
    1650:	18 95       	reti

00001652 <_Z9USB_Flushh>:
    1652:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1656:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    165a:	88 23       	and	r24, r24
    165c:	19 f0       	breq	.+6      	; 0x1664 <_Z9USB_Flushh+0x12>
    165e:	8a e3       	ldi	r24, 0x3A	; 58
    1660:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1664:	08 95       	ret

00001666 <__vector_10>:
    1666:	1f 92       	push	r1
    1668:	0f 92       	push	r0
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	0f 92       	push	r0
    166e:	11 24       	eor	r1, r1
    1670:	2f 93       	push	r18
    1672:	3f 93       	push	r19
    1674:	4f 93       	push	r20
    1676:	5f 93       	push	r21
    1678:	6f 93       	push	r22
    167a:	7f 93       	push	r23
    167c:	8f 93       	push	r24
    167e:	9f 93       	push	r25
    1680:	af 93       	push	r26
    1682:	bf 93       	push	r27
    1684:	cf 93       	push	r28
    1686:	ef 93       	push	r30
    1688:	ff 93       	push	r31
    168a:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    168e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1692:	83 7f       	andi	r24, 0xF3	; 243
    1694:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1698:	c3 ff       	sbrs	r28, 3
    169a:	0f c0       	rjmp	.+30     	; 0x16ba <__vector_10+0x54>
    169c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    16a6:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    16aa:	82 e3       	ldi	r24, 0x32	; 50
    16ac:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    16b0:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <_usbConfiguration>
    16b4:	88 e0       	ldi	r24, 0x08	; 8
    16b6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    16ba:	c2 ff       	sbrs	r28, 2
    16bc:	19 c0       	rjmp	.+50     	; 0x16f0 <__vector_10+0x8a>
    16be:	83 e0       	ldi	r24, 0x03	; 3
    16c0:	0e 94 29 0b 	call	0x1652	; 0x1652 <_Z9USB_Flushh>
    16c4:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <TxLEDPulse>
    16c8:	88 23       	and	r24, r24
    16ca:	39 f0       	breq	.+14     	; 0x16da <__vector_10+0x74>
    16cc:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <TxLEDPulse>
    16d0:	81 50       	subi	r24, 0x01	; 1
    16d2:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <TxLEDPulse>
    16d6:	88 23       	and	r24, r24
    16d8:	89 f1       	breq	.+98     	; 0x173c <__vector_10+0xd6>
    16da:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <RxLEDPulse>
    16de:	88 23       	and	r24, r24
    16e0:	39 f0       	breq	.+14     	; 0x16f0 <__vector_10+0x8a>
    16e2:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <RxLEDPulse>
    16e6:	81 50       	subi	r24, 0x01	; 1
    16e8:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <RxLEDPulse>
    16ec:	88 23       	and	r24, r24
    16ee:	41 f1       	breq	.+80     	; 0x1740 <__vector_10+0xda>
    16f0:	c4 ff       	sbrs	r28, 4
    16f2:	10 c0       	rjmp	.+32     	; 0x1714 <__vector_10+0xae>
    16f4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    16f8:	8e 7e       	andi	r24, 0xEE	; 238
    16fa:	81 60       	ori	r24, 0x01	; 1
    16fc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1700:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1704:	8f 7e       	andi	r24, 0xEF	; 239
    1706:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    170a:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <_usbSuspendState>
    170e:	8e 7e       	andi	r24, 0xEE	; 238
    1710:	80 61       	ori	r24, 0x10	; 16
    1712:	11 c0       	rjmp	.+34     	; 0x1736 <__vector_10+0xd0>
    1714:	c0 ff       	sbrs	r28, 0
    1716:	16 c0       	rjmp	.+44     	; 0x1744 <__vector_10+0xde>
    1718:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    171c:	8e 7e       	andi	r24, 0xEE	; 238
    171e:	80 61       	ori	r24, 0x10	; 16
    1720:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1724:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1728:	8e 7e       	andi	r24, 0xEE	; 238
    172a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    172e:	80 91 3c 04 	lds	r24, 0x043C	; 0x80043c <_usbSuspendState>
    1732:	8e 7e       	andi	r24, 0xEE	; 238
    1734:	81 60       	ori	r24, 0x01	; 1
    1736:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <_usbSuspendState>
    173a:	04 c0       	rjmp	.+8      	; 0x1744 <__vector_10+0xde>
    173c:	5d 9a       	sbi	0x0b, 5	; 11
    173e:	cd cf       	rjmp	.-102    	; 0x16da <__vector_10+0x74>
    1740:	28 9a       	sbi	0x05, 0	; 5
    1742:	d6 cf       	rjmp	.-84     	; 0x16f0 <__vector_10+0x8a>
    1744:	ff 91       	pop	r31
    1746:	ef 91       	pop	r30
    1748:	cf 91       	pop	r28
    174a:	bf 91       	pop	r27
    174c:	af 91       	pop	r26
    174e:	9f 91       	pop	r25
    1750:	8f 91       	pop	r24
    1752:	7f 91       	pop	r23
    1754:	6f 91       	pop	r22
    1756:	5f 91       	pop	r21
    1758:	4f 91       	pop	r20
    175a:	3f 91       	pop	r19
    175c:	2f 91       	pop	r18
    175e:	0f 90       	pop	r0
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	0f 90       	pop	r0
    1764:	1f 90       	pop	r1
    1766:	18 95       	reti

00001768 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    1768:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <_usbConfiguration>
	_usbCurrentStatus = 0;
    176c:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_usbCurrentStatus>
	_usbSuspendState = 0;
    1770:	10 92 3c 04 	sts	0x043C, r1	; 0x80043c <_usbSuspendState>
	USB_ClockEnable();
    1774:	0e 94 fe 07 	call	0xffc	; 0xffc <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    1778:	e1 ee       	ldi	r30, 0xE1	; 225
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	8e 7e       	andi	r24, 0xEE	; 238
    1780:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    1782:	8d e0       	ldi	r24, 0x0D	; 13
    1784:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
	
	TX_RX_LED_INIT;
    1788:	55 9a       	sbi	0x0a, 5	; 10
    178a:	20 9a       	sbi	0x04, 0	; 4
    178c:	08 95       	ret

0000178e <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    178e:	1f 92       	push	r1
    1790:	0f 92       	push	r0
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	0f 92       	push	r0
    1796:	11 24       	eor	r1, r1
    1798:	2f 93       	push	r18
    179a:	3f 93       	push	r19
    179c:	8f 93       	push	r24
    179e:	9f 93       	push	r25
    17a0:	af 93       	push	r26
    17a2:	bf 93       	push	r27
    17a4:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <timer0_millis>
    17a8:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <timer0_millis+0x1>
    17ac:	a0 91 44 04 	lds	r26, 0x0444	; 0x800444 <timer0_millis+0x2>
    17b0:	b0 91 45 04 	lds	r27, 0x0445	; 0x800445 <timer0_millis+0x3>
    17b4:	30 91 41 04 	lds	r19, 0x0441	; 0x800441 <timer0_fract>
    17b8:	23 e0       	ldi	r18, 0x03	; 3
    17ba:	23 0f       	add	r18, r19
    17bc:	2d 37       	cpi	r18, 0x7D	; 125
    17be:	20 f4       	brcc	.+8      	; 0x17c8 <__vector_23+0x3a>
    17c0:	01 96       	adiw	r24, 0x01	; 1
    17c2:	a1 1d       	adc	r26, r1
    17c4:	b1 1d       	adc	r27, r1
    17c6:	05 c0       	rjmp	.+10     	; 0x17d2 <__vector_23+0x44>
    17c8:	26 e8       	ldi	r18, 0x86	; 134
    17ca:	23 0f       	add	r18, r19
    17cc:	02 96       	adiw	r24, 0x02	; 2
    17ce:	a1 1d       	adc	r26, r1
    17d0:	b1 1d       	adc	r27, r1
    17d2:	20 93 41 04 	sts	0x0441, r18	; 0x800441 <timer0_fract>
    17d6:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <timer0_millis>
    17da:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <timer0_millis+0x1>
    17de:	a0 93 44 04 	sts	0x0444, r26	; 0x800444 <timer0_millis+0x2>
    17e2:	b0 93 45 04 	sts	0x0445, r27	; 0x800445 <timer0_millis+0x3>
    17e6:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <timer0_overflow_count>
    17ea:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <timer0_overflow_count+0x1>
    17ee:	a0 91 48 04 	lds	r26, 0x0448	; 0x800448 <timer0_overflow_count+0x2>
    17f2:	b0 91 49 04 	lds	r27, 0x0449	; 0x800449 <timer0_overflow_count+0x3>
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	a1 1d       	adc	r26, r1
    17fa:	b1 1d       	adc	r27, r1
    17fc:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <timer0_overflow_count>
    1800:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <timer0_overflow_count+0x1>
    1804:	a0 93 48 04 	sts	0x0448, r26	; 0x800448 <timer0_overflow_count+0x2>
    1808:	b0 93 49 04 	sts	0x0449, r27	; 0x800449 <timer0_overflow_count+0x3>
    180c:	bf 91       	pop	r27
    180e:	af 91       	pop	r26
    1810:	9f 91       	pop	r25
    1812:	8f 91       	pop	r24
    1814:	3f 91       	pop	r19
    1816:	2f 91       	pop	r18
    1818:	0f 90       	pop	r0
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	0f 90       	pop	r0
    181e:	1f 90       	pop	r1
    1820:	18 95       	reti

00001822 <millis>:
    1822:	2f b7       	in	r18, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	60 91 42 04 	lds	r22, 0x0442	; 0x800442 <timer0_millis>
    182a:	70 91 43 04 	lds	r23, 0x0443	; 0x800443 <timer0_millis+0x1>
    182e:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <timer0_millis+0x2>
    1832:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <timer0_millis+0x3>
    1836:	2f bf       	out	0x3f, r18	; 63
    1838:	08 95       	ret

0000183a <micros>:
    183a:	3f b7       	in	r19, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <timer0_overflow_count>
    1842:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <timer0_overflow_count+0x1>
    1846:	a0 91 48 04 	lds	r26, 0x0448	; 0x800448 <timer0_overflow_count+0x2>
    184a:	b0 91 49 04 	lds	r27, 0x0449	; 0x800449 <timer0_overflow_count+0x3>
    184e:	26 b5       	in	r18, 0x26	; 38
    1850:	a8 9b       	sbis	0x15, 0	; 21
    1852:	05 c0       	rjmp	.+10     	; 0x185e <micros+0x24>
    1854:	2f 3f       	cpi	r18, 0xFF	; 255
    1856:	19 f0       	breq	.+6      	; 0x185e <micros+0x24>
    1858:	01 96       	adiw	r24, 0x01	; 1
    185a:	a1 1d       	adc	r26, r1
    185c:	b1 1d       	adc	r27, r1
    185e:	3f bf       	out	0x3f, r19	; 63
    1860:	ba 2f       	mov	r27, r26
    1862:	a9 2f       	mov	r26, r25
    1864:	98 2f       	mov	r25, r24
    1866:	88 27       	eor	r24, r24
    1868:	82 0f       	add	r24, r18
    186a:	91 1d       	adc	r25, r1
    186c:	a1 1d       	adc	r26, r1
    186e:	b1 1d       	adc	r27, r1
    1870:	bc 01       	movw	r22, r24
    1872:	cd 01       	movw	r24, r26
    1874:	42 e0       	ldi	r20, 0x02	; 2
    1876:	66 0f       	add	r22, r22
    1878:	77 1f       	adc	r23, r23
    187a:	88 1f       	adc	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	4a 95       	dec	r20
    1880:	d1 f7       	brne	.-12     	; 0x1876 <micros+0x3c>
    1882:	08 95       	ret

00001884 <delay>:
    1884:	8f 92       	push	r8
    1886:	9f 92       	push	r9
    1888:	af 92       	push	r10
    188a:	bf 92       	push	r11
    188c:	cf 92       	push	r12
    188e:	df 92       	push	r13
    1890:	ef 92       	push	r14
    1892:	ff 92       	push	r15
    1894:	6b 01       	movw	r12, r22
    1896:	7c 01       	movw	r14, r24
    1898:	0e 94 1d 0c 	call	0x183a	; 0x183a <micros>
    189c:	4b 01       	movw	r8, r22
    189e:	5c 01       	movw	r10, r24
    18a0:	c1 14       	cp	r12, r1
    18a2:	d1 04       	cpc	r13, r1
    18a4:	e1 04       	cpc	r14, r1
    18a6:	f1 04       	cpc	r15, r1
    18a8:	01 f1       	breq	.+64     	; 0x18ea <delay+0x66>
    18aa:	0e 94 cb 14 	call	0x2996	; 0x2996 <yield>
    18ae:	0e 94 1d 0c 	call	0x183a	; 0x183a <micros>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	88 19       	sub	r24, r8
    18b8:	99 09       	sbc	r25, r9
    18ba:	aa 09       	sbc	r26, r10
    18bc:	bb 09       	sbc	r27, r11
    18be:	88 3e       	cpi	r24, 0xE8	; 232
    18c0:	93 40       	sbci	r25, 0x03	; 3
    18c2:	a1 05       	cpc	r26, r1
    18c4:	b1 05       	cpc	r27, r1
    18c6:	60 f3       	brcs	.-40     	; 0x18a0 <delay+0x1c>
    18c8:	21 e0       	ldi	r18, 0x01	; 1
    18ca:	c2 1a       	sub	r12, r18
    18cc:	d1 08       	sbc	r13, r1
    18ce:	e1 08       	sbc	r14, r1
    18d0:	f1 08       	sbc	r15, r1
    18d2:	88 ee       	ldi	r24, 0xE8	; 232
    18d4:	88 0e       	add	r8, r24
    18d6:	83 e0       	ldi	r24, 0x03	; 3
    18d8:	98 1e       	adc	r9, r24
    18da:	a1 1c       	adc	r10, r1
    18dc:	b1 1c       	adc	r11, r1
    18de:	c1 14       	cp	r12, r1
    18e0:	d1 04       	cpc	r13, r1
    18e2:	e1 04       	cpc	r14, r1
    18e4:	f1 04       	cpc	r15, r1
    18e6:	19 f7       	brne	.-58     	; 0x18ae <delay+0x2a>
    18e8:	db cf       	rjmp	.-74     	; 0x18a0 <delay+0x1c>
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	df 90       	pop	r13
    18f0:	cf 90       	pop	r12
    18f2:	bf 90       	pop	r11
    18f4:	af 90       	pop	r10
    18f6:	9f 90       	pop	r9
    18f8:	8f 90       	pop	r8
    18fa:	08 95       	ret

000018fc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    18fc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    18fe:	84 b5       	in	r24, 0x24	; 36
    1900:	82 60       	ori	r24, 0x02	; 2
    1902:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1904:	84 b5       	in	r24, 0x24	; 36
    1906:	81 60       	ori	r24, 0x01	; 1
    1908:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    190a:	85 b5       	in	r24, 0x25	; 37
    190c:	82 60       	ori	r24, 0x02	; 2
    190e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1910:	85 b5       	in	r24, 0x25	; 37
    1912:	81 60       	ori	r24, 0x01	; 1
    1914:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1916:	ee e6       	ldi	r30, 0x6E	; 110
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	81 60       	ori	r24, 0x01	; 1
    191e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1920:	e1 e8       	ldi	r30, 0x81	; 129
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1926:	80 81       	ld	r24, Z
    1928:	82 60       	ori	r24, 0x02	; 2
    192a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    192c:	80 81       	ld	r24, Z
    192e:	81 60       	ori	r24, 0x01	; 1
    1930:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1932:	e0 e8       	ldi	r30, 0x80	; 128
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	81 60       	ori	r24, 0x01	; 1
    193a:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    193c:	e1 e9       	ldi	r30, 0x91	; 145
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	82 60       	ori	r24, 0x02	; 2
    1944:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1946:	80 81       	ld	r24, Z
    1948:	81 60       	ori	r24, 0x01	; 1
    194a:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    194c:	e0 e9       	ldi	r30, 0x90	; 144
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	81 60       	ori	r24, 0x01	; 1
    1954:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    1956:	e1 ec       	ldi	r30, 0xC1	; 193
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	84 60       	ori	r24, 0x04	; 4
    195e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    1960:	80 81       	ld	r24, Z
    1962:	82 60       	ori	r24, 0x02	; 2
    1964:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1966:	80 81       	ld	r24, Z
    1968:	81 60       	ori	r24, 0x01	; 1
    196a:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    196c:	e3 ec       	ldi	r30, 0xC3	; 195
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	81 60       	ori	r24, 0x01	; 1
    1974:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    1976:	e0 ec       	ldi	r30, 0xC0	; 192
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	82 60       	ori	r24, 0x02	; 2
    197e:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    1980:	e2 ec       	ldi	r30, 0xC2	; 194
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	81 60       	ori	r24, 0x01	; 1
    1988:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    198a:	ea e7       	ldi	r30, 0x7A	; 122
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	84 60       	ori	r24, 0x04	; 4
    1992:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1994:	80 81       	ld	r24, Z
    1996:	82 60       	ori	r24, 0x02	; 2
    1998:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    199a:	80 81       	ld	r24, Z
    199c:	81 60       	ori	r24, 0x01	; 1
    199e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    19a0:	80 81       	ld	r24, Z
    19a2:	80 68       	ori	r24, 0x80	; 128
    19a4:	80 83       	st	Z, r24
    19a6:	08 95       	ret

000019a8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	fc 01       	movw	r30, r24
    19ac:	31 97       	sbiw	r30, 0x01	; 1
    19ae:	ef 30       	cpi	r30, 0x0F	; 15
    19b0:	f1 05       	cpc	r31, r1
    19b2:	b0 f5       	brcc	.+108    	; 0x1a20 <turnOffPWM+0x78>
    19b4:	ea 5a       	subi	r30, 0xAA	; 170
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    19bc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    19c0:	8f 77       	andi	r24, 0x7F	; 127
    19c2:	03 c0       	rjmp	.+6      	; 0x19ca <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    19c4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    19c8:	8f 7d       	andi	r24, 0xDF	; 223
    19ca:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    19ce:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    19d0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    19d4:	87 7f       	andi	r24, 0xF7	; 247
    19d6:	f9 cf       	rjmp	.-14     	; 0x19ca <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    19d8:	84 b5       	in	r24, 0x24	; 36
    19da:	8f 77       	andi	r24, 0x7F	; 127
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    19de:	84 b5       	in	r24, 0x24	; 36
    19e0:	8f 7d       	andi	r24, 0xDF	; 223
    19e2:	84 bd       	out	0x24, r24	; 36
    19e4:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    19e6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    19ea:	8f 77       	andi	r24, 0x7F	; 127
    19ec:	07 c0       	rjmp	.+14     	; 0x19fc <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    19ee:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    19f2:	8f 7d       	andi	r24, 0xDF	; 223
    19f4:	03 c0       	rjmp	.+6      	; 0x19fc <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    19f6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    19fa:	87 7f       	andi	r24, 0xF7	; 247
    19fc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    1a00:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1a02:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1a06:	8f 77       	andi	r24, 0x7F	; 127
    1a08:	03 c0       	rjmp	.+6      	; 0x1a10 <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1a0a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1a0e:	8f 7d       	andi	r24, 0xDF	; 223
    1a10:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    1a14:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    1a16:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1a1a:	87 7f       	andi	r24, 0xF7	; 247
    1a1c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    1a20:	08 95       	ret

00001a22 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	fc 01       	movw	r30, r24
    1a2a:	e2 5a       	subi	r30, 0xA2	; 162
    1a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a2e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1a30:	fc 01       	movw	r30, r24
    1a32:	e3 58       	subi	r30, 0x83	; 131
    1a34:	fe 4f       	sbci	r31, 0xFE	; 254
    1a36:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1a38:	88 23       	and	r24, r24
    1a3a:	61 f1       	breq	.+88     	; 0x1a94 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	fc 01       	movw	r30, r24
    1a44:	e6 55       	subi	r30, 0x56	; 86
    1a46:	fe 4f       	sbci	r31, 0xFE	; 254
    1a48:	c5 91       	lpm	r28, Z+
    1a4a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	e4 56       	subi	r30, 0x64	; 100
    1a50:	fe 4f       	sbci	r31, 0xFE	; 254
    1a52:	a5 91       	lpm	r26, Z+
    1a54:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1a56:	61 11       	cpse	r22, r1
    1a58:	09 c0       	rjmp	.+18     	; 0x1a6c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1a5a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1a5c:	f8 94       	cli
		*reg &= ~bit;
    1a5e:	88 81       	ld	r24, Y
    1a60:	20 95       	com	r18
    1a62:	82 23       	and	r24, r18
    1a64:	88 83       	st	Y, r24
		*out &= ~bit;
    1a66:	ec 91       	ld	r30, X
    1a68:	2e 23       	and	r18, r30
    1a6a:	0b c0       	rjmp	.+22     	; 0x1a82 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1a6c:	62 30       	cpi	r22, 0x02	; 2
    1a6e:	61 f4       	brne	.+24     	; 0x1a88 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1a70:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1a72:	f8 94       	cli
		*reg &= ~bit;
    1a74:	88 81       	ld	r24, Y
    1a76:	32 2f       	mov	r19, r18
    1a78:	30 95       	com	r19
    1a7a:	83 23       	and	r24, r19
    1a7c:	88 83       	st	Y, r24
		*out |= bit;
    1a7e:	ec 91       	ld	r30, X
    1a80:	2e 2b       	or	r18, r30
    1a82:	2c 93       	st	X, r18
		SREG = oldSREG;
    1a84:	9f bf       	out	0x3f, r25	; 63
    1a86:	06 c0       	rjmp	.+12     	; 0x1a94 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1a88:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1a8a:	f8 94       	cli
		*reg |= bit;
    1a8c:	e8 81       	ld	r30, Y
    1a8e:	2e 2b       	or	r18, r30
    1a90:	28 83       	st	Y, r18
		SREG = oldSREG;
    1a92:	8f bf       	out	0x3f, r24	; 63
	}
}
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	08 95       	ret

00001a9a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1a9a:	1f 93       	push	r17
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	f9 01       	movw	r30, r18
    1aa6:	e1 5c       	subi	r30, 0xC1	; 193
    1aa8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aaa:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1aac:	f9 01       	movw	r30, r18
    1aae:	e2 5a       	subi	r30, 0xA2	; 162
    1ab0:	fe 4f       	sbci	r31, 0xFE	; 254
    1ab2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1ab4:	f9 01       	movw	r30, r18
    1ab6:	e3 58       	subi	r30, 0x83	; 131
    1ab8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aba:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1abc:	cc 23       	and	r28, r28
    1abe:	c1 f0       	breq	.+48     	; 0x1af0 <digitalWrite+0x56>
    1ac0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1ac2:	81 11       	cpse	r24, r1
    1ac4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <turnOffPWM>

	out = portOutputRegister(port);
    1ac8:	ec 2f       	mov	r30, r28
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	ee 0f       	add	r30, r30
    1ace:	ff 1f       	adc	r31, r31
    1ad0:	e4 56       	subi	r30, 0x64	; 100
    1ad2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ad4:	a5 91       	lpm	r26, Z+
    1ad6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1ad8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1ada:	f8 94       	cli

	if (val == LOW) {
    1adc:	11 11       	cpse	r17, r1
    1ade:	04 c0       	rjmp	.+8      	; 0x1ae8 <digitalWrite+0x4e>
		*out &= ~bit;
    1ae0:	8c 91       	ld	r24, X
    1ae2:	d0 95       	com	r29
    1ae4:	d8 23       	and	r29, r24
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <digitalWrite+0x52>
	} else {
		*out |= bit;
    1ae8:	ec 91       	ld	r30, X
    1aea:	de 2b       	or	r29, r30
    1aec:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1aee:	9f bf       	out	0x3f, r25	; 63
}
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	1f 91       	pop	r17
    1af6:	08 95       	ret

00001af8 <_ZN6StringD1Ev>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    1af8:	fc 01       	movw	r30, r24
    1afa:	80 81       	ld	r24, Z
    1afc:	91 81       	ldd	r25, Z+1	; 0x01
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	11 f0       	breq	.+4      	; 0x1b06 <_ZN6StringD1Ev+0xe>
    1b02:	0c 94 3a 1a 	jmp	0x3474	; 0x3474 <free>
    1b06:	08 95       	ret

00001b08 <_ZN6String10invalidateEv>:
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	ec 01       	movw	r28, r24
    1b0e:	88 81       	ld	r24, Y
    1b10:	99 81       	ldd	r25, Y+1	; 0x01
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	11 f0       	breq	.+4      	; 0x1b1a <_ZN6String10invalidateEv+0x12>
    1b16:	0e 94 3a 1a 	call	0x3474	; 0x3474 <free>
    1b1a:	19 82       	std	Y+1, r1	; 0x01
    1b1c:	18 82       	st	Y, r1
    1b1e:	1d 82       	std	Y+5, r1	; 0x05
    1b20:	1c 82       	std	Y+4, r1	; 0x04
    1b22:	1b 82       	std	Y+3, r1	; 0x03
    1b24:	1a 82       	std	Y+2, r1	; 0x02
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	08 95       	ret

00001b2c <_ZN6String12changeBufferEj>:
    1b2c:	0f 93       	push	r16
    1b2e:	1f 93       	push	r17
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	ec 01       	movw	r28, r24
    1b36:	8b 01       	movw	r16, r22
    1b38:	6f 5f       	subi	r22, 0xFF	; 255
    1b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3c:	88 81       	ld	r24, Y
    1b3e:	99 81       	ldd	r25, Y+1	; 0x01
    1b40:	0e 94 65 1b 	call	0x36ca	; 0x36ca <realloc>
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	31 f0       	breq	.+12     	; 0x1b54 <_ZN6String12changeBufferEj+0x28>
    1b48:	99 83       	std	Y+1, r25	; 0x01
    1b4a:	88 83       	st	Y, r24
    1b4c:	1b 83       	std	Y+3, r17	; 0x03
    1b4e:	0a 83       	std	Y+2, r16	; 0x02
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	01 c0       	rjmp	.+2      	; 0x1b56 <_ZN6String12changeBufferEj+0x2a>
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	1f 91       	pop	r17
    1b5c:	0f 91       	pop	r16
    1b5e:	08 95       	ret

00001b60 <_ZN6String7reserveEj>:
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	ec 01       	movw	r28, r24
    1b66:	88 81       	ld	r24, Y
    1b68:	99 81       	ldd	r25, Y+1	; 0x01
    1b6a:	89 2b       	or	r24, r25
    1b6c:	29 f0       	breq	.+10     	; 0x1b78 <_ZN6String7reserveEj+0x18>
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	9b 81       	ldd	r25, Y+3	; 0x03
    1b72:	86 17       	cp	r24, r22
    1b74:	97 07       	cpc	r25, r23
    1b76:	60 f4       	brcc	.+24     	; 0x1b90 <_ZN6String7reserveEj+0x30>
    1b78:	ce 01       	movw	r24, r28
    1b7a:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <_ZN6String12changeBufferEj>
    1b7e:	88 23       	and	r24, r24
    1b80:	41 f0       	breq	.+16     	; 0x1b92 <_ZN6String7reserveEj+0x32>
    1b82:	8c 81       	ldd	r24, Y+4	; 0x04
    1b84:	9d 81       	ldd	r25, Y+5	; 0x05
    1b86:	89 2b       	or	r24, r25
    1b88:	19 f4       	brne	.+6      	; 0x1b90 <_ZN6String7reserveEj+0x30>
    1b8a:	e8 81       	ld	r30, Y
    1b8c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b8e:	10 82       	st	Z, r1
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	08 95       	ret

00001b98 <_ZN6String4copyEPKcj>:
    1b98:	ef 92       	push	r14
    1b9a:	ff 92       	push	r15
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
    1ba4:	ec 01       	movw	r28, r24
    1ba6:	7b 01       	movw	r14, r22
    1ba8:	8a 01       	movw	r16, r20
    1baa:	ba 01       	movw	r22, r20
    1bac:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN6String7reserveEj>
    1bb0:	81 11       	cpse	r24, r1
    1bb2:	04 c0       	rjmp	.+8      	; 0x1bbc <_ZN6String4copyEPKcj+0x24>
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <_ZN6String10invalidateEv>
    1bba:	07 c0       	rjmp	.+14     	; 0x1bca <_ZN6String4copyEPKcj+0x32>
    1bbc:	1d 83       	std	Y+5, r17	; 0x05
    1bbe:	0c 83       	std	Y+4, r16	; 0x04
    1bc0:	b7 01       	movw	r22, r14
    1bc2:	88 81       	ld	r24, Y
    1bc4:	99 81       	ldd	r25, Y+1	; 0x01
    1bc6:	0e 94 42 1c 	call	0x3884	; 0x3884 <strcpy>
    1bca:	ce 01       	movw	r24, r28
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	1f 91       	pop	r17
    1bd2:	0f 91       	pop	r16
    1bd4:	ff 90       	pop	r15
    1bd6:	ef 90       	pop	r14
    1bd8:	08 95       	ret

00001bda <_ZN6StringC1EPKc>:
    1bda:	fc 01       	movw	r30, r24
    1bdc:	11 82       	std	Z+1, r1	; 0x01
    1bde:	10 82       	st	Z, r1
    1be0:	13 82       	std	Z+3, r1	; 0x03
    1be2:	12 82       	std	Z+2, r1	; 0x02
    1be4:	15 82       	std	Z+5, r1	; 0x05
    1be6:	14 82       	std	Z+4, r1	; 0x04
    1be8:	61 15       	cp	r22, r1
    1bea:	71 05       	cpc	r23, r1
    1bec:	51 f0       	breq	.+20     	; 0x1c02 <_ZN6StringC1EPKc+0x28>
    1bee:	fb 01       	movw	r30, r22
    1bf0:	01 90       	ld	r0, Z+
    1bf2:	00 20       	and	r0, r0
    1bf4:	e9 f7       	brne	.-6      	; 0x1bf0 <_ZN6StringC1EPKc+0x16>
    1bf6:	31 97       	sbiw	r30, 0x01	; 1
    1bf8:	af 01       	movw	r20, r30
    1bfa:	46 1b       	sub	r20, r22
    1bfc:	57 0b       	sbc	r21, r23
    1bfe:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <_ZN6String4copyEPKcj>
    1c02:	08 95       	ret

00001c04 <_ZN6String6concatEPKcj>:
    1c04:	ef 92       	push	r14
    1c06:	ff 92       	push	r15
    1c08:	0f 93       	push	r16
    1c0a:	1f 93       	push	r17
    1c0c:	cf 93       	push	r28
    1c0e:	df 93       	push	r29
    1c10:	61 15       	cp	r22, r1
    1c12:	71 05       	cpc	r23, r1
    1c14:	11 f4       	brne	.+4      	; 0x1c1a <_ZN6String6concatEPKcj+0x16>
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	1c c0       	rjmp	.+56     	; 0x1c52 <_ZN6String6concatEPKcj+0x4e>
    1c1a:	41 15       	cp	r20, r1
    1c1c:	51 05       	cpc	r21, r1
    1c1e:	c1 f0       	breq	.+48     	; 0x1c50 <_ZN6String6concatEPKcj+0x4c>
    1c20:	7b 01       	movw	r14, r22
    1c22:	ec 01       	movw	r28, r24
    1c24:	8c 81       	ldd	r24, Y+4	; 0x04
    1c26:	9d 81       	ldd	r25, Y+5	; 0x05
    1c28:	8a 01       	movw	r16, r20
    1c2a:	08 0f       	add	r16, r24
    1c2c:	19 1f       	adc	r17, r25
    1c2e:	b8 01       	movw	r22, r16
    1c30:	ce 01       	movw	r24, r28
    1c32:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_ZN6String7reserveEj>
    1c36:	88 23       	and	r24, r24
    1c38:	71 f3       	breq	.-36     	; 0x1c16 <_ZN6String6concatEPKcj+0x12>
    1c3a:	28 81       	ld	r18, Y
    1c3c:	39 81       	ldd	r19, Y+1	; 0x01
    1c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c40:	9d 81       	ldd	r25, Y+5	; 0x05
    1c42:	b7 01       	movw	r22, r14
    1c44:	82 0f       	add	r24, r18
    1c46:	93 1f       	adc	r25, r19
    1c48:	0e 94 42 1c 	call	0x3884	; 0x3884 <strcpy>
    1c4c:	1d 83       	std	Y+5, r17	; 0x05
    1c4e:	0c 83       	std	Y+4, r16	; 0x04
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	ff 90       	pop	r15
    1c5c:	ef 90       	pop	r14
    1c5e:	08 95       	ret

00001c60 <_ZN6String6concatEc>:
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <_ZN6String6concatEc+0x6>
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	69 83       	std	Y+1, r22	; 0x01
    1c6c:	1a 82       	std	Y+2, r1	; 0x02
    1c6e:	41 e0       	ldi	r20, 0x01	; 1
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	be 01       	movw	r22, r28
    1c74:	6f 5f       	subi	r22, 0xFF	; 255
    1c76:	7f 4f       	sbci	r23, 0xFF	; 255
    1c78:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <_ZN6String6concatEPKcj>
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	08 95       	ret

00001c86 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
	if (!bufsize || !buf) return;
    1c8e:	41 15       	cp	r20, r1
    1c90:	51 05       	cpc	r21, r1
    1c92:	19 f1       	breq	.+70     	; 0x1cda <_ZNK6String8getBytesEPhjj+0x54>
    1c94:	61 15       	cp	r22, r1
    1c96:	71 05       	cpc	r23, r1
    1c98:	01 f1       	breq	.+64     	; 0x1cda <_ZNK6String8getBytesEPhjj+0x54>
	if (index >= len) {
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	14 96       	adiw	r26, 0x04	; 4
    1c9e:	ed 91       	ld	r30, X+
    1ca0:	fc 91       	ld	r31, X
    1ca2:	15 97       	sbiw	r26, 0x05	; 5
    1ca4:	2e 17       	cp	r18, r30
    1ca6:	3f 07       	cpc	r19, r31
    1ca8:	18 f0       	brcs	.+6      	; 0x1cb0 <_ZNK6String8getBytesEPhjj+0x2a>
		buf[0] = 0;
    1caa:	fb 01       	movw	r30, r22
    1cac:	10 82       	st	Z, r1
		return;
    1cae:	15 c0       	rjmp	.+42     	; 0x1cda <_ZNK6String8getBytesEPhjj+0x54>
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    1cb0:	e2 1b       	sub	r30, r18
    1cb2:	f3 0b       	sbc	r31, r19
    1cb4:	ea 01       	movw	r28, r20
    1cb6:	21 97       	sbiw	r28, 0x01	; 1
    1cb8:	ec 17       	cp	r30, r28
    1cba:	fd 07       	cpc	r31, r29
    1cbc:	08 f4       	brcc	.+2      	; 0x1cc0 <_ZNK6String8getBytesEPhjj+0x3a>
    1cbe:	ef 01       	movw	r28, r30
    1cc0:	8b 01       	movw	r16, r22
    1cc2:	fc 01       	movw	r30, r24
	strncpy((char *)buf, buffer + index, n);
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	62 0f       	add	r22, r18
    1cca:	73 1f       	adc	r23, r19
    1ccc:	ae 01       	movw	r20, r28
    1cce:	c8 01       	movw	r24, r16
    1cd0:	0e 94 49 1c 	call	0x3892	; 0x3892 <strncpy>
	buf[n] = 0;
    1cd4:	c0 0f       	add	r28, r16
    1cd6:	d1 1f       	adc	r29, r17
    1cd8:	18 82       	st	Y, r1
}
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	1f 91       	pop	r17
    1ce0:	0f 91       	pop	r16
    1ce2:	08 95       	ret

00001ce4 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	08 95       	ret

00001ce8 <_ZN15RHGenericDriver14setPromiscuousEb>:
    return false;
}

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
    1ce8:	fc 01       	movw	r30, r24
    1cea:	64 83       	std	Z+4, r22	; 0x04
    1cec:	08 95       	ret

00001cee <_ZN15RHGenericDriver14setThisAddressEh>:
}

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
    1cee:	fc 01       	movw	r30, r24
    1cf0:	63 83       	std	Z+3, r22	; 0x03
    1cf2:	08 95       	ret

00001cf4 <_ZN15RHGenericDriver11setHeaderToEh>:
}

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
    1cf4:	fc 01       	movw	r30, r24
    1cf6:	61 87       	std	Z+9, r22	; 0x09
    1cf8:	08 95       	ret

00001cfa <_ZN15RHGenericDriver13setHeaderFromEh>:
}

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	62 87       	std	Z+10, r22	; 0x0a
    1cfe:	08 95       	ret

00001d00 <_ZN15RHGenericDriver11setHeaderIdEh>:
}

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
    1d00:	fc 01       	movw	r30, r24
    1d02:	63 87       	std	Z+11, r22	; 0x0b
    1d04:	08 95       	ret

00001d06 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:
}

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    1d06:	fc 01       	movw	r30, r24
    _txHeaderFlags &= ~clear;
    _txHeaderFlags |= set;
    1d08:	40 95       	com	r20
    1d0a:	94 85       	ldd	r25, Z+12	; 0x0c
    1d0c:	49 23       	and	r20, r25
    1d0e:	64 2b       	or	r22, r20
    1d10:	64 87       	std	Z+12, r22	; 0x0c
    1d12:	08 95       	ret

00001d14 <_ZN15RHGenericDriver8headerToEv>:
}

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
    1d14:	fc 01       	movw	r30, r24
    1d16:	85 81       	ldd	r24, Z+5	; 0x05
}
    1d18:	08 95       	ret

00001d1a <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	86 81       	ldd	r24, Z+6	; 0x06
}
    1d1e:	08 95       	ret

00001d20 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
    1d20:	fc 01       	movw	r30, r24
    1d22:	87 81       	ldd	r24, Z+7	; 0x07
}
    1d24:	08 95       	ret

00001d26 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
    1d26:	fc 01       	movw	r30, r24
    1d28:	80 85       	ldd	r24, Z+8	; 0x08
}
    1d2a:	08 95       	ret

00001d2c <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	85 85       	ldd	r24, Z+13	; 0x0d
    1d30:	96 85       	ldd	r25, Z+14	; 0x0e
}
    1d32:	08 95       	ret

00001d34 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
    1d34:	fc 01       	movw	r30, r24
    1d36:	82 81       	ldd	r24, Z+2	; 0x02
}
    1d38:	08 95       	ret

00001d3a <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	62 83       	std	Z+2, r22	; 0x02
    1d3e:	08 95       	ret

00001d40 <_ZN15RHGenericDriver15isChannelActiveEv>:
}

bool  RHGenericDriver::sleep()
{
    return false;
}
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	08 95       	ret

00001d44 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
    1d44:	fc 01       	movw	r30, r24
    1d46:	87 85       	ldd	r24, Z+15	; 0x0f
    1d48:	90 89       	ldd	r25, Z+16	; 0x10
}
    1d4a:	08 95       	ret

00001d4c <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	81 89       	ldd	r24, Z+17	; 0x11
    1d50:	92 89       	ldd	r25, Z+18	; 0x12
}
    1d52:	08 95       	ret

00001d54 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
    1d54:	fc 01       	movw	r30, r24
    1d56:	83 89       	ldd	r24, Z+19	; 0x13
    1d58:	94 89       	ldd	r25, Z+20	; 0x14
}
    1d5a:	08 95       	ret

00001d5c <_ZN15RHGenericDriver13waitAvailableEv>:
    return true;
}

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	ec 01       	movw	r28, r24
    while (!available())
    1d62:	e8 81       	ld	r30, Y
    1d64:	f9 81       	ldd	r31, Y+1	; 0x01
    1d66:	02 80       	ldd	r0, Z+2	; 0x02
    1d68:	f3 81       	ldd	r31, Z+3	; 0x03
    1d6a:	e0 2d       	mov	r30, r0
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	09 95       	icall
    1d70:	81 11       	cpse	r24, r1
    1d72:	03 c0       	rjmp	.+6      	; 0x1d7a <_ZN15RHGenericDriver13waitAvailableEv+0x1e>
	YIELD;
    1d74:	0e 94 cb 14 	call	0x2996	; 0x2996 <yield>
}

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
    while (!available())
    1d78:	f4 cf       	rjmp	.-24     	; 0x1d62 <_ZN15RHGenericDriver13waitAvailableEv+0x6>
	YIELD;
}
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	08 95       	ret

00001d80 <_ZN15RHGenericDriver14waitPacketSentEv>:
    }
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	ec 01       	movw	r28, r24
    while (_mode == RHModeTx)
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	83 30       	cpi	r24, 0x03	; 3
    1d8a:	19 f4       	brne	.+6      	; 0x1d92 <_ZN15RHGenericDriver14waitPacketSentEv+0x12>
	YIELD; // Wait for any previous transmit to finish
    1d8c:	0e 94 cb 14 	call	0x2996	; 0x2996 <yield>
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
    1d90:	fa cf       	rjmp	.-12     	; 0x1d86 <_ZN15RHGenericDriver14waitPacketSentEv+0x6>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	08 95       	ret

00001d9a <_ZN15RHGenericDriver20waitAvailableTimeoutEj>:

// Blocks until a valid message is received or timeout expires
// Return true if there is a message available
// Works correctly even on millis() rollover
bool RHGenericDriver::waitAvailableTimeout(uint16_t timeout)
{
    1d9a:	8f 92       	push	r8
    1d9c:	9f 92       	push	r9
    1d9e:	af 92       	push	r10
    1da0:	bf 92       	push	r11
    1da2:	cf 92       	push	r12
    1da4:	df 92       	push	r13
    1da6:	ef 92       	push	r14
    1da8:	ff 92       	push	r15
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	ec 01       	movw	r28, r24
    1db0:	6b 01       	movw	r12, r22
    unsigned long starttime = millis();
    1db2:	0e 94 11 0c 	call	0x1822	; 0x1822 <millis>
    1db6:	4b 01       	movw	r8, r22
    1db8:	5c 01       	movw	r10, r24
    while ((millis() - starttime) < timeout)
    1dba:	e1 2c       	mov	r14, r1
    1dbc:	f1 2c       	mov	r15, r1
    1dbe:	0e 94 11 0c 	call	0x1822	; 0x1822 <millis>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	88 19       	sub	r24, r8
    1dc8:	99 09       	sbc	r25, r9
    1dca:	aa 09       	sbc	r26, r10
    1dcc:	bb 09       	sbc	r27, r11
    1dce:	8c 15       	cp	r24, r12
    1dd0:	9d 05       	cpc	r25, r13
    1dd2:	ae 05       	cpc	r26, r14
    1dd4:	bf 05       	cpc	r27, r15
    1dd6:	60 f4       	brcc	.+24     	; 0x1df0 <_ZN15RHGenericDriver20waitAvailableTimeoutEj+0x56>
    {
        if (available())
    1dd8:	e8 81       	ld	r30, Y
    1dda:	f9 81       	ldd	r31, Y+1	; 0x01
    1ddc:	02 80       	ldd	r0, Z+2	; 0x02
    1dde:	f3 81       	ldd	r31, Z+3	; 0x03
    1de0:	e0 2d       	mov	r30, r0
    1de2:	ce 01       	movw	r24, r28
    1de4:	09 95       	icall
    1de6:	81 11       	cpse	r24, r1
    1de8:	04 c0       	rjmp	.+8      	; 0x1df2 <_ZN15RHGenericDriver20waitAvailableTimeoutEj+0x58>
	{
           return true;
	}
	YIELD;
    1dea:	0e 94 cb 14 	call	0x2996	; 0x2996 <yield>
// Return true if there is a message available
// Works correctly even on millis() rollover
bool RHGenericDriver::waitAvailableTimeout(uint16_t timeout)
{
    unsigned long starttime = millis();
    while ((millis() - starttime) < timeout)
    1dee:	e7 cf       	rjmp	.-50     	; 0x1dbe <_ZN15RHGenericDriver20waitAvailableTimeoutEj+0x24>
	{
           return true;
	}
	YIELD;
    }
    return false;
    1df0:	80 e0       	ldi	r24, 0x00	; 0
}
    1df2:	df 91       	pop	r29
    1df4:	cf 91       	pop	r28
    1df6:	ff 90       	pop	r15
    1df8:	ef 90       	pop	r14
    1dfa:	df 90       	pop	r13
    1dfc:	cf 90       	pop	r12
    1dfe:	bf 90       	pop	r11
    1e00:	af 90       	pop	r10
    1e02:	9f 90       	pop	r9
    1e04:	8f 90       	pop	r8
    1e06:	08 95       	ret

00001e08 <_ZN15RHGenericDriver14waitPacketSentEj>:
	YIELD; // Wait for any previous transmit to finish
    return true;
}

bool RHGenericDriver::waitPacketSent(uint16_t timeout)
{
    1e08:	8f 92       	push	r8
    1e0a:	9f 92       	push	r9
    1e0c:	af 92       	push	r10
    1e0e:	bf 92       	push	r11
    1e10:	cf 92       	push	r12
    1e12:	df 92       	push	r13
    1e14:	ef 92       	push	r14
    1e16:	ff 92       	push	r15
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	ec 01       	movw	r28, r24
    1e1e:	6b 01       	movw	r12, r22
    unsigned long starttime = millis();
    1e20:	0e 94 11 0c 	call	0x1822	; 0x1822 <millis>
    1e24:	4b 01       	movw	r8, r22
    1e26:	5c 01       	movw	r10, r24
    while ((millis() - starttime) < timeout)
    1e28:	e1 2c       	mov	r14, r1
    1e2a:	f1 2c       	mov	r15, r1
    1e2c:	0e 94 11 0c 	call	0x1822	; 0x1822 <millis>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	88 19       	sub	r24, r8
    1e36:	99 09       	sbc	r25, r9
    1e38:	aa 09       	sbc	r26, r10
    1e3a:	bb 09       	sbc	r27, r11
    1e3c:	8c 15       	cp	r24, r12
    1e3e:	9d 05       	cpc	r25, r13
    1e40:	ae 05       	cpc	r26, r14
    1e42:	bf 05       	cpc	r27, r15
    1e44:	30 f4       	brcc	.+12     	; 0x1e52 <_ZN15RHGenericDriver14waitPacketSentEj+0x4a>
    {
        if (_mode != RHModeTx) // Any previous transmit finished?
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	83 30       	cpi	r24, 0x03	; 3
    1e4a:	29 f4       	brne	.+10     	; 0x1e56 <_ZN15RHGenericDriver14waitPacketSentEj+0x4e>
           return true;
	YIELD;
    1e4c:	0e 94 cb 14 	call	0x2996	; 0x2996 <yield>
}

bool RHGenericDriver::waitPacketSent(uint16_t timeout)
{
    unsigned long starttime = millis();
    while ((millis() - starttime) < timeout)
    1e50:	ed cf       	rjmp	.-38     	; 0x1e2c <_ZN15RHGenericDriver14waitPacketSentEj+0x24>
    {
        if (_mode != RHModeTx) // Any previous transmit finished?
           return true;
	YIELD;
    }
    return false;
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	01 c0       	rjmp	.+2      	; 0x1e58 <_ZN15RHGenericDriver14waitPacketSentEj+0x50>
{
    unsigned long starttime = millis();
    while ((millis() - starttime) < timeout)
    {
        if (_mode != RHModeTx) // Any previous transmit finished?
           return true;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
	YIELD;
    }
    return false;
}
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	ff 90       	pop	r15
    1e5e:	ef 90       	pop	r14
    1e60:	df 90       	pop	r13
    1e62:	cf 90       	pop	r12
    1e64:	bf 90       	pop	r11
    1e66:	af 90       	pop	r10
    1e68:	9f 90       	pop	r9
    1e6a:	8f 90       	pop	r8
    1e6c:	08 95       	ret

00001e6e <_ZN15RHGenericDriver7waitCADEv>:

// Wait until no channel activity detected or timeout
bool RHGenericDriver::waitCAD()
{
    1e6e:	cf 92       	push	r12
    1e70:	df 92       	push	r13
    1e72:	ef 92       	push	r14
    1e74:	ff 92       	push	r15
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    if (!_cad_timeout)
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	26 89       	ldd	r18, Z+22	; 0x16
    1e7e:	37 89       	ldd	r19, Z+23	; 0x17
    1e80:	23 2b       	or	r18, r19
    1e82:	91 f1       	breq	.+100    	; 0x1ee8 <_ZN15RHGenericDriver7waitCADEv+0x7a>
    1e84:	ec 01       	movw	r28, r24
    // Wait for any channel activity to finish or timeout
    // Sophisticated DCF function...
    // DCF : BackoffTime = random() x aSlotTime
    // 100 - 1000 ms
    // 10 sec timeout
    unsigned long t = millis();
    1e86:	0e 94 11 0c 	call	0x1822	; 0x1822 <millis>
    1e8a:	6b 01       	movw	r12, r22
    1e8c:	7c 01       	movw	r14, r24
    while (isChannelActive())
    1e8e:	e8 81       	ld	r30, Y
    1e90:	f9 81       	ldd	r31, Y+1	; 0x01
    1e92:	04 88       	ldd	r0, Z+20	; 0x14
    1e94:	f5 89       	ldd	r31, Z+21	; 0x15
    1e96:	e0 2d       	mov	r30, r0
    1e98:	ce 01       	movw	r24, r28
    1e9a:	09 95       	icall
    1e9c:	88 23       	and	r24, r24
    1e9e:	21 f1       	breq	.+72     	; 0x1ee8 <_ZN15RHGenericDriver7waitCADEv+0x7a>
    {
         if (millis() - t > _cad_timeout) 
    1ea0:	0e 94 11 0c 	call	0x1822	; 0x1822 <millis>
    1ea4:	ab 01       	movw	r20, r22
    1ea6:	bc 01       	movw	r22, r24
    1ea8:	4c 19       	sub	r20, r12
    1eaa:	5d 09       	sbc	r21, r13
    1eac:	6e 09       	sbc	r22, r14
    1eae:	7f 09       	sbc	r23, r15
    1eb0:	8e 89       	ldd	r24, Y+22	; 0x16
    1eb2:	9f 89       	ldd	r25, Y+23	; 0x17
    1eb4:	a0 e0       	ldi	r26, 0x00	; 0
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	84 17       	cp	r24, r20
    1eba:	95 07       	cpc	r25, r21
    1ebc:	a6 07       	cpc	r26, r22
    1ebe:	b7 07       	cpc	r27, r23
    1ec0:	a8 f0       	brcs	.+42     	; 0x1eec <_ZN15RHGenericDriver7waitCADEv+0x7e>
	     return false;
#if (RH_PLATFORM == RH_PLATFORM_STM32) // stdlib on STMF103 gets confused if random is redefined
	 delay(_random(1, 10) * 100);
#else
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
    1ec2:	2a e0       	ldi	r18, 0x0A	; 10
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	50 e0       	ldi	r21, 0x00	; 0
    1eca:	61 e0       	ldi	r22, 0x01	; 1
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	0e 94 93 16 	call	0x2d26	; 0x2d26 <_Z6randomll>
    1ed6:	9b 01       	movw	r18, r22
    1ed8:	ac 01       	movw	r20, r24
    1eda:	a4 e6       	ldi	r26, 0x64	; 100
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	0e 94 88 19 	call	0x3310	; 0x3310 <__muluhisi3>
    1ee2:	0e 94 42 0c 	call	0x1884	; 0x1884 <delay>
    1ee6:	d3 cf       	rjmp	.-90     	; 0x1e8e <_ZN15RHGenericDriver7waitCADEv+0x20>

// Wait until no channel activity detected or timeout
bool RHGenericDriver::waitCAD()
{
    if (!_cad_timeout)
	return true;
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	01 c0       	rjmp	.+2      	; 0x1eee <_ZN15RHGenericDriver7waitCADEv+0x80>
    // 10 sec timeout
    unsigned long t = millis();
    while (isChannelActive())
    {
         if (millis() - t > _cad_timeout) 
	     return false;
    1eec:	80 e0       	ldi	r24, 0x00	; 0
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
#endif
    }

    return true;
}
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	ff 90       	pop	r15
    1ef4:	ef 90       	pop	r14
    1ef6:	df 90       	pop	r13
    1ef8:	cf 90       	pop	r12
    1efa:	08 95       	ret

00001efc <_ZN15RHGenericDriverC1Ev>:
// Copyright (C) 2014 Mike McCauley
// $Id: RHGenericDriver.cpp,v 1.23 2018/02/11 23:57:18 mikem Exp $

#include <RHGenericDriver.h>

RHGenericDriver::RHGenericDriver()
    1efc:	fc 01       	movw	r30, r24
    _txHeaderId(0),
    _txHeaderFlags(0),
    _rxBad(0),
    _rxGood(0),
    _txGood(0),
    _cad_timeout(0)
    1efe:	82 e0       	ldi	r24, 0x02	; 2
    1f00:	92 e0       	ldi	r25, 0x02	; 2
    1f02:	91 83       	std	Z+1, r25	; 0x01
    1f04:	80 83       	st	Z, r24
    1f06:	12 82       	std	Z+2, r1	; 0x02
    1f08:	8f ef       	ldi	r24, 0xFF	; 255
    1f0a:	83 83       	std	Z+3, r24	; 0x03
    1f0c:	81 87       	std	Z+9, r24	; 0x09
    1f0e:	82 87       	std	Z+10, r24	; 0x0a
    1f10:	13 86       	std	Z+11, r1	; 0x0b
    1f12:	14 86       	std	Z+12, r1	; 0x0c
    1f14:	10 8a       	std	Z+16, r1	; 0x10
    1f16:	17 86       	std	Z+15, r1	; 0x0f
    1f18:	12 8a       	std	Z+18, r1	; 0x12
    1f1a:	11 8a       	std	Z+17, r1	; 0x11
    1f1c:	14 8a       	std	Z+20, r1	; 0x14
    1f1e:	13 8a       	std	Z+19, r1	; 0x13
    1f20:	17 8a       	std	Z+23, r1	; 0x17
    1f22:	16 8a       	std	Z+22, r1	; 0x16
    1f24:	08 95       	ret

00001f26 <_ZN13RHHardwareSPI8transferEh>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
    1f26:	6e bd       	out	0x2e, r22	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
    1f28:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
    1f2a:	0d b4       	in	r0, 0x2d	; 45
    1f2c:	07 fe       	sbrs	r0, 7
    1f2e:	fd cf       	rjmp	.-6      	; 0x1f2a <_ZN13RHHardwareSPI8transferEh+0x4>
    return SPDR;
    1f30:	8e b5       	in	r24, 0x2e	; 46
}

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
    return SPI.transfer(data);
}
    1f32:	08 95       	ret

00001f34 <_ZN13RHHardwareSPI15attachInterruptEv>:
    SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((clockDiv >> 2) & SPI_2XCLOCK_MASK);
  }
  // These undocumented functions should not be used.  SPI.transfer()
  // polls the hardware flag which is automatically cleared as the
  // AVR responds to SPI's interrupt
  inline static void attachInterrupt() { SPCR |= _BV(SPIE); }
    1f34:	8c b5       	in	r24, 0x2c	; 44
    1f36:	80 68       	ori	r24, 0x80	; 128
    1f38:	8c bd       	out	0x2c, r24	; 44
    1f3a:	08 95       	ret

00001f3c <_ZN13RHHardwareSPI15detachInterruptEv>:
  inline static void detachInterrupt() { SPCR &= ~_BV(SPIE); }
    1f3c:	8c b5       	in	r24, 0x2c	; 44
    1f3e:	8f 77       	andi	r24, 0x7F	; 127
    1f40:	8c bd       	out	0x2c, r24	; 44
    1f42:	08 95       	ret

00001f44 <_ZN13RHHardwareSPI16beginTransactionEv>:
{
    return SPI.end();
}

void RHHardwareSPI::beginTransaction()
{
    1f44:	fc 01       	movw	r30, r24
    1f46:	45 81       	ldd	r20, Z+5	; 0x05
    1f48:	36 81       	ldd	r19, Z+6	; 0x06

  // Before using SPI.transfer() or asserting chip select pins,
  // this function is used to gain exclusive access to the SPI bus
  // and configure the correct settings.
  inline static void beginTransaction(SPISettings settings) {
    if (interruptMode > 0) {
    1f4a:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <_ZN8SPIClass13interruptModeE>
    1f4e:	88 23       	and	r24, r24
    1f50:	99 f0       	breq	.+38     	; 0x1f78 <_ZN13RHHardwareSPI16beginTransactionEv+0x34>
      uint8_t sreg = SREG;
    1f52:	2f b7       	in	r18, 0x3f	; 63
      noInterrupts();
    1f54:	f8 94       	cli

      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    1f56:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <_ZN8SPIClass13interruptModeE>
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	59 f4       	brne	.+22     	; 0x1f74 <_ZN13RHHardwareSPI16beginTransactionEv+0x30>
        interruptSave = SPI_AVR_EIMSK;
    1f5e:	8d b3       	in	r24, 0x1d	; 29
    1f60:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <_ZN8SPIClass13interruptSaveE>
        SPI_AVR_EIMSK &= ~interruptMask;
    1f64:	9d b3       	in	r25, 0x1d	; 29
    1f66:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <_ZN8SPIClass13interruptMaskE>
    1f6a:	80 95       	com	r24
    1f6c:	89 23       	and	r24, r25
    1f6e:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    1f70:	2f bf       	out	0x3f, r18	; 63
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <_ZN13RHHardwareSPI16beginTransactionEv+0x34>
      } else
      #endif
      {
        interruptSave = sreg;
    1f74:	20 93 58 04 	sts	0x0458, r18	; 0x800458 <_ZN8SPIClass13interruptSaveE>
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 1;
    #endif

    SPCR = settings.spcr;
    1f78:	4c bd       	out	0x2c, r20	; 44
    SPSR = settings.spsr;
    1f7a:	3d bd       	out	0x2d, r19	; 45
    1f7c:	08 95       	ret

00001f7e <_ZN13RHHardwareSPI14usingInterruptEh>:
    SPI.endTransaction();
#endif
}

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
    1f7e:	08 95       	ret

00001f80 <_ZN13RHHardwareSPI5beginEv>:
    SPI.detachInterrupt();
#endif
}
    
void RHHardwareSPI::begin() 
{
    1f80:	0f 93       	push	r16
    1f82:	1f 93       	push	r17
    1f84:	fc 01       	movw	r30, r24
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
    1f86:	82 81       	ldd	r24, Z+2	; 0x02
    1f88:	84 30       	cpi	r24, 0x04	; 4
    1f8a:	59 f0       	breq	.+22     	; 0x1fa2 <_ZN13RHHardwareSPI5beginEv+0x22>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
    1f8c:	83 30       	cpi	r24, 0x03	; 3
    1f8e:	71 f0       	breq	.+28     	; 0x1fac <_ZN13RHHardwareSPI5beginEv+0x2c>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
    1f90:	82 30       	cpi	r24, 0x02	; 2
    1f92:	89 f0       	breq	.+34     	; 0x1fb6 <_ZN13RHHardwareSPI5beginEv+0x36>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
    1f94:	81 30       	cpi	r24, 0x01	; 1
    1f96:	a1 f0       	breq	.+40     	; 0x1fc0 <_ZN13RHHardwareSPI5beginEv+0x40>
       frequency = 2000000;
   else
       frequency = 1000000;
    1f98:	40 e4       	ldi	r20, 0x40	; 64
    1f9a:	52 e4       	ldi	r21, 0x42	; 66
    1f9c:	6f e0       	ldi	r22, 0x0F	; 15
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	13 c0       	rjmp	.+38     	; 0x1fc8 <_ZN13RHHardwareSPI5beginEv+0x48>
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
       frequency = 16000000;
    1fa2:	40 e0       	ldi	r20, 0x00	; 0
    1fa4:	54 e2       	ldi	r21, 0x24	; 36
    1fa6:	64 ef       	ldi	r22, 0xF4	; 244
    1fa8:	70 e0       	ldi	r23, 0x00	; 0
    1faa:	0e c0       	rjmp	.+28     	; 0x1fc8 <_ZN13RHHardwareSPI5beginEv+0x48>
   else if (_frequency == Frequency8MHz)
       frequency = 8000000;
    1fac:	40 e0       	ldi	r20, 0x00	; 0
    1fae:	52 e1       	ldi	r21, 0x12	; 18
    1fb0:	6a e7       	ldi	r22, 0x7A	; 122
    1fb2:	70 e0       	ldi	r23, 0x00	; 0
    1fb4:	09 c0       	rjmp	.+18     	; 0x1fc8 <_ZN13RHHardwareSPI5beginEv+0x48>
   else if (_frequency == Frequency4MHz)
       frequency = 4000000;
    1fb6:	40 e0       	ldi	r20, 0x00	; 0
    1fb8:	59 e0       	ldi	r21, 0x09	; 9
    1fba:	6d e3       	ldi	r22, 0x3D	; 61
    1fbc:	70 e0       	ldi	r23, 0x00	; 0
    1fbe:	04 c0       	rjmp	.+8      	; 0x1fc8 <_ZN13RHHardwareSPI5beginEv+0x48>
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
    1fc0:	40 e8       	ldi	r20, 0x80	; 128
    1fc2:	54 e8       	ldi	r21, 0x84	; 132
    1fc4:	6e e1       	ldi	r22, 0x1E	; 30
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;

    uint8_t dataMode;
    if (_dataMode == DataMode0)
    1fc8:	84 81       	ldd	r24, Z+4	; 0x04
    1fca:	88 23       	and	r24, r24
    1fcc:	61 f0       	breq	.+24     	; 0x1fe6 <_ZN13RHHardwareSPI5beginEv+0x66>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
    1fce:	81 30       	cpi	r24, 0x01	; 1
    1fd0:	31 f0       	breq	.+12     	; 0x1fde <_ZN13RHHardwareSPI5beginEv+0x5e>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
    1fd2:	82 30       	cpi	r24, 0x02	; 2
    1fd4:	31 f0       	breq	.+12     	; 0x1fe2 <_ZN13RHHardwareSPI5beginEv+0x62>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
    1fd6:	83 30       	cpi	r24, 0x03	; 3
    1fd8:	31 f4       	brne	.+12     	; 0x1fe6 <_ZN13RHHardwareSPI5beginEv+0x66>
	dataMode = SPI_MODE3;
    1fda:	9c e0       	ldi	r25, 0x0C	; 12
    1fdc:	05 c0       	rjmp	.+10     	; 0x1fe8 <_ZN13RHHardwareSPI5beginEv+0x68>

    uint8_t dataMode;
    if (_dataMode == DataMode0)
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
	dataMode = SPI_MODE1;
    1fde:	94 e0       	ldi	r25, 0x04	; 4
    1fe0:	03 c0       	rjmp	.+6      	; 0x1fe8 <_ZN13RHHardwareSPI5beginEv+0x68>
    else if (_dataMode == DataMode2)
	dataMode = SPI_MODE2;
    1fe2:	98 e0       	ldi	r25, 0x08	; 8
    1fe4:	01 c0       	rjmp	.+2      	; 0x1fe8 <_ZN13RHHardwareSPI5beginEv+0x68>
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	00 e0       	ldi	r16, 0x00	; 0
    1fea:	12 e1       	ldi	r17, 0x12	; 18
    1fec:	2a e7       	ldi	r18, 0x7A	; 122
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    1ff2:	40 17       	cp	r20, r16
    1ff4:	51 07       	cpc	r21, r17
    1ff6:	62 07       	cpc	r22, r18
    1ff8:	73 07       	cpc	r23, r19
    1ffa:	40 f4       	brcc	.+16     	; 0x200c <_ZN13RHHardwareSPI5beginEv+0x8c>
        clockSetting /= 2;
    1ffc:	36 95       	lsr	r19
    1ffe:	27 95       	ror	r18
    2000:	17 95       	ror	r17
    2002:	07 95       	ror	r16
        clockDiv++;
    2004:	8f 5f       	subi	r24, 0xFF	; 255
        clockDiv = 6;
      }
    } else {
      uint32_t clockSetting = F_CPU / 2;
      clockDiv = 0;
      while (clockDiv < 6 && clock < clockSetting) {
    2006:	86 30       	cpi	r24, 0x06	; 6
    2008:	a1 f7       	brne	.-24     	; 0x1ff2 <_ZN13RHHardwareSPI5beginEv+0x72>
      }
    }

    // Compensate for the duplicate fosc/64
    if (clockDiv == 6)
    clockDiv = 7;
    200a:	87 e0       	ldi	r24, 0x07	; 7

    // Invert the SPI2X bit
    clockDiv ^= 0x1;
    200c:	21 e0       	ldi	r18, 0x01	; 1
    200e:	28 27       	eor	r18, r24

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    2010:	83 81       	ldd	r24, Z+3	; 0x03
    2012:	81 30       	cpi	r24, 0x01	; 1
    2014:	11 f0       	breq	.+4      	; 0x201a <_ZN13RHHardwareSPI5beginEv+0x9a>
    2016:	80 e5       	ldi	r24, 0x50	; 80
    2018:	01 c0       	rjmp	.+2      	; 0x201c <_ZN13RHHardwareSPI5beginEv+0x9c>
    201a:	80 e7       	ldi	r24, 0x70	; 112

    // Save the settings for use in transactions
   _settings = SPISettings(frequency, bitOrder, dataMode);
    201c:	32 2f       	mov	r19, r18
    201e:	36 95       	lsr	r19
    2020:	93 2b       	or	r25, r19
    2022:	98 2b       	or	r25, r24
    2024:	95 83       	std	Z+5, r25	; 0x05
    2026:	21 70       	andi	r18, 0x01	; 1
    2028:	26 83       	std	Z+6, r18	; 0x06
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
    202a:	1f 91       	pop	r17
    202c:	0f 91       	pop	r16
    else
	dataMode = SPI_MODE0;

    // Save the settings for use in transactions
   _settings = SPISettings(frequency, bitOrder, dataMode);
   SPI.begin();
    202e:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <_ZN8SPIClass5beginEv>

00002032 <_ZN13RHHardwareSPI3endEv>:
#endif // SPI_HAS_TRANSACTION
}

void RHHardwareSPI::end() 
{
    return SPI.end();
    2032:	0c 94 b5 14 	jmp	0x296a	; 0x296a <_ZN8SPIClass3endEv>

00002036 <_ZN13RHHardwareSPI14endTransactionEv>:
      digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
    }
    inTransactionFlag = 0;
    #endif

    if (interruptMode > 0) {
    2036:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <_ZN8SPIClass13interruptModeE>
    203a:	88 23       	and	r24, r24
    203c:	61 f0       	breq	.+24     	; 0x2056 <_ZN13RHHardwareSPI14endTransactionEv+0x20>
      #ifdef SPI_AVR_EIMSK
      uint8_t sreg = SREG;
    203e:	9f b7       	in	r25, 0x3f	; 63
      #endif
      noInterrupts();
    2040:	f8 94       	cli
      #ifdef SPI_AVR_EIMSK
      if (interruptMode == 1) {
    2042:	20 91 5a 04 	lds	r18, 0x045A	; 0x80045a <_ZN8SPIClass13interruptModeE>
    2046:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <_ZN8SPIClass13interruptSaveE>
    204a:	21 30       	cpi	r18, 0x01	; 1
    204c:	19 f4       	brne	.+6      	; 0x2054 <_ZN13RHHardwareSPI14endTransactionEv+0x1e>
        SPI_AVR_EIMSK = interruptSave;
    204e:	8d bb       	out	0x1d, r24	; 29
        SREG = sreg;
    2050:	9f bf       	out	0x3f, r25	; 63
    2052:	08 95       	ret
      } else
      #endif
      {
        SREG = interruptSave;
    2054:	8f bf       	out	0x3f, r24	; 63
    2056:	08 95       	ret

00002058 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
    2058:	cf 93       	push	r28
    205a:	df 93       	push	r29
    205c:	ec 01       	movw	r28, r24
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
    205e:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
    2062:	8e e3       	ldi	r24, 0x3E	; 62
    2064:	92 e0       	ldi	r25, 0x02	; 2
    2066:	99 83       	std	Y+1, r25	; 0x01
    2068:	88 83       	st	Y, r24
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    206a:	80 e5       	ldi	r24, 0x50	; 80
    206c:	8d 83       	std	Y+5, r24	; 0x05
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    206e:	1e 82       	std	Y+6, r1	; 0x06
{
}
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	08 95       	ret

00002076 <_GLOBAL__sub_I_hardware_spi>:
// $Id: RHHardwareSPI.cpp,v 1.20 2018/02/11 23:57:18 mikem Exp $

#include <RHHardwareSPI.h>

// Declare a single default instance of the hardware SPI interface class
RHHardwareSPI hardware_spi;
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	40 e0       	ldi	r20, 0x00	; 0
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	8a e4       	ldi	r24, 0x4A	; 74
    207e:	94 e0       	ldi	r25, 0x04	; 4
    2080:	0c 94 2c 10 	jmp	0x2058	; 0x2058 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>

00002084 <_ZN7RH_RF6916maxMessageLengthEv>:
    printRegister(RH_RF69_REG_58_TESTLNA);
    printRegister(RH_RF69_REG_6F_TESTDAGC);
    printRegister(RH_RF69_REG_71_TESTAFC);

    return true;
}
    2084:	8c e3       	ldi	r24, 0x3C	; 60
    2086:	08 95       	ret

00002088 <_ZN7RH_RF6916setEncryptionKeyEPh.part.4.constprop.5>:
    2088:	cf 93       	push	r28
    208a:	df 93       	push	r29
    208c:	ec 01       	movw	r28, r24
    208e:	6d e3       	ldi	r22, 0x3D	; 61
    2090:	0e 94 01 17 	call	0x2e02	; 0x2e02 <_ZN11RHSPIDriver7spiReadEh>
    2094:	48 2f       	mov	r20, r24
    2096:	4e 7f       	andi	r20, 0xFE	; 254
    2098:	6d e3       	ldi	r22, 0x3D	; 61
    209a:	ce 01       	movw	r24, r28
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>

000020a4 <_ZN7RH_RF694recvEPhS0_>:
    20a4:	cf 92       	push	r12
    20a6:	df 92       	push	r13
    20a8:	ef 92       	push	r14
    20aa:	ff 92       	push	r15
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	cf 93       	push	r28
    20b2:	df 93       	push	r29
    20b4:	ec 01       	movw	r28, r24
    20b6:	6b 01       	movw	r12, r22
    20b8:	8a 01       	movw	r16, r20
    20ba:	e8 81       	ld	r30, Y
    20bc:	f9 81       	ldd	r31, Y+1	; 0x01
    20be:	02 80       	ldd	r0, Z+2	; 0x02
    20c0:	f3 81       	ldd	r31, Z+3	; 0x03
    20c2:	e0 2d       	mov	r30, r0
    20c4:	09 95       	icall
    20c6:	f8 2e       	mov	r15, r24
    20c8:	88 23       	and	r24, r24
    20ca:	e1 f0       	breq	.+56     	; 0x2104 <_ZN7RH_RF694recvEPhS0_+0x60>
    20cc:	c1 14       	cp	r12, r1
    20ce:	d1 04       	cpc	r13, r1
    20d0:	b1 f0       	breq	.+44     	; 0x20fe <_ZN7RH_RF694recvEPhS0_+0x5a>
    20d2:	01 15       	cp	r16, r1
    20d4:	11 05       	cpc	r17, r1
    20d6:	99 f0       	breq	.+38     	; 0x20fe <_ZN7RH_RF694recvEPhS0_+0x5a>
    20d8:	ef b6       	in	r14, 0x3f	; 63
    20da:	f8 94       	cli
    20dc:	89 a1       	ldd	r24, Y+33	; 0x21
    20de:	f8 01       	movw	r30, r16
    20e0:	90 81       	ld	r25, Z
    20e2:	89 17       	cp	r24, r25
    20e4:	10 f4       	brcc	.+4      	; 0x20ea <_ZN7RH_RF694recvEPhS0_+0x46>
    20e6:	89 a1       	ldd	r24, Y+33	; 0x21
    20e8:	80 83       	st	Z, r24
    20ea:	f8 01       	movw	r30, r16
    20ec:	40 81       	ld	r20, Z
    20ee:	50 e0       	ldi	r21, 0x00	; 0
    20f0:	be 01       	movw	r22, r28
    20f2:	6e 5d       	subi	r22, 0xDE	; 222
    20f4:	7f 4f       	sbci	r23, 0xFF	; 255
    20f6:	c6 01       	movw	r24, r12
    20f8:	0e 94 39 1c 	call	0x3872	; 0x3872 <memcpy>
    20fc:	ef be       	out	0x3f, r14	; 63
    20fe:	c2 5a       	subi	r28, 0xA2	; 162
    2100:	df 4f       	sbci	r29, 0xFF	; 255
    2102:	18 82       	st	Y, r1
    2104:	8f 2d       	mov	r24, r15
    2106:	df 91       	pop	r29
    2108:	cf 91       	pop	r28
    210a:	1f 91       	pop	r17
    210c:	0f 91       	pop	r16
    210e:	ff 90       	pop	r15
    2110:	ef 90       	pop	r14
    2112:	df 90       	pop	r13
    2114:	cf 90       	pop	r12
    2116:	08 95       	ret

00002118 <_ZN7RH_RF695sleepEv>:
    2118:	cf 93       	push	r28
    211a:	df 93       	push	r29
    211c:	fc 01       	movw	r30, r24
    211e:	22 81       	ldd	r18, Z+2	; 0x02
    2120:	21 30       	cpi	r18, 0x01	; 1
    2122:	39 f0       	breq	.+14     	; 0x2132 <_ZN7RH_RF695sleepEv+0x1a>
    2124:	ec 01       	movw	r28, r24
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	61 e0       	ldi	r22, 0x01	; 1
    212a:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	8a 83       	std	Y+2, r24	; 0x02
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	df 91       	pop	r29
    2136:	cf 91       	pop	r28
    2138:	08 95       	ret

0000213a <_ZN7RH_RF69C1EhhR12RHGenericSPI>:
    213a:	1f 93       	push	r17
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	ec 01       	movw	r28, r24
    2142:	14 2f       	mov	r17, r20
    2144:	a9 01       	movw	r20, r18
    2146:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
    214a:	88 e5       	ldi	r24, 0x58	; 88
    214c:	92 e0       	ldi	r25, 0x02	; 2
    214e:	99 83       	std	Y+1, r25	; 0x01
    2150:	88 83       	st	Y, r24
    2152:	1c 8f       	std	Y+28, r17	; 0x1c
    2154:	84 e0       	ldi	r24, 0x04	; 4
    2156:	8e 8f       	std	Y+30, r24	; 0x1e
    2158:	8f ef       	ldi	r24, 0xFF	; 255
    215a:	8d 8f       	std	Y+29, r24	; 0x1d
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	1f 91       	pop	r17
    2162:	08 95       	ret

00002164 <_ZN7RH_RF698readFifoEv>:
    2164:	ef 92       	push	r14
    2166:	ff 92       	push	r15
    2168:	0f 93       	push	r16
    216a:	1f 93       	push	r17
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	ec 01       	movw	r28, r24
    2172:	ff b6       	in	r15, 0x3f	; 63
    2174:	f8 94       	cli
    2176:	60 e0       	ldi	r22, 0x00	; 0
    2178:	8a 8d       	ldd	r24, Y+26	; 0x1a
    217a:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <digitalWrite>
    217e:	88 8d       	ldd	r24, Y+24	; 0x18
    2180:	99 8d       	ldd	r25, Y+25	; 0x19
    2182:	dc 01       	movw	r26, r24
    2184:	ed 91       	ld	r30, X+
    2186:	fc 91       	ld	r31, X
    2188:	00 88       	ldd	r0, Z+16	; 0x10
    218a:	f1 89       	ldd	r31, Z+17	; 0x11
    218c:	e0 2d       	mov	r30, r0
    218e:	09 95       	icall
    2190:	88 8d       	ldd	r24, Y+24	; 0x18
    2192:	99 8d       	ldd	r25, Y+25	; 0x19
    2194:	dc 01       	movw	r26, r24
    2196:	ed 91       	ld	r30, X+
    2198:	fc 91       	ld	r31, X
    219a:	01 90       	ld	r0, Z+
    219c:	f0 81       	ld	r31, Z
    219e:	e0 2d       	mov	r30, r0
    21a0:	60 e0       	ldi	r22, 0x00	; 0
    21a2:	09 95       	icall
    21a4:	88 8d       	ldd	r24, Y+24	; 0x18
    21a6:	99 8d       	ldd	r25, Y+25	; 0x19
    21a8:	dc 01       	movw	r26, r24
    21aa:	ed 91       	ld	r30, X+
    21ac:	fc 91       	ld	r31, X
    21ae:	01 90       	ld	r0, Z+
    21b0:	f0 81       	ld	r31, Z
    21b2:	e0 2d       	mov	r30, r0
    21b4:	60 e0       	ldi	r22, 0x00	; 0
    21b6:	09 95       	icall
    21b8:	08 2f       	mov	r16, r24
    21ba:	8c ef       	ldi	r24, 0xFC	; 252
    21bc:	80 0f       	add	r24, r16
    21be:	8d 33       	cpi	r24, 0x3D	; 61
    21c0:	00 f5       	brcc	.+64     	; 0x2202 <_ZN7RH_RF698readFifoEv+0x9e>
    21c2:	88 8d       	ldd	r24, Y+24	; 0x18
    21c4:	99 8d       	ldd	r25, Y+25	; 0x19
    21c6:	dc 01       	movw	r26, r24
    21c8:	ed 91       	ld	r30, X+
    21ca:	fc 91       	ld	r31, X
    21cc:	01 90       	ld	r0, Z+
    21ce:	f0 81       	ld	r31, Z
    21d0:	e0 2d       	mov	r30, r0
    21d2:	60 e0       	ldi	r22, 0x00	; 0
    21d4:	09 95       	icall
    21d6:	8d 83       	std	Y+5, r24	; 0x05
    21d8:	8c 81       	ldd	r24, Y+4	; 0x04
    21da:	81 11       	cpse	r24, r1
    21dc:	27 c0       	rjmp	.+78     	; 0x222c <_ZN7RH_RF698readFifoEv+0xc8>
    21de:	9d 81       	ldd	r25, Y+5	; 0x05
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	98 17       	cp	r25, r24
    21e4:	19 f1       	breq	.+70     	; 0x222c <_ZN7RH_RF698readFifoEv+0xc8>
    21e6:	8d 81       	ldd	r24, Y+5	; 0x05
    21e8:	8f 3f       	cpi	r24, 0xFF	; 255
    21ea:	59 f4       	brne	.+22     	; 0x2202 <_ZN7RH_RF698readFifoEv+0x9e>
    21ec:	1f c0       	rjmp	.+62     	; 0x222c <_ZN7RH_RF698readFifoEv+0xc8>
    21ee:	89 89       	ldd	r24, Y+17	; 0x11
    21f0:	9a 89       	ldd	r25, Y+18	; 0x12
    21f2:	01 96       	adiw	r24, 0x01	; 1
    21f4:	9a 8b       	std	Y+18, r25	; 0x12
    21f6:	89 8b       	std	Y+17, r24	; 0x11
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	fe 01       	movw	r30, r28
    21fc:	e2 5a       	subi	r30, 0xA2	; 162
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	80 83       	st	Z, r24
    2202:	61 e0       	ldi	r22, 0x01	; 1
    2204:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2206:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <digitalWrite>
    220a:	88 8d       	ldd	r24, Y+24	; 0x18
    220c:	99 8d       	ldd	r25, Y+25	; 0x19
    220e:	dc 01       	movw	r26, r24
    2210:	ed 91       	ld	r30, X+
    2212:	fc 91       	ld	r31, X
    2214:	02 88       	ldd	r0, Z+18	; 0x12
    2216:	f3 89       	ldd	r31, Z+19	; 0x13
    2218:	e0 2d       	mov	r30, r0
    221a:	09 95       	icall
    221c:	ff be       	out	0x3f, r15	; 63
    221e:	df 91       	pop	r29
    2220:	cf 91       	pop	r28
    2222:	1f 91       	pop	r17
    2224:	0f 91       	pop	r16
    2226:	ff 90       	pop	r15
    2228:	ef 90       	pop	r14
    222a:	08 95       	ret
    222c:	88 8d       	ldd	r24, Y+24	; 0x18
    222e:	99 8d       	ldd	r25, Y+25	; 0x19
    2230:	dc 01       	movw	r26, r24
    2232:	ed 91       	ld	r30, X+
    2234:	fc 91       	ld	r31, X
    2236:	01 90       	ld	r0, Z+
    2238:	f0 81       	ld	r31, Z
    223a:	e0 2d       	mov	r30, r0
    223c:	60 e0       	ldi	r22, 0x00	; 0
    223e:	09 95       	icall
    2240:	8e 83       	std	Y+6, r24	; 0x06
    2242:	88 8d       	ldd	r24, Y+24	; 0x18
    2244:	99 8d       	ldd	r25, Y+25	; 0x19
    2246:	dc 01       	movw	r26, r24
    2248:	ed 91       	ld	r30, X+
    224a:	fc 91       	ld	r31, X
    224c:	01 90       	ld	r0, Z+
    224e:	f0 81       	ld	r31, Z
    2250:	e0 2d       	mov	r30, r0
    2252:	60 e0       	ldi	r22, 0x00	; 0
    2254:	09 95       	icall
    2256:	8f 83       	std	Y+7, r24	; 0x07
    2258:	88 8d       	ldd	r24, Y+24	; 0x18
    225a:	99 8d       	ldd	r25, Y+25	; 0x19
    225c:	dc 01       	movw	r26, r24
    225e:	ed 91       	ld	r30, X+
    2260:	fc 91       	ld	r31, X
    2262:	01 90       	ld	r0, Z+
    2264:	f0 81       	ld	r31, Z
    2266:	e0 2d       	mov	r30, r0
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	09 95       	icall
    226c:	88 87       	std	Y+8, r24	; 0x08
    226e:	19 a2       	std	Y+33, r1	; 0x21
    2270:	10 e0       	ldi	r17, 0x00	; 0
    2272:	04 50       	subi	r16, 0x04	; 4
    2274:	11 09       	sbc	r17, r1
    2276:	89 a1       	ldd	r24, Y+33	; 0x21
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	80 17       	cp	r24, r16
    227c:	91 07       	cpc	r25, r17
    227e:	0c f0       	brlt	.+2      	; 0x2282 <_ZN7RH_RF698readFifoEv+0x11e>
    2280:	b6 cf       	rjmp	.-148    	; 0x21ee <_ZN7RH_RF698readFifoEv+0x8a>
    2282:	e9 a0       	ldd	r14, Y+33	; 0x21
    2284:	88 8d       	ldd	r24, Y+24	; 0x18
    2286:	99 8d       	ldd	r25, Y+25	; 0x19
    2288:	dc 01       	movw	r26, r24
    228a:	ed 91       	ld	r30, X+
    228c:	fc 91       	ld	r31, X
    228e:	01 90       	ld	r0, Z+
    2290:	f0 81       	ld	r31, Z
    2292:	e0 2d       	mov	r30, r0
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	09 95       	icall
    2298:	fe 01       	movw	r30, r28
    229a:	ee 0d       	add	r30, r14
    229c:	f1 1d       	adc	r31, r1
    229e:	82 a3       	std	Z+34, r24	; 0x22
    22a0:	89 a1       	ldd	r24, Y+33	; 0x21
    22a2:	8f 5f       	subi	r24, 0xFF	; 255
    22a4:	89 a3       	std	Y+33, r24	; 0x21
    22a6:	e7 cf       	rjmp	.-50     	; 0x2276 <_ZN7RH_RF698readFifoEv+0x112>

000022a8 <_ZN7RH_RF6912setFrequencyEff>:
    22a8:	cf 92       	push	r12
    22aa:	df 92       	push	r13
    22ac:	ef 92       	push	r14
    22ae:	ff 92       	push	r15
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	ec 01       	movw	r28, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	ba 01       	movw	r22, r20
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	34 e2       	ldi	r19, 0x24	; 36
    22be:	44 e7       	ldi	r20, 0x74	; 116
    22c0:	59 e4       	ldi	r21, 0x49	; 73
    22c2:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__mulsf3>
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	34 e2       	ldi	r19, 0x24	; 36
    22ca:	44 e7       	ldi	r20, 0x74	; 116
    22cc:	52 e4       	ldi	r21, 0x42	; 66
    22ce:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__divsf3>
    22d2:	0e 94 54 18 	call	0x30a8	; 0x30a8 <__fixunssfsi>
    22d6:	6b 01       	movw	r12, r22
    22d8:	7c 01       	movw	r14, r24
    22da:	a7 01       	movw	r20, r14
    22dc:	66 27       	eor	r22, r22
    22de:	77 27       	eor	r23, r23
    22e0:	67 e0       	ldi	r22, 0x07	; 7
    22e2:	ce 01       	movw	r24, r28
    22e4:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    22e8:	77 27       	eor	r23, r23
    22ea:	6f 2d       	mov	r22, r15
    22ec:	5e 2d       	mov	r21, r14
    22ee:	4d 2d       	mov	r20, r13
    22f0:	68 e0       	ldi	r22, 0x08	; 8
    22f2:	ce 01       	movw	r24, r28
    22f4:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    22f8:	4c 2d       	mov	r20, r12
    22fa:	69 e0       	ldi	r22, 0x09	; 9
    22fc:	ce 01       	movw	r24, r28
    22fe:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	df 91       	pop	r29
    2306:	cf 91       	pop	r28
    2308:	ff 90       	pop	r15
    230a:	ef 90       	pop	r14
    230c:	df 90       	pop	r13
    230e:	cf 90       	pop	r12
    2310:	08 95       	ret

00002312 <_ZN7RH_RF699setOpModeEh>:
    2312:	1f 93       	push	r17
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	ec 01       	movw	r28, r24
    231a:	16 2f       	mov	r17, r22
    231c:	61 e0       	ldi	r22, 0x01	; 1
    231e:	0e 94 01 17 	call	0x2e02	; 0x2e02 <_ZN11RHSPIDriver7spiReadEh>
    2322:	41 2f       	mov	r20, r17
    2324:	4c 71       	andi	r20, 0x1C	; 28
    2326:	83 7e       	andi	r24, 0xE3	; 227
    2328:	48 2b       	or	r20, r24
    232a:	61 e0       	ldi	r22, 0x01	; 1
    232c:	ce 01       	movw	r24, r28
    232e:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    2332:	67 e2       	ldi	r22, 0x27	; 39
    2334:	ce 01       	movw	r24, r28
    2336:	0e 94 01 17 	call	0x2e02	; 0x2e02 <_ZN11RHSPIDriver7spiReadEh>
    233a:	87 ff       	sbrs	r24, 7
    233c:	fa cf       	rjmp	.-12     	; 0x2332 <_ZN7RH_RF699setOpModeEh+0x20>
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	08 95       	ret

00002346 <_ZN7RH_RF6911setModeIdleEv>:
    2346:	cf 93       	push	r28
    2348:	df 93       	push	r29
    234a:	fc 01       	movw	r30, r24
    234c:	22 81       	ldd	r18, Z+2	; 0x02
    234e:	22 30       	cpi	r18, 0x02	; 2
    2350:	a1 f0       	breq	.+40     	; 0x237a <_ZN7RH_RF6911setModeIdleEv+0x34>
    2352:	ec 01       	movw	r28, r24
    2354:	80 a1       	ldd	r24, Z+32	; 0x20
    2356:	82 31       	cpi	r24, 0x12	; 18
    2358:	54 f0       	brlt	.+20     	; 0x236e <_ZN7RH_RF6911setModeIdleEv+0x28>
    235a:	45 e5       	ldi	r20, 0x55	; 85
    235c:	6a e5       	ldi	r22, 0x5A	; 90
    235e:	cf 01       	movw	r24, r30
    2360:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    2364:	40 e7       	ldi	r20, 0x70	; 112
    2366:	6c e5       	ldi	r22, 0x5C	; 92
    2368:	ce 01       	movw	r24, r28
    236a:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    236e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2370:	ce 01       	movw	r24, r28
    2372:	0e 94 89 11 	call	0x2312	; 0x2312 <_ZN7RH_RF699setOpModeEh>
    2376:	82 e0       	ldi	r24, 0x02	; 2
    2378:	8a 83       	std	Y+2, r24	; 0x02
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	08 95       	ret

00002380 <_ZN7RH_RF6915handleInterruptEv>:
    2380:	1f 93       	push	r17
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    2386:	ec 01       	movw	r28, r24
    2388:	68 e2       	ldi	r22, 0x28	; 40
    238a:	0e 94 01 17 	call	0x2e02	; 0x2e02 <_ZN11RHSPIDriver7spiReadEh>
    238e:	18 2f       	mov	r17, r24
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	83 30       	cpi	r24, 0x03	; 3
    2394:	11 f4       	brne	.+4      	; 0x239a <_ZN7RH_RF6915handleInterruptEv+0x1a>
    2396:	13 fd       	sbrc	r17, 3
    2398:	23 c0       	rjmp	.+70     	; 0x23e0 <_ZN7RH_RF6915handleInterruptEv+0x60>
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	84 30       	cpi	r24, 0x04	; 4
    239e:	49 f5       	brne	.+82     	; 0x23f2 <_ZN7RH_RF6915handleInterruptEv+0x72>
    23a0:	12 ff       	sbrs	r17, 2
    23a2:	27 c0       	rjmp	.+78     	; 0x23f2 <_ZN7RH_RF6915handleInterruptEv+0x72>
    23a4:	64 e2       	ldi	r22, 0x24	; 36
    23a6:	ce 01       	movw	r24, r28
    23a8:	0e 94 01 17 	call	0x2e02	; 0x2e02 <_ZN11RHSPIDriver7spiReadEh>
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	95 95       	asr	r25
    23b0:	87 95       	ror	r24
    23b2:	91 95       	neg	r25
    23b4:	81 95       	neg	r24
    23b6:	91 09       	sbc	r25, r1
    23b8:	9e 87       	std	Y+14, r25	; 0x0e
    23ba:	8d 87       	std	Y+13, r24	; 0x0d
    23bc:	0e 94 11 0c 	call	0x1822	; 0x1822 <millis>
    23c0:	fe 01       	movw	r30, r28
    23c2:	e1 5a       	subi	r30, 0xA1	; 161
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	60 83       	st	Z, r22
    23c8:	71 83       	std	Z+1, r23	; 0x01
    23ca:	82 83       	std	Z+2, r24	; 0x02
    23cc:	93 83       	std	Z+3, r25	; 0x03
    23ce:	ce 01       	movw	r24, r28
    23d0:	0e 94 a3 11 	call	0x2346	; 0x2346 <_ZN7RH_RF6911setModeIdleEv>
    23d4:	ce 01       	movw	r24, r28
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	1f 91       	pop	r17
    23dc:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <_ZN7RH_RF698readFifoEv>
    23e0:	ce 01       	movw	r24, r28
    23e2:	0e 94 a3 11 	call	0x2346	; 0x2346 <_ZN7RH_RF6911setModeIdleEv>
    23e6:	8b 89       	ldd	r24, Y+19	; 0x13
    23e8:	9c 89       	ldd	r25, Y+20	; 0x14
    23ea:	01 96       	adiw	r24, 0x01	; 1
    23ec:	9c 8b       	std	Y+20, r25	; 0x14
    23ee:	8b 8b       	std	Y+19, r24	; 0x13
    23f0:	d4 cf       	rjmp	.-88     	; 0x239a <_ZN7RH_RF6915handleInterruptEv+0x1a>
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	1f 91       	pop	r17
    23f8:	08 95       	ret

000023fa <_ZN7RH_RF694isr0Ev>:
    23fa:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <_ZN7RH_RF6919_deviceForInterruptE>
    23fe:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <_ZN7RH_RF6919_deviceForInterruptE+0x1>
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	11 f0       	breq	.+4      	; 0x240a <_ZN7RH_RF694isr0Ev+0x10>
    2406:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <_ZN7RH_RF6915handleInterruptEv>
    240a:	08 95       	ret

0000240c <_ZN7RH_RF694isr1Ev>:
    240c:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <_ZN7RH_RF6919_deviceForInterruptE+0x2>
    2410:	90 91 55 04 	lds	r25, 0x0455	; 0x800455 <_ZN7RH_RF6919_deviceForInterruptE+0x3>
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	11 f0       	breq	.+4      	; 0x241c <_ZN7RH_RF694isr1Ev+0x10>
    2418:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <_ZN7RH_RF6915handleInterruptEv>
    241c:	08 95       	ret

0000241e <_ZN7RH_RF694isr2Ev>:
    241e:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <_ZN7RH_RF6919_deviceForInterruptE+0x4>
    2422:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <_ZN7RH_RF6919_deviceForInterruptE+0x5>
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	11 f0       	breq	.+4      	; 0x242e <_ZN7RH_RF694isr2Ev+0x10>
    242a:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <_ZN7RH_RF6915handleInterruptEv>
    242e:	08 95       	ret

00002430 <_ZN7RH_RF699setModeRxEv>:
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	fc 01       	movw	r30, r24
    2436:	22 81       	ldd	r18, Z+2	; 0x02
    2438:	24 30       	cpi	r18, 0x04	; 4
    243a:	c9 f0       	breq	.+50     	; 0x246e <_ZN7RH_RF699setModeRxEv+0x3e>
    243c:	ec 01       	movw	r28, r24
    243e:	80 a1       	ldd	r24, Z+32	; 0x20
    2440:	82 31       	cpi	r24, 0x12	; 18
    2442:	54 f0       	brlt	.+20     	; 0x2458 <_ZN7RH_RF699setModeRxEv+0x28>
    2444:	45 e5       	ldi	r20, 0x55	; 85
    2446:	6a e5       	ldi	r22, 0x5A	; 90
    2448:	cf 01       	movw	r24, r30
    244a:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    244e:	40 e7       	ldi	r20, 0x70	; 112
    2450:	6c e5       	ldi	r22, 0x5C	; 92
    2452:	ce 01       	movw	r24, r28
    2454:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    2458:	40 e4       	ldi	r20, 0x40	; 64
    245a:	65 e2       	ldi	r22, 0x25	; 37
    245c:	ce 01       	movw	r24, r28
    245e:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    2462:	60 e1       	ldi	r22, 0x10	; 16
    2464:	ce 01       	movw	r24, r28
    2466:	0e 94 89 11 	call	0x2312	; 0x2312 <_ZN7RH_RF699setOpModeEh>
    246a:	84 e0       	ldi	r24, 0x04	; 4
    246c:	8a 83       	std	Y+2, r24	; 0x02
    246e:	df 91       	pop	r29
    2470:	cf 91       	pop	r28
    2472:	08 95       	ret

00002474 <_ZN7RH_RF699availableEv>:
    2474:	cf 93       	push	r28
    2476:	df 93       	push	r29
    2478:	fc 01       	movw	r30, r24
    247a:	22 81       	ldd	r18, Z+2	; 0x02
    247c:	23 30       	cpi	r18, 0x03	; 3
    247e:	39 f0       	breq	.+14     	; 0x248e <_ZN7RH_RF699availableEv+0x1a>
    2480:	ec 01       	movw	r28, r24
    2482:	0e 94 18 12 	call	0x2430	; 0x2430 <_ZN7RH_RF699setModeRxEv>
    2486:	c2 5a       	subi	r28, 0xA2	; 162
    2488:	df 4f       	sbci	r29, 0xFF	; 255
    248a:	88 81       	ld	r24, Y
    248c:	01 c0       	rjmp	.+2      	; 0x2490 <_ZN7RH_RF699availableEv+0x1c>
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	08 95       	ret

00002496 <_ZN7RH_RF699setModeTxEv>:
    2496:	cf 93       	push	r28
    2498:	df 93       	push	r29
    249a:	fc 01       	movw	r30, r24
    249c:	22 81       	ldd	r18, Z+2	; 0x02
    249e:	23 30       	cpi	r18, 0x03	; 3
    24a0:	c9 f0       	breq	.+50     	; 0x24d4 <_ZN7RH_RF699setModeTxEv+0x3e>
    24a2:	ec 01       	movw	r28, r24
    24a4:	80 a1       	ldd	r24, Z+32	; 0x20
    24a6:	82 31       	cpi	r24, 0x12	; 18
    24a8:	54 f0       	brlt	.+20     	; 0x24be <_ZN7RH_RF699setModeTxEv+0x28>
    24aa:	4d e5       	ldi	r20, 0x5D	; 93
    24ac:	6a e5       	ldi	r22, 0x5A	; 90
    24ae:	cf 01       	movw	r24, r30
    24b0:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    24b4:	4c e7       	ldi	r20, 0x7C	; 124
    24b6:	6c e5       	ldi	r22, 0x5C	; 92
    24b8:	ce 01       	movw	r24, r28
    24ba:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	65 e2       	ldi	r22, 0x25	; 37
    24c2:	ce 01       	movw	r24, r28
    24c4:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    24c8:	6c e0       	ldi	r22, 0x0C	; 12
    24ca:	ce 01       	movw	r24, r28
    24cc:	0e 94 89 11 	call	0x2312	; 0x2312 <_ZN7RH_RF699setOpModeEh>
    24d0:	83 e0       	ldi	r24, 0x03	; 3
    24d2:	8a 83       	std	Y+2, r24	; 0x02
    24d4:	df 91       	pop	r29
    24d6:	cf 91       	pop	r28
    24d8:	08 95       	ret

000024da <_ZN7RH_RF694sendEPKhh>:
    24da:	bf 92       	push	r11
    24dc:	cf 92       	push	r12
    24de:	df 92       	push	r13
    24e0:	ef 92       	push	r14
    24e2:	ff 92       	push	r15
    24e4:	0f 93       	push	r16
    24e6:	1f 93       	push	r17
    24e8:	cf 93       	push	r28
    24ea:	df 93       	push	r29
    24ec:	ec 01       	movw	r28, r24
    24ee:	b6 2e       	mov	r11, r22
    24f0:	c7 2e       	mov	r12, r23
    24f2:	14 2f       	mov	r17, r20
    24f4:	4d 33       	cpi	r20, 0x3D	; 61
    24f6:	10 f0       	brcs	.+4      	; 0x24fc <_ZN7RH_RF694sendEPKhh+0x22>
    24f8:	00 e0       	ldi	r16, 0x00	; 0
    24fa:	6f c0       	rjmp	.+222    	; 0x25da <_ZN7RH_RF694sendEPKhh+0x100>
    24fc:	e8 81       	ld	r30, Y
    24fe:	f9 81       	ldd	r31, Y+1	; 0x01
    2500:	04 84       	ldd	r0, Z+12	; 0x0c
    2502:	f5 85       	ldd	r31, Z+13	; 0x0d
    2504:	e0 2d       	mov	r30, r0
    2506:	09 95       	icall
    2508:	ce 01       	movw	r24, r28
    250a:	0e 94 a3 11 	call	0x2346	; 0x2346 <_ZN7RH_RF6911setModeIdleEv>
    250e:	e8 81       	ld	r30, Y
    2510:	f9 81       	ldd	r31, Y+1	; 0x01
    2512:	02 88       	ldd	r0, Z+18	; 0x12
    2514:	f3 89       	ldd	r31, Z+19	; 0x13
    2516:	e0 2d       	mov	r30, r0
    2518:	ce 01       	movw	r24, r28
    251a:	09 95       	icall
    251c:	08 2f       	mov	r16, r24
    251e:	88 23       	and	r24, r24
    2520:	59 f3       	breq	.-42     	; 0x24f8 <_ZN7RH_RF694sendEPKhh+0x1e>
    2522:	df b6       	in	r13, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	60 e0       	ldi	r22, 0x00	; 0
    2528:	8a 8d       	ldd	r24, Y+26	; 0x1a
    252a:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <digitalWrite>
    252e:	88 8d       	ldd	r24, Y+24	; 0x18
    2530:	99 8d       	ldd	r25, Y+25	; 0x19
    2532:	dc 01       	movw	r26, r24
    2534:	ed 91       	ld	r30, X+
    2536:	fc 91       	ld	r31, X
    2538:	01 90       	ld	r0, Z+
    253a:	f0 81       	ld	r31, Z
    253c:	e0 2d       	mov	r30, r0
    253e:	60 e8       	ldi	r22, 0x80	; 128
    2540:	09 95       	icall
    2542:	88 8d       	ldd	r24, Y+24	; 0x18
    2544:	99 8d       	ldd	r25, Y+25	; 0x19
    2546:	dc 01       	movw	r26, r24
    2548:	ed 91       	ld	r30, X+
    254a:	fc 91       	ld	r31, X
    254c:	01 90       	ld	r0, Z+
    254e:	f0 81       	ld	r31, Z
    2550:	e0 2d       	mov	r30, r0
    2552:	64 e0       	ldi	r22, 0x04	; 4
    2554:	61 0f       	add	r22, r17
    2556:	09 95       	icall
    2558:	88 8d       	ldd	r24, Y+24	; 0x18
    255a:	99 8d       	ldd	r25, Y+25	; 0x19
    255c:	dc 01       	movw	r26, r24
    255e:	ed 91       	ld	r30, X+
    2560:	fc 91       	ld	r31, X
    2562:	01 90       	ld	r0, Z+
    2564:	f0 81       	ld	r31, Z
    2566:	e0 2d       	mov	r30, r0
    2568:	69 85       	ldd	r22, Y+9	; 0x09
    256a:	09 95       	icall
    256c:	88 8d       	ldd	r24, Y+24	; 0x18
    256e:	99 8d       	ldd	r25, Y+25	; 0x19
    2570:	dc 01       	movw	r26, r24
    2572:	ed 91       	ld	r30, X+
    2574:	fc 91       	ld	r31, X
    2576:	01 90       	ld	r0, Z+
    2578:	f0 81       	ld	r31, Z
    257a:	e0 2d       	mov	r30, r0
    257c:	6a 85       	ldd	r22, Y+10	; 0x0a
    257e:	09 95       	icall
    2580:	88 8d       	ldd	r24, Y+24	; 0x18
    2582:	99 8d       	ldd	r25, Y+25	; 0x19
    2584:	dc 01       	movw	r26, r24
    2586:	ed 91       	ld	r30, X+
    2588:	fc 91       	ld	r31, X
    258a:	01 90       	ld	r0, Z+
    258c:	f0 81       	ld	r31, Z
    258e:	e0 2d       	mov	r30, r0
    2590:	6b 85       	ldd	r22, Y+11	; 0x0b
    2592:	09 95       	icall
    2594:	88 8d       	ldd	r24, Y+24	; 0x18
    2596:	99 8d       	ldd	r25, Y+25	; 0x19
    2598:	dc 01       	movw	r26, r24
    259a:	ed 91       	ld	r30, X+
    259c:	fc 91       	ld	r31, X
    259e:	01 90       	ld	r0, Z+
    25a0:	f0 81       	ld	r31, Z
    25a2:	e0 2d       	mov	r30, r0
    25a4:	6c 85       	ldd	r22, Y+12	; 0x0c
    25a6:	09 95       	icall
    25a8:	eb 2c       	mov	r14, r11
    25aa:	fc 2c       	mov	r15, r12
    25ac:	11 50       	subi	r17, 0x01	; 1
    25ae:	68 f0       	brcs	.+26     	; 0x25ca <_ZN7RH_RF694sendEPKhh+0xf0>
    25b0:	88 8d       	ldd	r24, Y+24	; 0x18
    25b2:	99 8d       	ldd	r25, Y+25	; 0x19
    25b4:	f7 01       	movw	r30, r14
    25b6:	61 91       	ld	r22, Z+
    25b8:	7f 01       	movw	r14, r30
    25ba:	dc 01       	movw	r26, r24
    25bc:	ed 91       	ld	r30, X+
    25be:	fc 91       	ld	r31, X
    25c0:	01 90       	ld	r0, Z+
    25c2:	f0 81       	ld	r31, Z
    25c4:	e0 2d       	mov	r30, r0
    25c6:	09 95       	icall
    25c8:	f1 cf       	rjmp	.-30     	; 0x25ac <_ZN7RH_RF694sendEPKhh+0xd2>
    25ca:	61 e0       	ldi	r22, 0x01	; 1
    25cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    25ce:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <digitalWrite>
    25d2:	df be       	out	0x3f, r13	; 63
    25d4:	ce 01       	movw	r24, r28
    25d6:	0e 94 4b 12 	call	0x2496	; 0x2496 <_ZN7RH_RF699setModeTxEv>
    25da:	80 2f       	mov	r24, r16
    25dc:	df 91       	pop	r29
    25de:	cf 91       	pop	r28
    25e0:	1f 91       	pop	r17
    25e2:	0f 91       	pop	r16
    25e4:	ff 90       	pop	r15
    25e6:	ef 90       	pop	r14
    25e8:	df 90       	pop	r13
    25ea:	cf 90       	pop	r12
    25ec:	bf 90       	pop	r11
    25ee:	08 95       	ret

000025f0 <_ZN7RH_RF6910setTxPowerEab>:
    25f0:	fc 01       	movw	r30, r24
    25f2:	60 a3       	std	Z+32, r22	; 0x20
    25f4:	44 23       	and	r20, r20
    25f6:	99 f0       	breq	.+38     	; 0x261e <_ZN7RH_RF6910setTxPowerEab+0x2e>
    25f8:	6e 3f       	cpi	r22, 0xFE	; 254
    25fa:	14 f4       	brge	.+4      	; 0x2600 <_ZN7RH_RF6910setTxPowerEab+0x10>
    25fc:	8e ef       	ldi	r24, 0xFE	; 254
    25fe:	80 a3       	std	Z+32, r24	; 0x20
    2600:	40 a1       	ldd	r20, Z+32	; 0x20
    2602:	4e 30       	cpi	r20, 0x0E	; 14
    2604:	24 f4       	brge	.+8      	; 0x260e <_ZN7RH_RF6910setTxPowerEab+0x1e>
    2606:	4e 5e       	subi	r20, 0xEE	; 238
    2608:	4f 71       	andi	r20, 0x1F	; 31
    260a:	40 64       	ori	r20, 0x40	; 64
    260c:	15 c0       	rjmp	.+42     	; 0x2638 <_ZN7RH_RF6910setTxPowerEab+0x48>
    260e:	42 31       	cpi	r20, 0x12	; 18
    2610:	1c f0       	brlt	.+6      	; 0x2618 <_ZN7RH_RF6910setTxPowerEab+0x28>
    2612:	45 5f       	subi	r20, 0xF5	; 245
    2614:	4f 71       	andi	r20, 0x1F	; 31
    2616:	01 c0       	rjmp	.+2      	; 0x261a <_ZN7RH_RF6910setTxPowerEab+0x2a>
    2618:	42 5f       	subi	r20, 0xF2	; 242
    261a:	40 66       	ori	r20, 0x60	; 96
    261c:	0d c0       	rjmp	.+26     	; 0x2638 <_ZN7RH_RF6910setTxPowerEab+0x48>
    261e:	6e 3e       	cpi	r22, 0xEE	; 238
    2620:	14 f4       	brge	.+4      	; 0x2626 <_ZN7RH_RF6910setTxPowerEab+0x36>
    2622:	8e ee       	ldi	r24, 0xEE	; 238
    2624:	80 a3       	std	Z+32, r24	; 0x20
    2626:	80 a1       	ldd	r24, Z+32	; 0x20
    2628:	8e 30       	cpi	r24, 0x0E	; 14
    262a:	14 f0       	brlt	.+4      	; 0x2630 <_ZN7RH_RF6910setTxPowerEab+0x40>
    262c:	8d e0       	ldi	r24, 0x0D	; 13
    262e:	80 a3       	std	Z+32, r24	; 0x20
    2630:	40 a1       	ldd	r20, Z+32	; 0x20
    2632:	4e 5e       	subi	r20, 0xEE	; 238
    2634:	4f 71       	andi	r20, 0x1F	; 31
    2636:	40 68       	ori	r20, 0x80	; 128
    2638:	61 e1       	ldi	r22, 0x11	; 17
    263a:	cf 01       	movw	r24, r30
    263c:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>

00002640 <_ZN7RH_RF6917setModemRegistersEPKNS_11ModemConfigE>:
    2640:	0f 93       	push	r16
    2642:	1f 93       	push	r17
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	ec 01       	movw	r28, r24
    264a:	8b 01       	movw	r16, r22
    264c:	25 e0       	ldi	r18, 0x05	; 5
    264e:	ab 01       	movw	r20, r22
    2650:	62 e0       	ldi	r22, 0x02	; 2
    2652:	0e 94 82 17 	call	0x2f04	; 0x2f04 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    2656:	a8 01       	movw	r20, r16
    2658:	4b 5f       	subi	r20, 0xFB	; 251
    265a:	5f 4f       	sbci	r21, 0xFF	; 255
    265c:	22 e0       	ldi	r18, 0x02	; 2
    265e:	69 e1       	ldi	r22, 0x19	; 25
    2660:	ce 01       	movw	r24, r28
    2662:	0e 94 82 17 	call	0x2f04	; 0x2f04 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    2666:	f8 01       	movw	r30, r16
    2668:	47 81       	ldd	r20, Z+7	; 0x07
    266a:	67 e3       	ldi	r22, 0x37	; 55
    266c:	ce 01       	movw	r24, r28
    266e:	df 91       	pop	r29
    2670:	cf 91       	pop	r28
    2672:	1f 91       	pop	r17
    2674:	0f 91       	pop	r16
    2676:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>

0000267a <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE>:
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	28 97       	sbiw	r28, 0x08	; 8
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	70 e0       	ldi	r23, 0x00	; 0
    2694:	6c 31       	cpi	r22, 0x1C	; 28
    2696:	71 05       	cpc	r23, r1
    2698:	b4 f4       	brge	.+44     	; 0x26c6 <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE+0x4c>
    269a:	8c 01       	movw	r16, r24
    269c:	83 e0       	ldi	r24, 0x03	; 3
    269e:	66 0f       	add	r22, r22
    26a0:	77 1f       	adc	r23, r23
    26a2:	8a 95       	dec	r24
    26a4:	e1 f7       	brne	.-8      	; 0x269e <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE+0x24>
    26a6:	68 54       	subi	r22, 0x48	; 72
    26a8:	7e 4f       	sbci	r23, 0xFE	; 254
    26aa:	48 e0       	ldi	r20, 0x08	; 8
    26ac:	50 e0       	ldi	r21, 0x00	; 0
    26ae:	ce 01       	movw	r24, r28
    26b0:	01 96       	adiw	r24, 0x01	; 1
    26b2:	0e 94 30 1c 	call	0x3860	; 0x3860 <memcpy_P>
    26b6:	be 01       	movw	r22, r28
    26b8:	6f 5f       	subi	r22, 0xFF	; 255
    26ba:	7f 4f       	sbci	r23, 0xFF	; 255
    26bc:	c8 01       	movw	r24, r16
    26be:	0e 94 20 13 	call	0x2640	; 0x2640 <_ZN7RH_RF6917setModemRegistersEPKNS_11ModemConfigE>
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	01 c0       	rjmp	.+2      	; 0x26c8 <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE+0x4e>
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	28 96       	adiw	r28, 0x08	; 8
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	08 95       	ret

000026de <_ZN7RH_RF6917setPreambleLengthEj>:
    26de:	1f 93       	push	r17
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	ec 01       	movw	r28, r24
    26e6:	16 2f       	mov	r17, r22
    26e8:	47 2f       	mov	r20, r23
    26ea:	6c e2       	ldi	r22, 0x2C	; 44
    26ec:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    26f0:	41 2f       	mov	r20, r17
    26f2:	6d e2       	ldi	r22, 0x2D	; 45
    26f4:	ce 01       	movw	r24, r28
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	1f 91       	pop	r17
    26fc:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>

00002700 <_ZN7RH_RF6912setSyncWordsEPKhh>:
    2700:	ef 92       	push	r14
    2702:	ff 92       	push	r15
    2704:	0f 93       	push	r16
    2706:	1f 93       	push	r17
    2708:	cf 93       	push	r28
    270a:	df 93       	push	r29
    270c:	8c 01       	movw	r16, r24
    270e:	7b 01       	movw	r14, r22
    2710:	c4 2f       	mov	r28, r20
    2712:	6e e2       	ldi	r22, 0x2E	; 46
    2714:	0e 94 01 17 	call	0x2e02	; 0x2e02 <_ZN11RHSPIDriver7spiReadEh>
    2718:	d8 2f       	mov	r29, r24
    271a:	e1 14       	cp	r14, r1
    271c:	f1 04       	cpc	r15, r1
    271e:	61 f0       	breq	.+24     	; 0x2738 <_ZN7RH_RF6912setSyncWordsEPKhh+0x38>
    2720:	8f ef       	ldi	r24, 0xFF	; 255
    2722:	8c 0f       	add	r24, r28
    2724:	84 30       	cpi	r24, 0x04	; 4
    2726:	40 f4       	brcc	.+16     	; 0x2738 <_ZN7RH_RF6912setSyncWordsEPKhh+0x38>
    2728:	2c 2f       	mov	r18, r28
    272a:	a7 01       	movw	r20, r14
    272c:	6f e2       	ldi	r22, 0x2F	; 47
    272e:	c8 01       	movw	r24, r16
    2730:	0e 94 82 17 	call	0x2f04	; 0x2f04 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    2734:	d0 68       	ori	r29, 0x80	; 128
    2736:	01 c0       	rjmp	.+2      	; 0x273a <_ZN7RH_RF6912setSyncWordsEPKhh+0x3a>
    2738:	df 77       	andi	r29, 0x7F	; 127
    273a:	2c 2f       	mov	r18, r28
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	21 50       	subi	r18, 0x01	; 1
    2740:	31 09       	sbc	r19, r1
    2742:	83 e0       	ldi	r24, 0x03	; 3
    2744:	22 0f       	add	r18, r18
    2746:	33 1f       	adc	r19, r19
    2748:	8a 95       	dec	r24
    274a:	e1 f7       	brne	.-8      	; 0x2744 <_ZN7RH_RF6912setSyncWordsEPKhh+0x44>
    274c:	d7 7c       	andi	r29, 0xC7	; 199
    274e:	4d 2f       	mov	r20, r29
    2750:	42 2b       	or	r20, r18
    2752:	6e e2       	ldi	r22, 0x2E	; 46
    2754:	c8 01       	movw	r24, r16
    2756:	df 91       	pop	r29
    2758:	cf 91       	pop	r28
    275a:	1f 91       	pop	r17
    275c:	0f 91       	pop	r16
    275e:	ff 90       	pop	r15
    2760:	ef 90       	pop	r14
    2762:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>

00002766 <_ZN7RH_RF6916setEncryptionKeyEPh>:
    2766:	cf 93       	push	r28
    2768:	df 93       	push	r29
    276a:	61 15       	cp	r22, r1
    276c:	71 05       	cpc	r23, r1
    276e:	91 f0       	breq	.+36     	; 0x2794 <_ZN7RH_RF6916setEncryptionKeyEPh+0x2e>
    2770:	ab 01       	movw	r20, r22
    2772:	ec 01       	movw	r28, r24
    2774:	20 e1       	ldi	r18, 0x10	; 16
    2776:	6e e3       	ldi	r22, 0x3E	; 62
    2778:	0e 94 82 17 	call	0x2f04	; 0x2f04 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    277c:	6d e3       	ldi	r22, 0x3D	; 61
    277e:	ce 01       	movw	r24, r28
    2780:	0e 94 01 17 	call	0x2e02	; 0x2e02 <_ZN11RHSPIDriver7spiReadEh>
    2784:	48 2f       	mov	r20, r24
    2786:	41 60       	ori	r20, 0x01	; 1
    2788:	6d e3       	ldi	r22, 0x3D	; 61
    278a:	ce 01       	movw	r24, r28
    278c:	df 91       	pop	r29
    278e:	cf 91       	pop	r28
    2790:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    2794:	df 91       	pop	r29
    2796:	cf 91       	pop	r28
    2798:	0c 94 44 10 	jmp	0x2088	; 0x2088 <_ZN7RH_RF6916setEncryptionKeyEPh.part.4.constprop.5>

0000279c <_ZN7RH_RF694initEv>:
{
    _idleMode = idleMode;
}

bool RH_RF69::init()
{
    279c:	df 92       	push	r13
    279e:	ef 92       	push	r14
    27a0:	ff 92       	push	r15
    27a2:	0f 93       	push	r16
    27a4:	1f 93       	push	r17
    27a6:	cf 93       	push	r28
    27a8:	df 93       	push	r29
    27aa:	00 d0       	rcall	.+0      	; 0x27ac <_ZN7RH_RF694initEv+0x10>
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
    27b0:	7c 01       	movw	r14, r24
    if (!RHSPIDriver::init())
    27b2:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_ZN11RHSPIDriver4initEv>
    27b6:	d8 2e       	mov	r13, r24
    27b8:	81 11       	cpse	r24, r1
    27ba:	02 c0       	rjmp	.+4      	; 0x27c0 <_ZN7RH_RF694initEv+0x24>
	return false;
    27bc:	d1 2c       	mov	r13, r1
    27be:	94 c0       	rjmp	.+296    	; 0x28e8 <_ZN7RH_RF694initEv+0x14c>

    // Determine the interrupt number that corresponds to the interruptPin
    int interruptNumber = digitalPinToInterrupt(_interruptPin);
    27c0:	f7 01       	movw	r30, r14
    27c2:	84 8d       	ldd	r24, Z+28	; 0x1c
    27c4:	88 23       	and	r24, r24
    27c6:	51 f0       	breq	.+20     	; 0x27dc <_ZN7RH_RF694initEv+0x40>
    27c8:	81 30       	cpi	r24, 0x01	; 1
    27ca:	51 f0       	breq	.+20     	; 0x27e0 <_ZN7RH_RF694initEv+0x44>
    27cc:	82 30       	cpi	r24, 0x02	; 2
    27ce:	51 f0       	breq	.+20     	; 0x27e4 <_ZN7RH_RF694initEv+0x48>
    27d0:	83 30       	cpi	r24, 0x03	; 3
    27d2:	51 f0       	breq	.+20     	; 0x27e8 <_ZN7RH_RF694initEv+0x4c>
    27d4:	87 30       	cpi	r24, 0x07	; 7
    27d6:	91 f7       	brne	.-28     	; 0x27bc <_ZN7RH_RF694initEv+0x20>
    27d8:	14 e0       	ldi	r17, 0x04	; 4
    27da:	07 c0       	rjmp	.+14     	; 0x27ea <_ZN7RH_RF694initEv+0x4e>
    27dc:	12 e0       	ldi	r17, 0x02	; 2
    27de:	05 c0       	rjmp	.+10     	; 0x27ea <_ZN7RH_RF694initEv+0x4e>
    27e0:	13 e0       	ldi	r17, 0x03	; 3
    27e2:	03 c0       	rjmp	.+6      	; 0x27ea <_ZN7RH_RF694initEv+0x4e>
    27e4:	11 e0       	ldi	r17, 0x01	; 1
    27e6:	01 c0       	rjmp	.+2      	; 0x27ea <_ZN7RH_RF694initEv+0x4e>
    27e8:	10 e0       	ldi	r17, 0x00	; 0
#ifdef RH_ATTACHINTERRUPT_TAKES_PIN_NUMBER
    interruptNumber = _interruptPin;
#endif

    // Tell the low level SPI interface we will use SPI within this interrupt
    spiUsingInterrupt(interruptNumber);
    27ea:	61 2f       	mov	r22, r17
    27ec:	c7 01       	movw	r24, r14
    27ee:	0e 94 d6 17 	call	0x2fac	; 0x2fac <_ZN11RHSPIDriver17spiUsingInterruptEh>

    // Get the device type and check it
    // This also tests whether we are really connected to a device
    // My test devices return 0x24
    _deviceType = spiRead(RH_RF69_REG_10_VERSION);
    27f2:	60 e1       	ldi	r22, 0x10	; 16
    27f4:	c7 01       	movw	r24, r14
    27f6:	0e 94 01 17 	call	0x2e02	; 0x2e02 <_ZN11RHSPIDriver7spiReadEh>
    27fa:	f7 01       	movw	r30, r14
    27fc:	87 8f       	std	Z+31, r24	; 0x1f
    if (_deviceType == 00 ||
    27fe:	81 50       	subi	r24, 0x01	; 1
    2800:	8e 3f       	cpi	r24, 0xFE	; 254
    2802:	e0 f6       	brcc	.-72     	; 0x27bc <_ZN7RH_RF694initEv+0x20>
	return false;

    // Add by Adrien van den Bossche <vandenbo@univ-tlse2.fr> for Teensy
    // ARM M4 requires the below. else pin interrupt doesn't work properly.
    // On all other platforms, its innocuous, belt and braces
    pinMode(_interruptPin, INPUT);
    2804:	60 e0       	ldi	r22, 0x00	; 0
    2806:	f7 01       	movw	r30, r14
    2808:	84 8d       	ldd	r24, Z+28	; 0x1c
    280a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <pinMode>
    // Since there are a limited number of interrupt glue functions isr*() available,
    // we can only support a limited number of devices simultaneously
    // ON some devices, notably most Arduinos, the interrupt pin passed in is actuallt the
    // interrupt number. You have to figure out the interruptnumber-to-interruptpin mapping
    // yourself based on knwledge of what Arduino board you are running on.
    if (_myInterruptIndex == 0xff)
    280e:	f7 01       	movw	r30, r14
    2810:	85 8d       	ldd	r24, Z+29	; 0x1d
    2812:	8f 3f       	cpi	r24, 0xFF	; 255
    2814:	49 f4       	brne	.+18     	; 0x2828 <_ZN7RH_RF694initEv+0x8c>
    {
	// First run, no interrupt allocated yet
	if (_interruptCount <= RH_RF69_NUM_INTERRUPTS)
    2816:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <_ZN7RH_RF6915_interruptCountE>
    281a:	84 30       	cpi	r24, 0x04	; 4
    281c:	78 f6       	brcc	.-98     	; 0x27bc <_ZN7RH_RF694initEv+0x20>
	    _myInterruptIndex = _interruptCount++;
    281e:	91 e0       	ldi	r25, 0x01	; 1
    2820:	98 0f       	add	r25, r24
    2822:	90 93 51 04 	sts	0x0451, r25	; 0x800451 <_ZN7RH_RF6915_interruptCountE>
    2826:	85 8f       	std	Z+29, r24	; 0x1d
	else
	    return false; // Too many devices, not enough interrupt vectors
    }
    _deviceForInterrupt[_myInterruptIndex] = this;
    2828:	f7 01       	movw	r30, r14
    282a:	85 8d       	ldd	r24, Z+29	; 0x1d
    282c:	e8 2f       	mov	r30, r24
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	ee 0f       	add	r30, r30
    2832:	ff 1f       	adc	r31, r31
    2834:	ee 5a       	subi	r30, 0xAE	; 174
    2836:	fb 4f       	sbci	r31, 0xFB	; 251
    2838:	f1 82       	std	Z+1, r15	; 0x01
    283a:	e0 82       	st	Z, r14
    if (_myInterruptIndex == 0)
    283c:	81 11       	cpse	r24, r1
    283e:	05 c0       	rjmp	.+10     	; 0x284a <_ZN7RH_RF694initEv+0xae>
	attachInterrupt(interruptNumber, isr0, RISING);
    2840:	43 e0       	ldi	r20, 0x03	; 3
    2842:	50 e0       	ldi	r21, 0x00	; 0
    2844:	6d ef       	ldi	r22, 0xFD	; 253
    2846:	71 e1       	ldi	r23, 0x11	; 17
    2848:	0e c0       	rjmp	.+28     	; 0x2866 <_ZN7RH_RF694initEv+0xca>
    else if (_myInterruptIndex == 1)
    284a:	81 30       	cpi	r24, 0x01	; 1
    284c:	29 f4       	brne	.+10     	; 0x2858 <_ZN7RH_RF694initEv+0xbc>
	attachInterrupt(interruptNumber, isr1, RISING);
    284e:	43 e0       	ldi	r20, 0x03	; 3
    2850:	50 e0       	ldi	r21, 0x00	; 0
    2852:	66 e0       	ldi	r22, 0x06	; 6
    2854:	72 e1       	ldi	r23, 0x12	; 18
    2856:	07 c0       	rjmp	.+14     	; 0x2866 <_ZN7RH_RF694initEv+0xca>
    else if (_myInterruptIndex == 2)
    2858:	82 30       	cpi	r24, 0x02	; 2
    285a:	09 f0       	breq	.+2      	; 0x285e <_ZN7RH_RF694initEv+0xc2>
    285c:	af cf       	rjmp	.-162    	; 0x27bc <_ZN7RH_RF694initEv+0x20>
	attachInterrupt(interruptNumber, isr2, RISING);
    285e:	43 e0       	ldi	r20, 0x03	; 3
    2860:	50 e0       	ldi	r21, 0x00	; 0
    2862:	6f e0       	ldi	r22, 0x0F	; 15
    2864:	72 e1       	ldi	r23, 0x12	; 18
    2866:	81 2f       	mov	r24, r17
    2868:	0e 94 66 15 	call	0x2acc	; 0x2acc <attachInterrupt>
    else
	return false; // Too many devices, not enough interrupt vectors

    setModeIdle();
    286c:	c7 01       	movw	r24, r14
    286e:	0e 94 a3 11 	call	0x2346	; 0x2346 <_ZN7RH_RF6911setModeIdleEv>
    // 2 CRC CCITT octets computed on the header, length and data (this in the modem config data)
    // 0 to 60 bytes data
    // RSSI Threshold -114dBm
    // We dont use the RH_RF69s address filtering: instead we prepend our own headers to the beginning
    // of the RH_RF69 payload
    spiWrite(RH_RF69_REG_3C_FIFOTHRESH, RH_RF69_FIFOTHRESH_TXSTARTCONDITION_NOTEMPTY | 0x0f); // thresh 15 is default
    2872:	4f e8       	ldi	r20, 0x8F	; 143
    2874:	6c e3       	ldi	r22, 0x3C	; 60
    2876:	c7 01       	movw	r24, r14
    2878:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    // SYNCCONFIG is default. SyncSize is set later by setSyncWords()
//    spiWrite(RH_RF69_REG_2E_SYNCCONFIG, RH_RF69_SYNCCONFIG_SYNCON); // auto, tolerance 0
    // PAYLOADLENGTH is default
//    spiWrite(RH_RF69_REG_38_PAYLOADLENGTH, RH_RF69_FIFO_SIZE); // max size only for RX
    // PACKETCONFIG 2 is default
    spiWrite(RH_RF69_REG_6F_TESTDAGC, RH_RF69_TESTDAGC_CONTINUOUSDAGC_IMPROVED_LOWBETAOFF);
    287c:	40 e3       	ldi	r20, 0x30	; 48
    287e:	6f e6       	ldi	r22, 0x6F	; 111
    2880:	c7 01       	movw	r24, r14
    2882:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    // If high power boost set previously, disable it
    spiWrite(RH_RF69_REG_5A_TESTPA1, RH_RF69_TESTPA1_NORMAL);
    2886:	45 e5       	ldi	r20, 0x55	; 85
    2888:	6a e5       	ldi	r22, 0x5A	; 90
    288a:	c7 01       	movw	r24, r14
    288c:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF69_REG_5C_TESTPA2, RH_RF69_TESTPA2_NORMAL);
    2890:	40 e7       	ldi	r20, 0x70	; 112
    2892:	6c e5       	ldi	r22, 0x5C	; 92
    2894:	c7 01       	movw	r24, r14
    2896:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN11RHSPIDriver8spiWriteEhh>

    // The following can be changed later by the user if necessary.
    // Set up default configuration
    uint8_t syncwords[] = { 0x2d, 0xd4 };
    289a:	8d e2       	ldi	r24, 0x2D	; 45
    289c:	89 83       	std	Y+1, r24	; 0x01
    289e:	84 ed       	ldi	r24, 0xD4	; 212
    28a0:	8a 83       	std	Y+2, r24	; 0x02
    setSyncWords(syncwords, sizeof(syncwords)); // Same as RF22's
    28a2:	42 e0       	ldi	r20, 0x02	; 2
    28a4:	be 01       	movw	r22, r28
    28a6:	6f 5f       	subi	r22, 0xFF	; 255
    28a8:	7f 4f       	sbci	r23, 0xFF	; 255
    28aa:	c7 01       	movw	r24, r14
    28ac:	0e 94 80 13 	call	0x2700	; 0x2700 <_ZN7RH_RF6912setSyncWordsEPKhh>
    // Reasonably fast and reliable default speed and modulation
    setModemConfig(GFSK_Rb250Fd250);
    28b0:	62 e1       	ldi	r22, 0x12	; 18
    28b2:	c7 01       	movw	r24, r14
    28b4:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZN7RH_RF6914setModemConfigENS_17ModemConfigChoiceE>

    // 3 would be sufficient, but this is the same as RF22's
    setPreambleLength(4);
    28b8:	64 e0       	ldi	r22, 0x04	; 4
    28ba:	70 e0       	ldi	r23, 0x00	; 0
    28bc:	c7 01       	movw	r24, r14
    28be:	0e 94 6f 13 	call	0x26de	; 0x26de <_ZN7RH_RF6917setPreambleLengthEj>
    // An innocuous ISM frequency, same as RF22's
    setFrequency(434.0);
    28c2:	0d ec       	ldi	r16, 0xCD	; 205
    28c4:	1c ec       	ldi	r17, 0xCC	; 204
    28c6:	2c e4       	ldi	r18, 0x4C	; 76
    28c8:	3d e3       	ldi	r19, 0x3D	; 61
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	50 e0       	ldi	r21, 0x00	; 0
    28ce:	69 ed       	ldi	r22, 0xD9	; 217
    28d0:	73 e4       	ldi	r23, 0x43	; 67
    28d2:	c7 01       	movw	r24, r14
    28d4:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN7RH_RF6912setFrequencyEff>
    28d8:	c7 01       	movw	r24, r14
    28da:	0e 94 44 10 	call	0x2088	; 0x2088 <_ZN7RH_RF6916setEncryptionKeyEPh.part.4.constprop.5>
    // No encryption
    setEncryptionKey(NULL);
    // +13dBm, same as power-on default
    setTxPower(13);
    28de:	40 e0       	ldi	r20, 0x00	; 0
    28e0:	6d e0       	ldi	r22, 0x0D	; 13
    28e2:	c7 01       	movw	r24, r14
    28e4:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <_ZN7RH_RF6910setTxPowerEab>

    return true;
}
    28e8:	8d 2d       	mov	r24, r13
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	df 91       	pop	r29
    28f0:	cf 91       	pop	r28
    28f2:	1f 91       	pop	r17
    28f4:	0f 91       	pop	r16
    28f6:	ff 90       	pop	r15
    28f8:	ef 90       	pop	r14
    28fa:	df 90       	pop	r13
    28fc:	08 95       	ret

000028fe <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    28fe:	cf 93       	push	r28
  uint8_t sreg = SREG;
    2900:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    2902:	f8 94       	cli
  if (!initialized) {
    2904:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <_ZN8SPIClass11initializedE>
    2908:	81 11       	cpse	r24, r1
    290a:	27 c0       	rjmp	.+78     	; 0x295a <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    290c:	ee e8       	ldi	r30, 0x8E	; 142
    290e:	f1 e0       	ldi	r31, 0x01	; 1
    2910:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    2912:	ef e6       	ldi	r30, 0x6F	; 111
    2914:	f1 e0       	ldi	r31, 0x01	; 1
    2916:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    2918:	e8 2f       	mov	r30, r24
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	ee 0f       	add	r30, r30
    291e:	ff 1f       	adc	r31, r31
    2920:	e6 55       	subi	r30, 0x56	; 86
    2922:	fe 4f       	sbci	r31, 0xFE	; 254
    2924:	a5 91       	lpm	r26, Z+
    2926:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    2928:	ec 91       	ld	r30, X
    292a:	e9 23       	and	r30, r25
    292c:	21 f4       	brne	.+8      	; 0x2936 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    292e:	61 e0       	ldi	r22, 0x01	; 1
    2930:	81 e1       	ldi	r24, 0x11	; 17
    2932:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    2936:	61 e0       	ldi	r22, 0x01	; 1
    2938:	81 e1       	ldi	r24, 0x11	; 17
    293a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    293e:	8c b5       	in	r24, 0x2c	; 44
    2940:	80 61       	ori	r24, 0x10	; 16
    2942:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    2944:	8c b5       	in	r24, 0x2c	; 44
    2946:	80 64       	ori	r24, 0x40	; 64
    2948:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    294a:	61 e0       	ldi	r22, 0x01	; 1
    294c:	8f e0       	ldi	r24, 0x0F	; 15
    294e:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <pinMode>
    pinMode(MOSI, OUTPUT);
    2952:	61 e0       	ldi	r22, 0x01	; 1
    2954:	80 e1       	ldi	r24, 0x10	; 16
    2956:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <pinMode>
  }
  initialized++; // reference count
    295a:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <_ZN8SPIClass11initializedE>
    295e:	8f 5f       	subi	r24, 0xFF	; 255
    2960:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <_ZN8SPIClass11initializedE>
  SREG = sreg;
    2964:	cf bf       	out	0x3f, r28	; 63
}
    2966:	cf 91       	pop	r28
    2968:	08 95       	ret

0000296a <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  uint8_t sreg = SREG;
    296a:	9f b7       	in	r25, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    296c:	f8 94       	cli
  // Decrease the reference counter
  if (initialized)
    296e:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <_ZN8SPIClass11initializedE>
    2972:	88 23       	and	r24, r24
    2974:	19 f0       	breq	.+6      	; 0x297c <_ZN8SPIClass3endEv+0x12>
    initialized--;
    2976:	81 50       	subi	r24, 0x01	; 1
    2978:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <_ZN8SPIClass11initializedE>
  // If there are no more references disable SPI
  if (!initialized) {
    297c:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <_ZN8SPIClass11initializedE>
    2980:	81 11       	cpse	r24, r1
    2982:	05 c0       	rjmp	.+10     	; 0x298e <_ZN8SPIClass3endEv+0x24>
    SPCR &= ~_BV(SPE);
    2984:	8c b5       	in	r24, 0x2c	; 44
    2986:	8f 7b       	andi	r24, 0xBF	; 191
    2988:	8c bd       	out	0x2c, r24	; 44
    interruptMode = 0;
    298a:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <_ZN8SPIClass13interruptModeE>
    #ifdef SPI_TRANSACTION_MISMATCH_LED
    inTransactionFlag = 0;
    #endif
  }
  SREG = sreg;
    298e:	9f bf       	out	0x3f, r25	; 63
    2990:	08 95       	ret

00002992 <__cxa_pure_virtual>:
    2992:	0e 94 2b 1c 	call	0x3856	; 0x3856 <abort>

00002996 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2996:	08 95       	ret

00002998 <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    2998:	ef 92       	push	r14
    299a:	ff 92       	push	r15
    299c:	0f 93       	push	r16
    299e:	1f 93       	push	r17
    29a0:	cf 93       	push	r28
    29a2:	df 93       	push	r29
    29a4:	7b 01       	movw	r14, r22
    29a6:	fc 01       	movw	r30, r24
    29a8:	c2 81       	ldd	r28, Z+2	; 0x02
    29aa:	d3 81       	ldd	r29, Z+3	; 0x03
    29ac:	00 e0       	ldi	r16, 0x00	; 0
    29ae:	10 e0       	ldi	r17, 0x00	; 0
    29b0:	20 97       	sbiw	r28, 0x00	; 0
    29b2:	81 f0       	breq	.+32     	; 0x29d4 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    29b4:	e8 81       	ld	r30, Y
    29b6:	f9 81       	ldd	r31, Y+1	; 0x01
    29b8:	02 80       	ldd	r0, Z+2	; 0x02
    29ba:	f3 81       	ldd	r31, Z+3	; 0x03
    29bc:	e0 2d       	mov	r30, r0
    29be:	b7 01       	movw	r22, r14
    29c0:	ce 01       	movw	r24, r28
    29c2:	09 95       	icall
    29c4:	97 fd       	sbrc	r25, 7
    29c6:	08 c0       	rjmp	.+16     	; 0x29d8 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    29c8:	08 0f       	add	r16, r24
    29ca:	19 1f       	adc	r17, r25
    29cc:	08 84       	ldd	r0, Y+8	; 0x08
    29ce:	d9 85       	ldd	r29, Y+9	; 0x09
    29d0:	c0 2d       	mov	r28, r0
    29d2:	ee cf       	rjmp	.-36     	; 0x29b0 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    29d4:	c8 01       	movw	r24, r16
    29d6:	02 c0       	rjmp	.+4      	; 0x29dc <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    29d8:	8f ef       	ldi	r24, 0xFF	; 255
    29da:	9f ef       	ldi	r25, 0xFF	; 255
    29dc:	df 91       	pop	r29
    29de:	cf 91       	pop	r28
    29e0:	1f 91       	pop	r17
    29e2:	0f 91       	pop	r16
    29e4:	ff 90       	pop	r15
    29e6:	ef 90       	pop	r14
    29e8:	08 95       	ret

000029ea <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    29ea:	0f 93       	push	r16
    29ec:	1f 93       	push	r17
    29ee:	cf 93       	push	r28
    29f0:	df 93       	push	r29
    29f2:	8b 01       	movw	r16, r22
    29f4:	fc 01       	movw	r30, r24
    29f6:	c2 81       	ldd	r28, Z+2	; 0x02
    29f8:	d3 81       	ldd	r29, Z+3	; 0x03
    29fa:	20 97       	sbiw	r28, 0x00	; 0
    29fc:	71 f0       	breq	.+28     	; 0x2a1a <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    29fe:	e8 81       	ld	r30, Y
    2a00:	f9 81       	ldd	r31, Y+1	; 0x01
    2a02:	04 80       	ldd	r0, Z+4	; 0x04
    2a04:	f5 81       	ldd	r31, Z+5	; 0x05
    2a06:	e0 2d       	mov	r30, r0
    2a08:	b8 01       	movw	r22, r16
    2a0a:	ce 01       	movw	r24, r28
    2a0c:	09 95       	icall
    2a0e:	00 97       	sbiw	r24, 0x00	; 0
    2a10:	31 f4       	brne	.+12     	; 0x2a1e <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    2a12:	08 84       	ldd	r0, Y+8	; 0x08
    2a14:	d9 85       	ldd	r29, Y+9	; 0x09
    2a16:	c0 2d       	mov	r28, r0
    2a18:	f0 cf       	rjmp	.-32     	; 0x29fa <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	df 91       	pop	r29
    2a20:	cf 91       	pop	r28
    2a22:	1f 91       	pop	r17
    2a24:	0f 91       	pop	r16
    2a26:	08 95       	ret

00002a28 <_ZN13PluggableUSB_12getShortNameEPc>:
    2a28:	0f 93       	push	r16
    2a2a:	1f 93       	push	r17
    2a2c:	cf 93       	push	r28
    2a2e:	df 93       	push	r29
    2a30:	8b 01       	movw	r16, r22
    2a32:	fc 01       	movw	r30, r24
    2a34:	c2 81       	ldd	r28, Z+2	; 0x02
    2a36:	d3 81       	ldd	r29, Z+3	; 0x03
    2a38:	20 97       	sbiw	r28, 0x00	; 0
    2a3a:	71 f0       	breq	.+28     	; 0x2a58 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    2a3c:	e8 81       	ld	r30, Y
    2a3e:	f9 81       	ldd	r31, Y+1	; 0x01
    2a40:	06 80       	ldd	r0, Z+6	; 0x06
    2a42:	f7 81       	ldd	r31, Z+7	; 0x07
    2a44:	e0 2d       	mov	r30, r0
    2a46:	b8 01       	movw	r22, r16
    2a48:	ce 01       	movw	r24, r28
    2a4a:	09 95       	icall
    2a4c:	08 0f       	add	r16, r24
    2a4e:	11 1d       	adc	r17, r1
    2a50:	08 84       	ldd	r0, Y+8	; 0x08
    2a52:	d9 85       	ldd	r29, Y+9	; 0x09
    2a54:	c0 2d       	mov	r28, r0
    2a56:	f0 cf       	rjmp	.-32     	; 0x2a38 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    2a58:	f8 01       	movw	r30, r16
    2a5a:	10 82       	st	Z, r1
    2a5c:	df 91       	pop	r29
    2a5e:	cf 91       	pop	r28
    2a60:	1f 91       	pop	r17
    2a62:	0f 91       	pop	r16
    2a64:	08 95       	ret

00002a66 <_ZN13PluggableUSB_5setupER8USBSetup>:
    2a66:	0f 93       	push	r16
    2a68:	1f 93       	push	r17
    2a6a:	cf 93       	push	r28
    2a6c:	df 93       	push	r29
    2a6e:	8b 01       	movw	r16, r22
    2a70:	fc 01       	movw	r30, r24
    2a72:	c2 81       	ldd	r28, Z+2	; 0x02
    2a74:	d3 81       	ldd	r29, Z+3	; 0x03
    2a76:	20 97       	sbiw	r28, 0x00	; 0
    2a78:	71 f0       	breq	.+28     	; 0x2a96 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    2a7a:	e8 81       	ld	r30, Y
    2a7c:	f9 81       	ldd	r31, Y+1	; 0x01
    2a7e:	01 90       	ld	r0, Z+
    2a80:	f0 81       	ld	r31, Z
    2a82:	e0 2d       	mov	r30, r0
    2a84:	b8 01       	movw	r22, r16
    2a86:	ce 01       	movw	r24, r28
    2a88:	09 95       	icall
    2a8a:	81 11       	cpse	r24, r1
    2a8c:	05 c0       	rjmp	.+10     	; 0x2a98 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    2a8e:	08 84       	ldd	r0, Y+8	; 0x08
    2a90:	d9 85       	ldd	r29, Y+9	; 0x09
    2a92:	c0 2d       	mov	r28, r0
    2a94:	f0 cf       	rjmp	.-32     	; 0x2a76 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	df 91       	pop	r29
    2a9a:	cf 91       	pop	r28
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	08 95       	ret

00002aa2 <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    2aa2:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <_ZGVZ12PluggableUSBvE3obj>
    2aa6:	81 11       	cpse	r24, r1
    2aa8:	0d c0       	rjmp	.+26     	; 0x2ac4 <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    2aaa:	82 e0       	ldi	r24, 0x02	; 2
    2aac:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <_ZZ12PluggableUSBvE3obj>
    2ab0:	84 e0       	ldi	r24, 0x04	; 4
    2ab2:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <_ZZ12PluggableUSBvE3obj+0x1>
    2ab6:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <_ZZ12PluggableUSBvE3obj+0x3>
    2aba:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    2ac4:	8c e5       	ldi	r24, 0x5C	; 92
    2ac6:	94 e0       	ldi	r25, 0x04	; 4
    2ac8:	08 95       	ret

00002aca <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    2aca:	08 95       	ret

00002acc <attachInterrupt>:
    2acc:	85 30       	cpi	r24, 0x05	; 5
    2ace:	08 f0       	brcs	.+2      	; 0x2ad2 <attachInterrupt+0x6>
    2ad0:	4c c0       	rjmp	.+152    	; 0x2b6a <attachInterrupt+0x9e>
    2ad2:	e8 2f       	mov	r30, r24
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	ee 0f       	add	r30, r30
    2ad8:	ff 1f       	adc	r31, r31
    2ada:	e3 5e       	subi	r30, 0xE3	; 227
    2adc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ade:	71 83       	std	Z+1, r23	; 0x01
    2ae0:	60 83       	st	Z, r22
    2ae2:	82 30       	cpi	r24, 0x02	; 2
    2ae4:	e1 f0       	breq	.+56     	; 0x2b1e <attachInterrupt+0x52>
    2ae6:	18 f4       	brcc	.+6      	; 0x2aee <attachInterrupt+0x22>
    2ae8:	81 30       	cpi	r24, 0x01	; 1
    2aea:	69 f0       	breq	.+26     	; 0x2b06 <attachInterrupt+0x3a>
    2aec:	04 c0       	rjmp	.+8      	; 0x2af6 <attachInterrupt+0x2a>
    2aee:	83 30       	cpi	r24, 0x03	; 3
    2af0:	19 f1       	breq	.+70     	; 0x2b38 <attachInterrupt+0x6c>
    2af2:	84 30       	cpi	r24, 0x04	; 4
    2af4:	71 f1       	breq	.+92     	; 0x2b52 <attachInterrupt+0x86>
    2af6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2afa:	8c 7f       	andi	r24, 0xFC	; 252
    2afc:	48 2b       	or	r20, r24
    2afe:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2b02:	e8 9a       	sbi	0x1d, 0	; 29
    2b04:	08 95       	ret
    2b06:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2b0a:	83 7f       	andi	r24, 0xF3	; 243
    2b0c:	44 0f       	add	r20, r20
    2b0e:	55 1f       	adc	r21, r21
    2b10:	44 0f       	add	r20, r20
    2b12:	55 1f       	adc	r21, r21
    2b14:	48 2b       	or	r20, r24
    2b16:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2b1a:	e9 9a       	sbi	0x1d, 1	; 29
    2b1c:	08 95       	ret
    2b1e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2b22:	8f 7c       	andi	r24, 0xCF	; 207
    2b24:	34 e0       	ldi	r19, 0x04	; 4
    2b26:	44 0f       	add	r20, r20
    2b28:	55 1f       	adc	r21, r21
    2b2a:	3a 95       	dec	r19
    2b2c:	e1 f7       	brne	.-8      	; 0x2b26 <attachInterrupt+0x5a>
    2b2e:	48 2b       	or	r20, r24
    2b30:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2b34:	ea 9a       	sbi	0x1d, 2	; 29
    2b36:	08 95       	ret
    2b38:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2b3c:	8f 73       	andi	r24, 0x3F	; 63
    2b3e:	26 e0       	ldi	r18, 0x06	; 6
    2b40:	44 0f       	add	r20, r20
    2b42:	55 1f       	adc	r21, r21
    2b44:	2a 95       	dec	r18
    2b46:	e1 f7       	brne	.-8      	; 0x2b40 <attachInterrupt+0x74>
    2b48:	48 2b       	or	r20, r24
    2b4a:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
    2b4e:	eb 9a       	sbi	0x1d, 3	; 29
    2b50:	08 95       	ret
    2b52:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f806a>
    2b56:	8f 7c       	andi	r24, 0xCF	; 207
    2b58:	94 e0       	ldi	r25, 0x04	; 4
    2b5a:	44 0f       	add	r20, r20
    2b5c:	55 1f       	adc	r21, r21
    2b5e:	9a 95       	dec	r25
    2b60:	e1 f7       	brne	.-8      	; 0x2b5a <attachInterrupt+0x8e>
    2b62:	48 2b       	or	r20, r24
    2b64:	40 93 6a 00 	sts	0x006A, r20	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f806a>
    2b68:	ee 9a       	sbi	0x1d, 6	; 29
    2b6a:	08 95       	ret

00002b6c <__vector_1>:
    intFunc[interrupt](); \
  }

#if defined(__AVR_ATmega32U4__)

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    2b6c:	1f 92       	push	r1
    2b6e:	0f 92       	push	r0
    2b70:	0f b6       	in	r0, 0x3f	; 63
    2b72:	0f 92       	push	r0
    2b74:	11 24       	eor	r1, r1
    2b76:	2f 93       	push	r18
    2b78:	3f 93       	push	r19
    2b7a:	4f 93       	push	r20
    2b7c:	5f 93       	push	r21
    2b7e:	6f 93       	push	r22
    2b80:	7f 93       	push	r23
    2b82:	8f 93       	push	r24
    2b84:	9f 93       	push	r25
    2b86:	af 93       	push	r26
    2b88:	bf 93       	push	r27
    2b8a:	ef 93       	push	r30
    2b8c:	ff 93       	push	r31
    2b8e:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <intFunc>
    2b92:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <intFunc+0x1>
    2b96:	09 95       	icall
    2b98:	ff 91       	pop	r31
    2b9a:	ef 91       	pop	r30
    2b9c:	bf 91       	pop	r27
    2b9e:	af 91       	pop	r26
    2ba0:	9f 91       	pop	r25
    2ba2:	8f 91       	pop	r24
    2ba4:	7f 91       	pop	r23
    2ba6:	6f 91       	pop	r22
    2ba8:	5f 91       	pop	r21
    2baa:	4f 91       	pop	r20
    2bac:	3f 91       	pop	r19
    2bae:	2f 91       	pop	r18
    2bb0:	0f 90       	pop	r0
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	0f 90       	pop	r0
    2bb6:	1f 90       	pop	r1
    2bb8:	18 95       	reti

00002bba <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    2bba:	1f 92       	push	r1
    2bbc:	0f 92       	push	r0
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	0f 92       	push	r0
    2bc2:	11 24       	eor	r1, r1
    2bc4:	2f 93       	push	r18
    2bc6:	3f 93       	push	r19
    2bc8:	4f 93       	push	r20
    2bca:	5f 93       	push	r21
    2bcc:	6f 93       	push	r22
    2bce:	7f 93       	push	r23
    2bd0:	8f 93       	push	r24
    2bd2:	9f 93       	push	r25
    2bd4:	af 93       	push	r26
    2bd6:	bf 93       	push	r27
    2bd8:	ef 93       	push	r30
    2bda:	ff 93       	push	r31
    2bdc:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <intFunc+0x2>
    2be0:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <intFunc+0x3>
    2be4:	09 95       	icall
    2be6:	ff 91       	pop	r31
    2be8:	ef 91       	pop	r30
    2bea:	bf 91       	pop	r27
    2bec:	af 91       	pop	r26
    2bee:	9f 91       	pop	r25
    2bf0:	8f 91       	pop	r24
    2bf2:	7f 91       	pop	r23
    2bf4:	6f 91       	pop	r22
    2bf6:	5f 91       	pop	r21
    2bf8:	4f 91       	pop	r20
    2bfa:	3f 91       	pop	r19
    2bfc:	2f 91       	pop	r18
    2bfe:	0f 90       	pop	r0
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	0f 90       	pop	r0
    2c04:	1f 90       	pop	r1
    2c06:	18 95       	reti

00002c08 <__vector_3>:
IMPLEMENT_ISR(INT2_vect, EXTERNAL_INT_2)
    2c08:	1f 92       	push	r1
    2c0a:	0f 92       	push	r0
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	0f 92       	push	r0
    2c10:	11 24       	eor	r1, r1
    2c12:	2f 93       	push	r18
    2c14:	3f 93       	push	r19
    2c16:	4f 93       	push	r20
    2c18:	5f 93       	push	r21
    2c1a:	6f 93       	push	r22
    2c1c:	7f 93       	push	r23
    2c1e:	8f 93       	push	r24
    2c20:	9f 93       	push	r25
    2c22:	af 93       	push	r26
    2c24:	bf 93       	push	r27
    2c26:	ef 93       	push	r30
    2c28:	ff 93       	push	r31
    2c2a:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <intFunc+0x4>
    2c2e:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <intFunc+0x5>
    2c32:	09 95       	icall
    2c34:	ff 91       	pop	r31
    2c36:	ef 91       	pop	r30
    2c38:	bf 91       	pop	r27
    2c3a:	af 91       	pop	r26
    2c3c:	9f 91       	pop	r25
    2c3e:	8f 91       	pop	r24
    2c40:	7f 91       	pop	r23
    2c42:	6f 91       	pop	r22
    2c44:	5f 91       	pop	r21
    2c46:	4f 91       	pop	r20
    2c48:	3f 91       	pop	r19
    2c4a:	2f 91       	pop	r18
    2c4c:	0f 90       	pop	r0
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	0f 90       	pop	r0
    2c52:	1f 90       	pop	r1
    2c54:	18 95       	reti

00002c56 <__vector_4>:
IMPLEMENT_ISR(INT3_vect, EXTERNAL_INT_3)
    2c56:	1f 92       	push	r1
    2c58:	0f 92       	push	r0
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	0f 92       	push	r0
    2c5e:	11 24       	eor	r1, r1
    2c60:	2f 93       	push	r18
    2c62:	3f 93       	push	r19
    2c64:	4f 93       	push	r20
    2c66:	5f 93       	push	r21
    2c68:	6f 93       	push	r22
    2c6a:	7f 93       	push	r23
    2c6c:	8f 93       	push	r24
    2c6e:	9f 93       	push	r25
    2c70:	af 93       	push	r26
    2c72:	bf 93       	push	r27
    2c74:	ef 93       	push	r30
    2c76:	ff 93       	push	r31
    2c78:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <intFunc+0x6>
    2c7c:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <intFunc+0x7>
    2c80:	09 95       	icall
    2c82:	ff 91       	pop	r31
    2c84:	ef 91       	pop	r30
    2c86:	bf 91       	pop	r27
    2c88:	af 91       	pop	r26
    2c8a:	9f 91       	pop	r25
    2c8c:	8f 91       	pop	r24
    2c8e:	7f 91       	pop	r23
    2c90:	6f 91       	pop	r22
    2c92:	5f 91       	pop	r21
    2c94:	4f 91       	pop	r20
    2c96:	3f 91       	pop	r19
    2c98:	2f 91       	pop	r18
    2c9a:	0f 90       	pop	r0
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	0f 90       	pop	r0
    2ca0:	1f 90       	pop	r1
    2ca2:	18 95       	reti

00002ca4 <__vector_7>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_4)
    2ca4:	1f 92       	push	r1
    2ca6:	0f 92       	push	r0
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	0f 92       	push	r0
    2cac:	11 24       	eor	r1, r1
    2cae:	2f 93       	push	r18
    2cb0:	3f 93       	push	r19
    2cb2:	4f 93       	push	r20
    2cb4:	5f 93       	push	r21
    2cb6:	6f 93       	push	r22
    2cb8:	7f 93       	push	r23
    2cba:	8f 93       	push	r24
    2cbc:	9f 93       	push	r25
    2cbe:	af 93       	push	r26
    2cc0:	bf 93       	push	r27
    2cc2:	ef 93       	push	r30
    2cc4:	ff 93       	push	r31
    2cc6:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <intFunc+0x8>
    2cca:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <intFunc+0x9>
    2cce:	09 95       	icall
    2cd0:	ff 91       	pop	r31
    2cd2:	ef 91       	pop	r30
    2cd4:	bf 91       	pop	r27
    2cd6:	af 91       	pop	r26
    2cd8:	9f 91       	pop	r25
    2cda:	8f 91       	pop	r24
    2cdc:	7f 91       	pop	r23
    2cde:	6f 91       	pop	r22
    2ce0:	5f 91       	pop	r21
    2ce2:	4f 91       	pop	r20
    2ce4:	3f 91       	pop	r19
    2ce6:	2f 91       	pop	r18
    2ce8:	0f 90       	pop	r0
    2cea:	0f be       	out	0x3f, r0	; 63
    2cec:	0f 90       	pop	r0
    2cee:	1f 90       	pop	r1
    2cf0:	18 95       	reti

00002cf2 <_Z6randoml>:
    srandom(seed);
  }
}

long random(long howbig)
{
    2cf2:	cf 92       	push	r12
    2cf4:	df 92       	push	r13
    2cf6:	ef 92       	push	r14
    2cf8:	ff 92       	push	r15
  if (howbig == 0) {
    2cfa:	61 15       	cp	r22, r1
    2cfc:	71 05       	cpc	r23, r1
    2cfe:	81 05       	cpc	r24, r1
    2d00:	91 05       	cpc	r25, r1
    2d02:	49 f0       	breq	.+18     	; 0x2d16 <_Z6randoml+0x24>
    2d04:	6b 01       	movw	r12, r22
    2d06:	7c 01       	movw	r14, r24
    return 0;
  }
  return random() % howbig;
    2d08:	0e 94 0e 1b 	call	0x361c	; 0x361c <random>
    2d0c:	a7 01       	movw	r20, r14
    2d0e:	96 01       	movw	r18, r12
    2d10:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__divmodsi4>
    2d14:	03 c0       	rjmp	.+6      	; 0x2d1c <_Z6randoml+0x2a>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
    2d16:	60 e0       	ldi	r22, 0x00	; 0
    2d18:	70 e0       	ldi	r23, 0x00	; 0
    2d1a:	cb 01       	movw	r24, r22
  }
  return random() % howbig;
}
    2d1c:	ff 90       	pop	r15
    2d1e:	ef 90       	pop	r14
    2d20:	df 90       	pop	r13
    2d22:	cf 90       	pop	r12
    2d24:	08 95       	ret

00002d26 <_Z6randomll>:

long random(long howsmall, long howbig)
{
    2d26:	cf 92       	push	r12
    2d28:	df 92       	push	r13
    2d2a:	ef 92       	push	r14
    2d2c:	ff 92       	push	r15
    2d2e:	0f 93       	push	r16
    2d30:	1f 93       	push	r17
  if (howsmall >= howbig) {
    2d32:	62 17       	cp	r22, r18
    2d34:	73 07       	cpc	r23, r19
    2d36:	84 07       	cpc	r24, r20
    2d38:	95 07       	cpc	r25, r21
    2d3a:	84 f4       	brge	.+32     	; 0x2d5c <_Z6randomll+0x36>
    2d3c:	89 01       	movw	r16, r18
    2d3e:	9a 01       	movw	r18, r20
    2d40:	6b 01       	movw	r12, r22
    2d42:	7c 01       	movw	r14, r24
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
    2d44:	c9 01       	movw	r24, r18
    2d46:	b8 01       	movw	r22, r16
    2d48:	6c 19       	sub	r22, r12
    2d4a:	7d 09       	sbc	r23, r13
    2d4c:	8e 09       	sbc	r24, r14
    2d4e:	9f 09       	sbc	r25, r15
    2d50:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <_Z6randoml>
    2d54:	6c 0d       	add	r22, r12
    2d56:	7d 1d       	adc	r23, r13
    2d58:	8e 1d       	adc	r24, r14
    2d5a:	9f 1d       	adc	r25, r15
}
    2d5c:	1f 91       	pop	r17
    2d5e:	0f 91       	pop	r16
    2d60:	ff 90       	pop	r15
    2d62:	ef 90       	pop	r14
    2d64:	df 90       	pop	r13
    2d66:	cf 90       	pop	r12
    2d68:	08 95       	ret

00002d6a <_ZN12RHGenericSPI15attachInterruptEv>:
    virtual uint8_t transfer(uint8_t data) = 0;

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
    2d6a:	08 95       	ret

00002d6c <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
    2d6c:	08 95       	ret

00002d6e <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
    2d6e:	08 95       	ret

00002d70 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
    2d70:	08 95       	ret

00002d72 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Tells the SPI support software that SPI transactions will occur with the interrupt
    /// handler assocated with interruptNumber
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){}
    2d72:	08 95       	ret

00002d74 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
    2d74:	fc 01       	movw	r30, r24
    2d76:	63 83       	std	Z+3, r22	; 0x03
    2d78:	08 95       	ret

00002d7a <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:
}

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	64 83       	std	Z+4, r22	; 0x04
    2d7e:	08 95       	ret

00002d80 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:
}

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
    2d80:	fc 01       	movw	r30, r24
    2d82:	62 83       	std	Z+2, r22	; 0x02
    2d84:	08 95       	ret

00002d86 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
// Contributed by Joanna Rutkowska
// $Id: RHGenericSPI.cpp,v 1.2 2014/04/12 05:26:05 mikem Exp $

#include <RHGenericSPI.h>

RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
    2d86:	fc 01       	movw	r30, r24
    :
    _frequency(frequency),
    _bitOrder(bitOrder),
    _dataMode(dataMode)
    2d88:	84 e9       	ldi	r24, 0x94	; 148
    2d8a:	92 e0       	ldi	r25, 0x02	; 2
    2d8c:	91 83       	std	Z+1, r25	; 0x01
    2d8e:	80 83       	st	Z, r24
    2d90:	62 83       	std	Z+2, r22	; 0x02
    2d92:	43 83       	std	Z+3, r20	; 0x03
    2d94:	24 83       	std	Z+4, r18	; 0x04
    2d96:	08 95       	ret

00002d98 <_ZN11RHSPIDriver4initEv>:
    return status;
}

void RHSPIDriver::setSlaveSelectPin(uint8_t slaveSelectPin)
{
    _slaveSelectPin = slaveSelectPin;
    2d98:	cf 93       	push	r28
    2d9a:	df 93       	push	r29
    2d9c:	ec 01       	movw	r28, r24
    2d9e:	88 8d       	ldd	r24, Y+24	; 0x18
    2da0:	99 8d       	ldd	r25, Y+25	; 0x19
    2da2:	dc 01       	movw	r26, r24
    2da4:	ed 91       	ld	r30, X+
    2da6:	fc 91       	ld	r31, X
    2da8:	06 80       	ldd	r0, Z+6	; 0x06
    2daa:	f7 81       	ldd	r31, Z+7	; 0x07
    2dac:	e0 2d       	mov	r30, r0
    2dae:	09 95       	icall
    2db0:	61 e0       	ldi	r22, 0x01	; 1
    2db2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2db4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <pinMode>
    2db8:	61 e0       	ldi	r22, 0x01	; 1
    2dba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2dbc:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <digitalWrite>
    2dc0:	64 e6       	ldi	r22, 0x64	; 100
    2dc2:	70 e0       	ldi	r23, 0x00	; 0
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	0e 94 42 0c 	call	0x1884	; 0x1884 <delay>
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	df 91       	pop	r29
    2dd0:	cf 91       	pop	r28
    2dd2:	08 95       	ret

00002dd4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
    2dd4:	ef 92       	push	r14
    2dd6:	ff 92       	push	r15
    2dd8:	1f 93       	push	r17
    2dda:	cf 93       	push	r28
    2ddc:	df 93       	push	r29
    2dde:	ec 01       	movw	r28, r24
    2de0:	16 2f       	mov	r17, r22
    2de2:	7a 01       	movw	r14, r20
    2de4:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <_ZN15RHGenericDriverC1Ev>
    2de8:	8e ea       	ldi	r24, 0xAE	; 174
    2dea:	92 e0       	ldi	r25, 0x02	; 2
    2dec:	99 83       	std	Y+1, r25	; 0x01
    2dee:	88 83       	st	Y, r24
    2df0:	f9 8e       	std	Y+25, r15	; 0x19
    2df2:	e8 8e       	std	Y+24, r14	; 0x18
    2df4:	1a 8f       	std	Y+26, r17	; 0x1a
    2df6:	df 91       	pop	r29
    2df8:	cf 91       	pop	r28
    2dfa:	1f 91       	pop	r17
    2dfc:	ff 90       	pop	r15
    2dfe:	ef 90       	pop	r14
    2e00:	08 95       	ret

00002e02 <_ZN11RHSPIDriver7spiReadEh>:
    2e02:	0f 93       	push	r16
    2e04:	1f 93       	push	r17
    2e06:	cf 93       	push	r28
    2e08:	df 93       	push	r29
    2e0a:	ec 01       	movw	r28, r24
    2e0c:	16 2f       	mov	r17, r22
    2e0e:	0f b7       	in	r16, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	88 8d       	ldd	r24, Y+24	; 0x18
    2e14:	99 8d       	ldd	r25, Y+25	; 0x19
    2e16:	dc 01       	movw	r26, r24
    2e18:	ed 91       	ld	r30, X+
    2e1a:	fc 91       	ld	r31, X
    2e1c:	00 88       	ldd	r0, Z+16	; 0x10
    2e1e:	f1 89       	ldd	r31, Z+17	; 0x11
    2e20:	e0 2d       	mov	r30, r0
    2e22:	09 95       	icall
    2e24:	60 e0       	ldi	r22, 0x00	; 0
    2e26:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e28:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <digitalWrite>
    2e2c:	88 8d       	ldd	r24, Y+24	; 0x18
    2e2e:	99 8d       	ldd	r25, Y+25	; 0x19
    2e30:	61 2f       	mov	r22, r17
    2e32:	6f 77       	andi	r22, 0x7F	; 127
    2e34:	dc 01       	movw	r26, r24
    2e36:	ed 91       	ld	r30, X+
    2e38:	fc 91       	ld	r31, X
    2e3a:	01 90       	ld	r0, Z+
    2e3c:	f0 81       	ld	r31, Z
    2e3e:	e0 2d       	mov	r30, r0
    2e40:	09 95       	icall
    2e42:	88 8d       	ldd	r24, Y+24	; 0x18
    2e44:	99 8d       	ldd	r25, Y+25	; 0x19
    2e46:	dc 01       	movw	r26, r24
    2e48:	ed 91       	ld	r30, X+
    2e4a:	fc 91       	ld	r31, X
    2e4c:	01 90       	ld	r0, Z+
    2e4e:	f0 81       	ld	r31, Z
    2e50:	e0 2d       	mov	r30, r0
    2e52:	60 e0       	ldi	r22, 0x00	; 0
    2e54:	09 95       	icall
    2e56:	18 2f       	mov	r17, r24
    2e58:	61 e0       	ldi	r22, 0x01	; 1
    2e5a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e5c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <digitalWrite>
    2e60:	88 8d       	ldd	r24, Y+24	; 0x18
    2e62:	99 8d       	ldd	r25, Y+25	; 0x19
    2e64:	dc 01       	movw	r26, r24
    2e66:	ed 91       	ld	r30, X+
    2e68:	fc 91       	ld	r31, X
    2e6a:	02 88       	ldd	r0, Z+18	; 0x12
    2e6c:	f3 89       	ldd	r31, Z+19	; 0x13
    2e6e:	e0 2d       	mov	r30, r0
    2e70:	09 95       	icall
    2e72:	0f bf       	out	0x3f, r16	; 63
    2e74:	81 2f       	mov	r24, r17
    2e76:	df 91       	pop	r29
    2e78:	cf 91       	pop	r28
    2e7a:	1f 91       	pop	r17
    2e7c:	0f 91       	pop	r16
    2e7e:	08 95       	ret

00002e80 <_ZN11RHSPIDriver8spiWriteEhh>:
    2e80:	ff 92       	push	r15
    2e82:	0f 93       	push	r16
    2e84:	1f 93       	push	r17
    2e86:	cf 93       	push	r28
    2e88:	df 93       	push	r29
    2e8a:	ec 01       	movw	r28, r24
    2e8c:	16 2f       	mov	r17, r22
    2e8e:	f4 2e       	mov	r15, r20
    2e90:	0f b7       	in	r16, 0x3f	; 63
    2e92:	f8 94       	cli
    2e94:	88 8d       	ldd	r24, Y+24	; 0x18
    2e96:	99 8d       	ldd	r25, Y+25	; 0x19
    2e98:	dc 01       	movw	r26, r24
    2e9a:	ed 91       	ld	r30, X+
    2e9c:	fc 91       	ld	r31, X
    2e9e:	00 88       	ldd	r0, Z+16	; 0x10
    2ea0:	f1 89       	ldd	r31, Z+17	; 0x11
    2ea2:	e0 2d       	mov	r30, r0
    2ea4:	09 95       	icall
    2ea6:	60 e0       	ldi	r22, 0x00	; 0
    2ea8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2eaa:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <digitalWrite>
    2eae:	88 8d       	ldd	r24, Y+24	; 0x18
    2eb0:	99 8d       	ldd	r25, Y+25	; 0x19
    2eb2:	61 2f       	mov	r22, r17
    2eb4:	60 68       	ori	r22, 0x80	; 128
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	ed 91       	ld	r30, X+
    2eba:	fc 91       	ld	r31, X
    2ebc:	01 90       	ld	r0, Z+
    2ebe:	f0 81       	ld	r31, Z
    2ec0:	e0 2d       	mov	r30, r0
    2ec2:	09 95       	icall
    2ec4:	18 2f       	mov	r17, r24
    2ec6:	88 8d       	ldd	r24, Y+24	; 0x18
    2ec8:	99 8d       	ldd	r25, Y+25	; 0x19
    2eca:	dc 01       	movw	r26, r24
    2ecc:	ed 91       	ld	r30, X+
    2ece:	fc 91       	ld	r31, X
    2ed0:	01 90       	ld	r0, Z+
    2ed2:	f0 81       	ld	r31, Z
    2ed4:	e0 2d       	mov	r30, r0
    2ed6:	6f 2d       	mov	r22, r15
    2ed8:	09 95       	icall
    2eda:	61 e0       	ldi	r22, 0x01	; 1
    2edc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ede:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <digitalWrite>
    2ee2:	88 8d       	ldd	r24, Y+24	; 0x18
    2ee4:	99 8d       	ldd	r25, Y+25	; 0x19
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	ed 91       	ld	r30, X+
    2eea:	fc 91       	ld	r31, X
    2eec:	02 88       	ldd	r0, Z+18	; 0x12
    2eee:	f3 89       	ldd	r31, Z+19	; 0x13
    2ef0:	e0 2d       	mov	r30, r0
    2ef2:	09 95       	icall
    2ef4:	0f bf       	out	0x3f, r16	; 63
    2ef6:	81 2f       	mov	r24, r17
    2ef8:	df 91       	pop	r29
    2efa:	cf 91       	pop	r28
    2efc:	1f 91       	pop	r17
    2efe:	0f 91       	pop	r16
    2f00:	ff 90       	pop	r15
    2f02:	08 95       	ret

00002f04 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
    2f04:	bf 92       	push	r11
    2f06:	cf 92       	push	r12
    2f08:	df 92       	push	r13
    2f0a:	ef 92       	push	r14
    2f0c:	ff 92       	push	r15
    2f0e:	0f 93       	push	r16
    2f10:	1f 93       	push	r17
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
    2f16:	ec 01       	movw	r28, r24
    2f18:	06 2f       	mov	r16, r22
    2f1a:	b4 2e       	mov	r11, r20
    2f1c:	c5 2e       	mov	r12, r21
    2f1e:	12 2f       	mov	r17, r18
    2f20:	df b6       	in	r13, 0x3f	; 63
    2f22:	f8 94       	cli
    2f24:	88 8d       	ldd	r24, Y+24	; 0x18
    2f26:	99 8d       	ldd	r25, Y+25	; 0x19
    2f28:	dc 01       	movw	r26, r24
    2f2a:	ed 91       	ld	r30, X+
    2f2c:	fc 91       	ld	r31, X
    2f2e:	00 88       	ldd	r0, Z+16	; 0x10
    2f30:	f1 89       	ldd	r31, Z+17	; 0x11
    2f32:	e0 2d       	mov	r30, r0
    2f34:	09 95       	icall
    2f36:	60 e0       	ldi	r22, 0x00	; 0
    2f38:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f3a:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <digitalWrite>
    2f3e:	88 8d       	ldd	r24, Y+24	; 0x18
    2f40:	99 8d       	ldd	r25, Y+25	; 0x19
    2f42:	60 2f       	mov	r22, r16
    2f44:	60 68       	ori	r22, 0x80	; 128
    2f46:	dc 01       	movw	r26, r24
    2f48:	ed 91       	ld	r30, X+
    2f4a:	fc 91       	ld	r31, X
    2f4c:	01 90       	ld	r0, Z+
    2f4e:	f0 81       	ld	r31, Z
    2f50:	e0 2d       	mov	r30, r0
    2f52:	09 95       	icall
    2f54:	08 2f       	mov	r16, r24
    2f56:	eb 2c       	mov	r14, r11
    2f58:	fc 2c       	mov	r15, r12
    2f5a:	11 23       	and	r17, r17
    2f5c:	71 f0       	breq	.+28     	; 0x2f7a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x76>
    2f5e:	88 8d       	ldd	r24, Y+24	; 0x18
    2f60:	99 8d       	ldd	r25, Y+25	; 0x19
    2f62:	f7 01       	movw	r30, r14
    2f64:	61 91       	ld	r22, Z+
    2f66:	7f 01       	movw	r14, r30
    2f68:	dc 01       	movw	r26, r24
    2f6a:	ed 91       	ld	r30, X+
    2f6c:	fc 91       	ld	r31, X
    2f6e:	01 90       	ld	r0, Z+
    2f70:	f0 81       	ld	r31, Z
    2f72:	e0 2d       	mov	r30, r0
    2f74:	09 95       	icall
    2f76:	11 50       	subi	r17, 0x01	; 1
    2f78:	f0 cf       	rjmp	.-32     	; 0x2f5a <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x56>
    2f7a:	61 e0       	ldi	r22, 0x01	; 1
    2f7c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2f7e:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <digitalWrite>
    2f82:	88 8d       	ldd	r24, Y+24	; 0x18
    2f84:	99 8d       	ldd	r25, Y+25	; 0x19
    2f86:	dc 01       	movw	r26, r24
    2f88:	ed 91       	ld	r30, X+
    2f8a:	fc 91       	ld	r31, X
    2f8c:	02 88       	ldd	r0, Z+18	; 0x12
    2f8e:	f3 89       	ldd	r31, Z+19	; 0x13
    2f90:	e0 2d       	mov	r30, r0
    2f92:	09 95       	icall
    2f94:	df be       	out	0x3f, r13	; 63
    2f96:	80 2f       	mov	r24, r16
    2f98:	df 91       	pop	r29
    2f9a:	cf 91       	pop	r28
    2f9c:	1f 91       	pop	r17
    2f9e:	0f 91       	pop	r16
    2fa0:	ff 90       	pop	r15
    2fa2:	ef 90       	pop	r14
    2fa4:	df 90       	pop	r13
    2fa6:	cf 90       	pop	r12
    2fa8:	bf 90       	pop	r11
    2faa:	08 95       	ret

00002fac <_ZN11RHSPIDriver17spiUsingInterruptEh>:
}

void RHSPIDriver::spiUsingInterrupt(uint8_t interruptNumber)
{
    _spi.usingInterrupt(interruptNumber);
    2fac:	dc 01       	movw	r26, r24
    2fae:	58 96       	adiw	r26, 0x18	; 24
    2fb0:	8d 91       	ld	r24, X+
    2fb2:	9c 91       	ld	r25, X
    2fb4:	59 97       	sbiw	r26, 0x19	; 25
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	ed 91       	ld	r30, X+
    2fba:	fc 91       	ld	r31, X
    2fbc:	04 88       	ldd	r0, Z+20	; 0x14
    2fbe:	f5 89       	ldd	r31, Z+21	; 0x15
    2fc0:	e0 2d       	mov	r30, r0
    2fc2:	09 94       	ijmp

00002fc4 <__divsf3>:
    2fc4:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__divsf3x>
    2fc8:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <__fp_round>
    2fcc:	0e 94 93 18 	call	0x3126	; 0x3126 <__fp_pscB>
    2fd0:	58 f0       	brcs	.+22     	; 0x2fe8 <__divsf3+0x24>
    2fd2:	0e 94 8c 18 	call	0x3118	; 0x3118 <__fp_pscA>
    2fd6:	40 f0       	brcs	.+16     	; 0x2fe8 <__divsf3+0x24>
    2fd8:	29 f4       	brne	.+10     	; 0x2fe4 <__divsf3+0x20>
    2fda:	5f 3f       	cpi	r21, 0xFF	; 255
    2fdc:	29 f0       	breq	.+10     	; 0x2fe8 <__divsf3+0x24>
    2fde:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__fp_inf>
    2fe2:	51 11       	cpse	r21, r1
    2fe4:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__fp_szero>
    2fe8:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__fp_nan>

00002fec <__divsf3x>:
    2fec:	0e 94 ab 18 	call	0x3156	; 0x3156 <__fp_split3>
    2ff0:	68 f3       	brcs	.-38     	; 0x2fcc <__divsf3+0x8>

00002ff2 <__divsf3_pse>:
    2ff2:	99 23       	and	r25, r25
    2ff4:	b1 f3       	breq	.-20     	; 0x2fe2 <__divsf3+0x1e>
    2ff6:	55 23       	and	r21, r21
    2ff8:	91 f3       	breq	.-28     	; 0x2fde <__divsf3+0x1a>
    2ffa:	95 1b       	sub	r25, r21
    2ffc:	55 0b       	sbc	r21, r21
    2ffe:	bb 27       	eor	r27, r27
    3000:	aa 27       	eor	r26, r26
    3002:	62 17       	cp	r22, r18
    3004:	73 07       	cpc	r23, r19
    3006:	84 07       	cpc	r24, r20
    3008:	38 f0       	brcs	.+14     	; 0x3018 <__divsf3_pse+0x26>
    300a:	9f 5f       	subi	r25, 0xFF	; 255
    300c:	5f 4f       	sbci	r21, 0xFF	; 255
    300e:	22 0f       	add	r18, r18
    3010:	33 1f       	adc	r19, r19
    3012:	44 1f       	adc	r20, r20
    3014:	aa 1f       	adc	r26, r26
    3016:	a9 f3       	breq	.-22     	; 0x3002 <__divsf3_pse+0x10>
    3018:	35 d0       	rcall	.+106    	; 0x3084 <__divsf3_pse+0x92>
    301a:	0e 2e       	mov	r0, r30
    301c:	3a f0       	brmi	.+14     	; 0x302c <__divsf3_pse+0x3a>
    301e:	e0 e8       	ldi	r30, 0x80	; 128
    3020:	32 d0       	rcall	.+100    	; 0x3086 <__divsf3_pse+0x94>
    3022:	91 50       	subi	r25, 0x01	; 1
    3024:	50 40       	sbci	r21, 0x00	; 0
    3026:	e6 95       	lsr	r30
    3028:	00 1c       	adc	r0, r0
    302a:	ca f7       	brpl	.-14     	; 0x301e <__divsf3_pse+0x2c>
    302c:	2b d0       	rcall	.+86     	; 0x3084 <__divsf3_pse+0x92>
    302e:	fe 2f       	mov	r31, r30
    3030:	29 d0       	rcall	.+82     	; 0x3084 <__divsf3_pse+0x92>
    3032:	66 0f       	add	r22, r22
    3034:	77 1f       	adc	r23, r23
    3036:	88 1f       	adc	r24, r24
    3038:	bb 1f       	adc	r27, r27
    303a:	26 17       	cp	r18, r22
    303c:	37 07       	cpc	r19, r23
    303e:	48 07       	cpc	r20, r24
    3040:	ab 07       	cpc	r26, r27
    3042:	b0 e8       	ldi	r27, 0x80	; 128
    3044:	09 f0       	breq	.+2      	; 0x3048 <__divsf3_pse+0x56>
    3046:	bb 0b       	sbc	r27, r27
    3048:	80 2d       	mov	r24, r0
    304a:	bf 01       	movw	r22, r30
    304c:	ff 27       	eor	r31, r31
    304e:	93 58       	subi	r25, 0x83	; 131
    3050:	5f 4f       	sbci	r21, 0xFF	; 255
    3052:	3a f0       	brmi	.+14     	; 0x3062 <__divsf3_pse+0x70>
    3054:	9e 3f       	cpi	r25, 0xFE	; 254
    3056:	51 05       	cpc	r21, r1
    3058:	78 f0       	brcs	.+30     	; 0x3078 <__divsf3_pse+0x86>
    305a:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__fp_inf>
    305e:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__fp_szero>
    3062:	5f 3f       	cpi	r21, 0xFF	; 255
    3064:	e4 f3       	brlt	.-8      	; 0x305e <__divsf3_pse+0x6c>
    3066:	98 3e       	cpi	r25, 0xE8	; 232
    3068:	d4 f3       	brlt	.-12     	; 0x305e <__divsf3_pse+0x6c>
    306a:	86 95       	lsr	r24
    306c:	77 95       	ror	r23
    306e:	67 95       	ror	r22
    3070:	b7 95       	ror	r27
    3072:	f7 95       	ror	r31
    3074:	9f 5f       	subi	r25, 0xFF	; 255
    3076:	c9 f7       	brne	.-14     	; 0x306a <__divsf3_pse+0x78>
    3078:	88 0f       	add	r24, r24
    307a:	91 1d       	adc	r25, r1
    307c:	96 95       	lsr	r25
    307e:	87 95       	ror	r24
    3080:	97 f9       	bld	r25, 7
    3082:	08 95       	ret
    3084:	e1 e0       	ldi	r30, 0x01	; 1
    3086:	66 0f       	add	r22, r22
    3088:	77 1f       	adc	r23, r23
    308a:	88 1f       	adc	r24, r24
    308c:	bb 1f       	adc	r27, r27
    308e:	62 17       	cp	r22, r18
    3090:	73 07       	cpc	r23, r19
    3092:	84 07       	cpc	r24, r20
    3094:	ba 07       	cpc	r27, r26
    3096:	20 f0       	brcs	.+8      	; 0x30a0 <__divsf3_pse+0xae>
    3098:	62 1b       	sub	r22, r18
    309a:	73 0b       	sbc	r23, r19
    309c:	84 0b       	sbc	r24, r20
    309e:	ba 0b       	sbc	r27, r26
    30a0:	ee 1f       	adc	r30, r30
    30a2:	88 f7       	brcc	.-30     	; 0x3086 <__divsf3_pse+0x94>
    30a4:	e0 95       	com	r30
    30a6:	08 95       	ret

000030a8 <__fixunssfsi>:
    30a8:	0e 94 b3 18 	call	0x3166	; 0x3166 <__fp_splitA>
    30ac:	88 f0       	brcs	.+34     	; 0x30d0 <__fixunssfsi+0x28>
    30ae:	9f 57       	subi	r25, 0x7F	; 127
    30b0:	98 f0       	brcs	.+38     	; 0x30d8 <__fixunssfsi+0x30>
    30b2:	b9 2f       	mov	r27, r25
    30b4:	99 27       	eor	r25, r25
    30b6:	b7 51       	subi	r27, 0x17	; 23
    30b8:	b0 f0       	brcs	.+44     	; 0x30e6 <__fixunssfsi+0x3e>
    30ba:	e1 f0       	breq	.+56     	; 0x30f4 <__fixunssfsi+0x4c>
    30bc:	66 0f       	add	r22, r22
    30be:	77 1f       	adc	r23, r23
    30c0:	88 1f       	adc	r24, r24
    30c2:	99 1f       	adc	r25, r25
    30c4:	1a f0       	brmi	.+6      	; 0x30cc <__fixunssfsi+0x24>
    30c6:	ba 95       	dec	r27
    30c8:	c9 f7       	brne	.-14     	; 0x30bc <__fixunssfsi+0x14>
    30ca:	14 c0       	rjmp	.+40     	; 0x30f4 <__fixunssfsi+0x4c>
    30cc:	b1 30       	cpi	r27, 0x01	; 1
    30ce:	91 f0       	breq	.+36     	; 0x30f4 <__fixunssfsi+0x4c>
    30d0:	0e 94 cd 18 	call	0x319a	; 0x319a <__fp_zero>
    30d4:	b1 e0       	ldi	r27, 0x01	; 1
    30d6:	08 95       	ret
    30d8:	0c 94 cd 18 	jmp	0x319a	; 0x319a <__fp_zero>
    30dc:	67 2f       	mov	r22, r23
    30de:	78 2f       	mov	r23, r24
    30e0:	88 27       	eor	r24, r24
    30e2:	b8 5f       	subi	r27, 0xF8	; 248
    30e4:	39 f0       	breq	.+14     	; 0x30f4 <__fixunssfsi+0x4c>
    30e6:	b9 3f       	cpi	r27, 0xF9	; 249
    30e8:	cc f3       	brlt	.-14     	; 0x30dc <__fixunssfsi+0x34>
    30ea:	86 95       	lsr	r24
    30ec:	77 95       	ror	r23
    30ee:	67 95       	ror	r22
    30f0:	b3 95       	inc	r27
    30f2:	d9 f7       	brne	.-10     	; 0x30ea <__fixunssfsi+0x42>
    30f4:	3e f4       	brtc	.+14     	; 0x3104 <__fixunssfsi+0x5c>
    30f6:	90 95       	com	r25
    30f8:	80 95       	com	r24
    30fa:	70 95       	com	r23
    30fc:	61 95       	neg	r22
    30fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3100:	8f 4f       	sbci	r24, 0xFF	; 255
    3102:	9f 4f       	sbci	r25, 0xFF	; 255
    3104:	08 95       	ret

00003106 <__fp_inf>:
    3106:	97 f9       	bld	r25, 7
    3108:	9f 67       	ori	r25, 0x7F	; 127
    310a:	80 e8       	ldi	r24, 0x80	; 128
    310c:	70 e0       	ldi	r23, 0x00	; 0
    310e:	60 e0       	ldi	r22, 0x00	; 0
    3110:	08 95       	ret

00003112 <__fp_nan>:
    3112:	9f ef       	ldi	r25, 0xFF	; 255
    3114:	80 ec       	ldi	r24, 0xC0	; 192
    3116:	08 95       	ret

00003118 <__fp_pscA>:
    3118:	00 24       	eor	r0, r0
    311a:	0a 94       	dec	r0
    311c:	16 16       	cp	r1, r22
    311e:	17 06       	cpc	r1, r23
    3120:	18 06       	cpc	r1, r24
    3122:	09 06       	cpc	r0, r25
    3124:	08 95       	ret

00003126 <__fp_pscB>:
    3126:	00 24       	eor	r0, r0
    3128:	0a 94       	dec	r0
    312a:	12 16       	cp	r1, r18
    312c:	13 06       	cpc	r1, r19
    312e:	14 06       	cpc	r1, r20
    3130:	05 06       	cpc	r0, r21
    3132:	08 95       	ret

00003134 <__fp_round>:
    3134:	09 2e       	mov	r0, r25
    3136:	03 94       	inc	r0
    3138:	00 0c       	add	r0, r0
    313a:	11 f4       	brne	.+4      	; 0x3140 <__fp_round+0xc>
    313c:	88 23       	and	r24, r24
    313e:	52 f0       	brmi	.+20     	; 0x3154 <__fp_round+0x20>
    3140:	bb 0f       	add	r27, r27
    3142:	40 f4       	brcc	.+16     	; 0x3154 <__fp_round+0x20>
    3144:	bf 2b       	or	r27, r31
    3146:	11 f4       	brne	.+4      	; 0x314c <__fp_round+0x18>
    3148:	60 ff       	sbrs	r22, 0
    314a:	04 c0       	rjmp	.+8      	; 0x3154 <__fp_round+0x20>
    314c:	6f 5f       	subi	r22, 0xFF	; 255
    314e:	7f 4f       	sbci	r23, 0xFF	; 255
    3150:	8f 4f       	sbci	r24, 0xFF	; 255
    3152:	9f 4f       	sbci	r25, 0xFF	; 255
    3154:	08 95       	ret

00003156 <__fp_split3>:
    3156:	57 fd       	sbrc	r21, 7
    3158:	90 58       	subi	r25, 0x80	; 128
    315a:	44 0f       	add	r20, r20
    315c:	55 1f       	adc	r21, r21
    315e:	59 f0       	breq	.+22     	; 0x3176 <__fp_splitA+0x10>
    3160:	5f 3f       	cpi	r21, 0xFF	; 255
    3162:	71 f0       	breq	.+28     	; 0x3180 <__fp_splitA+0x1a>
    3164:	47 95       	ror	r20

00003166 <__fp_splitA>:
    3166:	88 0f       	add	r24, r24
    3168:	97 fb       	bst	r25, 7
    316a:	99 1f       	adc	r25, r25
    316c:	61 f0       	breq	.+24     	; 0x3186 <__fp_splitA+0x20>
    316e:	9f 3f       	cpi	r25, 0xFF	; 255
    3170:	79 f0       	breq	.+30     	; 0x3190 <__fp_splitA+0x2a>
    3172:	87 95       	ror	r24
    3174:	08 95       	ret
    3176:	12 16       	cp	r1, r18
    3178:	13 06       	cpc	r1, r19
    317a:	14 06       	cpc	r1, r20
    317c:	55 1f       	adc	r21, r21
    317e:	f2 cf       	rjmp	.-28     	; 0x3164 <__fp_split3+0xe>
    3180:	46 95       	lsr	r20
    3182:	f1 df       	rcall	.-30     	; 0x3166 <__fp_splitA>
    3184:	08 c0       	rjmp	.+16     	; 0x3196 <__fp_splitA+0x30>
    3186:	16 16       	cp	r1, r22
    3188:	17 06       	cpc	r1, r23
    318a:	18 06       	cpc	r1, r24
    318c:	99 1f       	adc	r25, r25
    318e:	f1 cf       	rjmp	.-30     	; 0x3172 <__fp_splitA+0xc>
    3190:	86 95       	lsr	r24
    3192:	71 05       	cpc	r23, r1
    3194:	61 05       	cpc	r22, r1
    3196:	08 94       	sec
    3198:	08 95       	ret

0000319a <__fp_zero>:
    319a:	e8 94       	clt

0000319c <__fp_szero>:
    319c:	bb 27       	eor	r27, r27
    319e:	66 27       	eor	r22, r22
    31a0:	77 27       	eor	r23, r23
    31a2:	cb 01       	movw	r24, r22
    31a4:	97 f9       	bld	r25, 7
    31a6:	08 95       	ret

000031a8 <__mulsf3>:
    31a8:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__mulsf3x>
    31ac:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <__fp_round>
    31b0:	0e 94 8c 18 	call	0x3118	; 0x3118 <__fp_pscA>
    31b4:	38 f0       	brcs	.+14     	; 0x31c4 <__mulsf3+0x1c>
    31b6:	0e 94 93 18 	call	0x3126	; 0x3126 <__fp_pscB>
    31ba:	20 f0       	brcs	.+8      	; 0x31c4 <__mulsf3+0x1c>
    31bc:	95 23       	and	r25, r21
    31be:	11 f0       	breq	.+4      	; 0x31c4 <__mulsf3+0x1c>
    31c0:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__fp_inf>
    31c4:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__fp_nan>
    31c8:	11 24       	eor	r1, r1
    31ca:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__fp_szero>

000031ce <__mulsf3x>:
    31ce:	0e 94 ab 18 	call	0x3156	; 0x3156 <__fp_split3>
    31d2:	70 f3       	brcs	.-36     	; 0x31b0 <__mulsf3+0x8>

000031d4 <__mulsf3_pse>:
    31d4:	95 9f       	mul	r25, r21
    31d6:	c1 f3       	breq	.-16     	; 0x31c8 <__mulsf3+0x20>
    31d8:	95 0f       	add	r25, r21
    31da:	50 e0       	ldi	r21, 0x00	; 0
    31dc:	55 1f       	adc	r21, r21
    31de:	62 9f       	mul	r22, r18
    31e0:	f0 01       	movw	r30, r0
    31e2:	72 9f       	mul	r23, r18
    31e4:	bb 27       	eor	r27, r27
    31e6:	f0 0d       	add	r31, r0
    31e8:	b1 1d       	adc	r27, r1
    31ea:	63 9f       	mul	r22, r19
    31ec:	aa 27       	eor	r26, r26
    31ee:	f0 0d       	add	r31, r0
    31f0:	b1 1d       	adc	r27, r1
    31f2:	aa 1f       	adc	r26, r26
    31f4:	64 9f       	mul	r22, r20
    31f6:	66 27       	eor	r22, r22
    31f8:	b0 0d       	add	r27, r0
    31fa:	a1 1d       	adc	r26, r1
    31fc:	66 1f       	adc	r22, r22
    31fe:	82 9f       	mul	r24, r18
    3200:	22 27       	eor	r18, r18
    3202:	b0 0d       	add	r27, r0
    3204:	a1 1d       	adc	r26, r1
    3206:	62 1f       	adc	r22, r18
    3208:	73 9f       	mul	r23, r19
    320a:	b0 0d       	add	r27, r0
    320c:	a1 1d       	adc	r26, r1
    320e:	62 1f       	adc	r22, r18
    3210:	83 9f       	mul	r24, r19
    3212:	a0 0d       	add	r26, r0
    3214:	61 1d       	adc	r22, r1
    3216:	22 1f       	adc	r18, r18
    3218:	74 9f       	mul	r23, r20
    321a:	33 27       	eor	r19, r19
    321c:	a0 0d       	add	r26, r0
    321e:	61 1d       	adc	r22, r1
    3220:	23 1f       	adc	r18, r19
    3222:	84 9f       	mul	r24, r20
    3224:	60 0d       	add	r22, r0
    3226:	21 1d       	adc	r18, r1
    3228:	82 2f       	mov	r24, r18
    322a:	76 2f       	mov	r23, r22
    322c:	6a 2f       	mov	r22, r26
    322e:	11 24       	eor	r1, r1
    3230:	9f 57       	subi	r25, 0x7F	; 127
    3232:	50 40       	sbci	r21, 0x00	; 0
    3234:	9a f0       	brmi	.+38     	; 0x325c <__mulsf3_pse+0x88>
    3236:	f1 f0       	breq	.+60     	; 0x3274 <__mulsf3_pse+0xa0>
    3238:	88 23       	and	r24, r24
    323a:	4a f0       	brmi	.+18     	; 0x324e <__mulsf3_pse+0x7a>
    323c:	ee 0f       	add	r30, r30
    323e:	ff 1f       	adc	r31, r31
    3240:	bb 1f       	adc	r27, r27
    3242:	66 1f       	adc	r22, r22
    3244:	77 1f       	adc	r23, r23
    3246:	88 1f       	adc	r24, r24
    3248:	91 50       	subi	r25, 0x01	; 1
    324a:	50 40       	sbci	r21, 0x00	; 0
    324c:	a9 f7       	brne	.-22     	; 0x3238 <__mulsf3_pse+0x64>
    324e:	9e 3f       	cpi	r25, 0xFE	; 254
    3250:	51 05       	cpc	r21, r1
    3252:	80 f0       	brcs	.+32     	; 0x3274 <__mulsf3_pse+0xa0>
    3254:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__fp_inf>
    3258:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__fp_szero>
    325c:	5f 3f       	cpi	r21, 0xFF	; 255
    325e:	e4 f3       	brlt	.-8      	; 0x3258 <__mulsf3_pse+0x84>
    3260:	98 3e       	cpi	r25, 0xE8	; 232
    3262:	d4 f3       	brlt	.-12     	; 0x3258 <__mulsf3_pse+0x84>
    3264:	86 95       	lsr	r24
    3266:	77 95       	ror	r23
    3268:	67 95       	ror	r22
    326a:	b7 95       	ror	r27
    326c:	f7 95       	ror	r31
    326e:	e7 95       	ror	r30
    3270:	9f 5f       	subi	r25, 0xFF	; 255
    3272:	c1 f7       	brne	.-16     	; 0x3264 <__mulsf3_pse+0x90>
    3274:	fe 2b       	or	r31, r30
    3276:	88 0f       	add	r24, r24
    3278:	91 1d       	adc	r25, r1
    327a:	96 95       	lsr	r25
    327c:	87 95       	ror	r24
    327e:	97 f9       	bld	r25, 7
    3280:	08 95       	ret

00003282 <__udivmodsi4>:
    3282:	a1 e2       	ldi	r26, 0x21	; 33
    3284:	1a 2e       	mov	r1, r26
    3286:	aa 1b       	sub	r26, r26
    3288:	bb 1b       	sub	r27, r27
    328a:	fd 01       	movw	r30, r26
    328c:	0d c0       	rjmp	.+26     	; 0x32a8 <__udivmodsi4_ep>

0000328e <__udivmodsi4_loop>:
    328e:	aa 1f       	adc	r26, r26
    3290:	bb 1f       	adc	r27, r27
    3292:	ee 1f       	adc	r30, r30
    3294:	ff 1f       	adc	r31, r31
    3296:	a2 17       	cp	r26, r18
    3298:	b3 07       	cpc	r27, r19
    329a:	e4 07       	cpc	r30, r20
    329c:	f5 07       	cpc	r31, r21
    329e:	20 f0       	brcs	.+8      	; 0x32a8 <__udivmodsi4_ep>
    32a0:	a2 1b       	sub	r26, r18
    32a2:	b3 0b       	sbc	r27, r19
    32a4:	e4 0b       	sbc	r30, r20
    32a6:	f5 0b       	sbc	r31, r21

000032a8 <__udivmodsi4_ep>:
    32a8:	66 1f       	adc	r22, r22
    32aa:	77 1f       	adc	r23, r23
    32ac:	88 1f       	adc	r24, r24
    32ae:	99 1f       	adc	r25, r25
    32b0:	1a 94       	dec	r1
    32b2:	69 f7       	brne	.-38     	; 0x328e <__udivmodsi4_loop>
    32b4:	60 95       	com	r22
    32b6:	70 95       	com	r23
    32b8:	80 95       	com	r24
    32ba:	90 95       	com	r25
    32bc:	9b 01       	movw	r18, r22
    32be:	ac 01       	movw	r20, r24
    32c0:	bd 01       	movw	r22, r26
    32c2:	cf 01       	movw	r24, r30
    32c4:	08 95       	ret

000032c6 <__divmodsi4>:
    32c6:	05 2e       	mov	r0, r21
    32c8:	97 fb       	bst	r25, 7
    32ca:	1e f4       	brtc	.+6      	; 0x32d2 <__divmodsi4+0xc>
    32cc:	00 94       	com	r0
    32ce:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <__negsi2>
    32d2:	57 fd       	sbrc	r21, 7
    32d4:	07 d0       	rcall	.+14     	; 0x32e4 <__divmodsi4_neg2>
    32d6:	0e 94 41 19 	call	0x3282	; 0x3282 <__udivmodsi4>
    32da:	07 fc       	sbrc	r0, 7
    32dc:	03 d0       	rcall	.+6      	; 0x32e4 <__divmodsi4_neg2>
    32de:	4e f4       	brtc	.+18     	; 0x32f2 <__divmodsi4_exit>
    32e0:	0c 94 7a 19 	jmp	0x32f4	; 0x32f4 <__negsi2>

000032e4 <__divmodsi4_neg2>:
    32e4:	50 95       	com	r21
    32e6:	40 95       	com	r20
    32e8:	30 95       	com	r19
    32ea:	21 95       	neg	r18
    32ec:	3f 4f       	sbci	r19, 0xFF	; 255
    32ee:	4f 4f       	sbci	r20, 0xFF	; 255
    32f0:	5f 4f       	sbci	r21, 0xFF	; 255

000032f2 <__divmodsi4_exit>:
    32f2:	08 95       	ret

000032f4 <__negsi2>:
    32f4:	90 95       	com	r25
    32f6:	80 95       	com	r24
    32f8:	70 95       	com	r23
    32fa:	61 95       	neg	r22
    32fc:	7f 4f       	sbci	r23, 0xFF	; 255
    32fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3300:	9f 4f       	sbci	r25, 0xFF	; 255
    3302:	08 95       	ret

00003304 <__tablejump2__>:
    3304:	ee 0f       	add	r30, r30
    3306:	ff 1f       	adc	r31, r31
    3308:	05 90       	lpm	r0, Z+
    330a:	f4 91       	lpm	r31, Z
    330c:	e0 2d       	mov	r30, r0
    330e:	09 94       	ijmp

00003310 <__muluhisi3>:
    3310:	0e 94 93 19 	call	0x3326	; 0x3326 <__umulhisi3>
    3314:	a5 9f       	mul	r26, r21
    3316:	90 0d       	add	r25, r0
    3318:	b4 9f       	mul	r27, r20
    331a:	90 0d       	add	r25, r0
    331c:	a4 9f       	mul	r26, r20
    331e:	80 0d       	add	r24, r0
    3320:	91 1d       	adc	r25, r1
    3322:	11 24       	eor	r1, r1
    3324:	08 95       	ret

00003326 <__umulhisi3>:
    3326:	a2 9f       	mul	r26, r18
    3328:	b0 01       	movw	r22, r0
    332a:	b3 9f       	mul	r27, r19
    332c:	c0 01       	movw	r24, r0
    332e:	a3 9f       	mul	r26, r19
    3330:	70 0d       	add	r23, r0
    3332:	81 1d       	adc	r24, r1
    3334:	11 24       	eor	r1, r1
    3336:	91 1d       	adc	r25, r1
    3338:	b2 9f       	mul	r27, r18
    333a:	70 0d       	add	r23, r0
    333c:	81 1d       	adc	r24, r1
    333e:	11 24       	eor	r1, r1
    3340:	91 1d       	adc	r25, r1
    3342:	08 95       	ret

00003344 <malloc>:
    3344:	0f 93       	push	r16
    3346:	1f 93       	push	r17
    3348:	cf 93       	push	r28
    334a:	df 93       	push	r29
    334c:	82 30       	cpi	r24, 0x02	; 2
    334e:	91 05       	cpc	r25, r1
    3350:	10 f4       	brcc	.+4      	; 0x3356 <malloc+0x12>
    3352:	82 e0       	ldi	r24, 0x02	; 2
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	e0 91 6a 04 	lds	r30, 0x046A	; 0x80046a <__flp>
    335a:	f0 91 6b 04 	lds	r31, 0x046B	; 0x80046b <__flp+0x1>
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	a0 e0       	ldi	r26, 0x00	; 0
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	30 97       	sbiw	r30, 0x00	; 0
    3368:	19 f1       	breq	.+70     	; 0x33b0 <malloc+0x6c>
    336a:	40 81       	ld	r20, Z
    336c:	51 81       	ldd	r21, Z+1	; 0x01
    336e:	02 81       	ldd	r16, Z+2	; 0x02
    3370:	13 81       	ldd	r17, Z+3	; 0x03
    3372:	48 17       	cp	r20, r24
    3374:	59 07       	cpc	r21, r25
    3376:	c8 f0       	brcs	.+50     	; 0x33aa <malloc+0x66>
    3378:	84 17       	cp	r24, r20
    337a:	95 07       	cpc	r25, r21
    337c:	69 f4       	brne	.+26     	; 0x3398 <malloc+0x54>
    337e:	10 97       	sbiw	r26, 0x00	; 0
    3380:	31 f0       	breq	.+12     	; 0x338e <malloc+0x4a>
    3382:	12 96       	adiw	r26, 0x02	; 2
    3384:	0c 93       	st	X, r16
    3386:	12 97       	sbiw	r26, 0x02	; 2
    3388:	13 96       	adiw	r26, 0x03	; 3
    338a:	1c 93       	st	X, r17
    338c:	27 c0       	rjmp	.+78     	; 0x33dc <malloc+0x98>
    338e:	00 93 6a 04 	sts	0x046A, r16	; 0x80046a <__flp>
    3392:	10 93 6b 04 	sts	0x046B, r17	; 0x80046b <__flp+0x1>
    3396:	22 c0       	rjmp	.+68     	; 0x33dc <malloc+0x98>
    3398:	21 15       	cp	r18, r1
    339a:	31 05       	cpc	r19, r1
    339c:	19 f0       	breq	.+6      	; 0x33a4 <malloc+0x60>
    339e:	42 17       	cp	r20, r18
    33a0:	53 07       	cpc	r21, r19
    33a2:	18 f4       	brcc	.+6      	; 0x33aa <malloc+0x66>
    33a4:	9a 01       	movw	r18, r20
    33a6:	bd 01       	movw	r22, r26
    33a8:	ef 01       	movw	r28, r30
    33aa:	df 01       	movw	r26, r30
    33ac:	f8 01       	movw	r30, r16
    33ae:	db cf       	rjmp	.-74     	; 0x3366 <malloc+0x22>
    33b0:	21 15       	cp	r18, r1
    33b2:	31 05       	cpc	r19, r1
    33b4:	f9 f0       	breq	.+62     	; 0x33f4 <malloc+0xb0>
    33b6:	28 1b       	sub	r18, r24
    33b8:	39 0b       	sbc	r19, r25
    33ba:	24 30       	cpi	r18, 0x04	; 4
    33bc:	31 05       	cpc	r19, r1
    33be:	80 f4       	brcc	.+32     	; 0x33e0 <malloc+0x9c>
    33c0:	8a 81       	ldd	r24, Y+2	; 0x02
    33c2:	9b 81       	ldd	r25, Y+3	; 0x03
    33c4:	61 15       	cp	r22, r1
    33c6:	71 05       	cpc	r23, r1
    33c8:	21 f0       	breq	.+8      	; 0x33d2 <malloc+0x8e>
    33ca:	fb 01       	movw	r30, r22
    33cc:	93 83       	std	Z+3, r25	; 0x03
    33ce:	82 83       	std	Z+2, r24	; 0x02
    33d0:	04 c0       	rjmp	.+8      	; 0x33da <malloc+0x96>
    33d2:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <__flp+0x1>
    33d6:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <__flp>
    33da:	fe 01       	movw	r30, r28
    33dc:	32 96       	adiw	r30, 0x02	; 2
    33de:	44 c0       	rjmp	.+136    	; 0x3468 <malloc+0x124>
    33e0:	fe 01       	movw	r30, r28
    33e2:	e2 0f       	add	r30, r18
    33e4:	f3 1f       	adc	r31, r19
    33e6:	81 93       	st	Z+, r24
    33e8:	91 93       	st	Z+, r25
    33ea:	22 50       	subi	r18, 0x02	; 2
    33ec:	31 09       	sbc	r19, r1
    33ee:	39 83       	std	Y+1, r19	; 0x01
    33f0:	28 83       	st	Y, r18
    33f2:	3a c0       	rjmp	.+116    	; 0x3468 <malloc+0x124>
    33f4:	20 91 68 04 	lds	r18, 0x0468	; 0x800468 <__brkval>
    33f8:	30 91 69 04 	lds	r19, 0x0469	; 0x800469 <__brkval+0x1>
    33fc:	23 2b       	or	r18, r19
    33fe:	41 f4       	brne	.+16     	; 0x3410 <malloc+0xcc>
    3400:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3404:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3408:	30 93 69 04 	sts	0x0469, r19	; 0x800469 <__brkval+0x1>
    340c:	20 93 68 04 	sts	0x0468, r18	; 0x800468 <__brkval>
    3410:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    3414:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    3418:	21 15       	cp	r18, r1
    341a:	31 05       	cpc	r19, r1
    341c:	41 f4       	brne	.+16     	; 0x342e <malloc+0xea>
    341e:	2d b7       	in	r18, 0x3d	; 61
    3420:	3e b7       	in	r19, 0x3e	; 62
    3422:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3426:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    342a:	24 1b       	sub	r18, r20
    342c:	35 0b       	sbc	r19, r21
    342e:	e0 91 68 04 	lds	r30, 0x0468	; 0x800468 <__brkval>
    3432:	f0 91 69 04 	lds	r31, 0x0469	; 0x800469 <__brkval+0x1>
    3436:	e2 17       	cp	r30, r18
    3438:	f3 07       	cpc	r31, r19
    343a:	a0 f4       	brcc	.+40     	; 0x3464 <malloc+0x120>
    343c:	2e 1b       	sub	r18, r30
    343e:	3f 0b       	sbc	r19, r31
    3440:	28 17       	cp	r18, r24
    3442:	39 07       	cpc	r19, r25
    3444:	78 f0       	brcs	.+30     	; 0x3464 <malloc+0x120>
    3446:	ac 01       	movw	r20, r24
    3448:	4e 5f       	subi	r20, 0xFE	; 254
    344a:	5f 4f       	sbci	r21, 0xFF	; 255
    344c:	24 17       	cp	r18, r20
    344e:	35 07       	cpc	r19, r21
    3450:	48 f0       	brcs	.+18     	; 0x3464 <malloc+0x120>
    3452:	4e 0f       	add	r20, r30
    3454:	5f 1f       	adc	r21, r31
    3456:	50 93 69 04 	sts	0x0469, r21	; 0x800469 <__brkval+0x1>
    345a:	40 93 68 04 	sts	0x0468, r20	; 0x800468 <__brkval>
    345e:	81 93       	st	Z+, r24
    3460:	91 93       	st	Z+, r25
    3462:	02 c0       	rjmp	.+4      	; 0x3468 <malloc+0x124>
    3464:	e0 e0       	ldi	r30, 0x00	; 0
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	cf 01       	movw	r24, r30
    346a:	df 91       	pop	r29
    346c:	cf 91       	pop	r28
    346e:	1f 91       	pop	r17
    3470:	0f 91       	pop	r16
    3472:	08 95       	ret

00003474 <free>:
    3474:	cf 93       	push	r28
    3476:	df 93       	push	r29
    3478:	00 97       	sbiw	r24, 0x00	; 0
    347a:	09 f4       	brne	.+2      	; 0x347e <free+0xa>
    347c:	81 c0       	rjmp	.+258    	; 0x3580 <free+0x10c>
    347e:	fc 01       	movw	r30, r24
    3480:	32 97       	sbiw	r30, 0x02	; 2
    3482:	13 82       	std	Z+3, r1	; 0x03
    3484:	12 82       	std	Z+2, r1	; 0x02
    3486:	a0 91 6a 04 	lds	r26, 0x046A	; 0x80046a <__flp>
    348a:	b0 91 6b 04 	lds	r27, 0x046B	; 0x80046b <__flp+0x1>
    348e:	10 97       	sbiw	r26, 0x00	; 0
    3490:	81 f4       	brne	.+32     	; 0x34b2 <free+0x3e>
    3492:	20 81       	ld	r18, Z
    3494:	31 81       	ldd	r19, Z+1	; 0x01
    3496:	82 0f       	add	r24, r18
    3498:	93 1f       	adc	r25, r19
    349a:	20 91 68 04 	lds	r18, 0x0468	; 0x800468 <__brkval>
    349e:	30 91 69 04 	lds	r19, 0x0469	; 0x800469 <__brkval+0x1>
    34a2:	28 17       	cp	r18, r24
    34a4:	39 07       	cpc	r19, r25
    34a6:	51 f5       	brne	.+84     	; 0x34fc <free+0x88>
    34a8:	f0 93 69 04 	sts	0x0469, r31	; 0x800469 <__brkval+0x1>
    34ac:	e0 93 68 04 	sts	0x0468, r30	; 0x800468 <__brkval>
    34b0:	67 c0       	rjmp	.+206    	; 0x3580 <free+0x10c>
    34b2:	ed 01       	movw	r28, r26
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	ce 17       	cp	r28, r30
    34ba:	df 07       	cpc	r29, r31
    34bc:	40 f4       	brcc	.+16     	; 0x34ce <free+0x5a>
    34be:	4a 81       	ldd	r20, Y+2	; 0x02
    34c0:	5b 81       	ldd	r21, Y+3	; 0x03
    34c2:	9e 01       	movw	r18, r28
    34c4:	41 15       	cp	r20, r1
    34c6:	51 05       	cpc	r21, r1
    34c8:	f1 f0       	breq	.+60     	; 0x3506 <free+0x92>
    34ca:	ea 01       	movw	r28, r20
    34cc:	f5 cf       	rjmp	.-22     	; 0x34b8 <free+0x44>
    34ce:	d3 83       	std	Z+3, r29	; 0x03
    34d0:	c2 83       	std	Z+2, r28	; 0x02
    34d2:	40 81       	ld	r20, Z
    34d4:	51 81       	ldd	r21, Z+1	; 0x01
    34d6:	84 0f       	add	r24, r20
    34d8:	95 1f       	adc	r25, r21
    34da:	c8 17       	cp	r28, r24
    34dc:	d9 07       	cpc	r29, r25
    34de:	59 f4       	brne	.+22     	; 0x34f6 <free+0x82>
    34e0:	88 81       	ld	r24, Y
    34e2:	99 81       	ldd	r25, Y+1	; 0x01
    34e4:	84 0f       	add	r24, r20
    34e6:	95 1f       	adc	r25, r21
    34e8:	02 96       	adiw	r24, 0x02	; 2
    34ea:	91 83       	std	Z+1, r25	; 0x01
    34ec:	80 83       	st	Z, r24
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	9b 81       	ldd	r25, Y+3	; 0x03
    34f2:	93 83       	std	Z+3, r25	; 0x03
    34f4:	82 83       	std	Z+2, r24	; 0x02
    34f6:	21 15       	cp	r18, r1
    34f8:	31 05       	cpc	r19, r1
    34fa:	29 f4       	brne	.+10     	; 0x3506 <free+0x92>
    34fc:	f0 93 6b 04 	sts	0x046B, r31	; 0x80046b <__flp+0x1>
    3500:	e0 93 6a 04 	sts	0x046A, r30	; 0x80046a <__flp>
    3504:	3d c0       	rjmp	.+122    	; 0x3580 <free+0x10c>
    3506:	e9 01       	movw	r28, r18
    3508:	fb 83       	std	Y+3, r31	; 0x03
    350a:	ea 83       	std	Y+2, r30	; 0x02
    350c:	49 91       	ld	r20, Y+
    350e:	59 91       	ld	r21, Y+
    3510:	c4 0f       	add	r28, r20
    3512:	d5 1f       	adc	r29, r21
    3514:	ec 17       	cp	r30, r28
    3516:	fd 07       	cpc	r31, r29
    3518:	61 f4       	brne	.+24     	; 0x3532 <free+0xbe>
    351a:	80 81       	ld	r24, Z
    351c:	91 81       	ldd	r25, Z+1	; 0x01
    351e:	84 0f       	add	r24, r20
    3520:	95 1f       	adc	r25, r21
    3522:	02 96       	adiw	r24, 0x02	; 2
    3524:	e9 01       	movw	r28, r18
    3526:	99 83       	std	Y+1, r25	; 0x01
    3528:	88 83       	st	Y, r24
    352a:	82 81       	ldd	r24, Z+2	; 0x02
    352c:	93 81       	ldd	r25, Z+3	; 0x03
    352e:	9b 83       	std	Y+3, r25	; 0x03
    3530:	8a 83       	std	Y+2, r24	; 0x02
    3532:	e0 e0       	ldi	r30, 0x00	; 0
    3534:	f0 e0       	ldi	r31, 0x00	; 0
    3536:	12 96       	adiw	r26, 0x02	; 2
    3538:	8d 91       	ld	r24, X+
    353a:	9c 91       	ld	r25, X
    353c:	13 97       	sbiw	r26, 0x03	; 3
    353e:	00 97       	sbiw	r24, 0x00	; 0
    3540:	19 f0       	breq	.+6      	; 0x3548 <free+0xd4>
    3542:	fd 01       	movw	r30, r26
    3544:	dc 01       	movw	r26, r24
    3546:	f7 cf       	rjmp	.-18     	; 0x3536 <free+0xc2>
    3548:	8d 91       	ld	r24, X+
    354a:	9c 91       	ld	r25, X
    354c:	11 97       	sbiw	r26, 0x01	; 1
    354e:	9d 01       	movw	r18, r26
    3550:	2e 5f       	subi	r18, 0xFE	; 254
    3552:	3f 4f       	sbci	r19, 0xFF	; 255
    3554:	82 0f       	add	r24, r18
    3556:	93 1f       	adc	r25, r19
    3558:	20 91 68 04 	lds	r18, 0x0468	; 0x800468 <__brkval>
    355c:	30 91 69 04 	lds	r19, 0x0469	; 0x800469 <__brkval+0x1>
    3560:	28 17       	cp	r18, r24
    3562:	39 07       	cpc	r19, r25
    3564:	69 f4       	brne	.+26     	; 0x3580 <free+0x10c>
    3566:	30 97       	sbiw	r30, 0x00	; 0
    3568:	29 f4       	brne	.+10     	; 0x3574 <free+0x100>
    356a:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <__flp+0x1>
    356e:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <__flp>
    3572:	02 c0       	rjmp	.+4      	; 0x3578 <free+0x104>
    3574:	13 82       	std	Z+3, r1	; 0x03
    3576:	12 82       	std	Z+2, r1	; 0x02
    3578:	b0 93 69 04 	sts	0x0469, r27	; 0x800469 <__brkval+0x1>
    357c:	a0 93 68 04 	sts	0x0468, r26	; 0x800468 <__brkval>
    3580:	df 91       	pop	r29
    3582:	cf 91       	pop	r28
    3584:	08 95       	ret

00003586 <random_r>:
    3586:	8f 92       	push	r8
    3588:	9f 92       	push	r9
    358a:	af 92       	push	r10
    358c:	bf 92       	push	r11
    358e:	cf 92       	push	r12
    3590:	df 92       	push	r13
    3592:	ef 92       	push	r14
    3594:	ff 92       	push	r15
    3596:	cf 93       	push	r28
    3598:	df 93       	push	r29
    359a:	ec 01       	movw	r28, r24
    359c:	68 81       	ld	r22, Y
    359e:	79 81       	ldd	r23, Y+1	; 0x01
    35a0:	8a 81       	ldd	r24, Y+2	; 0x02
    35a2:	9b 81       	ldd	r25, Y+3	; 0x03
    35a4:	61 15       	cp	r22, r1
    35a6:	71 05       	cpc	r23, r1
    35a8:	81 05       	cpc	r24, r1
    35aa:	91 05       	cpc	r25, r1
    35ac:	21 f4       	brne	.+8      	; 0x35b6 <random_r+0x30>
    35ae:	64 e2       	ldi	r22, 0x24	; 36
    35b0:	79 ed       	ldi	r23, 0xD9	; 217
    35b2:	8b e5       	ldi	r24, 0x5B	; 91
    35b4:	97 e0       	ldi	r25, 0x07	; 7
    35b6:	2d e1       	ldi	r18, 0x1D	; 29
    35b8:	33 ef       	ldi	r19, 0xF3	; 243
    35ba:	41 e0       	ldi	r20, 0x01	; 1
    35bc:	50 e0       	ldi	r21, 0x00	; 0
    35be:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__divmodsi4>
    35c2:	49 01       	movw	r8, r18
    35c4:	5a 01       	movw	r10, r20
    35c6:	9b 01       	movw	r18, r22
    35c8:	ac 01       	movw	r20, r24
    35ca:	a7 ea       	ldi	r26, 0xA7	; 167
    35cc:	b1 e4       	ldi	r27, 0x41	; 65
    35ce:	0e 94 88 19 	call	0x3310	; 0x3310 <__muluhisi3>
    35d2:	6b 01       	movw	r12, r22
    35d4:	7c 01       	movw	r14, r24
    35d6:	ac ee       	ldi	r26, 0xEC	; 236
    35d8:	b4 ef       	ldi	r27, 0xF4	; 244
    35da:	a5 01       	movw	r20, r10
    35dc:	94 01       	movw	r18, r8
    35de:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__mulohisi3>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	8c 0d       	add	r24, r12
    35e8:	9d 1d       	adc	r25, r13
    35ea:	ae 1d       	adc	r26, r14
    35ec:	bf 1d       	adc	r27, r15
    35ee:	b7 ff       	sbrs	r27, 7
    35f0:	03 c0       	rjmp	.+6      	; 0x35f8 <random_r+0x72>
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	a1 09       	sbc	r26, r1
    35f6:	b0 48       	sbci	r27, 0x80	; 128
    35f8:	88 83       	st	Y, r24
    35fa:	99 83       	std	Y+1, r25	; 0x01
    35fc:	aa 83       	std	Y+2, r26	; 0x02
    35fe:	bb 83       	std	Y+3, r27	; 0x03
    3600:	bc 01       	movw	r22, r24
    3602:	cd 01       	movw	r24, r26
    3604:	9f 77       	andi	r25, 0x7F	; 127
    3606:	df 91       	pop	r29
    3608:	cf 91       	pop	r28
    360a:	ff 90       	pop	r15
    360c:	ef 90       	pop	r14
    360e:	df 90       	pop	r13
    3610:	cf 90       	pop	r12
    3612:	bf 90       	pop	r11
    3614:	af 90       	pop	r10
    3616:	9f 90       	pop	r9
    3618:	8f 90       	pop	r8
    361a:	08 95       	ret

0000361c <random>:
    361c:	8f 92       	push	r8
    361e:	9f 92       	push	r9
    3620:	af 92       	push	r10
    3622:	bf 92       	push	r11
    3624:	cf 92       	push	r12
    3626:	df 92       	push	r13
    3628:	ef 92       	push	r14
    362a:	ff 92       	push	r15
    362c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <next>
    3630:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <next+0x1>
    3634:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <next+0x2>
    3638:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <next+0x3>
    363c:	61 15       	cp	r22, r1
    363e:	71 05       	cpc	r23, r1
    3640:	81 05       	cpc	r24, r1
    3642:	91 05       	cpc	r25, r1
    3644:	21 f4       	brne	.+8      	; 0x364e <random+0x32>
    3646:	64 e2       	ldi	r22, 0x24	; 36
    3648:	79 ed       	ldi	r23, 0xD9	; 217
    364a:	8b e5       	ldi	r24, 0x5B	; 91
    364c:	97 e0       	ldi	r25, 0x07	; 7
    364e:	2d e1       	ldi	r18, 0x1D	; 29
    3650:	33 ef       	ldi	r19, 0xF3	; 243
    3652:	41 e0       	ldi	r20, 0x01	; 1
    3654:	50 e0       	ldi	r21, 0x00	; 0
    3656:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__divmodsi4>
    365a:	49 01       	movw	r8, r18
    365c:	5a 01       	movw	r10, r20
    365e:	9b 01       	movw	r18, r22
    3660:	ac 01       	movw	r20, r24
    3662:	a7 ea       	ldi	r26, 0xA7	; 167
    3664:	b1 e4       	ldi	r27, 0x41	; 65
    3666:	0e 94 88 19 	call	0x3310	; 0x3310 <__muluhisi3>
    366a:	6b 01       	movw	r12, r22
    366c:	7c 01       	movw	r14, r24
    366e:	ac ee       	ldi	r26, 0xEC	; 236
    3670:	b4 ef       	ldi	r27, 0xF4	; 244
    3672:	a5 01       	movw	r20, r10
    3674:	94 01       	movw	r18, r8
    3676:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <__mulohisi3>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	8c 0d       	add	r24, r12
    3680:	9d 1d       	adc	r25, r13
    3682:	ae 1d       	adc	r26, r14
    3684:	bf 1d       	adc	r27, r15
    3686:	b7 ff       	sbrs	r27, 7
    3688:	03 c0       	rjmp	.+6      	; 0x3690 <random+0x74>
    368a:	01 97       	sbiw	r24, 0x01	; 1
    368c:	a1 09       	sbc	r26, r1
    368e:	b0 48       	sbci	r27, 0x80	; 128
    3690:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    3694:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    3698:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    369c:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    36a0:	bc 01       	movw	r22, r24
    36a2:	cd 01       	movw	r24, r26
    36a4:	9f 77       	andi	r25, 0x7F	; 127
    36a6:	ff 90       	pop	r15
    36a8:	ef 90       	pop	r14
    36aa:	df 90       	pop	r13
    36ac:	cf 90       	pop	r12
    36ae:	bf 90       	pop	r11
    36b0:	af 90       	pop	r10
    36b2:	9f 90       	pop	r9
    36b4:	8f 90       	pop	r8
    36b6:	08 95       	ret

000036b8 <srandom>:
    36b8:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <next>
    36bc:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <next+0x1>
    36c0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <next+0x2>
    36c4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <next+0x3>
    36c8:	08 95       	ret

000036ca <realloc>:
    36ca:	a0 e0       	ldi	r26, 0x00	; 0
    36cc:	b0 e0       	ldi	r27, 0x00	; 0
    36ce:	eb e6       	ldi	r30, 0x6B	; 107
    36d0:	fb e1       	ldi	r31, 0x1B	; 27
    36d2:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__prologue_saves__+0x8>
    36d6:	ec 01       	movw	r28, r24
    36d8:	00 97       	sbiw	r24, 0x00	; 0
    36da:	21 f4       	brne	.+8      	; 0x36e4 <realloc+0x1a>
    36dc:	cb 01       	movw	r24, r22
    36de:	0e 94 a2 19 	call	0x3344	; 0x3344 <malloc>
    36e2:	b4 c0       	rjmp	.+360    	; 0x384c <realloc+0x182>
    36e4:	fc 01       	movw	r30, r24
    36e6:	e6 0f       	add	r30, r22
    36e8:	f7 1f       	adc	r31, r23
    36ea:	9c 01       	movw	r18, r24
    36ec:	22 50       	subi	r18, 0x02	; 2
    36ee:	31 09       	sbc	r19, r1
    36f0:	e2 17       	cp	r30, r18
    36f2:	f3 07       	cpc	r31, r19
    36f4:	08 f4       	brcc	.+2      	; 0x36f8 <realloc+0x2e>
    36f6:	a8 c0       	rjmp	.+336    	; 0x3848 <realloc+0x17e>
    36f8:	d9 01       	movw	r26, r18
    36fa:	0d 91       	ld	r16, X+
    36fc:	1c 91       	ld	r17, X
    36fe:	11 97       	sbiw	r26, 0x01	; 1
    3700:	06 17       	cp	r16, r22
    3702:	17 07       	cpc	r17, r23
    3704:	b0 f0       	brcs	.+44     	; 0x3732 <realloc+0x68>
    3706:	05 30       	cpi	r16, 0x05	; 5
    3708:	11 05       	cpc	r17, r1
    370a:	08 f4       	brcc	.+2      	; 0x370e <realloc+0x44>
    370c:	9b c0       	rjmp	.+310    	; 0x3844 <realloc+0x17a>
    370e:	c8 01       	movw	r24, r16
    3710:	04 97       	sbiw	r24, 0x04	; 4
    3712:	86 17       	cp	r24, r22
    3714:	97 07       	cpc	r25, r23
    3716:	08 f4       	brcc	.+2      	; 0x371a <realloc+0x50>
    3718:	95 c0       	rjmp	.+298    	; 0x3844 <realloc+0x17a>
    371a:	02 50       	subi	r16, 0x02	; 2
    371c:	11 09       	sbc	r17, r1
    371e:	06 1b       	sub	r16, r22
    3720:	17 0b       	sbc	r17, r23
    3722:	01 93       	st	Z+, r16
    3724:	11 93       	st	Z+, r17
    3726:	6d 93       	st	X+, r22
    3728:	7c 93       	st	X, r23
    372a:	cf 01       	movw	r24, r30
    372c:	0e 94 3a 1a 	call	0x3474	; 0x3474 <free>
    3730:	89 c0       	rjmp	.+274    	; 0x3844 <realloc+0x17a>
    3732:	5b 01       	movw	r10, r22
    3734:	a0 1a       	sub	r10, r16
    3736:	b1 0a       	sbc	r11, r17
    3738:	4c 01       	movw	r8, r24
    373a:	80 0e       	add	r8, r16
    373c:	91 1e       	adc	r9, r17
    373e:	a0 91 6a 04 	lds	r26, 0x046A	; 0x80046a <__flp>
    3742:	b0 91 6b 04 	lds	r27, 0x046B	; 0x80046b <__flp+0x1>
    3746:	61 2c       	mov	r6, r1
    3748:	71 2c       	mov	r7, r1
    374a:	e1 2c       	mov	r14, r1
    374c:	f1 2c       	mov	r15, r1
    374e:	10 97       	sbiw	r26, 0x00	; 0
    3750:	09 f4       	brne	.+2      	; 0x3754 <realloc+0x8a>
    3752:	46 c0       	rjmp	.+140    	; 0x37e0 <realloc+0x116>
    3754:	8d 91       	ld	r24, X+
    3756:	9c 91       	ld	r25, X
    3758:	11 97       	sbiw	r26, 0x01	; 1
    375a:	a8 15       	cp	r26, r8
    375c:	b9 05       	cpc	r27, r9
    375e:	b1 f5       	brne	.+108    	; 0x37cc <realloc+0x102>
    3760:	6c 01       	movw	r12, r24
    3762:	42 e0       	ldi	r20, 0x02	; 2
    3764:	c4 0e       	add	r12, r20
    3766:	d1 1c       	adc	r13, r1
    3768:	ca 14       	cp	r12, r10
    376a:	db 04       	cpc	r13, r11
    376c:	78 f1       	brcs	.+94     	; 0x37cc <realloc+0x102>
    376e:	4c 01       	movw	r8, r24
    3770:	8a 18       	sub	r8, r10
    3772:	9b 08       	sbc	r9, r11
    3774:	64 01       	movw	r12, r8
    3776:	42 e0       	ldi	r20, 0x02	; 2
    3778:	c4 0e       	add	r12, r20
    377a:	d1 1c       	adc	r13, r1
    377c:	12 96       	adiw	r26, 0x02	; 2
    377e:	bc 90       	ld	r11, X
    3780:	12 97       	sbiw	r26, 0x02	; 2
    3782:	13 96       	adiw	r26, 0x03	; 3
    3784:	ac 91       	ld	r26, X
    3786:	b5 e0       	ldi	r27, 0x05	; 5
    3788:	cb 16       	cp	r12, r27
    378a:	d1 04       	cpc	r13, r1
    378c:	40 f0       	brcs	.+16     	; 0x379e <realloc+0xd4>
    378e:	b2 82       	std	Z+2, r11	; 0x02
    3790:	a3 83       	std	Z+3, r26	; 0x03
    3792:	91 82       	std	Z+1, r9	; 0x01
    3794:	80 82       	st	Z, r8
    3796:	d9 01       	movw	r26, r18
    3798:	6d 93       	st	X+, r22
    379a:	7c 93       	st	X, r23
    379c:	09 c0       	rjmp	.+18     	; 0x37b0 <realloc+0xe6>
    379e:	0e 5f       	subi	r16, 0xFE	; 254
    37a0:	1f 4f       	sbci	r17, 0xFF	; 255
    37a2:	80 0f       	add	r24, r16
    37a4:	91 1f       	adc	r25, r17
    37a6:	f9 01       	movw	r30, r18
    37a8:	91 83       	std	Z+1, r25	; 0x01
    37aa:	80 83       	st	Z, r24
    37ac:	eb 2d       	mov	r30, r11
    37ae:	fa 2f       	mov	r31, r26
    37b0:	e1 14       	cp	r14, r1
    37b2:	f1 04       	cpc	r15, r1
    37b4:	31 f0       	breq	.+12     	; 0x37c2 <realloc+0xf8>
    37b6:	d7 01       	movw	r26, r14
    37b8:	13 96       	adiw	r26, 0x03	; 3
    37ba:	fc 93       	st	X, r31
    37bc:	ee 93       	st	-X, r30
    37be:	12 97       	sbiw	r26, 0x02	; 2
    37c0:	41 c0       	rjmp	.+130    	; 0x3844 <realloc+0x17a>
    37c2:	f0 93 6b 04 	sts	0x046B, r31	; 0x80046b <__flp+0x1>
    37c6:	e0 93 6a 04 	sts	0x046A, r30	; 0x80046a <__flp>
    37ca:	3c c0       	rjmp	.+120    	; 0x3844 <realloc+0x17a>
    37cc:	68 16       	cp	r6, r24
    37ce:	79 06       	cpc	r7, r25
    37d0:	08 f4       	brcc	.+2      	; 0x37d4 <realloc+0x10a>
    37d2:	3c 01       	movw	r6, r24
    37d4:	7d 01       	movw	r14, r26
    37d6:	12 96       	adiw	r26, 0x02	; 2
    37d8:	0d 90       	ld	r0, X+
    37da:	bc 91       	ld	r27, X
    37dc:	a0 2d       	mov	r26, r0
    37de:	b7 cf       	rjmp	.-146    	; 0x374e <realloc+0x84>
    37e0:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <__brkval>
    37e4:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <__brkval+0x1>
    37e8:	88 16       	cp	r8, r24
    37ea:	99 06       	cpc	r9, r25
    37ec:	e1 f4       	brne	.+56     	; 0x3826 <realloc+0x15c>
    37ee:	66 16       	cp	r6, r22
    37f0:	77 06       	cpc	r7, r23
    37f2:	c8 f4       	brcc	.+50     	; 0x3826 <realloc+0x15c>
    37f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    37f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    37fc:	00 97       	sbiw	r24, 0x00	; 0
    37fe:	41 f4       	brne	.+16     	; 0x3810 <realloc+0x146>
    3800:	8d b7       	in	r24, 0x3d	; 61
    3802:	9e b7       	in	r25, 0x3e	; 62
    3804:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3808:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    380c:	84 1b       	sub	r24, r20
    380e:	95 0b       	sbc	r25, r21
    3810:	e8 17       	cp	r30, r24
    3812:	f9 07       	cpc	r31, r25
    3814:	c8 f4       	brcc	.+50     	; 0x3848 <realloc+0x17e>
    3816:	f0 93 69 04 	sts	0x0469, r31	; 0x800469 <__brkval+0x1>
    381a:	e0 93 68 04 	sts	0x0468, r30	; 0x800468 <__brkval>
    381e:	f9 01       	movw	r30, r18
    3820:	71 83       	std	Z+1, r23	; 0x01
    3822:	60 83       	st	Z, r22
    3824:	0f c0       	rjmp	.+30     	; 0x3844 <realloc+0x17a>
    3826:	cb 01       	movw	r24, r22
    3828:	0e 94 a2 19 	call	0x3344	; 0x3344 <malloc>
    382c:	7c 01       	movw	r14, r24
    382e:	00 97       	sbiw	r24, 0x00	; 0
    3830:	59 f0       	breq	.+22     	; 0x3848 <realloc+0x17e>
    3832:	a8 01       	movw	r20, r16
    3834:	be 01       	movw	r22, r28
    3836:	0e 94 39 1c 	call	0x3872	; 0x3872 <memcpy>
    383a:	ce 01       	movw	r24, r28
    383c:	0e 94 3a 1a 	call	0x3474	; 0x3474 <free>
    3840:	c7 01       	movw	r24, r14
    3842:	04 c0       	rjmp	.+8      	; 0x384c <realloc+0x182>
    3844:	ce 01       	movw	r24, r28
    3846:	02 c0       	rjmp	.+4      	; 0x384c <realloc+0x182>
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	cd b7       	in	r28, 0x3d	; 61
    384e:	de b7       	in	r29, 0x3e	; 62
    3850:	ee e0       	ldi	r30, 0x0E	; 14
    3852:	0c 94 80 1c 	jmp	0x3900	; 0x3900 <__epilogue_restores__+0x8>

00003856 <abort>:
    3856:	81 e0       	ldi	r24, 0x01	; 1
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	f8 94       	cli
    385c:	0c 94 97 1c 	jmp	0x392e	; 0x392e <_exit>

00003860 <memcpy_P>:
    3860:	fb 01       	movw	r30, r22
    3862:	dc 01       	movw	r26, r24
    3864:	02 c0       	rjmp	.+4      	; 0x386a <memcpy_P+0xa>
    3866:	05 90       	lpm	r0, Z+
    3868:	0d 92       	st	X+, r0
    386a:	41 50       	subi	r20, 0x01	; 1
    386c:	50 40       	sbci	r21, 0x00	; 0
    386e:	d8 f7       	brcc	.-10     	; 0x3866 <memcpy_P+0x6>
    3870:	08 95       	ret

00003872 <memcpy>:
    3872:	fb 01       	movw	r30, r22
    3874:	dc 01       	movw	r26, r24
    3876:	02 c0       	rjmp	.+4      	; 0x387c <memcpy+0xa>
    3878:	01 90       	ld	r0, Z+
    387a:	0d 92       	st	X+, r0
    387c:	41 50       	subi	r20, 0x01	; 1
    387e:	50 40       	sbci	r21, 0x00	; 0
    3880:	d8 f7       	brcc	.-10     	; 0x3878 <memcpy+0x6>
    3882:	08 95       	ret

00003884 <strcpy>:
    3884:	fb 01       	movw	r30, r22
    3886:	dc 01       	movw	r26, r24
    3888:	01 90       	ld	r0, Z+
    388a:	0d 92       	st	X+, r0
    388c:	00 20       	and	r0, r0
    388e:	e1 f7       	brne	.-8      	; 0x3888 <strcpy+0x4>
    3890:	08 95       	ret

00003892 <strncpy>:
    3892:	fb 01       	movw	r30, r22
    3894:	dc 01       	movw	r26, r24
    3896:	41 50       	subi	r20, 0x01	; 1
    3898:	50 40       	sbci	r21, 0x00	; 0
    389a:	48 f0       	brcs	.+18     	; 0x38ae <strncpy+0x1c>
    389c:	01 90       	ld	r0, Z+
    389e:	0d 92       	st	X+, r0
    38a0:	00 20       	and	r0, r0
    38a2:	c9 f7       	brne	.-14     	; 0x3896 <strncpy+0x4>
    38a4:	01 c0       	rjmp	.+2      	; 0x38a8 <strncpy+0x16>
    38a6:	1d 92       	st	X+, r1
    38a8:	41 50       	subi	r20, 0x01	; 1
    38aa:	50 40       	sbci	r21, 0x00	; 0
    38ac:	e0 f7       	brcc	.-8      	; 0x38a6 <strncpy+0x14>
    38ae:	08 95       	ret

000038b0 <__mulshisi3>:
    38b0:	b7 ff       	sbrs	r27, 7
    38b2:	0c 94 88 19 	jmp	0x3310	; 0x3310 <__muluhisi3>

000038b6 <__mulohisi3>:
    38b6:	0e 94 88 19 	call	0x3310	; 0x3310 <__muluhisi3>
    38ba:	82 1b       	sub	r24, r18
    38bc:	93 0b       	sbc	r25, r19
    38be:	08 95       	ret

000038c0 <__prologue_saves__>:
    38c0:	2f 92       	push	r2
    38c2:	3f 92       	push	r3
    38c4:	4f 92       	push	r4
    38c6:	5f 92       	push	r5
    38c8:	6f 92       	push	r6
    38ca:	7f 92       	push	r7
    38cc:	8f 92       	push	r8
    38ce:	9f 92       	push	r9
    38d0:	af 92       	push	r10
    38d2:	bf 92       	push	r11
    38d4:	cf 92       	push	r12
    38d6:	df 92       	push	r13
    38d8:	ef 92       	push	r14
    38da:	ff 92       	push	r15
    38dc:	0f 93       	push	r16
    38de:	1f 93       	push	r17
    38e0:	cf 93       	push	r28
    38e2:	df 93       	push	r29
    38e4:	cd b7       	in	r28, 0x3d	; 61
    38e6:	de b7       	in	r29, 0x3e	; 62
    38e8:	ca 1b       	sub	r28, r26
    38ea:	db 0b       	sbc	r29, r27
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	f8 94       	cli
    38f0:	de bf       	out	0x3e, r29	; 62
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	cd bf       	out	0x3d, r28	; 61
    38f6:	09 94       	ijmp

000038f8 <__epilogue_restores__>:
    38f8:	2a 88       	ldd	r2, Y+18	; 0x12
    38fa:	39 88       	ldd	r3, Y+17	; 0x11
    38fc:	48 88       	ldd	r4, Y+16	; 0x10
    38fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    3900:	6e 84       	ldd	r6, Y+14	; 0x0e
    3902:	7d 84       	ldd	r7, Y+13	; 0x0d
    3904:	8c 84       	ldd	r8, Y+12	; 0x0c
    3906:	9b 84       	ldd	r9, Y+11	; 0x0b
    3908:	aa 84       	ldd	r10, Y+10	; 0x0a
    390a:	b9 84       	ldd	r11, Y+9	; 0x09
    390c:	c8 84       	ldd	r12, Y+8	; 0x08
    390e:	df 80       	ldd	r13, Y+7	; 0x07
    3910:	ee 80       	ldd	r14, Y+6	; 0x06
    3912:	fd 80       	ldd	r15, Y+5	; 0x05
    3914:	0c 81       	ldd	r16, Y+4	; 0x04
    3916:	1b 81       	ldd	r17, Y+3	; 0x03
    3918:	aa 81       	ldd	r26, Y+2	; 0x02
    391a:	b9 81       	ldd	r27, Y+1	; 0x01
    391c:	ce 0f       	add	r28, r30
    391e:	d1 1d       	adc	r29, r1
    3920:	0f b6       	in	r0, 0x3f	; 63
    3922:	f8 94       	cli
    3924:	de bf       	out	0x3e, r29	; 62
    3926:	0f be       	out	0x3f, r0	; 63
    3928:	cd bf       	out	0x3d, r28	; 61
    392a:	ed 01       	movw	r28, r26
    392c:	08 95       	ret

0000392e <_exit>:
    392e:	f8 94       	cli

00003930 <__stop_program>:
    3930:	ff cf       	rjmp	.-2      	; 0x3930 <__stop_program>
