
helloworldleo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  0000163a  000016ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000163a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a3  0080014a  0080014a  00001718  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a1e9  00000000  00000000  00001c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002952  00000000  00000000  0000be11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ad8  00000000  00000000  0000e763  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dd8  00000000  00000000  0001123c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002e9c  00000000  00000000  00012014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004aad  00000000  00000000  00014eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000598  00000000  00000000  0001995d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
       4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
       8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
       c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      10:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      14:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      18:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      1c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      20:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      24:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      28:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__vector_10>
      2c:	0c 94 b3 03 	jmp	0x766	; 0x766 <__vector_11>
      30:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      34:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      38:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      3c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      40:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      44:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      48:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      4c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      50:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      54:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      58:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      5c:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__vector_23>
      60:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      64:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      68:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      6c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      70:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      74:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      78:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      7c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      80:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      84:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      88:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      8c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      90:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      94:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      98:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      9c:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      a0:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      a4:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>
      a8:	0c 94 12 01 	jmp	0x224	; 0x224 <__bad_interrupt>

000000ac <USB_DeviceDescriptorIAD>:
      ac:	12 01 00 02 ef 02 01 40 41 23 36 80 00 01 01 02     .......@A#6.....
      bc:	03 01                                               ..

000000be <STRING_MANUFACTURER>:
      be:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000ca <STRING_PRODUCT>:
      ca:	41 72 64 75 69 6e 6f 20 4c 65 6f 6e 61 72 64 6f     Arduino Leonardo
	...

000000db <STRING_LANGUAGE>:
      db:	04 03 09 04                                         ....

000000df <_asciimap>:
	...
      e7:	2a 2b 28 00 00 00 00 00 00 00 00 00 00 00 00 00     *+(.............
	...
      ff:	2c 9e b4 a0 a1 a2 a4 34 a6 a7 a5 ae 36 2d 37 38     ,......4....6-78
     10f:	27 1e 1f 20 21 22 23 24 25 26 b3 33 b6 2e b7 b8     '.. !"#$%&.3....
     11f:	9f 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f 90 91 92     ................
     12f:	93 94 95 96 97 98 99 9a 9b 9c 9d 2f 31 30 a3 ad     .........../10..
     13f:	35 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11 12     5...............
     14f:	13 14 15 16 17 18 19 1a 1b 1c 1d af b1 b0 b5 00     ................

0000015f <_ZL20_hidReportDescriptor>:
     15f:	05 01 09 06 a1 01 85 02 05 07 19 e0 29 e7 15 00     ............)...
     16f:	25 01 75 01 95 08 81 02 95 01 75 08 81 03 95 06     %.u.......u.....
     17f:	75 08 15 00 25 73 05 07 19 00 29 73 81 00 c0        u...%s....)s...

0000018e <_cdcInterface>:
     18e:	08 0b 00 02 02 02 00 00 09 04 00 00 01 02 02 00     ................
     19e:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1ae:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1be:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
	...

000001d0 <__ctors_start>:
     1d0:	cc 07       	cpc	r28, r28
     1d2:	d5 08       	sbc	r13, r5

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	da e0       	ldi	r29, 0x0A	; 10
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_copy_data>:
     1e0:	11 e0       	ldi	r17, 0x01	; 1
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	ea e3       	ldi	r30, 0x3A	; 58
     1e8:	f6 e1       	ldi	r31, 0x16	; 22
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x10>
     1ec:	05 90       	lpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	aa 34       	cpi	r26, 0x4A	; 74
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0xc>

000001f6 <__do_clear_bss>:
     1f6:	21 e0       	ldi	r18, 0x01	; 1
     1f8:	aa e4       	ldi	r26, 0x4A	; 74
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	ad 3e       	cpi	r26, 0xED	; 237
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>

00000206 <__do_global_ctors>:
     206:	10 e0       	ldi	r17, 0x00	; 0
     208:	ca ee       	ldi	r28, 0xEA	; 234
     20a:	d0 e0       	ldi	r29, 0x00	; 0
     20c:	04 c0       	rjmp	.+8      	; 0x216 <__do_global_ctors+0x10>
     20e:	21 97       	sbiw	r28, 0x01	; 1
     210:	fe 01       	movw	r30, r28
     212:	0e 94 15 0b 	call	0x162a	; 0x162a <__tablejump2__>
     216:	c8 3e       	cpi	r28, 0xE8	; 232
     218:	d1 07       	cpc	r29, r17
     21a:	c9 f7       	brne	.-14     	; 0x20e <__do_global_ctors+0x8>
     21c:	0e 94 44 01 	call	0x288	; 0x288 <main>
     220:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <_exit>

00000224 <__bad_interrupt>:
     224:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000228 <setup>:
//End of Auto generated function prototypes by Atmel Studio



void setup() {
    MCUSR &= ~_BV(WDRF);
     228:	84 b7       	in	r24, 0x34	; 52
     22a:	87 7f       	andi	r24, 0xF7	; 247
     22c:	84 bf       	out	0x34, r24	; 52
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	f8 94       	cli
     232:	a8 95       	wdr
     234:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     238:	88 61       	ori	r24, 0x18	; 24
     23a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     23e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     242:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
    
    set_bit(DDRF, DDF0);
     244:	80 9a       	sbi	0x10, 0	; 16
    clear_bit(PORTF, PF0);
     246:	88 98       	cbi	0x11, 0	; 17
        
    set_bit(DDRF, DDF1);
     248:	81 9a       	sbi	0x10, 1	; 16
    set_bit(PORTF, PF1);
     24a:	89 9a       	sbi	0x11, 1	; 17
        
    set_bit(DDRB, DDB4);
     24c:	24 9a       	sbi	0x04, 4	; 4
    clear_bit(PORTB, PB4);
     24e:	2c 98       	cbi	0x05, 4	; 5

    clear_bit(DDRD, DDD6);
     250:	56 98       	cbi	0x0a, 6	; 10
    set_bit(PORTD, PD6);
     252:	5e 9a       	sbi	0x0b, 6	; 11
    
    Keyboard.begin();
     254:	83 e6       	ldi	r24, 0x63	; 99
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <_ZN9Keyboard_5beginEv>

0000025c <loop>:
}

void loop() {
    if (PIND & _BV(PIND6))
     25c:	4e 9b       	sbis	0x09, 6	; 9
     25e:	02 c0       	rjmp	.+4      	; 0x264 <loop+0x8>
    {
        clear_bit(PORTB, PB4);
     260:	2c 98       	cbi	0x05, 4	; 5
     262:	08 95       	ret
    }
    else
    {
        Keyboard.print("hellow dreg");
     264:	63 e1       	ldi	r22, 0x13	; 19
     266:	71 e0       	ldi	r23, 0x01	; 1
     268:	83 e6       	ldi	r24, 0x63	; 99
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <_ZN5Print5printEPKc>
        set_bit(PORTB, PB4);
     270:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     272:	2f ef       	ldi	r18, 0xFF	; 255
     274:	83 ec       	ldi	r24, 0xC3	; 195
     276:	99 e0       	ldi	r25, 0x09	; 9
     278:	21 50       	subi	r18, 0x01	; 1
     27a:	80 40       	sbci	r24, 0x00	; 0
     27c:	90 40       	sbci	r25, 0x00	; 0
     27e:	e1 f7       	brne	.-8      	; 0x278 <loop+0x1c>
     280:	00 c0       	rjmp	.+0      	; 0x282 <loop+0x26>
     282:	00 00       	nop
     284:	08 95       	ret

00000286 <initVariant>:
     286:	08 95       	ret

00000288 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     288:	0e 94 56 06 	call	0xcac	; 0xcac <init>

	initVariant();
     28c:	0e 94 43 01 	call	0x286	; 0x286 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
     290:	8a e4       	ldi	r24, 0x4A	; 74
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	0e 94 98 05 	call	0xb30	; 0xb30 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
     298:	0e 94 14 01 	call	0x228	; 0x228 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     29c:	c0 e0       	ldi	r28, 0x00	; 0
     29e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
     2a0:	0e 94 2e 01 	call	0x25c	; 0x25c <loop>
		if (serialEventRun) serialEventRun();
     2a4:	20 97       	sbiw	r28, 0x00	; 0
     2a6:	e1 f3       	breq	.-8      	; 0x2a0 <main+0x18>
     2a8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     2ac:	f9 cf       	rjmp	.-14     	; 0x2a0 <main+0x18>

000002ae <_ZN5Print17availableForWriteEv>:
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	08 95       	ret

000002b4 <_ZN5Print5flushEv>:
     2b4:	08 95       	ret

000002b6 <_ZN5Print5writeEPKc>:
     2b6:	61 15       	cp	r22, r1
     2b8:	71 05       	cpc	r23, r1
     2ba:	79 f0       	breq	.+30     	; 0x2da <_ZN5Print5writeEPKc+0x24>
     2bc:	fb 01       	movw	r30, r22
     2be:	01 90       	ld	r0, Z+
     2c0:	00 20       	and	r0, r0
     2c2:	e9 f7       	brne	.-6      	; 0x2be <_ZN5Print5writeEPKc+0x8>
     2c4:	31 97       	sbiw	r30, 0x01	; 1
     2c6:	af 01       	movw	r20, r30
     2c8:	46 1b       	sub	r20, r22
     2ca:	57 0b       	sbc	r21, r23
     2cc:	dc 01       	movw	r26, r24
     2ce:	ed 91       	ld	r30, X+
     2d0:	fc 91       	ld	r31, X
     2d2:	02 80       	ldd	r0, Z+2	; 0x02
     2d4:	f3 81       	ldd	r31, Z+3	; 0x03
     2d6:	e0 2d       	mov	r30, r0
     2d8:	09 94       	ijmp
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	08 95       	ret

000002e0 <_ZN5Print5printEPKc>:
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     2e0:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <_ZN5Print5writeEPKc>

000002e4 <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
     2e4:	61 50       	subi	r22, 0x01	; 1
     2e6:	30 f0       	brcs	.+12     	; 0x2f4 <_ZL4RecvPVhh+0x10>
     2e8:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     2ec:	fc 01       	movw	r30, r24
     2ee:	20 83       	st	Z, r18
     2f0:	01 96       	adiw	r24, 0x01	; 1
     2f2:	f8 cf       	rjmp	.-16     	; 0x2e4 <_ZL4RecvPVhh>
     2f4:	28 98       	cbi	0x05, 0	; 5
     2f6:	84 e6       	ldi	r24, 0x64	; 100
     2f8:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <RxLEDPulse>
     2fc:	08 95       	ret

000002fe <_ZL11SendControlh>:
     2fe:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <_ZL6_cmark>
     302:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <_ZL6_cmark+0x1>
     306:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <_ZL5_cend>
     30a:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <_ZL5_cend+0x1>
     30e:	42 17       	cp	r20, r18
     310:	53 07       	cpc	r21, r19
     312:	b4 f4       	brge	.+44     	; 0x340 <_ZL11SendControlh+0x42>
     314:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     318:	95 70       	andi	r25, 0x05	; 5
     31a:	e1 f3       	breq	.-8      	; 0x314 <_ZL11SendControlh+0x16>
     31c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     320:	92 fd       	sbrc	r25, 2
     322:	19 c0       	rjmp	.+50     	; 0x356 <_ZL11SendControlh+0x58>
     324:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     328:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <_ZL6_cmark>
     32c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <_ZL6_cmark+0x1>
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	8f 73       	andi	r24, 0x3F	; 63
     334:	99 27       	eor	r25, r25
     336:	89 2b       	or	r24, r25
     338:	19 f4       	brne	.+6      	; 0x340 <_ZL11SendControlh+0x42>
     33a:	8e ef       	ldi	r24, 0xFE	; 254
     33c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     340:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <_ZL6_cmark>
     344:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <_ZL6_cmark+0x1>
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <_ZL6_cmark+0x1>
     34e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <_ZL6_cmark>
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	08 95       	ret
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	08 95       	ret

0000035a <_ZL24USB_SendStringDescriptorPKhhh>:
     35a:	df 92       	push	r13
     35c:	ef 92       	push	r14
     35e:	ff 92       	push	r15
     360:	0f 93       	push	r16
     362:	1f 93       	push	r17
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	d8 2e       	mov	r13, r24
     36a:	f9 2e       	mov	r15, r25
     36c:	e4 2e       	mov	r14, r20
     36e:	06 2f       	mov	r16, r22
     370:	10 e0       	ldi	r17, 0x00	; 0
     372:	c8 01       	movw	r24, r16
     374:	01 96       	adiw	r24, 0x01	; 1
     376:	88 0f       	add	r24, r24
     378:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZL11SendControlh>
     37c:	83 e0       	ldi	r24, 0x03	; 3
     37e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZL11SendControlh>
     382:	cd 2d       	mov	r28, r13
     384:	df 2d       	mov	r29, r15
     386:	0c 0f       	add	r16, r28
     388:	1d 1f       	adc	r17, r29
     38a:	c0 17       	cp	r28, r16
     38c:	d1 07       	cpc	r29, r17
     38e:	89 f0       	breq	.+34     	; 0x3b2 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
     390:	e7 fe       	sbrs	r14, 7
     392:	03 c0       	rjmp	.+6      	; 0x39a <_ZL24USB_SendStringDescriptorPKhhh+0x40>
     394:	fe 01       	movw	r30, r28
     396:	84 91       	lpm	r24, Z
     398:	01 c0       	rjmp	.+2      	; 0x39c <_ZL24USB_SendStringDescriptorPKhhh+0x42>
     39a:	88 81       	ld	r24, Y
     39c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZL11SendControlh>
     3a0:	f8 2e       	mov	r15, r24
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZL11SendControlh>
     3a8:	8f 21       	and	r24, r15
     3aa:	21 96       	adiw	r28, 0x01	; 1
     3ac:	81 11       	cpse	r24, r1
     3ae:	ed cf       	rjmp	.-38     	; 0x38a <_ZL24USB_SendStringDescriptorPKhhh+0x30>
     3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	ff 90       	pop	r15
     3be:	ef 90       	pop	r14
     3c0:	df 90       	pop	r13
     3c2:	08 95       	ret

000003c4 <_ZL15USB_ClockEnablev>:
     3c4:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
     3c8:	81 60       	ori	r24, 0x01	; 1
     3ca:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7f80d7>
     3ce:	80 ea       	ldi	r24, 0xA0	; 160
     3d0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     3d4:	89 b5       	in	r24, 0x29	; 41
     3d6:	80 61       	ori	r24, 0x10	; 16
     3d8:	89 bd       	out	0x29, r24	; 41
     3da:	89 b5       	in	r24, 0x29	; 41
     3dc:	82 60       	ori	r24, 0x02	; 2
     3de:	89 bd       	out	0x29, r24	; 41
     3e0:	09 b4       	in	r0, 0x29	; 41
     3e2:	00 fe       	sbrs	r0, 0
     3e4:	fd cf       	rjmp	.-6      	; 0x3e0 <_ZL15USB_ClockEnablev+0x1c>
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 1a 06 	call	0xc34	; 0xc34 <delay>
     3f2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     3f6:	8f 7c       	andi	r24, 0xCF	; 207
     3f8:	80 61       	ori	r24, 0x10	; 16
     3fa:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
     3fe:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     402:	80 7f       	andi	r24, 0xF0	; 240
     404:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     408:	08 95       	ret

0000040a <_ZL14SendInterfacesv>:
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	1f 92       	push	r1
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	19 82       	std	Y+1, r1	; 0x01
     416:	ce 01       	movw	r24, r28
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	0e 94 3c 08 	call	0x1078	; 0x1078 <_Z16CDC_GetInterfacePh>
     41e:	0e 94 b7 09 	call	0x136e	; 0x136e <_Z12PluggableUSBv>
     422:	be 01       	movw	r22, r28
     424:	6f 5f       	subi	r22, 0xFF	; 255
     426:	7f 4f       	sbci	r23, 0xFF	; 255
     428:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <_ZN13PluggableUSB_12getInterfaceEPh>
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	0f 90       	pop	r0
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <_ZN6LockEPC1Eh>:
     436:	2f b7       	in	r18, 0x3f	; 63
     438:	fc 01       	movw	r30, r24
     43a:	20 83       	st	Z, r18
     43c:	f8 94       	cli
     43e:	67 70       	andi	r22, 0x07	; 7
     440:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     444:	08 95       	ret

00000446 <_Z13USB_Availableh>:
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	1f 92       	push	r1
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	68 2f       	mov	r22, r24
     452:	ce 01       	movw	r24, r28
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6LockEPC1Eh>
     45a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     45e:	99 81       	ldd	r25, Y+1	; 0x01
     460:	9f bf       	out	0x3f, r25	; 63
     462:	0f 90       	pop	r0
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <_Z8USB_RecvhPvi>:
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	1f 92       	push	r1
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
     47c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_usbConfiguration>
     480:	99 23       	and	r25, r25
     482:	11 f0       	breq	.+4      	; 0x488 <_Z8USB_RecvhPvi+0x1e>
     484:	57 ff       	sbrs	r21, 7
     486:	03 c0       	rjmp	.+6      	; 0x48e <_Z8USB_RecvhPvi+0x24>
     488:	8f ef       	ldi	r24, 0xFF	; 255
     48a:	9f ef       	ldi	r25, 0xFF	; 255
     48c:	29 c0       	rjmp	.+82     	; 0x4e0 <_Z8USB_RecvhPvi+0x76>
     48e:	8a 01       	movw	r16, r20
     490:	7b 01       	movw	r14, r22
     492:	68 2f       	mov	r22, r24
     494:	ce 01       	movw	r24, r28
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6LockEPC1Eh>
     49c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	02 17       	cp	r16, r18
     4a4:	13 07       	cpc	r17, r19
     4a6:	0c f4       	brge	.+2      	; 0x4aa <_Z8USB_RecvhPvi+0x40>
     4a8:	98 01       	movw	r18, r16
     4aa:	82 2f       	mov	r24, r18
     4ac:	f7 01       	movw	r30, r14
     4ae:	94 e6       	ldi	r25, 0x64	; 100
     4b0:	81 50       	subi	r24, 0x01	; 1
     4b2:	38 f0       	brcs	.+14     	; 0x4c2 <_Z8USB_RecvhPvi+0x58>
     4b4:	28 98       	cbi	0x05, 0	; 5
     4b6:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <RxLEDPulse>
     4ba:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     4be:	41 93       	st	Z+, r20
     4c0:	f7 cf       	rjmp	.-18     	; 0x4b0 <_Z8USB_RecvhPvi+0x46>
     4c2:	21 15       	cp	r18, r1
     4c4:	31 05       	cpc	r19, r1
     4c6:	21 f0       	breq	.+8      	; 0x4d0 <_Z8USB_RecvhPvi+0x66>
     4c8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     4cc:	88 23       	and	r24, r24
     4ce:	21 f0       	breq	.+8      	; 0x4d8 <_Z8USB_RecvhPvi+0x6e>
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	8f bf       	out	0x3f, r24	; 63
     4d4:	c9 01       	movw	r24, r18
     4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <_Z8USB_RecvhPvi+0x76>
     4d8:	8b e6       	ldi	r24, 0x6B	; 107
     4da:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     4de:	f8 cf       	rjmp	.-16     	; 0x4d0 <_Z8USB_RecvhPvi+0x66>
     4e0:	0f 90       	pop	r0
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	08 95       	ret

000004f0 <_Z8USB_Recvh>:
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	1f 92       	push	r1
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	41 e0       	ldi	r20, 0x01	; 1
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	be 01       	movw	r22, r28
     500:	6f 5f       	subi	r22, 0xFF	; 255
     502:	7f 4f       	sbci	r23, 0xFF	; 255
     504:	0e 94 35 02 	call	0x46a	; 0x46a <_Z8USB_RecvhPvi>
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	19 f4       	brne	.+6      	; 0x512 <_Z8USB_Recvh+0x22>
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	02 c0       	rjmp	.+4      	; 0x516 <_Z8USB_Recvh+0x26>
     512:	8f ef       	ldi	r24, 0xFF	; 255
     514:	9f ef       	ldi	r25, 0xFF	; 255
     516:	0f 90       	pop	r0
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	08 95       	ret

0000051e <_Z13USB_SendSpaceh>:
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	1f 92       	push	r1
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	68 2f       	mov	r22, r24
     52a:	ce 01       	movw	r24, r28
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6LockEPC1Eh>
     532:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     536:	89 2f       	mov	r24, r25
     538:	80 72       	andi	r24, 0x20	; 32
     53a:	95 ff       	sbrs	r25, 5
     53c:	04 c0       	rjmp	.+8      	; 0x546 <_Z13USB_SendSpaceh+0x28>
     53e:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     542:	80 e4       	ldi	r24, 0x40	; 64
     544:	89 1b       	sub	r24, r25
     546:	99 81       	ldd	r25, Y+1	; 0x01
     548:	9f bf       	out	0x3f, r25	; 63
     54a:	0f 90       	pop	r0
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <_Z8USB_SendhPKvi>:
     552:	5f 92       	push	r5
     554:	6f 92       	push	r6
     556:	7f 92       	push	r7
     558:	8f 92       	push	r8
     55a:	9f 92       	push	r9
     55c:	af 92       	push	r10
     55e:	bf 92       	push	r11
     560:	cf 92       	push	r12
     562:	df 92       	push	r13
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	1f 92       	push	r1
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	98 2e       	mov	r9, r24
     578:	6b 01       	movw	r12, r22
     57a:	b4 2e       	mov	r11, r20
     57c:	05 2f       	mov	r16, r21
     57e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <_usbConfiguration>
     582:	81 11       	cpse	r24, r1
     584:	03 c0       	rjmp	.+6      	; 0x58c <_Z8USB_SendhPKvi+0x3a>
     586:	8f ef       	ldi	r24, 0xFF	; 255
     588:	9f ef       	ldi	r25, 0xFF	; 255
     58a:	77 c0       	rjmp	.+238    	; 0x67a <_Z8USB_SendhPKvi+0x128>
     58c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <_usbSuspendState>
     590:	80 ff       	sbrs	r24, 0
     592:	05 c0       	rjmp	.+10     	; 0x59e <_Z8USB_SendhPKvi+0x4c>
     594:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     598:	82 60       	ori	r24, 0x02	; 2
     59a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
     59e:	eb 2c       	mov	r14, r11
     5a0:	f0 2e       	mov	r15, r16
     5a2:	a1 2c       	mov	r10, r1
     5a4:	8a ef       	ldi	r24, 0xFA	; 250
     5a6:	88 2e       	mov	r8, r24
     5a8:	89 2d       	mov	r24, r9
     5aa:	80 72       	andi	r24, 0x20	; 32
     5ac:	68 2e       	mov	r6, r24
     5ae:	89 2d       	mov	r24, r9
     5b0:	80 74       	andi	r24, 0x40	; 64
     5b2:	58 2e       	mov	r5, r24
     5b4:	9a e3       	ldi	r25, 0x3A	; 58
     5b6:	79 2e       	mov	r7, r25
     5b8:	e1 14       	cp	r14, r1
     5ba:	f1 04       	cpc	r15, r1
     5bc:	19 f4       	brne	.+6      	; 0x5c4 <_Z8USB_SendhPKvi+0x72>
     5be:	aa 20       	and	r10, r10
     5c0:	09 f4       	brne	.+2      	; 0x5c4 <_Z8USB_SendhPKvi+0x72>
     5c2:	55 c0       	rjmp	.+170    	; 0x66e <_Z8USB_SendhPKvi+0x11c>
     5c4:	89 2d       	mov	r24, r9
     5c6:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z13USB_SendSpaceh>
     5ca:	18 2f       	mov	r17, r24
     5cc:	81 11       	cpse	r24, r1
     5ce:	0a c0       	rjmp	.+20     	; 0x5e4 <_Z8USB_SendhPKvi+0x92>
     5d0:	8a 94       	dec	r8
     5d2:	88 20       	and	r8, r8
     5d4:	c1 f2       	breq	.-80     	; 0x586 <_Z8USB_SendhPKvi+0x34>
     5d6:	61 e0       	ldi	r22, 0x01	; 1
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 1a 06 	call	0xc34	; 0xc34 <delay>
     5e2:	ea cf       	rjmp	.-44     	; 0x5b8 <_Z8USB_SendhPKvi+0x66>
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	e8 16       	cp	r14, r24
     5e8:	f9 06       	cpc	r15, r25
     5ea:	0c f4       	brge	.+2      	; 0x5ee <_Z8USB_SendhPKvi+0x9c>
     5ec:	1e 2d       	mov	r17, r14
     5ee:	69 2d       	mov	r22, r9
     5f0:	ce 01       	movw	r24, r28
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6LockEPC1Eh>
     5f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     5fc:	85 ff       	sbrs	r24, 5
     5fe:	34 c0       	rjmp	.+104    	; 0x668 <_Z8USB_SendhPKvi+0x116>
     600:	81 2f       	mov	r24, r17
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	e8 1a       	sub	r14, r24
     606:	f9 0a       	sbc	r15, r25
     608:	66 20       	and	r6, r6
     60a:	29 f0       	breq	.+10     	; 0x616 <_Z8USB_SendhPKvi+0xc4>
     60c:	11 50       	subi	r17, 0x01	; 1
     60e:	a0 f0       	brcs	.+40     	; 0x638 <_Z8USB_SendhPKvi+0xe6>
     610:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     614:	fb cf       	rjmp	.-10     	; 0x60c <_Z8USB_SendhPKvi+0xba>
     616:	f6 01       	movw	r30, r12
     618:	97 fe       	sbrs	r9, 7
     61a:	0a c0       	rjmp	.+20     	; 0x630 <_Z8USB_SendhPKvi+0xde>
     61c:	11 50       	subi	r17, 0x01	; 1
     61e:	50 f0       	brcs	.+20     	; 0x634 <_Z8USB_SendhPKvi+0xe2>
     620:	24 91       	lpm	r18, Z
     622:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     626:	31 96       	adiw	r30, 0x01	; 1
     628:	f9 cf       	rjmp	.-14     	; 0x61c <_Z8USB_SendhPKvi+0xca>
     62a:	21 91       	ld	r18, Z+
     62c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     630:	11 50       	subi	r17, 0x01	; 1
     632:	d8 f7       	brcc	.-10     	; 0x62a <_Z8USB_SendhPKvi+0xd8>
     634:	c8 0e       	add	r12, r24
     636:	d9 1e       	adc	r13, r25
     638:	aa 20       	and	r10, r10
     63a:	19 f0       	breq	.+6      	; 0x642 <_Z8USB_SendhPKvi+0xf0>
     63c:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     640:	0b c0       	rjmp	.+22     	; 0x658 <_Z8USB_SendhPKvi+0x106>
     642:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     646:	85 fd       	sbrc	r24, 5
     648:	09 c0       	rjmp	.+18     	; 0x65c <_Z8USB_SendhPKvi+0x10a>
     64a:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     64e:	aa 24       	eor	r10, r10
     650:	a3 94       	inc	r10
     652:	e1 14       	cp	r14, r1
     654:	f1 04       	cpc	r15, r1
     656:	41 f0       	breq	.+16     	; 0x668 <_Z8USB_SendhPKvi+0x116>
     658:	a1 2c       	mov	r10, r1
     65a:	06 c0       	rjmp	.+12     	; 0x668 <_Z8USB_SendhPKvi+0x116>
     65c:	e1 14       	cp	r14, r1
     65e:	f1 04       	cpc	r15, r1
     660:	19 f4       	brne	.+6      	; 0x668 <_Z8USB_SendhPKvi+0x116>
     662:	51 10       	cpse	r5, r1
     664:	70 92 e8 00 	sts	0x00E8, r7	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	8f bf       	out	0x3f, r24	; 63
     66c:	a5 cf       	rjmp	.-182    	; 0x5b8 <_Z8USB_SendhPKvi+0x66>
     66e:	5d 98       	cbi	0x0b, 5	; 11
     670:	84 e6       	ldi	r24, 0x64	; 100
     672:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <TxLEDPulse>
     676:	8b 2d       	mov	r24, r11
     678:	90 2f       	mov	r25, r16
     67a:	0f 90       	pop	r0
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	df 90       	pop	r13
     68a:	cf 90       	pop	r12
     68c:	bf 90       	pop	r11
     68e:	af 90       	pop	r10
     690:	9f 90       	pop	r9
     692:	8f 90       	pop	r8
     694:	7f 90       	pop	r7
     696:	6f 90       	pop	r6
     698:	5f 90       	pop	r5
     69a:	08 95       	ret

0000069c <_Z11InitControli>:
     69c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     6a0:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <_ZL6_cmark+0x1>
     6a4:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <_ZL6_cmark>
     6a8:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <_ZL5_cend+0x1>
     6ac:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <_ZL5_cend>
     6b0:	08 95       	ret

000006b2 <_Z15USB_SendControlhPKvi>:
     6b2:	df 92       	push	r13
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	d8 2e       	mov	r13, r24
     6c2:	8a 01       	movw	r16, r20
     6c4:	7b 01       	movw	r14, r22
     6c6:	e4 0e       	add	r14, r20
     6c8:	f5 1e       	adc	r15, r21
     6ca:	eb 01       	movw	r28, r22
     6cc:	ce 15       	cp	r28, r14
     6ce:	df 05       	cpc	r29, r15
     6d0:	71 f0       	breq	.+28     	; 0x6ee <_Z15USB_SendControlhPKvi+0x3c>
     6d2:	d7 fe       	sbrs	r13, 7
     6d4:	03 c0       	rjmp	.+6      	; 0x6dc <_Z15USB_SendControlhPKvi+0x2a>
     6d6:	fe 01       	movw	r30, r28
     6d8:	84 91       	lpm	r24, Z
     6da:	01 c0       	rjmp	.+2      	; 0x6de <_Z15USB_SendControlhPKvi+0x2c>
     6dc:	88 81       	ld	r24, Y
     6de:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZL11SendControlh>
     6e2:	21 96       	adiw	r28, 0x01	; 1
     6e4:	81 11       	cpse	r24, r1
     6e6:	f2 cf       	rjmp	.-28     	; 0x6cc <_Z15USB_SendControlhPKvi+0x1a>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	9f ef       	ldi	r25, 0xFF	; 255
     6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <_Z15USB_SendControlhPKvi+0x3e>
     6ee:	c8 01       	movw	r24, r16
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	df 90       	pop	r13
     6fe:	08 95       	ret

00000700 <_Z15USB_RecvControlPvi>:
     700:	af 92       	push	r10
     702:	bf 92       	push	r11
     704:	df 92       	push	r13
     706:	ef 92       	push	r14
     708:	ff 92       	push	r15
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	5c 01       	movw	r10, r24
     714:	8b 01       	movw	r16, r22
     716:	eb 01       	movw	r28, r22
     718:	9b ef       	ldi	r25, 0xFB	; 251
     71a:	d9 2e       	mov	r13, r25
     71c:	20 97       	sbiw	r28, 0x00	; 0
     71e:	c1 f0       	breq	.+48     	; 0x750 <_Z15USB_RecvControlPvi+0x50>
     720:	7e 01       	movw	r14, r28
     722:	c1 34       	cpi	r28, 0x41	; 65
     724:	d1 05       	cpc	r29, r1
     726:	1c f0       	brlt	.+6      	; 0x72e <_Z15USB_RecvControlPvi+0x2e>
     728:	80 e4       	ldi	r24, 0x40	; 64
     72a:	e8 2e       	mov	r14, r24
     72c:	f1 2c       	mov	r15, r1
     72e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     732:	82 ff       	sbrs	r24, 2
     734:	fc cf       	rjmp	.-8      	; 0x72e <_Z15USB_RecvControlPvi+0x2e>
     736:	c8 01       	movw	r24, r16
     738:	8c 1b       	sub	r24, r28
     73a:	9d 0b       	sbc	r25, r29
     73c:	6e 2d       	mov	r22, r14
     73e:	8a 0d       	add	r24, r10
     740:	9b 1d       	adc	r25, r11
     742:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_ZL4RecvPVhh>
     746:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     74a:	ce 19       	sub	r28, r14
     74c:	df 09       	sbc	r29, r15
     74e:	e6 cf       	rjmp	.-52     	; 0x71c <_Z15USB_RecvControlPvi+0x1c>
     750:	c8 01       	movw	r24, r16
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	df 90       	pop	r13
     760:	bf 90       	pop	r11
     762:	af 90       	pop	r10
     764:	08 95       	ret

00000766 <__vector_11>:
     766:	1f 92       	push	r1
     768:	0f 92       	push	r0
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	0f 92       	push	r0
     76e:	11 24       	eor	r1, r1
     770:	cf 92       	push	r12
     772:	df 92       	push	r13
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	2f 93       	push	r18
     77e:	3f 93       	push	r19
     780:	4f 93       	push	r20
     782:	5f 93       	push	r21
     784:	6f 93       	push	r22
     786:	7f 93       	push	r23
     788:	8f 93       	push	r24
     78a:	9f 93       	push	r25
     78c:	af 93       	push	r26
     78e:	bf 93       	push	r27
     790:	ef 93       	push	r30
     792:	ff 93       	push	r31
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
     79c:	6c 97       	sbiw	r28, 0x1c	; 28
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     7a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     7aa:	83 ff       	sbrs	r24, 3
     7ac:	17 c1       	rjmp	.+558    	; 0x9dc <__vector_11+0x276>
     7ae:	68 e0       	ldi	r22, 0x08	; 8
     7b0:	ce 01       	movw	r24, r28
     7b2:	45 96       	adiw	r24, 0x15	; 21
     7b4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <_ZL4RecvPVhh>
     7b8:	82 ef       	ldi	r24, 0xF2	; 242
     7ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     7be:	8d 89       	ldd	r24, Y+21	; 0x15
     7c0:	87 ff       	sbrs	r24, 7
     7c2:	05 c0       	rjmp	.+10     	; 0x7ce <__vector_11+0x68>
     7c4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     7c8:	90 ff       	sbrs	r25, 0
     7ca:	fc cf       	rjmp	.-8      	; 0x7c4 <__vector_11+0x5e>
     7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <__vector_11+0x6e>
     7ce:	9e ef       	ldi	r25, 0xFE	; 254
     7d0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     7d4:	98 2f       	mov	r25, r24
     7d6:	90 76       	andi	r25, 0x60	; 96
     7d8:	09 f0       	breq	.+2      	; 0x7dc <__vector_11+0x76>
     7da:	d8 c0       	rjmp	.+432    	; 0x98c <__vector_11+0x226>
     7dc:	9e 89       	ldd	r25, Y+22	; 0x16
     7de:	4f 89       	ldd	r20, Y+23	; 0x17
     7e0:	58 8d       	ldd	r21, Y+24	; 0x18
     7e2:	2f 89       	ldd	r18, Y+23	; 0x17
     7e4:	18 8d       	ldd	r17, Y+24	; 0x18
     7e6:	91 11       	cpse	r25, r1
     7e8:	0c c0       	rjmp	.+24     	; 0x802 <__vector_11+0x9c>
     7ea:	80 38       	cpi	r24, 0x80	; 128
     7ec:	29 f4       	brne	.+10     	; 0x7f8 <__vector_11+0x92>
     7ee:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_usbCurrentStatus>
     7f2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     7f6:	02 c0       	rjmp	.+4      	; 0x7fc <__vector_11+0x96>
     7f8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     7fc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     800:	e6 c0       	rjmp	.+460    	; 0x9ce <__vector_11+0x268>
     802:	91 30       	cpi	r25, 0x01	; 1
     804:	51 f4       	brne	.+20     	; 0x81a <__vector_11+0xb4>
     806:	81 11       	cpse	r24, r1
     808:	e2 c0       	rjmp	.+452    	; 0x9ce <__vector_11+0x268>
     80a:	41 30       	cpi	r20, 0x01	; 1
     80c:	51 05       	cpc	r21, r1
     80e:	09 f0       	breq	.+2      	; 0x812 <__vector_11+0xac>
     810:	de c0       	rjmp	.+444    	; 0x9ce <__vector_11+0x268>
     812:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_usbCurrentStatus>
     816:	8d 7f       	andi	r24, 0xFD	; 253
     818:	0b c0       	rjmp	.+22     	; 0x830 <__vector_11+0xca>
     81a:	93 30       	cpi	r25, 0x03	; 3
     81c:	61 f4       	brne	.+24     	; 0x836 <__vector_11+0xd0>
     81e:	81 11       	cpse	r24, r1
     820:	d6 c0       	rjmp	.+428    	; 0x9ce <__vector_11+0x268>
     822:	41 30       	cpi	r20, 0x01	; 1
     824:	51 05       	cpc	r21, r1
     826:	09 f0       	breq	.+2      	; 0x82a <__vector_11+0xc4>
     828:	d2 c0       	rjmp	.+420    	; 0x9ce <__vector_11+0x268>
     82a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_usbCurrentStatus>
     82e:	82 60       	ori	r24, 0x02	; 2
     830:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <_usbCurrentStatus>
     834:	cc c0       	rjmp	.+408    	; 0x9ce <__vector_11+0x268>
     836:	95 30       	cpi	r25, 0x05	; 5
     838:	49 f4       	brne	.+18     	; 0x84c <__vector_11+0xe6>
     83a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     83e:	80 ff       	sbrs	r24, 0
     840:	fc cf       	rjmp	.-8      	; 0x83a <__vector_11+0xd4>
     842:	82 2f       	mov	r24, r18
     844:	80 68       	ori	r24, 0x80	; 128
     846:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
     84a:	c1 c0       	rjmp	.+386    	; 0x9ce <__vector_11+0x268>
     84c:	96 30       	cpi	r25, 0x06	; 6
     84e:	09 f0       	breq	.+2      	; 0x852 <__vector_11+0xec>
     850:	70 c0       	rjmp	.+224    	; 0x932 <__vector_11+0x1cc>
     852:	eb 8c       	ldd	r14, Y+27	; 0x1b
     854:	fc 8c       	ldd	r15, Y+28	; 0x1c
     856:	12 30       	cpi	r17, 0x02	; 2
     858:	69 f5       	brne	.+90     	; 0x8b4 <__vector_11+0x14e>
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	0e 94 4e 03 	call	0x69c	; 0x69c <_Z11InitControli>
     862:	0e 94 05 02 	call	0x40a	; 0x40a <_ZL14SendInterfacesv>
     866:	99 e0       	ldi	r25, 0x09	; 9
     868:	9e 01       	movw	r18, r28
     86a:	2f 5f       	subi	r18, 0xFF	; 255
     86c:	3f 4f       	sbci	r19, 0xFF	; 255
     86e:	69 01       	movw	r12, r18
     870:	f9 01       	movw	r30, r18
     872:	29 2f       	mov	r18, r25
     874:	11 92       	st	Z+, r1
     876:	2a 95       	dec	r18
     878:	e9 f7       	brne	.-6      	; 0x874 <__vector_11+0x10e>
     87a:	99 83       	std	Y+1, r25	; 0x01
     87c:	1a 83       	std	Y+2, r17	; 0x02
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	9e 83       	std	Y+6, r25	; 0x06
     882:	90 ea       	ldi	r25, 0xA0	; 160
     884:	98 87       	std	Y+8, r25	; 0x08
     886:	9a ef       	ldi	r25, 0xFA	; 250
     888:	99 87       	std	Y+9, r25	; 0x09
     88a:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <_ZL6_cmark>
     88e:	30 91 4e 01 	lds	r19, 0x014E	; 0x80014e <_ZL6_cmark+0x1>
     892:	27 5f       	subi	r18, 0xF7	; 247
     894:	3f 4f       	sbci	r19, 0xFF	; 255
     896:	3c 83       	std	Y+4, r19	; 0x04
     898:	2b 83       	std	Y+3, r18	; 0x03
     89a:	8d 83       	std	Y+5, r24	; 0x05
     89c:	c7 01       	movw	r24, r14
     89e:	0e 94 4e 03 	call	0x69c	; 0x69c <_Z11InitControli>
     8a2:	49 e0       	ldi	r20, 0x09	; 9
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	b6 01       	movw	r22, r12
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_Z15USB_SendControlhPKvi>
     8ae:	0e 94 05 02 	call	0x40a	; 0x40a <_ZL14SendInterfacesv>
     8b2:	8d c0       	rjmp	.+282    	; 0x9ce <__vector_11+0x268>
     8b4:	c7 01       	movw	r24, r14
     8b6:	0e 94 4e 03 	call	0x69c	; 0x69c <_Z11InitControli>
     8ba:	0e 94 b7 09 	call	0x136e	; 0x136e <_Z12PluggableUSBv>
     8be:	be 01       	movw	r22, r28
     8c0:	6b 5e       	subi	r22, 0xEB	; 235
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	0e 94 14 09 	call	0x1228	; 0x1228 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
     8c8:	00 97       	sbiw	r24, 0x00	; 0
     8ca:	19 f0       	breq	.+6      	; 0x8d2 <__vector_11+0x16c>
     8cc:	0c f0       	brlt	.+2      	; 0x8d0 <__vector_11+0x16a>
     8ce:	7f c0       	rjmp	.+254    	; 0x9ce <__vector_11+0x268>
     8d0:	82 c0       	rjmp	.+260    	; 0x9d6 <__vector_11+0x270>
     8d2:	11 30       	cpi	r17, 0x01	; 1
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <__vector_11+0x172>
     8d6:	70 c0       	rjmp	.+224    	; 0x9b8 <__vector_11+0x252>
     8d8:	13 30       	cpi	r17, 0x03	; 3
     8da:	09 f0       	breq	.+2      	; 0x8de <__vector_11+0x178>
     8dc:	7c c0       	rjmp	.+248    	; 0x9d6 <__vector_11+0x270>
     8de:	8f 89       	ldd	r24, Y+23	; 0x17
     8e0:	88 23       	and	r24, r24
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <__vector_11+0x180>
     8e4:	6c c0       	rjmp	.+216    	; 0x9be <__vector_11+0x258>
     8e6:	82 30       	cpi	r24, 0x02	; 2
     8e8:	29 f4       	brne	.+10     	; 0x8f4 <__vector_11+0x18e>
     8ea:	40 e8       	ldi	r20, 0x80	; 128
     8ec:	60 e1       	ldi	r22, 0x10	; 16
     8ee:	8a ec       	ldi	r24, 0xCA	; 202
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	06 c0       	rjmp	.+12     	; 0x900 <__vector_11+0x19a>
     8f4:	81 30       	cpi	r24, 0x01	; 1
     8f6:	39 f4       	brne	.+14     	; 0x906 <__vector_11+0x1a0>
     8f8:	40 e8       	ldi	r20, 0x80	; 128
     8fa:	6b e0       	ldi	r22, 0x0B	; 11
     8fc:	8e eb       	ldi	r24, 0xBE	; 190
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 ad 01 	call	0x35a	; 0x35a <_ZL24USB_SendStringDescriptorPKhhh>
     904:	56 c0       	rjmp	.+172    	; 0x9b2 <__vector_11+0x24c>
     906:	83 30       	cpi	r24, 0x03	; 3
     908:	09 f0       	breq	.+2      	; 0x90c <__vector_11+0x1a6>
     90a:	65 c0       	rjmp	.+202    	; 0x9d6 <__vector_11+0x270>
     90c:	0e 94 b7 09 	call	0x136e	; 0x136e <_Z12PluggableUSBv>
     910:	8e 01       	movw	r16, r28
     912:	0f 5f       	subi	r16, 0xFF	; 255
     914:	1f 4f       	sbci	r17, 0xFF	; 255
     916:	b8 01       	movw	r22, r16
     918:	0e 94 33 09 	call	0x1266	; 0x1266 <_ZN13PluggableUSB_12getShortNameEPc>
     91c:	f8 01       	movw	r30, r16
     91e:	01 90       	ld	r0, Z+
     920:	00 20       	and	r0, r0
     922:	e9 f7       	brne	.-6      	; 0x91e <__vector_11+0x1b8>
     924:	31 97       	sbiw	r30, 0x01	; 1
     926:	bf 01       	movw	r22, r30
     928:	60 1b       	sub	r22, r16
     92a:	71 0b       	sbc	r23, r17
     92c:	40 e0       	ldi	r20, 0x00	; 0
     92e:	c8 01       	movw	r24, r16
     930:	e7 cf       	rjmp	.-50     	; 0x900 <__vector_11+0x19a>
     932:	97 30       	cpi	r25, 0x07	; 7
     934:	09 f4       	brne	.+2      	; 0x938 <__vector_11+0x1d2>
     936:	4f c0       	rjmp	.+158    	; 0x9d6 <__vector_11+0x270>
     938:	98 30       	cpi	r25, 0x08	; 8
     93a:	21 f4       	brne	.+8      	; 0x944 <__vector_11+0x1de>
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     942:	45 c0       	rjmp	.+138    	; 0x9ce <__vector_11+0x268>
     944:	99 30       	cpi	r25, 0x09	; 9
     946:	09 f0       	breq	.+2      	; 0x94a <__vector_11+0x1e4>
     948:	42 c0       	rjmp	.+132    	; 0x9ce <__vector_11+0x268>
     94a:	83 70       	andi	r24, 0x03	; 3
     94c:	09 f0       	breq	.+2      	; 0x950 <__vector_11+0x1ea>
     94e:	43 c0       	rjmp	.+134    	; 0x9d6 <__vector_11+0x270>
     950:	e1 e0       	ldi	r30, 0x01	; 1
     952:	f1 e0       	ldi	r31, 0x01	; 1
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	31 e0       	ldi	r19, 0x01	; 1
     958:	96 e3       	ldi	r25, 0x36	; 54
     95a:	20 81       	ld	r18, Z
     95c:	21 11       	cpse	r18, r1
     95e:	09 c0       	rjmp	.+18     	; 0x972 <__vector_11+0x20c>
     960:	8e e7       	ldi	r24, 0x7E	; 126
     962:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
     966:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
     96a:	8f 89       	ldd	r24, Y+23	; 0x17
     96c:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <_usbConfiguration>
     970:	2e c0       	rjmp	.+92     	; 0x9ce <__vector_11+0x268>
     972:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     976:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
     97a:	21 91       	ld	r18, Z+
     97c:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
     980:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     984:	8f 5f       	subi	r24, 0xFF	; 255
     986:	87 30       	cpi	r24, 0x07	; 7
     988:	41 f7       	brne	.-48     	; 0x95a <__vector_11+0x1f4>
     98a:	ea cf       	rjmp	.-44     	; 0x960 <__vector_11+0x1fa>
     98c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     98e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     990:	0e 94 4e 03 	call	0x69c	; 0x69c <_Z11InitControli>
     994:	89 8d       	ldd	r24, Y+25	; 0x19
     996:	81 11       	cpse	r24, r1
     998:	05 c0       	rjmp	.+10     	; 0x9a4 <__vector_11+0x23e>
     99a:	ce 01       	movw	r24, r28
     99c:	45 96       	adiw	r24, 0x15	; 21
     99e:	0e 94 47 08 	call	0x108e	; 0x108e <_Z9CDC_SetupR8USBSetup>
     9a2:	07 c0       	rjmp	.+14     	; 0x9b2 <__vector_11+0x24c>
     9a4:	0e 94 b7 09 	call	0x136e	; 0x136e <_Z12PluggableUSBv>
     9a8:	be 01       	movw	r22, r28
     9aa:	6b 5e       	subi	r22, 0xEB	; 235
     9ac:	7f 4f       	sbci	r23, 0xFF	; 255
     9ae:	0e 94 52 09 	call	0x12a4	; 0x12a4 <_ZN13PluggableUSB_5setupER8USBSetup>
     9b2:	88 23       	and	r24, r24
     9b4:	81 f0       	breq	.+32     	; 0x9d6 <__vector_11+0x270>
     9b6:	0b c0       	rjmp	.+22     	; 0x9ce <__vector_11+0x268>
     9b8:	6c ea       	ldi	r22, 0xAC	; 172
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <__vector_11+0x25c>
     9be:	6b ed       	ldi	r22, 0xDB	; 219
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	fb 01       	movw	r30, r22
     9c4:	44 91       	lpm	r20, Z
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	80 e8       	ldi	r24, 0x80	; 128
     9ca:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_Z15USB_SendControlhPKvi>
     9ce:	8e ef       	ldi	r24, 0xFE	; 254
     9d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     9d4:	03 c0       	rjmp	.+6      	; 0x9dc <__vector_11+0x276>
     9d6:	81 e2       	ldi	r24, 0x21	; 33
     9d8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
     9dc:	6c 96       	adiw	r28, 0x1c	; 28
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	ff 91       	pop	r31
     9ee:	ef 91       	pop	r30
     9f0:	bf 91       	pop	r27
     9f2:	af 91       	pop	r26
     9f4:	9f 91       	pop	r25
     9f6:	8f 91       	pop	r24
     9f8:	7f 91       	pop	r23
     9fa:	6f 91       	pop	r22
     9fc:	5f 91       	pop	r21
     9fe:	4f 91       	pop	r20
     a00:	3f 91       	pop	r19
     a02:	2f 91       	pop	r18
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	ff 90       	pop	r15
     a0a:	ef 90       	pop	r14
     a0c:	df 90       	pop	r13
     a0e:	cf 90       	pop	r12
     a10:	0f 90       	pop	r0
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	0f 90       	pop	r0
     a16:	1f 90       	pop	r1
     a18:	18 95       	reti

00000a1a <_Z9USB_Flushh>:
     a1a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     a1e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
     a22:	88 23       	and	r24, r24
     a24:	19 f0       	breq	.+6      	; 0xa2c <_Z9USB_Flushh+0x12>
     a26:	8a e3       	ldi	r24, 0x3A	; 58
     a28:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     a2c:	08 95       	ret

00000a2e <__vector_10>:
     a2e:	1f 92       	push	r1
     a30:	0f 92       	push	r0
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	0f 92       	push	r0
     a36:	11 24       	eor	r1, r1
     a38:	2f 93       	push	r18
     a3a:	3f 93       	push	r19
     a3c:	4f 93       	push	r20
     a3e:	5f 93       	push	r21
     a40:	6f 93       	push	r22
     a42:	7f 93       	push	r23
     a44:	8f 93       	push	r24
     a46:	9f 93       	push	r25
     a48:	af 93       	push	r26
     a4a:	bf 93       	push	r27
     a4c:	cf 93       	push	r28
     a4e:	ef 93       	push	r30
     a50:	ff 93       	push	r31
     a52:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
     a56:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
     a5a:	83 7f       	andi	r24, 0xF3	; 243
     a5c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
     a60:	c3 ff       	sbrs	r28, 3
     a62:	0f c0       	rjmp	.+30     	; 0xa82 <__vector_10+0x54>
     a64:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
     a6e:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
     a72:	82 e3       	ldi	r24, 0x32	; 50
     a74:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
     a78:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <_usbConfiguration>
     a7c:	88 e0       	ldi	r24, 0x08	; 8
     a7e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
     a82:	c2 ff       	sbrs	r28, 2
     a84:	19 c0       	rjmp	.+50     	; 0xab8 <__vector_10+0x8a>
     a86:	83 e0       	ldi	r24, 0x03	; 3
     a88:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_Z9USB_Flushh>
     a8c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <TxLEDPulse>
     a90:	88 23       	and	r24, r24
     a92:	39 f0       	breq	.+14     	; 0xaa2 <__vector_10+0x74>
     a94:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <TxLEDPulse>
     a98:	81 50       	subi	r24, 0x01	; 1
     a9a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <TxLEDPulse>
     a9e:	88 23       	and	r24, r24
     aa0:	89 f1       	breq	.+98     	; 0xb04 <__stack+0x5>
     aa2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <RxLEDPulse>
     aa6:	88 23       	and	r24, r24
     aa8:	39 f0       	breq	.+14     	; 0xab8 <__vector_10+0x8a>
     aaa:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <RxLEDPulse>
     aae:	81 50       	subi	r24, 0x01	; 1
     ab0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <RxLEDPulse>
     ab4:	88 23       	and	r24, r24
     ab6:	41 f1       	breq	.+80     	; 0xb08 <__stack+0x9>
     ab8:	c4 ff       	sbrs	r28, 4
     aba:	10 c0       	rjmp	.+32     	; 0xadc <__vector_10+0xae>
     abc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     ac0:	8e 7e       	andi	r24, 0xEE	; 238
     ac2:	81 60       	ori	r24, 0x01	; 1
     ac4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     ac8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
     acc:	8f 7e       	andi	r24, 0xEF	; 239
     ace:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
     ad2:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <_usbSuspendState>
     ad6:	8e 7e       	andi	r24, 0xEE	; 238
     ad8:	80 61       	ori	r24, 0x10	; 16
     ada:	11 c0       	rjmp	.+34     	; 0xafe <__vector_10+0xd0>
     adc:	c0 ff       	sbrs	r28, 0
     ade:	16 c0       	rjmp	.+44     	; 0xb0c <__stack+0xd>
     ae0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     ae4:	8e 7e       	andi	r24, 0xEE	; 238
     ae6:	80 61       	ori	r24, 0x10	; 16
     ae8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
     aec:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
     af0:	8e 7e       	andi	r24, 0xEE	; 238
     af2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
     af6:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <_usbSuspendState>
     afa:	8e 7e       	andi	r24, 0xEE	; 238
     afc:	81 60       	ori	r24, 0x01	; 1
     afe:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <_usbSuspendState>
     b02:	04 c0       	rjmp	.+8      	; 0xb0c <__stack+0xd>
     b04:	5d 9a       	sbi	0x0b, 5	; 11
     b06:	cd cf       	rjmp	.-102    	; 0xaa2 <__vector_10+0x74>
     b08:	28 9a       	sbi	0x05, 0	; 5
     b0a:	d6 cf       	rjmp	.-84     	; 0xab8 <__vector_10+0x8a>
     b0c:	ff 91       	pop	r31
     b0e:	ef 91       	pop	r30
     b10:	cf 91       	pop	r28
     b12:	bf 91       	pop	r27
     b14:	af 91       	pop	r26
     b16:	9f 91       	pop	r25
     b18:	8f 91       	pop	r24
     b1a:	7f 91       	pop	r23
     b1c:	6f 91       	pop	r22
     b1e:	5f 91       	pop	r21
     b20:	4f 91       	pop	r20
     b22:	3f 91       	pop	r19
     b24:	2f 91       	pop	r18
     b26:	0f 90       	pop	r0
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	0f 90       	pop	r0
     b2c:	1f 90       	pop	r1
     b2e:	18 95       	reti

00000b30 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
     b30:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <_usbConfiguration>
	_usbCurrentStatus = 0;
     b34:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <_usbCurrentStatus>
	_usbSuspendState = 0;
     b38:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <_usbSuspendState>
	USB_ClockEnable();
     b3c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
     b40:	e1 ee       	ldi	r30, 0xE1	; 225
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z
     b46:	8e 7e       	andi	r24, 0xEE	; 238
     b48:	80 83       	st	Z, r24
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
     b4a:	8d e0       	ldi	r24, 0x0D	; 13
     b4c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
	
	TX_RX_LED_INIT;
     b50:	55 9a       	sbi	0x0a, 5	; 10
     b52:	20 9a       	sbi	0x04, 0	; 4
     b54:	08 95       	ret

00000b56 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
     b56:	1f 92       	push	r1
     b58:	0f 92       	push	r0
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	0f 92       	push	r0
     b5e:	11 24       	eor	r1, r1
     b60:	2f 93       	push	r18
     b62:	3f 93       	push	r19
     b64:	8f 93       	push	r24
     b66:	9f 93       	push	r25
     b68:	af 93       	push	r26
     b6a:	bf 93       	push	r27
     b6c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <timer0_millis>
     b70:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <timer0_millis+0x1>
     b74:	a0 91 57 01 	lds	r26, 0x0157	; 0x800157 <timer0_millis+0x2>
     b78:	b0 91 58 01 	lds	r27, 0x0158	; 0x800158 <timer0_millis+0x3>
     b7c:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <timer0_fract>
     b80:	23 e0       	ldi	r18, 0x03	; 3
     b82:	23 0f       	add	r18, r19
     b84:	2d 37       	cpi	r18, 0x7D	; 125
     b86:	20 f4       	brcc	.+8      	; 0xb90 <__vector_23+0x3a>
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	a1 1d       	adc	r26, r1
     b8c:	b1 1d       	adc	r27, r1
     b8e:	05 c0       	rjmp	.+10     	; 0xb9a <__vector_23+0x44>
     b90:	26 e8       	ldi	r18, 0x86	; 134
     b92:	23 0f       	add	r18, r19
     b94:	02 96       	adiw	r24, 0x02	; 2
     b96:	a1 1d       	adc	r26, r1
     b98:	b1 1d       	adc	r27, r1
     b9a:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <timer0_fract>
     b9e:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <timer0_millis>
     ba2:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <timer0_millis+0x1>
     ba6:	a0 93 57 01 	sts	0x0157, r26	; 0x800157 <timer0_millis+0x2>
     baa:	b0 93 58 01 	sts	0x0158, r27	; 0x800158 <timer0_millis+0x3>
     bae:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <timer0_overflow_count>
     bb2:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <timer0_overflow_count+0x1>
     bb6:	a0 91 5b 01 	lds	r26, 0x015B	; 0x80015b <timer0_overflow_count+0x2>
     bba:	b0 91 5c 01 	lds	r27, 0x015C	; 0x80015c <timer0_overflow_count+0x3>
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	a1 1d       	adc	r26, r1
     bc2:	b1 1d       	adc	r27, r1
     bc4:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <timer0_overflow_count>
     bc8:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <timer0_overflow_count+0x1>
     bcc:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <timer0_overflow_count+0x2>
     bd0:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <timer0_overflow_count+0x3>
     bd4:	bf 91       	pop	r27
     bd6:	af 91       	pop	r26
     bd8:	9f 91       	pop	r25
     bda:	8f 91       	pop	r24
     bdc:	3f 91       	pop	r19
     bde:	2f 91       	pop	r18
     be0:	0f 90       	pop	r0
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	0f 90       	pop	r0
     be6:	1f 90       	pop	r1
     be8:	18 95       	reti

00000bea <micros>:
     bea:	3f b7       	in	r19, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <timer0_overflow_count>
     bf2:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <timer0_overflow_count+0x1>
     bf6:	a0 91 5b 01 	lds	r26, 0x015B	; 0x80015b <timer0_overflow_count+0x2>
     bfa:	b0 91 5c 01 	lds	r27, 0x015C	; 0x80015c <timer0_overflow_count+0x3>
     bfe:	26 b5       	in	r18, 0x26	; 38
     c00:	a8 9b       	sbis	0x15, 0	; 21
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <micros+0x24>
     c04:	2f 3f       	cpi	r18, 0xFF	; 255
     c06:	19 f0       	breq	.+6      	; 0xc0e <micros+0x24>
     c08:	01 96       	adiw	r24, 0x01	; 1
     c0a:	a1 1d       	adc	r26, r1
     c0c:	b1 1d       	adc	r27, r1
     c0e:	3f bf       	out	0x3f, r19	; 63
     c10:	ba 2f       	mov	r27, r26
     c12:	a9 2f       	mov	r26, r25
     c14:	98 2f       	mov	r25, r24
     c16:	88 27       	eor	r24, r24
     c18:	82 0f       	add	r24, r18
     c1a:	91 1d       	adc	r25, r1
     c1c:	a1 1d       	adc	r26, r1
     c1e:	b1 1d       	adc	r27, r1
     c20:	bc 01       	movw	r22, r24
     c22:	cd 01       	movw	r24, r26
     c24:	42 e0       	ldi	r20, 0x02	; 2
     c26:	66 0f       	add	r22, r22
     c28:	77 1f       	adc	r23, r23
     c2a:	88 1f       	adc	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	4a 95       	dec	r20
     c30:	d1 f7       	brne	.-12     	; 0xc26 <micros+0x3c>
     c32:	08 95       	ret

00000c34 <delay>:
     c34:	8f 92       	push	r8
     c36:	9f 92       	push	r9
     c38:	af 92       	push	r10
     c3a:	bf 92       	push	r11
     c3c:	cf 92       	push	r12
     c3e:	df 92       	push	r13
     c40:	ef 92       	push	r14
     c42:	ff 92       	push	r15
     c44:	6b 01       	movw	r12, r22
     c46:	7c 01       	movw	r14, r24
     c48:	0e 94 f5 05 	call	0xbea	; 0xbea <micros>
     c4c:	4b 01       	movw	r8, r22
     c4e:	5c 01       	movw	r10, r24
     c50:	c1 14       	cp	r12, r1
     c52:	d1 04       	cpc	r13, r1
     c54:	e1 04       	cpc	r14, r1
     c56:	f1 04       	cpc	r15, r1
     c58:	01 f1       	breq	.+64     	; 0xc9a <delay+0x66>
     c5a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <yield>
     c5e:	0e 94 f5 05 	call	0xbea	; 0xbea <micros>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	88 19       	sub	r24, r8
     c68:	99 09       	sbc	r25, r9
     c6a:	aa 09       	sbc	r26, r10
     c6c:	bb 09       	sbc	r27, r11
     c6e:	88 3e       	cpi	r24, 0xE8	; 232
     c70:	93 40       	sbci	r25, 0x03	; 3
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	60 f3       	brcs	.-40     	; 0xc50 <delay+0x1c>
     c78:	21 e0       	ldi	r18, 0x01	; 1
     c7a:	c2 1a       	sub	r12, r18
     c7c:	d1 08       	sbc	r13, r1
     c7e:	e1 08       	sbc	r14, r1
     c80:	f1 08       	sbc	r15, r1
     c82:	88 ee       	ldi	r24, 0xE8	; 232
     c84:	88 0e       	add	r8, r24
     c86:	83 e0       	ldi	r24, 0x03	; 3
     c88:	98 1e       	adc	r9, r24
     c8a:	a1 1c       	adc	r10, r1
     c8c:	b1 1c       	adc	r11, r1
     c8e:	c1 14       	cp	r12, r1
     c90:	d1 04       	cpc	r13, r1
     c92:	e1 04       	cpc	r14, r1
     c94:	f1 04       	cpc	r15, r1
     c96:	19 f7       	brne	.-58     	; 0xc5e <delay+0x2a>
     c98:	db cf       	rjmp	.-74     	; 0xc50 <delay+0x1c>
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	df 90       	pop	r13
     ca0:	cf 90       	pop	r12
     ca2:	bf 90       	pop	r11
     ca4:	af 90       	pop	r10
     ca6:	9f 90       	pop	r9
     ca8:	8f 90       	pop	r8
     caa:	08 95       	ret

00000cac <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     cac:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     cae:	84 b5       	in	r24, 0x24	; 36
     cb0:	82 60       	ori	r24, 0x02	; 2
     cb2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     cb4:	84 b5       	in	r24, 0x24	; 36
     cb6:	81 60       	ori	r24, 0x01	; 1
     cb8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     cba:	85 b5       	in	r24, 0x25	; 37
     cbc:	82 60       	ori	r24, 0x02	; 2
     cbe:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     cc0:	85 b5       	in	r24, 0x25	; 37
     cc2:	81 60       	ori	r24, 0x01	; 1
     cc4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     cc6:	ee e6       	ldi	r30, 0x6E	; 110
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	81 60       	ori	r24, 0x01	; 1
     cce:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     cd0:	e1 e8       	ldi	r30, 0x81	; 129
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     cd6:	80 81       	ld	r24, Z
     cd8:	82 60       	ori	r24, 0x02	; 2
     cda:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     cdc:	80 81       	ld	r24, Z
     cde:	81 60       	ori	r24, 0x01	; 1
     ce0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     ce2:	e0 e8       	ldi	r30, 0x80	; 128
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	81 60       	ori	r24, 0x01	; 1
     cea:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
     cec:	e1 e9       	ldi	r30, 0x91	; 145
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	82 60       	ori	r24, 0x02	; 2
     cf4:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
     cf6:	80 81       	ld	r24, Z
     cf8:	81 60       	ori	r24, 0x01	; 1
     cfa:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
     cfc:	e0 e9       	ldi	r30, 0x90	; 144
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	81 60       	ori	r24, 0x01	; 1
     d04:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
     d06:	e1 ec       	ldi	r30, 0xC1	; 193
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	84 60       	ori	r24, 0x04	; 4
     d0e:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
     d10:	80 81       	ld	r24, Z
     d12:	82 60       	ori	r24, 0x02	; 2
     d14:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
     d16:	80 81       	ld	r24, Z
     d18:	81 60       	ori	r24, 0x01	; 1
     d1a:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
     d1c:	e3 ec       	ldi	r30, 0xC3	; 195
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	81 60       	ori	r24, 0x01	; 1
     d24:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
     d26:	e0 ec       	ldi	r30, 0xC0	; 192
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	82 60       	ori	r24, 0x02	; 2
     d2e:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
     d30:	e2 ec       	ldi	r30, 0xC2	; 194
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	81 60       	ori	r24, 0x01	; 1
     d38:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     d3a:	ea e7       	ldi	r30, 0x7A	; 122
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	84 60       	ori	r24, 0x04	; 4
     d42:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     d44:	80 81       	ld	r24, Z
     d46:	82 60       	ori	r24, 0x02	; 2
     d48:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     d4a:	80 81       	ld	r24, Z
     d4c:	81 60       	ori	r24, 0x01	; 1
     d4e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     d50:	80 81       	ld	r24, Z
     d52:	80 68       	ori	r24, 0x80	; 128
     d54:	80 83       	st	Z, r24
     d56:	08 95       	ret

00000d58 <_ZN9Keyboard_5writeEPKhj>:
	_keyReport.keys[2] = 0;
	_keyReport.keys[3] = 0;	
	_keyReport.keys[4] = 0;
	_keyReport.keys[5] = 0;	
	_keyReport.modifiers = 0;
	sendReport(&_keyReport);
     d58:	cf 92       	push	r12
     d5a:	df 92       	push	r13
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	6c 01       	movw	r12, r24
     d6a:	eb 01       	movw	r28, r22
     d6c:	7b 01       	movw	r14, r22
     d6e:	e4 0e       	add	r14, r20
     d70:	f5 1e       	adc	r15, r21
     d72:	00 e0       	ldi	r16, 0x00	; 0
     d74:	10 e0       	ldi	r17, 0x00	; 0
     d76:	ce 15       	cp	r28, r14
     d78:	df 05       	cpc	r29, r15
     d7a:	81 f0       	breq	.+32     	; 0xd9c <_ZN9Keyboard_5writeEPKhj+0x44>
     d7c:	69 91       	ld	r22, Y+
     d7e:	6d 30       	cpi	r22, 0x0D	; 13
     d80:	d1 f3       	breq	.-12     	; 0xd76 <_ZN9Keyboard_5writeEPKhj+0x1e>
     d82:	d6 01       	movw	r26, r12
     d84:	ed 91       	ld	r30, X+
     d86:	fc 91       	ld	r31, X
     d88:	01 90       	ld	r0, Z+
     d8a:	f0 81       	ld	r31, Z
     d8c:	e0 2d       	mov	r30, r0
     d8e:	c6 01       	movw	r24, r12
     d90:	09 95       	icall
     d92:	89 2b       	or	r24, r25
     d94:	19 f0       	breq	.+6      	; 0xd9c <_ZN9Keyboard_5writeEPKhj+0x44>
     d96:	0f 5f       	subi	r16, 0xFF	; 255
     d98:	1f 4f       	sbci	r17, 0xFF	; 255
     d9a:	ed cf       	rjmp	.-38     	; 0xd76 <_ZN9Keyboard_5writeEPKhj+0x1e>
     d9c:	c8 01       	movw	r24, r16
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	df 90       	pop	r13
     dac:	cf 90       	pop	r12
     dae:	08 95       	ret

00000db0 <_ZN9Keyboard_C1Ev>:
     db0:	fc 01       	movw	r30, r24
     db2:	13 82       	std	Z+3, r1	; 0x03
     db4:	12 82       	std	Z+2, r1	; 0x02
     db6:	23 e2       	ldi	r18, 0x23	; 35
     db8:	31 e0       	ldi	r19, 0x01	; 1
     dba:	31 83       	std	Z+1, r19	; 0x01
     dbc:	20 83       	st	Z, r18
     dbe:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <_ZGVZN9Keyboard_C4EvE4node>
     dc2:	81 11       	cpse	r24, r1
     dc4:	13 c0       	rjmp	.+38     	; 0xdec <_ZN9Keyboard_C1Ev+0x3c>
     dc6:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <_ZZN9Keyboard_C4EvE4node+0x1>
     dca:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <_ZZN9Keyboard_C4EvE4node>
     dce:	8f e5       	ldi	r24, 0x5F	; 95
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <_ZZN9Keyboard_C4EvE4node+0x3>
     dd6:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <_ZZN9Keyboard_C4EvE4node+0x2>
     dda:	8f e2       	ldi	r24, 0x2F	; 47
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <_ZZN9Keyboard_C4EvE4node+0x5>
     de2:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <_ZZN9Keyboard_C4EvE4node+0x4>
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <_ZGVZN9Keyboard_C4EvE4node>
     dec:	0e 94 07 0b 	call	0x160e	; 0x160e <_Z3HIDv>
     df0:	6d e5       	ldi	r22, 0x5D	; 93
     df2:	71 e0       	ldi	r23, 0x01	; 1
     df4:	0c 94 96 0a 	jmp	0x152c	; 0x152c <_ZN4HID_16AppendDescriptorEP16HIDSubDescriptor>

00000df8 <_ZN9Keyboard_5beginEv>:
     df8:	08 95       	ret

00000dfa <_ZN9Keyboard_10sendReportEP9KeyReport>:
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	eb 01       	movw	r28, r22
     e00:	0e 94 07 0b 	call	0x160e	; 0x160e <_Z3HIDv>
     e04:	28 e0       	ldi	r18, 0x08	; 8
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	ae 01       	movw	r20, r28
     e0a:	62 e0       	ldi	r22, 0x02	; 2
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <_ZN4HID_10SendReportEhPKvi>

00000e14 <_ZN9Keyboard_5pressEh>:
     e14:	dc 01       	movw	r26, r24
     e16:	68 38       	cpi	r22, 0x88	; 136
     e18:	10 f0       	brcs	.+4      	; 0xe1e <_ZN9Keyboard_5pressEh+0xa>
     e1a:	68 58       	subi	r22, 0x88	; 136
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <_ZN9Keyboard_5pressEh+0x64>
     e1e:	e6 2f       	mov	r30, r22
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	67 ff       	sbrs	r22, 7
     e24:	11 c0       	rjmp	.+34     	; 0xe48 <_ZN9Keyboard_5pressEh+0x34>
     e26:	e0 58       	subi	r30, 0x80	; 128
     e28:	f1 09       	sbc	r31, r1
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <_ZN9Keyboard_5pressEh+0x1e>
     e30:	88 0f       	add	r24, r24
     e32:	ea 95       	dec	r30
     e34:	ea f7       	brpl	.-6      	; 0xe30 <_ZN9Keyboard_5pressEh+0x1c>
     e36:	14 96       	adiw	r26, 0x04	; 4
     e38:	9c 91       	ld	r25, X
     e3a:	14 97       	sbiw	r26, 0x04	; 4
     e3c:	89 2b       	or	r24, r25
     e3e:	14 96       	adiw	r26, 0x04	; 4
     e40:	8c 93       	st	X, r24
     e42:	14 97       	sbiw	r26, 0x04	; 4
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	18 c0       	rjmp	.+48     	; 0xe78 <_ZN9Keyboard_5pressEh+0x64>
     e48:	e1 52       	subi	r30, 0x21	; 33
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	64 91       	lpm	r22, Z
     e4e:	61 11       	cpse	r22, r1
     e50:	09 c0       	rjmp	.+18     	; 0xe64 <_ZN9Keyboard_5pressEh+0x50>
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	13 96       	adiw	r26, 0x03	; 3
     e58:	9c 93       	st	X, r25
     e5a:	8e 93       	st	-X, r24
     e5c:	12 97       	sbiw	r26, 0x02	; 2
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	08 95       	ret
     e64:	67 ff       	sbrs	r22, 7
     e66:	08 c0       	rjmp	.+16     	; 0xe78 <_ZN9Keyboard_5pressEh+0x64>
     e68:	14 96       	adiw	r26, 0x04	; 4
     e6a:	8c 91       	ld	r24, X
     e6c:	14 97       	sbiw	r26, 0x04	; 4
     e6e:	82 60       	ori	r24, 0x02	; 2
     e70:	14 96       	adiw	r26, 0x04	; 4
     e72:	8c 93       	st	X, r24
     e74:	14 97       	sbiw	r26, 0x04	; 4
     e76:	6f 77       	andi	r22, 0x7F	; 127
     e78:	16 96       	adiw	r26, 0x06	; 6
     e7a:	8c 91       	ld	r24, X
     e7c:	16 97       	sbiw	r26, 0x06	; 6
     e7e:	68 17       	cp	r22, r24
     e80:	51 f1       	breq	.+84     	; 0xed6 <_ZN9Keyboard_5pressEh+0xc2>
     e82:	17 96       	adiw	r26, 0x07	; 7
     e84:	8c 91       	ld	r24, X
     e86:	17 97       	sbiw	r26, 0x07	; 7
     e88:	68 17       	cp	r22, r24
     e8a:	29 f1       	breq	.+74     	; 0xed6 <_ZN9Keyboard_5pressEh+0xc2>
     e8c:	18 96       	adiw	r26, 0x08	; 8
     e8e:	8c 91       	ld	r24, X
     e90:	18 97       	sbiw	r26, 0x08	; 8
     e92:	68 17       	cp	r22, r24
     e94:	01 f1       	breq	.+64     	; 0xed6 <_ZN9Keyboard_5pressEh+0xc2>
     e96:	19 96       	adiw	r26, 0x09	; 9
     e98:	8c 91       	ld	r24, X
     e9a:	19 97       	sbiw	r26, 0x09	; 9
     e9c:	68 17       	cp	r22, r24
     e9e:	d9 f0       	breq	.+54     	; 0xed6 <_ZN9Keyboard_5pressEh+0xc2>
     ea0:	1a 96       	adiw	r26, 0x0a	; 10
     ea2:	8c 91       	ld	r24, X
     ea4:	1a 97       	sbiw	r26, 0x0a	; 10
     ea6:	68 17       	cp	r22, r24
     ea8:	b1 f0       	breq	.+44     	; 0xed6 <_ZN9Keyboard_5pressEh+0xc2>
     eaa:	1b 96       	adiw	r26, 0x0b	; 11
     eac:	8c 91       	ld	r24, X
     eae:	1b 97       	sbiw	r26, 0x0b	; 11
     eb0:	68 17       	cp	r22, r24
     eb2:	89 f0       	breq	.+34     	; 0xed6 <_ZN9Keyboard_5pressEh+0xc2>
     eb4:	fd 01       	movw	r30, r26
     eb6:	36 96       	adiw	r30, 0x06	; 6
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	21 91       	ld	r18, Z+
     ebe:	21 11       	cpse	r18, r1
     ec0:	05 c0       	rjmp	.+10     	; 0xecc <_ZN9Keyboard_5pressEh+0xb8>
     ec2:	fd 01       	movw	r30, r26
     ec4:	e8 0f       	add	r30, r24
     ec6:	f9 1f       	adc	r31, r25
     ec8:	66 83       	std	Z+6, r22	; 0x06
     eca:	05 c0       	rjmp	.+10     	; 0xed6 <_ZN9Keyboard_5pressEh+0xc2>
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	86 30       	cpi	r24, 0x06	; 6
     ed0:	91 05       	cpc	r25, r1
     ed2:	a1 f7       	brne	.-24     	; 0xebc <_ZN9Keyboard_5pressEh+0xa8>
     ed4:	be cf       	rjmp	.-132    	; 0xe52 <_ZN9Keyboard_5pressEh+0x3e>
     ed6:	cd 01       	movw	r24, r26
     ed8:	bd 01       	movw	r22, r26
     eda:	6c 5f       	subi	r22, 0xFC	; 252
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	0e 94 fd 06 	call	0xdfa	; 0xdfa <_ZN9Keyboard_10sendReportEP9KeyReport>
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	08 95       	ret

00000ee8 <_ZN9Keyboard_7releaseEh>:
     ee8:	dc 01       	movw	r26, r24
     eea:	68 38       	cpi	r22, 0x88	; 136
     eec:	10 f0       	brcs	.+4      	; 0xef2 <_ZN9Keyboard_7releaseEh+0xa>
     eee:	68 58       	subi	r22, 0x88	; 136
     ef0:	25 c0       	rjmp	.+74     	; 0xf3c <_ZN9Keyboard_7releaseEh+0x54>
     ef2:	e6 2f       	mov	r30, r22
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	67 ff       	sbrs	r22, 7
     ef8:	12 c0       	rjmp	.+36     	; 0xf1e <_ZN9Keyboard_7releaseEh+0x36>
     efa:	e0 58       	subi	r30, 0x80	; 128
     efc:	f1 09       	sbc	r31, r1
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <_ZN9Keyboard_7releaseEh+0x1e>
     f04:	88 0f       	add	r24, r24
     f06:	ea 95       	dec	r30
     f08:	ea f7       	brpl	.-6      	; 0xf04 <_ZN9Keyboard_7releaseEh+0x1c>
     f0a:	80 95       	com	r24
     f0c:	14 96       	adiw	r26, 0x04	; 4
     f0e:	9c 91       	ld	r25, X
     f10:	14 97       	sbiw	r26, 0x04	; 4
     f12:	89 23       	and	r24, r25
     f14:	14 96       	adiw	r26, 0x04	; 4
     f16:	8c 93       	st	X, r24
     f18:	14 97       	sbiw	r26, 0x04	; 4
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	0f c0       	rjmp	.+30     	; 0xf3c <_ZN9Keyboard_7releaseEh+0x54>
     f1e:	e1 52       	subi	r30, 0x21	; 33
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	64 91       	lpm	r22, Z
     f24:	66 23       	and	r22, r22
     f26:	f9 f0       	breq	.+62     	; 0xf66 <_ZN9Keyboard_7releaseEh+0x7e>
     f28:	67 ff       	sbrs	r22, 7
     f2a:	08 c0       	rjmp	.+16     	; 0xf3c <_ZN9Keyboard_7releaseEh+0x54>
     f2c:	14 96       	adiw	r26, 0x04	; 4
     f2e:	8c 91       	ld	r24, X
     f30:	14 97       	sbiw	r26, 0x04	; 4
     f32:	8d 7f       	andi	r24, 0xFD	; 253
     f34:	14 96       	adiw	r26, 0x04	; 4
     f36:	8c 93       	st	X, r24
     f38:	14 97       	sbiw	r26, 0x04	; 4
     f3a:	6f 77       	andi	r22, 0x7F	; 127
     f3c:	fd 01       	movw	r30, r26
     f3e:	86 e0       	ldi	r24, 0x06	; 6
     f40:	66 23       	and	r22, r22
     f42:	21 f0       	breq	.+8      	; 0xf4c <_ZN9Keyboard_7releaseEh+0x64>
     f44:	96 81       	ldd	r25, Z+6	; 0x06
     f46:	69 13       	cpse	r22, r25
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <_ZN9Keyboard_7releaseEh+0x64>
     f4a:	16 82       	std	Z+6, r1	; 0x06
     f4c:	81 50       	subi	r24, 0x01	; 1
     f4e:	31 96       	adiw	r30, 0x01	; 1
     f50:	81 11       	cpse	r24, r1
     f52:	f6 cf       	rjmp	.-20     	; 0xf40 <_ZN9Keyboard_7releaseEh+0x58>
     f54:	cd 01       	movw	r24, r26
     f56:	bd 01       	movw	r22, r26
     f58:	6c 5f       	subi	r22, 0xFC	; 252
     f5a:	7f 4f       	sbci	r23, 0xFF	; 255
     f5c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <_ZN9Keyboard_10sendReportEP9KeyReport>
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	08 95       	ret
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	08 95       	ret

00000f6c <_ZN9Keyboard_5writeEh>:
     f6c:	ef 92       	push	r14
     f6e:	ff 92       	push	r15
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	ec 01       	movw	r28, r24
     f78:	16 2f       	mov	r17, r22
     f7a:	0e 94 0a 07 	call	0xe14	; 0xe14 <_ZN9Keyboard_5pressEh>
     f7e:	7c 01       	movw	r14, r24
     f80:	61 2f       	mov	r22, r17
     f82:	ce 01       	movw	r24, r28
     f84:	0e 94 74 07 	call	0xee8	; 0xee8 <_ZN9Keyboard_7releaseEh>
     f88:	c7 01       	movw	r24, r14
     f8a:	99 27       	eor	r25, r25
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	ff 90       	pop	r15
     f94:	ef 90       	pop	r14
     f96:	08 95       	ret

00000f98 <_GLOBAL__sub_I__ZN9Keyboard_C2Ev>:
		buffer++;
	}
	return n;
}

Keyboard_ Keyboard;
     f98:	83 e6       	ldi	r24, 0x63	; 99
     f9a:	91 e0       	ldi	r25, 0x01	; 1
     f9c:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <_ZN9Keyboard_C1Ev>

00000fa0 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	1f 92       	push	r1
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	69 83       	std	Y+1, r22	; 0x01
     fac:	dc 01       	movw	r26, r24
     fae:	ed 91       	ld	r30, X+
     fb0:	fc 91       	ld	r31, X
     fb2:	02 80       	ldd	r0, Z+2	; 0x02
     fb4:	f3 81       	ldd	r31, Z+3	; 0x03
     fb6:	e0 2d       	mov	r30, r0
     fb8:	41 e0       	ldi	r20, 0x01	; 1
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	be 01       	movw	r22, r28
     fbe:	6f 5f       	subi	r22, 0xFF	; 255
     fc0:	7f 4f       	sbci	r23, 0xFF	; 255
     fc2:	09 95       	icall
     fc4:	0f 90       	pop	r0
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <_ZN7Serial_4peekEv>:
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	ec 01       	movw	r28, r24
     fd2:	8c 85       	ldd	r24, Y+12	; 0x0c
     fd4:	9d 85       	ldd	r25, Y+13	; 0x0d
     fd6:	97 ff       	sbrs	r25, 7
     fd8:	05 c0       	rjmp	.+10     	; 0xfe4 <_ZN7Serial_4peekEv+0x18>
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	0e 94 78 02 	call	0x4f0	; 0x4f0 <_Z8USB_Recvh>
     fe0:	9d 87       	std	Y+13, r25	; 0x0d
     fe2:	8c 87       	std	Y+12, r24	; 0x0c
     fe4:	8c 85       	ldd	r24, Y+12	; 0x0c
     fe6:	9d 85       	ldd	r25, Y+13	; 0x0d
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <_ZN7Serial_17availableForWriteEv>:
     fee:	83 e0       	ldi	r24, 0x03	; 3
     ff0:	0e 94 8f 02 	call	0x51e	; 0x51e <_Z13USB_SendSpaceh>
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	08 95       	ret

00000ff8 <_ZN7Serial_5flushEv>:
     ff8:	83 e0       	ldi	r24, 0x03	; 3
     ffa:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <_Z9USB_Flushh>

00000ffe <_ZN7Serial_9availableEv>:
     ffe:	fc 01       	movw	r30, r24
    1000:	84 85       	ldd	r24, Z+12	; 0x0c
    1002:	95 85       	ldd	r25, Z+13	; 0x0d
    1004:	97 fd       	sbrc	r25, 7
    1006:	06 c0       	rjmp	.+12     	; 0x1014 <_ZN7Serial_9availableEv+0x16>
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	0e 94 23 02 	call	0x446	; 0x446 <_Z13USB_Availableh>
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	08 95       	ret
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	0e 94 23 02 	call	0x446	; 0x446 <_Z13USB_Availableh>
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	08 95       	ret

0000101e <_ZN7Serial_4readEv>:
    101e:	fc 01       	movw	r30, r24
    1020:	84 85       	ldd	r24, Z+12	; 0x0c
    1022:	95 85       	ldd	r25, Z+13	; 0x0d
    1024:	97 fd       	sbrc	r25, 7
    1026:	05 c0       	rjmp	.+10     	; 0x1032 <_ZN7Serial_4readEv+0x14>
    1028:	2f ef       	ldi	r18, 0xFF	; 255
    102a:	3f ef       	ldi	r19, 0xFF	; 255
    102c:	35 87       	std	Z+13, r19	; 0x0d
    102e:	24 87       	std	Z+12, r18	; 0x0c
    1030:	08 95       	ret
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <_Z8USB_Recvh>

00001038 <_ZN7Serial_5writeEPKhj>:
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	ec 01       	movw	r28, r24
    103e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_ZL12_usbLineInfo+0x7>
    1042:	88 23       	and	r24, r24
    1044:	31 f0       	breq	.+12     	; 0x1052 <_ZN7Serial_5writeEPKhj+0x1a>
    1046:	83 e0       	ldi	r24, 0x03	; 3
    1048:	0e 94 a9 02 	call	0x552	; 0x552 <_Z8USB_SendhPKvi>
    104c:	18 16       	cp	r1, r24
    104e:	19 06       	cpc	r1, r25
    1050:	34 f0       	brlt	.+12     	; 0x105e <_ZN7Serial_5writeEPKhj+0x26>
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	9b 83       	std	Y+3, r25	; 0x03
    1058:	8a 83       	std	Y+2, r24	; 0x02
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret

00001064 <_Z16isLUFAbootloaderv>:
    1064:	ee ef       	ldi	r30, 0xFE	; 254
    1066:	ff e7       	ldi	r31, 0x7F	; 127
    1068:	25 91       	lpm	r18, Z+
    106a:	34 91       	lpm	r19, Z
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	2b 3f       	cpi	r18, 0xFB	; 251
    1070:	3c 4d       	sbci	r19, 0xDC	; 220
    1072:	09 f0       	breq	.+2      	; 0x1076 <_Z16isLUFAbootloaderv+0x12>
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	08 95       	ret

00001078 <_Z16CDC_GetInterfacePh>:
    1078:	fc 01       	movw	r30, r24
    107a:	90 81       	ld	r25, Z
    107c:	9e 5f       	subi	r25, 0xFE	; 254
    107e:	90 83       	st	Z, r25
    1080:	42 e4       	ldi	r20, 0x42	; 66
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	6e e8       	ldi	r22, 0x8E	; 142
    1086:	71 e0       	ldi	r23, 0x01	; 1
    1088:	80 e8       	ldi	r24, 0x80	; 128
    108a:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <_Z15USB_SendControlhPKvi>

0000108e <_Z9CDC_SetupR8USBSetup>:
    108e:	fc 01       	movw	r30, r24
    1090:	81 81       	ldd	r24, Z+1	; 0x01
    1092:	90 81       	ld	r25, Z
    1094:	91 3a       	cpi	r25, 0xA1	; 161
    1096:	59 f4       	brne	.+22     	; 0x10ae <_Z9CDC_SetupR8USBSetup+0x20>
    1098:	81 32       	cpi	r24, 0x21	; 33
    109a:	09 f0       	breq	.+2      	; 0x109e <_Z9CDC_SetupR8USBSetup+0x10>
    109c:	65 c0       	rjmp	.+202    	; 0x1168 <_Z9CDC_SetupR8USBSetup+0xda>
    109e:	47 e0       	ldi	r20, 0x07	; 7
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	6b e0       	ldi	r22, 0x0B	; 11
    10a4:	71 e0       	ldi	r23, 0x01	; 1
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_Z15USB_SendControlhPKvi>
    10ac:	5b c0       	rjmp	.+182    	; 0x1164 <_Z9CDC_SetupR8USBSetup+0xd6>
    10ae:	91 32       	cpi	r25, 0x21	; 33
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <_Z9CDC_SetupR8USBSetup+0x26>
    10b2:	5a c0       	rjmp	.+180    	; 0x1168 <_Z9CDC_SetupR8USBSetup+0xda>
    10b4:	83 32       	cpi	r24, 0x23	; 35
    10b6:	69 f4       	brne	.+26     	; 0x10d2 <_Z9CDC_SetupR8USBSetup+0x44>
    10b8:	82 81       	ldd	r24, Z+2	; 0x02
    10ba:	93 81       	ldd	r25, Z+3	; 0x03
    10bc:	a0 e0       	ldi	r26, 0x00	; 0
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZL10breakValue>
    10c4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <_ZL10breakValue+0x1>
    10c8:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <_ZL10breakValue+0x2>
    10cc:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <_ZL10breakValue+0x3>
    10d0:	49 c0       	rjmp	.+146    	; 0x1164 <_Z9CDC_SetupR8USBSetup+0xd6>
    10d2:	80 32       	cpi	r24, 0x20	; 32
    10d4:	39 f4       	brne	.+14     	; 0x10e4 <_Z9CDC_SetupR8USBSetup+0x56>
    10d6:	67 e0       	ldi	r22, 0x07	; 7
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	8b e0       	ldi	r24, 0x0B	; 11
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	0e 94 80 03 	call	0x700	; 0x700 <_Z15USB_RecvControlPvi>
    10e2:	40 c0       	rjmp	.+128    	; 0x1164 <_Z9CDC_SetupR8USBSetup+0xd6>
    10e4:	82 32       	cpi	r24, 0x22	; 34
    10e6:	09 f0       	breq	.+2      	; 0x10ea <_Z9CDC_SetupR8USBSetup+0x5c>
    10e8:	3d c0       	rjmp	.+122    	; 0x1164 <_Z9CDC_SetupR8USBSetup+0xd6>
    10ea:	82 81       	ldd	r24, Z+2	; 0x02
    10ec:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_ZL12_usbLineInfo+0x7>
    10f0:	0e 94 32 08 	call	0x1064	; 0x1064 <_Z16isLUFAbootloaderv>
    10f4:	88 23       	and	r24, r24
    10f6:	19 f0       	breq	.+6      	; 0x10fe <_Z9CDC_SetupR8USBSetup+0x70>
    10f8:	ee ef       	ldi	r30, 0xFE	; 254
    10fa:	fa e0       	ldi	r31, 0x0A	; 10
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <_Z9CDC_SetupR8USBSetup+0x74>
    10fe:	e0 e0       	ldi	r30, 0x00	; 0
    1100:	f8 e0       	ldi	r31, 0x08	; 8
    1102:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <_ZL12_usbLineInfo>
    1106:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <_ZL12_usbLineInfo+0x1>
    110a:	a0 91 0d 01 	lds	r26, 0x010D	; 0x80010d <_ZL12_usbLineInfo+0x2>
    110e:	b0 91 0e 01 	lds	r27, 0x010E	; 0x80010e <_ZL12_usbLineInfo+0x3>
    1112:	80 3b       	cpi	r24, 0xB0	; 176
    1114:	94 40       	sbci	r25, 0x04	; 4
    1116:	a1 05       	cpc	r26, r1
    1118:	b1 05       	cpc	r27, r1
    111a:	41 f5       	brne	.+80     	; 0x116c <_Z9CDC_SetupR8USBSetup+0xde>
    111c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_ZL12_usbLineInfo+0x7>
    1120:	80 fd       	sbrc	r24, 0
    1122:	24 c0       	rjmp	.+72     	; 0x116c <_Z9CDC_SetupR8USBSetup+0xde>
    1124:	ee 3f       	cpi	r30, 0xFE	; 254
    1126:	8a e0       	ldi	r24, 0x0A	; 10
    1128:	f8 07       	cpc	r31, r24
    112a:	51 f0       	breq	.+20     	; 0x1140 <_Z9CDC_SetupR8USBSetup+0xb2>
    112c:	80 81       	ld	r24, Z
    112e:	91 81       	ldd	r25, Z+1	; 0x01
    1130:	87 37       	cpi	r24, 0x77	; 119
    1132:	27 e7       	ldi	r18, 0x77	; 119
    1134:	92 07       	cpc	r25, r18
    1136:	21 f0       	breq	.+8      	; 0x1140 <_Z9CDC_SetupR8USBSetup+0xb2>
    1138:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x912>
    113c:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x911>
    1140:	87 e7       	ldi	r24, 0x77	; 119
    1142:	97 e7       	ldi	r25, 0x77	; 119
    1144:	91 83       	std	Z+1, r25	; 0x01
    1146:	80 83       	st	Z, r24
    1148:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    114c:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <_ZL11wdtcsr_save>
    1150:	9b e0       	ldi	r25, 0x0B	; 11
    1152:	88 e1       	ldi	r24, 0x18	; 24
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	a8 95       	wdr
    115a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	08 95       	ret
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	08 95       	ret
    116c:	80 81       	ld	r24, Z
    116e:	91 81       	ldd	r25, Z+1	; 0x01
    1170:	87 37       	cpi	r24, 0x77	; 119
    1172:	97 47       	sbci	r25, 0x77	; 119
    1174:	b9 f7       	brne	.-18     	; 0x1164 <_Z9CDC_SetupR8USBSetup+0xd6>
    1176:	a8 95       	wdr
    1178:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    117c:	88 61       	ori	r24, 0x18	; 24
    117e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1182:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <_ZL11wdtcsr_save>
    1186:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    118a:	ee 3f       	cpi	r30, 0xFE	; 254
    118c:	8a e0       	ldi	r24, 0x0A	; 10
    118e:	f8 07       	cpc	r31, r24
    1190:	39 f0       	breq	.+14     	; 0x11a0 <_Z9CDC_SetupR8USBSetup+0x112>
    1192:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x911>
    1196:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x912>
    119a:	91 83       	std	Z+1, r25	; 0x01
    119c:	80 83       	st	Z, r24
    119e:	e2 cf       	rjmp	.-60     	; 0x1164 <_Z9CDC_SetupR8USBSetup+0xd6>
    11a0:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x912>
    11a4:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x911>
    11a8:	dd cf       	rjmp	.-70     	; 0x1164 <_Z9CDC_SetupR8USBSetup+0xd6>

000011aa <_GLOBAL__sub_I__cdcInterface>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    11aa:	e7 e7       	ldi	r30, 0x77	; 119
    11ac:	f1 e0       	ldi	r31, 0x01	; 1
    11ae:	13 82       	std	Z+3, r1	; 0x03
    11b0:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    11b2:	88 ee       	ldi	r24, 0xE8	; 232
    11b4:	93 e0       	ldi	r25, 0x03	; 3
    11b6:	a0 e0       	ldi	r26, 0x00	; 0
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	84 83       	std	Z+4, r24	; 0x04
    11bc:	95 83       	std	Z+5, r25	; 0x05
    11be:	a6 83       	std	Z+6, r26	; 0x06
    11c0:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    11c2:	8f e2       	ldi	r24, 0x2F	; 47
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	91 83       	std	Z+1, r25	; 0x01
    11c8:	80 83       	st	Z, r24
    11ca:	8f ef       	ldi	r24, 0xFF	; 255
    11cc:	9f ef       	ldi	r25, 0xFF	; 255
    11ce:	95 87       	std	Z+13, r25	; 0x0d
    11d0:	84 87       	std	Z+12, r24	; 0x0c
    11d2:	08 95       	ret

000011d4 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    11d4:	08 95       	ret

000011d6 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint8_t _initEndpoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    11d6:	ef 92       	push	r14
    11d8:	ff 92       	push	r15
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	7b 01       	movw	r14, r22
	int sent = 0;
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    11e4:	fc 01       	movw	r30, r24
    11e6:	c2 81       	ldd	r28, Z+2	; 0x02
    11e8:	d3 81       	ldd	r29, Z+3	; 0x03

extern uint8_t _initEndpoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
	int sent = 0;
    11ea:	00 e0       	ldi	r16, 0x00	; 0
    11ec:	10 e0       	ldi	r17, 0x00	; 0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    11ee:	20 97       	sbiw	r28, 0x00	; 0
    11f0:	81 f0       	breq	.+32     	; 0x1212 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
		int res = node->getInterface(interfaceCount);
    11f2:	e8 81       	ld	r30, Y
    11f4:	f9 81       	ldd	r31, Y+1	; 0x01
    11f6:	02 80       	ldd	r0, Z+2	; 0x02
    11f8:	f3 81       	ldd	r31, Z+3	; 0x03
    11fa:	e0 2d       	mov	r30, r0
    11fc:	b7 01       	movw	r22, r14
    11fe:	ce 01       	movw	r24, r28
    1200:	09 95       	icall
		if (res < 0)
    1202:	97 fd       	sbrc	r25, 7
    1204:	08 c0       	rjmp	.+16     	; 0x1216 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
			return -1;
		sent += res;
    1206:	08 0f       	add	r16, r24
    1208:	19 1f       	adc	r17, r25

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
	int sent = 0;
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    120a:	08 84       	ldd	r0, Y+8	; 0x08
    120c:	d9 85       	ldd	r29, Y+9	; 0x09
    120e:	c0 2d       	mov	r28, r0
    1210:	ee cf       	rjmp	.-36     	; 0x11ee <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    1212:	c8 01       	movw	r24, r16
    1214:	02 c0       	rjmp	.+4      	; 0x121a <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
		int res = node->getInterface(interfaceCount);
		if (res < 0)
			return -1;
    1216:	8f ef       	ldi	r24, 0xFF	; 255
    1218:	9f ef       	ldi	r25, 0xFF	; 255
		sent += res;
	}
	return sent;
}
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	08 95       	ret

00001228 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	8b 01       	movw	r16, r22
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1232:	fc 01       	movw	r30, r24
    1234:	c2 81       	ldd	r28, Z+2	; 0x02
    1236:	d3 81       	ldd	r29, Z+3	; 0x03
    1238:	20 97       	sbiw	r28, 0x00	; 0
    123a:	71 f0       	breq	.+28     	; 0x1258 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
		int ret = node->getDescriptor(setup);
    123c:	e8 81       	ld	r30, Y
    123e:	f9 81       	ldd	r31, Y+1	; 0x01
    1240:	04 80       	ldd	r0, Z+4	; 0x04
    1242:	f5 81       	ldd	r31, Z+5	; 0x05
    1244:	e0 2d       	mov	r30, r0
    1246:	b8 01       	movw	r22, r16
    1248:	ce 01       	movw	r24, r28
    124a:	09 95       	icall
		// ret!=0 -> request has been processed
		if (ret)
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	31 f4       	brne	.+12     	; 0x125c <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
}

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1250:	08 84       	ldd	r0, Y+8	; 0x08
    1252:	d9 85       	ldd	r29, Y+9	; 0x09
    1254:	c0 2d       	mov	r28, r0
    1256:	f0 cf       	rjmp	.-32     	; 0x1238 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
		int ret = node->getDescriptor(setup);
		// ret!=0 -> request has been processed
		if (ret)
			return ret;
	}
	return 0;
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e0       	ldi	r25, 0x00	; 0
}
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	08 95       	ret

00001266 <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	8b 01       	movw	r16, r22
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    1270:	fc 01       	movw	r30, r24
    1272:	c2 81       	ldd	r28, Z+2	; 0x02
    1274:	d3 81       	ldd	r29, Z+3	; 0x03
    1276:	20 97       	sbiw	r28, 0x00	; 0
    1278:	71 f0       	breq	.+28     	; 0x1296 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
		iSerialNum += node->getShortName(iSerialNum);
    127a:	e8 81       	ld	r30, Y
    127c:	f9 81       	ldd	r31, Y+1	; 0x01
    127e:	06 80       	ldd	r0, Z+6	; 0x06
    1280:	f7 81       	ldd	r31, Z+7	; 0x07
    1282:	e0 2d       	mov	r30, r0
    1284:	b8 01       	movw	r22, r16
    1286:	ce 01       	movw	r24, r28
    1288:	09 95       	icall
    128a:	08 0f       	add	r16, r24
    128c:	11 1d       	adc	r17, r1
}

void PluggableUSB_::getShortName(char *iSerialNum)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    128e:	08 84       	ldd	r0, Y+8	; 0x08
    1290:	d9 85       	ldd	r29, Y+9	; 0x09
    1292:	c0 2d       	mov	r28, r0
    1294:	f0 cf       	rjmp	.-32     	; 0x1276 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
		iSerialNum += node->getShortName(iSerialNum);
	}
	*iSerialNum = 0;
    1296:	f8 01       	movw	r30, r16
    1298:	10 82       	st	Z, r1
}
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	08 95       	ret

000012a4 <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
    12ac:	8b 01       	movw	r16, r22
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    12ae:	fc 01       	movw	r30, r24
    12b0:	c2 81       	ldd	r28, Z+2	; 0x02
    12b2:	d3 81       	ldd	r29, Z+3	; 0x03
    12b4:	20 97       	sbiw	r28, 0x00	; 0
    12b6:	71 f0       	breq	.+28     	; 0x12d4 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
		if (node->setup(setup)) {
    12b8:	e8 81       	ld	r30, Y
    12ba:	f9 81       	ldd	r31, Y+1	; 0x01
    12bc:	01 90       	ld	r0, Z+
    12be:	f0 81       	ld	r31, Z
    12c0:	e0 2d       	mov	r30, r0
    12c2:	b8 01       	movw	r22, r16
    12c4:	ce 01       	movw	r24, r28
    12c6:	09 95       	icall
    12c8:	81 11       	cpse	r24, r1
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
}

bool PluggableUSB_::setup(USBSetup& setup)
{
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    12cc:	08 84       	ldd	r0, Y+8	; 0x08
    12ce:	d9 85       	ldd	r29, Y+9	; 0x09
    12d0:	c0 2d       	mov	r28, r0
    12d2:	f0 cf       	rjmp	.-32     	; 0x12b4 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
		if (node->setup(setup)) {
			return true;
		}
	}
	return false;
    12d4:	80 e0       	ldi	r24, 0x00	; 0
}
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	08 95       	ret

000012e0 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>:

bool PluggableUSB_::plug(PluggableUSBModule *node)
{
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	fc 01       	movw	r30, r24
    12e6:	db 01       	movw	r26, r22
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
    12e8:	21 81       	ldd	r18, Z+1	; 0x01
    12ea:	14 96       	adiw	r26, 0x04	; 4
    12ec:	8c 91       	ld	r24, X
    12ee:	14 97       	sbiw	r26, 0x04	; 4
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	82 0f       	add	r24, r18
    12f4:	91 1d       	adc	r25, r1
    12f6:	08 97       	sbiw	r24, 0x08	; 8
    12f8:	a4 f5       	brge	.+104    	; 0x1362 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x82>
		return false;
	}

	if (!rootNode) {
    12fa:	c2 81       	ldd	r28, Z+2	; 0x02
    12fc:	d3 81       	ldd	r29, Z+3	; 0x03
    12fe:	20 97       	sbiw	r28, 0x00	; 0
    1300:	19 f4       	brne	.+6      	; 0x1308 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x28>
		rootNode = node;
    1302:	73 83       	std	Z+3, r23	; 0x03
    1304:	62 83       	std	Z+2, r22	; 0x02
    1306:	08 c0       	rjmp	.+16     	; 0x1318 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x38>
	} else {
		PluggableUSBModule *current = rootNode;
		while (current->next) {
    1308:	88 85       	ldd	r24, Y+8	; 0x08
    130a:	99 85       	ldd	r25, Y+9	; 0x09
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	11 f0       	breq	.+4      	; 0x1314 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x34>
    1310:	ec 01       	movw	r28, r24
    1312:	fa cf       	rjmp	.-12     	; 0x1308 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x28>
			current = current->next;
		}
		current->next = node;
    1314:	b9 87       	std	Y+9, r27	; 0x09
    1316:	a8 87       	std	Y+8, r26	; 0x08
	}

	node->pluggedInterface = lastIf;
    1318:	80 81       	ld	r24, Z
    131a:	12 96       	adiw	r26, 0x02	; 2
    131c:	8c 93       	st	X, r24
    131e:	12 97       	sbiw	r26, 0x02	; 2
	node->pluggedEndpoint = lastEp;
    1320:	81 81       	ldd	r24, Z+1	; 0x01
    1322:	13 96       	adiw	r26, 0x03	; 3
    1324:	8c 93       	st	X, r24
    1326:	13 97       	sbiw	r26, 0x03	; 3
	lastIf += node->numInterfaces;
    1328:	90 81       	ld	r25, Z
    132a:	15 96       	adiw	r26, 0x05	; 5
    132c:	8c 91       	ld	r24, X
    132e:	15 97       	sbiw	r26, 0x05	; 5
    1330:	89 0f       	add	r24, r25
    1332:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	14 96       	adiw	r26, 0x04	; 4
    1338:	9c 91       	ld	r25, X
    133a:	14 97       	sbiw	r26, 0x04	; 4
    133c:	89 17       	cp	r24, r25
    133e:	98 f4       	brcc	.+38     	; 0x1366 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x86>
		_initEndpoints[lastEp] = node->endpointType[i];
    1340:	16 96       	adiw	r26, 0x06	; 6
    1342:	cd 91       	ld	r28, X+
    1344:	dc 91       	ld	r29, X
    1346:	17 97       	sbiw	r26, 0x07	; 7
    1348:	c8 0f       	add	r28, r24
    134a:	d1 1d       	adc	r29, r1
    134c:	98 81       	ld	r25, Y
    134e:	c1 81       	ldd	r28, Z+1	; 0x01
    1350:	d0 e0       	ldi	r29, 0x00	; 0
    1352:	c0 50       	subi	r28, 0x00	; 0
    1354:	df 4f       	sbci	r29, 0xFF	; 255
    1356:	98 83       	st	Y, r25
		lastEp++;
    1358:	91 81       	ldd	r25, Z+1	; 0x01
    135a:	9f 5f       	subi	r25, 0xFF	; 255
    135c:	91 83       	std	Z+1, r25	; 0x01
	}

	node->pluggedInterface = lastIf;
	node->pluggedEndpoint = lastEp;
	lastIf += node->numInterfaces;
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
    135e:	8f 5f       	subi	r24, 0xFF	; 255
    1360:	ea cf       	rjmp	.-44     	; 0x1336 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x56>
}

bool PluggableUSB_::plug(PluggableUSBModule *node)
{
	if ((lastEp + node->numEndpoints) > USB_ENDPOINTS) {
		return false;
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule+0x88>
	lastIf += node->numInterfaces;
	for (uint8_t i = 0; i < node->numEndpoints; i++) {
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
    1366:	81 e0       	ldi	r24, 0x01	; 1
	// restart USB layer???
}
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	08 95       	ret

0000136e <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    136e:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <_ZGVZ12PluggableUSBvE3obj>
    1372:	81 11       	cpse	r24, r1
    1374:	0d c0       	rjmp	.+26     	; 0x1390 <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <_ZZ12PluggableUSBvE3obj>
    137c:	84 e0       	ldi	r24, 0x04	; 4
    137e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <_ZZ12PluggableUSBvE3obj+0x1>
    1382:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <_ZZ12PluggableUSBvE3obj+0x3>
    1386:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    1390:	88 ec       	ldi	r24, 0xC8	; 200
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	08 95       	ret

00001396 <_ZN4HID_12getShortNameEPc>:
	
	return total;
}

uint8_t HID_::getShortName(char *name)
{
    1396:	dc 01       	movw	r26, r24
    1398:	fb 01       	movw	r30, r22
	name[0] = 'H';
    139a:	88 e4       	ldi	r24, 0x48	; 72
    139c:	80 83       	st	Z, r24
	name[1] = 'I';
    139e:	89 e4       	ldi	r24, 0x49	; 73
    13a0:	81 83       	std	Z+1, r24	; 0x01
	name[2] = 'D';
    13a2:	84 e4       	ldi	r24, 0x44	; 68
    13a4:	82 83       	std	Z+2, r24	; 0x02
	name[3] = 'A' + (descriptorSize & 0x0F);
    13a6:	1d 96       	adiw	r26, 0x0d	; 13
    13a8:	9c 91       	ld	r25, X
    13aa:	1d 97       	sbiw	r26, 0x0d	; 13
    13ac:	9f 70       	andi	r25, 0x0F	; 15
    13ae:	9f 5b       	subi	r25, 0xBF	; 191
    13b0:	93 83       	std	Z+3, r25	; 0x03
	name[4] = 'A' + ((descriptorSize >> 4) & 0x0F);
    13b2:	1d 96       	adiw	r26, 0x0d	; 13
    13b4:	8d 91       	ld	r24, X+
    13b6:	9c 91       	ld	r25, X
    13b8:	1e 97       	sbiw	r26, 0x0e	; 14
    13ba:	24 e0       	ldi	r18, 0x04	; 4
    13bc:	96 95       	lsr	r25
    13be:	87 95       	ror	r24
    13c0:	2a 95       	dec	r18
    13c2:	e1 f7       	brne	.-8      	; 0x13bc <_ZN4HID_12getShortNameEPc+0x26>
    13c4:	8f 70       	andi	r24, 0x0F	; 15
    13c6:	8f 5b       	subi	r24, 0xBF	; 191
    13c8:	84 83       	std	Z+4, r24	; 0x04
	return 5;
}
    13ca:	85 e0       	ldi	r24, 0x05	; 5
    13cc:	08 95       	ret

000013ce <_ZN4HID_12getInterfaceEPh>:
	static HID_ obj;
	return obj;
}

int HID_::getInterface(uint8_t* interfaceCount)
{
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	69 97       	sbiw	r28, 0x19	; 25
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	fc 01       	movw	r30, r24
	*interfaceCount += 1; // uses 1
    13e4:	db 01       	movw	r26, r22
    13e6:	8c 91       	ld	r24, X
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	8c 93       	st	X, r24
	HIDDescriptor hidInterface = {
		D_INTERFACE(pluggedInterface, 1, USB_DEVICE_CLASS_HUMAN_INTERFACE, HID_SUBCLASS_NONE, HID_PROTOCOL_NONE),
		D_HIDREPORT(descriptorSize),
		D_ENDPOINT(USB_ENDPOINT_IN(pluggedEndpoint), USB_ENDPOINT_TYPE_INTERRUPT, USB_EP_SIZE, 0x01)
	};
    13ec:	be 01       	movw	r22, r28
    13ee:	6f 5f       	subi	r22, 0xFF	; 255
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	89 e1       	ldi	r24, 0x19	; 25
    13f4:	db 01       	movw	r26, r22
    13f6:	1d 92       	st	X+, r1
    13f8:	8a 95       	dec	r24
    13fa:	e9 f7       	brne	.-6      	; 0x13f6 <_ZN4HID_12getInterfaceEPh+0x28>
    13fc:	29 e0       	ldi	r18, 0x09	; 9
    13fe:	29 83       	std	Y+1, r18	; 0x01
    1400:	84 e0       	ldi	r24, 0x04	; 4
    1402:	8a 83       	std	Y+2, r24	; 0x02
    1404:	91 e0       	ldi	r25, 0x01	; 1
    1406:	9d 83       	std	Y+5, r25	; 0x05
    1408:	83 e0       	ldi	r24, 0x03	; 3
    140a:	8e 83       	std	Y+6, r24	; 0x06
    140c:	2a 87       	std	Y+10, r18	; 0x0a
    140e:	21 e2       	ldi	r18, 0x21	; 33
    1410:	2b 87       	std	Y+11, r18	; 0x0b
    1412:	9c 87       	std	Y+12, r25	; 0x0c
    1414:	9d 87       	std	Y+13, r25	; 0x0d
    1416:	9f 87       	std	Y+15, r25	; 0x0f
    1418:	22 e2       	ldi	r18, 0x22	; 34
    141a:	28 8b       	std	Y+16, r18	; 0x10
    141c:	27 e0       	ldi	r18, 0x07	; 7
    141e:	2b 8b       	std	Y+19, r18	; 0x13
    1420:	25 e0       	ldi	r18, 0x05	; 5
    1422:	2c 8b       	std	Y+20, r18	; 0x14
    1424:	8e 8b       	std	Y+22, r24	; 0x16
    1426:	20 e4       	ldi	r18, 0x40	; 64
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	38 8f       	std	Y+24, r19	; 0x18
    142c:	2f 8b       	std	Y+23, r18	; 0x17
    142e:	99 8f       	std	Y+25, r25	; 0x19
    1430:	82 81       	ldd	r24, Z+2	; 0x02
    1432:	8b 83       	std	Y+3, r24	; 0x03
int HID_::getInterface(uint8_t* interfaceCount)
{
	*interfaceCount += 1; // uses 1
	HIDDescriptor hidInterface = {
		D_INTERFACE(pluggedInterface, 1, USB_DEVICE_CLASS_HUMAN_INTERFACE, HID_SUBCLASS_NONE, HID_PROTOCOL_NONE),
		D_HIDREPORT(descriptorSize),
    1434:	95 85       	ldd	r25, Z+13	; 0x0d
    1436:	86 85       	ldd	r24, Z+14	; 0x0e
		D_ENDPOINT(USB_ENDPOINT_IN(pluggedEndpoint), USB_ENDPOINT_TYPE_INTERRUPT, USB_EP_SIZE, 0x01)
	};
    1438:	99 8b       	std	Y+17, r25	; 0x11
    143a:	8a 8b       	std	Y+18, r24	; 0x12
    143c:	83 81       	ldd	r24, Z+3	; 0x03
    143e:	80 68       	ori	r24, 0x80	; 128
    1440:	8d 8b       	std	Y+21, r24	; 0x15
	return USB_SendControl(0, &hidInterface, sizeof(hidInterface));
    1442:	49 e1       	ldi	r20, 0x19	; 25
    1444:	50 e0       	ldi	r21, 0x00	; 0
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_Z15USB_SendControlhPKvi>
}
    144c:	69 96       	adiw	r28, 0x19	; 25
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	08 95       	ret

0000145e <_ZN4HID_13getDescriptorER8USBSetup>:

int HID_::getDescriptor(USBSetup& setup)
{
    145e:	ef 92       	push	r14
    1460:	ff 92       	push	r15
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	fb 01       	movw	r30, r22
	// Check if this is a HID Class Descriptor request
	if (setup.bmRequestType != REQUEST_DEVICETOHOST_STANDARD_INTERFACE) { return 0; }
    146c:	20 81       	ld	r18, Z
    146e:	21 38       	cpi	r18, 0x81	; 129
    1470:	51 f5       	brne	.+84     	; 0x14c6 <_ZN4HID_13getDescriptorER8USBSetup+0x68>
	if (setup.wValueH != HID_REPORT_DESCRIPTOR_TYPE) { return 0; }
    1472:	23 81       	ldd	r18, Z+3	; 0x03
    1474:	22 32       	cpi	r18, 0x22	; 34
    1476:	39 f5       	brne	.+78     	; 0x14c6 <_ZN4HID_13getDescriptorER8USBSetup+0x68>

	// In a HID Class Descriptor wIndex cointains the interface number
	if (setup.wIndex != pluggedInterface) { return 0; }
    1478:	dc 01       	movw	r26, r24
    147a:	12 96       	adiw	r26, 0x02	; 2
    147c:	2c 91       	ld	r18, X
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	44 81       	ldd	r20, Z+4	; 0x04
    1482:	55 81       	ldd	r21, Z+5	; 0x05
    1484:	42 17       	cp	r20, r18
    1486:	53 07       	cpc	r21, r19
    1488:	f1 f4       	brne	.+60     	; 0x14c6 <_ZN4HID_13getDescriptorER8USBSetup+0x68>
    148a:	ec 01       	movw	r28, r24

	int total = 0;
	HIDSubDescriptor* node;
	for (node = rootNode; node; node = node->next) {
    148c:	0b 85       	ldd	r16, Y+11	; 0x0b
    148e:	1c 85       	ldd	r17, Y+12	; 0x0c
	if (setup.wValueH != HID_REPORT_DESCRIPTOR_TYPE) { return 0; }

	// In a HID Class Descriptor wIndex cointains the interface number
	if (setup.wIndex != pluggedInterface) { return 0; }

	int total = 0;
    1490:	e1 2c       	mov	r14, r1
    1492:	f1 2c       	mov	r15, r1
	HIDSubDescriptor* node;
	for (node = rootNode; node; node = node->next) {
    1494:	01 15       	cp	r16, r1
    1496:	11 05       	cpc	r17, r1
    1498:	91 f0       	breq	.+36     	; 0x14be <_ZN4HID_13getDescriptorER8USBSetup+0x60>
		int res = USB_SendControl(TRANSFER_PGM, node->data, node->length);
    149a:	f8 01       	movw	r30, r16
    149c:	44 81       	ldd	r20, Z+4	; 0x04
    149e:	55 81       	ldd	r21, Z+5	; 0x05
    14a0:	62 81       	ldd	r22, Z+2	; 0x02
    14a2:	73 81       	ldd	r23, Z+3	; 0x03
    14a4:	80 e8       	ldi	r24, 0x80	; 128
    14a6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_Z15USB_SendControlhPKvi>
		if (res == -1)
    14aa:	8f 3f       	cpi	r24, 0xFF	; 255
    14ac:	ff ef       	ldi	r31, 0xFF	; 255
    14ae:	9f 07       	cpc	r25, r31
    14b0:	69 f0       	breq	.+26     	; 0x14cc <_ZN4HID_13getDescriptorER8USBSetup+0x6e>
			return -1;
		total += res;
    14b2:	e8 0e       	add	r14, r24
    14b4:	f9 1e       	adc	r15, r25
	// In a HID Class Descriptor wIndex cointains the interface number
	if (setup.wIndex != pluggedInterface) { return 0; }

	int total = 0;
	HIDSubDescriptor* node;
	for (node = rootNode; node; node = node->next) {
    14b6:	d8 01       	movw	r26, r16
    14b8:	0d 91       	ld	r16, X+
    14ba:	1c 91       	ld	r17, X
    14bc:	eb cf       	rjmp	.-42     	; 0x1494 <_ZN4HID_13getDescriptorER8USBSetup+0x36>
		total += res;
	}
	
	// Reset the protocol on reenumeration. Normally the host should not assume the state of the protocol
	// due to the USB specs, but Windows and Linux just assumes its in report mode.
	protocol = HID_REPORT_PROTOCOL;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	8f 87       	std	Y+15, r24	; 0x0f
    14c2:	c7 01       	movw	r24, r14
    14c4:	05 c0       	rjmp	.+10     	; 0x14d0 <_ZN4HID_13getDescriptorER8USBSetup+0x72>
}

int HID_::getDescriptor(USBSetup& setup)
{
	// Check if this is a HID Class Descriptor request
	if (setup.bmRequestType != REQUEST_DEVICETOHOST_STANDARD_INTERFACE) { return 0; }
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <_ZN4HID_13getDescriptorER8USBSetup+0x72>
	int total = 0;
	HIDSubDescriptor* node;
	for (node = rootNode; node; node = node->next) {
		int res = USB_SendControl(TRANSFER_PGM, node->data, node->length);
		if (res == -1)
			return -1;
    14cc:	8f ef       	ldi	r24, 0xFF	; 255
    14ce:	9f ef       	ldi	r25, 0xFF	; 255
	// Reset the protocol on reenumeration. Normally the host should not assume the state of the protocol
	// due to the USB specs, but Windows and Linux just assumes its in report mode.
	protocol = HID_REPORT_PROTOCOL;
	
	return total;
}
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	ff 90       	pop	r15
    14da:	ef 90       	pop	r14
    14dc:	08 95       	ret

000014de <_ZN4HID_5setupER8USBSetup>:
	if (ret2 < 0) return ret2;
	return ret + ret2;
}

bool HID_::setup(USBSetup& setup)
{
    14de:	dc 01       	movw	r26, r24
    14e0:	fb 01       	movw	r30, r22
	if (pluggedInterface != setup.wIndex) {
    14e2:	12 96       	adiw	r26, 0x02	; 2
    14e4:	8c 91       	ld	r24, X
    14e6:	12 97       	sbiw	r26, 0x02	; 2
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	24 81       	ldd	r18, Z+4	; 0x04
    14ec:	35 81       	ldd	r19, Z+5	; 0x05
    14ee:	82 17       	cp	r24, r18
    14f0:	93 07       	cpc	r25, r19
    14f2:	d1 f4       	brne	.+52     	; 0x1528 <_ZN4HID_5setupER8USBSetup+0x4a>
		return false;
	}

	uint8_t request = setup.bRequest;
    14f4:	91 81       	ldd	r25, Z+1	; 0x01
	uint8_t requestType = setup.bmRequestType;
    14f6:	80 81       	ld	r24, Z

	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    14f8:	81 3a       	cpi	r24, 0xA1	; 161
    14fa:	31 f4       	brne	.+12     	; 0x1508 <_ZN4HID_5setupER8USBSetup+0x2a>
	{
		if (request == HID_GET_REPORT) {
			// TODO: HID_GetReport();
			return true;
    14fc:	81 e0       	ldi	r24, 0x01	; 1
	uint8_t request = setup.bRequest;
	uint8_t requestType = setup.bmRequestType;

	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
	{
		if (request == HID_GET_REPORT) {
    14fe:	91 30       	cpi	r25, 0x01	; 1
    1500:	91 f0       	breq	.+36     	; 0x1526 <_ZN4HID_5setupER8USBSetup+0x48>
			// TODO: HID_GetReport();
			return true;
		}
		if (request == HID_GET_PROTOCOL) {
    1502:	93 30       	cpi	r25, 0x03	; 3
    1504:	89 f4       	brne	.+34     	; 0x1528 <_ZN4HID_5setupER8USBSetup+0x4a>
    1506:	11 c0       	rjmp	.+34     	; 0x152a <_ZN4HID_5setupER8USBSetup+0x4c>
		if (request == HID_GET_IDLE) {
			// TODO: Send8(idle);
		}
	}

	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    1508:	81 32       	cpi	r24, 0x21	; 33
    150a:	71 f4       	brne	.+28     	; 0x1528 <_ZN4HID_5setupER8USBSetup+0x4a>
	{
		if (request == HID_SET_PROTOCOL) {
    150c:	9b 30       	cpi	r25, 0x0B	; 11
    150e:	21 f4       	brne	.+8      	; 0x1518 <_ZN4HID_5setupER8USBSetup+0x3a>
			// The USB Host tells us if we are in boot or report mode.
			// This only works with a real boot compatible device.
			protocol = setup.wValueL;
    1510:	82 81       	ldd	r24, Z+2	; 0x02
    1512:	1f 96       	adiw	r26, 0x0f	; 15
    1514:	8c 93       	st	X, r24
    1516:	05 c0       	rjmp	.+10     	; 0x1522 <_ZN4HID_5setupER8USBSetup+0x44>
			return true;
		}
		if (request == HID_SET_IDLE) {
    1518:	9a 30       	cpi	r25, 0x0A	; 10
    151a:	31 f4       	brne	.+12     	; 0x1528 <_ZN4HID_5setupER8USBSetup+0x4a>
			idle = setup.wValueL;
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	50 96       	adiw	r26, 0x10	; 16
    1520:	8c 93       	st	X, r24
			return true;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	08 95       	ret
    1526:	08 95       	ret
}

bool HID_::setup(USBSetup& setup)
{
	if (pluggedInterface != setup.wIndex) {
		return false;
    1528:	80 e0       	ldi	r24, 0x00	; 0
			//USB_RecvControl(data, length);
		}
	}

	return false;
}
    152a:	08 95       	ret

0000152c <_ZN4HID_16AppendDescriptorEP16HIDSubDescriptor>:
	name[4] = 'A' + ((descriptorSize >> 4) & 0x0F);
	return 5;
}

void HID_::AppendDescriptor(HIDSubDescriptor *node)
{
    152c:	fc 01       	movw	r30, r24
	if (!rootNode) {
    152e:	a3 85       	ldd	r26, Z+11	; 0x0b
    1530:	b4 85       	ldd	r27, Z+12	; 0x0c
    1532:	10 97       	sbiw	r26, 0x00	; 0
    1534:	19 f4       	brne	.+6      	; 0x153c <_ZN4HID_16AppendDescriptorEP16HIDSubDescriptor+0x10>
		rootNode = node;
    1536:	74 87       	std	Z+12, r23	; 0x0c
    1538:	63 87       	std	Z+11, r22	; 0x0b
    153a:	09 c0       	rjmp	.+18     	; 0x154e <_ZN4HID_16AppendDescriptorEP16HIDSubDescriptor+0x22>
	} else {
		HIDSubDescriptor *current = rootNode;
		while (current->next) {
    153c:	8d 91       	ld	r24, X+
    153e:	9c 91       	ld	r25, X
    1540:	11 97       	sbiw	r26, 0x01	; 1
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	11 f0       	breq	.+4      	; 0x154a <_ZN4HID_16AppendDescriptorEP16HIDSubDescriptor+0x1e>
    1546:	dc 01       	movw	r26, r24
    1548:	f9 cf       	rjmp	.-14     	; 0x153c <_ZN4HID_16AppendDescriptorEP16HIDSubDescriptor+0x10>
			current = current->next;
		}
		current->next = node;
    154a:	6d 93       	st	X+, r22
    154c:	7c 93       	st	X, r23
	}
	descriptorSize += node->length;
    154e:	25 85       	ldd	r18, Z+13	; 0x0d
    1550:	36 85       	ldd	r19, Z+14	; 0x0e
    1552:	db 01       	movw	r26, r22
    1554:	14 96       	adiw	r26, 0x04	; 4
    1556:	8d 91       	ld	r24, X+
    1558:	9c 91       	ld	r25, X
    155a:	15 97       	sbiw	r26, 0x05	; 5
    155c:	82 0f       	add	r24, r18
    155e:	93 1f       	adc	r25, r19
    1560:	96 87       	std	Z+14, r25	; 0x0e
    1562:	85 87       	std	Z+13, r24	; 0x0d
    1564:	08 95       	ret

00001566 <_ZN4HID_10SendReportEhPKvi>:
}

int HID_::SendReport(uint8_t id, const void* data, int len)
{
    1566:	af 92       	push	r10
    1568:	bf 92       	push	r11
    156a:	cf 92       	push	r12
    156c:	df 92       	push	r13
    156e:	ef 92       	push	r14
    1570:	ff 92       	push	r15
    1572:	0f 93       	push	r16
    1574:	1f 93       	push	r17
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	1f 92       	push	r1
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	7c 01       	movw	r14, r24
    1582:	69 83       	std	Y+1, r22	; 0x01
    1584:	6a 01       	movw	r12, r20
    1586:	59 01       	movw	r10, r18
	auto ret = USB_Send(pluggedEndpoint, &id, 1);
    1588:	41 e0       	ldi	r20, 0x01	; 1
    158a:	50 e0       	ldi	r21, 0x00	; 0
    158c:	be 01       	movw	r22, r28
    158e:	6f 5f       	subi	r22, 0xFF	; 255
    1590:	7f 4f       	sbci	r23, 0xFF	; 255
    1592:	fc 01       	movw	r30, r24
    1594:	83 81       	ldd	r24, Z+3	; 0x03
    1596:	0e 94 a9 02 	call	0x552	; 0x552 <_Z8USB_SendhPKvi>
    159a:	8c 01       	movw	r16, r24
	if (ret < 0) return ret;
    159c:	97 fd       	sbrc	r25, 7
    159e:	0b c0       	rjmp	.+22     	; 0x15b6 <_ZN4HID_10SendReportEhPKvi+0x50>
	auto ret2 = USB_Send(pluggedEndpoint | TRANSFER_RELEASE, data, len);
    15a0:	f7 01       	movw	r30, r14
    15a2:	83 81       	ldd	r24, Z+3	; 0x03
    15a4:	a5 01       	movw	r20, r10
    15a6:	b6 01       	movw	r22, r12
    15a8:	80 64       	ori	r24, 0x40	; 64
    15aa:	0e 94 a9 02 	call	0x552	; 0x552 <_Z8USB_SendhPKvi>
	if (ret2 < 0) return ret2;
    15ae:	97 fd       	sbrc	r25, 7
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <_ZN4HID_10SendReportEhPKvi+0x50>
	return ret + ret2;
    15b2:	80 0f       	add	r24, r16
    15b4:	91 1f       	adc	r25, r17
}
    15b6:	0f 90       	pop	r0
    15b8:	df 91       	pop	r29
    15ba:	cf 91       	pop	r28
    15bc:	1f 91       	pop	r17
    15be:	0f 91       	pop	r16
    15c0:	ff 90       	pop	r15
    15c2:	ef 90       	pop	r14
    15c4:	df 90       	pop	r13
    15c6:	cf 90       	pop	r12
    15c8:	bf 90       	pop	r11
    15ca:	af 90       	pop	r10
    15cc:	08 95       	ret

000015ce <_ZN4HID_C1Ev>:
	}

	return false;
}

HID_::HID_(void) : PluggableUSBModule(1, 1, epType),
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	ec 01       	movw	r28, r24
#if defined(USBCON)

class PluggableUSBModule {
public:
  PluggableUSBModule(uint8_t numEps, uint8_t numIfs, uint8_t *epType) :
    numEndpoints(numEps), numInterfaces(numIfs), endpointType(epType)
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	8c 83       	std	Y+4, r24	; 0x04
    15d8:	8d 83       	std	Y+5, r24	; 0x05
                   rootNode(NULL), descriptorSize(0),
                   protocol(HID_REPORT_PROTOCOL), idle(1)
    15da:	9e 01       	movw	r18, r28
    15dc:	26 5f       	subi	r18, 0xF6	; 246
    15de:	3f 4f       	sbci	r19, 0xFF	; 255
    15e0:	3f 83       	std	Y+7, r19	; 0x07
    15e2:	2e 83       	std	Y+6, r18	; 0x06
    15e4:	19 86       	std	Y+9, r1	; 0x09
    15e6:	18 86       	std	Y+8, r1	; 0x08
    15e8:	21 e4       	ldi	r18, 0x41	; 65
    15ea:	31 e0       	ldi	r19, 0x01	; 1
    15ec:	39 83       	std	Y+1, r19	; 0x01
    15ee:	28 83       	st	Y, r18
    15f0:	1c 86       	std	Y+12, r1	; 0x0c
    15f2:	1b 86       	std	Y+11, r1	; 0x0b
    15f4:	1e 86       	std	Y+14, r1	; 0x0e
    15f6:	1d 86       	std	Y+13, r1	; 0x0d
    15f8:	8f 87       	std	Y+15, r24	; 0x0f
    15fa:	88 8b       	std	Y+16, r24	; 0x10
{
	epType[0] = EP_TYPE_INTERRUPT_IN;
    15fc:	81 ec       	ldi	r24, 0xC1	; 193
    15fe:	8a 87       	std	Y+10, r24	; 0x0a
	PluggableUSB().plug(this);
    1600:	0e 94 b7 09 	call	0x136e	; 0x136e <_Z12PluggableUSBv>
    1604:	be 01       	movw	r22, r28
}
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
HID_::HID_(void) : PluggableUSBModule(1, 1, epType),
                   rootNode(NULL), descriptorSize(0),
                   protocol(HID_REPORT_PROTOCOL), idle(1)
{
	epType[0] = EP_TYPE_INTERRUPT_IN;
	PluggableUSB().plug(this);
    160a:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <_ZN13PluggableUSB_4plugEP18PluggableUSBModule>

0000160e <_Z3HIDv>:

#if defined(USBCON)

HID_& HID()
{
	static HID_ obj;
    160e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <_ZGVZ3HIDvE3obj>
    1612:	81 11       	cpse	r24, r1
    1614:	07 c0       	rjmp	.+14     	; 0x1624 <_Z3HIDv+0x16>
    1616:	84 ed       	ldi	r24, 0xD4	; 212
    1618:	91 e0       	ldi	r25, 0x01	; 1
    161a:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <_ZN4HID_C1Ev>
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <_ZGVZ3HIDvE3obj>
	return obj;
}
    1624:	84 ed       	ldi	r24, 0xD4	; 212
    1626:	91 e0       	ldi	r25, 0x01	; 1
    1628:	08 95       	ret

0000162a <__tablejump2__>:
    162a:	ee 0f       	add	r30, r30
    162c:	ff 1f       	adc	r31, r31
    162e:	05 90       	lpm	r0, Z+
    1630:	f4 91       	lpm	r31, Z
    1632:	e0 2d       	mov	r30, r0
    1634:	09 94       	ijmp

00001636 <_exit>:
    1636:	f8 94       	cli

00001638 <__stop_program>:
    1638:	ff cf       	rjmp	.-2      	; 0x1638 <__stop_program>
