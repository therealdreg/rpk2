
at90buttons.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c78  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b93  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ec  00000000  00000000  00001a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001d08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000561  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000026  00000000  00000000  0000228d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000022b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	51 c0       	rjmp	.+162    	; 0xa8 <__bad_interrupt>
   6:	00 00       	nop
   8:	4f c0       	rjmp	.+158    	; 0xa8 <__bad_interrupt>
   a:	00 00       	nop
   c:	4d c0       	rjmp	.+154    	; 0xa8 <__bad_interrupt>
   e:	00 00       	nop
  10:	4b c0       	rjmp	.+150    	; 0xa8 <__bad_interrupt>
  12:	00 00       	nop
  14:	49 c0       	rjmp	.+146    	; 0xa8 <__bad_interrupt>
  16:	00 00       	nop
  18:	47 c0       	rjmp	.+142    	; 0xa8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	45 c0       	rjmp	.+138    	; 0xa8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	43 c0       	rjmp	.+134    	; 0xa8 <__bad_interrupt>
  22:	00 00       	nop
  24:	41 c0       	rjmp	.+130    	; 0xa8 <__bad_interrupt>
  26:	00 00       	nop
  28:	3f c0       	rjmp	.+126    	; 0xa8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3d c0       	rjmp	.+122    	; 0xa8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	3b c0       	rjmp	.+118    	; 0xa8 <__bad_interrupt>
  32:	00 00       	nop
  34:	39 c0       	rjmp	.+114    	; 0xa8 <__bad_interrupt>
  36:	00 00       	nop
  38:	37 c0       	rjmp	.+110    	; 0xa8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	35 c0       	rjmp	.+106    	; 0xa8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	33 c0       	rjmp	.+102    	; 0xa8 <__bad_interrupt>
  42:	00 00       	nop
  44:	31 c0       	rjmp	.+98     	; 0xa8 <__bad_interrupt>
  46:	00 00       	nop
  48:	2f c0       	rjmp	.+94     	; 0xa8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2d c0       	rjmp	.+90     	; 0xa8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	2b c0       	rjmp	.+86     	; 0xa8 <__bad_interrupt>
  52:	00 00       	nop
  54:	29 c0       	rjmp	.+82     	; 0xa8 <__bad_interrupt>
  56:	00 00       	nop
  58:	27 c0       	rjmp	.+78     	; 0xa8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	25 c0       	rjmp	.+74     	; 0xa8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	23 c0       	rjmp	.+70     	; 0xa8 <__bad_interrupt>
  62:	00 00       	nop
  64:	21 c0       	rjmp	.+66     	; 0xa8 <__bad_interrupt>
  66:	00 00       	nop
  68:	1f c0       	rjmp	.+62     	; 0xa8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1d c0       	rjmp	.+58     	; 0xa8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	1b c0       	rjmp	.+54     	; 0xa8 <__bad_interrupt>
  72:	00 00       	nop
  74:	19 c0       	rjmp	.+50     	; 0xa8 <__bad_interrupt>
  76:	00 00       	nop
  78:	17 c0       	rjmp	.+46     	; 0xa8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	15 c0       	rjmp	.+42     	; 0xa8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	13 c0       	rjmp	.+38     	; 0xa8 <__bad_interrupt>
  82:	00 00       	nop
  84:	11 c0       	rjmp	.+34     	; 0xa8 <__bad_interrupt>
  86:	00 00       	nop
  88:	0f c0       	rjmp	.+30     	; 0xa8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	0d c0       	rjmp	.+26     	; 0xa8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	0b c0       	rjmp	.+22     	; 0xa8 <__bad_interrupt>
  92:	00 00       	nop
  94:	09 c0       	rjmp	.+18     	; 0xa8 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61
  a4:	02 d0       	rcall	.+4      	; 0xaa <main>
  a6:	3f c0       	rjmp	.+126    	; 0x126 <_exit>

000000a8 <__bad_interrupt>:
  a8:	ab cf       	rjmp	.-170    	; 0x0 <__vectors>

000000aa <main>:
#define set_bit(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
#define toogle_bit(sfr, bit) (_SFR_BYTE(sfr) ^= _BV(bit))

int main(int argc, char **argv)
{
    MCUSR &= ~_BV(WDRF);
  aa:	84 b7       	in	r24, 0x34	; 52
  ac:	87 7f       	andi	r24, 0xF7	; 247
  ae:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	a8 95       	wdr
  b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  ba:	88 61       	ori	r24, 0x18	; 24
  bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  c0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
  c4:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
    
    CLKPR = (1<<CLKPCE);
  c6:	e1 e6       	ldi	r30, 0x61	; 97
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	80 83       	st	Z, r24
    CLKPR = 0;
  ce:	10 82       	st	Z, r1
    
    set_bit(DDRD, DDD6);
  d0:	8a b1       	in	r24, 0x0a	; 10
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	8a b9       	out	0x0a, r24	; 10
    clear_bit(PORTD, PD6);
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	8f 7b       	andi	r24, 0xBF	; 191
  da:	8b b9       	out	0x0b, r24	; 11
    set_bit(DDRD, DDD7);
  dc:	8a b1       	in	r24, 0x0a	; 10
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	8a b9       	out	0x0a, r24	; 10
    clear_bit(PORTD, PD7);
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	8f 77       	andi	r24, 0x7F	; 127
  e6:	8b b9       	out	0x0b, r24	; 11

    clear_bit(DDRD, DDD5);
  e8:	8a b1       	in	r24, 0x0a	; 10
  ea:	8f 7d       	andi	r24, 0xDF	; 223
  ec:	8a b9       	out	0x0a, r24	; 10
    set_bit(PORTD, PD5);
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	80 62       	ori	r24, 0x20	; 32
  f2:	8b b9       	out	0x0b, r24	; 11
    clear_bit(DDRE, DDE2);
  f4:	8d b1       	in	r24, 0x0d	; 13
  f6:	8b 7f       	andi	r24, 0xFB	; 251
  f8:	8d b9       	out	0x0d, r24	; 13
    set_bit(PORTE, PE2);
  fa:	8e b1       	in	r24, 0x0e	; 14
  fc:	84 60       	ori	r24, 0x04	; 4
  fe:	8e b9       	out	0x0e, r24	; 14
    

    while (1)
    {
        if (PINE & _BV(PINE2))
 100:	62 9b       	sbis	0x0c, 2	; 12
 102:	04 c0       	rjmp	.+8      	; 0x10c <main+0x62>
        {
            clear_bit(PORTD, PD6);
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	8f 7b       	andi	r24, 0xBF	; 191
 108:	8b b9       	out	0x0b, r24	; 11
 10a:	03 c0       	rjmp	.+6      	; 0x112 <main+0x68>
        }
        else
        {
            set_bit(PORTD, PD6);
 10c:	8b b1       	in	r24, 0x0b	; 11
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	8b b9       	out	0x0b, r24	; 11
        }
        
        if (PIND & _BV(PIND5))
 112:	4d 9b       	sbis	0x09, 5	; 9
 114:	04 c0       	rjmp	.+8      	; 0x11e <main+0x74>
        {
            clear_bit(PORTD, PD7);
 116:	8b b1       	in	r24, 0x0b	; 11
 118:	8f 77       	andi	r24, 0x7F	; 127
 11a:	8b b9       	out	0x0b, r24	; 11
 11c:	f1 cf       	rjmp	.-30     	; 0x100 <main+0x56>
        }
        else
        {
            set_bit(PORTD, PD7);
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	80 68       	ori	r24, 0x80	; 128
 122:	8b b9       	out	0x0b, r24	; 11
 124:	ed cf       	rjmp	.-38     	; 0x100 <main+0x56>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
