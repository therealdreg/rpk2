
at90masskeyboardvirtualserialfatfs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000594  00800100  00006dcc  00006e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006dcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006ba  00800694  00800694  000073f4  2**0
                  ALLOC
  3 .noinit       00000004  00800d4e  00800d4e  000073f4  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  000073f4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007450  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000978  00000000  00000000  00007490  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00011bd5  00000000  00000000  00007e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003831  00000000  00000000  000199dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00012e57  00000000  00000000  0001d20e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00002608  00000000  00000000  00030068  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0001e391  00000000  00000000  00032670  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000f229  00000000  00000000  00050a01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b38  00000000  00000000  0005fc2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00009db2  00000000  00000000  00060762  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e0 c0       	rjmp	.+448    	; 0x1c2 <__ctors_end>
       2:	00 00       	nop
       4:	fd c0       	rjmp	.+506    	; 0x200 <__bad_interrupt>
       6:	00 00       	nop
       8:	fb c0       	rjmp	.+502    	; 0x200 <__bad_interrupt>
       a:	00 00       	nop
       c:	f9 c0       	rjmp	.+498    	; 0x200 <__bad_interrupt>
       e:	00 00       	nop
      10:	f7 c0       	rjmp	.+494    	; 0x200 <__bad_interrupt>
      12:	00 00       	nop
      14:	f5 c0       	rjmp	.+490    	; 0x200 <__bad_interrupt>
      16:	00 00       	nop
      18:	f3 c0       	rjmp	.+486    	; 0x200 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f1 c0       	rjmp	.+482    	; 0x200 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ef c0       	rjmp	.+478    	; 0x200 <__bad_interrupt>
      22:	00 00       	nop
      24:	ed c0       	rjmp	.+474    	; 0x200 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 23 30 	jmp	0x6046	; 0x6046 <__vector_10>
      2c:	0c 94 ef 30 	jmp	0x61de	; 0x61de <__vector_11>
      30:	e7 c0       	rjmp	.+462    	; 0x200 <__bad_interrupt>
      32:	00 00       	nop
      34:	e5 c0       	rjmp	.+458    	; 0x200 <__bad_interrupt>
      36:	00 00       	nop
      38:	e3 c0       	rjmp	.+454    	; 0x200 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e1 c0       	rjmp	.+450    	; 0x200 <__bad_interrupt>
      3e:	00 00       	nop
      40:	df c0       	rjmp	.+446    	; 0x200 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__vector_17>
      48:	db c0       	rjmp	.+438    	; 0x200 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d9 c0       	rjmp	.+434    	; 0x200 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d7 c0       	rjmp	.+430    	; 0x200 <__bad_interrupt>
      52:	00 00       	nop
      54:	d5 c0       	rjmp	.+426    	; 0x200 <__bad_interrupt>
      56:	00 00       	nop
      58:	d3 c0       	rjmp	.+422    	; 0x200 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d1 c0       	rjmp	.+418    	; 0x200 <__bad_interrupt>
      5e:	00 00       	nop
      60:	cf c0       	rjmp	.+414    	; 0x200 <__bad_interrupt>
      62:	00 00       	nop
      64:	cd c0       	rjmp	.+410    	; 0x200 <__bad_interrupt>
      66:	00 00       	nop
      68:	cb c0       	rjmp	.+406    	; 0x200 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c9 c0       	rjmp	.+402    	; 0x200 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c7 c0       	rjmp	.+398    	; 0x200 <__bad_interrupt>
      72:	00 00       	nop
      74:	c5 c0       	rjmp	.+394    	; 0x200 <__bad_interrupt>
      76:	00 00       	nop
      78:	c3 c0       	rjmp	.+390    	; 0x200 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c1 c0       	rjmp	.+386    	; 0x200 <__bad_interrupt>
      7e:	00 00       	nop
      80:	bf c0       	rjmp	.+382    	; 0x200 <__bad_interrupt>
      82:	00 00       	nop
      84:	bd c0       	rjmp	.+378    	; 0x200 <__bad_interrupt>
      86:	00 00       	nop
      88:	bb c0       	rjmp	.+374    	; 0x200 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b9 c0       	rjmp	.+370    	; 0x200 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b7 c0       	rjmp	.+366    	; 0x200 <__bad_interrupt>
      92:	00 00       	nop
      94:	b5 c0       	rjmp	.+362    	; 0x200 <__bad_interrupt>
	...

00000098 <__trampolines_end>:
      98:	52 65       	ori	r21, 0x52	; 82
      9a:	61 64       	ori	r22, 0x41	; 65
      9c:	79 0d       	add	r23, r9
      9e:	0a 00       	.word	0x000a	; ????

000000a0 <__c.5022>:
      a0:	44 69 73 63 6f 6e 6e 65 63 74 0d 0a 00              Disconnect...

000000ad <__c.5017>:
      ad:	43 6f 6e 6e 65 63 74 0d 0a 00                       Connect...

000000b7 <__c.5012>:
      b7:	68 74 74 70 73 3a 2f 2f 77 77 77 2e 66 72 33 33     https://www.fr33
      c7:	70 72 6f 6a 65 63 74 2e 6f 72 67 0d 0a 70 6f 77     project.org..pow
      d7:	65 72 65 64 20 62 79 20 4c 55 46 41 20 68 74 74     ered by LUFA htt
      e7:	70 3a 2f 2f 65 6c 6d 2d 63 68 61 6e 2e 6f 72 67     p://elm-chan.org
      f7:	2f 66 73 77 2f 66 66 2f 30 30 69 6e 64 65 78 5f     /fsw/ff/00index_
     107:	65 2e 68 74 6d 6c 20 61 6e 64 20 46 61 74 46 73     e.html and FatFs
     117:	20 68 74 74 70 3a 2f 2f 65 6c 6d 2d 63 68 61 6e      http://elm-chan
     127:	2e 6f 72 67 2f 66 73 77 2f 66 66 2f 30 30 69 6e     .org/fsw/ff/00in
     137:	64 65 78 5f 65 2e 68 74 6d 6c 0d 0a 0d 0a 00        dex_e.html.....

00000146 <__c.5010>:
     146:	52 20 25 6c 69 20 25 69 0d 0a 00                    R %li %i...

00000151 <__c.4990>:
     151:	57 20 25 6c 69 20 25 69 0d 0a 00                    W %li %i...

0000015c <__c.4976>:
     15c:	53 44 20 62 6c 6f 63 6b 73 3a 20 25 6c 69 0d 0a     SD blocks: %li..
	...

0000016d <__c.4969>:
     16d:	0d 0a 0d 0a 00                                      .....

00000172 <__c.4967>:
     172:	66 69 72 73 74 20 53 44 20 73 65 63 74 6f 72 3a     first SD sector:
     182:	0d 0a 00                                            ...

00000185 <__c.4964>:
     185:	64 69 73 6b 5f 69 6e 69 74 69 61 6c 69 7a 65 20     disk_initialize 
     195:	73 75 63 63 65 73 73 0d 0a 00                       success...

0000019f <__c.4960>:
     19f:	74 72 79 69 6e 67 20 2e 2e 2e 20 64 69 73 6b 5f     trying ... disk_
     1af:	69 6e 69 74 69 61 6c 69 7a 65 0d 0a 00              initialize...

000001bc <__c.4958>:
     1bc:	0d 0a 0d 0a 00 00                                   ......

000001c2 <__ctors_end>:
     1c2:	11 24       	eor	r1, r1
     1c4:	1f be       	out	0x3f, r1	; 63
     1c6:	cf ef       	ldi	r28, 0xFF	; 255
     1c8:	d0 e2       	ldi	r29, 0x20	; 32
     1ca:	de bf       	out	0x3e, r29	; 62
     1cc:	cd bf       	out	0x3d, r28	; 61

000001ce <__do_copy_data>:
     1ce:	16 e0       	ldi	r17, 0x06	; 6
     1d0:	a0 e0       	ldi	r26, 0x00	; 0
     1d2:	b1 e0       	ldi	r27, 0x01	; 1
     1d4:	ec ec       	ldi	r30, 0xCC	; 204
     1d6:	fd e6       	ldi	r31, 0x6D	; 109
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0b bf       	out	0x3b, r16	; 59
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <__do_copy_data+0x14>
     1de:	07 90       	elpm	r0, Z+
     1e0:	0d 92       	st	X+, r0
     1e2:	a4 39       	cpi	r26, 0x94	; 148
     1e4:	b1 07       	cpc	r27, r17
     1e6:	d9 f7       	brne	.-10     	; 0x1de <__do_copy_data+0x10>

000001e8 <__do_clear_bss>:
     1e8:	2d e0       	ldi	r18, 0x0D	; 13
     1ea:	a4 e9       	ldi	r26, 0x94	; 148
     1ec:	b6 e0       	ldi	r27, 0x06	; 6
     1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <.do_clear_bss_start>

000001f0 <.do_clear_bss_loop>:
     1f0:	1d 92       	st	X+, r1

000001f2 <.do_clear_bss_start>:
     1f2:	ae 34       	cpi	r26, 0x4E	; 78
     1f4:	b2 07       	cpc	r27, r18
     1f6:	e1 f7       	brne	.-8      	; 0x1f0 <.do_clear_bss_loop>
     1f8:	0e 94 3a 19 	call	0x3274	; 0x3274 <main>
     1fc:	0c 94 e4 36 	jmp	0x6dc8	; 0x6dc8 <_exit>

00000200 <__bad_interrupt>:
     200:	ff ce       	rjmp	.-514    	; 0x0 <__vectors>

00000202 <on_sd>:
    CS_DISABLE();

    SPI_FAST();

    return SD_INIT_OK;
}
     202:	84 b1       	in	r24, 0x04	; 4
     204:	80 64       	ori	r24, 0x40	; 64
     206:	84 b9       	out	0x04, r24	; 4
     208:	85 b1       	in	r24, 0x05	; 5
     20a:	8f 7b       	andi	r24, 0xBF	; 191
     20c:	85 b9       	out	0x05, r24	; 5
     20e:	08 95       	ret

00000210 <uart_putc>:
     210:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     214:	95 ff       	sbrs	r25, 5
     216:	fc cf       	rjmp	.-8      	; 0x210 <uart_putc>
     218:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     21c:	08 95       	ret

0000021e <uart_puts>:
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	ec 01       	movw	r28, r24
     224:	0f c0       	rjmp	.+30     	; 0x244 <uart_puts+0x26>
     226:	8a 30       	cpi	r24, 0x0A	; 10
     228:	49 f4       	brne	.+18     	; 0x23c <uart_puts+0x1e>
     22a:	90 91 94 06 	lds	r25, 0x0694	; 0x800694 <__data_end>
     22e:	9d 30       	cpi	r25, 0x0D	; 13
     230:	29 f0       	breq	.+10     	; 0x23c <uart_puts+0x1e>
     232:	8d e0       	ldi	r24, 0x0D	; 13
     234:	ed df       	rcall	.-38     	; 0x210 <uart_putc>
     236:	8a e0       	ldi	r24, 0x0A	; 10
     238:	eb df       	rcall	.-42     	; 0x210 <uart_putc>
     23a:	01 c0       	rjmp	.+2      	; 0x23e <uart_puts+0x20>
     23c:	e9 df       	rcall	.-46     	; 0x210 <uart_putc>
     23e:	89 91       	ld	r24, Y+
     240:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <__data_end>
     244:	88 81       	ld	r24, Y
     246:	81 11       	cpse	r24, r1
     248:	ee cf       	rjmp	.-36     	; 0x226 <uart_puts+0x8>
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	08 95       	ret

00000250 <uart_putsnl>:
     250:	e6 df       	rcall	.-52     	; 0x21e <uart_puts>
     252:	8f e8       	ldi	r24, 0x8F	; 143
     254:	94 e0       	ldi	r25, 0x04	; 4
     256:	e3 cf       	rjmp	.-58     	; 0x21e <uart_puts>
     258:	08 95       	ret

0000025a <uart_printhexchar>:
     25a:	1f 93       	push	r17
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
     264:	61 97       	sbiw	r28, 0x11	; 17
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	f8 94       	cli
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	cd bf       	out	0x3d, r28	; 61
     270:	18 2f       	mov	r17, r24
     272:	81 e1       	ldi	r24, 0x11	; 17
     274:	e7 ea       	ldi	r30, 0xA7	; 167
     276:	f1 e0       	ldi	r31, 0x01	; 1
     278:	de 01       	movw	r26, r28
     27a:	11 96       	adiw	r26, 0x01	; 1
     27c:	01 90       	ld	r0, Z+
     27e:	0d 92       	st	X+, r0
     280:	8a 95       	dec	r24
     282:	e1 f7       	brne	.-8      	; 0x27c <uart_printhexchar+0x22>
     284:	81 2f       	mov	r24, r17
     286:	82 95       	swap	r24
     288:	8f 70       	andi	r24, 0x0F	; 15
     28a:	e1 e0       	ldi	r30, 0x01	; 1
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	ec 0f       	add	r30, r28
     290:	fd 1f       	adc	r31, r29
     292:	e8 0f       	add	r30, r24
     294:	f1 1d       	adc	r31, r1
     296:	80 81       	ld	r24, Z
     298:	bb df       	rcall	.-138    	; 0x210 <uart_putc>
     29a:	1f 70       	andi	r17, 0x0F	; 15
     29c:	e1 e0       	ldi	r30, 0x01	; 1
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	ec 0f       	add	r30, r28
     2a2:	fd 1f       	adc	r31, r29
     2a4:	e1 0f       	add	r30, r17
     2a6:	f1 1d       	adc	r31, r1
     2a8:	80 81       	ld	r24, Z
     2aa:	b2 df       	rcall	.-156    	; 0x210 <uart_putc>
     2ac:	61 96       	adiw	r28, 0x11	; 17
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	f8 94       	cli
     2b2:	de bf       	out	0x3e, r29	; 62
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	cd bf       	out	0x3d, r28	; 61
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	08 95       	ret

000002c0 <uart_printhexdump>:
     2c0:	9f 92       	push	r9
     2c2:	af 92       	push	r10
     2c4:	bf 92       	push	r11
     2c6:	cf 92       	push	r12
     2c8:	df 92       	push	r13
     2ca:	ef 92       	push	r14
     2cc:	ff 92       	push	r15
     2ce:	0f 93       	push	r16
     2d0:	1f 93       	push	r17
     2d2:	cf 93       	push	r28
     2d4:	df 93       	push	r29
     2d6:	ec 01       	movw	r28, r24
     2d8:	5b 01       	movw	r10, r22
     2da:	67 2b       	or	r22, r23
     2dc:	09 f4       	brne	.+2      	; 0x2e0 <uart_printhexdump+0x20>
     2de:	3c c0       	rjmp	.+120    	; 0x358 <uart_printhexdump+0x98>
     2e0:	e1 2c       	mov	r14, r1
     2e2:	f1 2c       	mov	r15, r1
     2e4:	32 c0       	rjmp	.+100    	; 0x34a <uart_printhexdump+0x8a>
     2e6:	6e 01       	movw	r12, r28
     2e8:	8f ef       	ldi	r24, 0xFF	; 255
     2ea:	c8 1a       	sub	r12, r24
     2ec:	d8 0a       	sbc	r13, r24
     2ee:	88 81       	ld	r24, Y
     2f0:	b4 df       	rcall	.-152    	; 0x25a <uart_printhexchar>
     2f2:	80 e2       	ldi	r24, 0x20	; 32
     2f4:	8d df       	rcall	.-230    	; 0x210 <uart_putc>
     2f6:	ef ef       	ldi	r30, 0xFF	; 255
     2f8:	ee 1a       	sub	r14, r30
     2fa:	fe 0a       	sbc	r15, r30
     2fc:	c7 01       	movw	r24, r14
     2fe:	8f 70       	andi	r24, 0x0F	; 15
     300:	99 27       	eor	r25, r25
     302:	89 2b       	or	r24, r25
     304:	29 f0       	breq	.+10     	; 0x310 <uart_printhexdump+0x50>
     306:	c5 01       	movw	r24, r10
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	08 17       	cp	r16, r24
     30c:	19 07       	cpc	r17, r25
     30e:	e1 f4       	brne	.+56     	; 0x348 <uart_printhexdump+0x88>
     310:	8e 01       	movw	r16, r28
     312:	0f 50       	subi	r16, 0x0F	; 15
     314:	11 09       	sbc	r17, r1
     316:	c0 e0       	ldi	r28, 0x00	; 0
     318:	d0 e0       	ldi	r29, 0x00	; 0
     31a:	10 c0       	rjmp	.+32     	; 0x33c <uart_printhexdump+0x7c>
     31c:	f8 01       	movw	r30, r16
     31e:	90 80       	ld	r9, Z
     320:	89 2d       	mov	r24, r9
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 49 33 	call	0x6692	; 0x6692 <isprint>
     328:	89 2b       	or	r24, r25
     32a:	19 f0       	breq	.+6      	; 0x332 <uart_printhexdump+0x72>
     32c:	89 2d       	mov	r24, r9
     32e:	70 df       	rcall	.-288    	; 0x210 <uart_putc>
     330:	02 c0       	rjmp	.+4      	; 0x336 <uart_printhexdump+0x76>
     332:	8e e2       	ldi	r24, 0x2E	; 46
     334:	6d df       	rcall	.-294    	; 0x210 <uart_putc>
     336:	0f 5f       	subi	r16, 0xFF	; 255
     338:	1f 4f       	sbci	r17, 0xFF	; 255
     33a:	21 96       	adiw	r28, 0x01	; 1
     33c:	c0 31       	cpi	r28, 0x10	; 16
     33e:	d1 05       	cpc	r29, r1
     340:	6c f3       	brlt	.-38     	; 0x31c <uart_printhexdump+0x5c>
     342:	8f e8       	ldi	r24, 0x8F	; 143
     344:	94 e0       	ldi	r25, 0x04	; 4
     346:	6b df       	rcall	.-298    	; 0x21e <uart_puts>
     348:	e6 01       	movw	r28, r12
     34a:	87 01       	movw	r16, r14
     34c:	ea 14       	cp	r14, r10
     34e:	fb 04       	cpc	r15, r11
     350:	50 f2       	brcs	.-108    	; 0x2e6 <uart_printhexdump+0x26>
     352:	8f e8       	ldi	r24, 0x8F	; 143
     354:	94 e0       	ldi	r25, 0x04	; 4
     356:	63 df       	rcall	.-314    	; 0x21e <uart_puts>
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	df 90       	pop	r13
     366:	cf 90       	pop	r12
     368:	bf 90       	pop	r11
     36a:	af 90       	pop	r10
     36c:	9f 90       	pop	r9
     36e:	08 95       	ret

00000370 <SPI_write>:
     370:	8e bd       	out	0x2e, r24	; 46
     372:	0d b4       	in	r0, 0x2d	; 45
     374:	07 fe       	sbrs	r0, 7
     376:	fd cf       	rjmp	.-6      	; 0x372 <SPI_write+0x2>
     378:	8e b5       	in	r24, 0x2e	; 46
     37a:	08 95       	ret

0000037c <wait_sd_some_cycl>:
     37c:	8f ef       	ldi	r24, 0xFF	; 255
     37e:	f8 df       	rcall	.-16     	; 0x370 <SPI_write>
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	f6 df       	rcall	.-20     	; 0x370 <SPI_write>
     384:	8f ef       	ldi	r24, 0xFF	; 255
     386:	f4 df       	rcall	.-24     	; 0x370 <SPI_write>
     388:	8f ef       	ldi	r24, 0xFF	; 255
     38a:	f2 df       	rcall	.-28     	; 0x370 <SPI_write>
     38c:	8f ef       	ldi	r24, 0xFF	; 255
     38e:	f0 df       	rcall	.-32     	; 0x370 <SPI_write>
     390:	8f ef       	ldi	r24, 0xFF	; 255
     392:	ee df       	rcall	.-36     	; 0x370 <SPI_write>
     394:	8f ef       	ldi	r24, 0xFF	; 255
     396:	ec df       	rcall	.-40     	; 0x370 <SPI_write>
     398:	8f ef       	ldi	r24, 0xFF	; 255
     39a:	ea df       	rcall	.-44     	; 0x370 <SPI_write>
     39c:	8f ef       	ldi	r24, 0xFF	; 255
     39e:	e8 df       	rcall	.-48     	; 0x370 <SPI_write>
     3a0:	8f ef       	ldi	r24, 0xFF	; 255
     3a2:	e6 cf       	rjmp	.-52     	; 0x370 <SPI_write>
     3a4:	08 95       	ret

000003a6 <read_spi_while_byte_is_not>:
     3a6:	8f 92       	push	r8
     3a8:	9f 92       	push	r9
     3aa:	af 92       	push	r10
     3ac:	bf 92       	push	r11
     3ae:	cf 92       	push	r12
     3b0:	df 92       	push	r13
     3b2:	ef 92       	push	r14
     3b4:	ff 92       	push	r15
     3b6:	cf 93       	push	r28
     3b8:	c8 2f       	mov	r28, r24
     3ba:	4a 01       	movw	r8, r20
     3bc:	5b 01       	movw	r10, r22
     3be:	c1 2c       	mov	r12, r1
     3c0:	d1 2c       	mov	r13, r1
     3c2:	76 01       	movw	r14, r12
     3c4:	18 c0       	rjmp	.+48     	; 0x3f6 <read_spi_while_byte_is_not+0x50>
     3c6:	8f ef       	ldi	r24, 0xFF	; 255
     3c8:	d3 df       	rcall	.-90     	; 0x370 <SPI_write>
     3ca:	8c 17       	cp	r24, r28
     3cc:	f1 f0       	breq	.+60     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	c8 1a       	sub	r12, r24
     3d2:	d8 0a       	sbc	r13, r24
     3d4:	e8 0a       	sbc	r14, r24
     3d6:	f8 0a       	sbc	r15, r24
     3d8:	c7 01       	movw	r24, r14
     3da:	b6 01       	movw	r22, r12
     3dc:	28 ee       	ldi	r18, 0xE8	; 232
     3de:	33 e0       	ldi	r19, 0x03	; 3
     3e0:	40 e0       	ldi	r20, 0x00	; 0
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	0e 94 0c 33 	call	0x6618	; 0x6618 <__udivmodsi4>
     3e8:	67 2b       	or	r22, r23
     3ea:	68 2b       	or	r22, r24
     3ec:	69 2b       	or	r22, r25
     3ee:	19 f4       	brne	.+6      	; 0x3f6 <read_spi_while_byte_is_not+0x50>
     3f0:	88 eb       	ldi	r24, 0xB8	; 184
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	2d df       	rcall	.-422    	; 0x250 <uart_putsnl>
     3f6:	c8 14       	cp	r12, r8
     3f8:	d9 04       	cpc	r13, r9
     3fa:	ea 04       	cpc	r14, r10
     3fc:	fb 04       	cpc	r15, r11
     3fe:	18 f3       	brcs	.-58     	; 0x3c6 <read_spi_while_byte_is_not+0x20>
     400:	81 ed       	ldi	r24, 0xD1	; 209
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	25 df       	rcall	.-438    	; 0x250 <uart_putsnl>
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	01 c0       	rjmp	.+2      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	cf 91       	pop	r28
     40e:	ff 90       	pop	r15
     410:	ef 90       	pop	r14
     412:	df 90       	pop	r13
     414:	cf 90       	pop	r12
     416:	bf 90       	pop	r11
     418:	af 90       	pop	r10
     41a:	9f 90       	pop	r9
     41c:	8f 90       	pop	r8
     41e:	08 95       	ret

00000420 <SD_read_sector>:

// TODO: This function will not exit gracefully if SD card does not do what it should
bool SD_read_sector(unsigned long sector, uint8_t* buffer)
{
     420:	8f 92       	push	r8
     422:	9f 92       	push	r9
     424:	af 92       	push	r10
     426:	bf 92       	push	r11
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	4b 01       	movw	r8, r22
     436:	5c 01       	movw	r10, r24
     438:	7a 01       	movw	r14, r20
    unsigned short i = 0;
    bool retf = false;

    CS_ENABLE();
     43a:	85 b1       	in	r24, 0x05	; 5
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	85 b9       	out	0x05, r24	; 5
    wait_sd_some_cycl();
     440:	9d df       	rcall	.-198    	; 0x37c <wait_sd_some_cycl>

    SPI_write(CMD17);
     442:	81 e5       	ldi	r24, 0x51	; 81
     444:	95 df       	rcall	.-214    	; 0x370 <SPI_write>
    SPI_write(sector >> 15); // sector*512 >> 24
     446:	d5 01       	movw	r26, r10
     448:	c4 01       	movw	r24, r8
     44a:	07 2e       	mov	r0, r23
     44c:	7f e0       	ldi	r23, 0x0F	; 15
     44e:	b6 95       	lsr	r27
     450:	a7 95       	ror	r26
     452:	97 95       	ror	r25
     454:	87 95       	ror	r24
     456:	7a 95       	dec	r23
     458:	d1 f7       	brne	.-12     	; 0x44e <SD_read_sector+0x2e>
     45a:	70 2d       	mov	r23, r0
     45c:	89 df       	rcall	.-238    	; 0x370 <SPI_write>
    SPI_write(sector >> 7); // sector*512 >> 16
     45e:	d5 01       	movw	r26, r10
     460:	c4 01       	movw	r24, r8
     462:	68 94       	set
     464:	16 f8       	bld	r1, 6
     466:	b6 95       	lsr	r27
     468:	a7 95       	ror	r26
     46a:	97 95       	ror	r25
     46c:	87 95       	ror	r24
     46e:	16 94       	lsr	r1
     470:	d1 f7       	brne	.-12     	; 0x466 <SD_read_sector+0x46>
    SPI_write(sector << 1); // sector*512 >> 8
     472:	7e df       	rcall	.-260    	; 0x370 <SPI_write>
     474:	88 2d       	mov	r24, r8
    SPI_write(0);          // sector*512
     476:	88 0f       	add	r24, r24
     478:	7b df       	rcall	.-266    	; 0x370 <SPI_write>
     47a:	80 e0       	ldi	r24, 0x00	; 0
    SPI_write(0xFF);
     47c:	79 df       	rcall	.-270    	; 0x370 <SPI_write>
     47e:	8f ef       	ldi	r24, 0xFF	; 255

    // wait for 0
    if (read_spi_while_byte_is_not(0, RECOMMEND_WAIT_TIMEOUT_SPI))
     480:	77 df       	rcall	.-274    	; 0x370 <SPI_write>
     482:	40 ea       	ldi	r20, 0xA0	; 160
     484:	56 e8       	ldi	r21, 0x86	; 134
     486:	61 e0       	ldi	r22, 0x01	; 1
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	8c df       	rcall	.-232    	; 0x3a6 <read_spi_while_byte_is_not>
     48e:	88 23       	and	r24, r24
    {
        // wait for data Start Block token
        if (read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI))
     490:	f1 f0       	breq	.+60     	; 0x4ce <SD_read_sector+0xae>
     492:	40 ea       	ldi	r20, 0xA0	; 160
     494:	56 e8       	ldi	r21, 0x86	; 134
     496:	61 e0       	ldi	r22, 0x01	; 1
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	8e ef       	ldi	r24, 0xFE	; 254
     49c:	84 df       	rcall	.-248    	; 0x3a6 <read_spi_while_byte_is_not>
     49e:	81 11       	cpse	r24, r1
     4a0:	0a c0       	rjmp	.+20     	; 0x4b6 <SD_read_sector+0x96>
        {
            for (i = 0; i < 512; i++)
            {
                buffer[i] = SPI_write(0xFF);
     4a2:	16 c0       	rjmp	.+44     	; 0x4d0 <SD_read_sector+0xb0>
     4a4:	87 01       	movw	r16, r14
     4a6:	0c 0f       	add	r16, r28
     4a8:	1d 1f       	adc	r17, r29
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
     4ac:	61 df       	rcall	.-318    	; 0x370 <SPI_write>
     4ae:	f8 01       	movw	r30, r16
    if (read_spi_while_byte_is_not(0, RECOMMEND_WAIT_TIMEOUT_SPI))
    {
        // wait for data Start Block token
        if (read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI))
        {
            for (i = 0; i < 512; i++)
     4b0:	80 83       	st	Z, r24
     4b2:	21 96       	adiw	r28, 0x01	; 1
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <SD_read_sector+0x9a>
     4b6:	c0 e0       	ldi	r28, 0x00	; 0
     4b8:	d0 e0       	ldi	r29, 0x00	; 0
     4ba:	c1 15       	cp	r28, r1
     4bc:	f2 e0       	ldi	r31, 0x02	; 2
            {
                buffer[i] = SPI_write(0xFF);
            }
            // skip checksum
            SPI_write(0xFF);
     4be:	df 07       	cpc	r29, r31
     4c0:	88 f3       	brcs	.-30     	; 0x4a4 <SD_read_sector+0x84>
     4c2:	8f ef       	ldi	r24, 0xFF	; 255
            SPI_write(0xFF);
     4c4:	55 df       	rcall	.-342    	; 0x370 <SPI_write>
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	53 df       	rcall	.-346    	; 0x370 <SPI_write>

            retf = true;
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <SD_read_sector+0xb0>

// TODO: This function will not exit gracefully if SD card does not do what it should
bool SD_read_sector(unsigned long sector, uint8_t* buffer)
{
    unsigned short i = 0;
    bool retf = false;
     4ce:	80 e0       	ldi	r24, 0x00	; 0
            retf = true;
        }

    }

    CS_DISABLE();
     4d0:	95 b1       	in	r25, 0x05	; 5
     4d2:	91 60       	ori	r25, 0x01	; 1
     4d4:	95 b9       	out	0x05, r25	; 5

    return retf;
}
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	ff 90       	pop	r15
     4e0:	ef 90       	pop	r14
     4e2:	bf 90       	pop	r11
     4e4:	af 90       	pop	r10
     4e6:	9f 90       	pop	r9
     4e8:	8f 90       	pop	r8
     4ea:	08 95       	ret

000004ec <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
     4ec:	29 2f       	mov	r18, r25
     4ee:	33 27       	eor	r19, r19
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     4f0:	23 30       	cpi	r18, 0x03	; 3
     4f2:	31 05       	cpc	r19, r1
     4f4:	c9 f0       	breq	.+50     	; 0x528 <CALLBACK_USB_GetDescriptor+0x3c>
     4f6:	40 f4       	brcc	.+16     	; 0x508 <CALLBACK_USB_GetDescriptor+0x1c>
     4f8:	21 30       	cpi	r18, 0x01	; 1
     4fa:	31 05       	cpc	r19, r1
     4fc:	09 f4       	brne	.+2      	; 0x500 <CALLBACK_USB_GetDescriptor+0x14>
     4fe:	47 c0       	rjmp	.+142    	; 0x58e <CALLBACK_USB_GetDescriptor+0xa2>
     500:	22 30       	cpi	r18, 0x02	; 2
     502:	31 05       	cpc	r19, r1
     504:	61 f0       	breq	.+24     	; 0x51e <CALLBACK_USB_GetDescriptor+0x32>
     506:	06 c0       	rjmp	.+12     	; 0x514 <CALLBACK_USB_GetDescriptor+0x28>
     508:	21 32       	cpi	r18, 0x21	; 33
     50a:	31 05       	cpc	r19, r1
     50c:	b1 f1       	breq	.+108    	; 0x57a <CALLBACK_USB_GetDescriptor+0x8e>
     50e:	22 32       	cpi	r18, 0x22	; 34
     510:	31 05       	cpc	r19, r1
     512:	c1 f1       	breq	.+112    	; 0x584 <CALLBACK_USB_GetDescriptor+0x98>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	41 c0       	rjmp	.+130    	; 0x5a0 <CALLBACK_USB_GetDescriptor+0xb4>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
     51e:	86 e7       	ldi	r24, 0x76	; 118
     520:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
     522:	29 ec       	ldi	r18, 0xC9	; 201
     524:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
     526:	3c c0       	rjmp	.+120    	; 0x5a0 <CALLBACK_USB_GetDescriptor+0xb4>
        case DTYPE_String:
            if (USB_ControlRequest.wLength == 0xFF)
     528:	20 91 46 0d 	lds	r18, 0x0D46	; 0x800d46 <USB_ControlRequest+0x6>
     52c:	30 91 47 0d 	lds	r19, 0x0D47	; 0x800d47 <USB_ControlRequest+0x7>
     530:	2f 3f       	cpi	r18, 0xFF	; 255
     532:	31 05       	cpc	r19, r1
     534:	39 f4       	brne	.+14     	; 0x544 <CALLBACK_USB_GetDescriptor+0x58>
            {
                guess_os.maybe_linux = 1;
     536:	20 91 d4 0a 	lds	r18, 0x0AD4	; 0x800ad4 <guess_os>
                guess_os.maybe_win = 1;
                guess_os.not_mac =
     53a:	23 60       	ori	r18, 0x03	; 3
     53c:	20 62       	ori	r18, 0x20	; 32
     53e:	20 93 d4 0a 	sts	0x0AD4, r18	; 0x800ad4 <guess_os>
     542:	05 c0       	rjmp	.+10     	; 0x54e <CALLBACK_USB_GetDescriptor+0x62>
                    1; // In testing, MacOS NEVER sets a descript request lenght of 255
            }
            else
            {
                guess_os.not_linux =
     544:	20 91 d4 0a 	lds	r18, 0x0AD4	; 0x800ad4 <guess_os>
     548:	28 60       	ori	r18, 0x08	; 8
     54a:	20 93 d4 0a 	sts	0x0AD4, r18	; 0x800ad4 <guess_os>
                    1; // In testing, Linux ALWAYS sets a descriptor request length of 255;
            }

            switch (DescriptorNumber)
     54e:	99 27       	eor	r25, r25
     550:	81 30       	cpi	r24, 0x01	; 1
     552:	91 05       	cpc	r25, r1
     554:	41 f0       	breq	.+16     	; 0x566 <CALLBACK_USB_GetDescriptor+0x7a>
     556:	00 f1       	brcs	.+64     	; 0x598 <CALLBACK_USB_GetDescriptor+0xac>
     558:	02 97       	sbiw	r24, 0x02	; 2
     55a:	51 f0       	breq	.+20     	; 0x570 <CALLBACK_USB_GetDescriptor+0x84>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	1d c0       	rjmp	.+58     	; 0x5a0 <CALLBACK_USB_GetDescriptor+0xb4>
                    Address = &LanguageString;
                    Size    = LanguageString.Header.Size;
                    break;
                case STRING_ID_Manufacturer:
                    Address = &ManufacturerString;
                    Size    = ManufacturerString.Header.Size;
     566:	8a e0       	ldi	r24, 0x0A	; 10
     568:	90 e0       	ldi	r25, 0x00	; 0
                case STRING_ID_Language:
                    Address = &LanguageString;
                    Size    = LanguageString.Header.Size;
                    break;
                case STRING_ID_Manufacturer:
                    Address = &ManufacturerString;
     56a:	29 eb       	ldi	r18, 0xB9	; 185
     56c:	32 e0       	ldi	r19, 0x02	; 2
                    Size    = ManufacturerString.Header.Size;
                    break;
     56e:	18 c0       	rjmp	.+48     	; 0x5a0 <CALLBACK_USB_GetDescriptor+0xb4>
                case STRING_ID_Product:
                    Address = &ProductString;
                    Size    = ProductString.Header.Size;
     570:	8e e3       	ldi	r24, 0x3E	; 62
     572:	90 e0       	ldi	r25, 0x00	; 0
                case STRING_ID_Manufacturer:
                    Address = &ManufacturerString;
                    Size    = ManufacturerString.Header.Size;
                    break;
                case STRING_ID_Product:
                    Address = &ProductString;
     574:	29 e7       	ldi	r18, 0x79	; 121
     576:	32 e0       	ldi	r19, 0x02	; 2
                    Size    = ProductString.Header.Size;
                    break;
     578:	13 c0       	rjmp	.+38     	; 0x5a0 <CALLBACK_USB_GetDescriptor+0xb4>
            }

            break;
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_KeyboardHID;
            Size    = sizeof(USB_HID_Descriptor_HID_t);
     57a:	89 e0       	ldi	r24, 0x09	; 9
     57c:	90 e0       	ldi	r25, 0x00	; 0
                    break;
            }

            break;
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_KeyboardHID;
     57e:	22 ef       	ldi	r18, 0xF2	; 242
     580:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_HID_Descriptor_HID_t);
            break;
     582:	0e c0       	rjmp	.+28     	; 0x5a0 <CALLBACK_USB_GetDescriptor+0xb4>
        case HID_DTYPE_Report:
            Address = &KeyboardReport;
            Size    = sizeof(KeyboardReport);
     584:	80 e4       	ldi	r24, 0x40	; 64
     586:	90 e0       	ldi	r25, 0x00	; 0
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_KeyboardHID;
            Size    = sizeof(USB_HID_Descriptor_HID_t);
            break;
        case HID_DTYPE_Report:
            Address = &KeyboardReport;
     588:	21 e5       	ldi	r18, 0x51	; 81
     58a:	33 e0       	ldi	r19, 0x03	; 3
            Size    = sizeof(KeyboardReport);
            break;
     58c:	09 c0       	rjmp	.+18     	; 0x5a0 <CALLBACK_USB_GetDescriptor+0xb4>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
     58e:	82 e1       	ldi	r24, 0x12	; 18
     590:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
     592:	2f e3       	ldi	r18, 0x3F	; 63
     594:	33 e0       	ldi	r19, 0x03	; 3
     596:	04 c0       	rjmp	.+8      	; 0x5a0 <CALLBACK_USB_GetDescriptor+0xb4>

            switch (DescriptorNumber)
            {
                case STRING_ID_Language:
                    Address = &LanguageString;
                    Size    = LanguageString.Header.Size;
     598:	84 e0       	ldi	r24, 0x04	; 4
     59a:	90 e0       	ldi	r25, 0x00	; 0
            }

            switch (DescriptorNumber)
            {
                case STRING_ID_Language:
                    Address = &LanguageString;
     59c:	25 ec       	ldi	r18, 0xC5	; 197
     59e:	32 e0       	ldi	r19, 0x02	; 2
            Address = &KeyboardReport;
            Size    = sizeof(KeyboardReport);
            break;
    }

    *DescriptorAddress = Address;
     5a0:	fa 01       	movw	r30, r20
     5a2:	31 83       	std	Z+1, r19	; 0x01
     5a4:	20 83       	st	Z, r18
    return Size;
}
     5a6:	08 95       	ret

000005a8 <guess_host_os>:


guess_os_t guess_host_os(void)
{
    if (guess_os.not_mac && guess_os.not_linux && guess_os.maybe_win)
     5a8:	80 91 d4 0a 	lds	r24, 0x0AD4	; 0x800ad4 <guess_os>
     5ac:	98 2f       	mov	r25, r24
     5ae:	9a 72       	andi	r25, 0x2A	; 42
     5b0:	9a 32       	cpi	r25, 0x2A	; 42
     5b2:	41 f0       	breq	.+16     	; 0x5c4 <guess_host_os+0x1c>
    {
        return GO_WINDOWS;
    }
    else if (guess_os.maybe_linux && !guess_os.not_linux)
     5b4:	98 2f       	mov	r25, r24
     5b6:	99 70       	andi	r25, 0x09	; 9
     5b8:	91 30       	cpi	r25, 0x01	; 1
     5ba:	31 f0       	breq	.+12     	; 0x5c8 <guess_host_os+0x20>
    {
        return GO_LINUX;
    }
    else if (!guess_os.not_mac)
     5bc:	85 fd       	sbrc	r24, 5
     5be:	06 c0       	rjmp	.+12     	; 0x5cc <guess_host_os+0x24>
    {
        return GO_MAC;
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	08 95       	ret

guess_os_t guess_host_os(void)
{
    if (guess_os.not_mac && guess_os.not_linux && guess_os.maybe_win)
    {
        return GO_WINDOWS;
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	08 95       	ret
    }
    else if (guess_os.maybe_linux && !guess_os.not_linux)
    {
        return GO_LINUX;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	08 95       	ret
    else if (!guess_os.not_mac)
    {
        return GO_MAC;
    }

    return GO_WINDOWS;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
}
     5ce:	08 95       	ret

000005d0 <guess_host_os_string>:

const char* guess_host_os_string(void)
{
    switch (guess_host_os())
     5d0:	eb df       	rcall	.-42     	; 0x5a8 <guess_host_os>
     5d2:	81 30       	cpi	r24, 0x01	; 1
     5d4:	41 f0       	breq	.+16     	; 0x5e6 <guess_host_os_string+0x16>
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	19 f0       	breq	.+6      	; 0x5e0 <guess_host_os_string+0x10>
    {
        case GO_WINDOWS:
            return "OS_WINDOWS";
     5da:	8e e5       	ldi	r24, 0x5E	; 94
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	08 95       	ret
        case GO_LINUX:
            return "OS_LINUX";
            break;

        case GO_MAC:
            return "OS_MAC";
     5e0:	82 e7       	ldi	r24, 0x72	; 114
     5e2:	92 e0       	ldi	r25, 0x02	; 2
     5e4:	08 95       	ret
        case GO_WINDOWS:
            return "OS_WINDOWS";
            break;

        case GO_LINUX:
            return "OS_LINUX";
     5e6:	89 e6       	ldi	r24, 0x69	; 105
     5e8:	92 e0       	ldi	r25, 0x02	; 2

        default:
            return "OS_WINDOWS";
            break;
    }
     5ea:	08 95       	ret

000005ec <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
     5ec:	81 11       	cpse	r24, r1
     5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <disk_status+0xa>
	case DRV_CFC :
		return cf_disk_status();
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_status();
     5f0:	0c 94 f9 1c 	jmp	0x39f2	; 0x39f2 <mmc_disk_status>
     5f4:	08 95       	ret
#endif
	}
	return STA_NOINIT;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
}
     5f8:	08 95       	ret

000005fa <disk_initialize>:

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
     5fa:	81 11       	cpse	r24, r1
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <disk_initialize+0xa>
	case DRV_CFC :
		return cf_disk_initialize();
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_initialize();
     5fe:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <mmc_disk_initialize>
     602:	08 95       	ret
#endif
	}
	return STA_NOINIT;
     604:	81 e0       	ldi	r24, 0x01	; 1
}
     606:	08 95       	ret

00000608 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	fb 01       	movw	r30, r22
	switch (pdrv) {
     60e:	81 11       	cpse	r24, r1
     610:	07 c0       	rjmp	.+14     	; 0x620 <disk_read+0x18>
     612:	ba 01       	movw	r22, r20
     614:	a9 01       	movw	r20, r18
     616:	cf 01       	movw	r24, r30
	case DRV_CFC :
		return cf_disk_read(buff, sector, count);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_read(buff, sector, count);
     618:	98 01       	movw	r18, r16
     61a:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <mmc_disk_read>
     61e:	01 c0       	rjmp	.+2      	; 0x622 <disk_read+0x1a>
#endif
	}
	return RES_PARERR;
     620:	84 e0       	ldi	r24, 0x04	; 4
}
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	08 95       	ret

00000628 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Sector address in LBA */
	UINT count			/* Number of sectors to write */
)
{
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	fb 01       	movw	r30, r22
	switch (pdrv) {
     62e:	81 11       	cpse	r24, r1
     630:	07 c0       	rjmp	.+14     	; 0x640 <disk_write+0x18>
     632:	ba 01       	movw	r22, r20
     634:	a9 01       	movw	r20, r18
     636:	cf 01       	movw	r24, r30
	case DRV_CFC :
		return cf_disk_write(buff, sector, count);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_write(buff, sector, count);
     638:	98 01       	movw	r18, r16
     63a:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <mmc_disk_write>
     63e:	01 c0       	rjmp	.+2      	; 0x642 <disk_write+0x1a>
#endif
	}
	return RES_PARERR;
     640:	84 e0       	ldi	r24, 0x04	; 4
}
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	08 95       	ret

00000648 <disk_ioctl>:
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	switch (pdrv) {
     648:	81 11       	cpse	r24, r1
     64a:	05 c0       	rjmp	.+10     	; 0x656 <disk_ioctl+0xe>
     64c:	86 2f       	mov	r24, r22
	case DRV_CFC :
		return cf_disk_ioctl(cmd, buff);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_ioctl(cmd, buff);
     64e:	ba 01       	movw	r22, r20
     650:	0c 94 ae 1d 	jmp	0x3b5c	; 0x3b5c <mmc_disk_ioctl>
     654:	08 95       	ret
#endif
	}
	return RES_PARERR;
     656:	84 e0       	ldi	r24, 0x04	; 4
}
     658:	08 95       	ret

0000065a <disk_timerproc>:
{
#ifdef DRV_CFC
	cf_disk_timerproc();
#endif
#ifdef DRV_MMC
	mmc_disk_timerproc();
     65a:	0c 94 ab 20 	jmp	0x4156	; 0x4156 <mmc_disk_timerproc>
     65e:	08 95       	ret

00000660 <ld_word>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
     660:	fc 01       	movw	r30, r24
     662:	21 81       	ldd	r18, Z+1	; 0x01
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	32 2f       	mov	r19, r18
     668:	22 27       	eor	r18, r18
     66a:	80 81       	ld	r24, Z
     66c:	a9 01       	movw	r20, r18
     66e:	48 2b       	or	r20, r24
     670:	ca 01       	movw	r24, r20
     672:	08 95       	ret

00000674 <ld_dword>:
     674:	fc 01       	movw	r30, r24
     676:	63 81       	ldd	r22, Z+3	; 0x03
     678:	86 2f       	mov	r24, r22
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	a0 e0       	ldi	r26, 0x00	; 0
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	ba 2f       	mov	r27, r26
     682:	a9 2f       	mov	r26, r25
     684:	98 2f       	mov	r25, r24
     686:	88 27       	eor	r24, r24
     688:	22 81       	ldd	r18, Z+2	; 0x02
     68a:	82 2b       	or	r24, r18
     68c:	ba 2f       	mov	r27, r26
     68e:	a9 2f       	mov	r26, r25
     690:	98 2f       	mov	r25, r24
     692:	88 27       	eor	r24, r24
     694:	21 81       	ldd	r18, Z+1	; 0x01
     696:	82 2b       	or	r24, r18
     698:	ba 2f       	mov	r27, r26
     69a:	a9 2f       	mov	r26, r25
     69c:	98 2f       	mov	r25, r24
     69e:	88 27       	eor	r24, r24
     6a0:	20 81       	ld	r18, Z
     6a2:	bc 01       	movw	r22, r24
     6a4:	cd 01       	movw	r24, r26
     6a6:	62 2b       	or	r22, r18
     6a8:	08 95       	ret

000006aa <st_word>:
     6aa:	fc 01       	movw	r30, r24
     6ac:	60 83       	st	Z, r22
     6ae:	71 83       	std	Z+1, r23	; 0x01
     6b0:	08 95       	ret

000006b2 <st_dword>:
     6b2:	fc 01       	movw	r30, r24
     6b4:	40 83       	st	Z, r20
     6b6:	51 83       	std	Z+1, r21	; 0x01
     6b8:	62 83       	std	Z+2, r22	; 0x02
     6ba:	73 83       	std	Z+3, r23	; 0x03
     6bc:	08 95       	ret

000006be <dbc_1st>:
     6be:	81 38       	cpi	r24, 0x81	; 129
     6c0:	48 f0       	brcs	.+18     	; 0x6d4 <dbc_1st+0x16>
     6c2:	80 3a       	cpi	r24, 0xA0	; 160
     6c4:	50 f0       	brcs	.+20     	; 0x6da <dbc_1st+0x1c>
     6c6:	80 3e       	cpi	r24, 0xE0	; 224
     6c8:	58 f0       	brcs	.+22     	; 0x6e0 <dbc_1st+0x22>
     6ca:	8d 3f       	cpi	r24, 0xFD	; 253
     6cc:	60 f0       	brcs	.+24     	; 0x6e6 <dbc_1st+0x28>
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	08 95       	ret
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	08 95       	ret
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	08 95       	ret
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	08 95       	ret
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	08 95       	ret

000006ec <dbc_2nd>:
     6ec:	80 34       	cpi	r24, 0x40	; 64
     6ee:	58 f0       	brcs	.+22     	; 0x706 <dbc_2nd+0x1a>
     6f0:	8f 37       	cpi	r24, 0x7F	; 127
     6f2:	60 f0       	brcs	.+24     	; 0x70c <dbc_2nd+0x20>
     6f4:	80 38       	cpi	r24, 0x80	; 128
     6f6:	10 f0       	brcs	.+4      	; 0x6fc <dbc_2nd+0x10>
     6f8:	8d 3f       	cpi	r24, 0xFD	; 253
     6fa:	58 f0       	brcs	.+22     	; 0x712 <dbc_2nd+0x26>
     6fc:	88 23       	and	r24, r24
     6fe:	61 f0       	breq	.+24     	; 0x718 <dbc_2nd+0x2c>
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	08 95       	ret
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	08 95       	ret
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	08 95       	ret
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	08 95       	ret
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	08 95       	ret

0000071e <clst2sect>:
     71e:	cf 92       	push	r12
     720:	df 92       	push	r13
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	fc 01       	movw	r30, r24
     728:	9a 01       	movw	r18, r20
     72a:	ab 01       	movw	r20, r22
     72c:	22 50       	subi	r18, 0x02	; 2
     72e:	31 09       	sbc	r19, r1
     730:	41 09       	sbc	r20, r1
     732:	51 09       	sbc	r21, r1
     734:	c7 88       	ldd	r12, Z+23	; 0x17
     736:	d0 8c       	ldd	r13, Z+24	; 0x18
     738:	e1 8c       	ldd	r14, Z+25	; 0x19
     73a:	f2 8c       	ldd	r15, Z+26	; 0x1a
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	c8 1a       	sub	r12, r24
     740:	d1 08       	sbc	r13, r1
     742:	e1 08       	sbc	r14, r1
     744:	f1 08       	sbc	r15, r1
     746:	2c 15       	cp	r18, r12
     748:	3d 05       	cpc	r19, r13
     74a:	4e 05       	cpc	r20, r14
     74c:	5f 05       	cpc	r21, r15
     74e:	68 f4       	brcc	.+26     	; 0x76a <clst2sect+0x4c>
     750:	c3 a4       	ldd	r12, Z+43	; 0x2b
     752:	d4 a4       	ldd	r13, Z+44	; 0x2c
     754:	e5 a4       	ldd	r14, Z+45	; 0x2d
     756:	f6 a4       	ldd	r15, Z+46	; 0x2e
     758:	a1 85       	ldd	r26, Z+9	; 0x09
     75a:	b2 85       	ldd	r27, Z+10	; 0x0a
     75c:	0e 94 3d 33 	call	0x667a	; 0x667a <__muluhisi3>
     760:	6c 0d       	add	r22, r12
     762:	7d 1d       	adc	r23, r13
     764:	8e 1d       	adc	r24, r14
     766:	9f 1d       	adc	r25, r15
     768:	03 c0       	rjmp	.+6      	; 0x770 <clst2sect+0x52>
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	cb 01       	movw	r24, r22
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	df 90       	pop	r13
     776:	cf 90       	pop	r12
     778:	08 95       	ret

0000077a <ld_clust>:
     77a:	cf 92       	push	r12
     77c:	df 92       	push	r13
     77e:	ef 92       	push	r14
     780:	ff 92       	push	r15
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	8c 01       	movw	r16, r24
     78c:	eb 01       	movw	r28, r22
     78e:	cb 01       	movw	r24, r22
     790:	4a 96       	adiw	r24, 0x1a	; 26
     792:	66 df       	rcall	.-308    	; 0x660 <ld_word>
     794:	6c 01       	movw	r12, r24
     796:	e1 2c       	mov	r14, r1
     798:	f1 2c       	mov	r15, r1
     79a:	f8 01       	movw	r30, r16
     79c:	80 81       	ld	r24, Z
     79e:	83 30       	cpi	r24, 0x03	; 3
     7a0:	61 f4       	brne	.+24     	; 0x7ba <ld_clust+0x40>
     7a2:	ce 01       	movw	r24, r28
     7a4:	44 96       	adiw	r24, 0x14	; 20
     7a6:	5c df       	rcall	.-328    	; 0x660 <ld_word>
     7a8:	a0 e0       	ldi	r26, 0x00	; 0
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	dc 01       	movw	r26, r24
     7ae:	99 27       	eor	r25, r25
     7b0:	88 27       	eor	r24, r24
     7b2:	c8 2a       	or	r12, r24
     7b4:	d9 2a       	or	r13, r25
     7b6:	ea 2a       	or	r14, r26
     7b8:	fb 2a       	or	r15, r27
     7ba:	c7 01       	movw	r24, r14
     7bc:	b6 01       	movw	r22, r12
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	ff 90       	pop	r15
     7c8:	ef 90       	pop	r14
     7ca:	df 90       	pop	r13
     7cc:	cf 90       	pop	r12
     7ce:	08 95       	ret

000007d0 <st_clust>:
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	8c 01       	movw	r16, r24
     7e2:	eb 01       	movw	r28, r22
     7e4:	69 01       	movw	r12, r18
     7e6:	7a 01       	movw	r14, r20
     7e8:	b9 01       	movw	r22, r18
     7ea:	ce 01       	movw	r24, r28
     7ec:	4a 96       	adiw	r24, 0x1a	; 26
     7ee:	5d df       	rcall	.-326    	; 0x6aa <st_word>
     7f0:	f8 01       	movw	r30, r16
     7f2:	80 81       	ld	r24, Z
     7f4:	83 30       	cpi	r24, 0x03	; 3
     7f6:	31 f4       	brne	.+12     	; 0x804 <st_clust+0x34>
     7f8:	b7 01       	movw	r22, r14
     7fa:	88 27       	eor	r24, r24
     7fc:	99 27       	eor	r25, r25
     7fe:	ce 01       	movw	r24, r28
     800:	44 96       	adiw	r24, 0x14	; 20
     802:	53 df       	rcall	.-346    	; 0x6aa <st_word>
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	1f 91       	pop	r17
     80a:	0f 91       	pop	r16
     80c:	ff 90       	pop	r15
     80e:	ef 90       	pop	r14
     810:	df 90       	pop	r13
     812:	cf 90       	pop	r12
     814:	08 95       	ret

00000816 <get_ldnumber>:
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	ec 01       	movw	r28, r24
     81c:	a8 81       	ld	r26, Y
     81e:	b9 81       	ldd	r27, Y+1	; 0x01
     820:	10 97       	sbiw	r26, 0x00	; 0
     822:	49 f1       	breq	.+82     	; 0x876 <get_ldnumber+0x60>
     824:	fd 01       	movw	r30, r26
     826:	9f 01       	movw	r18, r30
     828:	2f 5f       	subi	r18, 0xFF	; 255
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	90 81       	ld	r25, Z
     82e:	91 32       	cpi	r25, 0x21	; 33
     830:	18 f0       	brcs	.+6      	; 0x838 <get_ldnumber+0x22>
     832:	f9 01       	movw	r30, r18
     834:	9a 33       	cpi	r25, 0x3A	; 58
     836:	b9 f7       	brne	.-18     	; 0x826 <get_ldnumber+0x10>
     838:	9a 33       	cpi	r25, 0x3A	; 58
     83a:	c9 f4       	brne	.+50     	; 0x86e <get_ldnumber+0x58>
     83c:	4c 91       	ld	r20, X
     83e:	80 ed       	ldi	r24, 0xD0	; 208
     840:	84 0f       	add	r24, r20
     842:	8a 30       	cpi	r24, 0x0A	; 10
     844:	40 f4       	brcc	.+16     	; 0x856 <get_ldnumber+0x40>
     846:	12 96       	adiw	r26, 0x02	; 2
     848:	2a 17       	cp	r18, r26
     84a:	3b 07       	cpc	r19, r27
     84c:	39 f4       	brne	.+14     	; 0x85c <get_ldnumber+0x46>
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	40 53       	subi	r20, 0x30	; 48
     852:	51 09       	sbc	r21, r1
     854:	05 c0       	rjmp	.+10     	; 0x860 <get_ldnumber+0x4a>
     856:	42 e0       	ldi	r20, 0x02	; 2
     858:	50 e0       	ldi	r21, 0x00	; 0
     85a:	02 c0       	rjmp	.+4      	; 0x860 <get_ldnumber+0x4a>
     85c:	42 e0       	ldi	r20, 0x02	; 2
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	42 30       	cpi	r20, 0x02	; 2
     862:	51 05       	cpc	r21, r1
     864:	5c f4       	brge	.+22     	; 0x87c <get_ldnumber+0x66>
     866:	39 83       	std	Y+1, r19	; 0x01
     868:	28 83       	st	Y, r18
     86a:	ca 01       	movw	r24, r20
     86c:	09 c0       	rjmp	.+18     	; 0x880 <get_ldnumber+0x6a>
     86e:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <CurrVol>
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	05 c0       	rjmp	.+10     	; 0x880 <get_ldnumber+0x6a>
     876:	8f ef       	ldi	r24, 0xFF	; 255
     878:	9f ef       	ldi	r25, 0xFF	; 255
     87a:	02 c0       	rjmp	.+4      	; 0x880 <get_ldnumber+0x6a>
     87c:	8f ef       	ldi	r24, 0xFF	; 255
     87e:	9f ef       	ldi	r25, 0xFF	; 255
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <validate>:
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	ec 01       	movw	r28, r24
     890:	8b 01       	movw	r16, r22
     892:	89 2b       	or	r24, r25
     894:	a1 f0       	breq	.+40     	; 0x8be <validate+0x38>
     896:	e8 81       	ld	r30, Y
     898:	f9 81       	ldd	r31, Y+1	; 0x01
     89a:	30 97       	sbiw	r30, 0x00	; 0
     89c:	91 f0       	breq	.+36     	; 0x8c2 <validate+0x3c>
     89e:	80 81       	ld	r24, Z
     8a0:	88 23       	and	r24, r24
     8a2:	89 f0       	breq	.+34     	; 0x8c6 <validate+0x40>
     8a4:	2a 81       	ldd	r18, Y+2	; 0x02
     8a6:	3b 81       	ldd	r19, Y+3	; 0x03
     8a8:	85 81       	ldd	r24, Z+5	; 0x05
     8aa:	96 81       	ldd	r25, Z+6	; 0x06
     8ac:	28 17       	cp	r18, r24
     8ae:	39 07       	cpc	r19, r25
     8b0:	61 f4       	brne	.+24     	; 0x8ca <validate+0x44>
     8b2:	81 81       	ldd	r24, Z+1	; 0x01
     8b4:	9b de       	rcall	.-714    	; 0x5ec <disk_status>
     8b6:	80 ff       	sbrs	r24, 0
     8b8:	0a c0       	rjmp	.+20     	; 0x8ce <validate+0x48>
     8ba:	89 e0       	ldi	r24, 0x09	; 9
     8bc:	09 c0       	rjmp	.+18     	; 0x8d0 <validate+0x4a>
     8be:	89 e0       	ldi	r24, 0x09	; 9
     8c0:	07 c0       	rjmp	.+14     	; 0x8d0 <validate+0x4a>
     8c2:	89 e0       	ldi	r24, 0x09	; 9
     8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <validate+0x4a>
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <validate+0x4a>
     8ca:	89 e0       	ldi	r24, 0x09	; 9
     8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <validate+0x4a>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	81 11       	cpse	r24, r1
     8d2:	03 c0       	rjmp	.+6      	; 0x8da <validate+0x54>
     8d4:	28 81       	ld	r18, Y
     8d6:	39 81       	ldd	r19, Y+1	; 0x01
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <validate+0x58>
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	f8 01       	movw	r30, r16
     8e0:	31 83       	std	Z+1, r19	; 0x01
     8e2:	20 83       	st	Z, r18
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	08 95       	ret

000008ee <sync_window>:
     8ee:	8f 92       	push	r8
     8f0:	9f 92       	push	r9
     8f2:	af 92       	push	r10
     8f4:	bf 92       	push	r11
     8f6:	ef 92       	push	r14
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	fc 01       	movw	r30, r24
     904:	23 81       	ldd	r18, Z+3	; 0x03
     906:	22 23       	and	r18, r18
     908:	c1 f1       	breq	.+112    	; 0x97a <sync_window+0x8c>
     90a:	ec 01       	movw	r28, r24
     90c:	7c 01       	movw	r14, r24
     90e:	f3 e3       	ldi	r31, 0x33	; 51
     910:	ef 0e       	add	r14, r31
     912:	f1 1c       	adc	r15, r1
     914:	2f a5       	ldd	r18, Y+47	; 0x2f
     916:	38 a9       	ldd	r19, Y+48	; 0x30
     918:	49 a9       	ldd	r20, Y+49	; 0x31
     91a:	5a a9       	ldd	r21, Y+50	; 0x32
     91c:	01 e0       	ldi	r16, 0x01	; 1
     91e:	10 e0       	ldi	r17, 0x00	; 0
     920:	b7 01       	movw	r22, r14
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	81 de       	rcall	.-766    	; 0x628 <disk_write>
     926:	81 11       	cpse	r24, r1
     928:	2a c0       	rjmp	.+84     	; 0x97e <sync_window+0x90>
     92a:	1b 82       	std	Y+3, r1	; 0x03
     92c:	0f a5       	ldd	r16, Y+47	; 0x2f
     92e:	18 a9       	ldd	r17, Y+48	; 0x30
     930:	29 a9       	ldd	r18, Y+49	; 0x31
     932:	3a a9       	ldd	r19, Y+50	; 0x32
     934:	8b a1       	ldd	r24, Y+35	; 0x23
     936:	9c a1       	ldd	r25, Y+36	; 0x24
     938:	ad a1       	ldd	r26, Y+37	; 0x25
     93a:	be a1       	ldd	r27, Y+38	; 0x26
     93c:	48 01       	movw	r8, r16
     93e:	59 01       	movw	r10, r18
     940:	88 1a       	sub	r8, r24
     942:	99 0a       	sbc	r9, r25
     944:	aa 0a       	sbc	r10, r26
     946:	bb 0a       	sbc	r11, r27
     948:	8b 8d       	ldd	r24, Y+27	; 0x1b
     94a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     94c:	ad 8d       	ldd	r26, Y+29	; 0x1d
     94e:	be 8d       	ldd	r27, Y+30	; 0x1e
     950:	88 16       	cp	r8, r24
     952:	99 06       	cpc	r9, r25
     954:	aa 06       	cpc	r10, r26
     956:	bb 06       	cpc	r11, r27
     958:	a0 f4       	brcc	.+40     	; 0x982 <sync_window+0x94>
     95a:	6a 81       	ldd	r22, Y+2	; 0x02
     95c:	62 30       	cpi	r22, 0x02	; 2
     95e:	99 f4       	brne	.+38     	; 0x986 <sync_window+0x98>
     960:	a9 01       	movw	r20, r18
     962:	98 01       	movw	r18, r16
     964:	28 0f       	add	r18, r24
     966:	39 1f       	adc	r19, r25
     968:	4a 1f       	adc	r20, r26
     96a:	5b 1f       	adc	r21, r27
     96c:	01 e0       	ldi	r16, 0x01	; 1
     96e:	10 e0       	ldi	r17, 0x00	; 0
     970:	b7 01       	movw	r22, r14
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	59 de       	rcall	.-846    	; 0x628 <disk_write>
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	07 c0       	rjmp	.+14     	; 0x988 <sync_window+0x9a>
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	05 c0       	rjmp	.+10     	; 0x988 <sync_window+0x9a>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	03 c0       	rjmp	.+6      	; 0x988 <sync_window+0x9a>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	01 c0       	rjmp	.+2      	; 0x988 <sync_window+0x9a>
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	bf 90       	pop	r11
     996:	af 90       	pop	r10
     998:	9f 90       	pop	r9
     99a:	8f 90       	pop	r8
     99c:	08 95       	ret

0000099e <move_window>:
     99e:	8f 92       	push	r8
     9a0:	9f 92       	push	r9
     9a2:	af 92       	push	r10
     9a4:	bf 92       	push	r11
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	ec 01       	movw	r28, r24
     9b2:	4a 01       	movw	r8, r20
     9b4:	5b 01       	movw	r10, r22
     9b6:	8f a5       	ldd	r24, Y+47	; 0x2f
     9b8:	98 a9       	ldd	r25, Y+48	; 0x30
     9ba:	a9 a9       	ldd	r26, Y+49	; 0x31
     9bc:	ba a9       	ldd	r27, Y+50	; 0x32
     9be:	84 17       	cp	r24, r20
     9c0:	95 07       	cpc	r25, r21
     9c2:	a6 07       	cpc	r26, r22
     9c4:	b7 07       	cpc	r27, r23
     9c6:	d9 f0       	breq	.+54     	; 0x9fe <move_window+0x60>
     9c8:	ce 01       	movw	r24, r28
     9ca:	91 df       	rcall	.-222    	; 0x8ee <sync_window>
     9cc:	f8 2e       	mov	r15, r24
     9ce:	81 11       	cpse	r24, r1
     9d0:	17 c0       	rjmp	.+46     	; 0xa00 <move_window+0x62>
     9d2:	01 e0       	ldi	r16, 0x01	; 1
     9d4:	10 e0       	ldi	r17, 0x00	; 0
     9d6:	a5 01       	movw	r20, r10
     9d8:	94 01       	movw	r18, r8
     9da:	be 01       	movw	r22, r28
     9dc:	6d 5c       	subi	r22, 0xCD	; 205
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	12 de       	rcall	.-988    	; 0x608 <disk_read>
     9e4:	88 23       	and	r24, r24
     9e6:	31 f0       	breq	.+12     	; 0x9f4 <move_window+0x56>
     9e8:	ff 24       	eor	r15, r15
     9ea:	f3 94       	inc	r15
     9ec:	88 24       	eor	r8, r8
     9ee:	8a 94       	dec	r8
     9f0:	98 2c       	mov	r9, r8
     9f2:	54 01       	movw	r10, r8
     9f4:	8f a6       	std	Y+47, r8	; 0x2f
     9f6:	98 aa       	std	Y+48, r9	; 0x30
     9f8:	a9 aa       	std	Y+49, r10	; 0x31
     9fa:	ba aa       	std	Y+50, r11	; 0x32
     9fc:	01 c0       	rjmp	.+2      	; 0xa00 <move_window+0x62>
     9fe:	f1 2c       	mov	r15, r1
     a00:	8f 2d       	mov	r24, r15
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	1f 91       	pop	r17
     a08:	0f 91       	pop	r16
     a0a:	ff 90       	pop	r15
     a0c:	bf 90       	pop	r11
     a0e:	af 90       	pop	r10
     a10:	9f 90       	pop	r9
     a12:	8f 90       	pop	r8
     a14:	08 95       	ret

00000a16 <check_fs>:
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	ec 01       	movw	r28, r24
     a24:	1b 82       	std	Y+3, r1	; 0x03
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	9f ef       	ldi	r25, 0xFF	; 255
     a2a:	dc 01       	movw	r26, r24
     a2c:	8f a7       	std	Y+47, r24	; 0x2f
     a2e:	98 ab       	std	Y+48, r25	; 0x30
     a30:	a9 ab       	std	Y+49, r26	; 0x31
     a32:	ba ab       	std	Y+50, r27	; 0x32
     a34:	ce 01       	movw	r24, r28
     a36:	b3 df       	rcall	.-154    	; 0x99e <move_window>
     a38:	81 11       	cpse	r24, r1
     a3a:	72 c0       	rjmp	.+228    	; 0xb20 <check_fs+0x10a>
     a3c:	ce 01       	movw	r24, r28
     a3e:	8f 5c       	subi	r24, 0xCF	; 207
     a40:	9d 4f       	sbci	r25, 0xFD	; 253
     a42:	0e de       	rcall	.-996    	; 0x660 <ld_word>
     a44:	7c 01       	movw	r14, r24
     a46:	8b a9       	ldd	r24, Y+51	; 0x33
     a48:	8b 3e       	cpi	r24, 0xEB	; 235
     a4a:	29 f0       	breq	.+10     	; 0xa56 <check_fs+0x40>
     a4c:	89 3e       	cpi	r24, 0xE9	; 233
     a4e:	19 f0       	breq	.+6      	; 0xa56 <check_fs+0x40>
     a50:	88 3e       	cpi	r24, 0xE8	; 232
     a52:	09 f0       	breq	.+2      	; 0xa56 <check_fs+0x40>
     a54:	5d c0       	rjmp	.+186    	; 0xb10 <check_fs+0xfa>
     a56:	25 e5       	ldi	r18, 0x55	; 85
     a58:	e2 16       	cp	r14, r18
     a5a:	2a ea       	ldi	r18, 0xAA	; 170
     a5c:	f2 06       	cpc	r15, r18
     a5e:	61 f4       	brne	.+24     	; 0xa78 <check_fs+0x62>
     a60:	48 e0       	ldi	r20, 0x08	; 8
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	67 eb       	ldi	r22, 0xB7	; 183
     a66:	73 e0       	ldi	r23, 0x03	; 3
     a68:	ce 01       	movw	r24, r28
     a6a:	8b 57       	subi	r24, 0x7B	; 123
     a6c:	9f 4f       	sbci	r25, 0xFF	; 255
     a6e:	0e 94 4f 33 	call	0x669e	; 0x669e <memcmp>
     a72:	89 2b       	or	r24, r25
     a74:	09 f4       	brne	.+2      	; 0xa78 <check_fs+0x62>
     a76:	57 c0       	rjmp	.+174    	; 0xb26 <check_fs+0x110>
     a78:	ce 01       	movw	r24, r28
     a7a:	ce 96       	adiw	r24, 0x3e	; 62
     a7c:	f1 dd       	rcall	.-1054   	; 0x660 <ld_word>
     a7e:	fe 01       	movw	r30, r28
     a80:	e0 5c       	subi	r30, 0xC0	; 192
     a82:	ff 4f       	sbci	r31, 0xFF	; 255
     a84:	20 81       	ld	r18, Z
     a86:	8c 01       	movw	r16, r24
     a88:	01 50       	subi	r16, 0x01	; 1
     a8a:	11 09       	sbc	r17, r1
     a8c:	08 23       	and	r16, r24
     a8e:	19 23       	and	r17, r25
     a90:	01 15       	cp	r16, r1
     a92:	11 05       	cpc	r17, r1
     a94:	09 f0       	breq	.+2      	; 0xa98 <check_fs+0x82>
     a96:	3c c0       	rjmp	.+120    	; 0xb10 <check_fs+0xfa>
     a98:	81 15       	cp	r24, r1
     a9a:	32 e0       	ldi	r19, 0x02	; 2
     a9c:	93 07       	cpc	r25, r19
     a9e:	c0 f1       	brcs	.+112    	; 0xb10 <check_fs+0xfa>
     aa0:	81 30       	cpi	r24, 0x01	; 1
     aa2:	92 40       	sbci	r25, 0x02	; 2
     aa4:	a8 f5       	brcc	.+106    	; 0xb10 <check_fs+0xfa>
     aa6:	22 23       	and	r18, r18
     aa8:	99 f1       	breq	.+102    	; 0xb10 <check_fs+0xfa>
     aaa:	82 2f       	mov	r24, r18
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	9c 01       	movw	r18, r24
     ab0:	21 50       	subi	r18, 0x01	; 1
     ab2:	31 09       	sbc	r19, r1
     ab4:	82 23       	and	r24, r18
     ab6:	93 23       	and	r25, r19
     ab8:	89 2b       	or	r24, r25
     aba:	51 f5       	brne	.+84     	; 0xb10 <check_fs+0xfa>
     abc:	ce 01       	movw	r24, r28
     abe:	8f 5b       	subi	r24, 0xBF	; 191
     ac0:	9f 4f       	sbci	r25, 0xFF	; 255
     ac2:	ce dd       	rcall	.-1124   	; 0x660 <ld_word>
     ac4:	89 2b       	or	r24, r25
     ac6:	21 f1       	breq	.+72     	; 0xb10 <check_fs+0xfa>
     ac8:	fe 01       	movw	r30, r28
     aca:	ed 5b       	subi	r30, 0xBD	; 189
     acc:	ff 4f       	sbci	r31, 0xFF	; 255
     ace:	80 81       	ld	r24, Z
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	02 97       	sbiw	r24, 0x02	; 2
     ad6:	e0 f4       	brcc	.+56     	; 0xb10 <check_fs+0xfa>
     ad8:	ce 01       	movw	r24, r28
     ada:	8c 5b       	subi	r24, 0xBC	; 188
     adc:	9f 4f       	sbci	r25, 0xFF	; 255
     ade:	c0 dd       	rcall	.-1152   	; 0x660 <ld_word>
     ae0:	89 2b       	or	r24, r25
     ae2:	b1 f0       	breq	.+44     	; 0xb10 <check_fs+0xfa>
     ae4:	ce 01       	movw	r24, r28
     ae6:	8a 5b       	subi	r24, 0xBA	; 186
     ae8:	9f 4f       	sbci	r25, 0xFF	; 255
     aea:	ba dd       	rcall	.-1164   	; 0x660 <ld_word>
     aec:	80 38       	cpi	r24, 0x80	; 128
     aee:	91 05       	cpc	r25, r1
     af0:	48 f4       	brcc	.+18     	; 0xb04 <check_fs+0xee>
     af2:	ce 01       	movw	r24, r28
     af4:	8d 5a       	subi	r24, 0xAD	; 173
     af6:	9f 4f       	sbci	r25, 0xFF	; 255
     af8:	bd dd       	rcall	.-1158   	; 0x674 <ld_dword>
     afa:	61 15       	cp	r22, r1
     afc:	71 05       	cpc	r23, r1
     afe:	81 40       	sbci	r24, 0x01	; 1
     b00:	91 05       	cpc	r25, r1
     b02:	30 f0       	brcs	.+12     	; 0xb10 <check_fs+0xfa>
     b04:	ce 01       	movw	r24, r28
     b06:	87 5b       	subi	r24, 0xB7	; 183
     b08:	9f 4f       	sbci	r25, 0xFF	; 255
     b0a:	aa dd       	rcall	.-1196   	; 0x660 <ld_word>
     b0c:	89 2b       	or	r24, r25
     b0e:	81 f4       	brne	.+32     	; 0xb30 <check_fs+0x11a>
     b10:	35 e5       	ldi	r19, 0x55	; 85
     b12:	e3 16       	cp	r14, r19
     b14:	3a ea       	ldi	r19, 0xAA	; 170
     b16:	f3 06       	cpc	r15, r19
     b18:	49 f4       	brne	.+18     	; 0xb2c <check_fs+0x116>
     b1a:	02 e0       	ldi	r16, 0x02	; 2
     b1c:	10 e0       	ldi	r17, 0x00	; 0
     b1e:	08 c0       	rjmp	.+16     	; 0xb30 <check_fs+0x11a>
     b20:	04 e0       	ldi	r16, 0x04	; 4
     b22:	10 e0       	ldi	r17, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <check_fs+0x11a>
     b26:	00 e0       	ldi	r16, 0x00	; 0
     b28:	10 e0       	ldi	r17, 0x00	; 0
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <check_fs+0x11a>
     b2c:	03 e0       	ldi	r16, 0x03	; 3
     b2e:	10 e0       	ldi	r17, 0x00	; 0
     b30:	c8 01       	movw	r24, r16
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	08 95       	ret

00000b40 <find_volume>:
     b40:	cf 92       	push	r12
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	60 97       	sbiw	r28, 0x10	; 16
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	6c 01       	movw	r12, r24
     b62:	7b 01       	movw	r14, r22
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	ba 01       	movw	r22, r20
     b6a:	55 df       	rcall	.-342    	; 0xa16 <check_fs>
     b6c:	82 30       	cpi	r24, 0x02	; 2
     b6e:	91 05       	cpc	r25, r1
     b70:	51 f1       	breq	.+84     	; 0xbc6 <find_volume+0x86>
     b72:	08 f0       	brcs	.+2      	; 0xb76 <find_volume+0x36>
     b74:	5a c0       	rjmp	.+180    	; 0xc2a <find_volume+0xea>
     b76:	e1 14       	cp	r14, r1
     b78:	f1 04       	cpc	r15, r1
     b7a:	09 f4       	brne	.+2      	; 0xb7e <find_volume+0x3e>
     b7c:	56 c0       	rjmp	.+172    	; 0xc2a <find_volume+0xea>
     b7e:	00 e0       	ldi	r16, 0x00	; 0
     b80:	10 e0       	ldi	r17, 0x00	; 0
     b82:	23 c0       	rjmp	.+70     	; 0xbca <find_volume+0x8a>
     b84:	c8 01       	movw	r24, r16
     b86:	82 95       	swap	r24
     b88:	92 95       	swap	r25
     b8a:	90 7f       	andi	r25, 0xF0	; 240
     b8c:	98 27       	eor	r25, r24
     b8e:	80 7f       	andi	r24, 0xF0	; 240
     b90:	98 27       	eor	r25, r24
     b92:	8a 53       	subi	r24, 0x3A	; 58
     b94:	9e 4f       	sbci	r25, 0xFE	; 254
     b96:	96 01       	movw	r18, r12
     b98:	2d 5c       	subi	r18, 0xCD	; 205
     b9a:	3f 4f       	sbci	r19, 0xFF	; 255
     b9c:	82 0f       	add	r24, r18
     b9e:	93 1f       	adc	r25, r19
     ba0:	69 dd       	rcall	.-1326   	; 0x674 <ld_dword>
     ba2:	f8 01       	movw	r30, r16
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	ee 0f       	add	r30, r30
     baa:	ff 1f       	adc	r31, r31
     bac:	21 e0       	ldi	r18, 0x01	; 1
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	2c 0f       	add	r18, r28
     bb2:	3d 1f       	adc	r19, r29
     bb4:	e2 0f       	add	r30, r18
     bb6:	f3 1f       	adc	r31, r19
     bb8:	60 83       	st	Z, r22
     bba:	71 83       	std	Z+1, r23	; 0x01
     bbc:	82 83       	std	Z+2, r24	; 0x02
     bbe:	93 83       	std	Z+3, r25	; 0x03
     bc0:	0f 5f       	subi	r16, 0xFF	; 255
     bc2:	1f 4f       	sbci	r17, 0xFF	; 255
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <find_volume+0x8a>
     bc6:	00 e0       	ldi	r16, 0x00	; 0
     bc8:	10 e0       	ldi	r17, 0x00	; 0
     bca:	04 30       	cpi	r16, 0x04	; 4
     bcc:	11 05       	cpc	r17, r1
     bce:	d0 f2       	brcs	.-76     	; 0xb84 <find_volume+0x44>
     bd0:	e1 14       	cp	r14, r1
     bd2:	f1 04       	cpc	r15, r1
     bd4:	21 f0       	breq	.+8      	; 0xbde <find_volume+0x9e>
     bd6:	87 01       	movw	r16, r14
     bd8:	01 50       	subi	r16, 0x01	; 1
     bda:	11 09       	sbc	r17, r1
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <find_volume+0xa2>
     bde:	00 e0       	ldi	r16, 0x00	; 0
     be0:	10 e0       	ldi	r17, 0x00	; 0
     be2:	f8 01       	movw	r30, r16
     be4:	ee 0f       	add	r30, r30
     be6:	ff 1f       	adc	r31, r31
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	8c 0f       	add	r24, r28
     bf2:	9d 1f       	adc	r25, r29
     bf4:	e8 0f       	add	r30, r24
     bf6:	f9 1f       	adc	r31, r25
     bf8:	40 81       	ld	r20, Z
     bfa:	51 81       	ldd	r21, Z+1	; 0x01
     bfc:	62 81       	ldd	r22, Z+2	; 0x02
     bfe:	73 81       	ldd	r23, Z+3	; 0x03
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	19 f0       	breq	.+6      	; 0xc10 <find_volume+0xd0>
     c0a:	c6 01       	movw	r24, r12
     c0c:	04 df       	rcall	.-504    	; 0xa16 <check_fs>
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <find_volume+0xd4>
     c10:	83 e0       	ldi	r24, 0x03	; 3
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	e1 14       	cp	r14, r1
     c16:	f1 04       	cpc	r15, r1
     c18:	41 f4       	brne	.+16     	; 0xc2a <find_volume+0xea>
     c1a:	82 30       	cpi	r24, 0x02	; 2
     c1c:	91 05       	cpc	r25, r1
     c1e:	28 f0       	brcs	.+10     	; 0xc2a <find_volume+0xea>
     c20:	0f 5f       	subi	r16, 0xFF	; 255
     c22:	1f 4f       	sbci	r17, 0xFF	; 255
     c24:	04 30       	cpi	r16, 0x04	; 4
     c26:	11 05       	cpc	r17, r1
     c28:	e0 f2       	brcs	.-72     	; 0xbe2 <find_volume+0xa2>
     c2a:	60 96       	adiw	r28, 0x10	; 16
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	08 95       	ret

00000c48 <mount_volume>:
     c48:	2f 92       	push	r2
     c4a:	3f 92       	push	r3
     c4c:	4f 92       	push	r4
     c4e:	5f 92       	push	r5
     c50:	6f 92       	push	r6
     c52:	7f 92       	push	r7
     c54:	8f 92       	push	r8
     c56:	9f 92       	push	r9
     c58:	af 92       	push	r10
     c5a:	bf 92       	push	r11
     c5c:	cf 92       	push	r12
     c5e:	df 92       	push	r13
     c60:	ef 92       	push	r14
     c62:	ff 92       	push	r15
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	2e 97       	sbiw	r28, 0x0e	; 14
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	7b 01       	movw	r14, r22
     c7e:	d4 2e       	mov	r13, r20
     c80:	db 01       	movw	r26, r22
     c82:	1d 92       	st	X+, r1
     c84:	1c 92       	st	X, r1
     c86:	c7 dd       	rcall	.-1138   	; 0x816 <get_ldnumber>
     c88:	8c 01       	movw	r16, r24
     c8a:	99 23       	and	r25, r25
     c8c:	0c f4       	brge	.+2      	; 0xc90 <mount_volume+0x48>
     c8e:	17 c2       	rjmp	.+1070   	; 0x10be <mount_volume+0x476>
     c90:	fc 01       	movw	r30, r24
     c92:	ee 0f       	add	r30, r30
     c94:	ff 1f       	adc	r31, r31
     c96:	e8 56       	subi	r30, 0x68	; 104
     c98:	f9 4f       	sbci	r31, 0xF9	; 249
     c9a:	20 81       	ld	r18, Z
     c9c:	31 81       	ldd	r19, Z+1	; 0x01
     c9e:	3e 87       	std	Y+14, r19	; 0x0e
     ca0:	2d 87       	std	Y+13, r18	; 0x0d
     ca2:	21 15       	cp	r18, r1
     ca4:	31 05       	cpc	r19, r1
     ca6:	09 f4       	brne	.+2      	; 0xcaa <mount_volume+0x62>
     ca8:	0c c2       	rjmp	.+1048   	; 0x10c2 <mount_volume+0x47a>
     caa:	d7 01       	movw	r26, r14
     cac:	2d 93       	st	X+, r18
     cae:	3c 93       	st	X, r19
     cb0:	bd 2d       	mov	r27, r13
     cb2:	be 7f       	andi	r27, 0xFE	; 254
     cb4:	db 2e       	mov	r13, r27
     cb6:	f9 01       	movw	r30, r18
     cb8:	80 81       	ld	r24, Z
     cba:	88 23       	and	r24, r24
     cbc:	59 f0       	breq	.+22     	; 0xcd4 <mount_volume+0x8c>
     cbe:	81 81       	ldd	r24, Z+1	; 0x01
     cc0:	95 dc       	rcall	.-1750   	; 0x5ec <disk_status>
     cc2:	80 fd       	sbrc	r24, 0
     cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <mount_volume+0x8c>
     cc6:	dd 20       	and	r13, r13
     cc8:	09 f4       	brne	.+2      	; 0xccc <mount_volume+0x84>
     cca:	fd c1       	rjmp	.+1018   	; 0x10c6 <mount_volume+0x47e>
     ccc:	82 fd       	sbrc	r24, 2
     cce:	fd c1       	rjmp	.+1018   	; 0x10ca <mount_volume+0x482>
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	1e c2       	rjmp	.+1084   	; 0x1110 <mount_volume+0x4c8>
     cd4:	ad 85       	ldd	r26, Y+13	; 0x0d
     cd6:	be 85       	ldd	r27, Y+14	; 0x0e
     cd8:	1c 92       	st	X, r1
     cda:	11 96       	adiw	r26, 0x01	; 1
     cdc:	0c 93       	st	X, r16
     cde:	80 2f       	mov	r24, r16
     ce0:	8c dc       	rcall	.-1768   	; 0x5fa <disk_initialize>
     ce2:	80 fd       	sbrc	r24, 0
     ce4:	f4 c1       	rjmp	.+1000   	; 0x10ce <mount_volume+0x486>
     ce6:	dd 20       	and	r13, r13
     ce8:	11 f0       	breq	.+4      	; 0xcee <mount_volume+0xa6>
     cea:	82 fd       	sbrc	r24, 2
     cec:	f2 c1       	rjmp	.+996    	; 0x10d2 <mount_volume+0x48a>
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf6:	24 df       	rcall	.-440    	; 0xb40 <find_volume>
     cf8:	84 30       	cpi	r24, 0x04	; 4
     cfa:	91 05       	cpc	r25, r1
     cfc:	09 f4       	brne	.+2      	; 0xd00 <mount_volume+0xb8>
     cfe:	eb c1       	rjmp	.+982    	; 0x10d6 <mount_volume+0x48e>
     d00:	02 97       	sbiw	r24, 0x02	; 2
     d02:	08 f0       	brcs	.+2      	; 0xd06 <mount_volume+0xbe>
     d04:	ea c1       	rjmp	.+980    	; 0x10da <mount_volume+0x492>
     d06:	ed 85       	ldd	r30, Y+13	; 0x0d
     d08:	fe 85       	ldd	r31, Y+14	; 0x0e
     d0a:	47 a4       	ldd	r4, Z+47	; 0x2f
     d0c:	50 a8       	ldd	r5, Z+48	; 0x30
     d0e:	61 a8       	ldd	r6, Z+49	; 0x31
     d10:	72 a8       	ldd	r7, Z+50	; 0x32
     d12:	cf 01       	movw	r24, r30
     d14:	ce 96       	adiw	r24, 0x3e	; 62
     d16:	a4 dc       	rcall	.-1720   	; 0x660 <ld_word>
     d18:	81 15       	cp	r24, r1
     d1a:	92 40       	sbci	r25, 0x02	; 2
     d1c:	09 f0       	breq	.+2      	; 0xd20 <mount_volume+0xd8>
     d1e:	df c1       	rjmp	.+958    	; 0x10de <mount_volume+0x496>
     d20:	8d 85       	ldd	r24, Y+13	; 0x0d
     d22:	9e 85       	ldd	r25, Y+14	; 0x0e
     d24:	87 5b       	subi	r24, 0xB7	; 183
     d26:	9f 4f       	sbci	r25, 0xFF	; 255
     d28:	9b dc       	rcall	.-1738   	; 0x660 <ld_word>
     d2a:	4c 01       	movw	r8, r24
     d2c:	a1 2c       	mov	r10, r1
     d2e:	b1 2c       	mov	r11, r1
     d30:	81 14       	cp	r8, r1
     d32:	91 04       	cpc	r9, r1
     d34:	a1 04       	cpc	r10, r1
     d36:	b1 04       	cpc	r11, r1
     d38:	39 f4       	brne	.+14     	; 0xd48 <mount_volume+0x100>
     d3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d3e:	89 5a       	subi	r24, 0xA9	; 169
     d40:	9f 4f       	sbci	r25, 0xFF	; 255
     d42:	98 dc       	rcall	.-1744   	; 0x674 <ld_dword>
     d44:	4b 01       	movw	r8, r22
     d46:	5c 01       	movw	r10, r24
     d48:	ad 85       	ldd	r26, Y+13	; 0x0d
     d4a:	be 85       	ldd	r27, Y+14	; 0x0e
     d4c:	5b 96       	adiw	r26, 0x1b	; 27
     d4e:	8d 92       	st	X+, r8
     d50:	9d 92       	st	X+, r9
     d52:	ad 92       	st	X+, r10
     d54:	bc 92       	st	X, r11
     d56:	5e 97       	sbiw	r26, 0x1e	; 30
     d58:	fd 01       	movw	r30, r26
     d5a:	ed 5b       	subi	r30, 0xBD	; 189
     d5c:	ff 4f       	sbci	r31, 0xFF	; 255
     d5e:	a0 81       	ld	r26, Z
     d60:	ed 85       	ldd	r30, Y+13	; 0x0d
     d62:	fe 85       	ldd	r31, Y+14	; 0x0e
     d64:	a2 83       	std	Z+2, r26	; 0x02
     d66:	8f ef       	ldi	r24, 0xFF	; 255
     d68:	8a 0f       	add	r24, r26
     d6a:	82 30       	cpi	r24, 0x02	; 2
     d6c:	08 f0       	brcs	.+2      	; 0xd70 <mount_volume+0x128>
     d6e:	b9 c1       	rjmp	.+882    	; 0x10e2 <mount_volume+0x49a>
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	a5 01       	movw	r20, r10
     d74:	94 01       	movw	r18, r8
     d76:	0e 94 3d 33 	call	0x667a	; 0x667a <__muluhisi3>
     d7a:	6d 83       	std	Y+5, r22	; 0x05
     d7c:	7e 83       	std	Y+6, r23	; 0x06
     d7e:	8f 83       	std	Y+7, r24	; 0x07
     d80:	98 87       	std	Y+8, r25	; 0x08
     d82:	e0 5c       	subi	r30, 0xC0	; 192
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	00 81       	ld	r16, Z
     d88:	10 e0       	ldi	r17, 0x00	; 0
     d8a:	ad 85       	ldd	r26, Y+13	; 0x0d
     d8c:	be 85       	ldd	r27, Y+14	; 0x0e
     d8e:	1a 96       	adiw	r26, 0x0a	; 10
     d90:	1c 93       	st	X, r17
     d92:	0e 93       	st	-X, r16
     d94:	19 97       	sbiw	r26, 0x09	; 9
     d96:	01 15       	cp	r16, r1
     d98:	11 05       	cpc	r17, r1
     d9a:	09 f4       	brne	.+2      	; 0xd9e <mount_volume+0x156>
     d9c:	a4 c1       	rjmp	.+840    	; 0x10e6 <mount_volume+0x49e>
     d9e:	c8 01       	movw	r24, r16
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	80 23       	and	r24, r16
     da4:	91 23       	and	r25, r17
     da6:	89 2b       	or	r24, r25
     da8:	09 f0       	breq	.+2      	; 0xdac <mount_volume+0x164>
     daa:	9f c1       	rjmp	.+830    	; 0x10ea <mount_volume+0x4a2>
     dac:	cd 01       	movw	r24, r26
     dae:	8c 5b       	subi	r24, 0xBC	; 188
     db0:	9f 4f       	sbci	r25, 0xFF	; 255
     db2:	56 dc       	rcall	.-1876   	; 0x660 <ld_word>
     db4:	1c 01       	movw	r2, r24
     db6:	ed 85       	ldd	r30, Y+13	; 0x0d
     db8:	fe 85       	ldd	r31, Y+14	; 0x0e
     dba:	90 87       	std	Z+8, r25	; 0x08
     dbc:	87 83       	std	Z+7, r24	; 0x07
     dbe:	8f 70       	andi	r24, 0x0F	; 15
     dc0:	99 27       	eor	r25, r25
     dc2:	89 2b       	or	r24, r25
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <mount_volume+0x180>
     dc6:	93 c1       	rjmp	.+806    	; 0x10ee <mount_volume+0x4a6>
     dc8:	cf 01       	movw	r24, r30
     dca:	8a 5b       	subi	r24, 0xBA	; 186
     dcc:	9f 4f       	sbci	r25, 0xFF	; 255
     dce:	48 dc       	rcall	.-1904   	; 0x660 <ld_word>
     dd0:	6c 01       	movw	r12, r24
     dd2:	e1 2c       	mov	r14, r1
     dd4:	f1 2c       	mov	r15, r1
     dd6:	c1 14       	cp	r12, r1
     dd8:	d1 04       	cpc	r13, r1
     dda:	e1 04       	cpc	r14, r1
     ddc:	f1 04       	cpc	r15, r1
     dde:	39 f4       	brne	.+14     	; 0xdee <mount_volume+0x1a6>
     de0:	8d 85       	ldd	r24, Y+13	; 0x0d
     de2:	9e 85       	ldd	r25, Y+14	; 0x0e
     de4:	8d 5a       	subi	r24, 0xAD	; 173
     de6:	9f 4f       	sbci	r25, 0xFF	; 255
     de8:	45 dc       	rcall	.-1910   	; 0x674 <ld_dword>
     dea:	6b 01       	movw	r12, r22
     dec:	7c 01       	movw	r14, r24
     dee:	8d 85       	ldd	r24, Y+13	; 0x0d
     df0:	9e 85       	ldd	r25, Y+14	; 0x0e
     df2:	8f 5b       	subi	r24, 0xBF	; 191
     df4:	9f 4f       	sbci	r25, 0xFF	; 255
     df6:	34 dc       	rcall	.-1944   	; 0x660 <ld_word>
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	09 f4       	brne	.+2      	; 0xdfe <mount_volume+0x1b6>
     dfc:	7a c1       	rjmp	.+756    	; 0x10f2 <mount_volume+0x4aa>
     dfe:	9c 01       	movw	r18, r24
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	29 87       	std	Y+9, r18	; 0x09
     e06:	3a 87       	std	Y+10, r19	; 0x0a
     e08:	4b 87       	std	Y+11, r20	; 0x0b
     e0a:	5c 87       	std	Y+12, r21	; 0x0c
     e0c:	8d 81       	ldd	r24, Y+5	; 0x05
     e0e:	9e 81       	ldd	r25, Y+6	; 0x06
     e10:	af 81       	ldd	r26, Y+7	; 0x07
     e12:	b8 85       	ldd	r27, Y+8	; 0x08
     e14:	82 0f       	add	r24, r18
     e16:	93 1f       	adc	r25, r19
     e18:	a4 1f       	adc	r26, r20
     e1a:	b5 1f       	adc	r27, r21
     e1c:	91 01       	movw	r18, r2
     e1e:	32 95       	swap	r19
     e20:	22 95       	swap	r18
     e22:	2f 70       	andi	r18, 0x0F	; 15
     e24:	23 27       	eor	r18, r19
     e26:	3f 70       	andi	r19, 0x0F	; 15
     e28:	23 27       	eor	r18, r19
     e2a:	ac 01       	movw	r20, r24
     e2c:	bd 01       	movw	r22, r26
     e2e:	42 0f       	add	r20, r18
     e30:	53 1f       	adc	r21, r19
     e32:	61 1d       	adc	r22, r1
     e34:	71 1d       	adc	r23, r1
     e36:	49 83       	std	Y+1, r20	; 0x01
     e38:	5a 83       	std	Y+2, r21	; 0x02
     e3a:	6b 83       	std	Y+3, r22	; 0x03
     e3c:	7c 83       	std	Y+4, r23	; 0x04
     e3e:	c4 16       	cp	r12, r20
     e40:	d5 06       	cpc	r13, r21
     e42:	e6 06       	cpc	r14, r22
     e44:	f7 06       	cpc	r15, r23
     e46:	08 f4       	brcc	.+2      	; 0xe4a <mount_volume+0x202>
     e48:	56 c1       	rjmp	.+684    	; 0x10f6 <mount_volume+0x4ae>
     e4a:	c7 01       	movw	r24, r14
     e4c:	b6 01       	movw	r22, r12
     e4e:	29 81       	ldd	r18, Y+1	; 0x01
     e50:	3a 81       	ldd	r19, Y+2	; 0x02
     e52:	4b 81       	ldd	r20, Y+3	; 0x03
     e54:	5c 81       	ldd	r21, Y+4	; 0x04
     e56:	62 1b       	sub	r22, r18
     e58:	73 0b       	sbc	r23, r19
     e5a:	84 0b       	sbc	r24, r20
     e5c:	95 0b       	sbc	r25, r21
     e5e:	98 01       	movw	r18, r16
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	0e 94 0c 33 	call	0x6618	; 0x6618 <__udivmodsi4>
     e68:	da 01       	movw	r26, r20
     e6a:	c9 01       	movw	r24, r18
     e6c:	21 15       	cp	r18, r1
     e6e:	31 05       	cpc	r19, r1
     e70:	41 05       	cpc	r20, r1
     e72:	51 05       	cpc	r21, r1
     e74:	09 f4       	brne	.+2      	; 0xe78 <mount_volume+0x230>
     e76:	41 c1       	rjmp	.+642    	; 0x10fa <mount_volume+0x4b2>
     e78:	26 3f       	cpi	r18, 0xF6	; 246
     e7a:	6f ef       	ldi	r22, 0xFF	; 255
     e7c:	36 07       	cpc	r19, r22
     e7e:	46 07       	cpc	r20, r22
     e80:	6f e0       	ldi	r22, 0x0F	; 15
     e82:	56 07       	cpc	r21, r22
     e84:	18 f0       	brcs	.+6      	; 0xe8c <mount_volume+0x244>
     e86:	00 e0       	ldi	r16, 0x00	; 0
     e88:	10 e0       	ldi	r17, 0x00	; 0
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <mount_volume+0x248>
     e8c:	03 e0       	ldi	r16, 0x03	; 3
     e8e:	10 e0       	ldi	r17, 0x00	; 0
     e90:	86 3f       	cpi	r24, 0xF6	; 246
     e92:	7f ef       	ldi	r23, 0xFF	; 255
     e94:	97 07       	cpc	r25, r23
     e96:	a1 05       	cpc	r26, r1
     e98:	b1 05       	cpc	r27, r1
     e9a:	10 f4       	brcc	.+4      	; 0xea0 <mount_volume+0x258>
     e9c:	02 e0       	ldi	r16, 0x02	; 2
     e9e:	10 e0       	ldi	r17, 0x00	; 0
     ea0:	86 3f       	cpi	r24, 0xF6	; 246
     ea2:	9f 40       	sbci	r25, 0x0F	; 15
     ea4:	a1 05       	cpc	r26, r1
     ea6:	b1 05       	cpc	r27, r1
     ea8:	10 f4       	brcc	.+4      	; 0xeae <mount_volume+0x266>
     eaa:	01 e0       	ldi	r16, 0x01	; 1
     eac:	10 e0       	ldi	r17, 0x00	; 0
     eae:	01 15       	cp	r16, r1
     eb0:	11 05       	cpc	r17, r1
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <mount_volume+0x26e>
     eb4:	24 c1       	rjmp	.+584    	; 0x10fe <mount_volume+0x4b6>
     eb6:	69 01       	movw	r12, r18
     eb8:	7a 01       	movw	r14, r20
     eba:	f2 e0       	ldi	r31, 0x02	; 2
     ebc:	cf 0e       	add	r12, r31
     ebe:	d1 1c       	adc	r13, r1
     ec0:	e1 1c       	adc	r14, r1
     ec2:	f1 1c       	adc	r15, r1
     ec4:	ad 85       	ldd	r26, Y+13	; 0x0d
     ec6:	be 85       	ldd	r27, Y+14	; 0x0e
     ec8:	57 96       	adiw	r26, 0x17	; 23
     eca:	cd 92       	st	X+, r12
     ecc:	dd 92       	st	X+, r13
     ece:	ed 92       	st	X+, r14
     ed0:	fc 92       	st	X, r15
     ed2:	5a 97       	sbiw	r26, 0x1a	; 26
     ed4:	fd 01       	movw	r30, r26
     ed6:	47 8e       	std	Z+31, r4	; 0x1f
     ed8:	50 a2       	std	Z+32, r5	; 0x20
     eda:	61 a2       	std	Z+33, r6	; 0x21
     edc:	72 a2       	std	Z+34, r7	; 0x22
     ede:	89 85       	ldd	r24, Y+9	; 0x09
     ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee2:	ab 85       	ldd	r26, Y+11	; 0x0b
     ee4:	bc 85       	ldd	r27, Y+12	; 0x0c
     ee6:	84 0d       	add	r24, r4
     ee8:	95 1d       	adc	r25, r5
     eea:	a6 1d       	adc	r26, r6
     eec:	b7 1d       	adc	r27, r7
     eee:	83 a3       	std	Z+35, r24	; 0x23
     ef0:	94 a3       	std	Z+36, r25	; 0x24
     ef2:	a5 a3       	std	Z+37, r26	; 0x25
     ef4:	b6 a3       	std	Z+38, r27	; 0x26
     ef6:	49 81       	ldd	r20, Y+1	; 0x01
     ef8:	5a 81       	ldd	r21, Y+2	; 0x02
     efa:	6b 81       	ldd	r22, Y+3	; 0x03
     efc:	7c 81       	ldd	r23, Y+4	; 0x04
     efe:	44 0d       	add	r20, r4
     f00:	55 1d       	adc	r21, r5
     f02:	66 1d       	adc	r22, r6
     f04:	77 1d       	adc	r23, r7
     f06:	43 a7       	std	Z+43, r20	; 0x2b
     f08:	54 a7       	std	Z+44, r21	; 0x2c
     f0a:	65 a7       	std	Z+45, r22	; 0x2d
     f0c:	76 a7       	std	Z+46, r23	; 0x2e
     f0e:	03 30       	cpi	r16, 0x03	; 3
     f10:	11 05       	cpc	r17, r1
     f12:	01 f5       	brne	.+64     	; 0xf54 <mount_volume+0x30c>
     f14:	cf 01       	movw	r24, r30
     f16:	83 5a       	subi	r24, 0xA3	; 163
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	a2 db       	rcall	.-2236   	; 0x660 <ld_word>
     f1c:	89 2b       	or	r24, r25
     f1e:	09 f0       	breq	.+2      	; 0xf22 <mount_volume+0x2da>
     f20:	f0 c0       	rjmp	.+480    	; 0x1102 <mount_volume+0x4ba>
     f22:	23 28       	or	r2, r3
     f24:	09 f0       	breq	.+2      	; 0xf28 <mount_volume+0x2e0>
     f26:	ef c0       	rjmp	.+478    	; 0x1106 <mount_volume+0x4be>
     f28:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2c:	81 5a       	subi	r24, 0xA1	; 161
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	a1 db       	rcall	.-2238   	; 0x674 <ld_dword>
     f32:	ad 85       	ldd	r26, Y+13	; 0x0d
     f34:	be 85       	ldd	r27, Y+14	; 0x0e
     f36:	97 96       	adiw	r26, 0x27	; 39
     f38:	6d 93       	st	X+, r22
     f3a:	7d 93       	st	X+, r23
     f3c:	8d 93       	st	X+, r24
     f3e:	9c 93       	st	X, r25
     f40:	9a 97       	sbiw	r26, 0x2a	; 42
     f42:	cc 0c       	add	r12, r12
     f44:	dd 1c       	adc	r13, r13
     f46:	ee 1c       	adc	r14, r14
     f48:	ff 1c       	adc	r15, r15
     f4a:	cc 0c       	add	r12, r12
     f4c:	dd 1c       	adc	r13, r13
     f4e:	ee 1c       	adc	r14, r14
     f50:	ff 1c       	adc	r15, r15
     f52:	2e c0       	rjmp	.+92     	; 0xfb0 <mount_volume+0x368>
     f54:	23 28       	or	r2, r3
     f56:	09 f4       	brne	.+2      	; 0xf5a <mount_volume+0x312>
     f58:	d8 c0       	rjmp	.+432    	; 0x110a <mount_volume+0x4c2>
     f5a:	2d 81       	ldd	r18, Y+5	; 0x05
     f5c:	3e 81       	ldd	r19, Y+6	; 0x06
     f5e:	4f 81       	ldd	r20, Y+7	; 0x07
     f60:	58 85       	ldd	r21, Y+8	; 0x08
     f62:	82 0f       	add	r24, r18
     f64:	93 1f       	adc	r25, r19
     f66:	a4 1f       	adc	r26, r20
     f68:	b5 1f       	adc	r27, r21
     f6a:	ed 85       	ldd	r30, Y+13	; 0x0d
     f6c:	fe 85       	ldd	r31, Y+14	; 0x0e
     f6e:	87 a3       	std	Z+39, r24	; 0x27
     f70:	90 a7       	std	Z+40, r25	; 0x28
     f72:	a1 a7       	std	Z+41, r26	; 0x29
     f74:	b2 a7       	std	Z+42, r27	; 0x2a
     f76:	02 30       	cpi	r16, 0x02	; 2
     f78:	11 05       	cpc	r17, r1
     f7a:	29 f4       	brne	.+10     	; 0xf86 <mount_volume+0x33e>
     f7c:	cc 0c       	add	r12, r12
     f7e:	dd 1c       	adc	r13, r13
     f80:	ee 1c       	adc	r14, r14
     f82:	ff 1c       	adc	r15, r15
     f84:	15 c0       	rjmp	.+42     	; 0xfb0 <mount_volume+0x368>
     f86:	a3 e0       	ldi	r26, 0x03	; 3
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	a7 01       	movw	r20, r14
     f8c:	96 01       	movw	r18, r12
     f8e:	0e 94 3d 33 	call	0x667a	; 0x667a <__muluhisi3>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	b6 95       	lsr	r27
     f98:	a7 95       	ror	r26
     f9a:	97 95       	ror	r25
     f9c:	87 95       	ror	r24
     f9e:	f1 e0       	ldi	r31, 0x01	; 1
     fa0:	cf 22       	and	r12, r31
     fa2:	dd 24       	eor	r13, r13
     fa4:	ee 24       	eor	r14, r14
     fa6:	ff 24       	eor	r15, r15
     fa8:	c8 0e       	add	r12, r24
     faa:	d9 1e       	adc	r13, r25
     fac:	ea 1e       	adc	r14, r26
     fae:	fb 1e       	adc	r15, r27
     fb0:	2f ef       	ldi	r18, 0xFF	; 255
     fb2:	c2 0e       	add	r12, r18
     fb4:	21 e0       	ldi	r18, 0x01	; 1
     fb6:	d2 1e       	adc	r13, r18
     fb8:	e1 1c       	adc	r14, r1
     fba:	f1 1c       	adc	r15, r1
     fbc:	0b 2e       	mov	r0, r27
     fbe:	b9 e0       	ldi	r27, 0x09	; 9
     fc0:	f6 94       	lsr	r15
     fc2:	e7 94       	ror	r14
     fc4:	d7 94       	ror	r13
     fc6:	c7 94       	ror	r12
     fc8:	ba 95       	dec	r27
     fca:	d1 f7       	brne	.-12     	; 0xfc0 <mount_volume+0x378>
     fcc:	b0 2d       	mov	r27, r0
     fce:	8c 14       	cp	r8, r12
     fd0:	9d 04       	cpc	r9, r13
     fd2:	ae 04       	cpc	r10, r14
     fd4:	bf 04       	cpc	r11, r15
     fd6:	08 f4       	brcc	.+2      	; 0xfda <mount_volume+0x392>
     fd8:	9a c0       	rjmp	.+308    	; 0x110e <mount_volume+0x4c6>
     fda:	8f ef       	ldi	r24, 0xFF	; 255
     fdc:	9f ef       	ldi	r25, 0xFF	; 255
     fde:	dc 01       	movw	r26, r24
     fe0:	ed 85       	ldd	r30, Y+13	; 0x0d
     fe2:	fe 85       	ldd	r31, Y+14	; 0x0e
     fe4:	87 87       	std	Z+15, r24	; 0x0f
     fe6:	90 8b       	std	Z+16, r25	; 0x10
     fe8:	a1 8b       	std	Z+17, r26	; 0x11
     fea:	b2 8b       	std	Z+18, r27	; 0x12
     fec:	83 87       	std	Z+11, r24	; 0x0b
     fee:	94 87       	std	Z+12, r25	; 0x0c
     ff0:	a5 87       	std	Z+13, r26	; 0x0d
     ff2:	b6 87       	std	Z+14, r27	; 0x0e
     ff4:	80 e8       	ldi	r24, 0x80	; 128
     ff6:	84 83       	std	Z+4, r24	; 0x04
     ff8:	03 30       	cpi	r16, 0x03	; 3
     ffa:	11 05       	cpc	r17, r1
     ffc:	09 f0       	breq	.+2      	; 0x1000 <mount_volume+0x3b8>
     ffe:	48 c0       	rjmp	.+144    	; 0x1090 <mount_volume+0x448>
    1000:	cf 01       	movw	r24, r30
    1002:	8d 59       	subi	r24, 0x9D	; 157
    1004:	9f 4f       	sbci	r25, 0xFF	; 255
    1006:	2c db       	rcall	.-2472   	; 0x660 <ld_word>
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	09 f0       	breq	.+2      	; 0x100e <mount_volume+0x3c6>
    100c:	41 c0       	rjmp	.+130    	; 0x1090 <mount_volume+0x448>
    100e:	b3 01       	movw	r22, r6
    1010:	a2 01       	movw	r20, r4
    1012:	4f 5f       	subi	r20, 0xFF	; 255
    1014:	5f 4f       	sbci	r21, 0xFF	; 255
    1016:	6f 4f       	sbci	r22, 0xFF	; 255
    1018:	7f 4f       	sbci	r23, 0xFF	; 255
    101a:	8d 85       	ldd	r24, Y+13	; 0x0d
    101c:	9e 85       	ldd	r25, Y+14	; 0x0e
    101e:	bf dc       	rcall	.-1666   	; 0x99e <move_window>
    1020:	81 11       	cpse	r24, r1
    1022:	36 c0       	rjmp	.+108    	; 0x1090 <mount_volume+0x448>
    1024:	ad 85       	ldd	r26, Y+13	; 0x0d
    1026:	be 85       	ldd	r27, Y+14	; 0x0e
    1028:	14 96       	adiw	r26, 0x04	; 4
    102a:	1c 92       	st	X, r1
    102c:	14 97       	sbiw	r26, 0x04	; 4
    102e:	cd 01       	movw	r24, r26
    1030:	8f 5c       	subi	r24, 0xCF	; 207
    1032:	9d 4f       	sbci	r25, 0xFD	; 253
    1034:	15 db       	rcall	.-2518   	; 0x660 <ld_word>
    1036:	85 35       	cpi	r24, 0x55	; 85
    1038:	9a 4a       	sbci	r25, 0xAA	; 170
    103a:	51 f5       	brne	.+84     	; 0x1090 <mount_volume+0x448>
    103c:	8d 85       	ldd	r24, Y+13	; 0x0d
    103e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1040:	c3 96       	adiw	r24, 0x33	; 51
    1042:	18 db       	rcall	.-2512   	; 0x674 <ld_dword>
    1044:	62 35       	cpi	r22, 0x52	; 82
    1046:	72 45       	sbci	r23, 0x52	; 82
    1048:	81 46       	sbci	r24, 0x61	; 97
    104a:	91 44       	sbci	r25, 0x41	; 65
    104c:	09 f5       	brne	.+66     	; 0x1090 <mount_volume+0x448>
    104e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1050:	9e 85       	ldd	r25, Y+14	; 0x0e
    1052:	89 5e       	subi	r24, 0xE9	; 233
    1054:	9d 4f       	sbci	r25, 0xFD	; 253
    1056:	0e db       	rcall	.-2532   	; 0x674 <ld_dword>
    1058:	62 37       	cpi	r22, 0x72	; 114
    105a:	72 47       	sbci	r23, 0x72	; 114
    105c:	81 44       	sbci	r24, 0x41	; 65
    105e:	91 46       	sbci	r25, 0x61	; 97
    1060:	b9 f4       	brne	.+46     	; 0x1090 <mount_volume+0x448>
    1062:	8d 85       	ldd	r24, Y+13	; 0x0d
    1064:	9e 85       	ldd	r25, Y+14	; 0x0e
    1066:	85 5e       	subi	r24, 0xE5	; 229
    1068:	9d 4f       	sbci	r25, 0xFD	; 253
    106a:	04 db       	rcall	.-2552   	; 0x674 <ld_dword>
    106c:	ad 85       	ldd	r26, Y+13	; 0x0d
    106e:	be 85       	ldd	r27, Y+14	; 0x0e
    1070:	1f 96       	adiw	r26, 0x0f	; 15
    1072:	6d 93       	st	X+, r22
    1074:	7d 93       	st	X+, r23
    1076:	8d 93       	st	X+, r24
    1078:	9c 93       	st	X, r25
    107a:	52 97       	sbiw	r26, 0x12	; 18
    107c:	cd 01       	movw	r24, r26
    107e:	81 5e       	subi	r24, 0xE1	; 225
    1080:	9d 4f       	sbci	r25, 0xFD	; 253
    1082:	f8 da       	rcall	.-2576   	; 0x674 <ld_dword>
    1084:	ed 85       	ldd	r30, Y+13	; 0x0d
    1086:	fe 85       	ldd	r31, Y+14	; 0x0e
    1088:	63 87       	std	Z+11, r22	; 0x0b
    108a:	74 87       	std	Z+12, r23	; 0x0c
    108c:	85 87       	std	Z+13, r24	; 0x0d
    108e:	96 87       	std	Z+14, r25	; 0x0e
    1090:	ad 85       	ldd	r26, Y+13	; 0x0d
    1092:	be 85       	ldd	r27, Y+14	; 0x0e
    1094:	0c 93       	st	X, r16
    1096:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <Fsid>
    109a:	90 91 97 06 	lds	r25, 0x0697	; 0x800697 <Fsid+0x1>
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <Fsid+0x1>
    10a4:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <Fsid>
    10a8:	16 96       	adiw	r26, 0x06	; 6
    10aa:	9c 93       	st	X, r25
    10ac:	8e 93       	st	-X, r24
    10ae:	15 97       	sbiw	r26, 0x05	; 5
    10b0:	fd 01       	movw	r30, r26
    10b2:	13 8a       	std	Z+19, r1	; 0x13
    10b4:	14 8a       	std	Z+20, r1	; 0x14
    10b6:	15 8a       	std	Z+21, r1	; 0x15
    10b8:	16 8a       	std	Z+22, r1	; 0x16
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	29 c0       	rjmp	.+82     	; 0x1110 <mount_volume+0x4c8>
    10be:	8b e0       	ldi	r24, 0x0B	; 11
    10c0:	27 c0       	rjmp	.+78     	; 0x1110 <mount_volume+0x4c8>
    10c2:	8c e0       	ldi	r24, 0x0C	; 12
    10c4:	25 c0       	rjmp	.+74     	; 0x1110 <mount_volume+0x4c8>
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	23 c0       	rjmp	.+70     	; 0x1110 <mount_volume+0x4c8>
    10ca:	8a e0       	ldi	r24, 0x0A	; 10
    10cc:	21 c0       	rjmp	.+66     	; 0x1110 <mount_volume+0x4c8>
    10ce:	83 e0       	ldi	r24, 0x03	; 3
    10d0:	1f c0       	rjmp	.+62     	; 0x1110 <mount_volume+0x4c8>
    10d2:	8a e0       	ldi	r24, 0x0A	; 10
    10d4:	1d c0       	rjmp	.+58     	; 0x1110 <mount_volume+0x4c8>
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	1b c0       	rjmp	.+54     	; 0x1110 <mount_volume+0x4c8>
    10da:	8d e0       	ldi	r24, 0x0D	; 13
    10dc:	19 c0       	rjmp	.+50     	; 0x1110 <mount_volume+0x4c8>
    10de:	8d e0       	ldi	r24, 0x0D	; 13
    10e0:	17 c0       	rjmp	.+46     	; 0x1110 <mount_volume+0x4c8>
    10e2:	8d e0       	ldi	r24, 0x0D	; 13
    10e4:	15 c0       	rjmp	.+42     	; 0x1110 <mount_volume+0x4c8>
    10e6:	8d e0       	ldi	r24, 0x0D	; 13
    10e8:	13 c0       	rjmp	.+38     	; 0x1110 <mount_volume+0x4c8>
    10ea:	8d e0       	ldi	r24, 0x0D	; 13
    10ec:	11 c0       	rjmp	.+34     	; 0x1110 <mount_volume+0x4c8>
    10ee:	8d e0       	ldi	r24, 0x0D	; 13
    10f0:	0f c0       	rjmp	.+30     	; 0x1110 <mount_volume+0x4c8>
    10f2:	8d e0       	ldi	r24, 0x0D	; 13
    10f4:	0d c0       	rjmp	.+26     	; 0x1110 <mount_volume+0x4c8>
    10f6:	8d e0       	ldi	r24, 0x0D	; 13
    10f8:	0b c0       	rjmp	.+22     	; 0x1110 <mount_volume+0x4c8>
    10fa:	8d e0       	ldi	r24, 0x0D	; 13
    10fc:	09 c0       	rjmp	.+18     	; 0x1110 <mount_volume+0x4c8>
    10fe:	8d e0       	ldi	r24, 0x0D	; 13
    1100:	07 c0       	rjmp	.+14     	; 0x1110 <mount_volume+0x4c8>
    1102:	8d e0       	ldi	r24, 0x0D	; 13
    1104:	05 c0       	rjmp	.+10     	; 0x1110 <mount_volume+0x4c8>
    1106:	8d e0       	ldi	r24, 0x0D	; 13
    1108:	03 c0       	rjmp	.+6      	; 0x1110 <mount_volume+0x4c8>
    110a:	8d e0       	ldi	r24, 0x0D	; 13
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <mount_volume+0x4c8>
    110e:	8d e0       	ldi	r24, 0x0D	; 13
    1110:	2e 96       	adiw	r28, 0x0e	; 14
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	1f 91       	pop	r17
    1122:	0f 91       	pop	r16
    1124:	ff 90       	pop	r15
    1126:	ef 90       	pop	r14
    1128:	df 90       	pop	r13
    112a:	cf 90       	pop	r12
    112c:	bf 90       	pop	r11
    112e:	af 90       	pop	r10
    1130:	9f 90       	pop	r9
    1132:	8f 90       	pop	r8
    1134:	7f 90       	pop	r7
    1136:	6f 90       	pop	r6
    1138:	5f 90       	pop	r5
    113a:	4f 90       	pop	r4
    113c:	3f 90       	pop	r3
    113e:	2f 90       	pop	r2
    1140:	08 95       	ret

00001142 <put_fat>:
    1142:	2f 92       	push	r2
    1144:	3f 92       	push	r3
    1146:	4f 92       	push	r4
    1148:	5f 92       	push	r5
    114a:	6f 92       	push	r6
    114c:	7f 92       	push	r7
    114e:	8f 92       	push	r8
    1150:	9f 92       	push	r9
    1152:	af 92       	push	r10
    1154:	bf 92       	push	r11
    1156:	cf 92       	push	r12
    1158:	df 92       	push	r13
    115a:	ef 92       	push	r14
    115c:	ff 92       	push	r15
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	00 d0       	rcall	.+0      	; 0x1168 <put_fat+0x26>
    1168:	00 d0       	rcall	.+0      	; 0x116a <put_fat+0x28>
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	42 30       	cpi	r20, 0x02	; 2
    1170:	51 05       	cpc	r21, r1
    1172:	61 05       	cpc	r22, r1
    1174:	71 05       	cpc	r23, r1
    1176:	08 f4       	brcc	.+2      	; 0x117a <put_fat+0x38>
    1178:	ea c0       	rjmp	.+468    	; 0x134e <put_fat+0x20c>
    117a:	fc 01       	movw	r30, r24
    117c:	c7 88       	ldd	r12, Z+23	; 0x17
    117e:	d0 8c       	ldd	r13, Z+24	; 0x18
    1180:	e1 8c       	ldd	r14, Z+25	; 0x19
    1182:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1184:	4c 15       	cp	r20, r12
    1186:	5d 05       	cpc	r21, r13
    1188:	6e 05       	cpc	r22, r14
    118a:	7f 05       	cpc	r23, r15
    118c:	08 f0       	brcs	.+2      	; 0x1190 <put_fat+0x4e>
    118e:	e1 c0       	rjmp	.+450    	; 0x1352 <put_fat+0x210>
    1190:	28 01       	movw	r4, r16
    1192:	39 01       	movw	r6, r18
    1194:	6a 01       	movw	r12, r20
    1196:	7b 01       	movw	r14, r22
    1198:	9c 83       	std	Y+4, r25	; 0x04
    119a:	8b 83       	std	Y+3, r24	; 0x03
    119c:	80 81       	ld	r24, Z
    119e:	82 30       	cpi	r24, 0x02	; 2
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <put_fat+0x62>
    11a2:	73 c0       	rjmp	.+230    	; 0x128a <put_fat+0x148>
    11a4:	83 30       	cpi	r24, 0x03	; 3
    11a6:	09 f4       	brne	.+2      	; 0x11aa <put_fat+0x68>
    11a8:	95 c0       	rjmp	.+298    	; 0x12d4 <put_fat+0x192>
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <put_fat+0x6e>
    11ae:	d3 c0       	rjmp	.+422    	; 0x1356 <put_fat+0x214>
    11b0:	5a 01       	movw	r10, r20
    11b2:	b6 94       	lsr	r11
    11b4:	a7 94       	ror	r10
    11b6:	a4 0e       	add	r10, r20
    11b8:	b5 1e       	adc	r11, r21
    11ba:	43 a1       	ldd	r20, Z+35	; 0x23
    11bc:	54 a1       	ldd	r21, Z+36	; 0x24
    11be:	65 a1       	ldd	r22, Z+37	; 0x25
    11c0:	76 a1       	ldd	r23, Z+38	; 0x26
    11c2:	c5 01       	movw	r24, r10
    11c4:	89 2f       	mov	r24, r25
    11c6:	99 27       	eor	r25, r25
    11c8:	86 95       	lsr	r24
    11ca:	48 0f       	add	r20, r24
    11cc:	59 1f       	adc	r21, r25
    11ce:	61 1d       	adc	r22, r1
    11d0:	71 1d       	adc	r23, r1
    11d2:	cf 01       	movw	r24, r30
    11d4:	e4 db       	rcall	.-2104   	; 0x99e <move_window>
    11d6:	18 2f       	mov	r17, r24
    11d8:	81 11       	cpse	r24, r1
    11da:	be c0       	rjmp	.+380    	; 0x1358 <put_fat+0x216>
    11dc:	2b 81       	ldd	r18, Y+3	; 0x03
    11de:	3c 81       	ldd	r19, Y+4	; 0x04
    11e0:	2d 5c       	subi	r18, 0xCD	; 205
    11e2:	3f 4f       	sbci	r19, 0xFF	; 255
    11e4:	3a 83       	std	Y+2, r19	; 0x02
    11e6:	29 83       	std	Y+1, r18	; 0x01
    11e8:	15 01       	movw	r2, r10
    11ea:	3f ef       	ldi	r19, 0xFF	; 255
    11ec:	23 1a       	sub	r2, r19
    11ee:	33 0a       	sbc	r3, r19
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	b8 22       	and	r11, r24
    11f4:	e9 81       	ldd	r30, Y+1	; 0x01
    11f6:	fa 81       	ldd	r31, Y+2	; 0x02
    11f8:	ea 0d       	add	r30, r10
    11fa:	fb 1d       	adc	r31, r11
    11fc:	46 01       	movw	r8, r12
    11fe:	57 01       	movw	r10, r14
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	89 22       	and	r8, r25
    1204:	99 24       	eor	r9, r9
    1206:	aa 24       	eor	r10, r10
    1208:	bb 24       	eor	r11, r11
    120a:	c0 fe       	sbrs	r12, 0
    120c:	08 c0       	rjmp	.+16     	; 0x121e <put_fat+0xdc>
    120e:	20 81       	ld	r18, Z
    1210:	30 e1       	ldi	r19, 0x10	; 16
    1212:	43 9e       	mul	r4, r19
    1214:	c0 01       	movw	r24, r0
    1216:	11 24       	eor	r1, r1
    1218:	2f 70       	andi	r18, 0x0F	; 15
    121a:	82 2b       	or	r24, r18
    121c:	01 c0       	rjmp	.+2      	; 0x1220 <put_fat+0xde>
    121e:	84 2d       	mov	r24, r4
    1220:	80 83       	st	Z, r24
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	eb 81       	ldd	r30, Y+3	; 0x03
    1226:	fc 81       	ldd	r31, Y+4	; 0x04
    1228:	83 83       	std	Z+3, r24	; 0x03
    122a:	43 a1       	ldd	r20, Z+35	; 0x23
    122c:	54 a1       	ldd	r21, Z+36	; 0x24
    122e:	65 a1       	ldd	r22, Z+37	; 0x25
    1230:	76 a1       	ldd	r23, Z+38	; 0x26
    1232:	c1 01       	movw	r24, r2
    1234:	89 2f       	mov	r24, r25
    1236:	99 27       	eor	r25, r25
    1238:	86 95       	lsr	r24
    123a:	48 0f       	add	r20, r24
    123c:	59 1f       	adc	r21, r25
    123e:	61 1d       	adc	r22, r1
    1240:	71 1d       	adc	r23, r1
    1242:	cf 01       	movw	r24, r30
    1244:	ac db       	rcall	.-2216   	; 0x99e <move_window>
    1246:	18 2f       	mov	r17, r24
    1248:	81 11       	cpse	r24, r1
    124a:	86 c0       	rjmp	.+268    	; 0x1358 <put_fat+0x216>
    124c:	f1 e0       	ldi	r31, 0x01	; 1
    124e:	3f 22       	and	r3, r31
    1250:	e9 81       	ldd	r30, Y+1	; 0x01
    1252:	fa 81       	ldd	r31, Y+2	; 0x02
    1254:	e2 0d       	add	r30, r2
    1256:	f3 1d       	adc	r31, r3
    1258:	89 28       	or	r8, r9
    125a:	8a 28       	or	r8, r10
    125c:	8b 28       	or	r8, r11
    125e:	49 f0       	breq	.+18     	; 0x1272 <put_fat+0x130>
    1260:	68 94       	set
    1262:	13 f8       	bld	r1, 3
    1264:	76 94       	lsr	r7
    1266:	67 94       	ror	r6
    1268:	57 94       	ror	r5
    126a:	47 94       	ror	r4
    126c:	16 94       	lsr	r1
    126e:	d1 f7       	brne	.-12     	; 0x1264 <put_fat+0x122>
    1270:	06 c0       	rjmp	.+12     	; 0x127e <put_fat+0x13c>
    1272:	90 81       	ld	r25, Z
    1274:	90 7f       	andi	r25, 0xF0	; 240
    1276:	85 2d       	mov	r24, r5
    1278:	8f 70       	andi	r24, 0x0F	; 15
    127a:	49 2e       	mov	r4, r25
    127c:	48 2a       	or	r4, r24
    127e:	40 82       	st	Z, r4
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	eb 81       	ldd	r30, Y+3	; 0x03
    1284:	fc 81       	ldd	r31, Y+4	; 0x04
    1286:	83 83       	std	Z+3, r24	; 0x03
    1288:	67 c0       	rjmp	.+206    	; 0x1358 <put_fat+0x216>
    128a:	eb 81       	ldd	r30, Y+3	; 0x03
    128c:	fc 81       	ldd	r31, Y+4	; 0x04
    128e:	43 a1       	ldd	r20, Z+35	; 0x23
    1290:	54 a1       	ldd	r21, Z+36	; 0x24
    1292:	65 a1       	ldd	r22, Z+37	; 0x25
    1294:	76 a1       	ldd	r23, Z+38	; 0x26
    1296:	bb 27       	eor	r27, r27
    1298:	af 2d       	mov	r26, r15
    129a:	9e 2d       	mov	r25, r14
    129c:	8d 2d       	mov	r24, r13
    129e:	48 0f       	add	r20, r24
    12a0:	59 1f       	adc	r21, r25
    12a2:	6a 1f       	adc	r22, r26
    12a4:	7b 1f       	adc	r23, r27
    12a6:	cf 01       	movw	r24, r30
    12a8:	7a db       	rcall	.-2316   	; 0x99e <move_window>
    12aa:	18 2f       	mov	r17, r24
    12ac:	81 11       	cpse	r24, r1
    12ae:	54 c0       	rjmp	.+168    	; 0x1358 <put_fat+0x216>
    12b0:	2b 81       	ldd	r18, Y+3	; 0x03
    12b2:	3c 81       	ldd	r19, Y+4	; 0x04
    12b4:	2d 5c       	subi	r18, 0xCD	; 205
    12b6:	3f 4f       	sbci	r19, 0xFF	; 255
    12b8:	cc 0c       	add	r12, r12
    12ba:	dd 1c       	adc	r13, r13
    12bc:	c6 01       	movw	r24, r12
    12be:	8e 7f       	andi	r24, 0xFE	; 254
    12c0:	91 70       	andi	r25, 0x01	; 1
    12c2:	b2 01       	movw	r22, r4
    12c4:	82 0f       	add	r24, r18
    12c6:	93 1f       	adc	r25, r19
    12c8:	f0 d9       	rcall	.-3104   	; 0x6aa <st_word>
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	eb 81       	ldd	r30, Y+3	; 0x03
    12ce:	fc 81       	ldd	r31, Y+4	; 0x04
    12d0:	83 83       	std	Z+3, r24	; 0x03
    12d2:	42 c0       	rjmp	.+132    	; 0x1358 <put_fat+0x216>
    12d4:	eb 81       	ldd	r30, Y+3	; 0x03
    12d6:	fc 81       	ldd	r31, Y+4	; 0x04
    12d8:	43 a1       	ldd	r20, Z+35	; 0x23
    12da:	54 a1       	ldd	r21, Z+36	; 0x24
    12dc:	65 a1       	ldd	r22, Z+37	; 0x25
    12de:	76 a1       	ldd	r23, Z+38	; 0x26
    12e0:	d7 01       	movw	r26, r14
    12e2:	c6 01       	movw	r24, r12
    12e4:	68 94       	set
    12e6:	16 f8       	bld	r1, 6
    12e8:	b6 95       	lsr	r27
    12ea:	a7 95       	ror	r26
    12ec:	97 95       	ror	r25
    12ee:	87 95       	ror	r24
    12f0:	16 94       	lsr	r1
    12f2:	d1 f7       	brne	.-12     	; 0x12e8 <put_fat+0x1a6>
    12f4:	48 0f       	add	r20, r24
    12f6:	59 1f       	adc	r21, r25
    12f8:	6a 1f       	adc	r22, r26
    12fa:	7b 1f       	adc	r23, r27
    12fc:	cf 01       	movw	r24, r30
    12fe:	4f db       	rcall	.-2402   	; 0x99e <move_window>
    1300:	18 2f       	mov	r17, r24
    1302:	81 11       	cpse	r24, r1
    1304:	29 c0       	rjmp	.+82     	; 0x1358 <put_fat+0x216>
    1306:	ff e0       	ldi	r31, 0x0F	; 15
    1308:	7f 22       	and	r7, r31
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	c3 96       	adiw	r24, 0x33	; 51
    1310:	cc 0c       	add	r12, r12
    1312:	dd 1c       	adc	r13, r13
    1314:	cc 0c       	add	r12, r12
    1316:	dd 1c       	adc	r13, r13
    1318:	2c ef       	ldi	r18, 0xFC	; 252
    131a:	c2 22       	and	r12, r18
    131c:	21 e0       	ldi	r18, 0x01	; 1
    131e:	d2 22       	and	r13, r18
    1320:	c8 0e       	add	r12, r24
    1322:	d9 1e       	adc	r13, r25
    1324:	c6 01       	movw	r24, r12
    1326:	a6 d9       	rcall	.-3252   	; 0x674 <ld_dword>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	88 27       	eor	r24, r24
    132e:	99 27       	eor	r25, r25
    1330:	aa 27       	eor	r26, r26
    1332:	b0 7f       	andi	r27, 0xF0	; 240
    1334:	b3 01       	movw	r22, r6
    1336:	a2 01       	movw	r20, r4
    1338:	48 2b       	or	r20, r24
    133a:	59 2b       	or	r21, r25
    133c:	6a 2b       	or	r22, r26
    133e:	7b 2b       	or	r23, r27
    1340:	c6 01       	movw	r24, r12
    1342:	b7 d9       	rcall	.-3218   	; 0x6b2 <st_dword>
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	eb 81       	ldd	r30, Y+3	; 0x03
    1348:	fc 81       	ldd	r31, Y+4	; 0x04
    134a:	83 83       	std	Z+3, r24	; 0x03
    134c:	05 c0       	rjmp	.+10     	; 0x1358 <put_fat+0x216>
    134e:	12 e0       	ldi	r17, 0x02	; 2
    1350:	03 c0       	rjmp	.+6      	; 0x1358 <put_fat+0x216>
    1352:	12 e0       	ldi	r17, 0x02	; 2
    1354:	01 c0       	rjmp	.+2      	; 0x1358 <put_fat+0x216>
    1356:	12 e0       	ldi	r17, 0x02	; 2
    1358:	81 2f       	mov	r24, r17
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	df 90       	pop	r13
    1370:	cf 90       	pop	r12
    1372:	bf 90       	pop	r11
    1374:	af 90       	pop	r10
    1376:	9f 90       	pop	r9
    1378:	8f 90       	pop	r8
    137a:	7f 90       	pop	r7
    137c:	6f 90       	pop	r6
    137e:	5f 90       	pop	r5
    1380:	4f 90       	pop	r4
    1382:	3f 90       	pop	r3
    1384:	2f 90       	pop	r2
    1386:	08 95       	ret

00001388 <get_fat>:
    1388:	af 92       	push	r10
    138a:	bf 92       	push	r11
    138c:	cf 92       	push	r12
    138e:	df 92       	push	r13
    1390:	ef 92       	push	r14
    1392:	ff 92       	push	r15
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	fc 01       	movw	r30, r24
    139e:	c0 81       	ld	r28, Z
    13a0:	d1 81       	ldd	r29, Z+1	; 0x01
    13a2:	42 30       	cpi	r20, 0x02	; 2
    13a4:	51 05       	cpc	r21, r1
    13a6:	61 05       	cpc	r22, r1
    13a8:	71 05       	cpc	r23, r1
    13aa:	08 f4       	brcc	.+2      	; 0x13ae <get_fat+0x26>
    13ac:	a0 c0       	rjmp	.+320    	; 0x14ee <get_fat+0x166>
    13ae:	8f 89       	ldd	r24, Y+23	; 0x17
    13b0:	98 8d       	ldd	r25, Y+24	; 0x18
    13b2:	a9 8d       	ldd	r26, Y+25	; 0x19
    13b4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    13b6:	48 17       	cp	r20, r24
    13b8:	59 07       	cpc	r21, r25
    13ba:	6a 07       	cpc	r22, r26
    13bc:	7b 07       	cpc	r23, r27
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <get_fat+0x3a>
    13c0:	9b c0       	rjmp	.+310    	; 0x14f8 <get_fat+0x170>
    13c2:	6a 01       	movw	r12, r20
    13c4:	7b 01       	movw	r14, r22
    13c6:	88 81       	ld	r24, Y
    13c8:	82 30       	cpi	r24, 0x02	; 2
    13ca:	09 f4       	brne	.+2      	; 0x13ce <get_fat+0x46>
    13cc:	4e c0       	rjmp	.+156    	; 0x146a <get_fat+0xe2>
    13ce:	83 30       	cpi	r24, 0x03	; 3
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <get_fat+0x4c>
    13d2:	69 c0       	rjmp	.+210    	; 0x14a6 <get_fat+0x11e>
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	09 f0       	breq	.+2      	; 0x13da <get_fat+0x52>
    13d8:	94 c0       	rjmp	.+296    	; 0x1502 <get_fat+0x17a>
    13da:	8a 01       	movw	r16, r20
    13dc:	16 95       	lsr	r17
    13de:	07 95       	ror	r16
    13e0:	04 0f       	add	r16, r20
    13e2:	15 1f       	adc	r17, r21
    13e4:	4b a1       	ldd	r20, Y+35	; 0x23
    13e6:	5c a1       	ldd	r21, Y+36	; 0x24
    13e8:	6d a1       	ldd	r22, Y+37	; 0x25
    13ea:	7e a1       	ldd	r23, Y+38	; 0x26
    13ec:	c8 01       	movw	r24, r16
    13ee:	89 2f       	mov	r24, r25
    13f0:	99 27       	eor	r25, r25
    13f2:	86 95       	lsr	r24
    13f4:	48 0f       	add	r20, r24
    13f6:	59 1f       	adc	r21, r25
    13f8:	61 1d       	adc	r22, r1
    13fa:	71 1d       	adc	r23, r1
    13fc:	ce 01       	movw	r24, r28
    13fe:	cf da       	rcall	.-2658   	; 0x99e <move_window>
    1400:	81 11       	cpse	r24, r1
    1402:	84 c0       	rjmp	.+264    	; 0x150c <get_fat+0x184>
    1404:	58 01       	movw	r10, r16
    1406:	ff ef       	ldi	r31, 0xFF	; 255
    1408:	af 1a       	sub	r10, r31
    140a:	bf 0a       	sbc	r11, r31
    140c:	11 70       	andi	r17, 0x01	; 1
    140e:	fe 01       	movw	r30, r28
    1410:	e0 0f       	add	r30, r16
    1412:	f1 1f       	adc	r31, r17
    1414:	03 a9       	ldd	r16, Z+51	; 0x33
    1416:	10 e0       	ldi	r17, 0x00	; 0
    1418:	4b a1       	ldd	r20, Y+35	; 0x23
    141a:	5c a1       	ldd	r21, Y+36	; 0x24
    141c:	6d a1       	ldd	r22, Y+37	; 0x25
    141e:	7e a1       	ldd	r23, Y+38	; 0x26
    1420:	c5 01       	movw	r24, r10
    1422:	89 2f       	mov	r24, r25
    1424:	99 27       	eor	r25, r25
    1426:	86 95       	lsr	r24
    1428:	48 0f       	add	r20, r24
    142a:	59 1f       	adc	r21, r25
    142c:	61 1d       	adc	r22, r1
    142e:	71 1d       	adc	r23, r1
    1430:	ce 01       	movw	r24, r28
    1432:	b5 da       	rcall	.-2710   	; 0x99e <move_window>
    1434:	81 11       	cpse	r24, r1
    1436:	6e c0       	rjmp	.+220    	; 0x1514 <get_fat+0x18c>
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	b8 22       	and	r11, r24
    143c:	ca 0d       	add	r28, r10
    143e:	db 1d       	adc	r29, r11
    1440:	6b a9       	ldd	r22, Y+51	; 0x33
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	76 2f       	mov	r23, r22
    1446:	66 27       	eor	r22, r22
    1448:	60 2b       	or	r22, r16
    144a:	71 2b       	or	r23, r17
    144c:	c0 fe       	sbrs	r12, 0
    144e:	09 c0       	rjmp	.+18     	; 0x1462 <get_fat+0xda>
    1450:	72 95       	swap	r23
    1452:	62 95       	swap	r22
    1454:	6f 70       	andi	r22, 0x0F	; 15
    1456:	67 27       	eor	r22, r23
    1458:	7f 70       	andi	r23, 0x0F	; 15
    145a:	67 27       	eor	r22, r23
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	64 c0       	rjmp	.+200    	; 0x152a <get_fat+0x1a2>
    1462:	7f 70       	andi	r23, 0x0F	; 15
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	60 c0       	rjmp	.+192    	; 0x152a <get_fat+0x1a2>
    146a:	4b a1       	ldd	r20, Y+35	; 0x23
    146c:	5c a1       	ldd	r21, Y+36	; 0x24
    146e:	6d a1       	ldd	r22, Y+37	; 0x25
    1470:	7e a1       	ldd	r23, Y+38	; 0x26
    1472:	bb 27       	eor	r27, r27
    1474:	af 2d       	mov	r26, r15
    1476:	9e 2d       	mov	r25, r14
    1478:	8d 2d       	mov	r24, r13
    147a:	48 0f       	add	r20, r24
    147c:	59 1f       	adc	r21, r25
    147e:	6a 1f       	adc	r22, r26
    1480:	7b 1f       	adc	r23, r27
    1482:	ce 01       	movw	r24, r28
    1484:	8c da       	rcall	.-2792   	; 0x99e <move_window>
    1486:	81 11       	cpse	r24, r1
    1488:	49 c0       	rjmp	.+146    	; 0x151c <get_fat+0x194>
    148a:	ce 01       	movw	r24, r28
    148c:	c3 96       	adiw	r24, 0x33	; 51
    148e:	a6 01       	movw	r20, r12
    1490:	44 0f       	add	r20, r20
    1492:	55 1f       	adc	r21, r21
    1494:	4e 7f       	andi	r20, 0xFE	; 254
    1496:	51 70       	andi	r21, 0x01	; 1
    1498:	84 0f       	add	r24, r20
    149a:	95 1f       	adc	r25, r21
    149c:	e1 d8       	rcall	.-3646   	; 0x660 <ld_word>
    149e:	bc 01       	movw	r22, r24
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	42 c0       	rjmp	.+132    	; 0x152a <get_fat+0x1a2>
    14a6:	4b a1       	ldd	r20, Y+35	; 0x23
    14a8:	5c a1       	ldd	r21, Y+36	; 0x24
    14aa:	6d a1       	ldd	r22, Y+37	; 0x25
    14ac:	7e a1       	ldd	r23, Y+38	; 0x26
    14ae:	d7 01       	movw	r26, r14
    14b0:	c6 01       	movw	r24, r12
    14b2:	68 94       	set
    14b4:	16 f8       	bld	r1, 6
    14b6:	b6 95       	lsr	r27
    14b8:	a7 95       	ror	r26
    14ba:	97 95       	ror	r25
    14bc:	87 95       	ror	r24
    14be:	16 94       	lsr	r1
    14c0:	d1 f7       	brne	.-12     	; 0x14b6 <get_fat+0x12e>
    14c2:	48 0f       	add	r20, r24
    14c4:	59 1f       	adc	r21, r25
    14c6:	6a 1f       	adc	r22, r26
    14c8:	7b 1f       	adc	r23, r27
    14ca:	ce 01       	movw	r24, r28
    14cc:	68 da       	rcall	.-2864   	; 0x99e <move_window>
    14ce:	81 11       	cpse	r24, r1
    14d0:	29 c0       	rjmp	.+82     	; 0x1524 <get_fat+0x19c>
    14d2:	e3 96       	adiw	r28, 0x33	; 51
    14d4:	a6 01       	movw	r20, r12
    14d6:	44 0f       	add	r20, r20
    14d8:	55 1f       	adc	r21, r21
    14da:	44 0f       	add	r20, r20
    14dc:	55 1f       	adc	r21, r21
    14de:	ca 01       	movw	r24, r20
    14e0:	8c 7f       	andi	r24, 0xFC	; 252
    14e2:	91 70       	andi	r25, 0x01	; 1
    14e4:	8c 0f       	add	r24, r28
    14e6:	9d 1f       	adc	r25, r29
    14e8:	c5 d8       	rcall	.-3702   	; 0x674 <ld_dword>
    14ea:	9f 70       	andi	r25, 0x0F	; 15
    14ec:	1e c0       	rjmp	.+60     	; 0x152a <get_fat+0x1a2>
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	19 c0       	rjmp	.+50     	; 0x152a <get_fat+0x1a2>
    14f8:	61 e0       	ldi	r22, 0x01	; 1
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	14 c0       	rjmp	.+40     	; 0x152a <get_fat+0x1a2>
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0f c0       	rjmp	.+30     	; 0x152a <get_fat+0x1a2>
    150c:	6f ef       	ldi	r22, 0xFF	; 255
    150e:	7f ef       	ldi	r23, 0xFF	; 255
    1510:	cb 01       	movw	r24, r22
    1512:	0b c0       	rjmp	.+22     	; 0x152a <get_fat+0x1a2>
    1514:	6f ef       	ldi	r22, 0xFF	; 255
    1516:	7f ef       	ldi	r23, 0xFF	; 255
    1518:	cb 01       	movw	r24, r22
    151a:	07 c0       	rjmp	.+14     	; 0x152a <get_fat+0x1a2>
    151c:	6f ef       	ldi	r22, 0xFF	; 255
    151e:	7f ef       	ldi	r23, 0xFF	; 255
    1520:	cb 01       	movw	r24, r22
    1522:	03 c0       	rjmp	.+6      	; 0x152a <get_fat+0x1a2>
    1524:	6f ef       	ldi	r22, 0xFF	; 255
    1526:	7f ef       	ldi	r23, 0xFF	; 255
    1528:	cb 01       	movw	r24, r22
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	df 90       	pop	r13
    1538:	cf 90       	pop	r12
    153a:	bf 90       	pop	r11
    153c:	af 90       	pop	r10
    153e:	08 95       	ret

00001540 <dir_sdi>:
    1540:	4f 92       	push	r4
    1542:	5f 92       	push	r5
    1544:	6f 92       	push	r6
    1546:	7f 92       	push	r7
    1548:	8f 92       	push	r8
    154a:	9f 92       	push	r9
    154c:	af 92       	push	r10
    154e:	bf 92       	push	r11
    1550:	cf 92       	push	r12
    1552:	df 92       	push	r13
    1554:	ef 92       	push	r14
    1556:	ff 92       	push	r15
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	ec 01       	movw	r28, r24
    1562:	6a 01       	movw	r12, r20
    1564:	7b 01       	movw	r14, r22
    1566:	08 81       	ld	r16, Y
    1568:	19 81       	ldd	r17, Y+1	; 0x01
    156a:	41 15       	cp	r20, r1
    156c:	51 05       	cpc	r21, r1
    156e:	80 e2       	ldi	r24, 0x20	; 32
    1570:	68 07       	cpc	r22, r24
    1572:	71 05       	cpc	r23, r1
    1574:	08 f0       	brcs	.+2      	; 0x1578 <dir_sdi+0x38>
    1576:	aa c0       	rjmp	.+340    	; 0x16cc <dir_sdi+0x18c>
    1578:	db 01       	movw	r26, r22
    157a:	ca 01       	movw	r24, r20
    157c:	8f 71       	andi	r24, 0x1F	; 31
    157e:	99 27       	eor	r25, r25
    1580:	aa 27       	eor	r26, r26
    1582:	bb 27       	eor	r27, r27
    1584:	89 2b       	or	r24, r25
    1586:	8a 2b       	or	r24, r26
    1588:	8b 2b       	or	r24, r27
    158a:	09 f0       	breq	.+2      	; 0x158e <dir_sdi+0x4e>
    158c:	a1 c0       	rjmp	.+322    	; 0x16d0 <dir_sdi+0x190>
    158e:	4e 87       	std	Y+14, r20	; 0x0e
    1590:	5f 87       	std	Y+15, r21	; 0x0f
    1592:	68 8b       	std	Y+16, r22	; 0x10
    1594:	79 8b       	std	Y+17, r23	; 0x11
    1596:	8e 80       	ldd	r8, Y+6	; 0x06
    1598:	9f 80       	ldd	r9, Y+7	; 0x07
    159a:	a8 84       	ldd	r10, Y+8	; 0x08
    159c:	b9 84       	ldd	r11, Y+9	; 0x09
    159e:	81 14       	cp	r8, r1
    15a0:	91 04       	cpc	r9, r1
    15a2:	a1 04       	cpc	r10, r1
    15a4:	b1 04       	cpc	r11, r1
    15a6:	41 f4       	brne	.+16     	; 0x15b8 <dir_sdi+0x78>
    15a8:	f8 01       	movw	r30, r16
    15aa:	80 81       	ld	r24, Z
    15ac:	83 30       	cpi	r24, 0x03	; 3
    15ae:	20 f0       	brcs	.+8      	; 0x15b8 <dir_sdi+0x78>
    15b0:	87 a0       	ldd	r8, Z+39	; 0x27
    15b2:	90 a4       	ldd	r9, Z+40	; 0x28
    15b4:	a1 a4       	ldd	r10, Z+41	; 0x29
    15b6:	b2 a4       	ldd	r11, Z+42	; 0x2a
    15b8:	81 14       	cp	r8, r1
    15ba:	91 04       	cpc	r9, r1
    15bc:	a1 04       	cpc	r10, r1
    15be:	b1 04       	cpc	r11, r1
    15c0:	f1 f4       	brne	.+60     	; 0x15fe <dir_sdi+0xbe>
    15c2:	f8 01       	movw	r30, r16
    15c4:	87 81       	ldd	r24, Z+7	; 0x07
    15c6:	90 85       	ldd	r25, Z+8	; 0x08
    15c8:	a0 e0       	ldi	r26, 0x00	; 0
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	b7 01       	movw	r22, r14
    15ce:	a6 01       	movw	r20, r12
    15d0:	68 94       	set
    15d2:	14 f8       	bld	r1, 4
    15d4:	76 95       	lsr	r23
    15d6:	67 95       	ror	r22
    15d8:	57 95       	ror	r21
    15da:	47 95       	ror	r20
    15dc:	16 94       	lsr	r1
    15de:	d1 f7       	brne	.-12     	; 0x15d4 <dir_sdi+0x94>
    15e0:	48 17       	cp	r20, r24
    15e2:	59 07       	cpc	r21, r25
    15e4:	6a 07       	cpc	r22, r26
    15e6:	7b 07       	cpc	r23, r27
    15e8:	08 f0       	brcs	.+2      	; 0x15ec <dir_sdi+0xac>
    15ea:	74 c0       	rjmp	.+232    	; 0x16d4 <dir_sdi+0x194>
    15ec:	87 a1       	ldd	r24, Z+39	; 0x27
    15ee:	90 a5       	ldd	r25, Z+40	; 0x28
    15f0:	a1 a5       	ldd	r26, Z+41	; 0x29
    15f2:	b2 a5       	ldd	r27, Z+42	; 0x2a
    15f4:	8e 8b       	std	Y+22, r24	; 0x16
    15f6:	9f 8b       	std	Y+23, r25	; 0x17
    15f8:	a8 8f       	std	Y+24, r26	; 0x18
    15fa:	b9 8f       	std	Y+25, r27	; 0x19
    15fc:	3e c0       	rjmp	.+124    	; 0x167a <dir_sdi+0x13a>
    15fe:	f8 01       	movw	r30, r16
    1600:	41 84       	ldd	r4, Z+9	; 0x09
    1602:	52 84       	ldd	r5, Z+10	; 0x0a
    1604:	61 2c       	mov	r6, r1
    1606:	71 2c       	mov	r7, r1
    1608:	03 2e       	mov	r0, r19
    160a:	39 e0       	ldi	r19, 0x09	; 9
    160c:	44 0c       	add	r4, r4
    160e:	55 1c       	adc	r5, r5
    1610:	66 1c       	adc	r6, r6
    1612:	77 1c       	adc	r7, r7
    1614:	3a 95       	dec	r19
    1616:	d1 f7       	brne	.-12     	; 0x160c <dir_sdi+0xcc>
    1618:	30 2d       	mov	r19, r0
    161a:	22 c0       	rjmp	.+68     	; 0x1660 <dir_sdi+0x120>
    161c:	b5 01       	movw	r22, r10
    161e:	a4 01       	movw	r20, r8
    1620:	ce 01       	movw	r24, r28
    1622:	b2 de       	rcall	.-668    	; 0x1388 <get_fat>
    1624:	4b 01       	movw	r8, r22
    1626:	5c 01       	movw	r10, r24
    1628:	6f 3f       	cpi	r22, 0xFF	; 255
    162a:	7f 4f       	sbci	r23, 0xFF	; 255
    162c:	8f 4f       	sbci	r24, 0xFF	; 255
    162e:	9f 4f       	sbci	r25, 0xFF	; 255
    1630:	09 f4       	brne	.+2      	; 0x1634 <dir_sdi+0xf4>
    1632:	52 c0       	rjmp	.+164    	; 0x16d8 <dir_sdi+0x198>
    1634:	82 e0       	ldi	r24, 0x02	; 2
    1636:	88 16       	cp	r8, r24
    1638:	91 04       	cpc	r9, r1
    163a:	a1 04       	cpc	r10, r1
    163c:	b1 04       	cpc	r11, r1
    163e:	08 f4       	brcc	.+2      	; 0x1642 <dir_sdi+0x102>
    1640:	4d c0       	rjmp	.+154    	; 0x16dc <dir_sdi+0x19c>
    1642:	f8 01       	movw	r30, r16
    1644:	87 89       	ldd	r24, Z+23	; 0x17
    1646:	90 8d       	ldd	r25, Z+24	; 0x18
    1648:	a1 8d       	ldd	r26, Z+25	; 0x19
    164a:	b2 8d       	ldd	r27, Z+26	; 0x1a
    164c:	88 16       	cp	r8, r24
    164e:	99 06       	cpc	r9, r25
    1650:	aa 06       	cpc	r10, r26
    1652:	bb 06       	cpc	r11, r27
    1654:	08 f0       	brcs	.+2      	; 0x1658 <dir_sdi+0x118>
    1656:	44 c0       	rjmp	.+136    	; 0x16e0 <dir_sdi+0x1a0>
    1658:	c4 18       	sub	r12, r4
    165a:	d5 08       	sbc	r13, r5
    165c:	e6 08       	sbc	r14, r6
    165e:	f7 08       	sbc	r15, r7
    1660:	c4 14       	cp	r12, r4
    1662:	d5 04       	cpc	r13, r5
    1664:	e6 04       	cpc	r14, r6
    1666:	f7 04       	cpc	r15, r7
    1668:	c8 f6       	brcc	.-78     	; 0x161c <dir_sdi+0xdc>
    166a:	b5 01       	movw	r22, r10
    166c:	a4 01       	movw	r20, r8
    166e:	c8 01       	movw	r24, r16
    1670:	56 d8       	rcall	.-3924   	; 0x71e <clst2sect>
    1672:	6e 8b       	std	Y+22, r22	; 0x16
    1674:	7f 8b       	std	Y+23, r23	; 0x17
    1676:	88 8f       	std	Y+24, r24	; 0x18
    1678:	99 8f       	std	Y+25, r25	; 0x19
    167a:	8a 8a       	std	Y+18, r8	; 0x12
    167c:	9b 8a       	std	Y+19, r9	; 0x13
    167e:	ac 8a       	std	Y+20, r10	; 0x14
    1680:	bd 8a       	std	Y+21, r11	; 0x15
    1682:	8e 89       	ldd	r24, Y+22	; 0x16
    1684:	9f 89       	ldd	r25, Y+23	; 0x17
    1686:	a8 8d       	ldd	r26, Y+24	; 0x18
    1688:	b9 8d       	ldd	r27, Y+25	; 0x19
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	a1 05       	cpc	r26, r1
    168e:	b1 05       	cpc	r27, r1
    1690:	49 f1       	breq	.+82     	; 0x16e4 <dir_sdi+0x1a4>
    1692:	b7 01       	movw	r22, r14
    1694:	a6 01       	movw	r20, r12
    1696:	03 2e       	mov	r0, r19
    1698:	39 e0       	ldi	r19, 0x09	; 9
    169a:	76 95       	lsr	r23
    169c:	67 95       	ror	r22
    169e:	57 95       	ror	r21
    16a0:	47 95       	ror	r20
    16a2:	3a 95       	dec	r19
    16a4:	d1 f7       	brne	.-12     	; 0x169a <dir_sdi+0x15a>
    16a6:	30 2d       	mov	r19, r0
    16a8:	84 0f       	add	r24, r20
    16aa:	95 1f       	adc	r25, r21
    16ac:	a6 1f       	adc	r26, r22
    16ae:	b7 1f       	adc	r27, r23
    16b0:	8e 8b       	std	Y+22, r24	; 0x16
    16b2:	9f 8b       	std	Y+23, r25	; 0x17
    16b4:	a8 8f       	std	Y+24, r26	; 0x18
    16b6:	b9 8f       	std	Y+25, r27	; 0x19
    16b8:	0d 5c       	subi	r16, 0xCD	; 205
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    16bc:	f1 e0       	ldi	r31, 0x01	; 1
    16be:	df 22       	and	r13, r31
    16c0:	c0 0e       	add	r12, r16
    16c2:	d1 1e       	adc	r13, r17
    16c4:	db 8e       	std	Y+27, r13	; 0x1b
    16c6:	ca 8e       	std	Y+26, r12	; 0x1a
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	0d c0       	rjmp	.+26     	; 0x16e6 <dir_sdi+0x1a6>
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	0b c0       	rjmp	.+22     	; 0x16e6 <dir_sdi+0x1a6>
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	09 c0       	rjmp	.+18     	; 0x16e6 <dir_sdi+0x1a6>
    16d4:	82 e0       	ldi	r24, 0x02	; 2
    16d6:	07 c0       	rjmp	.+14     	; 0x16e6 <dir_sdi+0x1a6>
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	05 c0       	rjmp	.+10     	; 0x16e6 <dir_sdi+0x1a6>
    16dc:	82 e0       	ldi	r24, 0x02	; 2
    16de:	03 c0       	rjmp	.+6      	; 0x16e6 <dir_sdi+0x1a6>
    16e0:	82 e0       	ldi	r24, 0x02	; 2
    16e2:	01 c0       	rjmp	.+2      	; 0x16e6 <dir_sdi+0x1a6>
    16e4:	82 e0       	ldi	r24, 0x02	; 2
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	ff 90       	pop	r15
    16f0:	ef 90       	pop	r14
    16f2:	df 90       	pop	r13
    16f4:	cf 90       	pop	r12
    16f6:	bf 90       	pop	r11
    16f8:	af 90       	pop	r10
    16fa:	9f 90       	pop	r9
    16fc:	8f 90       	pop	r8
    16fe:	7f 90       	pop	r7
    1700:	6f 90       	pop	r6
    1702:	5f 90       	pop	r5
    1704:	4f 90       	pop	r4
    1706:	08 95       	ret

00001708 <create_chain>:
    1708:	4f 92       	push	r4
    170a:	5f 92       	push	r5
    170c:	6f 92       	push	r6
    170e:	7f 92       	push	r7
    1710:	8f 92       	push	r8
    1712:	9f 92       	push	r9
    1714:	af 92       	push	r10
    1716:	bf 92       	push	r11
    1718:	cf 92       	push	r12
    171a:	df 92       	push	r13
    171c:	ef 92       	push	r14
    171e:	ff 92       	push	r15
    1720:	0f 93       	push	r16
    1722:	1f 93       	push	r17
    1724:	cf 93       	push	r28
    1726:	df 93       	push	r29
    1728:	8c 01       	movw	r16, r24
    172a:	2a 01       	movw	r4, r20
    172c:	3b 01       	movw	r6, r22
    172e:	fc 01       	movw	r30, r24
    1730:	c0 81       	ld	r28, Z
    1732:	d1 81       	ldd	r29, Z+1	; 0x01
    1734:	41 15       	cp	r20, r1
    1736:	51 05       	cpc	r21, r1
    1738:	61 05       	cpc	r22, r1
    173a:	71 05       	cpc	r23, r1
    173c:	99 f4       	brne	.+38     	; 0x1764 <create_chain+0x5c>
    173e:	8b 84       	ldd	r8, Y+11	; 0x0b
    1740:	9c 84       	ldd	r9, Y+12	; 0x0c
    1742:	ad 84       	ldd	r10, Y+13	; 0x0d
    1744:	be 84       	ldd	r11, Y+14	; 0x0e
    1746:	81 14       	cp	r8, r1
    1748:	91 04       	cpc	r9, r1
    174a:	a1 04       	cpc	r10, r1
    174c:	b1 04       	cpc	r11, r1
    174e:	29 f1       	breq	.+74     	; 0x179a <create_chain+0x92>
    1750:	8f 89       	ldd	r24, Y+23	; 0x17
    1752:	98 8d       	ldd	r25, Y+24	; 0x18
    1754:	a9 8d       	ldd	r26, Y+25	; 0x19
    1756:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1758:	88 16       	cp	r8, r24
    175a:	99 06       	cpc	r9, r25
    175c:	aa 06       	cpc	r10, r26
    175e:	bb 06       	cpc	r11, r27
    1760:	08 f5       	brcc	.+66     	; 0x17a4 <create_chain+0x9c>
    1762:	24 c0       	rjmp	.+72     	; 0x17ac <create_chain+0xa4>
    1764:	11 de       	rcall	.-990    	; 0x1388 <get_fat>
    1766:	62 30       	cpi	r22, 0x02	; 2
    1768:	71 05       	cpc	r23, r1
    176a:	81 05       	cpc	r24, r1
    176c:	91 05       	cpc	r25, r1
    176e:	08 f4       	brcc	.+2      	; 0x1772 <create_chain+0x6a>
    1770:	f5 c0       	rjmp	.+490    	; 0x195c <create_chain+0x254>
    1772:	6f 3f       	cpi	r22, 0xFF	; 255
    1774:	ff ef       	ldi	r31, 0xFF	; 255
    1776:	7f 07       	cpc	r23, r31
    1778:	8f 07       	cpc	r24, r31
    177a:	9f 07       	cpc	r25, r31
    177c:	09 f4       	brne	.+2      	; 0x1780 <create_chain+0x78>
    177e:	ff c0       	rjmp	.+510    	; 0x197e <create_chain+0x276>
    1780:	cf 88       	ldd	r12, Y+23	; 0x17
    1782:	d8 8c       	ldd	r13, Y+24	; 0x18
    1784:	e9 8c       	ldd	r14, Y+25	; 0x19
    1786:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1788:	6c 15       	cp	r22, r12
    178a:	7d 05       	cpc	r23, r13
    178c:	8e 05       	cpc	r24, r14
    178e:	9f 05       	cpc	r25, r15
    1790:	08 f4       	brcc	.+2      	; 0x1794 <create_chain+0x8c>
    1792:	f5 c0       	rjmp	.+490    	; 0x197e <create_chain+0x276>
    1794:	53 01       	movw	r10, r6
    1796:	42 01       	movw	r8, r4
    1798:	09 c0       	rjmp	.+18     	; 0x17ac <create_chain+0xa4>
    179a:	81 2c       	mov	r8, r1
    179c:	91 2c       	mov	r9, r1
    179e:	54 01       	movw	r10, r8
    17a0:	83 94       	inc	r8
    17a2:	04 c0       	rjmp	.+8      	; 0x17ac <create_chain+0xa4>
    17a4:	81 2c       	mov	r8, r1
    17a6:	91 2c       	mov	r9, r1
    17a8:	54 01       	movw	r10, r8
    17aa:	83 94       	inc	r8
    17ac:	6f 85       	ldd	r22, Y+15	; 0x0f
    17ae:	78 89       	ldd	r23, Y+16	; 0x10
    17b0:	89 89       	ldd	r24, Y+17	; 0x11
    17b2:	9a 89       	ldd	r25, Y+18	; 0x12
    17b4:	61 15       	cp	r22, r1
    17b6:	71 05       	cpc	r23, r1
    17b8:	81 05       	cpc	r24, r1
    17ba:	91 05       	cpc	r25, r1
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <create_chain+0xb8>
    17be:	df c0       	rjmp	.+446    	; 0x197e <create_chain+0x276>
    17c0:	84 14       	cp	r8, r4
    17c2:	95 04       	cpc	r9, r5
    17c4:	a6 04       	cpc	r10, r6
    17c6:	b7 04       	cpc	r11, r7
    17c8:	09 f0       	breq	.+2      	; 0x17cc <create_chain+0xc4>
    17ca:	40 c0       	rjmp	.+128    	; 0x184c <create_chain+0x144>
    17cc:	75 01       	movw	r14, r10
    17ce:	64 01       	movw	r12, r8
    17d0:	2f ef       	ldi	r18, 0xFF	; 255
    17d2:	c2 1a       	sub	r12, r18
    17d4:	d2 0a       	sbc	r13, r18
    17d6:	e2 0a       	sbc	r14, r18
    17d8:	f2 0a       	sbc	r15, r18
    17da:	8f 89       	ldd	r24, Y+23	; 0x17
    17dc:	98 8d       	ldd	r25, Y+24	; 0x18
    17de:	a9 8d       	ldd	r26, Y+25	; 0x19
    17e0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    17e2:	c8 16       	cp	r12, r24
    17e4:	d9 06       	cpc	r13, r25
    17e6:	ea 06       	cpc	r14, r26
    17e8:	fb 06       	cpc	r15, r27
    17ea:	28 f0       	brcs	.+10     	; 0x17f6 <create_chain+0xee>
    17ec:	c1 2c       	mov	r12, r1
    17ee:	d1 2c       	mov	r13, r1
    17f0:	76 01       	movw	r14, r12
    17f2:	68 94       	set
    17f4:	c1 f8       	bld	r12, 1
    17f6:	b7 01       	movw	r22, r14
    17f8:	a6 01       	movw	r20, r12
    17fa:	c8 01       	movw	r24, r16
    17fc:	c5 dd       	rcall	.-1142   	; 0x1388 <get_fat>
    17fe:	61 30       	cpi	r22, 0x01	; 1
    1800:	71 05       	cpc	r23, r1
    1802:	81 05       	cpc	r24, r1
    1804:	91 05       	cpc	r25, r1
    1806:	09 f4       	brne	.+2      	; 0x180a <create_chain+0x102>
    1808:	ba c0       	rjmp	.+372    	; 0x197e <create_chain+0x276>
    180a:	6f 3f       	cpi	r22, 0xFF	; 255
    180c:	ef ef       	ldi	r30, 0xFF	; 255
    180e:	7e 07       	cpc	r23, r30
    1810:	8e 07       	cpc	r24, r30
    1812:	9e 07       	cpc	r25, r30
    1814:	09 f4       	brne	.+2      	; 0x1818 <create_chain+0x110>
    1816:	b3 c0       	rjmp	.+358    	; 0x197e <create_chain+0x276>
    1818:	67 2b       	or	r22, r23
    181a:	68 2b       	or	r22, r24
    181c:	69 2b       	or	r22, r25
    181e:	19 f1       	breq	.+70     	; 0x1866 <create_chain+0x15e>
    1820:	8b 85       	ldd	r24, Y+11	; 0x0b
    1822:	9c 85       	ldd	r25, Y+12	; 0x0c
    1824:	ad 85       	ldd	r26, Y+13	; 0x0d
    1826:	be 85       	ldd	r27, Y+14	; 0x0e
    1828:	82 30       	cpi	r24, 0x02	; 2
    182a:	91 05       	cpc	r25, r1
    182c:	a1 05       	cpc	r26, r1
    182e:	b1 05       	cpc	r27, r1
    1830:	88 f0       	brcs	.+34     	; 0x1854 <create_chain+0x14c>
    1832:	4f 89       	ldd	r20, Y+23	; 0x17
    1834:	58 8d       	ldd	r21, Y+24	; 0x18
    1836:	69 8d       	ldd	r22, Y+25	; 0x19
    1838:	7a 8d       	ldd	r23, Y+26	; 0x1a
    183a:	84 17       	cp	r24, r20
    183c:	95 07       	cpc	r25, r21
    183e:	a6 07       	cpc	r26, r22
    1840:	b7 07       	cpc	r27, r23
    1842:	60 f0       	brcs	.+24     	; 0x185c <create_chain+0x154>
    1844:	c1 2c       	mov	r12, r1
    1846:	d1 2c       	mov	r13, r1
    1848:	76 01       	movw	r14, r12
    184a:	0d c0       	rjmp	.+26     	; 0x1866 <create_chain+0x15e>
    184c:	c1 2c       	mov	r12, r1
    184e:	d1 2c       	mov	r13, r1
    1850:	76 01       	movw	r14, r12
    1852:	09 c0       	rjmp	.+18     	; 0x1866 <create_chain+0x15e>
    1854:	c1 2c       	mov	r12, r1
    1856:	d1 2c       	mov	r13, r1
    1858:	76 01       	movw	r14, r12
    185a:	05 c0       	rjmp	.+10     	; 0x1866 <create_chain+0x15e>
    185c:	4c 01       	movw	r8, r24
    185e:	5d 01       	movw	r10, r26
    1860:	c1 2c       	mov	r12, r1
    1862:	d1 2c       	mov	r13, r1
    1864:	76 01       	movw	r14, r12
    1866:	c1 14       	cp	r12, r1
    1868:	d1 04       	cpc	r13, r1
    186a:	e1 04       	cpc	r14, r1
    186c:	f1 04       	cpc	r15, r1
    186e:	c1 f5       	brne	.+112    	; 0x18e0 <create_chain+0x1d8>
    1870:	75 01       	movw	r14, r10
    1872:	64 01       	movw	r12, r8
    1874:	ff ef       	ldi	r31, 0xFF	; 255
    1876:	cf 1a       	sub	r12, r31
    1878:	df 0a       	sbc	r13, r31
    187a:	ef 0a       	sbc	r14, r31
    187c:	ff 0a       	sbc	r15, r31
    187e:	8f 89       	ldd	r24, Y+23	; 0x17
    1880:	98 8d       	ldd	r25, Y+24	; 0x18
    1882:	a9 8d       	ldd	r26, Y+25	; 0x19
    1884:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1886:	c8 16       	cp	r12, r24
    1888:	d9 06       	cpc	r13, r25
    188a:	ea 06       	cpc	r14, r26
    188c:	fb 06       	cpc	r15, r27
    188e:	60 f0       	brcs	.+24     	; 0x18a8 <create_chain+0x1a0>
    1890:	22 e0       	ldi	r18, 0x02	; 2
    1892:	82 16       	cp	r8, r18
    1894:	91 04       	cpc	r9, r1
    1896:	a1 04       	cpc	r10, r1
    1898:	b1 04       	cpc	r11, r1
    189a:	08 f4       	brcc	.+2      	; 0x189e <create_chain+0x196>
    189c:	64 c0       	rjmp	.+200    	; 0x1966 <create_chain+0x25e>
    189e:	c1 2c       	mov	r12, r1
    18a0:	d1 2c       	mov	r13, r1
    18a2:	76 01       	movw	r14, r12
    18a4:	68 94       	set
    18a6:	c1 f8       	bld	r12, 1
    18a8:	b7 01       	movw	r22, r14
    18aa:	a6 01       	movw	r20, r12
    18ac:	c8 01       	movw	r24, r16
    18ae:	6c dd       	rcall	.-1320   	; 0x1388 <get_fat>
    18b0:	61 15       	cp	r22, r1
    18b2:	71 05       	cpc	r23, r1
    18b4:	81 05       	cpc	r24, r1
    18b6:	91 05       	cpc	r25, r1
    18b8:	99 f0       	breq	.+38     	; 0x18e0 <create_chain+0x1d8>
    18ba:	61 30       	cpi	r22, 0x01	; 1
    18bc:	71 05       	cpc	r23, r1
    18be:	81 05       	cpc	r24, r1
    18c0:	91 05       	cpc	r25, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <create_chain+0x1be>
    18c4:	5c c0       	rjmp	.+184    	; 0x197e <create_chain+0x276>
    18c6:	6f 3f       	cpi	r22, 0xFF	; 255
    18c8:	ef ef       	ldi	r30, 0xFF	; 255
    18ca:	7e 07       	cpc	r23, r30
    18cc:	8e 07       	cpc	r24, r30
    18ce:	9e 07       	cpc	r25, r30
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <create_chain+0x1cc>
    18d2:	55 c0       	rjmp	.+170    	; 0x197e <create_chain+0x276>
    18d4:	c8 14       	cp	r12, r8
    18d6:	d9 04       	cpc	r13, r9
    18d8:	ea 04       	cpc	r14, r10
    18da:	fb 04       	cpc	r15, r11
    18dc:	59 f6       	brne	.-106    	; 0x1874 <create_chain+0x16c>
    18de:	47 c0       	rjmp	.+142    	; 0x196e <create_chain+0x266>
    18e0:	0f ef       	ldi	r16, 0xFF	; 255
    18e2:	1f ef       	ldi	r17, 0xFF	; 255
    18e4:	98 01       	movw	r18, r16
    18e6:	b7 01       	movw	r22, r14
    18e8:	a6 01       	movw	r20, r12
    18ea:	ce 01       	movw	r24, r28
    18ec:	2a dc       	rcall	.-1964   	; 0x1142 <put_fat>
    18ee:	81 11       	cpse	r24, r1
    18f0:	0b c0       	rjmp	.+22     	; 0x1908 <create_chain+0x200>
    18f2:	41 14       	cp	r4, r1
    18f4:	51 04       	cpc	r5, r1
    18f6:	61 04       	cpc	r6, r1
    18f8:	71 04       	cpc	r7, r1
    18fa:	31 f0       	breq	.+12     	; 0x1908 <create_chain+0x200>
    18fc:	97 01       	movw	r18, r14
    18fe:	86 01       	movw	r16, r12
    1900:	b3 01       	movw	r22, r6
    1902:	a2 01       	movw	r20, r4
    1904:	ce 01       	movw	r24, r28
    1906:	1d dc       	rcall	.-1990   	; 0x1142 <put_fat>
    1908:	81 11       	cpse	r24, r1
    190a:	22 c0       	rjmp	.+68     	; 0x1950 <create_chain+0x248>
    190c:	cb 86       	std	Y+11, r12	; 0x0b
    190e:	dc 86       	std	Y+12, r13	; 0x0c
    1910:	ed 86       	std	Y+13, r14	; 0x0d
    1912:	fe 86       	std	Y+14, r15	; 0x0e
    1914:	4f 85       	ldd	r20, Y+15	; 0x0f
    1916:	58 89       	ldd	r21, Y+16	; 0x10
    1918:	69 89       	ldd	r22, Y+17	; 0x11
    191a:	7a 89       	ldd	r23, Y+18	; 0x12
    191c:	8f 89       	ldd	r24, Y+23	; 0x17
    191e:	98 8d       	ldd	r25, Y+24	; 0x18
    1920:	a9 8d       	ldd	r26, Y+25	; 0x19
    1922:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1924:	02 97       	sbiw	r24, 0x02	; 2
    1926:	a1 09       	sbc	r26, r1
    1928:	b1 09       	sbc	r27, r1
    192a:	84 17       	cp	r24, r20
    192c:	95 07       	cpc	r25, r21
    192e:	a6 07       	cpc	r26, r22
    1930:	b7 07       	cpc	r27, r23
    1932:	40 f0       	brcs	.+16     	; 0x1944 <create_chain+0x23c>
    1934:	41 50       	subi	r20, 0x01	; 1
    1936:	51 09       	sbc	r21, r1
    1938:	61 09       	sbc	r22, r1
    193a:	71 09       	sbc	r23, r1
    193c:	4f 87       	std	Y+15, r20	; 0x0f
    193e:	58 8b       	std	Y+16, r21	; 0x10
    1940:	69 8b       	std	Y+17, r22	; 0x11
    1942:	7a 8b       	std	Y+18, r23	; 0x12
    1944:	8c 81       	ldd	r24, Y+4	; 0x04
    1946:	81 60       	ori	r24, 0x01	; 1
    1948:	8c 83       	std	Y+4, r24	; 0x04
    194a:	c7 01       	movw	r24, r14
    194c:	b6 01       	movw	r22, r12
    194e:	17 c0       	rjmp	.+46     	; 0x197e <create_chain+0x276>
    1950:	81 30       	cpi	r24, 0x01	; 1
    1952:	89 f4       	brne	.+34     	; 0x1976 <create_chain+0x26e>
    1954:	6f ef       	ldi	r22, 0xFF	; 255
    1956:	7f ef       	ldi	r23, 0xFF	; 255
    1958:	cb 01       	movw	r24, r22
    195a:	11 c0       	rjmp	.+34     	; 0x197e <create_chain+0x276>
    195c:	61 e0       	ldi	r22, 0x01	; 1
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	0c c0       	rjmp	.+24     	; 0x197e <create_chain+0x276>
    1966:	60 e0       	ldi	r22, 0x00	; 0
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	cb 01       	movw	r24, r22
    196c:	08 c0       	rjmp	.+16     	; 0x197e <create_chain+0x276>
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	cb 01       	movw	r24, r22
    1974:	04 c0       	rjmp	.+8      	; 0x197e <create_chain+0x276>
    1976:	61 e0       	ldi	r22, 0x01	; 1
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	1f 91       	pop	r17
    1984:	0f 91       	pop	r16
    1986:	ff 90       	pop	r15
    1988:	ef 90       	pop	r14
    198a:	df 90       	pop	r13
    198c:	cf 90       	pop	r12
    198e:	bf 90       	pop	r11
    1990:	af 90       	pop	r10
    1992:	9f 90       	pop	r9
    1994:	8f 90       	pop	r8
    1996:	7f 90       	pop	r7
    1998:	6f 90       	pop	r6
    199a:	5f 90       	pop	r5
    199c:	4f 90       	pop	r4
    199e:	08 95       	ret

000019a0 <remove_chain>:
    19a0:	4f 92       	push	r4
    19a2:	5f 92       	push	r5
    19a4:	6f 92       	push	r6
    19a6:	7f 92       	push	r7
    19a8:	af 92       	push	r10
    19aa:	bf 92       	push	r11
    19ac:	cf 92       	push	r12
    19ae:	df 92       	push	r13
    19b0:	ef 92       	push	r14
    19b2:	ff 92       	push	r15
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	5c 01       	movw	r10, r24
    19be:	6a 01       	movw	r12, r20
    19c0:	7b 01       	movw	r14, r22
    19c2:	b9 01       	movw	r22, r18
    19c4:	a8 01       	movw	r20, r16
    19c6:	fc 01       	movw	r30, r24
    19c8:	c0 81       	ld	r28, Z
    19ca:	d1 81       	ldd	r29, Z+1	; 0x01
    19cc:	f2 e0       	ldi	r31, 0x02	; 2
    19ce:	cf 16       	cp	r12, r31
    19d0:	d1 04       	cpc	r13, r1
    19d2:	e1 04       	cpc	r14, r1
    19d4:	f1 04       	cpc	r15, r1
    19d6:	08 f4       	brcc	.+2      	; 0x19da <remove_chain+0x3a>
    19d8:	5d c0       	rjmp	.+186    	; 0x1a94 <remove_chain+0xf4>
    19da:	8f 89       	ldd	r24, Y+23	; 0x17
    19dc:	98 8d       	ldd	r25, Y+24	; 0x18
    19de:	a9 8d       	ldd	r26, Y+25	; 0x19
    19e0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    19e2:	c8 16       	cp	r12, r24
    19e4:	d9 06       	cpc	r13, r25
    19e6:	ea 06       	cpc	r14, r26
    19e8:	fb 06       	cpc	r15, r27
    19ea:	08 f0       	brcs	.+2      	; 0x19ee <remove_chain+0x4e>
    19ec:	55 c0       	rjmp	.+170    	; 0x1a98 <remove_chain+0xf8>
    19ee:	01 2b       	or	r16, r17
    19f0:	02 2b       	or	r16, r18
    19f2:	03 2b       	or	r16, r19
    19f4:	39 f0       	breq	.+14     	; 0x1a04 <remove_chain+0x64>
    19f6:	0f ef       	ldi	r16, 0xFF	; 255
    19f8:	1f ef       	ldi	r17, 0xFF	; 255
    19fa:	98 01       	movw	r18, r16
    19fc:	ce 01       	movw	r24, r28
    19fe:	a1 db       	rcall	.-2238   	; 0x1142 <put_fat>
    1a00:	81 11       	cpse	r24, r1
    1a02:	51 c0       	rjmp	.+162    	; 0x1aa6 <remove_chain+0x106>
    1a04:	b7 01       	movw	r22, r14
    1a06:	a6 01       	movw	r20, r12
    1a08:	c5 01       	movw	r24, r10
    1a0a:	be dc       	rcall	.-1668   	; 0x1388 <get_fat>
    1a0c:	2b 01       	movw	r4, r22
    1a0e:	3c 01       	movw	r6, r24
    1a10:	61 15       	cp	r22, r1
    1a12:	71 05       	cpc	r23, r1
    1a14:	81 05       	cpc	r24, r1
    1a16:	91 05       	cpc	r25, r1
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <remove_chain+0x7c>
    1a1a:	40 c0       	rjmp	.+128    	; 0x1a9c <remove_chain+0xfc>
    1a1c:	61 30       	cpi	r22, 0x01	; 1
    1a1e:	71 05       	cpc	r23, r1
    1a20:	81 05       	cpc	r24, r1
    1a22:	91 05       	cpc	r25, r1
    1a24:	e9 f1       	breq	.+122    	; 0x1aa0 <remove_chain+0x100>
    1a26:	8f ef       	ldi	r24, 0xFF	; 255
    1a28:	48 16       	cp	r4, r24
    1a2a:	58 06       	cpc	r5, r24
    1a2c:	68 06       	cpc	r6, r24
    1a2e:	78 06       	cpc	r7, r24
    1a30:	c9 f1       	breq	.+114    	; 0x1aa4 <remove_chain+0x104>
    1a32:	00 e0       	ldi	r16, 0x00	; 0
    1a34:	10 e0       	ldi	r17, 0x00	; 0
    1a36:	98 01       	movw	r18, r16
    1a38:	b7 01       	movw	r22, r14
    1a3a:	a6 01       	movw	r20, r12
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	81 db       	rcall	.-2302   	; 0x1142 <put_fat>
    1a40:	81 11       	cpse	r24, r1
    1a42:	31 c0       	rjmp	.+98     	; 0x1aa6 <remove_chain+0x106>
    1a44:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a46:	98 89       	ldd	r25, Y+16	; 0x10
    1a48:	a9 89       	ldd	r26, Y+17	; 0x11
    1a4a:	ba 89       	ldd	r27, Y+18	; 0x12
    1a4c:	4f 89       	ldd	r20, Y+23	; 0x17
    1a4e:	58 8d       	ldd	r21, Y+24	; 0x18
    1a50:	69 8d       	ldd	r22, Y+25	; 0x19
    1a52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a54:	6a 01       	movw	r12, r20
    1a56:	7b 01       	movw	r14, r22
    1a58:	e2 e0       	ldi	r30, 0x02	; 2
    1a5a:	ce 1a       	sub	r12, r30
    1a5c:	d1 08       	sbc	r13, r1
    1a5e:	e1 08       	sbc	r14, r1
    1a60:	f1 08       	sbc	r15, r1
    1a62:	8c 15       	cp	r24, r12
    1a64:	9d 05       	cpc	r25, r13
    1a66:	ae 05       	cpc	r26, r14
    1a68:	bf 05       	cpc	r27, r15
    1a6a:	50 f4       	brcc	.+20     	; 0x1a80 <remove_chain+0xe0>
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	a1 1d       	adc	r26, r1
    1a70:	b1 1d       	adc	r27, r1
    1a72:	8f 87       	std	Y+15, r24	; 0x0f
    1a74:	98 8b       	std	Y+16, r25	; 0x10
    1a76:	a9 8b       	std	Y+17, r26	; 0x11
    1a78:	ba 8b       	std	Y+18, r27	; 0x12
    1a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7c:	81 60       	ori	r24, 0x01	; 1
    1a7e:	8c 83       	std	Y+4, r24	; 0x04
    1a80:	73 01       	movw	r14, r6
    1a82:	62 01       	movw	r12, r4
    1a84:	44 16       	cp	r4, r20
    1a86:	55 06       	cpc	r5, r21
    1a88:	66 06       	cpc	r6, r22
    1a8a:	77 06       	cpc	r7, r23
    1a8c:	08 f4       	brcc	.+2      	; 0x1a90 <remove_chain+0xf0>
    1a8e:	ba cf       	rjmp	.-140    	; 0x1a04 <remove_chain+0x64>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	09 c0       	rjmp	.+18     	; 0x1aa6 <remove_chain+0x106>
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	07 c0       	rjmp	.+14     	; 0x1aa6 <remove_chain+0x106>
    1a98:	82 e0       	ldi	r24, 0x02	; 2
    1a9a:	05 c0       	rjmp	.+10     	; 0x1aa6 <remove_chain+0x106>
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	03 c0       	rjmp	.+6      	; 0x1aa6 <remove_chain+0x106>
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <remove_chain+0x106>
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	df 90       	pop	r13
    1ab4:	cf 90       	pop	r12
    1ab6:	bf 90       	pop	r11
    1ab8:	af 90       	pop	r10
    1aba:	7f 90       	pop	r7
    1abc:	6f 90       	pop	r6
    1abe:	5f 90       	pop	r5
    1ac0:	4f 90       	pop	r4
    1ac2:	08 95       	ret

00001ac4 <dir_remove>:
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	ec 01       	movw	r28, r24
    1ace:	08 81       	ld	r16, Y
    1ad0:	19 81       	ldd	r17, Y+1	; 0x01
    1ad2:	4e 89       	ldd	r20, Y+22	; 0x16
    1ad4:	5f 89       	ldd	r21, Y+23	; 0x17
    1ad6:	68 8d       	ldd	r22, Y+24	; 0x18
    1ad8:	79 8d       	ldd	r23, Y+25	; 0x19
    1ada:	c8 01       	movw	r24, r16
    1adc:	0e 94 cf 04 	call	0x99e	; 0x99e <move_window>
    1ae0:	81 11       	cpse	r24, r1
    1ae2:	07 c0       	rjmp	.+14     	; 0x1af2 <dir_remove+0x2e>
    1ae4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ae6:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1ae8:	95 ee       	ldi	r25, 0xE5	; 229
    1aea:	90 83       	st	Z, r25
    1aec:	91 e0       	ldi	r25, 0x01	; 1
    1aee:	f8 01       	movw	r30, r16
    1af0:	93 83       	std	Z+3, r25	; 0x03
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	1f 91       	pop	r17
    1af8:	0f 91       	pop	r16
    1afa:	08 95       	ret

00001afc <dir_clear>:
    1afc:	8f 92       	push	r8
    1afe:	9f 92       	push	r9
    1b00:	af 92       	push	r10
    1b02:	bf 92       	push	r11
    1b04:	cf 92       	push	r12
    1b06:	df 92       	push	r13
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	cf 93       	push	r28
    1b12:	df 93       	push	r29
    1b14:	7c 01       	movw	r14, r24
    1b16:	4a 01       	movw	r8, r20
    1b18:	5b 01       	movw	r10, r22
    1b1a:	0e 94 77 04 	call	0x8ee	; 0x8ee <sync_window>
    1b1e:	81 11       	cpse	r24, r1
    1b20:	39 c0       	rjmp	.+114    	; 0x1b94 <dir_clear+0x98>
    1b22:	b5 01       	movw	r22, r10
    1b24:	a4 01       	movw	r20, r8
    1b26:	c7 01       	movw	r24, r14
    1b28:	0e 94 8f 03 	call	0x71e	; 0x71e <clst2sect>
    1b2c:	4b 01       	movw	r8, r22
    1b2e:	5c 01       	movw	r10, r24
    1b30:	f7 01       	movw	r30, r14
    1b32:	67 a7       	std	Z+47, r22	; 0x2f
    1b34:	70 ab       	std	Z+48, r23	; 0x30
    1b36:	81 ab       	std	Z+49, r24	; 0x31
    1b38:	92 ab       	std	Z+50, r25	; 0x32
    1b3a:	67 01       	movw	r12, r14
    1b3c:	f3 e3       	ldi	r31, 0x33	; 51
    1b3e:	cf 0e       	add	r12, r31
    1b40:	d1 1c       	adc	r13, r1
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	92 e0       	ldi	r25, 0x02	; 2
    1b46:	f6 01       	movw	r30, r12
    1b48:	9c 01       	movw	r18, r24
    1b4a:	11 92       	st	Z+, r1
    1b4c:	21 50       	subi	r18, 0x01	; 1
    1b4e:	30 40       	sbci	r19, 0x00	; 0
    1b50:	e1 f7       	brne	.-8      	; 0x1b4a <dir_clear+0x4e>
    1b52:	c0 e0       	ldi	r28, 0x00	; 0
    1b54:	d0 e0       	ldi	r29, 0x00	; 0
    1b56:	01 c0       	rjmp	.+2      	; 0x1b5a <dir_clear+0x5e>
    1b58:	21 96       	adiw	r28, 0x01	; 1
    1b5a:	f7 01       	movw	r30, r14
    1b5c:	81 85       	ldd	r24, Z+9	; 0x09
    1b5e:	92 85       	ldd	r25, Z+10	; 0x0a
    1b60:	c8 17       	cp	r28, r24
    1b62:	d9 07       	cpc	r29, r25
    1b64:	70 f4       	brcc	.+28     	; 0x1b82 <dir_clear+0x86>
    1b66:	01 e0       	ldi	r16, 0x01	; 1
    1b68:	10 e0       	ldi	r17, 0x00	; 0
    1b6a:	a5 01       	movw	r20, r10
    1b6c:	94 01       	movw	r18, r8
    1b6e:	2c 0f       	add	r18, r28
    1b70:	3d 1f       	adc	r19, r29
    1b72:	41 1d       	adc	r20, r1
    1b74:	51 1d       	adc	r21, r1
    1b76:	b6 01       	movw	r22, r12
    1b78:	81 81       	ldd	r24, Z+1	; 0x01
    1b7a:	0e 94 14 03 	call	0x628	; 0x628 <disk_write>
    1b7e:	88 23       	and	r24, r24
    1b80:	59 f3       	breq	.-42     	; 0x1b58 <dir_clear+0x5c>
    1b82:	f7 01       	movw	r30, r14
    1b84:	21 85       	ldd	r18, Z+9	; 0x09
    1b86:	32 85       	ldd	r19, Z+10	; 0x0a
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	c2 17       	cp	r28, r18
    1b8c:	d3 07       	cpc	r29, r19
    1b8e:	19 f4       	brne	.+6      	; 0x1b96 <dir_clear+0x9a>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	01 c0       	rjmp	.+2      	; 0x1b96 <dir_clear+0x9a>
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	ff 90       	pop	r15
    1ba0:	ef 90       	pop	r14
    1ba2:	df 90       	pop	r13
    1ba4:	cf 90       	pop	r12
    1ba6:	bf 90       	pop	r11
    1ba8:	af 90       	pop	r10
    1baa:	9f 90       	pop	r9
    1bac:	8f 90       	pop	r8
    1bae:	08 95       	ret

00001bb0 <dir_next>:
    1bb0:	4f 92       	push	r4
    1bb2:	5f 92       	push	r5
    1bb4:	6f 92       	push	r6
    1bb6:	7f 92       	push	r7
    1bb8:	af 92       	push	r10
    1bba:	bf 92       	push	r11
    1bbc:	cf 92       	push	r12
    1bbe:	df 92       	push	r13
    1bc0:	ef 92       	push	r14
    1bc2:	ff 92       	push	r15
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	fc 01       	movw	r30, r24
    1bce:	c0 81       	ld	r28, Z
    1bd0:	d1 81       	ldd	r29, Z+1	; 0x01
    1bd2:	c6 84       	ldd	r12, Z+14	; 0x0e
    1bd4:	d7 84       	ldd	r13, Z+15	; 0x0f
    1bd6:	e0 88       	ldd	r14, Z+16	; 0x10
    1bd8:	f1 88       	ldd	r15, Z+17	; 0x11
    1bda:	80 e2       	ldi	r24, 0x20	; 32
    1bdc:	c8 0e       	add	r12, r24
    1bde:	d1 1c       	adc	r13, r1
    1be0:	e1 1c       	adc	r14, r1
    1be2:	f1 1c       	adc	r15, r1
    1be4:	c1 14       	cp	r12, r1
    1be6:	d1 04       	cpc	r13, r1
    1be8:	80 e2       	ldi	r24, 0x20	; 32
    1bea:	e8 06       	cpc	r14, r24
    1bec:	f1 04       	cpc	r15, r1
    1bee:	20 f0       	brcs	.+8      	; 0x1bf8 <dir_next+0x48>
    1bf0:	16 8a       	std	Z+22, r1	; 0x16
    1bf2:	17 8a       	std	Z+23, r1	; 0x17
    1bf4:	10 8e       	std	Z+24, r1	; 0x18
    1bf6:	11 8e       	std	Z+25, r1	; 0x19
    1bf8:	86 89       	ldd	r24, Z+22	; 0x16
    1bfa:	97 89       	ldd	r25, Z+23	; 0x17
    1bfc:	a0 8d       	ldd	r26, Z+24	; 0x18
    1bfe:	b1 8d       	ldd	r27, Z+25	; 0x19
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	a1 05       	cpc	r26, r1
    1c04:	b1 05       	cpc	r27, r1
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <dir_next+0x5a>
    1c08:	b0 c0       	rjmp	.+352    	; 0x1d6a <dir_next+0x1ba>
    1c0a:	8b 01       	movw	r16, r22
    1c0c:	5f 01       	movw	r10, r30
    1c0e:	b7 01       	movw	r22, r14
    1c10:	a6 01       	movw	r20, r12
    1c12:	51 70       	andi	r21, 0x01	; 1
    1c14:	66 27       	eor	r22, r22
    1c16:	77 27       	eor	r23, r23
    1c18:	45 2b       	or	r20, r21
    1c1a:	46 2b       	or	r20, r22
    1c1c:	47 2b       	or	r20, r23
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <dir_next+0x72>
    1c20:	95 c0       	rjmp	.+298    	; 0x1d4c <dir_next+0x19c>
    1c22:	01 96       	adiw	r24, 0x01	; 1
    1c24:	a1 1d       	adc	r26, r1
    1c26:	b1 1d       	adc	r27, r1
    1c28:	86 8b       	std	Z+22, r24	; 0x16
    1c2a:	97 8b       	std	Z+23, r25	; 0x17
    1c2c:	a0 8f       	std	Z+24, r26	; 0x18
    1c2e:	b1 8f       	std	Z+25, r27	; 0x19
    1c30:	42 89       	ldd	r20, Z+18	; 0x12
    1c32:	53 89       	ldd	r21, Z+19	; 0x13
    1c34:	64 89       	ldd	r22, Z+20	; 0x14
    1c36:	75 89       	ldd	r23, Z+21	; 0x15
    1c38:	41 15       	cp	r20, r1
    1c3a:	51 05       	cpc	r21, r1
    1c3c:	61 05       	cpc	r22, r1
    1c3e:	71 05       	cpc	r23, r1
    1c40:	d1 f4       	brne	.+52     	; 0x1c76 <dir_next+0xc6>
    1c42:	8f 81       	ldd	r24, Y+7	; 0x07
    1c44:	98 85       	ldd	r25, Y+8	; 0x08
    1c46:	a0 e0       	ldi	r26, 0x00	; 0
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	b7 01       	movw	r22, r14
    1c4c:	a6 01       	movw	r20, r12
    1c4e:	68 94       	set
    1c50:	14 f8       	bld	r1, 4
    1c52:	76 95       	lsr	r23
    1c54:	67 95       	ror	r22
    1c56:	57 95       	ror	r21
    1c58:	47 95       	ror	r20
    1c5a:	16 94       	lsr	r1
    1c5c:	d1 f7       	brne	.-12     	; 0x1c52 <dir_next+0xa2>
    1c5e:	48 17       	cp	r20, r24
    1c60:	59 07       	cpc	r21, r25
    1c62:	6a 07       	cpc	r22, r26
    1c64:	7b 07       	cpc	r23, r27
    1c66:	08 f4       	brcc	.+2      	; 0x1c6a <dir_next+0xba>
    1c68:	71 c0       	rjmp	.+226    	; 0x1d4c <dir_next+0x19c>
    1c6a:	16 8a       	std	Z+22, r1	; 0x16
    1c6c:	17 8a       	std	Z+23, r1	; 0x17
    1c6e:	10 8e       	std	Z+24, r1	; 0x18
    1c70:	11 8e       	std	Z+25, r1	; 0x19
    1c72:	84 e0       	ldi	r24, 0x04	; 4
    1c74:	87 c0       	rjmp	.+270    	; 0x1d84 <dir_next+0x1d4>
    1c76:	89 85       	ldd	r24, Y+9	; 0x09
    1c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	2c 01       	movw	r4, r24
    1c7e:	61 2c       	mov	r6, r1
    1c80:	71 2c       	mov	r7, r1
    1c82:	d7 01       	movw	r26, r14
    1c84:	c6 01       	movw	r24, r12
    1c86:	07 2e       	mov	r0, r23
    1c88:	79 e0       	ldi	r23, 0x09	; 9
    1c8a:	b6 95       	lsr	r27
    1c8c:	a7 95       	ror	r26
    1c8e:	97 95       	ror	r25
    1c90:	87 95       	ror	r24
    1c92:	7a 95       	dec	r23
    1c94:	d1 f7       	brne	.-12     	; 0x1c8a <dir_next+0xda>
    1c96:	70 2d       	mov	r23, r0
    1c98:	84 21       	and	r24, r4
    1c9a:	95 21       	and	r25, r5
    1c9c:	a6 21       	and	r26, r6
    1c9e:	b7 21       	and	r27, r7
    1ca0:	89 2b       	or	r24, r25
    1ca2:	8a 2b       	or	r24, r26
    1ca4:	8b 2b       	or	r24, r27
    1ca6:	09 f0       	breq	.+2      	; 0x1caa <dir_next+0xfa>
    1ca8:	51 c0       	rjmp	.+162    	; 0x1d4c <dir_next+0x19c>
    1caa:	cf 01       	movw	r24, r30
    1cac:	6d db       	rcall	.-2342   	; 0x1388 <get_fat>
    1cae:	2b 01       	movw	r4, r22
    1cb0:	3c 01       	movw	r6, r24
    1cb2:	62 30       	cpi	r22, 0x02	; 2
    1cb4:	71 05       	cpc	r23, r1
    1cb6:	81 05       	cpc	r24, r1
    1cb8:	91 05       	cpc	r25, r1
    1cba:	08 f4       	brcc	.+2      	; 0x1cbe <dir_next+0x10e>
    1cbc:	58 c0       	rjmp	.+176    	; 0x1d6e <dir_next+0x1be>
    1cbe:	8f ef       	ldi	r24, 0xFF	; 255
    1cc0:	48 16       	cp	r4, r24
    1cc2:	58 06       	cpc	r5, r24
    1cc4:	68 06       	cpc	r6, r24
    1cc6:	78 06       	cpc	r7, r24
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <dir_next+0x11c>
    1cca:	53 c0       	rjmp	.+166    	; 0x1d72 <dir_next+0x1c2>
    1ccc:	8f 89       	ldd	r24, Y+23	; 0x17
    1cce:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd0:	a9 8d       	ldd	r26, Y+25	; 0x19
    1cd2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1cd4:	48 16       	cp	r4, r24
    1cd6:	59 06       	cpc	r5, r25
    1cd8:	6a 06       	cpc	r6, r26
    1cda:	7b 06       	cpc	r7, r27
    1cdc:	40 f1       	brcs	.+80     	; 0x1d2e <dir_next+0x17e>
    1cde:	01 2b       	or	r16, r17
    1ce0:	39 f4       	brne	.+14     	; 0x1cf0 <dir_next+0x140>
    1ce2:	f5 01       	movw	r30, r10
    1ce4:	16 8a       	std	Z+22, r1	; 0x16
    1ce6:	17 8a       	std	Z+23, r1	; 0x17
    1ce8:	10 8e       	std	Z+24, r1	; 0x18
    1cea:	11 8e       	std	Z+25, r1	; 0x19
    1cec:	84 e0       	ldi	r24, 0x04	; 4
    1cee:	4a c0       	rjmp	.+148    	; 0x1d84 <dir_next+0x1d4>
    1cf0:	f5 01       	movw	r30, r10
    1cf2:	42 89       	ldd	r20, Z+18	; 0x12
    1cf4:	53 89       	ldd	r21, Z+19	; 0x13
    1cf6:	64 89       	ldd	r22, Z+20	; 0x14
    1cf8:	75 89       	ldd	r23, Z+21	; 0x15
    1cfa:	c5 01       	movw	r24, r10
    1cfc:	05 dd       	rcall	.-1526   	; 0x1708 <create_chain>
    1cfe:	2b 01       	movw	r4, r22
    1d00:	3c 01       	movw	r6, r24
    1d02:	61 15       	cp	r22, r1
    1d04:	71 05       	cpc	r23, r1
    1d06:	81 05       	cpc	r24, r1
    1d08:	91 05       	cpc	r25, r1
    1d0a:	a9 f1       	breq	.+106    	; 0x1d76 <dir_next+0x1c6>
    1d0c:	61 30       	cpi	r22, 0x01	; 1
    1d0e:	71 05       	cpc	r23, r1
    1d10:	81 05       	cpc	r24, r1
    1d12:	91 05       	cpc	r25, r1
    1d14:	91 f1       	breq	.+100    	; 0x1d7a <dir_next+0x1ca>
    1d16:	8f ef       	ldi	r24, 0xFF	; 255
    1d18:	48 16       	cp	r4, r24
    1d1a:	58 06       	cpc	r5, r24
    1d1c:	68 06       	cpc	r6, r24
    1d1e:	78 06       	cpc	r7, r24
    1d20:	71 f1       	breq	.+92     	; 0x1d7e <dir_next+0x1ce>
    1d22:	b3 01       	movw	r22, r6
    1d24:	a2 01       	movw	r20, r4
    1d26:	ce 01       	movw	r24, r28
    1d28:	e9 de       	rcall	.-558    	; 0x1afc <dir_clear>
    1d2a:	81 11       	cpse	r24, r1
    1d2c:	2a c0       	rjmp	.+84     	; 0x1d82 <dir_next+0x1d2>
    1d2e:	f5 01       	movw	r30, r10
    1d30:	42 8a       	std	Z+18, r4	; 0x12
    1d32:	53 8a       	std	Z+19, r5	; 0x13
    1d34:	64 8a       	std	Z+20, r6	; 0x14
    1d36:	75 8a       	std	Z+21, r7	; 0x15
    1d38:	b3 01       	movw	r22, r6
    1d3a:	a2 01       	movw	r20, r4
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	0e 94 8f 03 	call	0x71e	; 0x71e <clst2sect>
    1d42:	f5 01       	movw	r30, r10
    1d44:	66 8b       	std	Z+22, r22	; 0x16
    1d46:	77 8b       	std	Z+23, r23	; 0x17
    1d48:	80 8f       	std	Z+24, r24	; 0x18
    1d4a:	91 8f       	std	Z+25, r25	; 0x19
    1d4c:	f5 01       	movw	r30, r10
    1d4e:	c6 86       	std	Z+14, r12	; 0x0e
    1d50:	d7 86       	std	Z+15, r13	; 0x0f
    1d52:	e0 8a       	std	Z+16, r14	; 0x10
    1d54:	f1 8a       	std	Z+17, r15	; 0x11
    1d56:	e3 96       	adiw	r28, 0x33	; 51
    1d58:	f1 e0       	ldi	r31, 0x01	; 1
    1d5a:	df 22       	and	r13, r31
    1d5c:	cc 0e       	add	r12, r28
    1d5e:	dd 1e       	adc	r13, r29
    1d60:	f5 01       	movw	r30, r10
    1d62:	d3 8e       	std	Z+27, r13	; 0x1b
    1d64:	c2 8e       	std	Z+26, r12	; 0x1a
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	0d c0       	rjmp	.+26     	; 0x1d84 <dir_next+0x1d4>
    1d6a:	84 e0       	ldi	r24, 0x04	; 4
    1d6c:	0b c0       	rjmp	.+22     	; 0x1d84 <dir_next+0x1d4>
    1d6e:	82 e0       	ldi	r24, 0x02	; 2
    1d70:	09 c0       	rjmp	.+18     	; 0x1d84 <dir_next+0x1d4>
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	07 c0       	rjmp	.+14     	; 0x1d84 <dir_next+0x1d4>
    1d76:	87 e0       	ldi	r24, 0x07	; 7
    1d78:	05 c0       	rjmp	.+10     	; 0x1d84 <dir_next+0x1d4>
    1d7a:	82 e0       	ldi	r24, 0x02	; 2
    1d7c:	03 c0       	rjmp	.+6      	; 0x1d84 <dir_next+0x1d4>
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <dir_next+0x1d4>
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	cf 90       	pop	r12
    1d94:	bf 90       	pop	r11
    1d96:	af 90       	pop	r10
    1d98:	7f 90       	pop	r7
    1d9a:	6f 90       	pop	r6
    1d9c:	5f 90       	pop	r5
    1d9e:	4f 90       	pop	r4
    1da0:	08 95       	ret

00001da2 <dir_find>:
    1da2:	ef 92       	push	r14
    1da4:	ff 92       	push	r15
    1da6:	1f 93       	push	r17
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	ec 01       	movw	r28, r24
    1dae:	e8 80       	ld	r14, Y
    1db0:	f9 80       	ldd	r15, Y+1	; 0x01
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	ba 01       	movw	r22, r20
    1db8:	c3 db       	rcall	.-2170   	; 0x1540 <dir_sdi>
    1dba:	81 11       	cpse	r24, r1
    1dbc:	2a c0       	rjmp	.+84     	; 0x1e12 <dir_find+0x70>
    1dbe:	4e 89       	ldd	r20, Y+22	; 0x16
    1dc0:	5f 89       	ldd	r21, Y+23	; 0x17
    1dc2:	68 8d       	ldd	r22, Y+24	; 0x18
    1dc4:	79 8d       	ldd	r23, Y+25	; 0x19
    1dc6:	c7 01       	movw	r24, r14
    1dc8:	0e 94 cf 04 	call	0x99e	; 0x99e <move_window>
    1dcc:	18 2f       	mov	r17, r24
    1dce:	81 11       	cpse	r24, r1
    1dd0:	1c c0       	rjmp	.+56     	; 0x1e0a <dir_find+0x68>
    1dd2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1dd4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1dd6:	80 81       	ld	r24, Z
    1dd8:	88 23       	and	r24, r24
    1dda:	c1 f0       	breq	.+48     	; 0x1e0c <dir_find+0x6a>
    1ddc:	83 85       	ldd	r24, Z+11	; 0x0b
    1dde:	8f 73       	andi	r24, 0x3F	; 63
    1de0:	8c 83       	std	Y+4, r24	; 0x04
    1de2:	83 85       	ldd	r24, Z+11	; 0x0b
    1de4:	83 fd       	sbrc	r24, 3
    1de6:	0a c0       	rjmp	.+20     	; 0x1dfc <dir_find+0x5a>
    1de8:	4b e0       	ldi	r20, 0x0B	; 11
    1dea:	50 e0       	ldi	r21, 0x00	; 0
    1dec:	be 01       	movw	r22, r28
    1dee:	64 5e       	subi	r22, 0xE4	; 228
    1df0:	7f 4f       	sbci	r23, 0xFF	; 255
    1df2:	cf 01       	movw	r24, r30
    1df4:	0e 94 4f 33 	call	0x669e	; 0x669e <memcmp>
    1df8:	89 2b       	or	r24, r25
    1dfa:	51 f0       	breq	.+20     	; 0x1e10 <dir_find+0x6e>
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	70 e0       	ldi	r23, 0x00	; 0
    1e00:	ce 01       	movw	r24, r28
    1e02:	d6 de       	rcall	.-596    	; 0x1bb0 <dir_next>
    1e04:	88 23       	and	r24, r24
    1e06:	d9 f2       	breq	.-74     	; 0x1dbe <dir_find+0x1c>
    1e08:	04 c0       	rjmp	.+8      	; 0x1e12 <dir_find+0x70>
    1e0a:	03 c0       	rjmp	.+6      	; 0x1e12 <dir_find+0x70>
    1e0c:	84 e0       	ldi	r24, 0x04	; 4
    1e0e:	01 c0       	rjmp	.+2      	; 0x1e12 <dir_find+0x70>
    1e10:	81 2f       	mov	r24, r17
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	1f 91       	pop	r17
    1e18:	ff 90       	pop	r15
    1e1a:	ef 90       	pop	r14
    1e1c:	08 95       	ret

00001e1e <dir_alloc>:
    1e1e:	cf 92       	push	r12
    1e20:	df 92       	push	r13
    1e22:	ef 92       	push	r14
    1e24:	ff 92       	push	r15
    1e26:	0f 93       	push	r16
    1e28:	1f 93       	push	r17
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	ec 01       	movw	r28, r24
    1e30:	6b 01       	movw	r12, r22
    1e32:	e8 80       	ld	r14, Y
    1e34:	f9 80       	ldd	r15, Y+1	; 0x01
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	50 e0       	ldi	r21, 0x00	; 0
    1e3a:	ba 01       	movw	r22, r20
    1e3c:	81 db       	rcall	.-2302   	; 0x1540 <dir_sdi>
    1e3e:	81 11       	cpse	r24, r1
    1e40:	20 c0       	rjmp	.+64     	; 0x1e82 <dir_alloc+0x64>
    1e42:	00 e0       	ldi	r16, 0x00	; 0
    1e44:	10 e0       	ldi	r17, 0x00	; 0
    1e46:	4e 89       	ldd	r20, Y+22	; 0x16
    1e48:	5f 89       	ldd	r21, Y+23	; 0x17
    1e4a:	68 8d       	ldd	r22, Y+24	; 0x18
    1e4c:	79 8d       	ldd	r23, Y+25	; 0x19
    1e4e:	c7 01       	movw	r24, r14
    1e50:	0e 94 cf 04 	call	0x99e	; 0x99e <move_window>
    1e54:	81 11       	cpse	r24, r1
    1e56:	15 c0       	rjmp	.+42     	; 0x1e82 <dir_alloc+0x64>
    1e58:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e5a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1e5c:	90 81       	ld	r25, Z
    1e5e:	95 3e       	cpi	r25, 0xE5	; 229
    1e60:	11 f0       	breq	.+4      	; 0x1e66 <dir_alloc+0x48>
    1e62:	91 11       	cpse	r25, r1
    1e64:	06 c0       	rjmp	.+12     	; 0x1e72 <dir_alloc+0x54>
    1e66:	0f 5f       	subi	r16, 0xFF	; 255
    1e68:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6a:	0c 15       	cp	r16, r12
    1e6c:	1d 05       	cpc	r17, r13
    1e6e:	19 f4       	brne	.+6      	; 0x1e76 <dir_alloc+0x58>
    1e70:	08 c0       	rjmp	.+16     	; 0x1e82 <dir_alloc+0x64>
    1e72:	00 e0       	ldi	r16, 0x00	; 0
    1e74:	10 e0       	ldi	r17, 0x00	; 0
    1e76:	61 e0       	ldi	r22, 0x01	; 1
    1e78:	70 e0       	ldi	r23, 0x00	; 0
    1e7a:	ce 01       	movw	r24, r28
    1e7c:	99 de       	rcall	.-718    	; 0x1bb0 <dir_next>
    1e7e:	88 23       	and	r24, r24
    1e80:	11 f3       	breq	.-60     	; 0x1e46 <dir_alloc+0x28>
    1e82:	84 30       	cpi	r24, 0x04	; 4
    1e84:	09 f4       	brne	.+2      	; 0x1e88 <dir_alloc+0x6a>
    1e86:	87 e0       	ldi	r24, 0x07	; 7
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	ff 90       	pop	r15
    1e92:	ef 90       	pop	r14
    1e94:	df 90       	pop	r13
    1e96:	cf 90       	pop	r12
    1e98:	08 95       	ret

00001e9a <dir_read>:
    1e9a:	ef 92       	push	r14
    1e9c:	ff 92       	push	r15
    1e9e:	0f 93       	push	r16
    1ea0:	1f 93       	push	r17
    1ea2:	cf 93       	push	r28
    1ea4:	df 93       	push	r29
    1ea6:	ec 01       	movw	r28, r24
    1ea8:	7b 01       	movw	r14, r22
    1eaa:	08 81       	ld	r16, Y
    1eac:	19 81       	ldd	r17, Y+1	; 0x01
    1eae:	84 e0       	ldi	r24, 0x04	; 4
    1eb0:	25 c0       	rjmp	.+74     	; 0x1efc <dir_read+0x62>
    1eb2:	c8 01       	movw	r24, r16
    1eb4:	0e 94 cf 04 	call	0x99e	; 0x99e <move_window>
    1eb8:	81 11       	cpse	r24, r1
    1eba:	2b c0       	rjmp	.+86     	; 0x1f12 <dir_read+0x78>
    1ebc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ebe:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1ec0:	90 81       	ld	r25, Z
    1ec2:	99 23       	and	r25, r25
    1ec4:	29 f1       	breq	.+74     	; 0x1f10 <dir_read+0x76>
    1ec6:	23 85       	ldd	r18, Z+11	; 0x0b
    1ec8:	2f 73       	andi	r18, 0x3F	; 63
    1eca:	2c 83       	std	Y+4, r18	; 0x04
    1ecc:	95 3e       	cpi	r25, 0xE5	; 229
    1ece:	81 f0       	breq	.+32     	; 0x1ef0 <dir_read+0x56>
    1ed0:	9e 32       	cpi	r25, 0x2E	; 46
    1ed2:	71 f0       	breq	.+28     	; 0x1ef0 <dir_read+0x56>
    1ed4:	2f 30       	cpi	r18, 0x0F	; 15
    1ed6:	61 f0       	breq	.+24     	; 0x1ef0 <dir_read+0x56>
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	2f 7d       	andi	r18, 0xDF	; 223
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	50 e0       	ldi	r21, 0x00	; 0
    1ee0:	28 30       	cpi	r18, 0x08	; 8
    1ee2:	31 05       	cpc	r19, r1
    1ee4:	11 f0       	breq	.+4      	; 0x1eea <dir_read+0x50>
    1ee6:	40 e0       	ldi	r20, 0x00	; 0
    1ee8:	50 e0       	ldi	r21, 0x00	; 0
    1eea:	4e 15       	cp	r20, r14
    1eec:	5f 05       	cpc	r21, r15
    1eee:	89 f0       	breq	.+34     	; 0x1f12 <dir_read+0x78>
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	5c de       	rcall	.-840    	; 0x1bb0 <dir_next>
    1ef8:	81 11       	cpse	r24, r1
    1efa:	0b c0       	rjmp	.+22     	; 0x1f12 <dir_read+0x78>
    1efc:	4e 89       	ldd	r20, Y+22	; 0x16
    1efe:	5f 89       	ldd	r21, Y+23	; 0x17
    1f00:	68 8d       	ldd	r22, Y+24	; 0x18
    1f02:	79 8d       	ldd	r23, Y+25	; 0x19
    1f04:	41 15       	cp	r20, r1
    1f06:	51 05       	cpc	r21, r1
    1f08:	61 05       	cpc	r22, r1
    1f0a:	71 05       	cpc	r23, r1
    1f0c:	91 f6       	brne	.-92     	; 0x1eb2 <dir_read+0x18>
    1f0e:	01 c0       	rjmp	.+2      	; 0x1f12 <dir_read+0x78>
    1f10:	84 e0       	ldi	r24, 0x04	; 4
    1f12:	88 23       	and	r24, r24
    1f14:	21 f0       	breq	.+8      	; 0x1f1e <dir_read+0x84>
    1f16:	1e 8a       	std	Y+22, r1	; 0x16
    1f18:	1f 8a       	std	Y+23, r1	; 0x17
    1f1a:	18 8e       	std	Y+24, r1	; 0x18
    1f1c:	19 8e       	std	Y+25, r1	; 0x19
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	1f 91       	pop	r17
    1f24:	0f 91       	pop	r16
    1f26:	ff 90       	pop	r15
    1f28:	ef 90       	pop	r14
    1f2a:	08 95       	ret

00001f2c <create_name>:
    1f2c:	3f 92       	push	r3
    1f2e:	4f 92       	push	r4
    1f30:	5f 92       	push	r5
    1f32:	6f 92       	push	r6
    1f34:	7f 92       	push	r7
    1f36:	8f 92       	push	r8
    1f38:	9f 92       	push	r9
    1f3a:	af 92       	push	r10
    1f3c:	bf 92       	push	r11
    1f3e:	cf 92       	push	r12
    1f40:	df 92       	push	r13
    1f42:	ef 92       	push	r14
    1f44:	ff 92       	push	r15
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	3c 01       	movw	r6, r24
    1f50:	2b 01       	movw	r4, r22
    1f52:	fb 01       	movw	r30, r22
    1f54:	c0 81       	ld	r28, Z
    1f56:	d1 81       	ldd	r29, Z+1	; 0x01
    1f58:	5c 01       	movw	r10, r24
    1f5a:	fc e1       	ldi	r31, 0x1C	; 28
    1f5c:	af 0e       	add	r10, r31
    1f5e:	b1 1c       	adc	r11, r1
    1f60:	4b e0       	ldi	r20, 0x0B	; 11
    1f62:	50 e0       	ldi	r21, 0x00	; 0
    1f64:	60 e2       	ldi	r22, 0x20	; 32
    1f66:	70 e0       	ldi	r23, 0x00	; 0
    1f68:	c5 01       	movw	r24, r10
    1f6a:	0e 94 65 33 	call	0x66ca	; 0x66ca <memset>
    1f6e:	88 81       	ld	r24, Y
    1f70:	8e 32       	cpi	r24, 0x2E	; 46
    1f72:	69 f5       	brne	.+90     	; 0x1fce <create_name+0xa2>
    1f74:	40 e0       	ldi	r20, 0x00	; 0
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	9c 01       	movw	r18, r24
    1f7e:	2f 5f       	subi	r18, 0xFF	; 255
    1f80:	3f 4f       	sbci	r19, 0xFF	; 255
    1f82:	fe 01       	movw	r30, r28
    1f84:	e8 0f       	add	r30, r24
    1f86:	f9 1f       	adc	r31, r25
    1f88:	80 81       	ld	r24, Z
    1f8a:	8e 32       	cpi	r24, 0x2E	; 46
    1f8c:	59 f4       	brne	.+22     	; 0x1fa4 <create_name+0x78>
    1f8e:	23 30       	cpi	r18, 0x03	; 3
    1f90:	31 05       	cpc	r19, r1
    1f92:	40 f4       	brcc	.+16     	; 0x1fa4 <create_name+0x78>
    1f94:	f5 01       	movw	r30, r10
    1f96:	e4 0f       	add	r30, r20
    1f98:	f5 1f       	adc	r31, r21
    1f9a:	80 83       	st	Z, r24
    1f9c:	c9 01       	movw	r24, r18
    1f9e:	4f 5f       	subi	r20, 0xFF	; 255
    1fa0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa2:	ec cf       	rjmp	.-40     	; 0x1f7c <create_name+0x50>
    1fa4:	8f 32       	cpi	r24, 0x2F	; 47
    1fa6:	29 f0       	breq	.+10     	; 0x1fb2 <create_name+0x86>
    1fa8:	8c 35       	cpi	r24, 0x5C	; 92
    1faa:	19 f0       	breq	.+6      	; 0x1fb2 <create_name+0x86>
    1fac:	81 32       	cpi	r24, 0x21	; 33
    1fae:	08 f0       	brcs	.+2      	; 0x1fb2 <create_name+0x86>
    1fb0:	a4 c0       	rjmp	.+328    	; 0x20fa <create_name+0x1ce>
    1fb2:	c2 0f       	add	r28, r18
    1fb4:	d3 1f       	adc	r29, r19
    1fb6:	f2 01       	movw	r30, r4
    1fb8:	d1 83       	std	Z+1, r29	; 0x01
    1fba:	c0 83       	st	Z, r28
    1fbc:	81 32       	cpi	r24, 0x21	; 33
    1fbe:	10 f4       	brcc	.+4      	; 0x1fc4 <create_name+0x98>
    1fc0:	84 e2       	ldi	r24, 0x24	; 36
    1fc2:	01 c0       	rjmp	.+2      	; 0x1fc6 <create_name+0x9a>
    1fc4:	80 e2       	ldi	r24, 0x20	; 32
    1fc6:	f3 01       	movw	r30, r6
    1fc8:	87 a3       	std	Z+39, r24	; 0x27
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	a3 c0       	rjmp	.+326    	; 0x2114 <__stack+0x15>
    1fce:	c1 2c       	mov	r12, r1
    1fd0:	d1 2c       	mov	r13, r1
    1fd2:	e1 2c       	mov	r14, r1
    1fd4:	f1 2c       	mov	r15, r1
    1fd6:	68 94       	set
    1fd8:	88 24       	eor	r8, r8
    1fda:	83 f8       	bld	r8, 3
    1fdc:	91 2c       	mov	r9, r1
    1fde:	87 01       	movw	r16, r14
    1fe0:	0f 5f       	subi	r16, 0xFF	; 255
    1fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	ee 0d       	add	r30, r14
    1fe8:	ff 1d       	adc	r31, r15
    1fea:	30 80       	ld	r3, Z
    1fec:	f0 e2       	ldi	r31, 0x20	; 32
    1fee:	f3 15       	cp	r31, r3
    1ff0:	08 f0       	brcs	.+2      	; 0x1ff4 <create_name+0xc8>
    1ff2:	67 c0       	rjmp	.+206    	; 0x20c2 <create_name+0x196>
    1ff4:	8f e2       	ldi	r24, 0x2F	; 47
    1ff6:	38 16       	cp	r3, r24
    1ff8:	31 f0       	breq	.+12     	; 0x2006 <create_name+0xda>
    1ffa:	9c e5       	ldi	r25, 0x5C	; 92
    1ffc:	39 12       	cpse	r3, r25
    1ffe:	0c c0       	rjmp	.+24     	; 0x2018 <create_name+0xec>
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <create_name+0xda>
    2002:	0f 5f       	subi	r16, 0xFF	; 255
    2004:	1f 4f       	sbci	r17, 0xFF	; 255
    2006:	fe 01       	movw	r30, r28
    2008:	e0 0f       	add	r30, r16
    200a:	f1 1f       	adc	r31, r17
    200c:	80 81       	ld	r24, Z
    200e:	8f 32       	cpi	r24, 0x2F	; 47
    2010:	c1 f3       	breq	.-16     	; 0x2002 <create_name+0xd6>
    2012:	8c 35       	cpi	r24, 0x5C	; 92
    2014:	b1 f3       	breq	.-20     	; 0x2002 <create_name+0xd6>
    2016:	55 c0       	rjmp	.+170    	; 0x20c2 <create_name+0x196>
    2018:	ee e2       	ldi	r30, 0x2E	; 46
    201a:	3e 16       	cp	r3, r30
    201c:	19 f0       	breq	.+6      	; 0x2024 <create_name+0xf8>
    201e:	c8 14       	cp	r12, r8
    2020:	d9 04       	cpc	r13, r9
    2022:	98 f0       	brcs	.+38     	; 0x204a <create_name+0x11e>
    2024:	fb e0       	ldi	r31, 0x0B	; 11
    2026:	8f 16       	cp	r8, r31
    2028:	91 04       	cpc	r9, r1
    202a:	09 f4       	brne	.+2      	; 0x202e <create_name+0x102>
    202c:	68 c0       	rjmp	.+208    	; 0x20fe <create_name+0x1d2>
    202e:	8e e2       	ldi	r24, 0x2E	; 46
    2030:	38 12       	cpse	r3, r24
    2032:	67 c0       	rjmp	.+206    	; 0x2102 <__stack+0x3>
    2034:	78 01       	movw	r14, r16
    2036:	68 94       	set
    2038:	cc 24       	eor	r12, r12
    203a:	c3 f8       	bld	r12, 3
    203c:	d1 2c       	mov	r13, r1
    203e:	0f 2e       	mov	r0, r31
    2040:	fb e0       	ldi	r31, 0x0B	; 11
    2042:	8f 2e       	mov	r8, r31
    2044:	91 2c       	mov	r9, r1
    2046:	f0 2d       	mov	r31, r0
    2048:	ca cf       	rjmp	.-108    	; 0x1fde <create_name+0xb2>
    204a:	83 2d       	mov	r24, r3
    204c:	0e 94 5f 03 	call	0x6be	; 0x6be <dbc_1st>
    2050:	89 2b       	or	r24, r25
    2052:	01 f1       	breq	.+64     	; 0x2094 <create_name+0x168>
    2054:	92 e0       	ldi	r25, 0x02	; 2
    2056:	e9 0e       	add	r14, r25
    2058:	f1 1c       	adc	r15, r1
    205a:	fe 01       	movw	r30, r28
    205c:	e0 0f       	add	r30, r16
    205e:	f1 1f       	adc	r31, r17
    2060:	10 81       	ld	r17, Z
    2062:	81 2f       	mov	r24, r17
    2064:	0e 94 76 03 	call	0x6ec	; 0x6ec <dbc_2nd>
    2068:	89 2b       	or	r24, r25
    206a:	09 f4       	brne	.+2      	; 0x206e <create_name+0x142>
    206c:	4c c0       	rjmp	.+152    	; 0x2106 <__stack+0x7>
    206e:	c4 01       	movw	r24, r8
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	c8 16       	cp	r12, r24
    2074:	d9 06       	cpc	r13, r25
    2076:	08 f0       	brcs	.+2      	; 0x207a <create_name+0x14e>
    2078:	48 c0       	rjmp	.+144    	; 0x210a <__stack+0xb>
    207a:	f5 01       	movw	r30, r10
    207c:	ec 0d       	add	r30, r12
    207e:	fd 1d       	adc	r31, r13
    2080:	30 82       	st	Z, r3
    2082:	f6 01       	movw	r30, r12
    2084:	31 96       	adiw	r30, 0x01	; 1
    2086:	ea 0d       	add	r30, r10
    2088:	fb 1d       	adc	r31, r11
    208a:	82 e0       	ldi	r24, 0x02	; 2
    208c:	c8 0e       	add	r12, r24
    208e:	d1 1c       	adc	r13, r1
    2090:	10 83       	st	Z, r17
    2092:	a5 cf       	rjmp	.-182    	; 0x1fde <create_name+0xb2>
    2094:	63 2d       	mov	r22, r3
    2096:	70 e0       	ldi	r23, 0x00	; 0
    2098:	81 e9       	ldi	r24, 0x91	; 145
    209a:	93 e0       	ldi	r25, 0x03	; 3
    209c:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <strchr>
    20a0:	89 2b       	or	r24, r25
    20a2:	a9 f5       	brne	.+106    	; 0x210e <__stack+0xf>
    20a4:	8f e9       	ldi	r24, 0x9F	; 159
    20a6:	83 0d       	add	r24, r3
    20a8:	8a 31       	cpi	r24, 0x1A	; 26
    20aa:	10 f4       	brcc	.+4      	; 0x20b0 <create_name+0x184>
    20ac:	90 ee       	ldi	r25, 0xE0	; 224
    20ae:	39 0e       	add	r3, r25
    20b0:	f5 01       	movw	r30, r10
    20b2:	ec 0d       	add	r30, r12
    20b4:	fd 1d       	adc	r31, r13
    20b6:	30 82       	st	Z, r3
    20b8:	f6 01       	movw	r30, r12
    20ba:	31 96       	adiw	r30, 0x01	; 1
    20bc:	6f 01       	movw	r12, r30
    20be:	78 01       	movw	r14, r16
    20c0:	8e cf       	rjmp	.-228    	; 0x1fde <create_name+0xb2>
    20c2:	c0 0f       	add	r28, r16
    20c4:	d1 1f       	adc	r29, r17
    20c6:	f2 01       	movw	r30, r4
    20c8:	d1 83       	std	Z+1, r29	; 0x01
    20ca:	c0 83       	st	Z, r28
    20cc:	cd 28       	or	r12, r13
    20ce:	09 f1       	breq	.+66     	; 0x2112 <__stack+0x13>
    20d0:	f3 01       	movw	r30, r6
    20d2:	84 8d       	ldd	r24, Z+28	; 0x1c
    20d4:	85 3e       	cpi	r24, 0xE5	; 229
    20d6:	11 f4       	brne	.+4      	; 0x20dc <create_name+0x1b0>
    20d8:	85 e0       	ldi	r24, 0x05	; 5
    20da:	84 8f       	std	Z+28, r24	; 0x1c
    20dc:	f0 e2       	ldi	r31, 0x20	; 32
    20de:	f3 15       	cp	r31, r3
    20e0:	28 f4       	brcc	.+10     	; 0x20ec <create_name+0x1c0>
    20e2:	88 81       	ld	r24, Y
    20e4:	81 32       	cpi	r24, 0x21	; 33
    20e6:	20 f4       	brcc	.+8      	; 0x20f0 <create_name+0x1c4>
    20e8:	84 e0       	ldi	r24, 0x04	; 4
    20ea:	03 c0       	rjmp	.+6      	; 0x20f2 <create_name+0x1c6>
    20ec:	84 e0       	ldi	r24, 0x04	; 4
    20ee:	01 c0       	rjmp	.+2      	; 0x20f2 <create_name+0x1c6>
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	f3 01       	movw	r30, r6
    20f4:	87 a3       	std	Z+39, r24	; 0x27
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	0d c0       	rjmp	.+26     	; 0x2114 <__stack+0x15>
    20fa:	86 e0       	ldi	r24, 0x06	; 6
    20fc:	0b c0       	rjmp	.+22     	; 0x2114 <__stack+0x15>
    20fe:	86 e0       	ldi	r24, 0x06	; 6
    2100:	09 c0       	rjmp	.+18     	; 0x2114 <__stack+0x15>
    2102:	86 e0       	ldi	r24, 0x06	; 6
    2104:	07 c0       	rjmp	.+14     	; 0x2114 <__stack+0x15>
    2106:	86 e0       	ldi	r24, 0x06	; 6
    2108:	05 c0       	rjmp	.+10     	; 0x2114 <__stack+0x15>
    210a:	86 e0       	ldi	r24, 0x06	; 6
    210c:	03 c0       	rjmp	.+6      	; 0x2114 <__stack+0x15>
    210e:	86 e0       	ldi	r24, 0x06	; 6
    2110:	01 c0       	rjmp	.+2      	; 0x2114 <__stack+0x15>
    2112:	86 e0       	ldi	r24, 0x06	; 6
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	ff 90       	pop	r15
    211e:	ef 90       	pop	r14
    2120:	df 90       	pop	r13
    2122:	cf 90       	pop	r12
    2124:	bf 90       	pop	r11
    2126:	af 90       	pop	r10
    2128:	9f 90       	pop	r9
    212a:	8f 90       	pop	r8
    212c:	7f 90       	pop	r7
    212e:	6f 90       	pop	r6
    2130:	5f 90       	pop	r5
    2132:	4f 90       	pop	r4
    2134:	3f 90       	pop	r3
    2136:	08 95       	ret

00002138 <follow_path>:
    2138:	df 92       	push	r13
    213a:	ef 92       	push	r14
    213c:	ff 92       	push	r15
    213e:	0f 93       	push	r16
    2140:	1f 93       	push	r17
    2142:	cf 93       	push	r28
    2144:	df 93       	push	r29
    2146:	00 d0       	rcall	.+0      	; 0x2148 <follow_path+0x10>
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	8c 01       	movw	r16, r24
    214e:	fb 01       	movw	r30, r22
    2150:	7a 83       	std	Y+2, r23	; 0x02
    2152:	69 83       	std	Y+1, r22	; 0x01
    2154:	dc 01       	movw	r26, r24
    2156:	ed 90       	ld	r14, X+
    2158:	fc 90       	ld	r15, X
    215a:	80 81       	ld	r24, Z
    215c:	8f 32       	cpi	r24, 0x2F	; 47
    215e:	81 f0       	breq	.+32     	; 0x2180 <follow_path+0x48>
    2160:	8c 35       	cpi	r24, 0x5C	; 92
    2162:	71 f0       	breq	.+28     	; 0x2180 <follow_path+0x48>
    2164:	f7 01       	movw	r30, r14
    2166:	83 89       	ldd	r24, Z+19	; 0x13
    2168:	94 89       	ldd	r25, Z+20	; 0x14
    216a:	a5 89       	ldd	r26, Z+21	; 0x15
    216c:	b6 89       	ldd	r27, Z+22	; 0x16
    216e:	f8 01       	movw	r30, r16
    2170:	86 83       	std	Z+6, r24	; 0x06
    2172:	97 83       	std	Z+7, r25	; 0x07
    2174:	a0 87       	std	Z+8, r26	; 0x08
    2176:	b1 87       	std	Z+9, r27	; 0x09
    2178:	11 c0       	rjmp	.+34     	; 0x219c <follow_path+0x64>
    217a:	31 96       	adiw	r30, 0x01	; 1
    217c:	fa 83       	std	Y+2, r31	; 0x02
    217e:	e9 83       	std	Y+1, r30	; 0x01
    2180:	e9 81       	ldd	r30, Y+1	; 0x01
    2182:	fa 81       	ldd	r31, Y+2	; 0x02
    2184:	80 81       	ld	r24, Z
    2186:	8f 32       	cpi	r24, 0x2F	; 47
    2188:	c1 f3       	breq	.-16     	; 0x217a <follow_path+0x42>
    218a:	8c 35       	cpi	r24, 0x5C	; 92
    218c:	b1 f3       	breq	.-20     	; 0x217a <follow_path+0x42>
    218e:	d8 01       	movw	r26, r16
    2190:	16 96       	adiw	r26, 0x06	; 6
    2192:	1d 92       	st	X+, r1
    2194:	1d 92       	st	X+, r1
    2196:	1d 92       	st	X+, r1
    2198:	1c 92       	st	X, r1
    219a:	19 97       	sbiw	r26, 0x09	; 9
    219c:	e9 81       	ldd	r30, Y+1	; 0x01
    219e:	fa 81       	ldd	r31, Y+2	; 0x02
    21a0:	80 81       	ld	r24, Z
    21a2:	80 32       	cpi	r24, 0x20	; 32
    21a4:	50 f4       	brcc	.+20     	; 0x21ba <follow_path+0x82>
    21a6:	80 e8       	ldi	r24, 0x80	; 128
    21a8:	f8 01       	movw	r30, r16
    21aa:	87 a3       	std	Z+39, r24	; 0x27
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	50 e0       	ldi	r21, 0x00	; 0
    21b0:	ba 01       	movw	r22, r20
    21b2:	c8 01       	movw	r24, r16
    21b4:	c5 d9       	rcall	.-3190   	; 0x1540 <dir_sdi>
    21b6:	d8 2e       	mov	r13, r24
    21b8:	46 c0       	rjmp	.+140    	; 0x2246 <follow_path+0x10e>
    21ba:	be 01       	movw	r22, r28
    21bc:	6f 5f       	subi	r22, 0xFF	; 255
    21be:	7f 4f       	sbci	r23, 0xFF	; 255
    21c0:	c8 01       	movw	r24, r16
    21c2:	b4 de       	rcall	.-664    	; 0x1f2c <create_name>
    21c4:	d8 2e       	mov	r13, r24
    21c6:	81 11       	cpse	r24, r1
    21c8:	3e c0       	rjmp	.+124    	; 0x2246 <follow_path+0x10e>
    21ca:	c8 01       	movw	r24, r16
    21cc:	ea dd       	rcall	.-1068   	; 0x1da2 <dir_find>
    21ce:	d8 01       	movw	r26, r16
    21d0:	97 96       	adiw	r26, 0x27	; 39
    21d2:	9c 91       	ld	r25, X
    21d4:	97 97       	sbiw	r26, 0x27	; 39
    21d6:	88 23       	and	r24, r24
    21d8:	71 f0       	breq	.+28     	; 0x21f6 <follow_path+0xbe>
    21da:	84 30       	cpi	r24, 0x04	; 4
    21dc:	39 f5       	brne	.+78     	; 0x222c <follow_path+0xf4>
    21de:	95 ff       	sbrs	r25, 5
    21e0:	06 c0       	rjmp	.+12     	; 0x21ee <follow_path+0xb6>
    21e2:	92 ff       	sbrs	r25, 2
    21e4:	ea cf       	rjmp	.-44     	; 0x21ba <follow_path+0x82>
    21e6:	80 e8       	ldi	r24, 0x80	; 128
    21e8:	97 96       	adiw	r26, 0x27	; 39
    21ea:	8c 93       	st	X, r24
    21ec:	2c c0       	rjmp	.+88     	; 0x2246 <follow_path+0x10e>
    21ee:	92 ff       	sbrs	r25, 2
    21f0:	1f c0       	rjmp	.+62     	; 0x2230 <follow_path+0xf8>
    21f2:	d8 2e       	mov	r13, r24
    21f4:	28 c0       	rjmp	.+80     	; 0x2246 <follow_path+0x10e>
    21f6:	92 fd       	sbrc	r25, 2
    21f8:	20 c0       	rjmp	.+64     	; 0x223a <follow_path+0x102>
    21fa:	f8 01       	movw	r30, r16
    21fc:	84 81       	ldd	r24, Z+4	; 0x04
    21fe:	84 ff       	sbrs	r24, 4
    2200:	1e c0       	rjmp	.+60     	; 0x223e <follow_path+0x106>
    2202:	86 85       	ldd	r24, Z+14	; 0x0e
    2204:	97 85       	ldd	r25, Z+15	; 0x0f
    2206:	a0 89       	ldd	r26, Z+16	; 0x10
    2208:	b1 89       	ldd	r27, Z+17	; 0x11
    220a:	91 70       	andi	r25, 0x01	; 1
    220c:	b7 01       	movw	r22, r14
    220e:	6d 5c       	subi	r22, 0xCD	; 205
    2210:	7f 4f       	sbci	r23, 0xFF	; 255
    2212:	68 0f       	add	r22, r24
    2214:	79 1f       	adc	r23, r25
    2216:	c7 01       	movw	r24, r14
    2218:	0e 94 bd 03 	call	0x77a	; 0x77a <ld_clust>
    221c:	d8 01       	movw	r26, r16
    221e:	16 96       	adiw	r26, 0x06	; 6
    2220:	6d 93       	st	X+, r22
    2222:	7d 93       	st	X+, r23
    2224:	8d 93       	st	X+, r24
    2226:	9c 93       	st	X, r25
    2228:	19 97       	sbiw	r26, 0x09	; 9
    222a:	c7 cf       	rjmp	.-114    	; 0x21ba <follow_path+0x82>
    222c:	d8 2e       	mov	r13, r24
    222e:	0b c0       	rjmp	.+22     	; 0x2246 <follow_path+0x10e>
    2230:	0f 2e       	mov	r0, r31
    2232:	f5 e0       	ldi	r31, 0x05	; 5
    2234:	df 2e       	mov	r13, r31
    2236:	f0 2d       	mov	r31, r0
    2238:	06 c0       	rjmp	.+12     	; 0x2246 <follow_path+0x10e>
    223a:	d8 2e       	mov	r13, r24
    223c:	04 c0       	rjmp	.+8      	; 0x2246 <follow_path+0x10e>
    223e:	0f 2e       	mov	r0, r31
    2240:	f5 e0       	ldi	r31, 0x05	; 5
    2242:	df 2e       	mov	r13, r31
    2244:	f0 2d       	mov	r31, r0
    2246:	8d 2d       	mov	r24, r13
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	df 91       	pop	r29
    224e:	cf 91       	pop	r28
    2250:	1f 91       	pop	r17
    2252:	0f 91       	pop	r16
    2254:	ff 90       	pop	r15
    2256:	ef 90       	pop	r14
    2258:	df 90       	pop	r13
    225a:	08 95       	ret

0000225c <dir_register>:
    225c:	0f 93       	push	r16
    225e:	1f 93       	push	r17
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	ec 01       	movw	r28, r24
    2266:	08 81       	ld	r16, Y
    2268:	19 81       	ldd	r17, Y+1	; 0x01
    226a:	61 e0       	ldi	r22, 0x01	; 1
    226c:	70 e0       	ldi	r23, 0x00	; 0
    226e:	d7 dd       	rcall	.-1106   	; 0x1e1e <dir_alloc>
    2270:	81 11       	cpse	r24, r1
    2272:	1c c0       	rjmp	.+56     	; 0x22ac <dir_register+0x50>
    2274:	4e 89       	ldd	r20, Y+22	; 0x16
    2276:	5f 89       	ldd	r21, Y+23	; 0x17
    2278:	68 8d       	ldd	r22, Y+24	; 0x18
    227a:	79 8d       	ldd	r23, Y+25	; 0x19
    227c:	c8 01       	movw	r24, r16
    227e:	0e 94 cf 04 	call	0x99e	; 0x99e <move_window>
    2282:	81 11       	cpse	r24, r1
    2284:	13 c0       	rjmp	.+38     	; 0x22ac <dir_register+0x50>
    2286:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2288:	fb 8d       	ldd	r31, Y+27	; 0x1b
    228a:	90 e2       	ldi	r25, 0x20	; 32
    228c:	df 01       	movw	r26, r30
    228e:	1d 92       	st	X+, r1
    2290:	9a 95       	dec	r25
    2292:	e9 f7       	brne	.-6      	; 0x228e <dir_register+0x32>
    2294:	fe 01       	movw	r30, r28
    2296:	7c 96       	adiw	r30, 0x1c	; 28
    2298:	aa 8d       	ldd	r26, Y+26	; 0x1a
    229a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    229c:	9b e0       	ldi	r25, 0x0B	; 11
    229e:	01 90       	ld	r0, Z+
    22a0:	0d 92       	st	X+, r0
    22a2:	9a 95       	dec	r25
    22a4:	e1 f7       	brne	.-8      	; 0x229e <dir_register+0x42>
    22a6:	91 e0       	ldi	r25, 0x01	; 1
    22a8:	f8 01       	movw	r30, r16
    22aa:	93 83       	std	Z+3, r25	; 0x03
    22ac:	df 91       	pop	r29
    22ae:	cf 91       	pop	r28
    22b0:	1f 91       	pop	r17
    22b2:	0f 91       	pop	r16
    22b4:	08 95       	ret

000022b6 <sync_fs>:
    22b6:	cf 92       	push	r12
    22b8:	df 92       	push	r13
    22ba:	ff 92       	push	r15
    22bc:	0f 93       	push	r16
    22be:	1f 93       	push	r17
    22c0:	cf 93       	push	r28
    22c2:	df 93       	push	r29
    22c4:	ec 01       	movw	r28, r24
    22c6:	0e 94 77 04 	call	0x8ee	; 0x8ee <sync_window>
    22ca:	f8 2e       	mov	r15, r24
    22cc:	81 11       	cpse	r24, r1
    22ce:	5c c0       	rjmp	.+184    	; 0x2388 <sync_fs+0xd2>
    22d0:	88 81       	ld	r24, Y
    22d2:	83 30       	cpi	r24, 0x03	; 3
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <sync_fs+0x22>
    22d6:	4e c0       	rjmp	.+156    	; 0x2374 <sync_fs+0xbe>
    22d8:	8c 81       	ldd	r24, Y+4	; 0x04
    22da:	81 30       	cpi	r24, 0x01	; 1
    22dc:	09 f0       	breq	.+2      	; 0x22e0 <sync_fs+0x2a>
    22de:	4a c0       	rjmp	.+148    	; 0x2374 <sync_fs+0xbe>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	92 e0       	ldi	r25, 0x02	; 2
    22e4:	6e 01       	movw	r12, r28
    22e6:	23 e3       	ldi	r18, 0x33	; 51
    22e8:	c2 0e       	add	r12, r18
    22ea:	d1 1c       	adc	r13, r1
    22ec:	f6 01       	movw	r30, r12
    22ee:	9c 01       	movw	r18, r24
    22f0:	11 92       	st	Z+, r1
    22f2:	21 50       	subi	r18, 0x01	; 1
    22f4:	30 40       	sbci	r19, 0x00	; 0
    22f6:	e1 f7       	brne	.-8      	; 0x22f0 <sync_fs+0x3a>
    22f8:	65 e5       	ldi	r22, 0x55	; 85
    22fa:	7a ea       	ldi	r23, 0xAA	; 170
    22fc:	ce 01       	movw	r24, r28
    22fe:	8f 5c       	subi	r24, 0xCF	; 207
    2300:	9d 4f       	sbci	r25, 0xFD	; 253
    2302:	0e 94 55 03 	call	0x6aa	; 0x6aa <st_word>
    2306:	42 e5       	ldi	r20, 0x52	; 82
    2308:	52 e5       	ldi	r21, 0x52	; 82
    230a:	61 e6       	ldi	r22, 0x61	; 97
    230c:	71 e4       	ldi	r23, 0x41	; 65
    230e:	c6 01       	movw	r24, r12
    2310:	0e 94 59 03 	call	0x6b2	; 0x6b2 <st_dword>
    2314:	42 e7       	ldi	r20, 0x72	; 114
    2316:	52 e7       	ldi	r21, 0x72	; 114
    2318:	61 e4       	ldi	r22, 0x41	; 65
    231a:	71 e6       	ldi	r23, 0x61	; 97
    231c:	ce 01       	movw	r24, r28
    231e:	89 5e       	subi	r24, 0xE9	; 233
    2320:	9d 4f       	sbci	r25, 0xFD	; 253
    2322:	0e 94 59 03 	call	0x6b2	; 0x6b2 <st_dword>
    2326:	4f 85       	ldd	r20, Y+15	; 0x0f
    2328:	58 89       	ldd	r21, Y+16	; 0x10
    232a:	69 89       	ldd	r22, Y+17	; 0x11
    232c:	7a 89       	ldd	r23, Y+18	; 0x12
    232e:	ce 01       	movw	r24, r28
    2330:	85 5e       	subi	r24, 0xE5	; 229
    2332:	9d 4f       	sbci	r25, 0xFD	; 253
    2334:	0e 94 59 03 	call	0x6b2	; 0x6b2 <st_dword>
    2338:	4b 85       	ldd	r20, Y+11	; 0x0b
    233a:	5c 85       	ldd	r21, Y+12	; 0x0c
    233c:	6d 85       	ldd	r22, Y+13	; 0x0d
    233e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2340:	ce 01       	movw	r24, r28
    2342:	81 5e       	subi	r24, 0xE1	; 225
    2344:	9d 4f       	sbci	r25, 0xFD	; 253
    2346:	0e 94 59 03 	call	0x6b2	; 0x6b2 <st_dword>
    234a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    234c:	98 a1       	ldd	r25, Y+32	; 0x20
    234e:	a9 a1       	ldd	r26, Y+33	; 0x21
    2350:	ba a1       	ldd	r27, Y+34	; 0x22
    2352:	9c 01       	movw	r18, r24
    2354:	ad 01       	movw	r20, r26
    2356:	2f 5f       	subi	r18, 0xFF	; 255
    2358:	3f 4f       	sbci	r19, 0xFF	; 255
    235a:	4f 4f       	sbci	r20, 0xFF	; 255
    235c:	5f 4f       	sbci	r21, 0xFF	; 255
    235e:	2f a7       	std	Y+47, r18	; 0x2f
    2360:	38 ab       	std	Y+48, r19	; 0x30
    2362:	49 ab       	std	Y+49, r20	; 0x31
    2364:	5a ab       	std	Y+50, r21	; 0x32
    2366:	01 e0       	ldi	r16, 0x01	; 1
    2368:	10 e0       	ldi	r17, 0x00	; 0
    236a:	b6 01       	movw	r22, r12
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	0e 94 14 03 	call	0x628	; 0x628 <disk_write>
    2372:	1c 82       	std	Y+4, r1	; 0x04
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	50 e0       	ldi	r21, 0x00	; 0
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	0e 94 24 03 	call	0x648	; 0x648 <disk_ioctl>
    2380:	88 23       	and	r24, r24
    2382:	11 f0       	breq	.+4      	; 0x2388 <sync_fs+0xd2>
    2384:	ff 24       	eor	r15, r15
    2386:	f3 94       	inc	r15
    2388:	8f 2d       	mov	r24, r15
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	1f 91       	pop	r17
    2390:	0f 91       	pop	r16
    2392:	ff 90       	pop	r15
    2394:	df 90       	pop	r13
    2396:	cf 90       	pop	r12
    2398:	08 95       	ret

0000239a <f_mount>:
    239a:	1f 93       	push	r17
    239c:	cf 93       	push	r28
    239e:	df 93       	push	r29
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <f_mount+0x8>
    23a2:	00 d0       	rcall	.+0      	; 0x23a4 <f_mount+0xa>
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <f_mount+0xc>
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
    23aa:	9c 83       	std	Y+4, r25	; 0x04
    23ac:	8b 83       	std	Y+3, r24	; 0x03
    23ae:	7e 83       	std	Y+6, r23	; 0x06
    23b0:	6d 83       	std	Y+5, r22	; 0x05
    23b2:	14 2f       	mov	r17, r20
    23b4:	7a 83       	std	Y+2, r23	; 0x02
    23b6:	69 83       	std	Y+1, r22	; 0x01
    23b8:	ce 01       	movw	r24, r28
    23ba:	01 96       	adiw	r24, 0x01	; 1
    23bc:	0e 94 0b 04 	call	0x816	; 0x816 <get_ldnumber>
    23c0:	99 23       	and	r25, r25
    23c2:	24 f1       	brlt	.+72     	; 0x240c <f_mount+0x72>
    23c4:	fc 01       	movw	r30, r24
    23c6:	ee 0f       	add	r30, r30
    23c8:	ff 1f       	adc	r31, r31
    23ca:	e8 56       	subi	r30, 0x68	; 104
    23cc:	f9 4f       	sbci	r31, 0xF9	; 249
    23ce:	01 90       	ld	r0, Z+
    23d0:	f0 81       	ld	r31, Z
    23d2:	e0 2d       	mov	r30, r0
    23d4:	30 97       	sbiw	r30, 0x00	; 0
    23d6:	09 f0       	breq	.+2      	; 0x23da <f_mount+0x40>
    23d8:	10 82       	st	Z, r1
    23da:	eb 81       	ldd	r30, Y+3	; 0x03
    23dc:	fc 81       	ldd	r31, Y+4	; 0x04
    23de:	30 97       	sbiw	r30, 0x00	; 0
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <f_mount+0x4a>
    23e2:	10 82       	st	Z, r1
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	fc 01       	movw	r30, r24
    23ea:	e8 56       	subi	r30, 0x68	; 104
    23ec:	f9 4f       	sbci	r31, 0xF9	; 249
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	9c 81       	ldd	r25, Y+4	; 0x04
    23f2:	91 83       	std	Z+1, r25	; 0x01
    23f4:	80 83       	st	Z, r24
    23f6:	11 23       	and	r17, r17
    23f8:	59 f0       	breq	.+22     	; 0x2410 <f_mount+0x76>
    23fa:	40 e0       	ldi	r20, 0x00	; 0
    23fc:	be 01       	movw	r22, r28
    23fe:	6d 5f       	subi	r22, 0xFD	; 253
    2400:	7f 4f       	sbci	r23, 0xFF	; 255
    2402:	ce 01       	movw	r24, r28
    2404:	05 96       	adiw	r24, 0x05	; 5
    2406:	0e 94 24 06 	call	0xc48	; 0xc48 <mount_volume>
    240a:	03 c0       	rjmp	.+6      	; 0x2412 <f_mount+0x78>
    240c:	8b e0       	ldi	r24, 0x0B	; 11
    240e:	01 c0       	rjmp	.+2      	; 0x2412 <f_mount+0x78>
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	26 96       	adiw	r28, 0x06	; 6
    2414:	0f b6       	in	r0, 0x3f	; 63
    2416:	f8 94       	cli
    2418:	de bf       	out	0x3e, r29	; 62
    241a:	0f be       	out	0x3f, r0	; 63
    241c:	cd bf       	out	0x3d, r28	; 61
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	1f 91       	pop	r17
    2424:	08 95       	ret

00002426 <f_open>:
    2426:	2f 92       	push	r2
    2428:	3f 92       	push	r3
    242a:	4f 92       	push	r4
    242c:	5f 92       	push	r5
    242e:	6f 92       	push	r6
    2430:	7f 92       	push	r7
    2432:	8f 92       	push	r8
    2434:	9f 92       	push	r9
    2436:	af 92       	push	r10
    2438:	bf 92       	push	r11
    243a:	cf 92       	push	r12
    243c:	df 92       	push	r13
    243e:	ef 92       	push	r14
    2440:	ff 92       	push	r15
    2442:	0f 93       	push	r16
    2444:	1f 93       	push	r17
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	ae 97       	sbiw	r28, 0x2e	; 46
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	cd bf       	out	0x3d, r28	; 61
    245a:	7c a7       	std	Y+44, r23	; 0x2c
    245c:	6b a7       	std	Y+43, r22	; 0x2b
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	09 f4       	brne	.+2      	; 0x2464 <f_open+0x3e>
    2462:	63 c1       	rjmp	.+710    	; 0x272a <f_open+0x304>
    2464:	04 2f       	mov	r16, r20
    2466:	9e a7       	std	Y+46, r25	; 0x2e
    2468:	8d a7       	std	Y+45, r24	; 0x2d
    246a:	84 2f       	mov	r24, r20
    246c:	8f 73       	andi	r24, 0x3F	; 63
    246e:	58 2e       	mov	r5, r24
    2470:	48 2f       	mov	r20, r24
    2472:	be 01       	movw	r22, r28
    2474:	67 5d       	subi	r22, 0xD7	; 215
    2476:	7f 4f       	sbci	r23, 0xFF	; 255
    2478:	ce 01       	movw	r24, r28
    247a:	8b 96       	adiw	r24, 0x2b	; 43
    247c:	0e 94 24 06 	call	0xc48	; 0xc48 <mount_volume>
    2480:	18 2f       	mov	r17, r24
    2482:	81 11       	cpse	r24, r1
    2484:	4a c1       	rjmp	.+660    	; 0x271a <f_open+0x2f4>
    2486:	89 a5       	ldd	r24, Y+41	; 0x29
    2488:	9a a5       	ldd	r25, Y+42	; 0x2a
    248a:	9a 83       	std	Y+2, r25	; 0x02
    248c:	89 83       	std	Y+1, r24	; 0x01
    248e:	6b a5       	ldd	r22, Y+43	; 0x2b
    2490:	7c a5       	ldd	r23, Y+44	; 0x2c
    2492:	ce 01       	movw	r24, r28
    2494:	01 96       	adiw	r24, 0x01	; 1
    2496:	50 de       	rcall	.-864    	; 0x2138 <follow_path>
    2498:	18 2f       	mov	r17, r24
    249a:	81 11       	cpse	r24, r1
    249c:	04 c0       	rjmp	.+8      	; 0x24a6 <f_open+0x80>
    249e:	88 a5       	ldd	r24, Y+40	; 0x28
    24a0:	88 23       	and	r24, r24
    24a2:	0c f4       	brge	.+2      	; 0x24a6 <f_open+0x80>
    24a4:	16 e0       	ldi	r17, 0x06	; 6
    24a6:	80 2f       	mov	r24, r16
    24a8:	8c 71       	andi	r24, 0x1C	; 28
    24aa:	09 f4       	brne	.+2      	; 0x24ae <f_open+0x88>
    24ac:	73 c0       	rjmp	.+230    	; 0x2594 <f_open+0x16e>
    24ae:	11 23       	and	r17, r17
    24b0:	51 f0       	breq	.+20     	; 0x24c6 <f_open+0xa0>
    24b2:	14 30       	cpi	r17, 0x04	; 4
    24b4:	21 f4       	brne	.+8      	; 0x24be <f_open+0x98>
    24b6:	ce 01       	movw	r24, r28
    24b8:	01 96       	adiw	r24, 0x01	; 1
    24ba:	d0 de       	rcall	.-608    	; 0x225c <dir_register>
    24bc:	18 2f       	mov	r17, r24
    24be:	e5 2d       	mov	r30, r5
    24c0:	e8 60       	ori	r30, 0x08	; 8
    24c2:	5e 2e       	mov	r5, r30
    24c4:	09 c0       	rjmp	.+18     	; 0x24d8 <f_open+0xb2>
    24c6:	8d 81       	ldd	r24, Y+5	; 0x05
    24c8:	81 71       	andi	r24, 0x11	; 17
    24ca:	19 f4       	brne	.+6      	; 0x24d2 <f_open+0xac>
    24cc:	02 fd       	sbrc	r16, 2
    24ce:	03 c0       	rjmp	.+6      	; 0x24d6 <f_open+0xb0>
    24d0:	03 c0       	rjmp	.+6      	; 0x24d8 <f_open+0xb2>
    24d2:	17 e0       	ldi	r17, 0x07	; 7
    24d4:	01 c0       	rjmp	.+2      	; 0x24d8 <f_open+0xb2>
    24d6:	18 e0       	ldi	r17, 0x08	; 8
    24d8:	11 11       	cpse	r17, r1
    24da:	69 c0       	rjmp	.+210    	; 0x25ae <f_open+0x188>
    24dc:	53 fe       	sbrs	r5, 3
    24de:	67 c0       	rjmp	.+206    	; 0x25ae <f_open+0x188>
    24e0:	0e 94 de 23 	call	0x47bc	; 0x47bc <get_fattime>
    24e4:	4b 01       	movw	r8, r22
    24e6:	5c 01       	movw	r10, r24
    24e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ec:	b5 01       	movw	r22, r10
    24ee:	a4 01       	movw	r20, r8
    24f0:	0e 96       	adiw	r24, 0x0e	; 14
    24f2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <st_dword>
    24f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24fa:	b5 01       	movw	r22, r10
    24fc:	a4 01       	movw	r20, r8
    24fe:	46 96       	adiw	r24, 0x16	; 22
    2500:	0e 94 59 03 	call	0x6b2	; 0x6b2 <st_dword>
    2504:	ab 8c       	ldd	r10, Y+27	; 0x1b
    2506:	bc 8c       	ldd	r11, Y+28	; 0x1c
    2508:	c9 a4       	ldd	r12, Y+41	; 0x29
    250a:	da a4       	ldd	r13, Y+42	; 0x2a
    250c:	b5 01       	movw	r22, r10
    250e:	c6 01       	movw	r24, r12
    2510:	0e 94 bd 03 	call	0x77a	; 0x77a <ld_clust>
    2514:	3b 01       	movw	r6, r22
    2516:	4c 01       	movw	r8, r24
    2518:	80 e2       	ldi	r24, 0x20	; 32
    251a:	f5 01       	movw	r30, r10
    251c:	83 87       	std	Z+11, r24	; 0x0b
    251e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2520:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	a9 01       	movw	r20, r18
    2528:	c6 01       	movw	r24, r12
    252a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <st_clust>
    252e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2530:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2532:	40 e0       	ldi	r20, 0x00	; 0
    2534:	50 e0       	ldi	r21, 0x00	; 0
    2536:	ba 01       	movw	r22, r20
    2538:	4c 96       	adiw	r24, 0x1c	; 28
    253a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <st_dword>
    253e:	e9 a5       	ldd	r30, Y+41	; 0x29
    2540:	fa a5       	ldd	r31, Y+42	; 0x2a
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	83 83       	std	Z+3, r24	; 0x03
    2546:	61 14       	cp	r6, r1
    2548:	71 04       	cpc	r7, r1
    254a:	81 04       	cpc	r8, r1
    254c:	91 04       	cpc	r9, r1
    254e:	79 f1       	breq	.+94     	; 0x25ae <f_open+0x188>
    2550:	c7 a4       	ldd	r12, Z+47	; 0x2f
    2552:	d0 a8       	ldd	r13, Z+48	; 0x30
    2554:	e1 a8       	ldd	r14, Z+49	; 0x31
    2556:	f2 a8       	ldd	r15, Z+50	; 0x32
    2558:	00 e0       	ldi	r16, 0x00	; 0
    255a:	10 e0       	ldi	r17, 0x00	; 0
    255c:	98 01       	movw	r18, r16
    255e:	b4 01       	movw	r22, r8
    2560:	a3 01       	movw	r20, r6
    2562:	ce 01       	movw	r24, r28
    2564:	01 96       	adiw	r24, 0x01	; 1
    2566:	1c da       	rcall	.-3016   	; 0x19a0 <remove_chain>
    2568:	18 2f       	mov	r17, r24
    256a:	81 11       	cpse	r24, r1
    256c:	20 c0       	rjmp	.+64     	; 0x25ae <f_open+0x188>
    256e:	b7 01       	movw	r22, r14
    2570:	a6 01       	movw	r20, r12
    2572:	89 a5       	ldd	r24, Y+41	; 0x29
    2574:	9a a5       	ldd	r25, Y+42	; 0x2a
    2576:	0e 94 cf 04 	call	0x99e	; 0x99e <move_window>
    257a:	18 2f       	mov	r17, r24
    257c:	e9 a5       	ldd	r30, Y+41	; 0x29
    257e:	fa a5       	ldd	r31, Y+42	; 0x2a
    2580:	d4 01       	movw	r26, r8
    2582:	c3 01       	movw	r24, r6
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	a1 09       	sbc	r26, r1
    2588:	b1 09       	sbc	r27, r1
    258a:	83 87       	std	Z+11, r24	; 0x0b
    258c:	94 87       	std	Z+12, r25	; 0x0c
    258e:	a5 87       	std	Z+13, r26	; 0x0d
    2590:	b6 87       	std	Z+14, r27	; 0x0e
    2592:	0d c0       	rjmp	.+26     	; 0x25ae <f_open+0x188>
    2594:	11 11       	cpse	r17, r1
    2596:	0b c0       	rjmp	.+22     	; 0x25ae <f_open+0x188>
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	84 fd       	sbrc	r24, 4
    259c:	05 c0       	rjmp	.+10     	; 0x25a8 <f_open+0x182>
    259e:	01 ff       	sbrs	r16, 1
    25a0:	06 c0       	rjmp	.+12     	; 0x25ae <f_open+0x188>
    25a2:	80 fd       	sbrc	r24, 0
    25a4:	03 c0       	rjmp	.+6      	; 0x25ac <f_open+0x186>
    25a6:	03 c0       	rjmp	.+6      	; 0x25ae <f_open+0x188>
    25a8:	14 e0       	ldi	r17, 0x04	; 4
    25aa:	01 c0       	rjmp	.+2      	; 0x25ae <f_open+0x188>
    25ac:	17 e0       	ldi	r17, 0x07	; 7
    25ae:	11 11       	cpse	r17, r1
    25b0:	15 c0       	rjmp	.+42     	; 0x25dc <f_open+0x1b6>
    25b2:	53 fe       	sbrs	r5, 3
    25b4:	03 c0       	rjmp	.+6      	; 0x25bc <f_open+0x196>
    25b6:	f5 2d       	mov	r31, r5
    25b8:	f0 64       	ori	r31, 0x40	; 64
    25ba:	5f 2e       	mov	r5, r31
    25bc:	e9 a5       	ldd	r30, Y+41	; 0x29
    25be:	fa a5       	ldd	r31, Y+42	; 0x2a
    25c0:	87 a5       	ldd	r24, Z+47	; 0x2f
    25c2:	90 a9       	ldd	r25, Z+48	; 0x30
    25c4:	a1 a9       	ldd	r26, Z+49	; 0x31
    25c6:	b2 a9       	ldd	r27, Z+50	; 0x32
    25c8:	ed a5       	ldd	r30, Y+45	; 0x2d
    25ca:	fe a5       	ldd	r31, Y+46	; 0x2e
    25cc:	84 8f       	std	Z+28, r24	; 0x1c
    25ce:	95 8f       	std	Z+29, r25	; 0x1d
    25d0:	a6 8f       	std	Z+30, r26	; 0x1e
    25d2:	b7 8f       	std	Z+31, r27	; 0x1f
    25d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25d8:	91 a3       	std	Z+33, r25	; 0x21
    25da:	80 a3       	std	Z+32, r24	; 0x20
    25dc:	11 11       	cpse	r17, r1
    25de:	9d c0       	rjmp	.+314    	; 0x271a <f_open+0x2f4>
    25e0:	6b 8c       	ldd	r6, Y+27	; 0x1b
    25e2:	7c 8c       	ldd	r7, Y+28	; 0x1c
    25e4:	29 a4       	ldd	r2, Y+41	; 0x29
    25e6:	3a a4       	ldd	r3, Y+42	; 0x2a
    25e8:	b3 01       	movw	r22, r6
    25ea:	c1 01       	movw	r24, r2
    25ec:	0e 94 bd 03 	call	0x77a	; 0x77a <ld_clust>
    25f0:	4b 01       	movw	r8, r22
    25f2:	5c 01       	movw	r10, r24
    25f4:	ed a5       	ldd	r30, Y+45	; 0x2d
    25f6:	fe a5       	ldd	r31, Y+46	; 0x2e
    25f8:	66 83       	std	Z+6, r22	; 0x06
    25fa:	77 83       	std	Z+7, r23	; 0x07
    25fc:	80 87       	std	Z+8, r24	; 0x08
    25fe:	91 87       	std	Z+9, r25	; 0x09
    2600:	c3 01       	movw	r24, r6
    2602:	4c 96       	adiw	r24, 0x1c	; 28
    2604:	0e 94 3a 03 	call	0x674	; 0x674 <ld_dword>
    2608:	6b 01       	movw	r12, r22
    260a:	7c 01       	movw	r14, r24
    260c:	ed a5       	ldd	r30, Y+45	; 0x2d
    260e:	fe a5       	ldd	r31, Y+46	; 0x2e
    2610:	62 87       	std	Z+10, r22	; 0x0a
    2612:	73 87       	std	Z+11, r23	; 0x0b
    2614:	84 87       	std	Z+12, r24	; 0x0c
    2616:	95 87       	std	Z+13, r25	; 0x0d
    2618:	31 82       	std	Z+1, r3	; 0x01
    261a:	20 82       	st	Z, r2
    261c:	f1 01       	movw	r30, r2
    261e:	85 81       	ldd	r24, Z+5	; 0x05
    2620:	96 81       	ldd	r25, Z+6	; 0x06
    2622:	ed a5       	ldd	r30, Y+45	; 0x2d
    2624:	fe a5       	ldd	r31, Y+46	; 0x2e
    2626:	93 83       	std	Z+3, r25	; 0x03
    2628:	82 83       	std	Z+2, r24	; 0x02
    262a:	56 86       	std	Z+14, r5	; 0x0e
    262c:	17 86       	std	Z+15, r1	; 0x0f
    262e:	10 8e       	std	Z+24, r1	; 0x18
    2630:	11 8e       	std	Z+25, r1	; 0x19
    2632:	12 8e       	std	Z+26, r1	; 0x1a
    2634:	13 8e       	std	Z+27, r1	; 0x1b
    2636:	10 8a       	std	Z+16, r1	; 0x10
    2638:	11 8a       	std	Z+17, r1	; 0x11
    263a:	12 8a       	std	Z+18, r1	; 0x12
    263c:	13 8a       	std	Z+19, r1	; 0x13
    263e:	55 fe       	sbrs	r5, 5
    2640:	6c c0       	rjmp	.+216    	; 0x271a <f_open+0x2f4>
    2642:	c1 14       	cp	r12, r1
    2644:	d1 04       	cpc	r13, r1
    2646:	e1 04       	cpc	r14, r1
    2648:	f1 04       	cpc	r15, r1
    264a:	09 f4       	brne	.+2      	; 0x264e <f_open+0x228>
    264c:	66 c0       	rjmp	.+204    	; 0x271a <f_open+0x2f4>
    264e:	c0 8a       	std	Z+16, r12	; 0x10
    2650:	d1 8a       	std	Z+17, r13	; 0x11
    2652:	e2 8a       	std	Z+18, r14	; 0x12
    2654:	f3 8a       	std	Z+19, r15	; 0x13
    2656:	f1 01       	movw	r30, r2
    2658:	41 84       	ldd	r4, Z+9	; 0x09
    265a:	52 84       	ldd	r5, Z+10	; 0x0a
    265c:	61 2c       	mov	r6, r1
    265e:	71 2c       	mov	r7, r1
    2660:	03 2e       	mov	r0, r19
    2662:	39 e0       	ldi	r19, 0x09	; 9
    2664:	44 0c       	add	r4, r4
    2666:	55 1c       	adc	r5, r5
    2668:	66 1c       	adc	r6, r6
    266a:	77 1c       	adc	r7, r7
    266c:	3a 95       	dec	r19
    266e:	d1 f7       	brne	.-12     	; 0x2664 <f_open+0x23e>
    2670:	30 2d       	mov	r19, r0
    2672:	19 c0       	rjmp	.+50     	; 0x26a6 <f_open+0x280>
    2674:	b5 01       	movw	r22, r10
    2676:	a4 01       	movw	r20, r8
    2678:	8d a5       	ldd	r24, Y+45	; 0x2d
    267a:	9e a5       	ldd	r25, Y+46	; 0x2e
    267c:	0e 94 c4 09 	call	0x1388	; 0x1388 <get_fat>
    2680:	4b 01       	movw	r8, r22
    2682:	5c 01       	movw	r10, r24
    2684:	62 30       	cpi	r22, 0x02	; 2
    2686:	71 05       	cpc	r23, r1
    2688:	81 05       	cpc	r24, r1
    268a:	91 05       	cpc	r25, r1
    268c:	08 f4       	brcc	.+2      	; 0x2690 <f_open+0x26a>
    268e:	12 e0       	ldi	r17, 0x02	; 2
    2690:	8f ef       	ldi	r24, 0xFF	; 255
    2692:	88 16       	cp	r8, r24
    2694:	98 06       	cpc	r9, r24
    2696:	a8 06       	cpc	r10, r24
    2698:	b8 06       	cpc	r11, r24
    269a:	09 f4       	brne	.+2      	; 0x269e <f_open+0x278>
    269c:	11 e0       	ldi	r17, 0x01	; 1
    269e:	c4 18       	sub	r12, r4
    26a0:	d5 08       	sbc	r13, r5
    26a2:	e6 08       	sbc	r14, r6
    26a4:	f7 08       	sbc	r15, r7
    26a6:	11 11       	cpse	r17, r1
    26a8:	05 c0       	rjmp	.+10     	; 0x26b4 <f_open+0x28e>
    26aa:	4c 14       	cp	r4, r12
    26ac:	5d 04       	cpc	r5, r13
    26ae:	6e 04       	cpc	r6, r14
    26b0:	7f 04       	cpc	r7, r15
    26b2:	00 f3       	brcs	.-64     	; 0x2674 <f_open+0x24e>
    26b4:	ed a5       	ldd	r30, Y+45	; 0x2d
    26b6:	fe a5       	ldd	r31, Y+46	; 0x2e
    26b8:	84 8a       	std	Z+20, r8	; 0x14
    26ba:	95 8a       	std	Z+21, r9	; 0x15
    26bc:	a6 8a       	std	Z+22, r10	; 0x16
    26be:	b7 8a       	std	Z+23, r11	; 0x17
    26c0:	11 11       	cpse	r17, r1
    26c2:	2b c0       	rjmp	.+86     	; 0x271a <f_open+0x2f4>
    26c4:	d7 01       	movw	r26, r14
    26c6:	c6 01       	movw	r24, r12
    26c8:	91 70       	andi	r25, 0x01	; 1
    26ca:	aa 27       	eor	r26, r26
    26cc:	bb 27       	eor	r27, r27
    26ce:	89 2b       	or	r24, r25
    26d0:	8a 2b       	or	r24, r26
    26d2:	8b 2b       	or	r24, r27
    26d4:	11 f1       	breq	.+68     	; 0x271a <f_open+0x2f4>
    26d6:	b5 01       	movw	r22, r10
    26d8:	a4 01       	movw	r20, r8
    26da:	89 a5       	ldd	r24, Y+41	; 0x29
    26dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    26de:	0e 94 8f 03 	call	0x71e	; 0x71e <clst2sect>
    26e2:	61 15       	cp	r22, r1
    26e4:	71 05       	cpc	r23, r1
    26e6:	81 05       	cpc	r24, r1
    26e8:	91 05       	cpc	r25, r1
    26ea:	b1 f0       	breq	.+44     	; 0x2718 <f_open+0x2f2>
    26ec:	0b 2e       	mov	r0, r27
    26ee:	b9 e0       	ldi	r27, 0x09	; 9
    26f0:	f6 94       	lsr	r15
    26f2:	e7 94       	ror	r14
    26f4:	d7 94       	ror	r13
    26f6:	c7 94       	ror	r12
    26f8:	ba 95       	dec	r27
    26fa:	d1 f7       	brne	.-12     	; 0x26f0 <f_open+0x2ca>
    26fc:	b0 2d       	mov	r27, r0
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	8c 0d       	add	r24, r12
    2704:	9d 1d       	adc	r25, r13
    2706:	ae 1d       	adc	r26, r14
    2708:	bf 1d       	adc	r27, r15
    270a:	ed a5       	ldd	r30, Y+45	; 0x2d
    270c:	fe a5       	ldd	r31, Y+46	; 0x2e
    270e:	80 8f       	std	Z+24, r24	; 0x18
    2710:	91 8f       	std	Z+25, r25	; 0x19
    2712:	a2 8f       	std	Z+26, r26	; 0x1a
    2714:	b3 8f       	std	Z+27, r27	; 0x1b
    2716:	01 c0       	rjmp	.+2      	; 0x271a <f_open+0x2f4>
    2718:	12 e0       	ldi	r17, 0x02	; 2
    271a:	11 23       	and	r17, r17
    271c:	41 f0       	breq	.+16     	; 0x272e <f_open+0x308>
    271e:	ed a5       	ldd	r30, Y+45	; 0x2d
    2720:	fe a5       	ldd	r31, Y+46	; 0x2e
    2722:	11 82       	std	Z+1, r1	; 0x01
    2724:	10 82       	st	Z, r1
    2726:	81 2f       	mov	r24, r17
    2728:	03 c0       	rjmp	.+6      	; 0x2730 <f_open+0x30a>
    272a:	89 e0       	ldi	r24, 0x09	; 9
    272c:	01 c0       	rjmp	.+2      	; 0x2730 <f_open+0x30a>
    272e:	81 2f       	mov	r24, r17
    2730:	ae 96       	adiw	r28, 0x2e	; 46
    2732:	0f b6       	in	r0, 0x3f	; 63
    2734:	f8 94       	cli
    2736:	de bf       	out	0x3e, r29	; 62
    2738:	0f be       	out	0x3f, r0	; 63
    273a:	cd bf       	out	0x3d, r28	; 61
    273c:	df 91       	pop	r29
    273e:	cf 91       	pop	r28
    2740:	1f 91       	pop	r17
    2742:	0f 91       	pop	r16
    2744:	ff 90       	pop	r15
    2746:	ef 90       	pop	r14
    2748:	df 90       	pop	r13
    274a:	cf 90       	pop	r12
    274c:	bf 90       	pop	r11
    274e:	af 90       	pop	r10
    2750:	9f 90       	pop	r9
    2752:	8f 90       	pop	r8
    2754:	7f 90       	pop	r7
    2756:	6f 90       	pop	r6
    2758:	5f 90       	pop	r5
    275a:	4f 90       	pop	r4
    275c:	3f 90       	pop	r3
    275e:	2f 90       	pop	r2
    2760:	08 95       	ret

00002762 <f_read>:
    2762:	2f 92       	push	r2
    2764:	3f 92       	push	r3
    2766:	4f 92       	push	r4
    2768:	5f 92       	push	r5
    276a:	6f 92       	push	r6
    276c:	7f 92       	push	r7
    276e:	8f 92       	push	r8
    2770:	9f 92       	push	r9
    2772:	af 92       	push	r10
    2774:	bf 92       	push	r11
    2776:	cf 92       	push	r12
    2778:	df 92       	push	r13
    277a:	ef 92       	push	r14
    277c:	ff 92       	push	r15
    277e:	0f 93       	push	r16
    2780:	1f 93       	push	r17
    2782:	cf 93       	push	r28
    2784:	df 93       	push	r29
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
    278a:	28 97       	sbiw	r28, 0x08	; 8
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	f8 94       	cli
    2790:	de bf       	out	0x3e, r29	; 62
    2792:	0f be       	out	0x3f, r0	; 63
    2794:	cd bf       	out	0x3d, r28	; 61
    2796:	7c 01       	movw	r14, r24
    2798:	3b 01       	movw	r6, r22
    279a:	5a 01       	movw	r10, r20
    279c:	49 01       	movw	r8, r18
    279e:	f9 01       	movw	r30, r18
    27a0:	11 82       	std	Z+1, r1	; 0x01
    27a2:	10 82       	st	Z, r1
    27a4:	8d 83       	std	Y+5, r24	; 0x05
    27a6:	fe 82       	std	Y+6, r15	; 0x06
    27a8:	be 01       	movw	r22, r28
    27aa:	6f 5f       	subi	r22, 0xFF	; 255
    27ac:	7f 4f       	sbci	r23, 0xFF	; 255
    27ae:	0e 94 43 04 	call	0x886	; 0x886 <validate>
    27b2:	81 11       	cpse	r24, r1
    27b4:	28 c1       	rjmp	.+592    	; 0x2a06 <f_read+0x2a4>
    27b6:	f7 01       	movw	r30, r14
    27b8:	87 85       	ldd	r24, Z+15	; 0x0f
    27ba:	81 11       	cpse	r24, r1
    27bc:	24 c1       	rjmp	.+584    	; 0x2a06 <f_read+0x2a4>
    27be:	86 85       	ldd	r24, Z+14	; 0x0e
    27c0:	80 ff       	sbrs	r24, 0
    27c2:	20 c1       	rjmp	.+576    	; 0x2a04 <f_read+0x2a2>
    27c4:	82 85       	ldd	r24, Z+10	; 0x0a
    27c6:	93 85       	ldd	r25, Z+11	; 0x0b
    27c8:	a4 85       	ldd	r26, Z+12	; 0x0c
    27ca:	b5 85       	ldd	r27, Z+13	; 0x0d
    27cc:	40 89       	ldd	r20, Z+16	; 0x10
    27ce:	51 89       	ldd	r21, Z+17	; 0x11
    27d0:	62 89       	ldd	r22, Z+18	; 0x12
    27d2:	73 89       	ldd	r23, Z+19	; 0x13
    27d4:	84 1b       	sub	r24, r20
    27d6:	95 0b       	sbc	r25, r21
    27d8:	a6 0b       	sbc	r26, r22
    27da:	b7 0b       	sbc	r27, r23
    27dc:	a5 01       	movw	r20, r10
    27de:	60 e0       	ldi	r22, 0x00	; 0
    27e0:	70 e0       	ldi	r23, 0x00	; 0
    27e2:	84 17       	cp	r24, r20
    27e4:	95 07       	cpc	r25, r21
    27e6:	a6 07       	cpc	r26, r22
    27e8:	b7 07       	cpc	r27, r23
    27ea:	08 f0       	brcs	.+2      	; 0x27ee <f_read+0x8c>
    27ec:	05 c1       	rjmp	.+522    	; 0x29f8 <f_read+0x296>
    27ee:	5c 01       	movw	r10, r24
    27f0:	03 c1       	rjmp	.+518    	; 0x29f8 <f_read+0x296>
    27f2:	f7 01       	movw	r30, r14
    27f4:	80 89       	ldd	r24, Z+16	; 0x10
    27f6:	91 89       	ldd	r25, Z+17	; 0x11
    27f8:	a2 89       	ldd	r26, Z+18	; 0x12
    27fa:	b3 89       	ldd	r27, Z+19	; 0x13
    27fc:	ac 01       	movw	r20, r24
    27fe:	bd 01       	movw	r22, r26
    2800:	51 70       	andi	r21, 0x01	; 1
    2802:	66 27       	eor	r22, r22
    2804:	77 27       	eor	r23, r23
    2806:	45 2b       	or	r20, r21
    2808:	46 2b       	or	r20, r22
    280a:	47 2b       	or	r20, r23
    280c:	09 f0       	breq	.+2      	; 0x2810 <f_read+0xae>
    280e:	ac c0       	rjmp	.+344    	; 0x2968 <f_read+0x206>
    2810:	e9 81       	ldd	r30, Y+1	; 0x01
    2812:	fa 81       	ldd	r31, Y+2	; 0x02
    2814:	01 85       	ldd	r16, Z+9	; 0x09
    2816:	12 85       	ldd	r17, Z+10	; 0x0a
    2818:	01 50       	subi	r16, 0x01	; 1
    281a:	11 09       	sbc	r17, r1
    281c:	ac 01       	movw	r20, r24
    281e:	bd 01       	movw	r22, r26
    2820:	03 2e       	mov	r0, r19
    2822:	39 e0       	ldi	r19, 0x09	; 9
    2824:	76 95       	lsr	r23
    2826:	67 95       	ror	r22
    2828:	57 95       	ror	r21
    282a:	47 95       	ror	r20
    282c:	3a 95       	dec	r19
    282e:	d1 f7       	brne	.-12     	; 0x2824 <f_read+0xc2>
    2830:	30 2d       	mov	r19, r0
    2832:	04 23       	and	r16, r20
    2834:	15 23       	and	r17, r21
    2836:	01 15       	cp	r16, r1
    2838:	11 05       	cpc	r17, r1
    283a:	59 f5       	brne	.+86     	; 0x2892 <f_read+0x130>
    283c:	89 2b       	or	r24, r25
    283e:	8a 2b       	or	r24, r26
    2840:	8b 2b       	or	r24, r27
    2842:	31 f4       	brne	.+12     	; 0x2850 <f_read+0xee>
    2844:	f7 01       	movw	r30, r14
    2846:	66 81       	ldd	r22, Z+6	; 0x06
    2848:	77 81       	ldd	r23, Z+7	; 0x07
    284a:	80 85       	ldd	r24, Z+8	; 0x08
    284c:	91 85       	ldd	r25, Z+9	; 0x09
    284e:	09 c0       	rjmp	.+18     	; 0x2862 <f_read+0x100>
    2850:	f7 01       	movw	r30, r14
    2852:	44 89       	ldd	r20, Z+20	; 0x14
    2854:	55 89       	ldd	r21, Z+21	; 0x15
    2856:	66 89       	ldd	r22, Z+22	; 0x16
    2858:	77 89       	ldd	r23, Z+23	; 0x17
    285a:	8d 81       	ldd	r24, Y+5	; 0x05
    285c:	9e 81       	ldd	r25, Y+6	; 0x06
    285e:	0e 94 c4 09 	call	0x1388	; 0x1388 <get_fat>
    2862:	62 30       	cpi	r22, 0x02	; 2
    2864:	71 05       	cpc	r23, r1
    2866:	81 05       	cpc	r24, r1
    2868:	91 05       	cpc	r25, r1
    286a:	20 f4       	brcc	.+8      	; 0x2874 <f_read+0x112>
    286c:	82 e0       	ldi	r24, 0x02	; 2
    286e:	f7 01       	movw	r30, r14
    2870:	87 87       	std	Z+15, r24	; 0x0f
    2872:	c9 c0       	rjmp	.+402    	; 0x2a06 <f_read+0x2a4>
    2874:	6f 3f       	cpi	r22, 0xFF	; 255
    2876:	ff ef       	ldi	r31, 0xFF	; 255
    2878:	7f 07       	cpc	r23, r31
    287a:	8f 07       	cpc	r24, r31
    287c:	9f 07       	cpc	r25, r31
    287e:	21 f4       	brne	.+8      	; 0x2888 <f_read+0x126>
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	f7 01       	movw	r30, r14
    2884:	87 87       	std	Z+15, r24	; 0x0f
    2886:	bf c0       	rjmp	.+382    	; 0x2a06 <f_read+0x2a4>
    2888:	f7 01       	movw	r30, r14
    288a:	64 8b       	std	Z+20, r22	; 0x14
    288c:	75 8b       	std	Z+21, r23	; 0x15
    288e:	86 8b       	std	Z+22, r24	; 0x16
    2890:	97 8b       	std	Z+23, r25	; 0x17
    2892:	f7 01       	movw	r30, r14
    2894:	44 89       	ldd	r20, Z+20	; 0x14
    2896:	55 89       	ldd	r21, Z+21	; 0x15
    2898:	66 89       	ldd	r22, Z+22	; 0x16
    289a:	77 89       	ldd	r23, Z+23	; 0x17
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	9c 83       	std	Y+4, r25	; 0x04
    28a2:	8b 83       	std	Y+3, r24	; 0x03
    28a4:	0e 94 8f 03 	call	0x71e	; 0x71e <clst2sect>
    28a8:	61 15       	cp	r22, r1
    28aa:	71 05       	cpc	r23, r1
    28ac:	81 05       	cpc	r24, r1
    28ae:	91 05       	cpc	r25, r1
    28b0:	21 f4       	brne	.+8      	; 0x28ba <f_read+0x158>
    28b2:	82 e0       	ldi	r24, 0x02	; 2
    28b4:	f7 01       	movw	r30, r14
    28b6:	87 87       	std	Z+15, r24	; 0x0f
    28b8:	a6 c0       	rjmp	.+332    	; 0x2a06 <f_read+0x2a4>
    28ba:	1b 01       	movw	r2, r22
    28bc:	2c 01       	movw	r4, r24
    28be:	20 0e       	add	r2, r16
    28c0:	31 1e       	adc	r3, r17
    28c2:	41 1c       	adc	r4, r1
    28c4:	51 1c       	adc	r5, r1
    28c6:	65 01       	movw	r12, r10
    28c8:	cd 2c       	mov	r12, r13
    28ca:	dd 24       	eor	r13, r13
    28cc:	c6 94       	lsr	r12
    28ce:	c1 14       	cp	r12, r1
    28d0:	d1 04       	cpc	r13, r1
    28d2:	09 f4       	brne	.+2      	; 0x28d6 <f_read+0x174>
    28d4:	44 c0       	rjmp	.+136    	; 0x295e <f_read+0x1fc>
    28d6:	eb 81       	ldd	r30, Y+3	; 0x03
    28d8:	fc 81       	ldd	r31, Y+4	; 0x04
    28da:	21 85       	ldd	r18, Z+9	; 0x09
    28dc:	32 85       	ldd	r19, Z+10	; 0x0a
    28de:	c8 01       	movw	r24, r16
    28e0:	8c 0d       	add	r24, r12
    28e2:	9d 1d       	adc	r25, r13
    28e4:	28 17       	cp	r18, r24
    28e6:	39 07       	cpc	r19, r25
    28e8:	18 f4       	brcc	.+6      	; 0x28f0 <f_read+0x18e>
    28ea:	69 01       	movw	r12, r18
    28ec:	c0 1a       	sub	r12, r16
    28ee:	d1 0a       	sbc	r13, r17
    28f0:	86 01       	movw	r16, r12
    28f2:	a2 01       	movw	r20, r4
    28f4:	91 01       	movw	r18, r2
    28f6:	b3 01       	movw	r22, r6
    28f8:	eb 81       	ldd	r30, Y+3	; 0x03
    28fa:	fc 81       	ldd	r31, Y+4	; 0x04
    28fc:	81 81       	ldd	r24, Z+1	; 0x01
    28fe:	0e 94 04 03 	call	0x608	; 0x608 <disk_read>
    2902:	88 23       	and	r24, r24
    2904:	21 f0       	breq	.+8      	; 0x290e <f_read+0x1ac>
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	f7 01       	movw	r30, r14
    290a:	87 87       	std	Z+15, r24	; 0x0f
    290c:	7c c0       	rjmp	.+248    	; 0x2a06 <f_read+0x2a4>
    290e:	e9 81       	ldd	r30, Y+1	; 0x01
    2910:	fa 81       	ldd	r31, Y+2	; 0x02
    2912:	83 81       	ldd	r24, Z+3	; 0x03
    2914:	88 23       	and	r24, r24
    2916:	f9 f0       	breq	.+62     	; 0x2956 <f_read+0x1f4>
    2918:	87 a5       	ldd	r24, Z+47	; 0x2f
    291a:	90 a9       	ldd	r25, Z+48	; 0x30
    291c:	a1 a9       	ldd	r26, Z+49	; 0x31
    291e:	b2 a9       	ldd	r27, Z+50	; 0x32
    2920:	82 19       	sub	r24, r2
    2922:	93 09       	sbc	r25, r3
    2924:	a4 09       	sbc	r26, r4
    2926:	b5 09       	sbc	r27, r5
    2928:	a6 01       	movw	r20, r12
    292a:	60 e0       	ldi	r22, 0x00	; 0
    292c:	70 e0       	ldi	r23, 0x00	; 0
    292e:	84 17       	cp	r24, r20
    2930:	95 07       	cpc	r25, r21
    2932:	a6 07       	cpc	r26, r22
    2934:	b7 07       	cpc	r27, r23
    2936:	78 f4       	brcc	.+30     	; 0x2956 <f_read+0x1f4>
    2938:	f3 96       	adiw	r30, 0x33	; 51
    293a:	28 2f       	mov	r18, r24
    293c:	22 0f       	add	r18, r18
    293e:	28 87       	std	Y+8, r18	; 0x08
    2940:	1f 82       	std	Y+7, r1	; 0x07
    2942:	af 81       	ldd	r26, Y+7	; 0x07
    2944:	b8 85       	ldd	r27, Y+8	; 0x08
    2946:	a6 0d       	add	r26, r6
    2948:	b7 1d       	adc	r27, r7
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	92 e0       	ldi	r25, 0x02	; 2
    294e:	01 90       	ld	r0, Z+
    2950:	0d 92       	st	X+, r0
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	e1 f7       	brne	.-8      	; 0x294e <f_read+0x1ec>
    2956:	dc 2c       	mov	r13, r12
    2958:	cc 24       	eor	r12, r12
    295a:	dd 0c       	add	r13, r13
    295c:	35 c0       	rjmp	.+106    	; 0x29c8 <f_read+0x266>
    295e:	f7 01       	movw	r30, r14
    2960:	20 8e       	std	Z+24, r2	; 0x18
    2962:	31 8e       	std	Z+25, r3	; 0x19
    2964:	42 8e       	std	Z+26, r4	; 0x1a
    2966:	53 8e       	std	Z+27, r5	; 0x1b
    2968:	f7 01       	movw	r30, r14
    296a:	80 89       	ldd	r24, Z+16	; 0x10
    296c:	91 89       	ldd	r25, Z+17	; 0x11
    296e:	a2 89       	ldd	r26, Z+18	; 0x12
    2970:	b3 89       	ldd	r27, Z+19	; 0x13
    2972:	91 70       	andi	r25, 0x01	; 1
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	32 e0       	ldi	r19, 0x02	; 2
    2978:	69 01       	movw	r12, r18
    297a:	c8 1a       	sub	r12, r24
    297c:	d9 0a       	sbc	r13, r25
    297e:	ac 14       	cp	r10, r12
    2980:	bd 04       	cpc	r11, r13
    2982:	08 f4       	brcc	.+2      	; 0x2986 <f_read+0x224>
    2984:	65 01       	movw	r12, r10
    2986:	f7 01       	movw	r30, r14
    2988:	40 8d       	ldd	r20, Z+24	; 0x18
    298a:	51 8d       	ldd	r21, Z+25	; 0x19
    298c:	62 8d       	ldd	r22, Z+26	; 0x1a
    298e:	73 8d       	ldd	r23, Z+27	; 0x1b
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	9a 81       	ldd	r25, Y+2	; 0x02
    2994:	0e 94 cf 04 	call	0x99e	; 0x99e <move_window>
    2998:	88 23       	and	r24, r24
    299a:	21 f0       	breq	.+8      	; 0x29a4 <f_read+0x242>
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	f7 01       	movw	r30, r14
    29a0:	87 87       	std	Z+15, r24	; 0x0f
    29a2:	31 c0       	rjmp	.+98     	; 0x2a06 <f_read+0x2a4>
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	9a 81       	ldd	r25, Y+2	; 0x02
    29a8:	9c 01       	movw	r18, r24
    29aa:	2d 5c       	subi	r18, 0xCD	; 205
    29ac:	3f 4f       	sbci	r19, 0xFF	; 255
    29ae:	f7 01       	movw	r30, r14
    29b0:	80 89       	ldd	r24, Z+16	; 0x10
    29b2:	91 89       	ldd	r25, Z+17	; 0x11
    29b4:	a2 89       	ldd	r26, Z+18	; 0x12
    29b6:	b3 89       	ldd	r27, Z+19	; 0x13
    29b8:	91 70       	andi	r25, 0x01	; 1
    29ba:	b9 01       	movw	r22, r18
    29bc:	68 0f       	add	r22, r24
    29be:	79 1f       	adc	r23, r25
    29c0:	a6 01       	movw	r20, r12
    29c2:	c3 01       	movw	r24, r6
    29c4:	0e 94 5c 33 	call	0x66b8	; 0x66b8 <memcpy>
    29c8:	ac 18       	sub	r10, r12
    29ca:	bd 08       	sbc	r11, r13
    29cc:	f4 01       	movw	r30, r8
    29ce:	80 81       	ld	r24, Z
    29d0:	91 81       	ldd	r25, Z+1	; 0x01
    29d2:	8c 0d       	add	r24, r12
    29d4:	9d 1d       	adc	r25, r13
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	80 83       	st	Z, r24
    29da:	6c 0c       	add	r6, r12
    29dc:	7d 1c       	adc	r7, r13
    29de:	f7 01       	movw	r30, r14
    29e0:	80 89       	ldd	r24, Z+16	; 0x10
    29e2:	91 89       	ldd	r25, Z+17	; 0x11
    29e4:	a2 89       	ldd	r26, Z+18	; 0x12
    29e6:	b3 89       	ldd	r27, Z+19	; 0x13
    29e8:	8c 0d       	add	r24, r12
    29ea:	9d 1d       	adc	r25, r13
    29ec:	a1 1d       	adc	r26, r1
    29ee:	b1 1d       	adc	r27, r1
    29f0:	80 8b       	std	Z+16, r24	; 0x10
    29f2:	91 8b       	std	Z+17, r25	; 0x11
    29f4:	a2 8b       	std	Z+18, r26	; 0x12
    29f6:	b3 8b       	std	Z+19, r27	; 0x13
    29f8:	a1 14       	cp	r10, r1
    29fa:	b1 04       	cpc	r11, r1
    29fc:	09 f0       	breq	.+2      	; 0x2a00 <f_read+0x29e>
    29fe:	f9 ce       	rjmp	.-526    	; 0x27f2 <f_read+0x90>
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	01 c0       	rjmp	.+2      	; 0x2a06 <f_read+0x2a4>
    2a04:	87 e0       	ldi	r24, 0x07	; 7
    2a06:	28 96       	adiw	r28, 0x08	; 8
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	f8 94       	cli
    2a0c:	de bf       	out	0x3e, r29	; 62
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	cd bf       	out	0x3d, r28	; 61
    2a12:	df 91       	pop	r29
    2a14:	cf 91       	pop	r28
    2a16:	1f 91       	pop	r17
    2a18:	0f 91       	pop	r16
    2a1a:	ff 90       	pop	r15
    2a1c:	ef 90       	pop	r14
    2a1e:	df 90       	pop	r13
    2a20:	cf 90       	pop	r12
    2a22:	bf 90       	pop	r11
    2a24:	af 90       	pop	r10
    2a26:	9f 90       	pop	r9
    2a28:	8f 90       	pop	r8
    2a2a:	7f 90       	pop	r7
    2a2c:	6f 90       	pop	r6
    2a2e:	5f 90       	pop	r5
    2a30:	4f 90       	pop	r4
    2a32:	3f 90       	pop	r3
    2a34:	2f 90       	pop	r2
    2a36:	08 95       	ret

00002a38 <f_write>:
    2a38:	2f 92       	push	r2
    2a3a:	3f 92       	push	r3
    2a3c:	4f 92       	push	r4
    2a3e:	5f 92       	push	r5
    2a40:	6f 92       	push	r6
    2a42:	7f 92       	push	r7
    2a44:	8f 92       	push	r8
    2a46:	9f 92       	push	r9
    2a48:	af 92       	push	r10
    2a4a:	bf 92       	push	r11
    2a4c:	cf 92       	push	r12
    2a4e:	df 92       	push	r13
    2a50:	ef 92       	push	r14
    2a52:	ff 92       	push	r15
    2a54:	0f 93       	push	r16
    2a56:	1f 93       	push	r17
    2a58:	cf 93       	push	r28
    2a5a:	df 93       	push	r29
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
    2a60:	28 97       	sbiw	r28, 0x08	; 8
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	de bf       	out	0x3e, r29	; 62
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	cd bf       	out	0x3d, r28	; 61
    2a6c:	7c 01       	movw	r14, r24
    2a6e:	3b 01       	movw	r6, r22
    2a70:	5a 01       	movw	r10, r20
    2a72:	49 01       	movw	r8, r18
    2a74:	f9 01       	movw	r30, r18
    2a76:	11 82       	std	Z+1, r1	; 0x01
    2a78:	10 82       	st	Z, r1
    2a7a:	8d 83       	std	Y+5, r24	; 0x05
    2a7c:	fe 82       	std	Y+6, r15	; 0x06
    2a7e:	be 01       	movw	r22, r28
    2a80:	6f 5f       	subi	r22, 0xFF	; 255
    2a82:	7f 4f       	sbci	r23, 0xFF	; 255
    2a84:	0e 94 43 04 	call	0x886	; 0x886 <validate>
    2a88:	81 11       	cpse	r24, r1
    2a8a:	94 c1       	rjmp	.+808    	; 0x2db4 <f_write+0x37c>
    2a8c:	f7 01       	movw	r30, r14
    2a8e:	87 85       	ldd	r24, Z+15	; 0x0f
    2a90:	81 11       	cpse	r24, r1
    2a92:	90 c1       	rjmp	.+800    	; 0x2db4 <f_write+0x37c>
    2a94:	86 85       	ldd	r24, Z+14	; 0x0e
    2a96:	81 ff       	sbrs	r24, 1
    2a98:	8c c1       	rjmp	.+792    	; 0x2db2 <f_write+0x37a>
    2a9a:	80 89       	ldd	r24, Z+16	; 0x10
    2a9c:	91 89       	ldd	r25, Z+17	; 0x11
    2a9e:	a2 89       	ldd	r26, Z+18	; 0x12
    2aa0:	b3 89       	ldd	r27, Z+19	; 0x13
    2aa2:	ac 01       	movw	r20, r24
    2aa4:	bd 01       	movw	r22, r26
    2aa6:	4a 0d       	add	r20, r10
    2aa8:	5b 1d       	adc	r21, r11
    2aaa:	61 1d       	adc	r22, r1
    2aac:	71 1d       	adc	r23, r1
    2aae:	48 17       	cp	r20, r24
    2ab0:	59 07       	cpc	r21, r25
    2ab2:	6a 07       	cpc	r22, r26
    2ab4:	7b 07       	cpc	r23, r27
    2ab6:	08 f0       	brcs	.+2      	; 0x2aba <f_write+0x82>
    2ab8:	72 c1       	rjmp	.+740    	; 0x2d9e <f_write+0x366>
    2aba:	5c 01       	movw	r10, r24
    2abc:	a0 94       	com	r10
    2abe:	b0 94       	com	r11
    2ac0:	6e c1       	rjmp	.+732    	; 0x2d9e <f_write+0x366>
    2ac2:	f7 01       	movw	r30, r14
    2ac4:	80 89       	ldd	r24, Z+16	; 0x10
    2ac6:	91 89       	ldd	r25, Z+17	; 0x11
    2ac8:	a2 89       	ldd	r26, Z+18	; 0x12
    2aca:	b3 89       	ldd	r27, Z+19	; 0x13
    2acc:	ac 01       	movw	r20, r24
    2ace:	bd 01       	movw	r22, r26
    2ad0:	51 70       	andi	r21, 0x01	; 1
    2ad2:	66 27       	eor	r22, r22
    2ad4:	77 27       	eor	r23, r23
    2ad6:	45 2b       	or	r20, r21
    2ad8:	46 2b       	or	r20, r22
    2ada:	47 2b       	or	r20, r23
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <f_write+0xa8>
    2ade:	04 c1       	rjmp	.+520    	; 0x2ce8 <f_write+0x2b0>
    2ae0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae4:	01 85       	ldd	r16, Z+9	; 0x09
    2ae6:	12 85       	ldd	r17, Z+10	; 0x0a
    2ae8:	01 50       	subi	r16, 0x01	; 1
    2aea:	11 09       	sbc	r17, r1
    2aec:	ac 01       	movw	r20, r24
    2aee:	bd 01       	movw	r22, r26
    2af0:	03 2e       	mov	r0, r19
    2af2:	39 e0       	ldi	r19, 0x09	; 9
    2af4:	76 95       	lsr	r23
    2af6:	67 95       	ror	r22
    2af8:	57 95       	ror	r21
    2afa:	47 95       	ror	r20
    2afc:	3a 95       	dec	r19
    2afe:	d1 f7       	brne	.-12     	; 0x2af4 <f_write+0xbc>
    2b00:	30 2d       	mov	r19, r0
    2b02:	04 23       	and	r16, r20
    2b04:	15 23       	and	r17, r21
    2b06:	01 15       	cp	r16, r1
    2b08:	11 05       	cpc	r17, r1
    2b0a:	09 f0       	breq	.+2      	; 0x2b0e <f_write+0xd6>
    2b0c:	49 c0       	rjmp	.+146    	; 0x2ba0 <f_write+0x168>
    2b0e:	89 2b       	or	r24, r25
    2b10:	8a 2b       	or	r24, r26
    2b12:	8b 2b       	or	r24, r27
    2b14:	91 f4       	brne	.+36     	; 0x2b3a <f_write+0x102>
    2b16:	f7 01       	movw	r30, r14
    2b18:	66 81       	ldd	r22, Z+6	; 0x06
    2b1a:	77 81       	ldd	r23, Z+7	; 0x07
    2b1c:	80 85       	ldd	r24, Z+8	; 0x08
    2b1e:	91 85       	ldd	r25, Z+9	; 0x09
    2b20:	61 15       	cp	r22, r1
    2b22:	71 05       	cpc	r23, r1
    2b24:	81 05       	cpc	r24, r1
    2b26:	91 05       	cpc	r25, r1
    2b28:	89 f4       	brne	.+34     	; 0x2b4c <f_write+0x114>
    2b2a:	40 e0       	ldi	r20, 0x00	; 0
    2b2c:	50 e0       	ldi	r21, 0x00	; 0
    2b2e:	ba 01       	movw	r22, r20
    2b30:	8d 81       	ldd	r24, Y+5	; 0x05
    2b32:	9e 81       	ldd	r25, Y+6	; 0x06
    2b34:	0e 94 84 0b 	call	0x1708	; 0x1708 <create_chain>
    2b38:	09 c0       	rjmp	.+18     	; 0x2b4c <f_write+0x114>
    2b3a:	f7 01       	movw	r30, r14
    2b3c:	44 89       	ldd	r20, Z+20	; 0x14
    2b3e:	55 89       	ldd	r21, Z+21	; 0x15
    2b40:	66 89       	ldd	r22, Z+22	; 0x16
    2b42:	77 89       	ldd	r23, Z+23	; 0x17
    2b44:	8d 81       	ldd	r24, Y+5	; 0x05
    2b46:	9e 81       	ldd	r25, Y+6	; 0x06
    2b48:	0e 94 84 0b 	call	0x1708	; 0x1708 <create_chain>
    2b4c:	61 15       	cp	r22, r1
    2b4e:	71 05       	cpc	r23, r1
    2b50:	81 05       	cpc	r24, r1
    2b52:	91 05       	cpc	r25, r1
    2b54:	09 f4       	brne	.+2      	; 0x2b58 <f_write+0x120>
    2b56:	27 c1       	rjmp	.+590    	; 0x2da6 <f_write+0x36e>
    2b58:	61 30       	cpi	r22, 0x01	; 1
    2b5a:	71 05       	cpc	r23, r1
    2b5c:	81 05       	cpc	r24, r1
    2b5e:	91 05       	cpc	r25, r1
    2b60:	21 f4       	brne	.+8      	; 0x2b6a <f_write+0x132>
    2b62:	82 e0       	ldi	r24, 0x02	; 2
    2b64:	f7 01       	movw	r30, r14
    2b66:	87 87       	std	Z+15, r24	; 0x0f
    2b68:	25 c1       	rjmp	.+586    	; 0x2db4 <f_write+0x37c>
    2b6a:	6f 3f       	cpi	r22, 0xFF	; 255
    2b6c:	ff ef       	ldi	r31, 0xFF	; 255
    2b6e:	7f 07       	cpc	r23, r31
    2b70:	8f 07       	cpc	r24, r31
    2b72:	9f 07       	cpc	r25, r31
    2b74:	21 f4       	brne	.+8      	; 0x2b7e <f_write+0x146>
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	f7 01       	movw	r30, r14
    2b7a:	87 87       	std	Z+15, r24	; 0x0f
    2b7c:	1b c1       	rjmp	.+566    	; 0x2db4 <f_write+0x37c>
    2b7e:	f7 01       	movw	r30, r14
    2b80:	64 8b       	std	Z+20, r22	; 0x14
    2b82:	75 8b       	std	Z+21, r23	; 0x15
    2b84:	86 8b       	std	Z+22, r24	; 0x16
    2b86:	97 8b       	std	Z+23, r25	; 0x17
    2b88:	26 81       	ldd	r18, Z+6	; 0x06
    2b8a:	37 81       	ldd	r19, Z+7	; 0x07
    2b8c:	40 85       	ldd	r20, Z+8	; 0x08
    2b8e:	51 85       	ldd	r21, Z+9	; 0x09
    2b90:	23 2b       	or	r18, r19
    2b92:	24 2b       	or	r18, r20
    2b94:	25 2b       	or	r18, r21
    2b96:	21 f4       	brne	.+8      	; 0x2ba0 <f_write+0x168>
    2b98:	66 83       	std	Z+6, r22	; 0x06
    2b9a:	77 83       	std	Z+7, r23	; 0x07
    2b9c:	80 87       	std	Z+8, r24	; 0x08
    2b9e:	91 87       	std	Z+9, r25	; 0x09
    2ba0:	29 81       	ldd	r18, Y+1	; 0x01
    2ba2:	3a 81       	ldd	r19, Y+2	; 0x02
    2ba4:	f9 01       	movw	r30, r18
    2ba6:	47 a5       	ldd	r20, Z+47	; 0x2f
    2ba8:	50 a9       	ldd	r21, Z+48	; 0x30
    2baa:	61 a9       	ldd	r22, Z+49	; 0x31
    2bac:	72 a9       	ldd	r23, Z+50	; 0x32
    2bae:	f7 01       	movw	r30, r14
    2bb0:	80 8d       	ldd	r24, Z+24	; 0x18
    2bb2:	91 8d       	ldd	r25, Z+25	; 0x19
    2bb4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2bb6:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2bb8:	48 17       	cp	r20, r24
    2bba:	59 07       	cpc	r21, r25
    2bbc:	6a 07       	cpc	r22, r26
    2bbe:	7b 07       	cpc	r23, r27
    2bc0:	49 f4       	brne	.+18     	; 0x2bd4 <f_write+0x19c>
    2bc2:	c9 01       	movw	r24, r18
    2bc4:	0e 94 77 04 	call	0x8ee	; 0x8ee <sync_window>
    2bc8:	88 23       	and	r24, r24
    2bca:	21 f0       	breq	.+8      	; 0x2bd4 <f_write+0x19c>
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	f7 01       	movw	r30, r14
    2bd0:	87 87       	std	Z+15, r24	; 0x0f
    2bd2:	f0 c0       	rjmp	.+480    	; 0x2db4 <f_write+0x37c>
    2bd4:	f7 01       	movw	r30, r14
    2bd6:	44 89       	ldd	r20, Z+20	; 0x14
    2bd8:	55 89       	ldd	r21, Z+21	; 0x15
    2bda:	66 89       	ldd	r22, Z+22	; 0x16
    2bdc:	77 89       	ldd	r23, Z+23	; 0x17
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	9a 81       	ldd	r25, Y+2	; 0x02
    2be2:	9c 83       	std	Y+4, r25	; 0x04
    2be4:	8b 83       	std	Y+3, r24	; 0x03
    2be6:	0e 94 8f 03 	call	0x71e	; 0x71e <clst2sect>
    2bea:	61 15       	cp	r22, r1
    2bec:	71 05       	cpc	r23, r1
    2bee:	81 05       	cpc	r24, r1
    2bf0:	91 05       	cpc	r25, r1
    2bf2:	21 f4       	brne	.+8      	; 0x2bfc <f_write+0x1c4>
    2bf4:	82 e0       	ldi	r24, 0x02	; 2
    2bf6:	f7 01       	movw	r30, r14
    2bf8:	87 87       	std	Z+15, r24	; 0x0f
    2bfa:	dc c0       	rjmp	.+440    	; 0x2db4 <f_write+0x37c>
    2bfc:	1b 01       	movw	r2, r22
    2bfe:	2c 01       	movw	r4, r24
    2c00:	20 0e       	add	r2, r16
    2c02:	31 1e       	adc	r3, r17
    2c04:	41 1c       	adc	r4, r1
    2c06:	51 1c       	adc	r5, r1
    2c08:	65 01       	movw	r12, r10
    2c0a:	cd 2c       	mov	r12, r13
    2c0c:	dd 24       	eor	r13, r13
    2c0e:	c6 94       	lsr	r12
    2c10:	c1 14       	cp	r12, r1
    2c12:	d1 04       	cpc	r13, r1
    2c14:	09 f4       	brne	.+2      	; 0x2c18 <f_write+0x1e0>
    2c16:	45 c0       	rjmp	.+138    	; 0x2ca2 <f_write+0x26a>
    2c18:	eb 81       	ldd	r30, Y+3	; 0x03
    2c1a:	fc 81       	ldd	r31, Y+4	; 0x04
    2c1c:	21 85       	ldd	r18, Z+9	; 0x09
    2c1e:	32 85       	ldd	r19, Z+10	; 0x0a
    2c20:	c8 01       	movw	r24, r16
    2c22:	8c 0d       	add	r24, r12
    2c24:	9d 1d       	adc	r25, r13
    2c26:	28 17       	cp	r18, r24
    2c28:	39 07       	cpc	r19, r25
    2c2a:	18 f4       	brcc	.+6      	; 0x2c32 <f_write+0x1fa>
    2c2c:	69 01       	movw	r12, r18
    2c2e:	c0 1a       	sub	r12, r16
    2c30:	d1 0a       	sbc	r13, r17
    2c32:	86 01       	movw	r16, r12
    2c34:	a2 01       	movw	r20, r4
    2c36:	91 01       	movw	r18, r2
    2c38:	b3 01       	movw	r22, r6
    2c3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2c3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2c3e:	81 81       	ldd	r24, Z+1	; 0x01
    2c40:	0e 94 14 03 	call	0x628	; 0x628 <disk_write>
    2c44:	88 23       	and	r24, r24
    2c46:	21 f0       	breq	.+8      	; 0x2c50 <f_write+0x218>
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	f7 01       	movw	r30, r14
    2c4c:	87 87       	std	Z+15, r24	; 0x0f
    2c4e:	b2 c0       	rjmp	.+356    	; 0x2db4 <f_write+0x37c>
    2c50:	29 81       	ldd	r18, Y+1	; 0x01
    2c52:	3a 81       	ldd	r19, Y+2	; 0x02
    2c54:	f9 01       	movw	r30, r18
    2c56:	87 a5       	ldd	r24, Z+47	; 0x2f
    2c58:	90 a9       	ldd	r25, Z+48	; 0x30
    2c5a:	a1 a9       	ldd	r26, Z+49	; 0x31
    2c5c:	b2 a9       	ldd	r27, Z+50	; 0x32
    2c5e:	82 19       	sub	r24, r2
    2c60:	93 09       	sbc	r25, r3
    2c62:	a4 09       	sbc	r26, r4
    2c64:	b5 09       	sbc	r27, r5
    2c66:	a6 01       	movw	r20, r12
    2c68:	60 e0       	ldi	r22, 0x00	; 0
    2c6a:	70 e0       	ldi	r23, 0x00	; 0
    2c6c:	84 17       	cp	r24, r20
    2c6e:	95 07       	cpc	r25, r21
    2c70:	a6 07       	cpc	r26, r22
    2c72:	b7 07       	cpc	r27, r23
    2c74:	90 f4       	brcc	.+36     	; 0x2c9a <f_write+0x262>
    2c76:	f8 2f       	mov	r31, r24
    2c78:	ff 0f       	add	r31, r31
    2c7a:	f8 87       	std	Y+8, r31	; 0x08
    2c7c:	1f 82       	std	Y+7, r1	; 0x07
    2c7e:	d9 01       	movw	r26, r18
    2c80:	d3 96       	adiw	r26, 0x33	; 51
    2c82:	ef 81       	ldd	r30, Y+7	; 0x07
    2c84:	f8 85       	ldd	r31, Y+8	; 0x08
    2c86:	e6 0d       	add	r30, r6
    2c88:	f7 1d       	adc	r31, r7
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	92 e0       	ldi	r25, 0x02	; 2
    2c8e:	01 90       	ld	r0, Z+
    2c90:	0d 92       	st	X+, r0
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	e1 f7       	brne	.-8      	; 0x2c8e <f_write+0x256>
    2c96:	f9 01       	movw	r30, r18
    2c98:	13 82       	std	Z+3, r1	; 0x03
    2c9a:	dc 2c       	mov	r13, r12
    2c9c:	cc 24       	eor	r12, r12
    2c9e:	dd 0c       	add	r13, r13
    2ca0:	56 c0       	rjmp	.+172    	; 0x2d4e <f_write+0x316>
    2ca2:	f7 01       	movw	r30, r14
    2ca4:	40 89       	ldd	r20, Z+16	; 0x10
    2ca6:	51 89       	ldd	r21, Z+17	; 0x11
    2ca8:	62 89       	ldd	r22, Z+18	; 0x12
    2caa:	73 89       	ldd	r23, Z+19	; 0x13
    2cac:	82 85       	ldd	r24, Z+10	; 0x0a
    2cae:	93 85       	ldd	r25, Z+11	; 0x0b
    2cb0:	a4 85       	ldd	r26, Z+12	; 0x0c
    2cb2:	b5 85       	ldd	r27, Z+13	; 0x0d
    2cb4:	48 17       	cp	r20, r24
    2cb6:	59 07       	cpc	r21, r25
    2cb8:	6a 07       	cpc	r22, r26
    2cba:	7b 07       	cpc	r23, r27
    2cbc:	80 f0       	brcs	.+32     	; 0x2cde <f_write+0x2a6>
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc2:	0e 94 77 04 	call	0x8ee	; 0x8ee <sync_window>
    2cc6:	88 23       	and	r24, r24
    2cc8:	21 f0       	breq	.+8      	; 0x2cd2 <f_write+0x29a>
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	f7 01       	movw	r30, r14
    2cce:	87 87       	std	Z+15, r24	; 0x0f
    2cd0:	71 c0       	rjmp	.+226    	; 0x2db4 <f_write+0x37c>
    2cd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd6:	27 a6       	std	Z+47, r2	; 0x2f
    2cd8:	30 aa       	std	Z+48, r3	; 0x30
    2cda:	41 aa       	std	Z+49, r4	; 0x31
    2cdc:	52 aa       	std	Z+50, r5	; 0x32
    2cde:	f7 01       	movw	r30, r14
    2ce0:	20 8e       	std	Z+24, r2	; 0x18
    2ce2:	31 8e       	std	Z+25, r3	; 0x19
    2ce4:	42 8e       	std	Z+26, r4	; 0x1a
    2ce6:	53 8e       	std	Z+27, r5	; 0x1b
    2ce8:	f7 01       	movw	r30, r14
    2cea:	80 89       	ldd	r24, Z+16	; 0x10
    2cec:	91 89       	ldd	r25, Z+17	; 0x11
    2cee:	a2 89       	ldd	r26, Z+18	; 0x12
    2cf0:	b3 89       	ldd	r27, Z+19	; 0x13
    2cf2:	91 70       	andi	r25, 0x01	; 1
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	32 e0       	ldi	r19, 0x02	; 2
    2cf8:	69 01       	movw	r12, r18
    2cfa:	c8 1a       	sub	r12, r24
    2cfc:	d9 0a       	sbc	r13, r25
    2cfe:	ac 14       	cp	r10, r12
    2d00:	bd 04       	cpc	r11, r13
    2d02:	08 f4       	brcc	.+2      	; 0x2d06 <f_write+0x2ce>
    2d04:	65 01       	movw	r12, r10
    2d06:	f7 01       	movw	r30, r14
    2d08:	40 8d       	ldd	r20, Z+24	; 0x18
    2d0a:	51 8d       	ldd	r21, Z+25	; 0x19
    2d0c:	62 8d       	ldd	r22, Z+26	; 0x1a
    2d0e:	73 8d       	ldd	r23, Z+27	; 0x1b
    2d10:	89 81       	ldd	r24, Y+1	; 0x01
    2d12:	9a 81       	ldd	r25, Y+2	; 0x02
    2d14:	0e 94 cf 04 	call	0x99e	; 0x99e <move_window>
    2d18:	88 23       	and	r24, r24
    2d1a:	21 f0       	breq	.+8      	; 0x2d24 <f_write+0x2ec>
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	f7 01       	movw	r30, r14
    2d20:	87 87       	std	Z+15, r24	; 0x0f
    2d22:	48 c0       	rjmp	.+144    	; 0x2db4 <f_write+0x37c>
    2d24:	29 81       	ldd	r18, Y+1	; 0x01
    2d26:	3a 81       	ldd	r19, Y+2	; 0x02
    2d28:	2d 5c       	subi	r18, 0xCD	; 205
    2d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2c:	f7 01       	movw	r30, r14
    2d2e:	40 89       	ldd	r20, Z+16	; 0x10
    2d30:	51 89       	ldd	r21, Z+17	; 0x11
    2d32:	62 89       	ldd	r22, Z+18	; 0x12
    2d34:	73 89       	ldd	r23, Z+19	; 0x13
    2d36:	ca 01       	movw	r24, r20
    2d38:	91 70       	andi	r25, 0x01	; 1
    2d3a:	a6 01       	movw	r20, r12
    2d3c:	b3 01       	movw	r22, r6
    2d3e:	82 0f       	add	r24, r18
    2d40:	93 1f       	adc	r25, r19
    2d42:	0e 94 5c 33 	call	0x66b8	; 0x66b8 <memcpy>
    2d46:	e9 81       	ldd	r30, Y+1	; 0x01
    2d48:	fa 81       	ldd	r31, Y+2	; 0x02
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
    2d4c:	83 83       	std	Z+3, r24	; 0x03
    2d4e:	ac 18       	sub	r10, r12
    2d50:	bd 08       	sbc	r11, r13
    2d52:	f4 01       	movw	r30, r8
    2d54:	80 81       	ld	r24, Z
    2d56:	91 81       	ldd	r25, Z+1	; 0x01
    2d58:	8c 0d       	add	r24, r12
    2d5a:	9d 1d       	adc	r25, r13
    2d5c:	91 83       	std	Z+1, r25	; 0x01
    2d5e:	80 83       	st	Z, r24
    2d60:	6c 0c       	add	r6, r12
    2d62:	7d 1c       	adc	r7, r13
    2d64:	f7 01       	movw	r30, r14
    2d66:	80 89       	ldd	r24, Z+16	; 0x10
    2d68:	91 89       	ldd	r25, Z+17	; 0x11
    2d6a:	a2 89       	ldd	r26, Z+18	; 0x12
    2d6c:	b3 89       	ldd	r27, Z+19	; 0x13
    2d6e:	8c 0d       	add	r24, r12
    2d70:	9d 1d       	adc	r25, r13
    2d72:	a1 1d       	adc	r26, r1
    2d74:	b1 1d       	adc	r27, r1
    2d76:	80 8b       	std	Z+16, r24	; 0x10
    2d78:	91 8b       	std	Z+17, r25	; 0x11
    2d7a:	a2 8b       	std	Z+18, r26	; 0x12
    2d7c:	b3 8b       	std	Z+19, r27	; 0x13
    2d7e:	42 85       	ldd	r20, Z+10	; 0x0a
    2d80:	53 85       	ldd	r21, Z+11	; 0x0b
    2d82:	64 85       	ldd	r22, Z+12	; 0x0c
    2d84:	75 85       	ldd	r23, Z+13	; 0x0d
    2d86:	84 17       	cp	r24, r20
    2d88:	95 07       	cpc	r25, r21
    2d8a:	a6 07       	cpc	r26, r22
    2d8c:	b7 07       	cpc	r27, r23
    2d8e:	10 f4       	brcc	.+4      	; 0x2d94 <f_write+0x35c>
    2d90:	db 01       	movw	r26, r22
    2d92:	ca 01       	movw	r24, r20
    2d94:	f7 01       	movw	r30, r14
    2d96:	82 87       	std	Z+10, r24	; 0x0a
    2d98:	93 87       	std	Z+11, r25	; 0x0b
    2d9a:	a4 87       	std	Z+12, r26	; 0x0c
    2d9c:	b5 87       	std	Z+13, r27	; 0x0d
    2d9e:	a1 14       	cp	r10, r1
    2da0:	b1 04       	cpc	r11, r1
    2da2:	09 f0       	breq	.+2      	; 0x2da6 <f_write+0x36e>
    2da4:	8e ce       	rjmp	.-740    	; 0x2ac2 <f_write+0x8a>
    2da6:	f7 01       	movw	r30, r14
    2da8:	86 85       	ldd	r24, Z+14	; 0x0e
    2daa:	80 64       	ori	r24, 0x40	; 64
    2dac:	86 87       	std	Z+14, r24	; 0x0e
    2dae:	80 e0       	ldi	r24, 0x00	; 0
    2db0:	01 c0       	rjmp	.+2      	; 0x2db4 <f_write+0x37c>
    2db2:	87 e0       	ldi	r24, 0x07	; 7
    2db4:	28 96       	adiw	r28, 0x08	; 8
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	f8 94       	cli
    2dba:	de bf       	out	0x3e, r29	; 62
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	cd bf       	out	0x3d, r28	; 61
    2dc0:	df 91       	pop	r29
    2dc2:	cf 91       	pop	r28
    2dc4:	1f 91       	pop	r17
    2dc6:	0f 91       	pop	r16
    2dc8:	ff 90       	pop	r15
    2dca:	ef 90       	pop	r14
    2dcc:	df 90       	pop	r13
    2dce:	cf 90       	pop	r12
    2dd0:	bf 90       	pop	r11
    2dd2:	af 90       	pop	r10
    2dd4:	9f 90       	pop	r9
    2dd6:	8f 90       	pop	r8
    2dd8:	7f 90       	pop	r7
    2dda:	6f 90       	pop	r6
    2ddc:	5f 90       	pop	r5
    2dde:	4f 90       	pop	r4
    2de0:	3f 90       	pop	r3
    2de2:	2f 90       	pop	r2
    2de4:	08 95       	ret

00002de6 <f_sync>:
    2de6:	8f 92       	push	r8
    2de8:	9f 92       	push	r9
    2dea:	af 92       	push	r10
    2dec:	bf 92       	push	r11
    2dee:	ef 92       	push	r14
    2df0:	ff 92       	push	r15
    2df2:	0f 93       	push	r16
    2df4:	1f 93       	push	r17
    2df6:	cf 93       	push	r28
    2df8:	df 93       	push	r29
    2dfa:	00 d0       	rcall	.+0      	; 0x2dfc <f_sync+0x16>
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	8c 01       	movw	r16, r24
    2e02:	be 01       	movw	r22, r28
    2e04:	6f 5f       	subi	r22, 0xFF	; 255
    2e06:	7f 4f       	sbci	r23, 0xFF	; 255
    2e08:	0e 94 43 04 	call	0x886	; 0x886 <validate>
    2e0c:	81 11       	cpse	r24, r1
    2e0e:	43 c0       	rjmp	.+134    	; 0x2e96 <f_sync+0xb0>
    2e10:	f8 01       	movw	r30, r16
    2e12:	96 85       	ldd	r25, Z+14	; 0x0e
    2e14:	96 ff       	sbrs	r25, 6
    2e16:	3f c0       	rjmp	.+126    	; 0x2e96 <f_sync+0xb0>
    2e18:	0e 94 de 23 	call	0x47bc	; 0x47bc <get_fattime>
    2e1c:	4b 01       	movw	r8, r22
    2e1e:	5c 01       	movw	r10, r24
    2e20:	f8 01       	movw	r30, r16
    2e22:	44 8d       	ldd	r20, Z+28	; 0x1c
    2e24:	55 8d       	ldd	r21, Z+29	; 0x1d
    2e26:	66 8d       	ldd	r22, Z+30	; 0x1e
    2e28:	77 8d       	ldd	r23, Z+31	; 0x1f
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2e:	0e 94 cf 04 	call	0x99e	; 0x99e <move_window>
    2e32:	81 11       	cpse	r24, r1
    2e34:	30 c0       	rjmp	.+96     	; 0x2e96 <f_sync+0xb0>
    2e36:	f8 01       	movw	r30, r16
    2e38:	e0 a0       	ldd	r14, Z+32	; 0x20
    2e3a:	f1 a0       	ldd	r15, Z+33	; 0x21
    2e3c:	f7 01       	movw	r30, r14
    2e3e:	83 85       	ldd	r24, Z+11	; 0x0b
    2e40:	80 62       	ori	r24, 0x20	; 32
    2e42:	83 87       	std	Z+11, r24	; 0x0b
    2e44:	f8 01       	movw	r30, r16
    2e46:	26 81       	ldd	r18, Z+6	; 0x06
    2e48:	37 81       	ldd	r19, Z+7	; 0x07
    2e4a:	40 85       	ldd	r20, Z+8	; 0x08
    2e4c:	51 85       	ldd	r21, Z+9	; 0x09
    2e4e:	b7 01       	movw	r22, r14
    2e50:	80 81       	ld	r24, Z
    2e52:	91 81       	ldd	r25, Z+1	; 0x01
    2e54:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <st_clust>
    2e58:	f8 01       	movw	r30, r16
    2e5a:	42 85       	ldd	r20, Z+10	; 0x0a
    2e5c:	53 85       	ldd	r21, Z+11	; 0x0b
    2e5e:	64 85       	ldd	r22, Z+12	; 0x0c
    2e60:	75 85       	ldd	r23, Z+13	; 0x0d
    2e62:	c7 01       	movw	r24, r14
    2e64:	4c 96       	adiw	r24, 0x1c	; 28
    2e66:	0e 94 59 03 	call	0x6b2	; 0x6b2 <st_dword>
    2e6a:	b5 01       	movw	r22, r10
    2e6c:	a4 01       	movw	r20, r8
    2e6e:	c7 01       	movw	r24, r14
    2e70:	46 96       	adiw	r24, 0x16	; 22
    2e72:	0e 94 59 03 	call	0x6b2	; 0x6b2 <st_dword>
    2e76:	60 e0       	ldi	r22, 0x00	; 0
    2e78:	70 e0       	ldi	r23, 0x00	; 0
    2e7a:	c7 01       	movw	r24, r14
    2e7c:	42 96       	adiw	r24, 0x12	; 18
    2e7e:	0e 94 55 03 	call	0x6aa	; 0x6aa <st_word>
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	9a 81       	ldd	r25, Y+2	; 0x02
    2e86:	21 e0       	ldi	r18, 0x01	; 1
    2e88:	fc 01       	movw	r30, r24
    2e8a:	23 83       	std	Z+3, r18	; 0x03
    2e8c:	14 da       	rcall	.-3032   	; 0x22b6 <sync_fs>
    2e8e:	f8 01       	movw	r30, r16
    2e90:	96 85       	ldd	r25, Z+14	; 0x0e
    2e92:	9f 7b       	andi	r25, 0xBF	; 191
    2e94:	96 87       	std	Z+14, r25	; 0x0e
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	df 91       	pop	r29
    2e9c:	cf 91       	pop	r28
    2e9e:	1f 91       	pop	r17
    2ea0:	0f 91       	pop	r16
    2ea2:	ff 90       	pop	r15
    2ea4:	ef 90       	pop	r14
    2ea6:	bf 90       	pop	r11
    2ea8:	af 90       	pop	r10
    2eaa:	9f 90       	pop	r9
    2eac:	8f 90       	pop	r8
    2eae:	08 95       	ret

00002eb0 <f_close>:
    2eb0:	0f 93       	push	r16
    2eb2:	1f 93       	push	r17
    2eb4:	cf 93       	push	r28
    2eb6:	df 93       	push	r29
    2eb8:	00 d0       	rcall	.+0      	; 0x2eba <f_close+0xa>
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	8c 01       	movw	r16, r24
    2ec0:	92 df       	rcall	.-220    	; 0x2de6 <f_sync>
    2ec2:	81 11       	cpse	r24, r1
    2ec4:	0b c0       	rjmp	.+22     	; 0x2edc <f_close+0x2c>
    2ec6:	be 01       	movw	r22, r28
    2ec8:	6f 5f       	subi	r22, 0xFF	; 255
    2eca:	7f 4f       	sbci	r23, 0xFF	; 255
    2ecc:	c8 01       	movw	r24, r16
    2ece:	0e 94 43 04 	call	0x886	; 0x886 <validate>
    2ed2:	81 11       	cpse	r24, r1
    2ed4:	03 c0       	rjmp	.+6      	; 0x2edc <f_close+0x2c>
    2ed6:	f8 01       	movw	r30, r16
    2ed8:	11 82       	std	Z+1, r1	; 0x01
    2eda:	10 82       	st	Z, r1
    2edc:	0f 90       	pop	r0
    2ede:	0f 90       	pop	r0
    2ee0:	df 91       	pop	r29
    2ee2:	cf 91       	pop	r28
    2ee4:	1f 91       	pop	r17
    2ee6:	0f 91       	pop	r16
    2ee8:	08 95       	ret

00002eea <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    2eea:	af 92       	push	r10
    2eec:	bf 92       	push	r11
    2eee:	cf 92       	push	r12
    2ef0:	df 92       	push	r13
    2ef2:	ef 92       	push	r14
    2ef4:	ff 92       	push	r15
    2ef6:	0f 93       	push	r16
    2ef8:	1f 93       	push	r17
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	c4 55       	subi	r28, 0x54	; 84
    2f04:	d1 09       	sbc	r29, r1
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	f8 94       	cli
    2f0a:	de bf       	out	0x3e, r29	; 62
    2f0c:	0f be       	out	0x3f, r0	; 63
    2f0e:	cd bf       	out	0x3d, r28	; 61
    2f10:	65 96       	adiw	r28, 0x15	; 21
    2f12:	9f af       	std	Y+63, r25	; 0x3f
    2f14:	8e af       	std	Y+62, r24	; 0x3e
    2f16:	65 97       	sbiw	r28, 0x15	; 21
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    2f18:	42 e0       	ldi	r20, 0x02	; 2
    2f1a:	be 01       	movw	r22, r28
    2f1c:	6f 5a       	subi	r22, 0xAF	; 175
    2f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f20:	ce 01       	movw	r24, r28
    2f22:	8d 5a       	subi	r24, 0xAD	; 173
    2f24:	9f 4f       	sbci	r25, 0xFF	; 255
    2f26:	0e 94 24 06 	call	0xc48	; 0xc48 <mount_volume>
    2f2a:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    2f2c:	81 11       	cpse	r24, r1
    2f2e:	7b c0       	rjmp	.+246    	; 0x3026 <f_unlink+0x13c>
		dj.obj.fs = fs;
    2f30:	63 96       	adiw	r28, 0x13	; 19
    2f32:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f34:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f36:	63 97       	sbiw	r28, 0x13	; 19
    2f38:	9a 83       	std	Y+2, r25	; 0x02
    2f3a:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
    2f3c:	65 96       	adiw	r28, 0x15	; 21
    2f3e:	6e ad       	ldd	r22, Y+62	; 0x3e
    2f40:	7f ad       	ldd	r23, Y+63	; 0x3f
    2f42:	65 97       	sbiw	r28, 0x15	; 21
    2f44:	ce 01       	movw	r24, r28
    2f46:	01 96       	adiw	r24, 0x01	; 1
    2f48:	f7 d8       	rcall	.-3602   	; 0x2138 <follow_path>
    2f4a:	18 2f       	mov	r17, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    2f4c:	81 11       	cpse	r24, r1
    2f4e:	03 c0       	rjmp	.+6      	; 0x2f56 <f_unlink+0x6c>
    2f50:	88 a5       	ldd	r24, Y+40	; 0x28
    2f52:	85 fd       	sbrc	r24, 5
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
    2f54:	16 e0       	ldi	r17, 0x06	; 6
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    2f56:	11 11       	cpse	r17, r1
    2f58:	66 c0       	rjmp	.+204    	; 0x3026 <f_unlink+0x13c>
			if (dj.fn[NSFLAG] & NS_NONAME) {
    2f5a:	88 a5       	ldd	r24, Y+40	; 0x28
    2f5c:	88 23       	and	r24, r24
    2f5e:	24 f0       	brlt	.+8      	; 0x2f68 <f_unlink+0x7e>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    2f60:	8d 81       	ldd	r24, Y+5	; 0x05
    2f62:	80 fd       	sbrc	r24, 0
    2f64:	03 c0       	rjmp	.+6      	; 0x2f6c <f_unlink+0x82>
    2f66:	03 c0       	rjmp	.+6      	; 0x2f6e <f_unlink+0x84>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    2f68:	16 e0       	ldi	r17, 0x06	; 6
    2f6a:	01 c0       	rjmp	.+2      	; 0x2f6e <f_unlink+0x84>
			} else {
				if (dj.obj.attr & AM_RDO) {
					res = FR_DENIED;		/* Cannot remove R/O object */
    2f6c:	17 e0       	ldi	r17, 0x07	; 7
				}
			}
			if (res == FR_OK) {
    2f6e:	11 11       	cpse	r17, r1
    2f70:	35 c0       	rjmp	.+106    	; 0x2fdc <f_unlink+0xf2>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    2f72:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2f74:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2f76:	63 96       	adiw	r28, 0x13	; 19
    2f78:	ae ac       	ldd	r10, Y+62	; 0x3e
    2f7a:	bf ac       	ldd	r11, Y+63	; 0x3f
    2f7c:	63 97       	sbiw	r28, 0x13	; 19
    2f7e:	c5 01       	movw	r24, r10
    2f80:	0e 94 bd 03 	call	0x77a	; 0x77a <ld_clust>
    2f84:	6b 01       	movw	r12, r22
    2f86:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    2f88:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8a:	84 ff       	sbrs	r24, 4
    2f8c:	2c c0       	rjmp	.+88     	; 0x2fe6 <f_unlink+0xfc>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {	 	/* Is it the current directory? */
    2f8e:	f5 01       	movw	r30, r10
    2f90:	83 89       	ldd	r24, Z+19	; 0x13
    2f92:	94 89       	ldd	r25, Z+20	; 0x14
    2f94:	a5 89       	ldd	r26, Z+21	; 0x15
    2f96:	b6 89       	ldd	r27, Z+22	; 0x16
    2f98:	c8 16       	cp	r12, r24
    2f9a:	d9 06       	cpc	r13, r25
    2f9c:	ea 06       	cpc	r14, r26
    2f9e:	fb 06       	cpc	r15, r27
    2fa0:	09 f1       	breq	.+66     	; 0x2fe4 <f_unlink+0xfa>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;			/* Open the sub-directory */
    2fa2:	ba a6       	std	Y+42, r11	; 0x2a
    2fa4:	a9 a6       	std	Y+41, r10	; 0x29
						sdj.obj.sclust = dclst;
    2fa6:	cf a6       	std	Y+47, r12	; 0x2f
    2fa8:	d8 aa       	std	Y+48, r13	; 0x30
    2faa:	e9 aa       	std	Y+49, r14	; 0x31
    2fac:	fa aa       	std	Y+50, r15	; 0x32
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    2fae:	40 e0       	ldi	r20, 0x00	; 0
    2fb0:	50 e0       	ldi	r21, 0x00	; 0
    2fb2:	ba 01       	movw	r22, r20
    2fb4:	ce 01       	movw	r24, r28
    2fb6:	89 96       	adiw	r24, 0x29	; 41
    2fb8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <dir_sdi>
    2fbc:	18 2f       	mov	r17, r24
						if (res == FR_OK) {
    2fbe:	81 11       	cpse	r24, r1
    2fc0:	12 c0       	rjmp	.+36     	; 0x2fe6 <f_unlink+0xfc>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    2fc2:	60 e0       	ldi	r22, 0x00	; 0
    2fc4:	70 e0       	ldi	r23, 0x00	; 0
    2fc6:	ce 01       	movw	r24, r28
    2fc8:	89 96       	adiw	r24, 0x29	; 41
    2fca:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    2fce:	81 11       	cpse	r24, r1
    2fd0:	01 c0       	rjmp	.+2      	; 0x2fd4 <f_unlink+0xea>
    2fd2:	87 e0       	ldi	r24, 0x07	; 7
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    2fd4:	84 30       	cpi	r24, 0x04	; 4
    2fd6:	39 f0       	breq	.+14     	; 0x2fe6 <f_unlink+0xfc>
    2fd8:	18 2f       	mov	r17, r24
    2fda:	05 c0       	rjmp	.+10     	; 0x2fe6 <f_unlink+0xfc>
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
    2fdc:	c1 2c       	mov	r12, r1
    2fde:	d1 2c       	mov	r13, r1
    2fe0:	76 01       	movw	r14, r12
    2fe2:	01 c0       	rjmp	.+2      	; 0x2fe6 <f_unlink+0xfc>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {	 	/* Is it the current directory? */
						res = FR_DENIED;
    2fe4:	17 e0       	ldi	r17, 0x07	; 7
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
						}
					}
				}
			}
			if (res == FR_OK) {
    2fe6:	11 11       	cpse	r17, r1
    2fe8:	1e c0       	rjmp	.+60     	; 0x3026 <f_unlink+0x13c>
				res = dir_remove(&dj);			/* Remove the directory entry */
    2fea:	ce 01       	movw	r24, r28
    2fec:	01 96       	adiw	r24, 0x01	; 1
    2fee:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <dir_remove>
    2ff2:	18 2f       	mov	r17, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    2ff4:	81 11       	cpse	r24, r1
    2ff6:	0f c0       	rjmp	.+30     	; 0x3016 <f_unlink+0x12c>
    2ff8:	c1 14       	cp	r12, r1
    2ffa:	d1 04       	cpc	r13, r1
    2ffc:	e1 04       	cpc	r14, r1
    2ffe:	f1 04       	cpc	r15, r1
    3000:	51 f0       	breq	.+20     	; 0x3016 <f_unlink+0x12c>
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    3002:	00 e0       	ldi	r16, 0x00	; 0
    3004:	10 e0       	ldi	r17, 0x00	; 0
    3006:	98 01       	movw	r18, r16
    3008:	b7 01       	movw	r22, r14
    300a:	a6 01       	movw	r20, r12
    300c:	ce 01       	movw	r24, r28
    300e:	01 96       	adiw	r24, 0x01	; 1
    3010:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <remove_chain>
    3014:	18 2f       	mov	r17, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    3016:	11 11       	cpse	r17, r1
    3018:	06 c0       	rjmp	.+12     	; 0x3026 <f_unlink+0x13c>
    301a:	63 96       	adiw	r28, 0x13	; 19
    301c:	8e ad       	ldd	r24, Y+62	; 0x3e
    301e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3020:	63 97       	sbiw	r28, 0x13	; 19
    3022:	49 d9       	rcall	.-3438   	; 0x22b6 <sync_fs>
    3024:	18 2f       	mov	r17, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    3026:	81 2f       	mov	r24, r17
    3028:	cc 5a       	subi	r28, 0xAC	; 172
    302a:	df 4f       	sbci	r29, 0xFF	; 255
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	f8 94       	cli
    3030:	de bf       	out	0x3e, r29	; 62
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	cd bf       	out	0x3d, r28	; 61
    3036:	df 91       	pop	r29
    3038:	cf 91       	pop	r28
    303a:	1f 91       	pop	r17
    303c:	0f 91       	pop	r16
    303e:	ff 90       	pop	r15
    3040:	ef 90       	pop	r14
    3042:	df 90       	pop	r13
    3044:	cf 90       	pop	r12
    3046:	bf 90       	pop	r11
    3048:	af 90       	pop	r10
    304a:	08 95       	ret

0000304c <ioinit>:
{
    //MCUCR = _BV(JTD); MCUCR = _BV(JTD);   /* Disable JTAG */

    //pull up

    PORTA = 0b11111111;
    304c:	8f ef       	ldi	r24, 0xFF	; 255
    304e:	82 b9       	out	0x02, r24	; 2
    PORTB = 0b11111111;
    3050:	85 b9       	out	0x05, r24	; 5
    PORTC = 0b11111111;
    3052:	88 b9       	out	0x08, r24	; 8
    PORTD = 0b11111111;
    3054:	8b b9       	out	0x0b, r24	; 11
    //PORTE = 0b11111111;
    PORTF = 0b11111111;
    3056:	81 bb       	out	0x11, r24	; 17
    //PORTG = 0b00011111;

    TCCR1A = 0;     // set entire TCCR1A register to 0
    3058:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = 0;
    305c:	e1 e8       	ldi	r30, 0x81	; 129
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	10 82       	st	Z, r1
    TCCR1B |= (1 << WGM12);   //CTC mode; clock timer comare
    3062:	80 81       	ld	r24, Z
    3064:	88 60       	ori	r24, 0x08	; 8
    3066:	80 83       	st	Z, r24
    TIMSK1 |= (1 << OCIE1A); //ENABLE INTERUPTs
    3068:	af e6       	ldi	r26, 0x6F	; 111
    306a:	b0 e0       	ldi	r27, 0x00	; 0
    306c:	8c 91       	ld	r24, X
    306e:	82 60       	ori	r24, 0x02	; 2
    3070:	8c 93       	st	X, r24
    OCR1A = 0x4E20;
    3072:	80 e2       	ldi	r24, 0x20	; 32
    3074:	9e e4       	ldi	r25, 0x4E	; 78
    3076:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    307a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1B |=  (1 << CS11); //PRESCALER
    307e:	80 81       	ld	r24, Z
    3080:	82 60       	ori	r24, 0x02	; 2
    3082:	80 83       	st	Z, r24

    sei();
    3084:	78 94       	sei
    3086:	08 95       	ret

00003088 <myrand>:
    static uint8_t cur;
    //32 bit random number, from noinit sram
    static uint32_t random31 __attribute__((section(".noinit")));
    //temp storage for random number
    uint32_t temp;
    temp = random31 << 1;
    3088:	80 91 4e 0d 	lds	r24, 0x0D4E	; 0x800d4e <__bss_end>
    308c:	90 91 4f 0d 	lds	r25, 0x0D4F	; 0x800d4f <__bss_end+0x1>
    3090:	a0 91 50 0d 	lds	r26, 0x0D50	; 0x800d50 <__bss_end+0x2>
    3094:	b0 91 51 0d 	lds	r27, 0x0D51	; 0x800d51 <__bss_end+0x3>
    3098:	88 0f       	add	r24, r24
    309a:	99 1f       	adc	r25, r25
    309c:	aa 1f       	adc	r26, r26
    309e:	bb 1f       	adc	r27, r27
    //if bit31 set, or if init sram happens to be 0
    if ((temp & 0x80000000) || (temp == 0))
    30a0:	18 16       	cp	r1, r24
    30a2:	19 06       	cpc	r1, r25
    30a4:	1a 06       	cpc	r1, r26
    30a6:	1b 06       	cpc	r1, r27
    30a8:	44 f0       	brlt	.+16     	; 0x30ba <myrand+0x32>
    {
        //xor magic number (taps)
        temp ^= 0x20AA95B5;
    30aa:	25 eb       	ldi	r18, 0xB5	; 181
    30ac:	82 27       	eor	r24, r18
    30ae:	25 e9       	ldi	r18, 0x95	; 149
    30b0:	92 27       	eor	r25, r18
    30b2:	2a ea       	ldi	r18, 0xAA	; 170
    30b4:	a2 27       	eor	r26, r18
    30b6:	20 e2       	ldi	r18, 0x20	; 32
    30b8:	b2 27       	eor	r27, r18
    }
    //save back to random number for next time
    random31 = temp;
    30ba:	80 93 4e 0d 	sts	0x0D4E, r24	; 0x800d4e <__bss_end>
    30be:	90 93 4f 0d 	sts	0x0D4F, r25	; 0x800d4f <__bss_end+0x1>
    30c2:	a0 93 50 0d 	sts	0x0D50, r26	; 0x800d50 <__bss_end+0x2>
    30c6:	b0 93 51 0d 	sts	0x0D51, r27	; 0x800d51 <__bss_end+0x3>
    //return lowest byte only
    return temp + cur++;
    30ca:	20 91 b4 06 	lds	r18, 0x06B4	; 0x8006b4 <cur.4732>
    30ce:	31 e0       	ldi	r19, 0x01	; 1
    30d0:	32 0f       	add	r19, r18
    30d2:	30 93 b4 06 	sts	0x06B4, r19	; 0x8006b4 <cur.4732>
}
    30d6:	82 0f       	add	r24, r18
    30d8:	08 95       	ret

000030da <lufa_hook_usb_serialnumber_randomize>:
Get-CimInstance -ClassName Win32_DiskDrive -Property *  | where{$_.Interfacetype -eq 'USB'}

*/
void lufa_hook_usb_serialnumber_randomize(uint16_t* serial_str,
        size_t nr_elements)
{
    30da:	ef 92       	push	r14
    30dc:	ff 92       	push	r15
    30de:	0f 93       	push	r16
    30e0:	1f 93       	push	r17
    30e2:	cf 93       	push	r28
    30e4:	df 93       	push	r29
    30e6:	7c 01       	movw	r14, r24
    30e8:	8b 01       	movw	r16, r22
    /*
        hooked LUFA USB_Device_GetInternalSerialDescriptor (DeviceStandardReq.c)
    */
    static bool init;
    static uint8_t charset[0x10];
    if (!init)
    30ea:	80 91 b3 06 	lds	r24, 0x06B3	; 0x8006b3 <init.4739>
    30ee:	81 11       	cpse	r24, r1
    30f0:	1b c0       	rjmp	.+54     	; 0x3128 <lufa_hook_usb_serialnumber_randomize+0x4e>
    {
        init = true;
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <init.4739>
        for (size_t i = 0; i < sizeof(charset); i++)
    30f8:	c0 e0       	ldi	r28, 0x00	; 0
    30fa:	d0 e0       	ldi	r29, 0x00	; 0
    30fc:	12 c0       	rjmp	.+36     	; 0x3122 <lufa_hook_usb_serialnumber_randomize+0x48>
        {
            charset[i] = (myrand() % ('9' + 1 - '1')) + '1';
    30fe:	c4 df       	rcall	.-120    	; 0x3088 <myrand>
    3100:	fe 01       	movw	r30, r28
    3102:	ed 55       	subi	r30, 0x5D	; 93
    3104:	f9 4f       	sbci	r31, 0xF9	; 249
    3106:	99 e3       	ldi	r25, 0x39	; 57
    3108:	89 9f       	mul	r24, r25
    310a:	91 2d       	mov	r25, r1
    310c:	11 24       	eor	r1, r1
    310e:	96 95       	lsr	r25
    3110:	29 2f       	mov	r18, r25
    3112:	22 0f       	add	r18, r18
    3114:	22 0f       	add	r18, r18
    3116:	22 0f       	add	r18, r18
    3118:	92 0f       	add	r25, r18
    311a:	89 1b       	sub	r24, r25
    311c:	8f 5c       	subi	r24, 0xCF	; 207
    311e:	80 83       	st	Z, r24
    static bool init;
    static uint8_t charset[0x10];
    if (!init)
    {
        init = true;
        for (size_t i = 0; i < sizeof(charset); i++)
    3120:	21 96       	adiw	r28, 0x01	; 1
    3122:	c0 31       	cpi	r28, 0x10	; 16
    3124:	d1 05       	cpc	r29, r1
    3126:	58 f3       	brcs	.-42     	; 0x30fe <lufa_hook_usb_serialnumber_randomize+0x24>
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	0f c0       	rjmp	.+30     	; 0x314c <lufa_hook_usb_serialnumber_randomize+0x72>
        }

    }
    for (size_t i = 0; i < nr_elements; i++)
    {
        serial_str[i] = charset[i % sizeof(charset)];
    312e:	fc 01       	movw	r30, r24
    3130:	ee 0f       	add	r30, r30
    3132:	ff 1f       	adc	r31, r31
    3134:	ee 0d       	add	r30, r14
    3136:	ff 1d       	adc	r31, r15
    3138:	dc 01       	movw	r26, r24
    313a:	af 70       	andi	r26, 0x0F	; 15
    313c:	bb 27       	eor	r27, r27
    313e:	ad 55       	subi	r26, 0x5D	; 93
    3140:	b9 4f       	sbci	r27, 0xF9	; 249
    3142:	2c 91       	ld	r18, X
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	31 83       	std	Z+1, r19	; 0x01
    3148:	20 83       	st	Z, r18
        {
            charset[i] = (myrand() % ('9' + 1 - '1')) + '1';
        }

    }
    for (size_t i = 0; i < nr_elements; i++)
    314a:	01 96       	adiw	r24, 0x01	; 1
    314c:	80 17       	cp	r24, r16
    314e:	91 07       	cpc	r25, r17
    3150:	70 f3       	brcs	.-36     	; 0x312e <lufa_hook_usb_serialnumber_randomize+0x54>
    {
        serial_str[i] = charset[i % sizeof(charset)];
    }
}
    3152:	df 91       	pop	r29
    3154:	cf 91       	pop	r28
    3156:	1f 91       	pop	r17
    3158:	0f 91       	pop	r16
    315a:	ff 90       	pop	r15
    315c:	ef 90       	pop	r14
    315e:	08 95       	ret

00003160 <__vector_17>:

    sei();
}

ISR(TIMER1_COMPA_vect)
{
    3160:	1f 92       	push	r1
    3162:	0f 92       	push	r0
    3164:	0f b6       	in	r0, 0x3f	; 63
    3166:	0f 92       	push	r0
    3168:	11 24       	eor	r1, r1
    316a:	0b b6       	in	r0, 0x3b	; 59
    316c:	0f 92       	push	r0
    316e:	2f 93       	push	r18
    3170:	3f 93       	push	r19
    3172:	4f 93       	push	r20
    3174:	5f 93       	push	r21
    3176:	6f 93       	push	r22
    3178:	7f 93       	push	r23
    317a:	8f 93       	push	r24
    317c:	9f 93       	push	r25
    317e:	af 93       	push	r26
    3180:	bf 93       	push	r27
    3182:	ef 93       	push	r30
    3184:	ff 93       	push	r31
    Timer++;            /* Performance counter for this module */
    3186:	80 91 d5 0a 	lds	r24, 0x0AD5	; 0x800ad5 <Timer>
    318a:	90 91 d6 0a 	lds	r25, 0x0AD6	; 0x800ad6 <Timer+0x1>
    318e:	01 96       	adiw	r24, 0x01	; 1
    3190:	90 93 d6 0a 	sts	0x0AD6, r25	; 0x800ad6 <Timer+0x1>
    3194:	80 93 d5 0a 	sts	0x0AD5, r24	; 0x800ad5 <Timer>
    disk_timerproc();   /* Drive timer procedure of low level disk I/O module */
    3198:	0e 94 2d 03 	call	0x65a	; 0x65a <disk_timerproc>
}
    319c:	ff 91       	pop	r31
    319e:	ef 91       	pop	r30
    31a0:	bf 91       	pop	r27
    31a2:	af 91       	pop	r26
    31a4:	9f 91       	pop	r25
    31a6:	8f 91       	pop	r24
    31a8:	7f 91       	pop	r23
    31aa:	6f 91       	pop	r22
    31ac:	5f 91       	pop	r21
    31ae:	4f 91       	pop	r20
    31b0:	3f 91       	pop	r19
    31b2:	2f 91       	pop	r18
    31b4:	0f 90       	pop	r0
    31b6:	0b be       	out	0x3b, r0	; 59
    31b8:	0f 90       	pop	r0
    31ba:	0f be       	out	0x3f, r0	; 63
    31bc:	0f 90       	pop	r0
    31be:	1f 90       	pop	r1
    31c0:	18 95       	reti

000031c2 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    31c2:	84 b7       	in	r24, 0x34	; 52
    31c4:	87 7f       	andi	r24, 0xF7	; 247
    31c6:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    31c8:	0f b6       	in	r0, 0x3f	; 63
    31ca:	f8 94       	cli
    31cc:	a8 95       	wdr
    31ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    31d2:	88 61       	ori	r24, 0x18	; 24
    31d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    31d8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    31dc:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	80 e8       	ldi	r24, 0x80	; 128
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    31ea:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    31ee:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);

    /* Hardware Initialization */
    ioinit();
    31f0:	2d df       	rcall	.-422    	; 0x304c <ioinit>
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
    31f2:	87 e6       	ldi	r24, 0x67	; 103
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    31fa:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
    31fe:	86 e0       	ldi	r24, 0x06	; 6
    3200:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
    3204:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
    3208:	88 e1       	ldi	r24, 0x18	; 24
    320a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
    320e:	8a b1       	in	r24, 0x0a	; 10
    3210:	88 60       	ori	r24, 0x08	; 8
    3212:	8a b9       	out	0x0a, r24	; 10
				PORTD |= (1 << 2);
    3214:	8b b1       	in	r24, 0x0b	; 11
    3216:	84 60       	ori	r24, 0x04	; 4
    3218:	8b b9       	out	0x0b, r24	; 11

    Serial_Init(9600, false);
    Serial_SendString("\r\n\r\nSetup mass storage sd and keyboard by David Reguera Garcia aka Dreg - MIT License\r\ndreg@fr33project.org\r\nhttps://github.com/therealdreg\r\n");
    321a:	84 ed       	ldi	r24, 0xD4	; 212
    321c:	93 e0       	ldi	r25, 0x03	; 3
    321e:	0e 94 7f 27 	call	0x4efe	; 0x4efe <Serial_SendString>
    Serial_CreateStream(NULL);
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <Serial_CreateStream>
    printf("https://www.rootkit.es\r\n");
    322a:	82 e6       	ldi	r24, 0x62	; 98
    322c:	94 e0       	ldi	r25, 0x04	; 4
    322e:	0e 94 c0 33 	call	0x6780	; 0x6780 <puts>
    printf_P(PSTR("https://www.fr33project.org\r\npowered by LUFA http://elm-chan.org/fsw/ff/00index_e.html and FatFs http://elm-chan.org/fsw/ff/00index_e.html\r\n\r\n"));
    3232:	87 eb       	ldi	r24, 0xB7	; 183
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	9f 93       	push	r25
    3238:	8f 93       	push	r24
    323a:	0e 94 99 33 	call	0x6732	; 0x6732 <printf_P>

    on_sd();
    323e:	0e 94 01 01 	call	0x202	; 0x202 <on_sd>

    sdcard_Init();
    3242:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <sdcard_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
    3246:	8a b1       	in	r24, 0x0a	; 10
    3248:	80 6c       	ori	r24, 0xC0	; 192
    324a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
    324c:	8b b1       	in	r24, 0x0b	; 11
    324e:	8f 73       	andi	r24, 0x3F	; 63
    3250:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRD  &= ~BUTTONS_BUTTON1;
    3252:	8a b1       	in	r24, 0x0a	; 10
    3254:	8f 7d       	andi	r24, 0xDF	; 223
    3256:	8a b9       	out	0x0a, r24	; 10
				PORTD |=  BUTTONS_BUTTON1;
    3258:	8b b1       	in	r24, 0x0b	; 11
    325a:	80 62       	ori	r24, 0x20	; 32
    325c:	8b b9       	out	0x0b, r24	; 11
                
                DDRE  &= ~BUTTONS_BUTTON2;
    325e:	8d b1       	in	r24, 0x0d	; 13
    3260:	8b 7f       	andi	r24, 0xFB	; 251
    3262:	8d b9       	out	0x0d, r24	; 13
                PORTE |=  BUTTONS_BUTTON2;
    3264:	8e b1       	in	r24, 0x0e	; 14
    3266:	84 60       	ori	r24, 0x04	; 4
    3268:	8e b9       	out	0x0e, r24	; 14

    LEDs_Init();

    Buttons_Init();

    USB_Init();
    326a:	0e 94 07 30 	call	0x600e	; 0x600e <USB_Init>
}
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	08 95       	ret

00003274 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    3274:	cf 93       	push	r28
    3276:	df 93       	push	r29
    3278:	cd b7       	in	r28, 0x3d	; 61
    327a:	de b7       	in	r29, 0x3e	; 62
    327c:	c4 56       	subi	r28, 0x64	; 100
    327e:	d1 09       	sbc	r29, r1
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	f8 94       	cli
    3284:	de bf       	out	0x3e, r29	; 62
    3286:	0f be       	out	0x3f, r0	; 63
    3288:	cd bf       	out	0x3d, r28	; 61
    SetupHardware();
    328a:	9b df       	rcall	.-202    	; 0x31c2 <SetupHardware>

    /* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
    CDC_Device_CreateStream(&VirtualSerial2_CDC_Interface, &USBSerialStream);
    328c:	65 eb       	ldi	r22, 0xB5	; 181
    328e:	76 e0       	ldi	r23, 0x06	; 6
    3290:	80 e3       	ldi	r24, 0x30	; 48
    3292:	91 e0       	ldi	r25, 0x01	; 1
    3294:	0e 94 b4 28 	call	0x5168	; 0x5168 <CDC_Device_CreateStream>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
    3298:	8b b1       	in	r24, 0x0b	; 11
    329a:	8f 73       	andi	r24, 0x3F	; 63
    329c:	80 64       	ori	r24, 0x40	; 64
    329e:	8b b9       	out	0x0b, r24	; 11
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    32a0:	78 94       	sei
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);

    GlobalInterruptEnable();

    uint16_t i = 1;
    uint8_t j = 0;
    32a2:	d1 2c       	mov	r13, r1

    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);

    GlobalInterruptEnable();

    uint16_t i = 1;
    32a4:	01 e0       	ldi	r16, 0x01	; 1
    32a6:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t j = 0;
    for (;;)
    {
        MS_Device_USBTask(&Disk_MS_Interface);
    32a8:	8b e5       	ldi	r24, 0x5B	; 91
    32aa:	91 e0       	ldi	r25, 0x01	; 1
    32ac:	0e 94 a0 2c 	call	0x5940	; 0x5940 <MS_Device_USBTask>
        HID_Device_USBTask(&Keyboard_HID_Interface);
    32b0:	8b e4       	ldi	r24, 0x4B	; 75
    32b2:	91 e0       	ldi	r25, 0x01	; 1
    32b4:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <HID_Device_USBTask>

        /* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
        /* Echo all received data x3 on the CDC interface */
        int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial2_CDC_Interface);
    32b8:	80 e3       	ldi	r24, 0x30	; 48
    32ba:	91 e0       	ldi	r25, 0x01	; 1
    32bc:	0e 94 70 28 	call	0x50e0	; 0x50e0 <CDC_Device_ReceiveByte>
    32c0:	7c 01       	movw	r14, r24
        static char first_char_typ = ' ';
        if (!(ReceivedByte < 0) && first_char_typ == ' ')
    32c2:	99 23       	and	r25, r25
    32c4:	5c f0       	brlt	.+22     	; 0x32dc <main+0x68>
    32c6:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <first_char_typ.4759>
    32ca:	80 32       	cpi	r24, 0x20	; 32
    32cc:	39 f4       	brne	.+14     	; 0x32dc <main+0x68>
        {
            if (isprint(ReceivedByte))
    32ce:	c7 01       	movw	r24, r14
    32d0:	0e 94 49 33 	call	0x6692	; 0x6692 <isprint>
    32d4:	89 2b       	or	r24, r25
    32d6:	11 f0       	breq	.+4      	; 0x32dc <main+0x68>
            {
                first_char_typ = ReceivedByte;
    32d8:	e0 92 2d 01 	sts	0x012D, r14	; 0x80012d <first_char_typ.4759>
            }
        }

        if (i++ % 0x9FFF == 0)
    32dc:	78 01       	movw	r14, r16
    32de:	2f ef       	ldi	r18, 0xFF	; 255
    32e0:	e2 1a       	sub	r14, r18
    32e2:	f2 0a       	sbc	r15, r18
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	0f 3f       	cpi	r16, 0xFF	; 255
    32ea:	af e9       	ldi	r26, 0x9F	; 159
    32ec:	1a 07       	cpc	r17, r26
    32ee:	10 f4       	brcc	.+4      	; 0x32f4 <main+0x80>
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	4f ef       	ldi	r20, 0xFF	; 255
    32f6:	5f e9       	ldi	r21, 0x9F	; 159
    32f8:	84 9f       	mul	r24, r20
    32fa:	90 01       	movw	r18, r0
    32fc:	85 9f       	mul	r24, r21
    32fe:	30 0d       	add	r19, r0
    3300:	94 9f       	mul	r25, r20
    3302:	30 0d       	add	r19, r0
    3304:	11 24       	eor	r1, r1
    3306:	02 17       	cp	r16, r18
    3308:	13 07       	cpc	r17, r19
    330a:	09 f0       	breq	.+2      	; 0x330e <main+0x9a>
    330c:	4a c0       	rjmp	.+148    	; 0x33a2 <main+0x12e>
        {
            char buff[100] = { 0 };
    330e:	fe 01       	movw	r30, r28
    3310:	31 96       	adiw	r30, 0x01	; 1
    3312:	84 e6       	ldi	r24, 0x64	; 100
    3314:	df 01       	movw	r26, r30
    3316:	1d 92       	st	X+, r1
    3318:	8a 95       	dec	r24
    331a:	e9 f7       	brne	.-6      	; 0x3316 <main+0xa2>
            static uint8_t gh = 0;
            if (gh == 50)
    331c:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <gh.4761>
    3320:	82 33       	cpi	r24, 0x32	; 50
    3322:	c9 f4       	brne	.+50     	; 0x3356 <main+0xe2>
            {
                fprintf(&USBSerialStream, "\r\nguess_host_os: %s\r\n\r\n",
    3324:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <guess_host_os_string>
    3328:	9f 93       	push	r25
    332a:	8f 93       	push	r24
    332c:	8a e7       	ldi	r24, 0x7A	; 122
    332e:	94 e0       	ldi	r25, 0x04	; 4
    3330:	9f 93       	push	r25
    3332:	8f 93       	push	r24
    3334:	85 eb       	ldi	r24, 0xB5	; 181
    3336:	96 e0       	ldi	r25, 0x06	; 6
    3338:	9f 93       	push	r25
    333a:	8f 93       	push	r24
    333c:	0e 94 77 33 	call	0x66ee	; 0x66ee <fprintf>
                        guess_host_os_string());
                gh++;
    3340:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <gh.4761>
    3344:	8f 5f       	subi	r24, 0xFF	; 255
    3346:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <gh.4761>
    334a:	0f 90       	pop	r0
    334c:	0f 90       	pop	r0
    334e:	0f 90       	pop	r0
    3350:	0f 90       	pop	r0
    3352:	0f 90       	pop	r0
    3354:	0f 90       	pop	r0
            }
            if (gh < 50)
    3356:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <gh.4761>
    335a:	82 33       	cpi	r24, 0x32	; 50
    335c:	18 f4       	brcc	.+6      	; 0x3364 <main+0xf0>
            {
                gh++;
    335e:	8f 5f       	subi	r24, 0xFF	; 255
    3360:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <gh.4761>
            }

            sprintf(buff,
                    "hello world from AT90 (the first char typed in this PORT was: %c): %d\r\n",
                    first_char_typ, j++);
    3364:	cc 24       	eor	r12, r12
    3366:	c3 94       	inc	r12
    3368:	cd 0c       	add	r12, r13
            if (gh < 50)
            {
                gh++;
            }

            sprintf(buff,
    336a:	1f 92       	push	r1
    336c:	df 92       	push	r13
    336e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <first_char_typ.4759>
    3372:	1f 92       	push	r1
    3374:	8f 93       	push	r24
    3376:	82 e9       	ldi	r24, 0x92	; 146
    3378:	94 e0       	ldi	r25, 0x04	; 4
    337a:	9f 93       	push	r25
    337c:	8f 93       	push	r24
    337e:	8e 01       	movw	r16, r28
    3380:	0f 5f       	subi	r16, 0xFF	; 255
    3382:	1f 4f       	sbci	r17, 0xFF	; 255
    3384:	1f 93       	push	r17
    3386:	0f 93       	push	r16
    3388:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <sprintf>
                    "hello world from AT90 (the first char typed in this PORT was: %c): %d\r\n",
                    first_char_typ, j++);
            CDC_Device_SendString(&VirtualSerial2_CDC_Interface, buff);
    338c:	b8 01       	movw	r22, r16
    338e:	80 e3       	ldi	r24, 0x30	; 48
    3390:	91 e0       	ldi	r25, 0x01	; 1
    3392:	0e 94 ca 27 	call	0x4f94	; 0x4f94 <CDC_Device_SendString>
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	de bf       	out	0x3e, r29	; 62
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	cd bf       	out	0x3d, r28	; 61
                gh++;
            }

            sprintf(buff,
                    "hello world from AT90 (the first char typed in this PORT was: %c): %d\r\n",
                    first_char_typ, j++);
    33a0:	dc 2c       	mov	r13, r12
            CDC_Device_SendString(&VirtualSerial2_CDC_Interface, buff);
        }

        CDC_Device_USBTask(&VirtualSerial2_CDC_Interface);
    33a2:	80 e3       	ldi	r24, 0x30	; 48
    33a4:	91 e0       	ldi	r25, 0x01	; 1
    33a6:	0e 94 58 28 	call	0x50b0	; 0x50b0 <CDC_Device_USBTask>
        USB_USBTask();
    33aa:	0e 94 0a 33 	call	0x6614	; 0x6614 <USB_USBTask>
            {
                first_char_typ = ReceivedByte;
            }
        }

        if (i++ % 0x9FFF == 0)
    33ae:	87 01       	movw	r16, r14
            CDC_Device_SendString(&VirtualSerial2_CDC_Interface, buff);
        }

        CDC_Device_USBTask(&VirtualSerial2_CDC_Interface);
        USB_USBTask();
    }
    33b0:	7b cf       	rjmp	.-266    	; 0x32a8 <main+0x34>

000033b2 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    printf_P(PSTR("Connect\r\n"));
    33b2:	8d ea       	ldi	r24, 0xAD	; 173
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	9f 93       	push	r25
    33b8:	8f 93       	push	r24
    33ba:	0e 94 99 33 	call	0x6732	; 0x6732 <printf_P>
    33be:	8b b1       	in	r24, 0x0b	; 11
    33c0:	8f 73       	andi	r24, 0x3F	; 63
    33c2:	80 68       	ori	r24, 0x80	; 128
    33c4:	8b b9       	out	0x0b, r24	; 11

    LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
    33c6:	0f 90       	pop	r0
    33c8:	0f 90       	pop	r0
    33ca:	08 95       	ret

000033cc <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    printf_P(PSTR("Disconnect\r\n"));
    33cc:	80 ea       	ldi	r24, 0xA0	; 160
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	9f 93       	push	r25
    33d2:	8f 93       	push	r24
    33d4:	0e 94 99 33 	call	0x6732	; 0x6732 <printf_P>
    33d8:	8b b1       	in	r24, 0x0b	; 11
    33da:	8f 73       	andi	r24, 0x3F	; 63
    33dc:	80 64       	ori	r24, 0x40	; 64
    33de:	8b b9       	out	0x0b, r24	; 11
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
    33e0:	0f 90       	pop	r0
    33e2:	0f 90       	pop	r0
    33e4:	08 95       	ret

000033e6 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
    33e6:	cf 93       	push	r28
    bool ConfigSuccess = true;

    printf_P(PSTR("Ready\r\n"));
    33e8:	88 e9       	ldi	r24, 0x98	; 152
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	9f 93       	push	r25
    33ee:	8f 93       	push	r24
    33f0:	0e 94 99 33 	call	0x6732	; 0x6732 <printf_P>

    ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
    33f4:	8b e4       	ldi	r24, 0x4B	; 75
    33f6:	91 e0       	ldi	r25, 0x01	; 1
    33f8:	0e 94 c2 2a 	call	0x5584	; 0x5584 <HID_Device_ConfigureEndpoints>
    33fc:	c8 2f       	mov	r28, r24
    ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
    33fe:	8b e5       	ldi	r24, 0x5B	; 91
    3400:	91 e0       	ldi	r25, 0x01	; 1
    3402:	0e 94 86 2c 	call	0x590c	; 0x590c <MS_Device_ConfigureEndpoints>
    3406:	c8 23       	and	r28, r24
    ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial2_CDC_Interface);
    3408:	80 e3       	ldi	r24, 0x30	; 48
    340a:	91 e0       	ldi	r25, 0x01	; 1
    340c:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <CDC_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    3410:	e2 ee       	ldi	r30, 0xE2	; 226
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	90 81       	ld	r25, Z
    3416:	94 60       	ori	r25, 0x04	; 4
    3418:	90 83       	st	Z, r25

    USB_Device_EnableSOFEvents();

    LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
    341a:	0f 90       	pop	r0
    341c:	0f 90       	pop	r0
    341e:	cc 23       	and	r28, r28
    3420:	21 f0       	breq	.+8      	; 0x342a <EVENT_USB_Device_ConfigurationChanged+0x44>
    3422:	88 23       	and	r24, r24
    3424:	11 f0       	breq	.+4      	; 0x342a <EVENT_USB_Device_ConfigurationChanged+0x44>
    3426:	90 ec       	ldi	r25, 0xC0	; 192
    3428:	01 c0       	rjmp	.+2      	; 0x342c <EVENT_USB_Device_ConfigurationChanged+0x46>
    342a:	90 e4       	ldi	r25, 0x40	; 64
    342c:	8b b1       	in	r24, 0x0b	; 11
    342e:	8f 73       	andi	r24, 0x3F	; 63
    3430:	89 2b       	or	r24, r25
    3432:	8b b9       	out	0x0b, r24	; 11
}
    3434:	cf 91       	pop	r28
    3436:	08 95       	ret

00003438 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
    MS_Device_ProcessControlRequest(&Disk_MS_Interface);
    3438:	8b e5       	ldi	r24, 0x5B	; 91
    343a:	91 e0       	ldi	r25, 0x01	; 1
    343c:	0e 94 48 2c 	call	0x5890	; 0x5890 <MS_Device_ProcessControlRequest>
    HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
    3440:	8b e4       	ldi	r24, 0x4B	; 75
    3442:	91 e0       	ldi	r25, 0x01	; 1
    3444:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <HID_Device_ProcessControlRequest>
    CDC_Device_ProcessControlRequest(&VirtualSerial2_CDC_Interface);
    3448:	80 e3       	ldi	r24, 0x30	; 48
    344a:	91 e0       	ldi	r25, 0x01	; 1
    344c:	0c 94 c8 28 	jmp	0x5190	; 0x5190 <CDC_Device_ProcessControlRequest>
    3450:	08 95       	ret

00003452 <CALLBACK_MS_Device_SCSICommandReceived>:
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const
        MSInterfaceInfo)
{
    3452:	cf 93       	push	r28
    3454:	df 93       	push	r29
    3456:	ec 01       	movw	r28, r24
    bool CommandSuccess;
    static bool show_os = false;

    if (!show_os)
    3458:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <show_os.5037>
    345c:	81 11       	cpse	r24, r1
    345e:	11 c0       	rjmp	.+34     	; 0x3482 <CALLBACK_MS_Device_SCSICommandReceived+0x30>
    {
        show_os = true;
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <show_os.5037>
        printf("\r\nguess_host_os: %s\r\n", guess_host_os_string());
    3466:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <guess_host_os_string>
    346a:	9f 93       	push	r25
    346c:	8f 93       	push	r24
    346e:	8a ed       	ldi	r24, 0xDA	; 218
    3470:	94 e0       	ldi	r25, 0x04	; 4
    3472:	9f 93       	push	r25
    3474:	8f 93       	push	r24
    3476:	0e 94 86 33 	call	0x670c	; 0x670c <printf>
    347a:	0f 90       	pop	r0
    347c:	0f 90       	pop	r0
    347e:	0f 90       	pop	r0
    3480:	0f 90       	pop	r0
    }

    if (!last_led)
    3482:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <last_led>
    3486:	81 11       	cpse	r24, r1
    3488:	04 c0       	rjmp	.+8      	; 0x3492 <CALLBACK_MS_Device_SCSICommandReceived+0x40>
    348a:	8b b1       	in	r24, 0x0b	; 11
    348c:	8f 73       	andi	r24, 0x3F	; 63
    348e:	80 68       	ori	r24, 0x80	; 128
    3490:	8b b9       	out	0x0b, r24	; 11
    {
        LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
    }

    CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
    3492:	ce 01       	movw	r24, r28
    3494:	0e 94 87 23 	call	0x470e	; 0x470e <SCSI_DecodeSCSICommand>

    if (!last_led)
    3498:	90 91 cb 06 	lds	r25, 0x06CB	; 0x8006cb <last_led>
    349c:	91 11       	cpse	r25, r1
    349e:	03 c0       	rjmp	.+6      	; 0x34a6 <CALLBACK_MS_Device_SCSICommandReceived+0x54>
    34a0:	9b b1       	in	r25, 0x0b	; 11
    34a2:	90 6c       	ori	r25, 0xC0	; 192
    34a4:	9b b9       	out	0x0b, r25	; 11
    {
        LEDs_SetAllLEDs(LEDMASK_USB_READY);
    }

    return CommandSuccess;
}
    34a6:	df 91       	pop	r29
    34a8:	cf 91       	pop	r28
    34aa:	08 95       	ret

000034ac <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
    34ac:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <Keyboard_HID_Interface+0xe>
    34b0:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <Keyboard_HID_Interface+0xf>
    34b4:	00 97       	sbiw	r24, 0x00	; 0
    34b6:	29 f0       	breq	.+10     	; 0x34c2 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
    34b8:	01 97       	sbiw	r24, 0x01	; 1
    34ba:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <Keyboard_HID_Interface+0xf>
    34be:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <Keyboard_HID_Interface+0xe>
    34c2:	08 95       	ret

000034c4 <CALLBACK_HID_Device_CreateHIDReport>:
        HIDInterfaceInfo,
        uint8_t* const ReportID,
        const uint8_t ReportType,
        void* ReportData,
        uint16_t* const ReportSize)
{
    34c4:	0f 93       	push	r16
    34c6:	1f 93       	push	r17
    34c8:	cf 93       	push	r28
    34ca:	df 93       	push	r29
    34cc:	e9 01       	movw	r28, r18
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return (((PIND & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1) | ((PINE & BUTTONS_BUTTON2) ^ BUTTONS_BUTTON2));
    34ce:	49 b1       	in	r20, 0x09	; 9
    34d0:	8c b1       	in	r24, 0x0c	; 12
    34d2:	40 95       	com	r20
    34d4:	40 72       	andi	r20, 0x20	; 32
    34d6:	80 95       	com	r24
    34d8:	84 70       	andi	r24, 0x04	; 4
    34da:	48 2b       	or	r20, r24
    static uint16_t i = 0;
    uint8_t ButtonStatus_LCL = Buttons_GetStatus();



    i++;
    34dc:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <i.5054>
    34e0:	f0 91 a0 06 	lds	r31, 0x06A0	; 0x8006a0 <i.5054+0x1>
    34e4:	31 96       	adiw	r30, 0x01	; 1
    34e6:	f0 93 a0 06 	sts	0x06A0, r31	; 0x8006a0 <i.5054+0x1>
    34ea:	e0 93 9f 06 	sts	0x069F, r30	; 0x80069f <i.5054>
    if (i % 0x8F == 0)
    34ee:	9f 01       	movw	r18, r30
    34f0:	a3 e9       	ldi	r26, 0x93	; 147
    34f2:	b2 e7       	ldi	r27, 0x72	; 114
    34f4:	0e 94 2e 33 	call	0x665c	; 0x665c <__umulhisi3>
    34f8:	00 24       	eor	r0, r0
    34fa:	88 0f       	add	r24, r24
    34fc:	99 1f       	adc	r25, r25
    34fe:	00 1c       	adc	r0, r0
    3500:	88 0f       	add	r24, r24
    3502:	99 1f       	adc	r25, r25
    3504:	00 1c       	adc	r0, r0
    3506:	89 2f       	mov	r24, r25
    3508:	90 2d       	mov	r25, r0
    350a:	5f e8       	ldi	r21, 0x8F	; 143
    350c:	58 9f       	mul	r21, r24
    350e:	90 01       	movw	r18, r0
    3510:	59 9f       	mul	r21, r25
    3512:	30 0d       	add	r19, r0
    3514:	11 24       	eor	r1, r1
    3516:	e2 17       	cp	r30, r18
    3518:	f3 07       	cpc	r31, r19
    351a:	21 f4       	brne	.+8      	; 0x3524 <CALLBACK_HID_Device_CreateHIDReport+0x60>
    {
        i = 0;
    351c:	10 92 a0 06 	sts	0x06A0, r1	; 0x8006a0 <i.5054+0x1>
    3520:	10 92 9f 06 	sts	0x069F, r1	; 0x80069f <i.5054>
    }


    if (last_shift)
    3524:	80 91 9e 06 	lds	r24, 0x069E	; 0x80069e <last_shift.5049>
    3528:	88 23       	and	r24, r24
    352a:	19 f0       	breq	.+6      	; 0x3532 <CALLBACK_HID_Device_CreateHIDReport+0x6e>
    {
        KeyboardReport->Modifier = 0;
    352c:	18 82       	st	Y, r1
        last_shift = false;
    352e:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <last_shift.5049>
    3532:	84 2f       	mov	r24, r20
    3534:	80 72       	andi	r24, 0x20	; 32
    }

    if ((ButtonStatus_LCL & BUTTONS_BUTTON1)
    3536:	91 f1       	breq	.+100    	; 0x359c <CALLBACK_HID_Device_CreateHIDReport+0xd8>
            && (ButtonStatus_LCL & BUTTONS_BUTTON2))
    3538:	42 ff       	sbrs	r20, 2
    353a:	30 c0       	rjmp	.+96     	; 0x359c <CALLBACK_HID_Device_CreateHIDReport+0xd8>
    {
        KeyboardReport->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
    353c:	82 e0       	ldi	r24, 0x02	; 2
    353e:	88 83       	st	Y, r24
        KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_D;
    3540:	87 e0       	ldi	r24, 0x07	; 7
    3542:	8a 83       	std	Y+2, r24	; 0x02
        last_shift = true;
    3544:	91 e0       	ldi	r25, 0x01	; 1
    3546:	90 93 9e 06 	sts	0x069E, r25	; 0x80069e <last_shift.5049>
    354a:	8b b1       	in	r24, 0x0b	; 11
    354c:	80 6c       	ori	r24, 0xC0	; 192
    354e:	8b b9       	out	0x0b, r24	; 11
        LEDs_SetAllLEDs(LEDS_LED1 | LEDS_LED2);
        last_led = true;
    3550:	90 93 cb 06 	sts	0x06CB, r25	; 0x8006cb <last_led>

        switch (guess_host_os())
    3554:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <guess_host_os>
    3558:	81 30       	cpi	r24, 0x01	; 1
    355a:	59 f0       	breq	.+22     	; 0x3572 <CALLBACK_HID_Device_CreateHIDReport+0xae>
    355c:	18 f0       	brcs	.+6      	; 0x3564 <CALLBACK_HID_Device_CreateHIDReport+0xa0>
    355e:	82 30       	cpi	r24, 0x02	; 2
    3560:	79 f0       	breq	.+30     	; 0x3580 <CALLBACK_HID_Device_CreateHIDReport+0xbc>
    3562:	15 c0       	rjmp	.+42     	; 0x358e <CALLBACK_HID_Device_CreateHIDReport+0xca>
        {
            case GO_WINDOWS:
                str_to_print = OS_WIN;
    3564:	8c e1       	ldi	r24, 0x1C	; 28
    3566:	91 e0       	ldi	r25, 0x01	; 1
    3568:	90 93 9d 06 	sts	0x069D, r25	; 0x80069d <str_to_print.5050+0x1>
    356c:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <str_to_print.5050>
                break;
    3570:	4e c0       	rjmp	.+156    	; 0x360e <CALLBACK_HID_Device_CreateHIDReport+0x14a>

            case GO_LINUX:
                str_to_print = OS_LIN;
    3572:	8d e0       	ldi	r24, 0x0D	; 13
    3574:	91 e0       	ldi	r25, 0x01	; 1
    3576:	90 93 9d 06 	sts	0x069D, r25	; 0x80069d <str_to_print.5050+0x1>
    357a:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <str_to_print.5050>
                break;
    357e:	47 c0       	rjmp	.+142    	; 0x360e <CALLBACK_HID_Device_CreateHIDReport+0x14a>

            case GO_MAC:
                str_to_print = OS_MAC;
    3580:	80 e0       	ldi	r24, 0x00	; 0
    3582:	91 e0       	ldi	r25, 0x01	; 1
    3584:	90 93 9d 06 	sts	0x069D, r25	; 0x80069d <str_to_print.5050+0x1>
    3588:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <str_to_print.5050>
                break;
    358c:	40 c0       	rjmp	.+128    	; 0x360e <CALLBACK_HID_Device_CreateHIDReport+0x14a>

            default:
                str_to_print = OS_WIN;
    358e:	8c e1       	ldi	r24, 0x1C	; 28
    3590:	91 e0       	ldi	r25, 0x01	; 1
    3592:	90 93 9d 06 	sts	0x069D, r25	; 0x80069d <str_to_print.5050+0x1>
    3596:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <str_to_print.5050>
                break;
    359a:	39 c0       	rjmp	.+114    	; 0x360e <CALLBACK_HID_Device_CreateHIDReport+0x14a>
        }
    }
    else if (ButtonStatus_LCL & BUTTONS_BUTTON2)
    359c:	42 ff       	sbrs	r20, 2
    359e:	0a c0       	rjmp	.+20     	; 0x35b4 <CALLBACK_HID_Device_CreateHIDReport+0xf0>
    {
        KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_R;
    35a0:	85 e1       	ldi	r24, 0x15	; 21
    35a2:	8a 83       	std	Y+2, r24	; 0x02
    35a4:	8b b1       	in	r24, 0x0b	; 11
    35a6:	8f 73       	andi	r24, 0x3F	; 63
    35a8:	80 64       	ori	r24, 0x40	; 64
    35aa:	8b b9       	out	0x0b, r24	; 11
        LEDs_SetAllLEDs(LEDS_LED1);
        last_led = true;
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <last_led>
    35b2:	2d c0       	rjmp	.+90     	; 0x360e <CALLBACK_HID_Device_CreateHIDReport+0x14a>
    }
    else if (ButtonStatus_LCL & BUTTONS_BUTTON1)
    35b4:	88 23       	and	r24, r24
    35b6:	51 f0       	breq	.+20     	; 0x35cc <CALLBACK_HID_Device_CreateHIDReport+0x108>
    {
        KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_G;
    35b8:	8a e0       	ldi	r24, 0x0A	; 10
    35ba:	8a 83       	std	Y+2, r24	; 0x02
    35bc:	8b b1       	in	r24, 0x0b	; 11
    35be:	8f 73       	andi	r24, 0x3F	; 63
    35c0:	80 68       	ori	r24, 0x80	; 128
    35c2:	8b b9       	out	0x0b, r24	; 11
        LEDs_SetAllLEDs(LEDS_LED2);
        last_led = true;
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	80 93 cb 06 	sts	0x06CB, r24	; 0x8006cb <last_led>
    35ca:	21 c0       	rjmp	.+66     	; 0x360e <CALLBACK_HID_Device_CreateHIDReport+0x14a>
    }
    else
    {
        if (last_led)
    35cc:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <last_led>
    35d0:	88 23       	and	r24, r24
    35d2:	29 f0       	breq	.+10     	; 0x35de <CALLBACK_HID_Device_CreateHIDReport+0x11a>
        {
            last_led = false;
    35d4:	10 92 cb 06 	sts	0x06CB, r1	; 0x8006cb <last_led>
    35d8:	8b b1       	in	r24, 0x0b	; 11
    35da:	8f 73       	andi	r24, 0x3F	; 63
    35dc:	8b b9       	out	0x0b, r24	; 11
            LEDs_SetAllLEDs(LEDS_NO_LEDS);
        }
        if (*str_to_print == '\0')
    35de:	e0 91 9c 06 	lds	r30, 0x069C	; 0x80069c <str_to_print.5050>
    35e2:	f0 91 9d 06 	lds	r31, 0x069D	; 0x80069d <str_to_print.5050+0x1>
    35e6:	80 81       	ld	r24, Z
    35e8:	81 11       	cpse	r24, r1
    35ea:	05 c0       	rjmp	.+10     	; 0x35f6 <CALLBACK_HID_Device_CreateHIDReport+0x132>
        {
            str_to_print = NULL;
    35ec:	10 92 9d 06 	sts	0x069D, r1	; 0x80069d <str_to_print.5050+0x1>
    35f0:	10 92 9c 06 	sts	0x069C, r1	; 0x80069c <str_to_print.5050>
    35f4:	0c c0       	rjmp	.+24     	; 0x360e <CALLBACK_HID_Device_CreateHIDReport+0x14a>
        }
        else
        {
            if (i == 0)
    35f6:	20 91 9f 06 	lds	r18, 0x069F	; 0x80069f <i.5054>
    35fa:	30 91 a0 06 	lds	r19, 0x06A0	; 0x8006a0 <i.5054+0x1>
    35fe:	23 2b       	or	r18, r19
    3600:	31 f4       	brne	.+12     	; 0x360e <CALLBACK_HID_Device_CreateHIDReport+0x14a>
            {
                KeyboardReport->KeyCode[0] = *str_to_print;
    3602:	8a 83       	std	Y+2, r24	; 0x02
                str_to_print++;
    3604:	31 96       	adiw	r30, 0x01	; 1
    3606:	f0 93 9d 06 	sts	0x069D, r31	; 0x80069d <str_to_print.5050+0x1>
    360a:	e0 93 9c 06 	sts	0x069C, r30	; 0x80069c <str_to_print.5050>
            }
        }
    }

    *ReportSize = sizeof(USB_KeyboardReport_Data_t);
    360e:	88 e0       	ldi	r24, 0x08	; 8
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	f8 01       	movw	r30, r16
    3614:	91 83       	std	Z+1, r25	; 0x01
    3616:	80 83       	st	Z, r24
    return false;
}
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	df 91       	pop	r29
    361c:	cf 91       	pop	r28
    361e:	1f 91       	pop	r17
    3620:	0f 91       	pop	r16
    3622:	08 95       	ret

00003624 <CALLBACK_HID_Device_ProcessHIDReport>:
        const uint16_t ReportSize)
{
    uint8_t  LEDMask   = LEDS_NO_LEDS;
    uint8_t* LEDReport = (uint8_t*)ReportData;

    if (last_led)
    3624:	80 91 cb 06 	lds	r24, 0x06CB	; 0x8006cb <last_led>
    3628:	81 11       	cpse	r24, r1
    362a:	0c c0       	rjmp	.+24     	; 0x3644 <CALLBACK_HID_Device_ProcessHIDReport+0x20>
    {
        return;
    }

    if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
    362c:	f9 01       	movw	r30, r18
    362e:	90 81       	ld	r25, Z
    3630:	90 fd       	sbrc	r25, 0
    {
        LEDMask |= LEDS_LED1;
    3632:	80 e4       	ldi	r24, 0x40	; 64
    }

    if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
    3634:	91 fd       	sbrc	r25, 1
    {
        LEDMask |= LEDS_LED2;
    3636:	80 68       	ori	r24, 0x80	; 128
    }

    if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
    3638:	92 fd       	sbrc	r25, 2
    {
        LEDMask |= LEDS_LED1 | LEDS_LED2;
    363a:	80 6c       	ori	r24, 0xC0	; 192
    363c:	9b b1       	in	r25, 0x0b	; 11
    363e:	9f 73       	andi	r25, 0x3F	; 63
    3640:	89 2b       	or	r24, r25
    3642:	8b b9       	out	0x0b, r24	; 11
    3644:	08 95       	ret

00003646 <EVENT_CDC_Device_ControLineStateChanged>:
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const
        CDCInterfaceInfo)
{
    3646:	08 95       	ret

00003648 <power_off>:

static
void power_off (void)
{
    /* Disable SPI function */
    SPCR = 0;
    3648:	1c bc       	out	0x2c, r1	; 44


    /* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
    // Set SCK/MOSI/CS as hi-z, INS#/WP as pull-up
    // CHECK THIS
    DDR_SPI &= ~(1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_CS);
    364a:	84 b1       	in	r24, 0x04	; 4
    364c:	8b 7f       	andi	r24, 0xFB	; 251
    364e:	84 b9       	out	0x04, r24	; 4
    PORT_SPI &= ~(1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_CS);
    3650:	85 b1       	in	r24, 0x05	; 5
    3652:	8b 7f       	andi	r24, 0xFB	; 251
    3654:	85 b9       	out	0x05, r24	; 5
    3656:	08 95       	ret

00003658 <xchg_spi>:
static
BYTE xchg_spi (     /* Returns received data */
    BYTE dat        /* Data to be sent */
)
{
    SPDR = dat;
    3658:	8e bd       	out	0x2e, r24	; 46
    loop_until_bit_is_set(SPSR, SPIF);
    365a:	0d b4       	in	r0, 0x2d	; 45
    365c:	07 fe       	sbrs	r0, 7
    365e:	fd cf       	rjmp	.-6      	; 0x365a <xchg_spi+0x2>
    return SPDR;
    3660:	8e b5       	in	r24, 0x2e	; 46
}
    3662:	08 95       	ret

00003664 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
    BYTE* p,    /* Data read buffer */
    UINT cnt    /* Size of data block */
)
{
    3664:	fc 01       	movw	r30, r24
    3666:	01 c0       	rjmp	.+2      	; 0x366a <rcvr_spi_multi+0x6>
        SPDR = 0xFF;
        loop_until_bit_is_set(SPSR, SPIF);
        *p++ = SPDR;
        SPDR = 0xFF;
        loop_until_bit_is_set(SPSR, SPIF);
        *p++ = SPDR;
    3668:	f9 01       	movw	r30, r18
    UINT cnt    /* Size of data block */
)
{
    do
    {
        SPDR = 0xFF;
    366a:	8f ef       	ldi	r24, 0xFF	; 255
    366c:	8e bd       	out	0x2e, r24	; 46
        loop_until_bit_is_set(SPSR, SPIF);
    366e:	0d b4       	in	r0, 0x2d	; 45
    3670:	07 fe       	sbrs	r0, 7
    3672:	fd cf       	rjmp	.-6      	; 0x366e <rcvr_spi_multi+0xa>
        *p++ = SPDR;
    3674:	8e b5       	in	r24, 0x2e	; 46
    3676:	80 83       	st	Z, r24
        SPDR = 0xFF;
    3678:	8f ef       	ldi	r24, 0xFF	; 255
    367a:	8e bd       	out	0x2e, r24	; 46
        loop_until_bit_is_set(SPSR, SPIF);
    367c:	0d b4       	in	r0, 0x2d	; 45
    367e:	07 fe       	sbrs	r0, 7
    3680:	fd cf       	rjmp	.-6      	; 0x367c <rcvr_spi_multi+0x18>
        *p++ = SPDR;
    3682:	9f 01       	movw	r18, r30
    3684:	2e 5f       	subi	r18, 0xFE	; 254
    3686:	3f 4f       	sbci	r19, 0xFF	; 255
    3688:	8e b5       	in	r24, 0x2e	; 46
    368a:	81 83       	std	Z+1, r24	; 0x01
    } while (cnt -= 2);
    368c:	62 50       	subi	r22, 0x02	; 2
    368e:	71 09       	sbc	r23, r1
    3690:	59 f7       	brne	.-42     	; 0x3668 <rcvr_spi_multi+0x4>
}
    3692:	08 95       	ret

00003694 <xmit_spi_multi>:
static
void xmit_spi_multi (
    const BYTE* p,  /* Data block to be sent */
    UINT cnt        /* Size of data block */
)
{
    3694:	fc 01       	movw	r30, r24
    3696:	01 c0       	rjmp	.+2      	; 0x369a <xmit_spi_multi+0x6>
    do
    {
        SPDR = *p++;
        loop_until_bit_is_set(SPSR, SPIF);
        SPDR = *p++;
    3698:	f9 01       	movw	r30, r18
    UINT cnt        /* Size of data block */
)
{
    do
    {
        SPDR = *p++;
    369a:	80 81       	ld	r24, Z
    369c:	8e bd       	out	0x2e, r24	; 46
        loop_until_bit_is_set(SPSR, SPIF);
    369e:	0d b4       	in	r0, 0x2d	; 45
    36a0:	07 fe       	sbrs	r0, 7
    36a2:	fd cf       	rjmp	.-6      	; 0x369e <xmit_spi_multi+0xa>
        SPDR = *p++;
    36a4:	9f 01       	movw	r18, r30
    36a6:	2e 5f       	subi	r18, 0xFE	; 254
    36a8:	3f 4f       	sbci	r19, 0xFF	; 255
    36aa:	81 81       	ldd	r24, Z+1	; 0x01
    36ac:	8e bd       	out	0x2e, r24	; 46
        loop_until_bit_is_set(SPSR, SPIF);
    36ae:	0d b4       	in	r0, 0x2d	; 45
    36b0:	07 fe       	sbrs	r0, 7
    36b2:	fd cf       	rjmp	.-6      	; 0x36ae <xmit_spi_multi+0x1a>
    } while (cnt -= 2);
    36b4:	62 50       	subi	r22, 0x02	; 2
    36b6:	71 09       	sbc	r23, r1
    36b8:	79 f7       	brne	.-34     	; 0x3698 <xmit_spi_multi+0x4>
}
    36ba:	08 95       	ret

000036bc <wait_ready>:
)
{
    BYTE d;


    wt /= 10;
    36bc:	9c 01       	movw	r18, r24
    36be:	ad ec       	ldi	r26, 0xCD	; 205
    36c0:	bc ec       	ldi	r27, 0xCC	; 204
    36c2:	0e 94 2e 33 	call	0x665c	; 0x665c <__umulhisi3>
    36c6:	96 95       	lsr	r25
    36c8:	87 95       	ror	r24
    36ca:	96 95       	lsr	r25
    36cc:	87 95       	ror	r24
    36ce:	96 95       	lsr	r25
    36d0:	87 95       	ror	r24
    cli();
    36d2:	f8 94       	cli
    Timer2 = wt;
    36d4:	90 93 ce 06 	sts	0x06CE, r25	; 0x8006ce <Timer2+0x1>
    36d8:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <Timer2>
    sei();
    36dc:	78 94       	sei
    do
    {
        d = xchg_spi(0xFF);
    36de:	8f ef       	ldi	r24, 0xFF	; 255
    36e0:	bb df       	rcall	.-138    	; 0x3658 <xchg_spi>
        cli();
    36e2:	f8 94       	cli
        wt = Timer2;
    36e4:	20 91 cd 06 	lds	r18, 0x06CD	; 0x8006cd <Timer2>
    36e8:	30 91 ce 06 	lds	r19, 0x06CE	; 0x8006ce <Timer2+0x1>
        sei();
    36ec:	78 94       	sei
    } while (d != 0xFF && wt);
    36ee:	8f 3f       	cpi	r24, 0xFF	; 255
    36f0:	11 f0       	breq	.+4      	; 0x36f6 <wait_ready+0x3a>
    36f2:	23 2b       	or	r18, r19
    36f4:	a1 f7       	brne	.-24     	; 0x36de <wait_ready+0x22>

    return (d == 0xFF) ? 1 : 0;
    36f6:	91 e0       	ldi	r25, 0x01	; 1
    36f8:	8f 3f       	cpi	r24, 0xFF	; 255
    36fa:	09 f0       	breq	.+2      	; 0x36fe <wait_ready+0x42>
    36fc:	90 e0       	ldi	r25, 0x00	; 0
}
    36fe:	89 2f       	mov	r24, r25
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	08 95       	ret

00003704 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    CS_HIGH();      /* Set CS# high */
    3704:	85 b1       	in	r24, 0x05	; 5
    3706:	81 60       	ori	r24, 0x01	; 1
    3708:	85 b9       	out	0x05, r24	; 5
    xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
    370a:	8f ef       	ldi	r24, 0xFF	; 255
    370c:	a5 cf       	rjmp	.-182    	; 0x3658 <xchg_spi>
    370e:	08 95       	ret

00003710 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)   /* 1:Successful, 0:Timeout */
{
    3710:	cf 93       	push	r28
    3712:	df 93       	push	r29
    CS_LOW();       /* Set CS# low */
    3714:	85 b1       	in	r24, 0x05	; 5
    3716:	8e 7f       	andi	r24, 0xFE	; 254
    3718:	85 b9       	out	0x05, r24	; 5
    xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
    371a:	8f ef       	ldi	r24, 0xFF	; 255
    371c:	9d df       	rcall	.-198    	; 0x3658 <xchg_spi>

    if (wait_ready(500))
    371e:	84 ef       	ldi	r24, 0xF4	; 244
    3720:	91 e0       	ldi	r25, 0x01	; 1
    3722:	cc df       	rcall	.-104    	; 0x36bc <wait_ready>
    3724:	ec 01       	movw	r28, r24
    3726:	89 2b       	or	r24, r25
    {
        return 1;    /* Leading busy check: Wait for card ready */
    }

    deselect();     /* Timeout */
    3728:	11 f4       	brne	.+4      	; 0x372e <select+0x1e>
    372a:	ec df       	rcall	.-40     	; 0x3704 <deselect>
    return 0;
    372c:	02 c0       	rjmp	.+4      	; 0x3732 <select+0x22>
    CS_LOW();       /* Set CS# low */
    xchg_spi(0xFF); /* Dummy clock (force DO enabled) */

    if (wait_ready(500))
    {
        return 1;    /* Leading busy check: Wait for card ready */
    372e:	c1 e0       	ldi	r28, 0x01	; 1
    3730:	d0 e0       	ldi	r29, 0x00	; 0
    }

    deselect();     /* Timeout */
    return 0;
}
    3732:	ce 01       	movw	r24, r28
    3734:	df 91       	pop	r29
    3736:	cf 91       	pop	r28
    3738:	08 95       	ret

0000373a <rcvr_datablock>:
static
int rcvr_datablock (
    BYTE* buff,         /* Data buffer to store received data */
    UINT btr            /* Byte count (must be multiple of 4) */
)
{
    373a:	0f 93       	push	r16
    373c:	1f 93       	push	r17
    373e:	cf 93       	push	r28
    3740:	df 93       	push	r29
    3742:	ec 01       	movw	r28, r24
    3744:	8b 01       	movw	r16, r22
    BYTE token;


    Timer1 = 20;
    3746:	84 e1       	ldi	r24, 0x14	; 20
    3748:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <Timer1>
    do                              /* Wait for data packet in timeout of 200ms */
    {
        token = xchg_spi(0xFF);
    374c:	8f ef       	ldi	r24, 0xFF	; 255
    374e:	84 df       	rcall	.-248    	; 0x3658 <xchg_spi>
    } while ((token == 0xFF) && Timer1);
    3750:	8f 3f       	cpi	r24, 0xFF	; 255
    3752:	21 f4       	brne	.+8      	; 0x375c <rcvr_datablock+0x22>
    3754:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <Timer1>
    3758:	91 11       	cpse	r25, r1
    375a:	f8 cf       	rjmp	.-16     	; 0x374c <rcvr_datablock+0x12>
    if (token != 0xFE)
    375c:	8e 3f       	cpi	r24, 0xFE	; 254
    375e:	51 f4       	brne	.+20     	; 0x3774 <rcvr_datablock+0x3a>
    {
        return 0;    /* If not valid data token, retutn with error */
    }

    rcvr_spi_multi(buff, btr);      /* Receive the data block into buffer */
    3760:	b8 01       	movw	r22, r16
    3762:	ce 01       	movw	r24, r28
    3764:	7f df       	rcall	.-258    	; 0x3664 <rcvr_spi_multi>
    xchg_spi(0xFF);                 /* Discard CRC */
    3766:	8f ef       	ldi	r24, 0xFF	; 255
    3768:	77 df       	rcall	.-274    	; 0x3658 <xchg_spi>
    xchg_spi(0xFF);
    376a:	8f ef       	ldi	r24, 0xFF	; 255
    376c:	75 df       	rcall	.-278    	; 0x3658 <xchg_spi>
    376e:	81 e0       	ldi	r24, 0x01	; 1

    return 1;                       /* Return with success */
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	02 c0       	rjmp	.+4      	; 0x3778 <rcvr_datablock+0x3e>
    3774:	80 e0       	ldi	r24, 0x00	; 0
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && Timer1);
    if (token != 0xFE)
    {
        return 0;    /* If not valid data token, retutn with error */
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	df 91       	pop	r29
    rcvr_spi_multi(buff, btr);      /* Receive the data block into buffer */
    xchg_spi(0xFF);                 /* Discard CRC */
    xchg_spi(0xFF);

    return 1;                       /* Return with success */
}
    377a:	cf 91       	pop	r28
    377c:	1f 91       	pop	r17
    377e:	0f 91       	pop	r16
    3780:	08 95       	ret

00003782 <xmit_datablock>:
    3782:	0f 93       	push	r16
static
int xmit_datablock (
    const BYTE* buff,   /* 512 byte data block to be transmitted */
    BYTE token          /* Data/Stop token */
)
{
    3784:	1f 93       	push	r17
    3786:	cf 93       	push	r28
    3788:	8c 01       	movw	r16, r24
    378a:	c6 2f       	mov	r28, r22
    BYTE resp;


    if (!wait_ready(500))
    378c:	84 ef       	ldi	r24, 0xF4	; 244
    378e:	91 e0       	ldi	r25, 0x01	; 1
    3790:	95 df       	rcall	.-214    	; 0x36bc <wait_ready>
    3792:	00 97       	sbiw	r24, 0x00	; 0
    3794:	c1 f0       	breq	.+48     	; 0x37c6 <xmit_datablock+0x44>
    {
        return 0;    /* Leading busy check: Wait for card ready to accept data block */
    }

    xchg_spi(token);                    /* Xmit data token */
    3796:	8c 2f       	mov	r24, r28
    3798:	5f df       	rcall	.-322    	; 0x3658 <xchg_spi>
    if (token == 0xFD)
    379a:	cd 3f       	cpi	r28, 0xFD	; 253
    379c:	91 f0       	breq	.+36     	; 0x37c2 <xmit_datablock+0x40>
    {
        return 1;    /* Do not send data if token is StopTran */
    }

    xmit_spi_multi(buff, 512);          /* Data */
    379e:	60 e0       	ldi	r22, 0x00	; 0
    37a0:	72 e0       	ldi	r23, 0x02	; 2
    37a2:	c8 01       	movw	r24, r16
    xchg_spi(0xFF);
    37a4:	77 df       	rcall	.-274    	; 0x3694 <xmit_spi_multi>
    37a6:	8f ef       	ldi	r24, 0xFF	; 255
    xchg_spi(0xFF);     /* Dummy CRC */
    37a8:	57 df       	rcall	.-338    	; 0x3658 <xchg_spi>
    37aa:	8f ef       	ldi	r24, 0xFF	; 255
    37ac:	55 df       	rcall	.-342    	; 0x3658 <xchg_spi>

    resp = xchg_spi(0xFF);              /* Receive data resp */
    37ae:	8f ef       	ldi	r24, 0xFF	; 255
    37b0:	53 df       	rcall	.-346    	; 0x3658 <xchg_spi>
    37b2:	8f 71       	andi	r24, 0x1F	; 31

    return (resp & 0x1F) == 0x05 ? 1 : 0;   /* Data was accepted or not */
    37b4:	91 e0       	ldi	r25, 0x01	; 1
    37b6:	85 30       	cpi	r24, 0x05	; 5
    37b8:	09 f0       	breq	.+2      	; 0x37bc <xmit_datablock+0x3a>
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	89 2f       	mov	r24, r25
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	02 c0       	rjmp	.+4      	; 0x37c6 <xmit_datablock+0x44>
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    }

    xchg_spi(token);                    /* Xmit data token */
    if (token == 0xFD)
    {
        return 1;    /* Do not send data if token is StopTran */
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	cf 91       	pop	r28
    resp = xchg_spi(0xFF);              /* Receive data resp */

    return (resp & 0x1F) == 0x05 ? 1 : 0;   /* Data was accepted or not */

    /* Busy check is done at next transmission */
}
    37c8:	1f 91       	pop	r17
    37ca:	0f 91       	pop	r16
    37cc:	08 95       	ret

000037ce <send_cmd>:
    37ce:	ff 92       	push	r15
static
BYTE send_cmd (     /* Returns R1 resp (bit7==1:Send failed) */
    BYTE cmd,       /* Command index */
    DWORD arg       /* Argument */
)
{
    37d0:	0f 93       	push	r16
    37d2:	1f 93       	push	r17
    37d4:	cf 93       	push	r28
    37d6:	df 93       	push	r29
    37d8:	c8 2f       	mov	r28, r24
    37da:	d4 2f       	mov	r29, r20
    37dc:	15 2f       	mov	r17, r21
    37de:	06 2f       	mov	r16, r22
    37e0:	f7 2e       	mov	r15, r23
    BYTE n, res;


    if (cmd & 0x80)     /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    37e2:	88 23       	and	r24, r24
    37e4:	44 f4       	brge	.+16     	; 0x37f6 <send_cmd+0x28>
    {
        cmd &= 0x7F;
    37e6:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
    37e8:	40 e0       	ldi	r20, 0x00	; 0
    37ea:	50 e0       	ldi	r21, 0x00	; 0
    37ec:	ba 01       	movw	r22, r20
    37ee:	87 e3       	ldi	r24, 0x37	; 55
    37f0:	ee df       	rcall	.-36     	; 0x37ce <send_cmd>
        if (res > 1)
    37f2:	82 30       	cpi	r24, 0x02	; 2
    37f4:	38 f5       	brcc	.+78     	; 0x3844 <send_cmd+0x76>
            return res;
        }
    }

    /* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    37f6:	cc 30       	cpi	r28, 0x0C	; 12
    {
        deselect();
    37f8:	21 f0       	breq	.+8      	; 0x3802 <send_cmd+0x34>
        if (!select())
    37fa:	84 df       	rcall	.-248    	; 0x3704 <deselect>
    37fc:	89 df       	rcall	.-238    	; 0x3710 <select>
    37fe:	89 2b       	or	r24, r25
            return 0xFF;
        }
    }

    /* Send command packet */
    xchg_spi(0x40 | cmd);               /* Start + Command index */
    3800:	01 f1       	breq	.+64     	; 0x3842 <send_cmd+0x74>
    3802:	8c 2f       	mov	r24, r28
    3804:	80 64       	ori	r24, 0x40	; 64
    xchg_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
    3806:	28 df       	rcall	.-432    	; 0x3658 <xchg_spi>
    3808:	8f 2d       	mov	r24, r15
    xchg_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
    380a:	26 df       	rcall	.-436    	; 0x3658 <xchg_spi>
    380c:	80 2f       	mov	r24, r16
    xchg_spi((BYTE)(arg >> 8));         /* Argument[15..8] */
    380e:	24 df       	rcall	.-440    	; 0x3658 <xchg_spi>
    3810:	81 2f       	mov	r24, r17
    3812:	22 df       	rcall	.-444    	; 0x3658 <xchg_spi>
    xchg_spi((BYTE)arg);                /* Argument[7..0] */
    3814:	8d 2f       	mov	r24, r29
    3816:	20 df       	rcall	.-448    	; 0x3658 <xchg_spi>
    3818:	cc 23       	and	r28, r28
    n = 0x01;                           /* Dummy CRC + Stop */
    if (cmd == CMD0)
    381a:	11 f0       	breq	.+4      	; 0x3820 <send_cmd+0x52>
    xchg_spi(0x40 | cmd);               /* Start + Command index */
    xchg_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
    xchg_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));         /* Argument[15..8] */
    xchg_spi((BYTE)arg);                /* Argument[7..0] */
    n = 0x01;                           /* Dummy CRC + Stop */
    381c:	81 e0       	ldi	r24, 0x01	; 1
    381e:	01 c0       	rjmp	.+2      	; 0x3822 <send_cmd+0x54>
    if (cmd == CMD0)
    {
        n = 0x95;    /* Valid CRC for CMD0(0) + Stop */
    }
    if (cmd == CMD8)
    3820:	85 e9       	ldi	r24, 0x95	; 149
    3822:	c8 30       	cpi	r28, 0x08	; 8
    {
        n = 0x87;    /* Valid CRC for CMD8(0x1AA) Stop */
    }
    xchg_spi(n);
    3824:	09 f4       	brne	.+2      	; 0x3828 <send_cmd+0x5a>
    3826:	87 e8       	ldi	r24, 0x87	; 135

    /* Receive command response */
    if (cmd == CMD12)
    3828:	17 df       	rcall	.-466    	; 0x3658 <xchg_spi>
    382a:	cc 30       	cpi	r28, 0x0C	; 12
    {
        xchg_spi(0xFF);    /* Skip a stuff byte when stop reading */
    382c:	11 f4       	brne	.+4      	; 0x3832 <send_cmd+0x64>
    382e:	8f ef       	ldi	r24, 0xFF	; 255
    3830:	13 df       	rcall	.-474    	; 0x3658 <xchg_spi>
    {
        n = 0x95;    /* Valid CRC for CMD0(0) + Stop */
    }
    if (cmd == CMD8)
    {
        n = 0x87;    /* Valid CRC for CMD8(0x1AA) Stop */
    3832:	ca e0       	ldi	r28, 0x0A	; 10
        xchg_spi(0xFF);    /* Skip a stuff byte when stop reading */
    }
    n = 10;                             /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    3834:	8f ef       	ldi	r24, 0xFF	; 255
    3836:	10 df       	rcall	.-480    	; 0x3658 <xchg_spi>
    3838:	88 23       	and	r24, r24
    } while ((res & 0x80) && --n);
    383a:	24 f4       	brge	.+8      	; 0x3844 <send_cmd+0x76>
    383c:	c1 50       	subi	r28, 0x01	; 1
    383e:	d1 f7       	brne	.-12     	; 0x3834 <send_cmd+0x66>
    3840:	01 c0       	rjmp	.+2      	; 0x3844 <send_cmd+0x76>
    3842:	8f ef       	ldi	r24, 0xFF	; 255
    if (cmd != CMD12)
    {
        deselect();
        if (!select())
        {
            return 0xFF;
    3844:	df 91       	pop	r29
    {
        res = xchg_spi(0xFF);
    } while ((res & 0x80) && --n);

    return res;         /* Return with the response value */
}
    3846:	cf 91       	pop	r28
    3848:	1f 91       	pop	r17
    384a:	0f 91       	pop	r16
    384c:	ff 90       	pop	r15
    384e:	08 95       	ret

00003850 <power_on>:
    3850:	87 e0       	ldi	r24, 0x07	; 7
    //To be filled


    /* Configure MOSI/MISO/SCLK/CS pins */
    //CHECK THIS
    PORT_SPI = (1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_CS);
    3852:	85 b9       	out	0x05, r24	; 5
    // modified for Dreg for SD power
    DDR_SPI |= (1 << DD_MOSI) | (1 << DD_SCK) | (1 << DD_CS);
    3854:	84 b1       	in	r24, 0x04	; 4
    3856:	87 60       	ori	r24, 0x07	; 7
    3858:	84 b9       	out	0x04, r24	; 4

    /* Enable SPI module in SPI mode 0 */
    SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    385a:	83 e5       	ldi	r24, 0x53	; 83
    385c:	8c bd       	out	0x2c, r24	; 44
    385e:	08 95       	ret

00003860 <mmc_disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_initialize (void)
{
    3860:	ef 92       	push	r14
    3862:	ff 92       	push	r15
    3864:	0f 93       	push	r16
    3866:	1f 93       	push	r17
    3868:	cf 93       	push	r28
    386a:	df 93       	push	r29
    386c:	00 d0       	rcall	.+0      	; 0x386e <mmc_disk_initialize+0xe>
    386e:	00 d0       	rcall	.+0      	; 0x3870 <mmc_disk_initialize+0x10>
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
    BYTE n, cmd, ty, ocr[4];


    power_off();                        /* Turn off the socket power to reset the card */
    3874:	e9 de       	rcall	.-558    	; 0x3648 <power_off>
    for (Timer1 = 10; Timer1; ) ;       /* Wait for 100ms */
    3876:	8a e0       	ldi	r24, 0x0A	; 10
    3878:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <Timer1>
    387c:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <Timer1>
    3880:	81 11       	cpse	r24, r1
    3882:	fc cf       	rjmp	.-8      	; 0x387c <mmc_disk_initialize+0x1c>
    if (Stat & STA_NODISK)
    3884:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <Stat>
    3888:	81 ff       	sbrs	r24, 1
    388a:	03 c0       	rjmp	.+6      	; 0x3892 <mmc_disk_initialize+0x32>
    {
        return Stat;    /* No card in the socket? */
    388c:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <Stat>
    }

    power_on();                         /* Turn on the socket power */
    3890:	a5 c0       	rjmp	.+330    	; 0x39dc <mmc_disk_initialize+0x17c>
    3892:	de df       	rcall	.-68     	; 0x3850 <power_on>
    FCLK_SLOW();
    3894:	82 e5       	ldi	r24, 0x52	; 82
    3896:	8c bd       	out	0x2c, r24	; 44
    for (n = 10; n; n--)
    3898:	1a e0       	ldi	r17, 0x0A	; 10
    {
        xchg_spi(0xFF);    /* 80 dummy clocks */
    389a:	03 c0       	rjmp	.+6      	; 0x38a2 <mmc_disk_initialize+0x42>
    389c:	8f ef       	ldi	r24, 0xFF	; 255
    389e:	dc de       	rcall	.-584    	; 0x3658 <xchg_spi>
        return Stat;    /* No card in the socket? */
    }

    power_on();                         /* Turn on the socket power */
    FCLK_SLOW();
    for (n = 10; n; n--)
    38a0:	11 50       	subi	r17, 0x01	; 1
    38a2:	11 11       	cpse	r17, r1
    38a4:	fb cf       	rjmp	.-10     	; 0x389c <mmc_disk_initialize+0x3c>
    {
        xchg_spi(0xFF);    /* 80 dummy clocks */
    }

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)             /* Put the card SPI mode */
    38a6:	40 e0       	ldi	r20, 0x00	; 0
    38a8:	50 e0       	ldi	r21, 0x00	; 0
    38aa:	ba 01       	movw	r22, r20
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	8f df       	rcall	.-226    	; 0x37ce <send_cmd>
    38b0:	81 30       	cpi	r24, 0x01	; 1
    38b2:	09 f0       	breq	.+2      	; 0x38b6 <mmc_disk_initialize+0x56>
    38b4:	76 c0       	rjmp	.+236    	; 0x39a2 <mmc_disk_initialize+0x142>
    {
        Timer1 = 100;                       /* Initialization timeout of 1000 msec */
    38b6:	84 e6       	ldi	r24, 0x64	; 100
    38b8:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <Timer1>
        if (send_cmd(CMD8, 0x1AA) == 1)     /* Is the card SDv2? */
    38bc:	4a ea       	ldi	r20, 0xAA	; 170
    38be:	51 e0       	ldi	r21, 0x01	; 1
    38c0:	60 e0       	ldi	r22, 0x00	; 0
    38c2:	70 e0       	ldi	r23, 0x00	; 0
    38c4:	88 e0       	ldi	r24, 0x08	; 8
    38c6:	83 df       	rcall	.-250    	; 0x37ce <send_cmd>
    38c8:	81 30       	cpi	r24, 0x01	; 1
    38ca:	09 f0       	breq	.+2      	; 0x38ce <mmc_disk_initialize+0x6e>
    38cc:	46 c0       	rjmp	.+140    	; 0x395a <mmc_disk_initialize+0xfa>
        {
            for (n = 0; n < 4; n++)
            {
                ocr[n] = xchg_spi(0xFF);    /* Get trailing return value of R7 resp */
    38ce:	0d c0       	rjmp	.+26     	; 0x38ea <mmc_disk_initialize+0x8a>
    38d0:	e0 2e       	mov	r14, r16
    38d2:	f1 2c       	mov	r15, r1
    38d4:	8f ef       	ldi	r24, 0xFF	; 255
    38d6:	c0 de       	rcall	.-640    	; 0x3658 <xchg_spi>
    38d8:	e1 e0       	ldi	r30, 0x01	; 1
    38da:	f0 e0       	ldi	r31, 0x00	; 0
    38dc:	ec 0f       	add	r30, r28
    38de:	fd 1f       	adc	r31, r29
    38e0:	ee 0d       	add	r30, r14
    38e2:	ff 1d       	adc	r31, r15
    38e4:	80 83       	st	Z, r24
    if (send_cmd(CMD0, 0) == 1)             /* Put the card SPI mode */
    {
        Timer1 = 100;                       /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)     /* Is the card SDv2? */
        {
            for (n = 0; n < 4; n++)
    38e6:	0f 5f       	subi	r16, 0xFF	; 255
    38e8:	01 c0       	rjmp	.+2      	; 0x38ec <mmc_disk_initialize+0x8c>
    38ea:	01 2f       	mov	r16, r17
    38ec:	04 30       	cpi	r16, 0x04	; 4
    38ee:	80 f3       	brcs	.-32     	; 0x38d0 <mmc_disk_initialize+0x70>
            {
                ocr[n] = xchg_spi(0xFF);    /* Get trailing return value of R7 resp */
            }
            if (ocr[2] == 0x01
    38f0:	8b 81       	ldd	r24, Y+3	; 0x03
    38f2:	81 30       	cpi	r24, 0x01	; 1
    38f4:	09 f0       	breq	.+2      	; 0x38f8 <mmc_disk_initialize+0x98>
    38f6:	57 c0       	rjmp	.+174    	; 0x39a6 <mmc_disk_initialize+0x146>
                    && ocr[3] == 0xAA)               /* The card can work at vdd range of 2.7-3.6V */
    38f8:	8c 81       	ldd	r24, Y+4	; 0x04
    38fa:	8a 3a       	cpi	r24, 0xAA	; 170
    38fc:	09 f0       	breq	.+2      	; 0x3900 <mmc_disk_initialize+0xa0>
    38fe:	55 c0       	rjmp	.+170    	; 0x39aa <mmc_disk_initialize+0x14a>
            {
                while (Timer1
    3900:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <Timer1>
    3904:	88 23       	and	r24, r24
                        && send_cmd(ACMD41, 1UL << 30));  /* Wait for leaving idle state (ACMD41 with HCS bit) */
    3906:	41 f0       	breq	.+16     	; 0x3918 <mmc_disk_initialize+0xb8>
    3908:	40 e0       	ldi	r20, 0x00	; 0
    390a:	50 e0       	ldi	r21, 0x00	; 0
    390c:	60 e0       	ldi	r22, 0x00	; 0
    390e:	70 e4       	ldi	r23, 0x40	; 64
    3910:	89 ea       	ldi	r24, 0xA9	; 169
    3912:	5d df       	rcall	.-326    	; 0x37ce <send_cmd>
    3914:	81 11       	cpse	r24, r1
    3916:	f4 cf       	rjmp	.-24     	; 0x3900 <mmc_disk_initialize+0xa0>
                if (Timer1 && send_cmd(CMD58, 0) == 0)          /* Check CCS bit in the OCR */
    3918:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <Timer1>
    391c:	88 23       	and	r24, r24
    391e:	09 f4       	brne	.+2      	; 0x3922 <mmc_disk_initialize+0xc2>
    3920:	46 c0       	rjmp	.+140    	; 0x39ae <mmc_disk_initialize+0x14e>
    3922:	40 e0       	ldi	r20, 0x00	; 0
    3924:	50 e0       	ldi	r21, 0x00	; 0
    3926:	ba 01       	movw	r22, r20
    3928:	8a e3       	ldi	r24, 0x3A	; 58
    392a:	51 df       	rcall	.-350    	; 0x37ce <send_cmd>
    392c:	88 23       	and	r24, r24
    for (n = 10; n; n--)
    {
        xchg_spi(0xFF);    /* 80 dummy clocks */
    }

    ty = 0;
    392e:	71 f0       	breq	.+28     	; 0x394c <mmc_disk_initialize+0xec>
    3930:	10 e0       	ldi	r17, 0x00	; 0
                        && send_cmd(ACMD41, 1UL << 30));  /* Wait for leaving idle state (ACMD41 with HCS bit) */
                if (Timer1 && send_cmd(CMD58, 0) == 0)          /* Check CCS bit in the OCR */
                {
                    for (n = 0; n < 4; n++)
                    {
                        ocr[n] = xchg_spi(0xFF);
    3932:	44 c0       	rjmp	.+136    	; 0x39bc <mmc_disk_initialize+0x15c>
    3934:	e1 2e       	mov	r14, r17
    3936:	f1 2c       	mov	r15, r1
    3938:	8f ef       	ldi	r24, 0xFF	; 255
    393a:	8e de       	rcall	.-740    	; 0x3658 <xchg_spi>
    393c:	e1 e0       	ldi	r30, 0x01	; 1
    393e:	f0 e0       	ldi	r31, 0x00	; 0
    3940:	ec 0f       	add	r30, r28
    3942:	fd 1f       	adc	r31, r29
    3944:	ee 0d       	add	r30, r14
    3946:	ff 1d       	adc	r31, r15
    3948:	80 83       	st	Z, r24
            {
                while (Timer1
                        && send_cmd(ACMD41, 1UL << 30));  /* Wait for leaving idle state (ACMD41 with HCS bit) */
                if (Timer1 && send_cmd(CMD58, 0) == 0)          /* Check CCS bit in the OCR */
                {
                    for (n = 0; n < 4; n++)
    394a:	1f 5f       	subi	r17, 0xFF	; 255
    394c:	14 30       	cpi	r17, 0x04	; 4
    394e:	90 f3       	brcs	.-28     	; 0x3934 <mmc_disk_initialize+0xd4>
                    {
                        ocr[n] = xchg_spi(0xFF);
                    }
                    ty = (ocr[0] & 0x40) ? CT_SDC2 | CT_BLOCK :
    3950:	89 81       	ldd	r24, Y+1	; 0x01
    3952:	86 ff       	sbrs	r24, 6
    3954:	2e c0       	rjmp	.+92     	; 0x39b2 <mmc_disk_initialize+0x152>
    3956:	18 e1       	ldi	r17, 0x18	; 24
                }
            }
        }
        else                                /* SDv1 or MMCv3 */
        {
            if (send_cmd(ACMD41, 0) <= 1)
    3958:	31 c0       	rjmp	.+98     	; 0x39bc <mmc_disk_initialize+0x15c>
    395a:	40 e0       	ldi	r20, 0x00	; 0
    395c:	50 e0       	ldi	r21, 0x00	; 0
    395e:	ba 01       	movw	r22, r20
    3960:	89 ea       	ldi	r24, 0xA9	; 169
    3962:	35 df       	rcall	.-406    	; 0x37ce <send_cmd>
    3964:	82 30       	cpi	r24, 0x02	; 2
    3966:	18 f4       	brcc	.+6      	; 0x396e <mmc_disk_initialize+0x10e>
            {
                ty = CT_SDC1;
    3968:	14 e0       	ldi	r17, 0x04	; 4
                cmd = ACMD41; /* SDv1 */
    396a:	09 ea       	ldi	r16, 0xA9	; 169
    396c:	02 c0       	rjmp	.+4      	; 0x3972 <mmc_disk_initialize+0x112>
            }
            else
            {
                ty = CT_MMC3;
                cmd = CMD1;   /* MMCv3 */
    396e:	11 e0       	ldi	r17, 0x01	; 1
            }
            while (Timer1 && send_cmd(cmd, 0));         /* Wait for leaving idle state */
    3970:	01 e0       	ldi	r16, 0x01	; 1
    3972:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <Timer1>
    3976:	88 23       	and	r24, r24
    3978:	39 f0       	breq	.+14     	; 0x3988 <mmc_disk_initialize+0x128>
    397a:	40 e0       	ldi	r20, 0x00	; 0
    397c:	50 e0       	ldi	r21, 0x00	; 0
    397e:	ba 01       	movw	r22, r20
    3980:	80 2f       	mov	r24, r16
    3982:	25 df       	rcall	.-438    	; 0x37ce <send_cmd>
    3984:	81 11       	cpse	r24, r1
            if (!Timer1 || send_cmd(CMD16, 512) != 0)   /* Set R/W block length to 512 */
    3986:	f5 cf       	rjmp	.-22     	; 0x3972 <mmc_disk_initialize+0x112>
    3988:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <Timer1>
    398c:	88 23       	and	r24, r24
    398e:	99 f0       	breq	.+38     	; 0x39b6 <mmc_disk_initialize+0x156>
    3990:	40 e0       	ldi	r20, 0x00	; 0
    3992:	52 e0       	ldi	r21, 0x02	; 2
    3994:	60 e0       	ldi	r22, 0x00	; 0
    3996:	70 e0       	ldi	r23, 0x00	; 0
    3998:	80 e1       	ldi	r24, 0x10	; 16
    399a:	19 df       	rcall	.-462    	; 0x37ce <send_cmd>
    399c:	81 11       	cpse	r24, r1
    399e:	0d c0       	rjmp	.+26     	; 0x39ba <mmc_disk_initialize+0x15a>
    39a0:	0d c0       	rjmp	.+26     	; 0x39bc <mmc_disk_initialize+0x15c>
    for (n = 10; n; n--)
    {
        xchg_spi(0xFF);    /* 80 dummy clocks */
    }

    ty = 0;
    39a2:	10 e0       	ldi	r17, 0x00	; 0
    39a4:	0b c0       	rjmp	.+22     	; 0x39bc <mmc_disk_initialize+0x15c>
    39a6:	10 e0       	ldi	r17, 0x00	; 0
    39a8:	09 c0       	rjmp	.+18     	; 0x39bc <mmc_disk_initialize+0x15c>
    39aa:	10 e0       	ldi	r17, 0x00	; 0
    39ac:	07 c0       	rjmp	.+14     	; 0x39bc <mmc_disk_initialize+0x15c>
    39ae:	10 e0       	ldi	r17, 0x00	; 0
                {
                    for (n = 0; n < 4; n++)
                    {
                        ocr[n] = xchg_spi(0xFF);
                    }
                    ty = (ocr[0] & 0x40) ? CT_SDC2 | CT_BLOCK :
    39b0:	05 c0       	rjmp	.+10     	; 0x39bc <mmc_disk_initialize+0x15c>
    39b2:	18 e0       	ldi	r17, 0x08	; 8
                cmd = CMD1;   /* MMCv3 */
            }
            while (Timer1 && send_cmd(cmd, 0));         /* Wait for leaving idle state */
            if (!Timer1 || send_cmd(CMD16, 512) != 0)   /* Set R/W block length to 512 */
            {
                ty = 0;
    39b4:	03 c0       	rjmp	.+6      	; 0x39bc <mmc_disk_initialize+0x15c>
    39b6:	10 e0       	ldi	r17, 0x00	; 0
    39b8:	01 c0       	rjmp	.+2      	; 0x39bc <mmc_disk_initialize+0x15c>
            }
        }
    }
    CardType = ty;
    39ba:	10 e0       	ldi	r17, 0x00	; 0
    deselect();
    39bc:	10 93 cc 06 	sts	0x06CC, r17	; 0x8006cc <CardType>

    if (ty)             /* Initialization succeded */
    39c0:	a1 de       	rcall	.-702    	; 0x3704 <deselect>
    39c2:	11 23       	and	r17, r17
    {
        Stat &= ~STA_NOINIT;        /* Clear STA_NOINIT */
    39c4:	41 f0       	breq	.+16     	; 0x39d6 <mmc_disk_initialize+0x176>
    39c6:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <Stat>
    39ca:	8e 7f       	andi	r24, 0xFE	; 254
    39cc:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <Stat>
        FCLK_FAST();
    39d0:	80 e5       	ldi	r24, 0x50	; 80
    39d2:	8c bd       	out	0x2c, r24	; 44
    }
    else                /* Initialization failed */
    {
        power_off();
    39d4:	01 c0       	rjmp	.+2      	; 0x39d8 <mmc_disk_initialize+0x178>
    39d6:	38 de       	rcall	.-912    	; 0x3648 <power_off>
    }

    return Stat;
    39d8:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <Stat>
}
    39dc:	0f 90       	pop	r0
    39de:	0f 90       	pop	r0
    39e0:	0f 90       	pop	r0
    39e2:	0f 90       	pop	r0
    39e4:	df 91       	pop	r29
    39e6:	cf 91       	pop	r28
    39e8:	1f 91       	pop	r17
    39ea:	0f 91       	pop	r16
    39ec:	ff 90       	pop	r15
    39ee:	ef 90       	pop	r14
    39f0:	08 95       	ret

000039f2 <mmc_disk_status>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_status (void)
{
    return Stat;
    39f2:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <Stat>
}
    39f6:	08 95       	ret

000039f8 <mmc_disk_read>:
DRESULT mmc_disk_read (
    BYTE* buff,         /* Pointer to the data buffer to store read data */
    LBA_t sector,       /* Start sector number (LBA) */
    UINT count          /* Sector count (1..128) */
)
{
    39f8:	ff 92       	push	r15
    39fa:	0f 93       	push	r16
    39fc:	1f 93       	push	r17
    39fe:	cf 93       	push	r28
    3a00:	df 93       	push	r29
    3a02:	8c 01       	movw	r16, r24
    3a04:	e9 01       	movw	r28, r18
    BYTE cmd;
    DWORD sect = (DWORD)sector;


    if (!count)
    3a06:	20 97       	sbiw	r28, 0x00	; 0
    3a08:	c1 f1       	breq	.+112    	; 0x3a7a <mmc_disk_read+0x82>
    {
        return RES_PARERR;
    }
    if (Stat & STA_NOINIT)
    3a0a:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <Stat>
    3a0e:	80 fd       	sbrc	r24, 0
    3a10:	36 c0       	rjmp	.+108    	; 0x3a7e <mmc_disk_read+0x86>
    {
        return RES_NOTRDY;
    }

    if (!(CardType & CT_BLOCK))
    3a12:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <CardType>
    3a16:	84 fd       	sbrc	r24, 4
    3a18:	09 c0       	rjmp	.+18     	; 0x3a2c <mmc_disk_read+0x34>
    {
        sect *= 512;    /* Convert to byte address if needed */
    3a1a:	03 2e       	mov	r0, r19
    3a1c:	39 e0       	ldi	r19, 0x09	; 9
    3a1e:	44 0f       	add	r20, r20
    3a20:	55 1f       	adc	r21, r21
    3a22:	66 1f       	adc	r22, r22
    3a24:	77 1f       	adc	r23, r23
    3a26:	3a 95       	dec	r19
    3a28:	d1 f7       	brne	.-12     	; 0x3a1e <mmc_disk_read+0x26>
    3a2a:	30 2d       	mov	r19, r0
    }

    cmd = count > 1 ? CMD18 :
    3a2c:	c2 30       	cpi	r28, 0x02	; 2
    3a2e:	d1 05       	cpc	r29, r1
    3a30:	28 f0       	brcs	.+10     	; 0x3a3c <mmc_disk_read+0x44>
    3a32:	0f 2e       	mov	r0, r31
    3a34:	f2 e1       	ldi	r31, 0x12	; 18
    3a36:	ff 2e       	mov	r15, r31
    3a38:	f0 2d       	mov	r31, r0
    3a3a:	04 c0       	rjmp	.+8      	; 0x3a44 <mmc_disk_read+0x4c>
    3a3c:	0f 2e       	mov	r0, r31
    3a3e:	f1 e1       	ldi	r31, 0x11	; 17
    3a40:	ff 2e       	mov	r15, r31
    3a42:	f0 2d       	mov	r31, r0
          CMD17;            /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    if (send_cmd(cmd, sect) == 0)
    3a44:	8f 2d       	mov	r24, r15
    3a46:	c3 de       	rcall	.-634    	; 0x37ce <send_cmd>
    3a48:	81 11       	cpse	r24, r1
    3a4a:	11 c0       	rjmp	.+34     	; 0x3a6e <mmc_disk_read+0x76>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    3a4c:	60 e0       	ldi	r22, 0x00	; 0
    3a4e:	72 e0       	ldi	r23, 0x02	; 2
    3a50:	c8 01       	movw	r24, r16
    3a52:	73 de       	rcall	.-794    	; 0x373a <rcvr_datablock>
    3a54:	89 2b       	or	r24, r25
    3a56:	19 f0       	breq	.+6      	; 0x3a5e <mmc_disk_read+0x66>
            {
                break;
            }
            buff += 512;
    3a58:	1e 5f       	subi	r17, 0xFE	; 254
        } while (--count);
    3a5a:	21 97       	sbiw	r28, 0x01	; 1
    3a5c:	b9 f7       	brne	.-18     	; 0x3a4c <mmc_disk_read+0x54>
        if (cmd == CMD18)
    3a5e:	82 e1       	ldi	r24, 0x12	; 18
    3a60:	f8 12       	cpse	r15, r24
    3a62:	05 c0       	rjmp	.+10     	; 0x3a6e <mmc_disk_read+0x76>
        {
            send_cmd(CMD12, 0);    /* STOP_TRANSMISSION */
    3a64:	40 e0       	ldi	r20, 0x00	; 0
    3a66:	50 e0       	ldi	r21, 0x00	; 0
    3a68:	ba 01       	movw	r22, r20
    3a6a:	8c e0       	ldi	r24, 0x0C	; 12
        }
    }
    deselect();
    3a6c:	b0 de       	rcall	.-672    	; 0x37ce <send_cmd>
    3a6e:	4a de       	rcall	.-876    	; 0x3704 <deselect>

    return count ? RES_ERROR : RES_OK;
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	cd 2b       	or	r28, r29
    3a74:	29 f4       	brne	.+10     	; 0x3a80 <mmc_disk_read+0x88>
    3a76:	80 e0       	ldi	r24, 0x00	; 0
    3a78:	03 c0       	rjmp	.+6      	; 0x3a80 <mmc_disk_read+0x88>
    DWORD sect = (DWORD)sector;


    if (!count)
    {
        return RES_PARERR;
    3a7a:	84 e0       	ldi	r24, 0x04	; 4
    3a7c:	01 c0       	rjmp	.+2      	; 0x3a80 <mmc_disk_read+0x88>
    }
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    3a7e:	83 e0       	ldi	r24, 0x03	; 3
        }
    }
    deselect();

    return count ? RES_ERROR : RES_OK;
}
    3a80:	df 91       	pop	r29
    3a82:	cf 91       	pop	r28
    3a84:	1f 91       	pop	r17
    3a86:	0f 91       	pop	r16
    3a88:	ff 90       	pop	r15
    3a8a:	08 95       	ret

00003a8c <mmc_disk_write>:
DRESULT mmc_disk_write (
    const BYTE* buff,   /* Pointer to the data to be written */
    LBA_t sector,       /* Start sector number (LBA) */
    UINT count          /* Sector count (1..128) */
)
{
    3a8c:	cf 92       	push	r12
    3a8e:	df 92       	push	r13
    3a90:	ef 92       	push	r14
    3a92:	ff 92       	push	r15
    3a94:	0f 93       	push	r16
    3a96:	1f 93       	push	r17
    3a98:	cf 93       	push	r28
    3a9a:	df 93       	push	r29
    3a9c:	8c 01       	movw	r16, r24
    3a9e:	6a 01       	movw	r12, r20
    3aa0:	7b 01       	movw	r14, r22
    3aa2:	e9 01       	movw	r28, r18
    DWORD sect = (DWORD)sector;


    if (!count)
    3aa4:	20 97       	sbiw	r28, 0x00	; 0
    3aa6:	09 f4       	brne	.+2      	; 0x3aaa <mmc_disk_write+0x1e>
    3aa8:	4b c0       	rjmp	.+150    	; 0x3b40 <mmc_disk_write+0xb4>
    {
        return RES_PARERR;
    }
    if (Stat & STA_NOINIT)
    3aaa:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <Stat>
    3aae:	80 fd       	sbrc	r24, 0
    3ab0:	49 c0       	rjmp	.+146    	; 0x3b44 <mmc_disk_write+0xb8>
    {
        return RES_NOTRDY;
    }
    if (Stat & STA_PROTECT)
    3ab2:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <Stat>
    3ab6:	82 fd       	sbrc	r24, 2
    3ab8:	47 c0       	rjmp	.+142    	; 0x3b48 <mmc_disk_write+0xbc>
    {
        return RES_WRPRT;
    }

    if (!(CardType & CT_BLOCK))
    3aba:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <CardType>
    3abe:	84 fd       	sbrc	r24, 4
    3ac0:	09 c0       	rjmp	.+18     	; 0x3ad4 <mmc_disk_write+0x48>
    {
        sect *= 512;    /* Convert to byte address if needed */
    3ac2:	0b 2e       	mov	r0, r27
    3ac4:	b9 e0       	ldi	r27, 0x09	; 9
    3ac6:	cc 0c       	add	r12, r12
    3ac8:	dd 1c       	adc	r13, r13
    3aca:	ee 1c       	adc	r14, r14
    3acc:	ff 1c       	adc	r15, r15
    3ace:	ba 95       	dec	r27
    3ad0:	d1 f7       	brne	.-12     	; 0x3ac6 <mmc_disk_write+0x3a>
    3ad2:	b0 2d       	mov	r27, r0
    }

    if (count == 1)     /* Single block write */
    3ad4:	c1 30       	cpi	r28, 0x01	; 1
    3ad6:	d1 05       	cpc	r29, r1
    3ad8:	61 f4       	brne	.+24     	; 0x3af2 <mmc_disk_write+0x66>
    {
        if ((send_cmd(CMD24, sect) == 0)    /* WRITE_BLOCK */
    3ada:	b7 01       	movw	r22, r14
    3adc:	a6 01       	movw	r20, r12
    3ade:	88 e1       	ldi	r24, 0x18	; 24
    3ae0:	76 de       	rcall	.-788    	; 0x37ce <send_cmd>
    3ae2:	81 11       	cpse	r24, r1
    3ae4:	27 c0       	rjmp	.+78     	; 0x3b34 <mmc_disk_write+0xa8>
                && xmit_datablock(buff, 0xFE))
    3ae6:	6e ef       	ldi	r22, 0xFE	; 254
    3ae8:	c8 01       	movw	r24, r16
    3aea:	4b de       	rcall	.-874    	; 0x3782 <xmit_datablock>
    3aec:	89 2b       	or	r24, r25
    3aee:	e9 f4       	brne	.+58     	; 0x3b2a <mmc_disk_write+0x9e>
    3af0:	21 c0       	rjmp	.+66     	; 0x3b34 <mmc_disk_write+0xa8>
            count = 0;
        }
    }
    else                /* Multiple block write */
    {
        if (CardType & CT_SDC)
    3af2:	8c 70       	andi	r24, 0x0C	; 12
    3af4:	29 f0       	breq	.+10     	; 0x3b00 <mmc_disk_write+0x74>
        {
            send_cmd(ACMD23, count);
    3af6:	ae 01       	movw	r20, r28
    3af8:	60 e0       	ldi	r22, 0x00	; 0
    3afa:	70 e0       	ldi	r23, 0x00	; 0
    3afc:	87 e9       	ldi	r24, 0x97	; 151
    3afe:	67 de       	rcall	.-818    	; 0x37ce <send_cmd>
        }
        if (send_cmd(CMD25, sect) == 0)     /* WRITE_MULTIPLE_BLOCK */
    3b00:	b7 01       	movw	r22, r14
    3b02:	a6 01       	movw	r20, r12
    3b04:	89 e1       	ldi	r24, 0x19	; 25
    3b06:	63 de       	rcall	.-826    	; 0x37ce <send_cmd>
    3b08:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC))
    3b0a:	14 c0       	rjmp	.+40     	; 0x3b34 <mmc_disk_write+0xa8>
    3b0c:	6c ef       	ldi	r22, 0xFC	; 252
    3b0e:	c8 01       	movw	r24, r16
    3b10:	38 de       	rcall	.-912    	; 0x3782 <xmit_datablock>
    3b12:	89 2b       	or	r24, r25
    3b14:	19 f0       	breq	.+6      	; 0x3b1c <mmc_disk_write+0x90>
                {
                    break;
                }
                buff += 512;
    3b16:	1e 5f       	subi	r17, 0xFE	; 254
            } while (--count);
    3b18:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))
    3b1a:	c1 f7       	brne	.-16     	; 0x3b0c <mmc_disk_write+0x80>
    3b1c:	6d ef       	ldi	r22, 0xFD	; 253
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	2f de       	rcall	.-930    	; 0x3782 <xmit_datablock>
    3b24:	89 2b       	or	r24, r25
    3b26:	21 f0       	breq	.+8      	; 0x3b30 <mmc_disk_write+0xa4>
    if (count == 1)     /* Single block write */
    {
        if ((send_cmd(CMD24, sect) == 0)    /* WRITE_BLOCK */
                && xmit_datablock(buff, 0xFE))
        {
            count = 0;
    3b28:	05 c0       	rjmp	.+10     	; 0x3b34 <mmc_disk_write+0xa8>
    3b2a:	c0 e0       	ldi	r28, 0x00	; 0
    3b2c:	d0 e0       	ldi	r29, 0x00	; 0
                }
                buff += 512;
            } while (--count);
            if (!xmit_datablock(0, 0xFD))
            {
                count = 1;    /* STOP_TRAN token */
    3b2e:	02 c0       	rjmp	.+4      	; 0x3b34 <mmc_disk_write+0xa8>
    3b30:	c1 e0       	ldi	r28, 0x01	; 1
            }
        }
    }
    deselect();
    3b32:	d0 e0       	ldi	r29, 0x00	; 0
    3b34:	e7 dd       	rcall	.-1074   	; 0x3704 <deselect>

    return count ? RES_ERROR : RES_OK;
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	cd 2b       	or	r28, r29
    3b3a:	39 f4       	brne	.+14     	; 0x3b4a <mmc_disk_write+0xbe>
    3b3c:	80 e0       	ldi	r24, 0x00	; 0
    3b3e:	05 c0       	rjmp	.+10     	; 0x3b4a <mmc_disk_write+0xbe>
    DWORD sect = (DWORD)sector;


    if (!count)
    {
        return RES_PARERR;
    3b40:	84 e0       	ldi	r24, 0x04	; 4
    3b42:	03 c0       	rjmp	.+6      	; 0x3b4a <mmc_disk_write+0xbe>
    }
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    3b44:	83 e0       	ldi	r24, 0x03	; 3
    3b46:	01 c0       	rjmp	.+2      	; 0x3b4a <mmc_disk_write+0xbe>
    }
    if (Stat & STA_PROTECT)
    {
        return RES_WRPRT;
    3b48:	82 e0       	ldi	r24, 0x02	; 2
        }
    }
    deselect();

    return count ? RES_ERROR : RES_OK;
}
    3b4a:	df 91       	pop	r29
    3b4c:	cf 91       	pop	r28
    3b4e:	1f 91       	pop	r17
    3b50:	0f 91       	pop	r16
    3b52:	ff 90       	pop	r15
    3b54:	ef 90       	pop	r14
    3b56:	df 90       	pop	r13
    3b58:	cf 90       	pop	r12
    3b5a:	08 95       	ret

00003b5c <mmc_disk_ioctl>:
#if _USE_IOCTL
DRESULT mmc_disk_ioctl (
    BYTE cmd,       /* Control code */
    void* buff      /* Buffer to send/receive control data */
)
{
    3b5c:	af 92       	push	r10
    3b5e:	bf 92       	push	r11
    3b60:	cf 92       	push	r12
    3b62:	df 92       	push	r13
    3b64:	ef 92       	push	r14
    3b66:	ff 92       	push	r15
    3b68:	0f 93       	push	r16
    3b6a:	1f 93       	push	r17
    3b6c:	cf 93       	push	r28
    3b6e:	df 93       	push	r29
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
    3b74:	60 97       	sbiw	r28, 0x10	; 16
    3b76:	0f b6       	in	r0, 0x3f	; 63
    3b78:	f8 94       	cli
    3b7a:	de bf       	out	0x3e, r29	; 62
    3b7c:	0f be       	out	0x3f, r0	; 63
    3b7e:	cd bf       	out	0x3d, r28	; 61
    3b80:	8b 01       	movw	r16, r22
    SDIO_CTRL* sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    3b82:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <Stat>
    3b86:	90 fd       	sbrc	r25, 0
    3b88:	d2 c2       	rjmp	.+1444   	; 0x412e <mmc_disk_ioctl+0x5d2>
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    switch (cmd)
    3b8a:	83 33       	cpi	r24, 0x33	; 51
    3b8c:	09 f4       	brne	.+2      	; 0x3b90 <mmc_disk_ioctl+0x34>
    3b8e:	47 c1       	rjmp	.+654    	; 0x3e1e <mmc_disk_ioctl+0x2c2>
    3b90:	80 f4       	brcc	.+32     	; 0x3bb2 <mmc_disk_ioctl+0x56>
    3b92:	83 30       	cpi	r24, 0x03	; 3
    3b94:	09 f4       	brne	.+2      	; 0x3b98 <mmc_disk_ioctl+0x3c>
    3b96:	a4 c0       	rjmp	.+328    	; 0x3ce0 <mmc_disk_ioctl+0x184>
    3b98:	28 f4       	brcc	.+10     	; 0x3ba4 <mmc_disk_ioctl+0x48>
    3b9a:	88 23       	and	r24, r24
    3b9c:	f1 f0       	breq	.+60     	; 0x3bda <mmc_disk_ioctl+0x7e>
    3b9e:	81 30       	cpi	r24, 0x01	; 1
    3ba0:	29 f1       	breq	.+74     	; 0x3bec <mmc_disk_ioctl+0x90>
    3ba2:	c7 c2       	rjmp	.+1422   	; 0x4132 <mmc_disk_ioctl+0x5d6>
    3ba4:	87 30       	cpi	r24, 0x07	; 7
    3ba6:	09 f4       	brne	.+2      	; 0x3baa <mmc_disk_ioctl+0x4e>
    3ba8:	98 c1       	rjmp	.+816    	; 0x3eda <mmc_disk_ioctl+0x37e>
    3baa:	82 33       	cpi	r24, 0x32	; 50
    3bac:	09 f4       	brne	.+2      	; 0x3bb0 <mmc_disk_ioctl+0x54>
    3bae:	31 c1       	rjmp	.+610    	; 0x3e12 <mmc_disk_ioctl+0x2b6>
    3bb0:	c0 c2       	rjmp	.+1408   	; 0x4132 <mmc_disk_ioctl+0x5d6>
    3bb2:	86 33       	cpi	r24, 0x36	; 54
    3bb4:	09 f4       	brne	.+2      	; 0x3bb8 <mmc_disk_ioctl+0x5c>
    3bb6:	7a c1       	rjmp	.+756    	; 0x3eac <mmc_disk_ioctl+0x350>
    3bb8:	38 f4       	brcc	.+14     	; 0x3bc8 <mmc_disk_ioctl+0x6c>
    3bba:	84 33       	cpi	r24, 0x34	; 52
    3bbc:	09 f4       	brne	.+2      	; 0x3bc0 <mmc_disk_ioctl+0x64>
    3bbe:	44 c1       	rjmp	.+648    	; 0x3e48 <mmc_disk_ioctl+0x2ec>
    3bc0:	85 33       	cpi	r24, 0x35	; 53
    3bc2:	09 f4       	brne	.+2      	; 0x3bc6 <mmc_disk_ioctl+0x6a>
    3bc4:	56 c1       	rjmp	.+684    	; 0x3e72 <mmc_disk_ioctl+0x316>
    3bc6:	b5 c2       	rjmp	.+1386   	; 0x4132 <mmc_disk_ioctl+0x5d6>
    3bc8:	88 33       	cpi	r24, 0x38	; 56
    3bca:	09 f4       	brne	.+2      	; 0x3bce <mmc_disk_ioctl+0x72>
    3bcc:	fe c1       	rjmp	.+1020   	; 0x3fca <mmc_disk_ioctl+0x46e>
    3bce:	08 f4       	brcc	.+2      	; 0x3bd2 <mmc_disk_ioctl+0x76>
    3bd0:	8c c1       	rjmp	.+792    	; 0x3eea <mmc_disk_ioctl+0x38e>
    3bd2:	89 33       	cpi	r24, 0x39	; 57
    3bd4:	09 f4       	brne	.+2      	; 0x3bd8 <mmc_disk_ioctl+0x7c>
    3bd6:	60 c2       	rjmp	.+1216   	; 0x4098 <mmc_disk_ioctl+0x53c>
    3bd8:	ac c2       	rjmp	.+1368   	; 0x4132 <mmc_disk_ioctl+0x5d6>
    {
        case CTRL_SYNC :        /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select())
    3bda:	9a dd       	rcall	.-1228   	; 0x3710 <select>
    3bdc:	89 2b       	or	r24, r25
    3bde:	11 f4       	brne	.+4      	; 0x3be4 <mmc_disk_ioctl+0x88>
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    3be0:	11 e0       	ldi	r17, 0x01	; 1
    3be2:	01 c0       	rjmp	.+2      	; 0x3be6 <mmc_disk_ioctl+0x8a>
        case CTRL_SYNC :        /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select())
            {
                res = RES_OK;
            }
            deselect();
    3be4:	10 e0       	ldi	r17, 0x00	; 0
    3be6:	8e dd       	rcall	.-1252   	; 0x3704 <deselect>
            break;
    3be8:	81 2f       	mov	r24, r17
    3bea:	a4 c2       	rjmp	.+1352   	; 0x4134 <mmc_disk_ioctl+0x5d8>

        case GET_SECTOR_COUNT : /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    3bec:	40 e0       	ldi	r20, 0x00	; 0
    3bee:	50 e0       	ldi	r21, 0x00	; 0
    3bf0:	ba 01       	movw	r22, r20
    3bf2:	89 e0       	ldi	r24, 0x09	; 9
    3bf4:	ec dd       	rcall	.-1064   	; 0x37ce <send_cmd>
    3bf6:	81 11       	cpse	r24, r1
    3bf8:	6d c0       	rjmp	.+218    	; 0x3cd4 <mmc_disk_ioctl+0x178>
    3bfa:	60 e1       	ldi	r22, 0x10	; 16
    3bfc:	70 e0       	ldi	r23, 0x00	; 0
    3bfe:	ce 01       	movw	r24, r28
    3c00:	01 96       	adiw	r24, 0x01	; 1
    3c02:	9b dd       	rcall	.-1226   	; 0x373a <rcvr_datablock>
    3c04:	89 2b       	or	r24, r25
    3c06:	09 f4       	brne	.+2      	; 0x3c0a <mmc_disk_ioctl+0xae>
    3c08:	67 c0       	rjmp	.+206    	; 0x3cd8 <mmc_disk_ioctl+0x17c>
            {
                if ((csd[0] >> 6) == 1)     /* SDC ver 2.00 */
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	82 95       	swap	r24
    3c0e:	86 95       	lsr	r24
    3c10:	86 95       	lsr	r24
    3c12:	83 70       	andi	r24, 0x03	; 3
    3c14:	81 30       	cpi	r24, 0x01	; 1
    3c16:	31 f5       	brne	.+76     	; 0x3c64 <mmc_disk_ioctl+0x108>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    3c18:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c1a:	29 85       	ldd	r18, Y+9	; 0x09
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	32 2f       	mov	r19, r18
    3c20:	22 27       	eor	r18, r18
    3c22:	28 0f       	add	r18, r24
    3c24:	31 1d       	adc	r19, r1
    3c26:	88 85       	ldd	r24, Y+8	; 0x08
    3c28:	8f 73       	andi	r24, 0x3F	; 63
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	a0 e0       	ldi	r26, 0x00	; 0
    3c2e:	b0 e0       	ldi	r27, 0x00	; 0
    3c30:	dc 01       	movw	r26, r24
    3c32:	99 27       	eor	r25, r25
    3c34:	88 27       	eor	r24, r24
    3c36:	82 0f       	add	r24, r18
    3c38:	93 1f       	adc	r25, r19
    3c3a:	a1 1d       	adc	r26, r1
    3c3c:	b1 1d       	adc	r27, r1
    3c3e:	01 96       	adiw	r24, 0x01	; 1
    3c40:	a1 1d       	adc	r26, r1
    3c42:	b1 1d       	adc	r27, r1
                    *(LBA_t*)buff = csize << 10;
    3c44:	07 2e       	mov	r0, r23
    3c46:	7a e0       	ldi	r23, 0x0A	; 10
    3c48:	88 0f       	add	r24, r24
    3c4a:	99 1f       	adc	r25, r25
    3c4c:	aa 1f       	adc	r26, r26
    3c4e:	bb 1f       	adc	r27, r27
    3c50:	7a 95       	dec	r23
    3c52:	d1 f7       	brne	.-12     	; 0x3c48 <mmc_disk_ioctl+0xec>
    3c54:	70 2d       	mov	r23, r0
    3c56:	f8 01       	movw	r30, r16
    3c58:	80 83       	st	Z, r24
    3c5a:	91 83       	std	Z+1, r25	; 0x01
    3c5c:	a2 83       	std	Z+2, r26	; 0x02
    3c5e:	b3 83       	std	Z+3, r27	; 0x03
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(LBA_t*)buff = csize << (n - 9);
                }
                res = RES_OK;
    3c60:	10 e0       	ldi	r17, 0x00	; 0
    3c62:	3b c0       	rjmp	.+118    	; 0x3cda <mmc_disk_ioctl+0x17e>
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(LBA_t*)buff = csize << 10;
                }
                else                        /* SDC ver 1.XX or MMC*/
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    3c64:	2e 81       	ldd	r18, Y+6	; 0x06
    3c66:	9b 85       	ldd	r25, Y+11	; 0x0b
    3c68:	99 1f       	adc	r25, r25
    3c6a:	99 27       	eor	r25, r25
    3c6c:	99 1f       	adc	r25, r25
    3c6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3c70:	2f 70       	andi	r18, 0x0F	; 15
    3c72:	29 0f       	add	r18, r25
    3c74:	83 70       	andi	r24, 0x03	; 3
    3c76:	88 0f       	add	r24, r24
    3c78:	28 0f       	add	r18, r24
    3c7a:	2e 5f       	subi	r18, 0xFE	; 254
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    3c7c:	39 85       	ldd	r19, Y+9	; 0x09
    3c7e:	88 85       	ldd	r24, Y+8	; 0x08
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	88 0f       	add	r24, r24
    3c84:	99 1f       	adc	r25, r25
    3c86:	88 0f       	add	r24, r24
    3c88:	99 1f       	adc	r25, r25
    3c8a:	32 95       	swap	r19
    3c8c:	36 95       	lsr	r19
    3c8e:	36 95       	lsr	r19
    3c90:	33 70       	andi	r19, 0x03	; 3
    3c92:	ac 01       	movw	r20, r24
    3c94:	43 0f       	add	r20, r19
    3c96:	51 1d       	adc	r21, r1
    3c98:	9f 81       	ldd	r25, Y+7	; 0x07
    3c9a:	93 70       	andi	r25, 0x03	; 3
    3c9c:	89 2f       	mov	r24, r25
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	98 2f       	mov	r25, r24
    3ca2:	88 27       	eor	r24, r24
    3ca4:	99 0f       	add	r25, r25
    3ca6:	99 0f       	add	r25, r25
    3ca8:	84 0f       	add	r24, r20
    3caa:	95 1f       	adc	r25, r21
    3cac:	01 96       	adiw	r24, 0x01	; 1
    3cae:	a0 e0       	ldi	r26, 0x00	; 0
    3cb0:	b0 e0       	ldi	r27, 0x00	; 0
                    *(LBA_t*)buff = csize << (n - 9);
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	29 50       	subi	r18, 0x09	; 9
    3cb6:	31 09       	sbc	r19, r1
    3cb8:	04 c0       	rjmp	.+8      	; 0x3cc2 <mmc_disk_ioctl+0x166>
    3cba:	88 0f       	add	r24, r24
    3cbc:	99 1f       	adc	r25, r25
    3cbe:	aa 1f       	adc	r26, r26
    3cc0:	bb 1f       	adc	r27, r27
    3cc2:	2a 95       	dec	r18
    3cc4:	d2 f7       	brpl	.-12     	; 0x3cba <mmc_disk_ioctl+0x15e>
    3cc6:	f8 01       	movw	r30, r16
    3cc8:	80 83       	st	Z, r24
    3cca:	91 83       	std	Z+1, r25	; 0x01
    3ccc:	a2 83       	std	Z+2, r26	; 0x02
    3cce:	b3 83       	std	Z+3, r27	; 0x03
                }
                res = RES_OK;
    3cd0:	10 e0       	ldi	r17, 0x00	; 0
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    3cd2:	03 c0       	rjmp	.+6      	; 0x3cda <mmc_disk_ioctl+0x17e>
    3cd4:	11 e0       	ldi	r17, 0x01	; 1
    3cd6:	01 c0       	rjmp	.+2      	; 0x3cda <mmc_disk_ioctl+0x17e>
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(LBA_t*)buff = csize << (n - 9);
                }
                res = RES_OK;
            }
            deselect();
    3cd8:	11 e0       	ldi	r17, 0x01	; 1
    3cda:	14 dd       	rcall	.-1496   	; 0x3704 <deselect>
            break;
    3cdc:	81 2f       	mov	r24, r17
    3cde:	2a c2       	rjmp	.+1108   	; 0x4134 <mmc_disk_ioctl+0x5d8>

        case GET_BLOCK_SIZE :   /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SDC2)     /* SDv2? */
    3ce0:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <CardType>
    3ce4:	83 ff       	sbrs	r24, 3
            {
                if (send_cmd(ACMD13, 0) == 0)   /* Read SD status */
    3ce6:	31 c0       	rjmp	.+98     	; 0x3d4a <mmc_disk_ioctl+0x1ee>
    3ce8:	40 e0       	ldi	r20, 0x00	; 0
    3cea:	50 e0       	ldi	r21, 0x00	; 0
    3cec:	ba 01       	movw	r22, r20
    3cee:	8d e8       	ldi	r24, 0x8D	; 141
    3cf0:	6e dd       	rcall	.-1316   	; 0x37ce <send_cmd>
    3cf2:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    3cf4:	86 c0       	rjmp	.+268    	; 0x3e02 <mmc_disk_ioctl+0x2a6>
    3cf6:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))                /* Read partial block */
    3cf8:	af dc       	rcall	.-1698   	; 0x3658 <xchg_spi>
    3cfa:	60 e1       	ldi	r22, 0x10	; 16
    3cfc:	70 e0       	ldi	r23, 0x00	; 0
    3cfe:	ce 01       	movw	r24, r28
    3d00:	01 96       	adiw	r24, 0x01	; 1
    3d02:	1b dd       	rcall	.-1482   	; 0x373a <rcvr_datablock>
    3d04:	89 2b       	or	r24, r25
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    3d06:	31 f4       	brne	.+12     	; 0x3d14 <mmc_disk_ioctl+0x1b8>
    3d08:	11 e0       	ldi	r17, 0x01	; 1
                    xchg_spi(0xFF);
                    if (rcvr_datablock(csd, 16))                /* Read partial block */
                    {
                        for (n = 64 - 16; n; n--)
                        {
                            xchg_spi(0xFF);    /* Purge trailing data */
    3d0a:	80 c0       	rjmp	.+256    	; 0x3e0c <mmc_disk_ioctl+0x2b0>
    3d0c:	8f ef       	ldi	r24, 0xFF	; 255
    3d0e:	a4 dc       	rcall	.-1720   	; 0x3658 <xchg_spi>
                if (send_cmd(ACMD13, 0) == 0)   /* Read SD status */
                {
                    xchg_spi(0xFF);
                    if (rcvr_datablock(csd, 16))                /* Read partial block */
                    {
                        for (n = 64 - 16; n; n--)
    3d10:	fa 94       	dec	r15
    3d12:	04 c0       	rjmp	.+8      	; 0x3d1c <mmc_disk_ioctl+0x1c0>
    3d14:	0f 2e       	mov	r0, r31
    3d16:	f0 e3       	ldi	r31, 0x30	; 48
    3d18:	ff 2e       	mov	r15, r31
    3d1a:	f0 2d       	mov	r31, r0
    3d1c:	f1 10       	cpse	r15, r1
    3d1e:	f6 cf       	rjmp	.-20     	; 0x3d0c <mmc_disk_ioctl+0x1b0>
                        {
                            xchg_spi(0xFF);    /* Purge trailing data */
                        }
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    3d20:	2b 85       	ldd	r18, Y+11	; 0x0b
    3d22:	22 95       	swap	r18
    3d24:	2f 70       	andi	r18, 0x0F	; 15
    3d26:	80 e1       	ldi	r24, 0x10	; 16
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	a0 e0       	ldi	r26, 0x00	; 0
    3d2c:	b0 e0       	ldi	r27, 0x00	; 0
    3d2e:	04 c0       	rjmp	.+8      	; 0x3d38 <mmc_disk_ioctl+0x1dc>
    3d30:	88 0f       	add	r24, r24
    3d32:	99 1f       	adc	r25, r25
    3d34:	aa 1f       	adc	r26, r26
    3d36:	bb 1f       	adc	r27, r27
    3d38:	2a 95       	dec	r18
    3d3a:	d2 f7       	brpl	.-12     	; 0x3d30 <mmc_disk_ioctl+0x1d4>
    3d3c:	f8 01       	movw	r30, r16
    3d3e:	80 83       	st	Z, r24
    3d40:	91 83       	std	Z+1, r25	; 0x01
    3d42:	a2 83       	std	Z+2, r26	; 0x02
                        res = RES_OK;
    3d44:	b3 83       	std	Z+3, r27	; 0x03
    3d46:	10 e0       	ldi	r17, 0x00	; 0
                    }
                }
            }
            else                        /* SDv1 or MMCv3 */
            {
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))    /* Read CSD */
    3d48:	61 c0       	rjmp	.+194    	; 0x3e0c <mmc_disk_ioctl+0x2b0>
    3d4a:	40 e0       	ldi	r20, 0x00	; 0
    3d4c:	50 e0       	ldi	r21, 0x00	; 0
    3d4e:	ba 01       	movw	r22, r20
    3d50:	89 e0       	ldi	r24, 0x09	; 9
    3d52:	3d dd       	rcall	.-1414   	; 0x37ce <send_cmd>
    3d54:	81 11       	cpse	r24, r1
    3d56:	57 c0       	rjmp	.+174    	; 0x3e06 <mmc_disk_ioctl+0x2aa>
    3d58:	60 e1       	ldi	r22, 0x10	; 16
    3d5a:	70 e0       	ldi	r23, 0x00	; 0
    3d5c:	ce 01       	movw	r24, r28
    3d5e:	01 96       	adiw	r24, 0x01	; 1
    3d60:	ec dc       	rcall	.-1576   	; 0x373a <rcvr_datablock>
    3d62:	89 2b       	or	r24, r25
    3d64:	09 f4       	brne	.+2      	; 0x3d68 <mmc_disk_ioctl+0x20c>
    3d66:	51 c0       	rjmp	.+162    	; 0x3e0a <mmc_disk_ioctl+0x2ae>
                {
                    if (CardType & CT_SDC1)     /* SDv1 */
    3d68:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <CardType>
    3d6c:	82 ff       	sbrs	r24, 2
    3d6e:	1f c0       	rjmp	.+62     	; 0x3dae <mmc_disk_ioctl+0x252>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((
    3d70:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d72:	8f 73       	andi	r24, 0x3F	; 63
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	88 0f       	add	r24, r24
    3d78:	99 1f       	adc	r25, r25
    3d7a:	2c 85       	ldd	r18, Y+12	; 0x0c
    3d7c:	27 fd       	sbrc	r18, 7
    3d7e:	01 96       	adiw	r24, 0x01	; 1
    3d80:	01 96       	adiw	r24, 0x01	; 1
                                            csd[13] >> 6) - 1);
    3d82:	2e 85       	ldd	r18, Y+14	; 0x0e
    3d84:	22 95       	swap	r18
    3d86:	26 95       	lsr	r18
    3d88:	26 95       	lsr	r18
    3d8a:	23 70       	andi	r18, 0x03	; 3
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	21 50       	subi	r18, 0x01	; 1
    3d90:	31 09       	sbc	r19, r1
            {
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))    /* Read CSD */
                {
                    if (CardType & CT_SDC1)     /* SDv1 */
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((
    3d92:	02 c0       	rjmp	.+4      	; 0x3d98 <mmc_disk_ioctl+0x23c>
    3d94:	88 0f       	add	r24, r24
    3d96:	99 1f       	adc	r25, r25
    3d98:	2a 95       	dec	r18
    3d9a:	e2 f7       	brpl	.-8      	; 0x3d94 <mmc_disk_ioctl+0x238>
    3d9c:	a0 e0       	ldi	r26, 0x00	; 0
    3d9e:	b0 e0       	ldi	r27, 0x00	; 0
    3da0:	f8 01       	movw	r30, r16
    3da2:	80 83       	st	Z, r24
    3da4:	91 83       	std	Z+1, r25	; 0x01
    3da6:	a2 83       	std	Z+2, r26	; 0x02
    3da8:	b3 83       	std	Z+3, r27	; 0x03
                    else                        /* MMCv3 */
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((
                                            csd[11] & 224) >> 5) + 1);
                    }
                    res = RES_OK;
    3daa:	10 e0       	ldi	r17, 0x00	; 0
    3dac:	2f c0       	rjmp	.+94     	; 0x3e0c <mmc_disk_ioctl+0x2b0>
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((
                                            csd[13] >> 6) - 1);
                    }
                    else                        /* MMCv3 */
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((
    3dae:	8b 85       	ldd	r24, Y+11	; 0x0b
    3db0:	8c 77       	andi	r24, 0x7C	; 124
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	95 95       	asr	r25
    3db6:	87 95       	ror	r24
    3db8:	95 95       	asr	r25
    3dba:	87 95       	ror	r24
    3dbc:	01 96       	adiw	r24, 0x01	; 1
    3dbe:	4c 85       	ldd	r20, Y+12	; 0x0c
    3dc0:	24 2f       	mov	r18, r20
    3dc2:	23 70       	andi	r18, 0x03	; 3
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	22 0f       	add	r18, r18
    3dc8:	33 1f       	adc	r19, r19
    3dca:	22 0f       	add	r18, r18
    3dcc:	33 1f       	adc	r19, r19
    3dce:	22 0f       	add	r18, r18
    3dd0:	33 1f       	adc	r19, r19
                                            csd[11] & 224) >> 5) + 1);
    3dd2:	42 95       	swap	r20
    3dd4:	46 95       	lsr	r20
    3dd6:	47 70       	andi	r20, 0x07	; 7
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((
                                            csd[13] >> 6) - 1);
                    }
                    else                        /* MMCv3 */
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((
    3dd8:	24 0f       	add	r18, r20
    3dda:	31 1d       	adc	r19, r1
                                            csd[11] & 224) >> 5) + 1);
    3ddc:	2f 5f       	subi	r18, 0xFF	; 255
    3dde:	3f 4f       	sbci	r19, 0xFF	; 255
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((
                                            csd[13] >> 6) - 1);
                    }
                    else                        /* MMCv3 */
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((
    3de0:	28 9f       	mul	r18, r24
    3de2:	a0 01       	movw	r20, r0
    3de4:	29 9f       	mul	r18, r25
    3de6:	50 0d       	add	r21, r0
    3de8:	38 9f       	mul	r19, r24
    3dea:	50 0d       	add	r21, r0
    3dec:	11 24       	eor	r1, r1
    3dee:	ca 01       	movw	r24, r20
    3df0:	a0 e0       	ldi	r26, 0x00	; 0
    3df2:	b0 e0       	ldi	r27, 0x00	; 0
    3df4:	f8 01       	movw	r30, r16
    3df6:	80 83       	st	Z, r24
    3df8:	91 83       	std	Z+1, r25	; 0x01
    3dfa:	a2 83       	std	Z+2, r26	; 0x02
                                            csd[11] & 224) >> 5) + 1);
                    }
                    res = RES_OK;
    3dfc:	b3 83       	std	Z+3, r27	; 0x03
    3dfe:	10 e0       	ldi	r17, 0x00	; 0
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    3e00:	05 c0       	rjmp	.+10     	; 0x3e0c <mmc_disk_ioctl+0x2b0>
    3e02:	11 e0       	ldi	r17, 0x01	; 1
    3e04:	03 c0       	rjmp	.+6      	; 0x3e0c <mmc_disk_ioctl+0x2b0>
    3e06:	11 e0       	ldi	r17, 0x01	; 1
    3e08:	01 c0       	rjmp	.+2      	; 0x3e0c <mmc_disk_ioctl+0x2b0>
                                            csd[11] & 224) >> 5) + 1);
                    }
                    res = RES_OK;
                }
            }
            deselect();
    3e0a:	11 e0       	ldi	r17, 0x01	; 1
    3e0c:	7b dc       	rcall	.-1802   	; 0x3704 <deselect>
            break;
    3e0e:	81 2f       	mov	r24, r17
            break;
#endif
        /* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :     /* Get card type flags (1 byte) */
            *ptr = CardType;
    3e10:	91 c1       	rjmp	.+802    	; 0x4134 <mmc_disk_ioctl+0x5d8>
    3e12:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <CardType>
    3e16:	db 01       	movw	r26, r22
            res = RES_OK;
            break;
    3e18:	8c 93       	st	X, r24

        case MMC_GET_CSD :      /* Receive CSD as a data block (16 bytes) */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))      /* READ_CSD */
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	8b c1       	rjmp	.+790    	; 0x4134 <mmc_disk_ioctl+0x5d8>
    3e1e:	40 e0       	ldi	r20, 0x00	; 0
    3e20:	50 e0       	ldi	r21, 0x00	; 0
    3e22:	ba 01       	movw	r22, r20
    3e24:	89 e0       	ldi	r24, 0x09	; 9
    3e26:	d3 dc       	rcall	.-1626   	; 0x37ce <send_cmd>
    3e28:	81 11       	cpse	r24, r1
    3e2a:	08 c0       	rjmp	.+16     	; 0x3e3c <mmc_disk_ioctl+0x2e0>
    3e2c:	60 e1       	ldi	r22, 0x10	; 16
    3e2e:	70 e0       	ldi	r23, 0x00	; 0
    3e30:	c8 01       	movw	r24, r16
    3e32:	83 dc       	rcall	.-1786   	; 0x373a <rcvr_datablock>
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    3e34:	89 2b       	or	r24, r25
    3e36:	21 f4       	brne	.+8      	; 0x3e40 <mmc_disk_ioctl+0x2e4>
    3e38:	11 e0       	ldi	r17, 0x01	; 1
    3e3a:	03 c0       	rjmp	.+6      	; 0x3e42 <mmc_disk_ioctl+0x2e6>
        case MMC_GET_CSD :      /* Receive CSD as a data block (16 bytes) */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))      /* READ_CSD */
            {
                res = RES_OK;
            }
            deselect();
    3e3c:	11 e0       	ldi	r17, 0x01	; 1
    3e3e:	01 c0       	rjmp	.+2      	; 0x3e42 <mmc_disk_ioctl+0x2e6>
            break;
    3e40:	10 e0       	ldi	r17, 0x00	; 0
    3e42:	60 dc       	rcall	.-1856   	; 0x3704 <deselect>

        case MMC_GET_CID :      /* Receive CID as a data block (16 bytes) */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))     /* READ_CID */
    3e44:	81 2f       	mov	r24, r17
    3e46:	76 c1       	rjmp	.+748    	; 0x4134 <mmc_disk_ioctl+0x5d8>
    3e48:	40 e0       	ldi	r20, 0x00	; 0
    3e4a:	50 e0       	ldi	r21, 0x00	; 0
    3e4c:	ba 01       	movw	r22, r20
    3e4e:	8a e0       	ldi	r24, 0x0A	; 10
    3e50:	be dc       	rcall	.-1668   	; 0x37ce <send_cmd>
    3e52:	81 11       	cpse	r24, r1
    3e54:	08 c0       	rjmp	.+16     	; 0x3e66 <mmc_disk_ioctl+0x30a>
    3e56:	60 e1       	ldi	r22, 0x10	; 16
    3e58:	70 e0       	ldi	r23, 0x00	; 0
    3e5a:	c8 01       	movw	r24, r16
    3e5c:	6e dc       	rcall	.-1828   	; 0x373a <rcvr_datablock>
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    3e5e:	89 2b       	or	r24, r25
    3e60:	21 f4       	brne	.+8      	; 0x3e6a <mmc_disk_ioctl+0x30e>
    3e62:	11 e0       	ldi	r17, 0x01	; 1
    3e64:	03 c0       	rjmp	.+6      	; 0x3e6c <mmc_disk_ioctl+0x310>
            break;

        case MMC_GET_CID :      /* Receive CID as a data block (16 bytes) */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))     /* READ_CID */
            {
                res = RES_OK;
    3e66:	11 e0       	ldi	r17, 0x01	; 1
            }
            deselect();
    3e68:	01 c0       	rjmp	.+2      	; 0x3e6c <mmc_disk_ioctl+0x310>
            break;
    3e6a:	10 e0       	ldi	r17, 0x00	; 0
    3e6c:	4b dc       	rcall	.-1898   	; 0x3704 <deselect>

        case MMC_GET_OCR :      /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)    /* READ_OCR */
    3e6e:	81 2f       	mov	r24, r17
    3e70:	61 c1       	rjmp	.+706    	; 0x4134 <mmc_disk_ioctl+0x5d8>
    3e72:	40 e0       	ldi	r20, 0x00	; 0
    3e74:	50 e0       	ldi	r21, 0x00	; 0
    3e76:	ba 01       	movw	r22, r20
    3e78:	8a e3       	ldi	r24, 0x3A	; 58
    3e7a:	a9 dc       	rcall	.-1710   	; 0x37ce <send_cmd>
    3e7c:	88 23       	and	r24, r24
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    3e7e:	69 f0       	breq	.+26     	; 0x3e9a <mmc_disk_ioctl+0x33e>
        case MMC_GET_OCR :      /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)    /* READ_OCR */
            {
                for (n = 4; n; n--)
                {
                    *ptr++ = xchg_spi(0xFF);
    3e80:	11 e0       	ldi	r17, 0x01	; 1
    3e82:	11 c0       	rjmp	.+34     	; 0x3ea6 <mmc_disk_ioctl+0x34a>
    3e84:	68 01       	movw	r12, r16
    3e86:	bf ef       	ldi	r27, 0xFF	; 255
    3e88:	cb 1a       	sub	r12, r27
    3e8a:	db 0a       	sbc	r13, r27
    3e8c:	8f ef       	ldi	r24, 0xFF	; 255
    3e8e:	e4 db       	rcall	.-2104   	; 0x3658 <xchg_spi>
    3e90:	f8 01       	movw	r30, r16
    3e92:	80 83       	st	Z, r24
    3e94:	fa 94       	dec	r15
    3e96:	86 01       	movw	r16, r12
            break;

        case MMC_GET_OCR :      /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)    /* READ_OCR */
            {
                for (n = 4; n; n--)
    3e98:	03 c0       	rjmp	.+6      	; 0x3ea0 <mmc_disk_ioctl+0x344>
    3e9a:	68 94       	set
                {
                    *ptr++ = xchg_spi(0xFF);
                }
                res = RES_OK;
    3e9c:	ff 24       	eor	r15, r15
            }
            deselect();
    3e9e:	f2 f8       	bld	r15, 2
    3ea0:	f1 10       	cpse	r15, r1
            break;
    3ea2:	f0 cf       	rjmp	.-32     	; 0x3e84 <mmc_disk_ioctl+0x328>

        case MMC_GET_SDSTAT :   /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)   /* SD_STATUS */
    3ea4:	10 e0       	ldi	r17, 0x00	; 0
    3ea6:	2e dc       	rcall	.-1956   	; 0x3704 <deselect>
    3ea8:	81 2f       	mov	r24, r17
    3eaa:	44 c1       	rjmp	.+648    	; 0x4134 <mmc_disk_ioctl+0x5d8>
    3eac:	40 e0       	ldi	r20, 0x00	; 0
    3eae:	50 e0       	ldi	r21, 0x00	; 0
    3eb0:	ba 01       	movw	r22, r20
            {
                xchg_spi(0xFF);
    3eb2:	8d e8       	ldi	r24, 0x8D	; 141
    3eb4:	8c dc       	rcall	.-1768   	; 0x37ce <send_cmd>
    3eb6:	81 11       	cpse	r24, r1
                if (rcvr_datablock(ptr, 64))
    3eb8:	0a c0       	rjmp	.+20     	; 0x3ece <mmc_disk_ioctl+0x372>
    3eba:	8f ef       	ldi	r24, 0xFF	; 255
    3ebc:	cd db       	rcall	.-2150   	; 0x3658 <xchg_spi>
    3ebe:	60 e4       	ldi	r22, 0x40	; 64
    3ec0:	70 e0       	ldi	r23, 0x00	; 0
    3ec2:	c8 01       	movw	r24, r16
    3ec4:	3a dc       	rcall	.-1932   	; 0x373a <rcvr_datablock>
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    3ec6:	89 2b       	or	r24, r25
    3ec8:	21 f4       	brne	.+8      	; 0x3ed2 <mmc_disk_ioctl+0x376>
    3eca:	11 e0       	ldi	r17, 0x01	; 1
    3ecc:	03 c0       	rjmp	.+6      	; 0x3ed4 <mmc_disk_ioctl+0x378>
            if (send_cmd(ACMD13, 0) == 0)   /* SD_STATUS */
            {
                xchg_spi(0xFF);
                if (rcvr_datablock(ptr, 64))
                {
                    res = RES_OK;
    3ece:	11 e0       	ldi	r17, 0x01	; 1
                }
            }
            deselect();
    3ed0:	01 c0       	rjmp	.+2      	; 0x3ed4 <mmc_disk_ioctl+0x378>
    3ed2:	10 e0       	ldi	r17, 0x00	; 0
            break;
    3ed4:	17 dc       	rcall	.-2002   	; 0x3704 <deselect>
    3ed6:	81 2f       	mov	r24, r17

        case CTRL_POWER_OFF :   /* Power off */
            power_off();
    3ed8:	2d c1       	rjmp	.+602    	; 0x4134 <mmc_disk_ioctl+0x5d8>
    3eda:	b6 db       	rcall	.-2196   	; 0x3648 <power_off>
            Stat |= STA_NOINIT;
    3edc:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <Stat>
    3ee0:	81 60       	ori	r24, 0x01	; 1
    3ee2:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <Stat>
            res = RES_OK;
    3ee6:	80 e0       	ldi	r24, 0x00	; 0
            break;
    3ee8:	25 c1       	rjmp	.+586    	; 0x4134 <mmc_disk_ioctl+0x5d8>
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 |
    3eea:	db 01       	movw	r26, r22
    3eec:	4c 91       	ld	r20, X
    3eee:	50 e0       	ldi	r21, 0x00	; 0
    3ef0:	60 e0       	ldi	r22, 0x00	; 0
    3ef2:	70 e0       	ldi	r23, 0x00	; 0
    3ef4:	03 2e       	mov	r0, r19
    3ef6:	3c e1       	ldi	r19, 0x1C	; 28
    3ef8:	44 0f       	add	r20, r20
    3efa:	55 1f       	adc	r21, r21
    3efc:	66 1f       	adc	r22, r22
    3efe:	77 1f       	adc	r23, r23
    3f00:	3a 95       	dec	r19
    3f02:	d1 f7       	brne	.-12     	; 0x3ef8 <mmc_disk_ioctl+0x39c>
    3f04:	30 2d       	mov	r19, r0
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    3f06:	13 96       	adiw	r26, 0x03	; 3
    3f08:	8d 91       	ld	r24, X+
    3f0a:	9d 91       	ld	r25, X+
    3f0c:	0d 90       	ld	r0, X+
    3f0e:	bc 91       	ld	r27, X
    3f10:	a0 2d       	mov	r26, r0
    3f12:	07 2e       	mov	r0, r23
    3f14:	79 e0       	ldi	r23, 0x09	; 9
    3f16:	88 0f       	add	r24, r24
    3f18:	99 1f       	adc	r25, r25
    3f1a:	aa 1f       	adc	r26, r26
    3f1c:	bb 1f       	adc	r27, r27
    3f1e:	7a 95       	dec	r23
            res = RES_OK;
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 |
    3f20:	d1 f7       	brne	.-12     	; 0x3f16 <mmc_disk_ioctl+0x3ba>
    3f22:	70 2d       	mov	r23, r0
    3f24:	48 2b       	or	r20, r24
    3f26:	59 2b       	or	r21, r25
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    3f28:	6a 2b       	or	r22, r26
    3f2a:	7b 2b       	or	r23, r27
    3f2c:	f8 01       	movw	r30, r16
    3f2e:	81 81       	ldd	r24, Z+1	; 0x01
    3f30:	92 81       	ldd	r25, Z+2	; 0x02
    3f32:	01 97       	sbiw	r24, 0x01	; 1
    3f34:	91 70       	andi	r25, 0x01	; 1
    3f36:	a0 e0       	ldi	r26, 0x00	; 0
    3f38:	b0 e0       	ldi	r27, 0x00	; 0
    3f3a:	48 2b       	or	r20, r24
    3f3c:	59 2b       	or	r21, r25
            res = RES_OK;
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 |
    3f3e:	6a 2b       	or	r22, r26
    3f40:	7b 2b       	or	r23, r27
    3f42:	70 68       	ori	r23, 0x80	; 128
    3f44:	80 e3       	ldi	r24, 0x30	; 48
    3f46:	43 dc       	rcall	.-1914   	; 0x37ce <send_cmd>
    3f48:	81 11       	cpse	r24, r1
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
    3f4a:	39 c0       	rjmp	.+114    	; 0x3fbe <mmc_disk_ioctl+0x462>
    3f4c:	84 e6       	ldi	r24, 0x64	; 100
    3f4e:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <Timer1>
    3f52:	8f ef       	ldi	r24, 0xFF	; 255
    3f54:	81 db       	rcall	.-2302   	; 0x3658 <xchg_spi>
    3f56:	8f 3f       	cpi	r24, 0xFF	; 255
    3f58:	21 f4       	brne	.+8      	; 0x3f62 <mmc_disk_ioctl+0x406>
    3f5a:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <Timer1>
    3f5e:	91 11       	cpse	r25, r1
                if (rc == 0xFE)
    3f60:	f8 cf       	rjmp	.-16     	; 0x3f52 <mmc_disk_ioctl+0x3f6>
    3f62:	8e 3f       	cpi	r24, 0xFE	; 254
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--)
    3f64:	71 f5       	brne	.+92     	; 0x3fc2 <mmc_disk_ioctl+0x466>
    3f66:	d8 01       	movw	r26, r16
    3f68:	17 96       	adiw	r26, 0x07	; 7
    3f6a:	cd 90       	ld	r12, X+
    3f6c:	dc 90       	ld	r13, X
    3f6e:	18 97       	sbiw	r26, 0x08	; 8
    3f70:	11 96       	adiw	r26, 0x01	; 1
    3f72:	ed 90       	ld	r14, X+
    3f74:	fc 90       	ld	r15, X
                    {
                        *bp++ = xchg_spi(0xFF);
    3f76:	12 97       	sbiw	r26, 0x02	; 2
    3f78:	0c c0       	rjmp	.+24     	; 0x3f92 <mmc_disk_ioctl+0x436>
    3f7a:	56 01       	movw	r10, r12
    3f7c:	bf ef       	ldi	r27, 0xFF	; 255
    3f7e:	ab 1a       	sub	r10, r27
    3f80:	bb 0a       	sbc	r11, r27
    3f82:	8f ef       	ldi	r24, 0xFF	; 255
    3f84:	69 db       	rcall	.-2350   	; 0x3658 <xchg_spi>
    3f86:	f6 01       	movw	r30, r12
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--)
    3f88:	80 83       	st	Z, r24
    3f8a:	f1 e0       	ldi	r31, 0x01	; 1
                    {
                        *bp++ = xchg_spi(0xFF);
    3f8c:	ef 1a       	sub	r14, r31
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--)
    3f8e:	f1 08       	sbc	r15, r1
    3f90:	65 01       	movw	r12, r10
    3f92:	e1 14       	cp	r14, r1
                    {
                        *bp++ = xchg_spi(0xFF);
                    }
                    for (dc = 514 - sdi->ndata; dc; dc--)
    3f94:	f1 04       	cpc	r15, r1
    3f96:	89 f7       	brne	.-30     	; 0x3f7a <mmc_disk_ioctl+0x41e>
    3f98:	d8 01       	movw	r26, r16
    3f9a:	11 96       	adiw	r26, 0x01	; 1
    3f9c:	8d 91       	ld	r24, X+
    3f9e:	9c 91       	ld	r25, X
    3fa0:	12 97       	sbiw	r26, 0x02	; 2
    3fa2:	02 e0       	ldi	r16, 0x02	; 2
    3fa4:	12 e0       	ldi	r17, 0x02	; 2
    3fa6:	08 1b       	sub	r16, r24
                    {
                        xchg_spi(0xFF);
    3fa8:	19 0b       	sbc	r17, r25
    3faa:	04 c0       	rjmp	.+8      	; 0x3fb4 <mmc_disk_ioctl+0x458>
    3fac:	8f ef       	ldi	r24, 0xFF	; 255
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--)
                    {
                        *bp++ = xchg_spi(0xFF);
                    }
                    for (dc = 514 - sdi->ndata; dc; dc--)
    3fae:	54 db       	rcall	.-2392   	; 0x3658 <xchg_spi>
    3fb0:	01 50       	subi	r16, 0x01	; 1
    3fb2:	11 09       	sbc	r17, r1
    3fb4:	01 15       	cp	r16, r1
    3fb6:	11 05       	cpc	r17, r1
                    {
                        xchg_spi(0xFF);
                    }
                    res = RES_OK;
    3fb8:	c9 f7       	brne	.-14     	; 0x3fac <mmc_disk_ioctl+0x450>
    3fba:	10 e0       	ldi	r17, 0x00	; 0
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    3fbc:	03 c0       	rjmp	.+6      	; 0x3fc4 <mmc_disk_ioctl+0x468>
    3fbe:	11 e0       	ldi	r17, 0x01	; 1
    3fc0:	01 c0       	rjmp	.+2      	; 0x3fc4 <mmc_disk_ioctl+0x468>
                        xchg_spi(0xFF);
                    }
                    res = RES_OK;
                }
            }
            deselect();
    3fc2:	11 e0       	ldi	r17, 0x01	; 1
    3fc4:	9f db       	rcall	.-2242   	; 0x3704 <deselect>
            break;
    3fc6:	81 2f       	mov	r24, r17
    3fc8:	b5 c0       	rjmp	.+362    	; 0x4134 <mmc_disk_ioctl+0x5d8>

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 |
    3fca:	fb 01       	movw	r30, r22
    3fcc:	40 81       	ld	r20, Z
    3fce:	50 e0       	ldi	r21, 0x00	; 0
    3fd0:	60 e0       	ldi	r22, 0x00	; 0
    3fd2:	70 e0       	ldi	r23, 0x00	; 0
    3fd4:	03 2e       	mov	r0, r19
    3fd6:	3c e1       	ldi	r19, 0x1C	; 28
    3fd8:	44 0f       	add	r20, r20
    3fda:	55 1f       	adc	r21, r21
    3fdc:	66 1f       	adc	r22, r22
    3fde:	77 1f       	adc	r23, r23
    3fe0:	3a 95       	dec	r19
    3fe2:	d1 f7       	brne	.-12     	; 0x3fd8 <mmc_disk_ioctl+0x47c>
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    3fe4:	30 2d       	mov	r19, r0
    3fe6:	83 81       	ldd	r24, Z+3	; 0x03
    3fe8:	94 81       	ldd	r25, Z+4	; 0x04
    3fea:	a5 81       	ldd	r26, Z+5	; 0x05
    3fec:	b6 81       	ldd	r27, Z+6	; 0x06
    3fee:	07 2e       	mov	r0, r23
    3ff0:	79 e0       	ldi	r23, 0x09	; 9
    3ff2:	88 0f       	add	r24, r24
    3ff4:	99 1f       	adc	r25, r25
    3ff6:	aa 1f       	adc	r26, r26
    3ff8:	bb 1f       	adc	r27, r27
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 |
    3ffa:	7a 95       	dec	r23
    3ffc:	d1 f7       	brne	.-12     	; 0x3ff2 <mmc_disk_ioctl+0x496>
    3ffe:	70 2d       	mov	r23, r0
    4000:	48 2b       	or	r20, r24
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    4002:	59 2b       	or	r21, r25
    4004:	6a 2b       	or	r22, r26
    4006:	7b 2b       	or	r23, r27
    4008:	81 81       	ldd	r24, Z+1	; 0x01
    400a:	92 81       	ldd	r25, Z+2	; 0x02
    400c:	01 97       	sbiw	r24, 0x01	; 1
    400e:	91 70       	andi	r25, 0x01	; 1
    4010:	a0 e0       	ldi	r26, 0x00	; 0
    4012:	b0 e0       	ldi	r27, 0x00	; 0
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 |
    4014:	48 2b       	or	r20, r24
    4016:	59 2b       	or	r21, r25
    4018:	6a 2b       	or	r22, r26
    401a:	7b 2b       	or	r23, r27
    401c:	70 68       	ori	r23, 0x80	; 128
    401e:	81 e3       	ldi	r24, 0x31	; 49
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                xchg_spi(0xFF);
    4020:	d6 db       	rcall	.-2132   	; 0x37ce <send_cmd>
    4022:	81 11       	cpse	r24, r1
    4024:	33 c0       	rjmp	.+102    	; 0x408c <mmc_disk_ioctl+0x530>
                xchg_spi(0xFE);
    4026:	8f ef       	ldi	r24, 0xFF	; 255
    4028:	17 db       	rcall	.-2514   	; 0x3658 <xchg_spi>
    402a:	8e ef       	ldi	r24, 0xFE	; 254
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--)
    402c:	15 db       	rcall	.-2518   	; 0x3658 <xchg_spi>
    402e:	d8 01       	movw	r26, r16
    4030:	17 96       	adiw	r26, 0x07	; 7
    4032:	ed 91       	ld	r30, X+
    4034:	fc 91       	ld	r31, X
    4036:	18 97       	sbiw	r26, 0x08	; 8
    4038:	11 96       	adiw	r26, 0x01	; 1
    403a:	ed 90       	ld	r14, X+
                {
                    xchg_spi(*bp++);
    403c:	fc 90       	ld	r15, X
    403e:	12 97       	sbiw	r26, 0x02	; 2
    4040:	0a c0       	rjmp	.+20     	; 0x4056 <mmc_disk_ioctl+0x4fa>
    4042:	6f 01       	movw	r12, r30
    4044:	bf ef       	ldi	r27, 0xFF	; 255
    4046:	cb 1a       	sub	r12, r27
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 |
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                xchg_spi(0xFF);
                xchg_spi(0xFE);
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--)
    4048:	db 0a       	sbc	r13, r27
    404a:	80 81       	ld	r24, Z
    404c:	05 db       	rcall	.-2550   	; 0x3658 <xchg_spi>
                {
                    xchg_spi(*bp++);
    404e:	e1 e0       	ldi	r30, 0x01	; 1
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 |
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                xchg_spi(0xFF);
                xchg_spi(0xFE);
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--)
    4050:	ee 1a       	sub	r14, r30
    4052:	f1 08       	sbc	r15, r1
    4054:	f6 01       	movw	r30, r12
                {
                    xchg_spi(*bp++);
                }
                for (dc = 514 - sdi->ndata; dc; dc--)
    4056:	e1 14       	cp	r14, r1
    4058:	f1 04       	cpc	r15, r1
    405a:	99 f7       	brne	.-26     	; 0x4042 <mmc_disk_ioctl+0x4e6>
    405c:	d8 01       	movw	r26, r16
    405e:	11 96       	adiw	r26, 0x01	; 1
    4060:	8d 91       	ld	r24, X+
    4062:	9c 91       	ld	r25, X
    4064:	12 97       	sbiw	r26, 0x02	; 2
    4066:	02 e0       	ldi	r16, 0x02	; 2
    4068:	12 e0       	ldi	r17, 0x02	; 2
                {
                    xchg_spi(0xFF);
    406a:	08 1b       	sub	r16, r24
    406c:	19 0b       	sbc	r17, r25
    406e:	04 c0       	rjmp	.+8      	; 0x4078 <mmc_disk_ioctl+0x51c>
                xchg_spi(0xFE);
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--)
                {
                    xchg_spi(*bp++);
                }
                for (dc = 514 - sdi->ndata; dc; dc--)
    4070:	8f ef       	ldi	r24, 0xFF	; 255
    4072:	f2 da       	rcall	.-2588   	; 0x3658 <xchg_spi>
    4074:	01 50       	subi	r16, 0x01	; 1
    4076:	11 09       	sbc	r17, r1
    4078:	01 15       	cp	r16, r1
                {
                    xchg_spi(0xFF);
                }
                if ((xchg_spi(0xFF) & 0x1F) == 0x05)
    407a:	11 05       	cpc	r17, r1
    407c:	c9 f7       	brne	.-14     	; 0x4070 <mmc_disk_ioctl+0x514>
    407e:	8f ef       	ldi	r24, 0xFF	; 255
    4080:	eb da       	rcall	.-2602   	; 0x3658 <xchg_spi>
    4082:	8f 71       	andi	r24, 0x1F	; 31
    4084:	85 30       	cpi	r24, 0x05	; 5
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    4086:	21 f0       	breq	.+8      	; 0x4090 <mmc_disk_ioctl+0x534>
    4088:	11 e0       	ldi	r17, 0x01	; 1
    408a:	03 c0       	rjmp	.+6      	; 0x4092 <mmc_disk_ioctl+0x536>
    408c:	11 e0       	ldi	r17, 0x01	; 1
                {
                    xchg_spi(0xFF);
                }
                if ((xchg_spi(0xFF) & 0x1F) == 0x05)
                {
                    res = RES_OK;
    408e:	01 c0       	rjmp	.+2      	; 0x4092 <mmc_disk_ioctl+0x536>
                }
            }
            deselect();
    4090:	10 e0       	ldi	r17, 0x00	; 0
    4092:	38 db       	rcall	.-2448   	; 0x3704 <deselect>
            break;
    4094:	81 2f       	mov	r24, r17
    4096:	4e c0       	rjmp	.+156    	; 0x4134 <mmc_disk_ioctl+0x5d8>

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 |
    4098:	fb 01       	movw	r30, r22
    409a:	40 81       	ld	r20, Z
    409c:	50 e0       	ldi	r21, 0x00	; 0
    409e:	60 e0       	ldi	r22, 0x00	; 0
    40a0:	70 e0       	ldi	r23, 0x00	; 0
    40a2:	03 2e       	mov	r0, r19
    40a4:	3c e1       	ldi	r19, 0x1C	; 28
    40a6:	44 0f       	add	r20, r20
    40a8:	55 1f       	adc	r21, r21
    40aa:	66 1f       	adc	r22, r22
    40ac:	77 1f       	adc	r23, r23
                         (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    40ae:	3a 95       	dec	r19
    40b0:	d1 f7       	brne	.-12     	; 0x40a6 <mmc_disk_ioctl+0x54a>
    40b2:	30 2d       	mov	r19, r0
    40b4:	83 81       	ldd	r24, Z+3	; 0x03
    40b6:	94 81       	ldd	r25, Z+4	; 0x04
    40b8:	a5 81       	ldd	r26, Z+5	; 0x05
    40ba:	b6 81       	ldd	r27, Z+6	; 0x06
    40bc:	07 2e       	mov	r0, r23
    40be:	79 e0       	ldi	r23, 0x09	; 9
    40c0:	88 0f       	add	r24, r24
    40c2:	99 1f       	adc	r25, r25
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 |
    40c4:	aa 1f       	adc	r26, r26
    40c6:	bb 1f       	adc	r27, r27
    40c8:	7a 95       	dec	r23
    40ca:	d1 f7       	brne	.-12     	; 0x40c0 <mmc_disk_ioctl+0x564>
                         (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    40cc:	70 2d       	mov	r23, r0
    40ce:	48 2b       	or	r20, r24
    40d0:	59 2b       	or	r21, r25
    40d2:	6a 2b       	or	r22, r26
    40d4:	7b 2b       	or	r23, r27
    40d6:	82 81       	ldd	r24, Z+2	; 0x02
    40d8:	90 e0       	ldi	r25, 0x00	; 0
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 |
    40da:	a0 e0       	ldi	r26, 0x00	; 0
    40dc:	b0 e0       	ldi	r27, 0x00	; 0
    40de:	48 2b       	or	r20, r24
    40e0:	59 2b       	or	r21, r25
    40e2:	6a 2b       	or	r22, r26
    40e4:	7b 2b       	or	r23, r27
                         (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
            {
                xchg_spi(0xFF);
    40e6:	74 68       	ori	r23, 0x84	; 132
    40e8:	81 e3       	ldi	r24, 0x31	; 49
    40ea:	71 db       	rcall	.-2334   	; 0x37ce <send_cmd>
                xchg_spi(0xFE);
    40ec:	81 11       	cpse	r24, r1
    40ee:	19 c0       	rjmp	.+50     	; 0x4122 <mmc_disk_ioctl+0x5c6>
    40f0:	8f ef       	ldi	r24, 0xFF	; 255
                xchg_spi(sdi->ndata);
    40f2:	b2 da       	rcall	.-2716   	; 0x3658 <xchg_spi>
    40f4:	8e ef       	ldi	r24, 0xFE	; 254
    40f6:	b0 da       	rcall	.-2720   	; 0x3658 <xchg_spi>
    40f8:	d8 01       	movw	r26, r16
    40fa:	11 96       	adiw	r26, 0x01	; 1
                for (dc = 513; dc; dc--)
    40fc:	8c 91       	ld	r24, X
    40fe:	ac da       	rcall	.-2728   	; 0x3658 <xchg_spi>
    4100:	01 e0       	ldi	r16, 0x01	; 1
                {
                    xchg_spi(0xFF);
    4102:	12 e0       	ldi	r17, 0x02	; 2
    4104:	04 c0       	rjmp	.+8      	; 0x410e <mmc_disk_ioctl+0x5b2>
    4106:	8f ef       	ldi	r24, 0xFF	; 255
                         (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
            {
                xchg_spi(0xFF);
                xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--)
    4108:	a7 da       	rcall	.-2738   	; 0x3658 <xchg_spi>
    410a:	01 50       	subi	r16, 0x01	; 1
    410c:	11 09       	sbc	r17, r1
    410e:	01 15       	cp	r16, r1
    4110:	11 05       	cpc	r17, r1
                {
                    xchg_spi(0xFF);
                }
                if ((xchg_spi(0xFF) & 0x1F) == 0x05)
    4112:	c9 f7       	brne	.-14     	; 0x4106 <mmc_disk_ioctl+0x5aa>
    4114:	8f ef       	ldi	r24, 0xFF	; 255
    4116:	a0 da       	rcall	.-2752   	; 0x3658 <xchg_spi>
    4118:	8f 71       	andi	r24, 0x1F	; 31
    411a:	85 30       	cpi	r24, 0x05	; 5
    411c:	21 f0       	breq	.+8      	; 0x4126 <mmc_disk_ioctl+0x5ca>
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    411e:	11 e0       	ldi	r17, 0x01	; 1
    4120:	03 c0       	rjmp	.+6      	; 0x4128 <mmc_disk_ioctl+0x5cc>
    4122:	11 e0       	ldi	r17, 0x01	; 1
    4124:	01 c0       	rjmp	.+2      	; 0x4128 <mmc_disk_ioctl+0x5cc>
                {
                    xchg_spi(0xFF);
                }
                if ((xchg_spi(0xFF) & 0x1F) == 0x05)
                {
                    res = RES_OK;
    4126:	10 e0       	ldi	r17, 0x00	; 0
                }
            }
            deselect();
    4128:	ed da       	rcall	.-2598   	; 0x3704 <deselect>
    412a:	81 2f       	mov	r24, r17
            break;
    412c:	03 c0       	rjmp	.+6      	; 0x4134 <mmc_disk_ioctl+0x5d8>
    412e:	83 e0       	ldi	r24, 0x03	; 3
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    4130:	01 c0       	rjmp	.+2      	; 0x4134 <mmc_disk_ioctl+0x5d8>
    4132:	84 e0       	ldi	r24, 0x04	; 4
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    4134:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    4136:	0f b6       	in	r0, 0x3f	; 63
    4138:	f8 94       	cli
    413a:	de bf       	out	0x3e, r29	; 62
    413c:	0f be       	out	0x3f, r0	; 63
    413e:	cd bf       	out	0x3d, r28	; 61
    4140:	df 91       	pop	r29
    4142:	cf 91       	pop	r28
    4144:	1f 91       	pop	r17
    4146:	0f 91       	pop	r16
    4148:	ff 90       	pop	r15
    414a:	ef 90       	pop	r14
    414c:	df 90       	pop	r13
    414e:	cf 90       	pop	r12
    4150:	bf 90       	pop	r11
    4152:	af 90       	pop	r10
    4154:	08 95       	ret

00004156 <mmc_disk_timerproc>:
    4156:	80 91 cf 06 	lds	r24, 0x06CF	; 0x8006cf <Timer1>
{
    BYTE n;
    //BYTE s;

    n = Timer1;             /* 100Hz decrement timer */
    if (n)
    415a:	88 23       	and	r24, r24
    415c:	19 f0       	breq	.+6      	; 0x4164 <mmc_disk_timerproc+0xe>
    {
        Timer1 = --n;
    415e:	81 50       	subi	r24, 0x01	; 1
    4160:	80 93 cf 06 	sts	0x06CF, r24	; 0x8006cf <Timer1>
    }
    n = Timer2;
    4164:	80 91 cd 06 	lds	r24, 0x06CD	; 0x8006cd <Timer2>
    4168:	90 91 ce 06 	lds	r25, 0x06CE	; 0x8006ce <Timer2+0x1>
    if (n)
    416c:	88 23       	and	r24, r24
    416e:	31 f0       	breq	.+12     	; 0x417c <mmc_disk_timerproc+0x26>
    {
        Timer2 = --n;
    4170:	81 50       	subi	r24, 0x01	; 1
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	90 93 ce 06 	sts	0x06CE, r25	; 0x8006ce <Timer2+0x1>
    4178:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <Timer2>
    417c:	08 95       	ret

0000417e <iic_delay>:
	}

	iic_stop();						/* Deselect device */

	return cnt ? 0 : 1;
}
    417e:	84 e0       	ldi	r24, 0x04	; 4
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	02 c0       	rjmp	.+4      	; 0x4188 <iic_delay+0xa>
    4184:	23 b1       	in	r18, 0x03	; 3
    4186:	01 97       	sbiw	r24, 0x01	; 1
    4188:	00 97       	sbiw	r24, 0x00	; 0
    418a:	e1 f7       	brne	.-8      	; 0x4184 <iic_delay+0x6>
    418c:	08 95       	ret

0000418e <iic_start>:
    418e:	84 b1       	in	r24, 0x04	; 4
    4190:	8e 7f       	andi	r24, 0xFE	; 254
    4192:	84 b9       	out	0x04, r24	; 4
    4194:	f4 df       	rcall	.-24     	; 0x417e <iic_delay>
    4196:	84 b1       	in	r24, 0x04	; 4
    4198:	8d 7f       	andi	r24, 0xFD	; 253
    419a:	84 b9       	out	0x04, r24	; 4
    419c:	f0 df       	rcall	.-32     	; 0x417e <iic_delay>
    419e:	84 b1       	in	r24, 0x04	; 4
    41a0:	81 60       	ori	r24, 0x01	; 1
    41a2:	84 b9       	out	0x04, r24	; 4
    41a4:	ec df       	rcall	.-40     	; 0x417e <iic_delay>
    41a6:	84 b1       	in	r24, 0x04	; 4
    41a8:	82 60       	ori	r24, 0x02	; 2
    41aa:	84 b9       	out	0x04, r24	; 4
    41ac:	e8 cf       	rjmp	.-48     	; 0x417e <iic_delay>
    41ae:	08 95       	ret

000041b0 <iic_stop>:
    41b0:	84 b1       	in	r24, 0x04	; 4
    41b2:	81 60       	ori	r24, 0x01	; 1
    41b4:	84 b9       	out	0x04, r24	; 4
    41b6:	e3 df       	rcall	.-58     	; 0x417e <iic_delay>
    41b8:	84 b1       	in	r24, 0x04	; 4
    41ba:	8d 7f       	andi	r24, 0xFD	; 253
    41bc:	84 b9       	out	0x04, r24	; 4
    41be:	df df       	rcall	.-66     	; 0x417e <iic_delay>
    41c0:	84 b1       	in	r24, 0x04	; 4
    41c2:	8e 7f       	andi	r24, 0xFE	; 254
    41c4:	84 b9       	out	0x04, r24	; 4
    41c6:	db cf       	rjmp	.-74     	; 0x417e <iic_delay>
    41c8:	08 95       	ret

000041ca <iic_send>:
    41ca:	cf 93       	push	r28
    41cc:	df 93       	push	r29
    41ce:	d8 2f       	mov	r29, r24
    41d0:	c0 e8       	ldi	r28, 0x80	; 128
    41d2:	8c 2f       	mov	r24, r28
    41d4:	8d 23       	and	r24, r29
    41d6:	21 f0       	breq	.+8      	; 0x41e0 <iic_send+0x16>
    41d8:	84 b1       	in	r24, 0x04	; 4
    41da:	8e 7f       	andi	r24, 0xFE	; 254
    41dc:	84 b9       	out	0x04, r24	; 4
    41de:	03 c0       	rjmp	.+6      	; 0x41e6 <iic_send+0x1c>
    41e0:	84 b1       	in	r24, 0x04	; 4
    41e2:	81 60       	ori	r24, 0x01	; 1
    41e4:	84 b9       	out	0x04, r24	; 4
    41e6:	cb df       	rcall	.-106    	; 0x417e <iic_delay>
    41e8:	84 b1       	in	r24, 0x04	; 4
    41ea:	8d 7f       	andi	r24, 0xFD	; 253
    41ec:	84 b9       	out	0x04, r24	; 4
    41ee:	c7 df       	rcall	.-114    	; 0x417e <iic_delay>
    41f0:	84 b1       	in	r24, 0x04	; 4
    41f2:	82 60       	ori	r24, 0x02	; 2
    41f4:	84 b9       	out	0x04, r24	; 4
    41f6:	c3 df       	rcall	.-122    	; 0x417e <iic_delay>
    41f8:	c6 95       	lsr	r28
    41fa:	59 f7       	brne	.-42     	; 0x41d2 <iic_send+0x8>
    41fc:	84 b1       	in	r24, 0x04	; 4
    41fe:	8e 7f       	andi	r24, 0xFE	; 254
    4200:	84 b9       	out	0x04, r24	; 4
    4202:	bd df       	rcall	.-134    	; 0x417e <iic_delay>
    4204:	84 b1       	in	r24, 0x04	; 4
    4206:	8d 7f       	andi	r24, 0xFD	; 253
    4208:	84 b9       	out	0x04, r24	; 4
    420a:	c3 b1       	in	r28, 0x03	; 3
    420c:	81 e0       	ldi	r24, 0x01	; 1
    420e:	c8 27       	eor	r28, r24
    4210:	c1 70       	andi	r28, 0x01	; 1
    4212:	b5 df       	rcall	.-150    	; 0x417e <iic_delay>
    4214:	84 b1       	in	r24, 0x04	; 4
    4216:	82 60       	ori	r24, 0x02	; 2
    4218:	84 b9       	out	0x04, r24	; 4
    421a:	b1 df       	rcall	.-158    	; 0x417e <iic_delay>
    421c:	8c 2f       	mov	r24, r28
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	df 91       	pop	r29
    4222:	cf 91       	pop	r28
    4224:	08 95       	ret

00004226 <iic_rcvr>:
    4226:	0f 93       	push	r16
    4228:	1f 93       	push	r17
    422a:	cf 93       	push	r28
    422c:	df 93       	push	r29
    422e:	8c 01       	movw	r16, r24
    4230:	c1 e0       	ldi	r28, 0x01	; 1
    4232:	d0 e0       	ldi	r29, 0x00	; 0
    4234:	cc 0f       	add	r28, r28
    4236:	dd 1f       	adc	r29, r29
    4238:	84 b1       	in	r24, 0x04	; 4
    423a:	8d 7f       	andi	r24, 0xFD	; 253
    423c:	84 b9       	out	0x04, r24	; 4
    423e:	18 99       	sbic	0x03, 0	; 3
    4240:	21 96       	adiw	r28, 0x01	; 1
    4242:	9d df       	rcall	.-198    	; 0x417e <iic_delay>
    4244:	84 b1       	in	r24, 0x04	; 4
    4246:	82 60       	ori	r24, 0x02	; 2
    4248:	84 b9       	out	0x04, r24	; 4
    424a:	99 df       	rcall	.-206    	; 0x417e <iic_delay>
    424c:	cf 3f       	cpi	r28, 0xFF	; 255
    424e:	d1 05       	cpc	r29, r1
    4250:	89 f3       	breq	.-30     	; 0x4234 <iic_rcvr+0xe>
    4252:	80 f3       	brcs	.-32     	; 0x4234 <iic_rcvr+0xe>
    4254:	01 2b       	or	r16, r17
    4256:	21 f0       	breq	.+8      	; 0x4260 <iic_rcvr+0x3a>
    4258:	84 b1       	in	r24, 0x04	; 4
    425a:	81 60       	ori	r24, 0x01	; 1
    425c:	84 b9       	out	0x04, r24	; 4
    425e:	03 c0       	rjmp	.+6      	; 0x4266 <iic_rcvr+0x40>
    4260:	84 b1       	in	r24, 0x04	; 4
    4262:	8e 7f       	andi	r24, 0xFE	; 254
    4264:	84 b9       	out	0x04, r24	; 4
    4266:	8b df       	rcall	.-234    	; 0x417e <iic_delay>
    4268:	84 b1       	in	r24, 0x04	; 4
    426a:	8d 7f       	andi	r24, 0xFD	; 253
    426c:	84 b9       	out	0x04, r24	; 4
    426e:	87 df       	rcall	.-242    	; 0x417e <iic_delay>
    4270:	84 b1       	in	r24, 0x04	; 4
    4272:	82 60       	ori	r24, 0x02	; 2
    4274:	84 b9       	out	0x04, r24	; 4
    4276:	84 b1       	in	r24, 0x04	; 4
    4278:	8e 7f       	andi	r24, 0xFE	; 254
    427a:	84 b9       	out	0x04, r24	; 4
    427c:	80 df       	rcall	.-256    	; 0x417e <iic_delay>
    427e:	8c 2f       	mov	r24, r28
    4280:	df 91       	pop	r29
    4282:	cf 91       	pop	r28
    4284:	1f 91       	pop	r17
    4286:	0f 91       	pop	r16
    4288:	08 95       	ret

0000428a <iic_read>:
    428a:	cf 92       	push	r12
    428c:	df 92       	push	r13
    428e:	ef 92       	push	r14
    4290:	ff 92       	push	r15
    4292:	0f 93       	push	r16
    4294:	1f 93       	push	r17
    4296:	cf 93       	push	r28
    4298:	df 93       	push	r29
    429a:	18 2f       	mov	r17, r24
    429c:	06 2f       	mov	r16, r22
    429e:	7a 01       	movw	r14, r20
    42a0:	69 01       	movw	r12, r18
    42a2:	45 2b       	or	r20, r21
    42a4:	79 f1       	breq	.+94     	; 0x4304 <iic_read+0x7a>
    42a6:	ca e0       	ldi	r28, 0x0A	; 10
    42a8:	d0 e0       	ldi	r29, 0x00	; 0
    42aa:	71 df       	rcall	.-286    	; 0x418e <iic_start>
    42ac:	81 2f       	mov	r24, r17
    42ae:	8d df       	rcall	.-230    	; 0x41ca <iic_send>
    42b0:	89 2b       	or	r24, r25
    42b2:	11 f4       	brne	.+4      	; 0x42b8 <iic_read+0x2e>
    42b4:	21 97       	sbiw	r28, 0x01	; 1
    42b6:	c9 f7       	brne	.-14     	; 0x42aa <iic_read+0x20>
    42b8:	cd 2b       	or	r28, r29
    42ba:	e9 f0       	breq	.+58     	; 0x42f6 <iic_read+0x6c>
    42bc:	80 2f       	mov	r24, r16
    42be:	85 df       	rcall	.-246    	; 0x41ca <iic_send>
    42c0:	89 2b       	or	r24, r25
    42c2:	c9 f0       	breq	.+50     	; 0x42f6 <iic_read+0x6c>
    42c4:	64 df       	rcall	.-312    	; 0x418e <iic_start>
    42c6:	81 2f       	mov	r24, r17
    42c8:	81 60       	ori	r24, 0x01	; 1
    42ca:	7f df       	rcall	.-258    	; 0x41ca <iic_send>
    42cc:	89 2b       	or	r24, r25
    42ce:	99 f0       	breq	.+38     	; 0x42f6 <iic_read+0x6c>
    42d0:	81 e0       	ldi	r24, 0x01	; 1
    42d2:	e8 1a       	sub	r14, r24
    42d4:	f1 08       	sbc	r15, r1
    42d6:	e6 01       	movw	r28, r12
    42d8:	21 96       	adiw	r28, 0x01	; 1
    42da:	81 e0       	ldi	r24, 0x01	; 1
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	e1 14       	cp	r14, r1
    42e0:	f1 04       	cpc	r15, r1
    42e2:	11 f4       	brne	.+4      	; 0x42e8 <iic_read+0x5e>
    42e4:	80 e0       	ldi	r24, 0x00	; 0
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	9e df       	rcall	.-196    	; 0x4226 <iic_rcvr>
    42ea:	f6 01       	movw	r30, r12
    42ec:	80 83       	st	Z, r24
    42ee:	6e 01       	movw	r12, r28
    42f0:	e1 14       	cp	r14, r1
    42f2:	f1 04       	cpc	r15, r1
    42f4:	69 f7       	brne	.-38     	; 0x42d0 <iic_read+0x46>
    42f6:	5c df       	rcall	.-328    	; 0x41b0 <iic_stop>
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	ef 28       	or	r14, r15
    42fc:	09 f0       	breq	.+2      	; 0x4300 <iic_read+0x76>
    42fe:	80 e0       	ldi	r24, 0x00	; 0
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	02 c0       	rjmp	.+4      	; 0x4308 <iic_read+0x7e>
    4304:	80 e0       	ldi	r24, 0x00	; 0
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	df 91       	pop	r29
    430a:	cf 91       	pop	r28
    430c:	1f 91       	pop	r17
    430e:	0f 91       	pop	r16
    4310:	ff 90       	pop	r15
    4312:	ef 90       	pop	r14
    4314:	df 90       	pop	r13
    4316:	cf 90       	pop	r12
    4318:	08 95       	ret

0000431a <rtc_gettime>:
/*-------------------------------------------------*/
/* RTC functions                                   */


int rtc_gettime (RTC *rtc)
{
    431a:	0f 93       	push	r16
    431c:	1f 93       	push	r17
    431e:	cf 93       	push	r28
    4320:	df 93       	push	r29
    4322:	cd b7       	in	r28, 0x3d	; 61
    4324:	de b7       	in	r29, 0x3e	; 62
    4326:	28 97       	sbiw	r28, 0x08	; 8
    4328:	0f b6       	in	r0, 0x3f	; 63
    432a:	f8 94       	cli
    432c:	de bf       	out	0x3e, r29	; 62
    432e:	0f be       	out	0x3f, r0	; 63
    4330:	cd bf       	out	0x3d, r28	; 61
    4332:	8c 01       	movw	r16, r24
	uint8_t buf[8];


	if (!iic_read(0xD0, 0, 7, buf)) return 0;
    4334:	9e 01       	movw	r18, r28
    4336:	2f 5f       	subi	r18, 0xFF	; 255
    4338:	3f 4f       	sbci	r19, 0xFF	; 255
    433a:	47 e0       	ldi	r20, 0x07	; 7
    433c:	50 e0       	ldi	r21, 0x00	; 0
    433e:	60 e0       	ldi	r22, 0x00	; 0
    4340:	70 e0       	ldi	r23, 0x00	; 0
    4342:	80 ed       	ldi	r24, 0xD0	; 208
    4344:	a2 df       	rcall	.-188    	; 0x428a <iic_read>
    4346:	00 97       	sbiw	r24, 0x00	; 0
    4348:	09 f4       	brne	.+2      	; 0x434c <rtc_gettime+0x32>
    434a:	60 c0       	rjmp	.+192    	; 0x440c <rtc_gettime+0xf2>

	rtc->sec = (buf[0] & 0x0F) + ((buf[0] >> 4) & 7) * 10;
    434c:	89 81       	ldd	r24, Y+1	; 0x01
    434e:	98 2f       	mov	r25, r24
    4350:	92 95       	swap	r25
    4352:	9f 70       	andi	r25, 0x0F	; 15
    4354:	97 70       	andi	r25, 0x07	; 7
    4356:	99 0f       	add	r25, r25
    4358:	29 2f       	mov	r18, r25
    435a:	22 0f       	add	r18, r18
    435c:	22 0f       	add	r18, r18
    435e:	92 0f       	add	r25, r18
    4360:	8f 70       	andi	r24, 0x0F	; 15
    4362:	89 0f       	add	r24, r25
    4364:	f8 01       	movw	r30, r16
    4366:	87 83       	std	Z+7, r24	; 0x07
	rtc->min = (buf[1] & 0x0F) + (buf[1] >> 4) * 10;
    4368:	8a 81       	ldd	r24, Y+2	; 0x02
    436a:	98 2f       	mov	r25, r24
    436c:	92 95       	swap	r25
    436e:	9f 70       	andi	r25, 0x0F	; 15
    4370:	99 0f       	add	r25, r25
    4372:	29 2f       	mov	r18, r25
    4374:	22 0f       	add	r18, r18
    4376:	22 0f       	add	r18, r18
    4378:	92 0f       	add	r25, r18
    437a:	8f 70       	andi	r24, 0x0F	; 15
    437c:	89 0f       	add	r24, r25
    437e:	86 83       	std	Z+6, r24	; 0x06
	rtc->hour = (buf[2] & 0x0F) + ((buf[2] >> 4) & 3) * 10;
    4380:	9b 81       	ldd	r25, Y+3	; 0x03
    4382:	89 2f       	mov	r24, r25
    4384:	82 95       	swap	r24
    4386:	8f 70       	andi	r24, 0x0F	; 15
    4388:	83 70       	andi	r24, 0x03	; 3
    438a:	88 0f       	add	r24, r24
    438c:	28 2f       	mov	r18, r24
    438e:	22 0f       	add	r18, r18
    4390:	22 0f       	add	r18, r18
    4392:	82 0f       	add	r24, r18
    4394:	29 2f       	mov	r18, r25
    4396:	2f 70       	andi	r18, 0x0F	; 15
    4398:	82 0f       	add	r24, r18
    439a:	85 83       	std	Z+5, r24	; 0x05
	rtc->wday = (buf[2] & 0x07);
    439c:	97 70       	andi	r25, 0x07	; 7
    439e:	94 83       	std	Z+4, r25	; 0x04
	rtc->mday = (buf[4] & 0x0F) + ((buf[4] >> 4) & 3) * 10;
    43a0:	8d 81       	ldd	r24, Y+5	; 0x05
    43a2:	98 2f       	mov	r25, r24
    43a4:	92 95       	swap	r25
    43a6:	9f 70       	andi	r25, 0x0F	; 15
    43a8:	93 70       	andi	r25, 0x03	; 3
    43aa:	99 0f       	add	r25, r25
    43ac:	29 2f       	mov	r18, r25
    43ae:	22 0f       	add	r18, r18
    43b0:	22 0f       	add	r18, r18
    43b2:	92 0f       	add	r25, r18
    43b4:	8f 70       	andi	r24, 0x0F	; 15
    43b6:	89 0f       	add	r24, r25
    43b8:	83 83       	std	Z+3, r24	; 0x03
	rtc->month = (buf[5] & 0x0F) + ((buf[5] >> 4) & 1) * 10;
    43ba:	8e 81       	ldd	r24, Y+6	; 0x06
    43bc:	84 fb       	bst	r24, 4
    43be:	99 27       	eor	r25, r25
    43c0:	90 f9       	bld	r25, 0
    43c2:	99 0f       	add	r25, r25
    43c4:	29 2f       	mov	r18, r25
    43c6:	22 0f       	add	r18, r18
    43c8:	22 0f       	add	r18, r18
    43ca:	92 0f       	add	r25, r18
    43cc:	8f 70       	andi	r24, 0x0F	; 15
    43ce:	89 0f       	add	r24, r25
    43d0:	82 83       	std	Z+2, r24	; 0x02
	rtc->year = 2000 + (buf[6] & 0x0F) + (buf[6] >> 4) * 10;
    43d2:	9f 81       	ldd	r25, Y+7	; 0x07
    43d4:	49 2f       	mov	r20, r25
    43d6:	4f 70       	andi	r20, 0x0F	; 15
    43d8:	50 e0       	ldi	r21, 0x00	; 0
    43da:	40 53       	subi	r20, 0x30	; 48
    43dc:	58 4f       	sbci	r21, 0xF8	; 248
    43de:	92 95       	swap	r25
    43e0:	9f 70       	andi	r25, 0x0F	; 15
    43e2:	89 2f       	mov	r24, r25
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	bc 01       	movw	r22, r24
    43e8:	66 0f       	add	r22, r22
    43ea:	77 1f       	adc	r23, r23
    43ec:	9c 01       	movw	r18, r24
    43ee:	22 0f       	add	r18, r18
    43f0:	33 1f       	adc	r19, r19
    43f2:	22 0f       	add	r18, r18
    43f4:	33 1f       	adc	r19, r19
    43f6:	22 0f       	add	r18, r18
    43f8:	33 1f       	adc	r19, r19
    43fa:	cb 01       	movw	r24, r22
    43fc:	82 0f       	add	r24, r18
    43fe:	93 1f       	adc	r25, r19
    4400:	84 0f       	add	r24, r20
    4402:	95 1f       	adc	r25, r21
    4404:	91 83       	std	Z+1, r25	; 0x01
    4406:	80 83       	st	Z, r24

	return 1;
    4408:	81 e0       	ldi	r24, 0x01	; 1
    440a:	90 e0       	ldi	r25, 0x00	; 0
}
    440c:	28 96       	adiw	r28, 0x08	; 8
    440e:	0f b6       	in	r0, 0x3f	; 63
    4410:	f8 94       	cli
    4412:	de bf       	out	0x3e, r29	; 62
    4414:	0f be       	out	0x3f, r0	; 63
    4416:	cd bf       	out	0x3d, r28	; 61
    4418:	df 91       	pop	r29
    441a:	cf 91       	pop	r28
    441c:	1f 91       	pop	r17
    441e:	0f 91       	pop	r16
    4420:	08 95       	ret

00004422 <SCSI_Command_ModeSense_6>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ModeSense_6(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    4422:	dc 01       	movw	r26, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4424:	e1 ef       	ldi	r30, 0xF1	; 241
    4426:	f0 e0       	ldi	r31, 0x00	; 0
    4428:	10 82       	st	Z, r1
    442a:	10 82       	st	Z, r1
    442c:	10 82       	st	Z, r1
    442e:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4430:	e8 ee       	ldi	r30, 0xE8	; 232
    4432:	f0 e0       	ldi	r31, 0x00	; 0
    4434:	90 81       	ld	r25, Z
    4436:	9e 77       	andi	r25, 0x7E	; 126
    4438:	90 83       	st	Z, r25
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
    443a:	54 96       	adiw	r26, 0x14	; 20
    443c:	4d 91       	ld	r20, X+
    443e:	5d 91       	ld	r21, X+
    4440:	6d 91       	ld	r22, X+
    4442:	7c 91       	ld	r23, X
    4444:	57 97       	sbiw	r26, 0x17	; 23
    4446:	44 50       	subi	r20, 0x04	; 4
    4448:	51 09       	sbc	r21, r1
    444a:	61 09       	sbc	r22, r1
    444c:	71 09       	sbc	r23, r1
    444e:	54 96       	adiw	r26, 0x14	; 20
    4450:	4d 93       	st	X+, r20
    4452:	5d 93       	st	X+, r21
    4454:	6d 93       	st	X+, r22
    4456:	7c 93       	st	X, r23
    4458:	57 97       	sbiw	r26, 0x17	; 23

	return true;
}
    445a:	81 e0       	ldi	r24, 0x01	; 1
    445c:	08 95       	ret

0000445e <SCSI_Command_Request_Sense>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    445e:	ef 92       	push	r14
    4460:	ff 92       	push	r15
    4462:	0f 93       	push	r16
    4464:	1f 93       	push	r17
    4466:	cf 93       	push	r28
    4468:	df 93       	push	r29
    446a:	8c 01       	movw	r16, r24
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
    446c:	fc 01       	movw	r30, r24
    446e:	c7 8d       	ldd	r28, Z+31	; 0x1f
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
    4470:	dc 2f       	mov	r29, r28
    4472:	c3 31       	cpi	r28, 0x13	; 19
    4474:	08 f0       	brcs	.+2      	; 0x4478 <SCSI_Command_Request_Sense+0x1a>
    4476:	d2 e1       	ldi	r29, 0x12	; 18

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
    4478:	ed 2e       	mov	r14, r29
    447a:	f1 2c       	mov	r15, r1
    447c:	40 e0       	ldi	r20, 0x00	; 0
    447e:	50 e0       	ldi	r21, 0x00	; 0
    4480:	b7 01       	movw	r22, r14
    4482:	85 e9       	ldi	r24, 0x95	; 149
    4484:	91 e0       	ldi	r25, 0x01	; 1
    4486:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    448a:	8c 2f       	mov	r24, r28
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	60 e0       	ldi	r22, 0x00	; 0
    4490:	70 e0       	ldi	r23, 0x00	; 0
    4492:	8e 19       	sub	r24, r14
    4494:	9f 09       	sbc	r25, r15
    4496:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <Endpoint_Null_Stream>
    449a:	e8 ee       	ldi	r30, 0xE8	; 232
    449c:	f0 e0       	ldi	r31, 0x00	; 0
    449e:	80 81       	ld	r24, Z
    44a0:	8e 77       	andi	r24, 0x7E	; 126
    44a2:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    44a4:	f8 01       	movw	r30, r16
    44a6:	84 89       	ldd	r24, Z+20	; 0x14
    44a8:	95 89       	ldd	r25, Z+21	; 0x15
    44aa:	a6 89       	ldd	r26, Z+22	; 0x16
    44ac:	b7 89       	ldd	r27, Z+23	; 0x17
    44ae:	8d 1b       	sub	r24, r29
    44b0:	91 09       	sbc	r25, r1
    44b2:	a1 09       	sbc	r26, r1
    44b4:	b1 09       	sbc	r27, r1
    44b6:	84 8b       	std	Z+20, r24	; 0x14
    44b8:	95 8b       	std	Z+21, r25	; 0x15
    44ba:	a6 8b       	std	Z+22, r26	; 0x16
    44bc:	b7 8b       	std	Z+23, r27	; 0x17

	return true;
}
    44be:	81 e0       	ldi	r24, 0x01	; 1
    44c0:	df 91       	pop	r29
    44c2:	cf 91       	pop	r28
    44c4:	1f 91       	pop	r17
    44c6:	0f 91       	pop	r16
    44c8:	ff 90       	pop	r15
    44ca:	ef 90       	pop	r14
    44cc:	08 95       	ret

000044ce <SCSI_Command_Inquiry>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    44ce:	ef 92       	push	r14
    44d0:	ff 92       	push	r15
    44d2:	0f 93       	push	r16
    44d4:	1f 93       	push	r17
    44d6:	cf 93       	push	r28
    44d8:	df 93       	push	r29
    44da:	fc 01       	movw	r30, r24
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
    44dc:	86 8d       	ldd	r24, Z+30	; 0x1e
    44de:	97 8d       	ldd	r25, Z+31	; 0x1f

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    44e0:	09 2f       	mov	r16, r25
    44e2:	18 2f       	mov	r17, r24
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
    44e4:	78 01       	movw	r14, r16
    44e6:	05 32       	cpi	r16, 0x25	; 37
    44e8:	11 05       	cpc	r17, r1
    44ea:	28 f0       	brcs	.+10     	; 0x44f6 <SCSI_Command_Inquiry+0x28>
    44ec:	0f 2e       	mov	r0, r31
    44ee:	f4 e2       	ldi	r31, 0x24	; 36
    44f0:	ef 2e       	mov	r14, r31
    44f2:	f1 2c       	mov	r15, r1
    44f4:	f0 2d       	mov	r31, r0

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
    44f6:	84 8d       	ldd	r24, Z+28	; 0x1c
    44f8:	83 70       	andi	r24, 0x03	; 3
    44fa:	19 f4       	brne	.+6      	; 0x4502 <SCSI_Command_Inquiry+0x34>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
    44fc:	85 8d       	ldd	r24, Z+29	; 0x1d
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
    44fe:	88 23       	and	r24, r24
    4500:	69 f0       	breq	.+26     	; 0x451c <SCSI_Command_Inquiry+0x4e>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    4502:	e7 e9       	ldi	r30, 0x97	; 151
    4504:	f1 e0       	ldi	r31, 0x01	; 1
    4506:	80 81       	ld	r24, Z
    4508:	80 7f       	andi	r24, 0xF0	; 240
    450a:	85 60       	ori	r24, 0x05	; 5
    450c:	80 83       	st	Z, r24
    450e:	e5 e9       	ldi	r30, 0x95	; 149
    4510:	f1 e0       	ldi	r31, 0x01	; 1
    4512:	84 e2       	ldi	r24, 0x24	; 36
    4514:	84 87       	std	Z+12, r24	; 0x0c
    4516:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_INVALID_FIELD_IN_CDB,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    4518:	80 e0       	ldi	r24, 0x00	; 0
    451a:	21 c0       	rjmp	.+66     	; 0x455e <SCSI_Command_Inquiry+0x90>
    451c:	ef 01       	movw	r28, r30
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
    451e:	40 e0       	ldi	r20, 0x00	; 0
    4520:	50 e0       	ldi	r21, 0x00	; 0
    4522:	b7 01       	movw	r22, r14
    4524:	80 ef       	ldi	r24, 0xF0	; 240
    4526:	94 e0       	ldi	r25, 0x04	; 4
    4528:	0e 94 5b 2d 	call	0x5ab6	; 0x5ab6 <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    452c:	60 e0       	ldi	r22, 0x00	; 0
    452e:	70 e0       	ldi	r23, 0x00	; 0
    4530:	c8 01       	movw	r24, r16
    4532:	8e 19       	sub	r24, r14
    4534:	9f 09       	sbc	r25, r15
    4536:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <Endpoint_Null_Stream>
    453a:	e8 ee       	ldi	r30, 0xE8	; 232
    453c:	f0 e0       	ldi	r31, 0x00	; 0
    453e:	80 81       	ld	r24, Z
    4540:	8e 77       	andi	r24, 0x7E	; 126
    4542:	80 83       	st	Z, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    4544:	8c 89       	ldd	r24, Y+20	; 0x14
    4546:	9d 89       	ldd	r25, Y+21	; 0x15
    4548:	ae 89       	ldd	r26, Y+22	; 0x16
    454a:	bf 89       	ldd	r27, Y+23	; 0x17
    454c:	8e 19       	sub	r24, r14
    454e:	9f 09       	sbc	r25, r15
    4550:	a1 09       	sbc	r26, r1
    4552:	b1 09       	sbc	r27, r1
    4554:	8c 8b       	std	Y+20, r24	; 0x14
    4556:	9d 8b       	std	Y+21, r25	; 0x15
    4558:	ae 8b       	std	Y+22, r26	; 0x16
    455a:	bf 8b       	std	Y+23, r27	; 0x17

	return true;
    455c:	81 e0       	ldi	r24, 0x01	; 1
}
    455e:	df 91       	pop	r29
    4560:	cf 91       	pop	r28
    4562:	1f 91       	pop	r17
    4564:	0f 91       	pop	r16
    4566:	ff 90       	pop	r15
    4568:	ef 90       	pop	r14
    456a:	08 95       	ret

0000456c <SCSI_Command_Read_Capacity_10>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    456c:	0f 93       	push	r16
    456e:	1f 93       	push	r17
    4570:	cf 93       	push	r28
    4572:	df 93       	push	r29
    4574:	cd b7       	in	r28, 0x3d	; 61
    4576:	de b7       	in	r29, 0x3e	; 62
    4578:	28 97       	sbiw	r28, 0x08	; 8
    457a:	0f b6       	in	r0, 0x3f	; 63
    457c:	f8 94       	cli
    457e:	de bf       	out	0x3e, r29	; 62
    4580:	0f be       	out	0x3f, r0	; 63
    4582:	cd bf       	out	0x3d, r28	; 61
    4584:	8c 01       	movw	r16, r24
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
    4586:	c0 d2       	rcall	.+1408   	; 0x4b08 <sdcard_GetNbBlocks>
    4588:	dc 01       	movw	r26, r24
    458a:	cb 01       	movw	r24, r22
    458c:	01 97       	sbiw	r24, 0x01	; 1
    458e:	a1 09       	sbc	r26, r1
    4590:	b1 09       	sbc	r27, r1
    4592:	89 83       	std	Y+1, r24	; 0x01
    4594:	9a 83       	std	Y+2, r25	; 0x02
    4596:	ab 83       	std	Y+3, r26	; 0x03
    4598:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
    459a:	80 e0       	ldi	r24, 0x00	; 0
    459c:	92 e0       	ldi	r25, 0x02	; 2
    459e:	a0 e0       	ldi	r26, 0x00	; 0
    45a0:	b0 e0       	ldi	r27, 0x00	; 0
    45a2:	8d 83       	std	Y+5, r24	; 0x05
    45a4:	9e 83       	std	Y+6, r25	; 0x06
    45a6:	af 83       	std	Y+7, r26	; 0x07
    45a8:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
    45aa:	40 e0       	ldi	r20, 0x00	; 0
    45ac:	50 e0       	ldi	r21, 0x00	; 0
    45ae:	64 e0       	ldi	r22, 0x04	; 4
    45b0:	70 e0       	ldi	r23, 0x00	; 0
    45b2:	ce 01       	movw	r24, r28
    45b4:	01 96       	adiw	r24, 0x01	; 1
    45b6:	0e 94 a4 2d 	call	0x5b48	; 0x5b48 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
    45ba:	40 e0       	ldi	r20, 0x00	; 0
    45bc:	50 e0       	ldi	r21, 0x00	; 0
    45be:	64 e0       	ldi	r22, 0x04	; 4
    45c0:	70 e0       	ldi	r23, 0x00	; 0
    45c2:	ce 01       	movw	r24, r28
    45c4:	05 96       	adiw	r24, 0x05	; 5
    45c6:	0e 94 a4 2d 	call	0x5b48	; 0x5b48 <Endpoint_Write_Stream_BE>
    45ca:	e8 ee       	ldi	r30, 0xE8	; 232
    45cc:	f0 e0       	ldi	r31, 0x00	; 0
    45ce:	80 81       	ld	r24, Z
    45d0:	8e 77       	andi	r24, 0x7E	; 126
    45d2:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
    45d4:	f8 01       	movw	r30, r16
    45d6:	84 89       	ldd	r24, Z+20	; 0x14
    45d8:	95 89       	ldd	r25, Z+21	; 0x15
    45da:	a6 89       	ldd	r26, Z+22	; 0x16
    45dc:	b7 89       	ldd	r27, Z+23	; 0x17
    45de:	08 97       	sbiw	r24, 0x08	; 8
    45e0:	a1 09       	sbc	r26, r1
    45e2:	b1 09       	sbc	r27, r1
    45e4:	84 8b       	std	Z+20, r24	; 0x14
    45e6:	95 8b       	std	Z+21, r25	; 0x15
    45e8:	a6 8b       	std	Z+22, r26	; 0x16
    45ea:	b7 8b       	std	Z+23, r27	; 0x17

	return true;
}
    45ec:	81 e0       	ldi	r24, 0x01	; 1
    45ee:	28 96       	adiw	r28, 0x08	; 8
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	f8 94       	cli
    45f4:	de bf       	out	0x3e, r29	; 62
    45f6:	0f be       	out	0x3f, r0	; 63
    45f8:	cd bf       	out	0x3d, r28	; 61
    45fa:	df 91       	pop	r29
    45fc:	cf 91       	pop	r28
    45fe:	1f 91       	pop	r17
    4600:	0f 91       	pop	r16
    4602:	08 95       	ret

00004604 <SCSI_Command_Send_Diagnostic>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    4604:	cf 93       	push	r28
    4606:	df 93       	push	r29
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
    4608:	fc 01       	movw	r30, r24
    460a:	24 8d       	ldd	r18, Z+28	; 0x1c
    460c:	22 fd       	sbrc	r18, 2
    460e:	0d c0       	rjmp	.+26     	; 0x462a <SCSI_Command_Send_Diagnostic+0x26>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    4610:	e7 e9       	ldi	r30, 0x97	; 151
    4612:	f1 e0       	ldi	r31, 0x01	; 1
    4614:	80 81       	ld	r24, Z
    4616:	80 7f       	andi	r24, 0xF0	; 240
    4618:	85 60       	ori	r24, 0x05	; 5
    461a:	80 83       	st	Z, r24
    461c:	e5 e9       	ldi	r30, 0x95	; 149
    461e:	f1 e0       	ldi	r31, 0x01	; 1
    4620:	84 e2       	ldi	r24, 0x24	; 36
    4622:	84 87       	std	Z+12, r24	; 0x0c
    4624:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_INVALID_FIELD_IN_CDB,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    4626:	80 e0       	ldi	r24, 0x00	; 0
    4628:	13 c0       	rjmp	.+38     	; 0x4650 <SCSI_Command_Send_Diagnostic+0x4c>
    462a:	ec 01       	movw	r28, r24
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(sdcard_CheckDataflashOperation()))
    462c:	4b d4       	rcall	.+2198   	; 0x4ec4 <sdcard_CheckDataflashOperation>
    462e:	81 11       	cpse	r24, r1
    4630:	0b c0       	rjmp	.+22     	; 0x4648 <SCSI_Command_Send_Diagnostic+0x44>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
    4632:	e7 e9       	ldi	r30, 0x97	; 151
    4634:	f1 e0       	ldi	r31, 0x01	; 1
    4636:	90 81       	ld	r25, Z
    4638:	90 7f       	andi	r25, 0xF0	; 240
    463a:	94 60       	ori	r25, 0x04	; 4
    463c:	90 83       	st	Z, r25
    463e:	e5 e9       	ldi	r30, 0x95	; 149
    4640:	f1 e0       	ldi	r31, 0x01	; 1
    4642:	14 86       	std	Z+12, r1	; 0x0c
    4644:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    4646:	04 c0       	rjmp	.+8      	; 0x4650 <SCSI_Command_Send_Diagnostic+0x4c>
	}

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    4648:	1c 8a       	std	Y+20, r1	; 0x14
    464a:	1d 8a       	std	Y+21, r1	; 0x15
    464c:	1e 8a       	std	Y+22, r1	; 0x16
    464e:	1f 8a       	std	Y+23, r1	; 0x17

	return true;
}
    4650:	df 91       	pop	r29
    4652:	cf 91       	pop	r28
    4654:	08 95       	ret

00004656 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
    4656:	bf 92       	push	r11
    4658:	cf 92       	push	r12
    465a:	df 92       	push	r13
    465c:	ef 92       	push	r14
    465e:	ff 92       	push	r15
    4660:	0f 93       	push	r16
    4662:	1f 93       	push	r17
    4664:	cf 93       	push	r28
    4666:	df 93       	push	r29
    4668:	ec 01       	movw	r28, r24
    466a:	b6 2e       	mov	r11, r22

		return false;
	}

	/* Load in the 32-bit block address (SCSI uses big-endian, so have to reverse the byte order) */
	BlockAddress = SwapEndian_32(*(uint32_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[2]);
    466c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    466e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4670:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4672:	38 a1       	ldd	r19, Y+32	; 0x20

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
    4674:	c3 2e       	mov	r12, r19
    4676:	d2 2e       	mov	r13, r18
    4678:	e9 2e       	mov	r14, r25
    467a:	f8 2e       	mov	r15, r24

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);
    467c:	8a a1       	ldd	r24, Y+34	; 0x22
    467e:	9b a1       	ldd	r25, Y+35	; 0x23

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    4680:	09 2f       	mov	r16, r25
    4682:	18 2f       	mov	r17, r24

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
    4684:	41 d2       	rcall	.+1154   	; 0x4b08 <sdcard_GetNbBlocks>
    4686:	c6 16       	cp	r12, r22
    4688:	d7 06       	cpc	r13, r23
    468a:	e8 06       	cpc	r14, r24
    468c:	f9 06       	cpc	r15, r25
    468e:	68 f0       	brcs	.+26     	; 0x46aa <SCSI_Command_ReadWrite_10+0x54>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    4690:	e7 e9       	ldi	r30, 0x97	; 151
    4692:	f1 e0       	ldi	r31, 0x01	; 1
    4694:	80 81       	ld	r24, Z
    4696:	80 7f       	andi	r24, 0xF0	; 240
    4698:	85 60       	ori	r24, 0x05	; 5
    469a:	80 83       	st	Z, r24
    469c:	e5 e9       	ldi	r30, 0x95	; 149
    469e:	f1 e0       	ldi	r31, 0x01	; 1
    46a0:	81 e2       	ldi	r24, 0x21	; 33
    46a2:	84 87       	std	Z+12, r24	; 0x0c
    46a4:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    46a6:	80 e0       	ldi	r24, 0x00	; 0
    46a8:	28 c0       	rjmp	.+80     	; 0x46fa <SCSI_Command_ReadWrite_10+0xa4>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
    46aa:	bb 20       	and	r11, r11
    46ac:	31 f0       	breq	.+12     	; 0x46ba <SCSI_Command_ReadWrite_10+0x64>
	  sdcard_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    46ae:	98 01       	movw	r18, r16
    46b0:	b7 01       	movw	r22, r14
    46b2:	a6 01       	movw	r20, r12
    46b4:	ce 01       	movw	r24, r28
    46b6:	75 d3       	rcall	.+1770   	; 0x4da2 <sdcard_ReadBlocks>
    46b8:	05 c0       	rjmp	.+10     	; 0x46c4 <SCSI_Command_ReadWrite_10+0x6e>
	else
	  sdcard_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    46ba:	98 01       	movw	r18, r16
    46bc:	b7 01       	movw	r22, r14
    46be:	a6 01       	movw	r20, r12
    46c0:	ce 01       	movw	r24, r28
    46c2:	02 d3       	rcall	.+1540   	; 0x4cc8 <sdcard_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
    46c4:	c8 01       	movw	r24, r16
    46c6:	a0 e0       	ldi	r26, 0x00	; 0
    46c8:	b0 e0       	ldi	r27, 0x00	; 0
    46ca:	07 2e       	mov	r0, r23
    46cc:	79 e0       	ldi	r23, 0x09	; 9
    46ce:	88 0f       	add	r24, r24
    46d0:	99 1f       	adc	r25, r25
    46d2:	aa 1f       	adc	r26, r26
    46d4:	bb 1f       	adc	r27, r27
    46d6:	7a 95       	dec	r23
    46d8:	d1 f7       	brne	.-12     	; 0x46ce <SCSI_Command_ReadWrite_10+0x78>
    46da:	70 2d       	mov	r23, r0
    46dc:	4c 89       	ldd	r20, Y+20	; 0x14
    46de:	5d 89       	ldd	r21, Y+21	; 0x15
    46e0:	6e 89       	ldd	r22, Y+22	; 0x16
    46e2:	7f 89       	ldd	r23, Y+23	; 0x17
    46e4:	8a 01       	movw	r16, r20
    46e6:	9b 01       	movw	r18, r22
    46e8:	08 1b       	sub	r16, r24
    46ea:	19 0b       	sbc	r17, r25
    46ec:	2a 0b       	sbc	r18, r26
    46ee:	3b 0b       	sbc	r19, r27
    46f0:	0c 8b       	std	Y+20, r16	; 0x14
    46f2:	1d 8b       	std	Y+21, r17	; 0x15
    46f4:	2e 8b       	std	Y+22, r18	; 0x16
    46f6:	3f 8b       	std	Y+23, r19	; 0x17

	return true;
    46f8:	81 e0       	ldi	r24, 0x01	; 1
}
    46fa:	df 91       	pop	r29
    46fc:	cf 91       	pop	r28
    46fe:	1f 91       	pop	r17
    4700:	0f 91       	pop	r16
    4702:	ff 90       	pop	r15
    4704:	ef 90       	pop	r14
    4706:	df 90       	pop	r13
    4708:	cf 90       	pop	r12
    470a:	bf 90       	pop	r11
    470c:	08 95       	ret

0000470e <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    470e:	fc 01       	movw	r30, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    4710:	93 8d       	ldd	r25, Z+27	; 0x1b
    4712:	9d 31       	cpi	r25, 0x1D	; 29
    4714:	21 f1       	breq	.+72     	; 0x475e <SCSI_DecodeSCSICommand+0x50>
    4716:	68 f4       	brcc	.+26     	; 0x4732 <SCSI_DecodeSCSICommand+0x24>
    4718:	92 31       	cpi	r25, 0x12	; 18
    471a:	c1 f0       	breq	.+48     	; 0x474c <SCSI_DecodeSCSICommand+0x3e>
    471c:	28 f4       	brcc	.+10     	; 0x4728 <SCSI_DecodeSCSICommand+0x1a>
    471e:	99 23       	and	r25, r25
    4720:	61 f1       	breq	.+88     	; 0x477a <SCSI_DecodeSCSICommand+0x6c>
    4722:	93 30       	cpi	r25, 0x03	; 3
    4724:	b1 f0       	breq	.+44     	; 0x4752 <SCSI_DecodeSCSICommand+0x44>
    4726:	2f c0       	rjmp	.+94     	; 0x4786 <SCSI_DecodeSCSICommand+0x78>
    4728:	9a 31       	cpi	r25, 0x1A	; 26
    472a:	21 f1       	breq	.+72     	; 0x4774 <SCSI_DecodeSCSICommand+0x66>
    472c:	9b 31       	cpi	r25, 0x1B	; 27
    472e:	29 f1       	breq	.+74     	; 0x477a <SCSI_DecodeSCSICommand+0x6c>
    4730:	2a c0       	rjmp	.+84     	; 0x4786 <SCSI_DecodeSCSICommand+0x78>
    4732:	98 32       	cpi	r25, 0x28	; 40
    4734:	d9 f0       	breq	.+54     	; 0x476c <SCSI_DecodeSCSICommand+0x5e>
    4736:	28 f4       	brcc	.+10     	; 0x4742 <SCSI_DecodeSCSICommand+0x34>
    4738:	9e 31       	cpi	r25, 0x1E	; 30
    473a:	f9 f0       	breq	.+62     	; 0x477a <SCSI_DecodeSCSICommand+0x6c>
    473c:	95 32       	cpi	r25, 0x25	; 37
    473e:	61 f0       	breq	.+24     	; 0x4758 <SCSI_DecodeSCSICommand+0x4a>
    4740:	22 c0       	rjmp	.+68     	; 0x4786 <SCSI_DecodeSCSICommand+0x78>
    4742:	9a 32       	cpi	r25, 0x2A	; 42
    4744:	79 f0       	breq	.+30     	; 0x4764 <SCSI_DecodeSCSICommand+0x56>
    4746:	9f 32       	cpi	r25, 0x2F	; 47
    4748:	c1 f0       	breq	.+48     	; 0x477a <SCSI_DecodeSCSICommand+0x6c>
    474a:	1d c0       	rjmp	.+58     	; 0x4786 <SCSI_DecodeSCSICommand+0x78>
	{
		case SCSI_CMD_INQUIRY:
			CommandSuccess = SCSI_Command_Inquiry(MSInterfaceInfo);
    474c:	cf 01       	movw	r24, r30
    474e:	bf de       	rcall	.-642    	; 0x44ce <SCSI_Command_Inquiry>
			break;
    4750:	26 c0       	rjmp	.+76     	; 0x479e <SCSI_DecodeSCSICommand+0x90>
		case SCSI_CMD_REQUEST_SENSE:
			CommandSuccess = SCSI_Command_Request_Sense(MSInterfaceInfo);
    4752:	cf 01       	movw	r24, r30
    4754:	84 de       	rcall	.-760    	; 0x445e <SCSI_Command_Request_Sense>
			break;
		case SCSI_CMD_READ_CAPACITY_10:
			CommandSuccess = SCSI_Command_Read_Capacity_10(MSInterfaceInfo);
    4756:	23 c0       	rjmp	.+70     	; 0x479e <SCSI_DecodeSCSICommand+0x90>
    4758:	cf 01       	movw	r24, r30
			break;
    475a:	08 df       	rcall	.-496    	; 0x456c <SCSI_Command_Read_Capacity_10>
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
    475c:	20 c0       	rjmp	.+64     	; 0x479e <SCSI_DecodeSCSICommand+0x90>
    475e:	cf 01       	movw	r24, r30
			break;
    4760:	51 df       	rcall	.-350    	; 0x4604 <SCSI_Command_Send_Diagnostic>
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
    4762:	1d c0       	rjmp	.+58     	; 0x479e <SCSI_DecodeSCSICommand+0x90>
    4764:	60 e0       	ldi	r22, 0x00	; 0
    4766:	cf 01       	movw	r24, r30
			break;
    4768:	76 df       	rcall	.-276    	; 0x4656 <SCSI_Command_ReadWrite_10>
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
    476a:	19 c0       	rjmp	.+50     	; 0x479e <SCSI_DecodeSCSICommand+0x90>
    476c:	61 e0       	ldi	r22, 0x01	; 1
    476e:	cf 01       	movw	r24, r30
			break;
    4770:	72 df       	rcall	.-284    	; 0x4656 <SCSI_Command_ReadWrite_10>
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
    4772:	15 c0       	rjmp	.+42     	; 0x479e <SCSI_DecodeSCSICommand+0x90>
    4774:	cf 01       	movw	r24, r30
    4776:	55 de       	rcall	.-854    	; 0x4422 <SCSI_Command_ModeSense_6>
			break;
    4778:	12 c0       	rjmp	.+36     	; 0x479e <SCSI_DecodeSCSICommand+0x90>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    477a:	14 8a       	std	Z+20, r1	; 0x14
    477c:	15 8a       	std	Z+21, r1	; 0x15
    477e:	16 8a       	std	Z+22, r1	; 0x16
    4780:	17 8a       	std	Z+23, r1	; 0x17
		case SCSI_CMD_START_STOP_UNIT:
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
    4782:	81 e0       	ldi	r24, 0x01	; 1
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
			break;
    4784:	0c c0       	rjmp	.+24     	; 0x479e <SCSI_DecodeSCSICommand+0x90>
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    4786:	e7 e9       	ldi	r30, 0x97	; 151
    4788:	f1 e0       	ldi	r31, 0x01	; 1
    478a:	80 81       	ld	r24, Z
    478c:	80 7f       	andi	r24, 0xF0	; 240
    478e:	85 60       	ori	r24, 0x05	; 5
    4790:	80 83       	st	Z, r24
    4792:	e5 e9       	ldi	r30, 0x95	; 149
    4794:	f1 e0       	ldi	r31, 0x01	; 1
    4796:	80 e2       	ldi	r24, 0x20	; 32
    4798:	84 87       	std	Z+12, r24	; 0x0c
    479a:	15 86       	std	Z+13, r1	; 0x0d
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;
    479c:	80 e0       	ldi	r24, 0x00	; 0
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
    479e:	88 23       	and	r24, r24
    47a0:	59 f0       	breq	.+22     	; 0x47b8 <SCSI_DecodeSCSICommand+0xaa>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
    47a2:	e7 e9       	ldi	r30, 0x97	; 151
    47a4:	f1 e0       	ldi	r31, 0x01	; 1
    47a6:	80 81       	ld	r24, Z
    47a8:	80 7f       	andi	r24, 0xF0	; 240
    47aa:	80 83       	st	Z, r24
    47ac:	e5 e9       	ldi	r30, 0x95	; 149
    47ae:	f1 e0       	ldi	r31, 0x01	; 1
    47b0:	14 86       	std	Z+12, r1	; 0x0c
    47b2:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
    47b4:	81 e0       	ldi	r24, 0x01	; 1
    47b6:	08 95       	ret
	}

	return false;
    47b8:	80 e0       	ldi	r24, 0x00	; 0
}
    47ba:	08 95       	ret

000047bc <get_fattime>:
FIL File[1];		/* File object */

BYTE RtcOk;				/* RTC is available */

DWORD get_fattime (void)
{
    47bc:	cf 93       	push	r28
    47be:	df 93       	push	r29
    47c0:	cd b7       	in	r28, 0x3d	; 61
    47c2:	de b7       	in	r29, 0x3e	; 62
    47c4:	28 97       	sbiw	r28, 0x08	; 8
    47c6:	0f b6       	in	r0, 0x3f	; 63
    47c8:	f8 94       	cli
    47ca:	de bf       	out	0x3e, r29	; 62
    47cc:	0f be       	out	0x3f, r0	; 63
    47ce:	cd bf       	out	0x3d, r28	; 61
    RTC rtc;


    if (!RtcOk) return 0;
    47d0:	80 91 2c 0d 	lds	r24, 0x0D2C	; 0x800d2c <RtcOk>
    47d4:	88 23       	and	r24, r24
    47d6:	09 f4       	brne	.+2      	; 0x47da <get_fattime+0x1e>
    47d8:	61 c0       	rjmp	.+194    	; 0x489c <get_fattime+0xe0>

    /* Get local time */
    rtc_gettime(&rtc);
    47da:	ce 01       	movw	r24, r28
    47dc:	01 96       	adiw	r24, 0x01	; 1
    47de:	9d dd       	rcall	.-1222   	; 0x431a <rtc_gettime>

    /* Pack date and time into a DWORD variable */
    return	  ((DWORD)(rtc.year - 1980) << 25)
    47e0:	49 81       	ldd	r20, Y+1	; 0x01
    47e2:	5a 81       	ldd	r21, Y+2	; 0x02
    47e4:	4c 5b       	subi	r20, 0xBC	; 188
    47e6:	57 40       	sbci	r21, 0x07	; 7
    47e8:	60 e0       	ldi	r22, 0x00	; 0
    47ea:	70 e0       	ldi	r23, 0x00	; 0
    47ec:	03 2e       	mov	r0, r19
    47ee:	39 e1       	ldi	r19, 0x19	; 25
    47f0:	44 0f       	add	r20, r20
    47f2:	55 1f       	adc	r21, r21
    47f4:	66 1f       	adc	r22, r22
    47f6:	77 1f       	adc	r23, r23
    47f8:	3a 95       	dec	r19
    47fa:	d1 f7       	brne	.-12     	; 0x47f0 <get_fattime+0x34>
    47fc:	30 2d       	mov	r19, r0
    | ((DWORD)rtc.month << 21)
    47fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	a0 e0       	ldi	r26, 0x00	; 0
    4804:	b0 e0       	ldi	r27, 0x00	; 0
    4806:	07 2e       	mov	r0, r23
    4808:	75 e1       	ldi	r23, 0x15	; 21
    480a:	88 0f       	add	r24, r24
    480c:	99 1f       	adc	r25, r25
    480e:	aa 1f       	adc	r26, r26
    4810:	bb 1f       	adc	r27, r27
    4812:	7a 95       	dec	r23
    4814:	d1 f7       	brne	.-12     	; 0x480a <get_fattime+0x4e>
    4816:	70 2d       	mov	r23, r0
    4818:	48 2b       	or	r20, r24
    481a:	59 2b       	or	r21, r25
    481c:	6a 2b       	or	r22, r26
    481e:	7b 2b       	or	r23, r27
    | ((DWORD)rtc.mday << 16)
    4820:	8c 81       	ldd	r24, Y+4	; 0x04
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	a0 e0       	ldi	r26, 0x00	; 0
    4826:	b0 e0       	ldi	r27, 0x00	; 0
    4828:	dc 01       	movw	r26, r24
    482a:	99 27       	eor	r25, r25
    482c:	88 27       	eor	r24, r24
    482e:	48 2b       	or	r20, r24
    4830:	59 2b       	or	r21, r25
    4832:	6a 2b       	or	r22, r26
    4834:	7b 2b       	or	r23, r27
    | ((DWORD)rtc.hour << 11)
    4836:	8e 81       	ldd	r24, Y+6	; 0x06
    4838:	90 e0       	ldi	r25, 0x00	; 0
    483a:	a0 e0       	ldi	r26, 0x00	; 0
    483c:	b0 e0       	ldi	r27, 0x00	; 0
    483e:	07 2e       	mov	r0, r23
    4840:	7b e0       	ldi	r23, 0x0B	; 11
    4842:	88 0f       	add	r24, r24
    4844:	99 1f       	adc	r25, r25
    4846:	aa 1f       	adc	r26, r26
    4848:	bb 1f       	adc	r27, r27
    484a:	7a 95       	dec	r23
    484c:	d1 f7       	brne	.-12     	; 0x4842 <get_fattime+0x86>
    484e:	70 2d       	mov	r23, r0
    4850:	48 2b       	or	r20, r24
    4852:	59 2b       	or	r21, r25
    4854:	6a 2b       	or	r22, r26
    4856:	7b 2b       	or	r23, r27
    | ((DWORD)rtc.min << 5)
    4858:	8f 81       	ldd	r24, Y+7	; 0x07
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	a0 e0       	ldi	r26, 0x00	; 0
    485e:	b0 e0       	ldi	r27, 0x00	; 0
    4860:	88 0f       	add	r24, r24
    4862:	99 1f       	adc	r25, r25
    4864:	aa 1f       	adc	r26, r26
    4866:	bb 1f       	adc	r27, r27
    4868:	88 0f       	add	r24, r24
    486a:	99 1f       	adc	r25, r25
    486c:	aa 1f       	adc	r26, r26
    486e:	bb 1f       	adc	r27, r27
    4870:	88 0f       	add	r24, r24
    4872:	99 1f       	adc	r25, r25
    4874:	aa 1f       	adc	r26, r26
    4876:	bb 1f       	adc	r27, r27
    4878:	88 0f       	add	r24, r24
    487a:	99 1f       	adc	r25, r25
    487c:	aa 1f       	adc	r26, r26
    487e:	bb 1f       	adc	r27, r27
    4880:	88 0f       	add	r24, r24
    4882:	99 1f       	adc	r25, r25
    4884:	aa 1f       	adc	r26, r26
    4886:	bb 1f       	adc	r27, r27
    4888:	84 2b       	or	r24, r20
    488a:	95 2b       	or	r25, r21
    488c:	a6 2b       	or	r26, r22
    488e:	b7 2b       	or	r27, r23
    | ((DWORD)rtc.sec >> 1);
    4890:	28 85       	ldd	r18, Y+8	; 0x08
    4892:	26 95       	lsr	r18

    /* Get local time */
    rtc_gettime(&rtc);

    /* Pack date and time into a DWORD variable */
    return	  ((DWORD)(rtc.year - 1980) << 25)
    4894:	bc 01       	movw	r22, r24
    4896:	cd 01       	movw	r24, r26
    4898:	62 2b       	or	r22, r18
    489a:	03 c0       	rjmp	.+6      	; 0x48a2 <get_fattime+0xe6>
DWORD get_fattime (void)
{
    RTC rtc;


    if (!RtcOk) return 0;
    489c:	60 e0       	ldi	r22, 0x00	; 0
    489e:	70 e0       	ldi	r23, 0x00	; 0
    48a0:	cb 01       	movw	r24, r22
    | ((DWORD)rtc.month << 21)
    | ((DWORD)rtc.mday << 16)
    | ((DWORD)rtc.hour << 11)
    | ((DWORD)rtc.min << 5)
    | ((DWORD)rtc.sec >> 1);
}
    48a2:	28 96       	adiw	r28, 0x08	; 8
    48a4:	0f b6       	in	r0, 0x3f	; 63
    48a6:	f8 94       	cli
    48a8:	de bf       	out	0x3e, r29	; 62
    48aa:	0f be       	out	0x3f, r0	; 63
    48ac:	cd bf       	out	0x3d, r28	; 61
    48ae:	df 91       	pop	r29
    48b0:	cf 91       	pop	r28
    48b2:	08 95       	ret

000048b4 <sdcard_create_sdload_times_file>:



bool sdcard_create_sdload_times_file(void)
{
    48b4:	df 92       	push	r13
    48b6:	ef 92       	push	r14
    48b8:	ff 92       	push	r15
    48ba:	0f 93       	push	r16
    48bc:	1f 93       	push	r17
    48be:	cf 93       	push	r28
    48c0:	df 93       	push	r29
    48c2:	cd b7       	in	r28, 0x3d	; 61
    48c4:	de b7       	in	r29, 0x3e	; 62
    48c6:	c7 54       	subi	r28, 0x47	; 71
    48c8:	d3 40       	sbci	r29, 0x03	; 3
    48ca:	0f b6       	in	r0, 0x3f	; 63
    48cc:	f8 94       	cli
    48ce:	de bf       	out	0x3e, r29	; 62
    48d0:	0f be       	out	0x3f, r0	; 63
    48d2:	cd bf       	out	0x3d, r28	; 61
   #define FILE_NAM_TEMPLATE "DRG_X%02X.TXT"
    char file_name[120] = { 0 };
    48d4:	88 e7       	ldi	r24, 0x78	; 120
    48d6:	fe 01       	movw	r30, r28
    48d8:	31 96       	adiw	r30, 0x01	; 1
    48da:	df 01       	movw	r26, r30
    48dc:	98 2f       	mov	r25, r24
    48de:	1d 92       	st	X+, r1
    48e0:	9a 95       	dec	r25
    48e2:	e9 f7       	brne	.-6      	; 0x48de <sdcard_create_sdload_times_file+0x2a>
    FATFS fs;
    char line[120] = { 0 };
    48e4:	e5 55       	subi	r30, 0x55	; 85
    48e6:	fd 4f       	sbci	r31, 0xFD	; 253
    48e8:	df 01       	movw	r26, r30
    48ea:	1d 92       	st	X+, r1
    48ec:	8a 95       	dec	r24
    48ee:	e9 f7       	brne	.-6      	; 0x48ea <sdcard_create_sdload_times_file+0x36>
    FIL file1;
    UINT bw;
    FRESULT fr;
    bool retf = false;
   
   printf("mounting fs\r\n");
    48f0:	84 e1       	ldi	r24, 0x14	; 20
    48f2:	95 e0       	ldi	r25, 0x05	; 5
    48f4:	0e 94 c0 33 	call	0x6780	; 0x6780 <puts>
    fr = f_mount(&fs, "", 0);
    48f8:	40 e0       	ldi	r20, 0x00	; 0
    48fa:	61 e9       	ldi	r22, 0x91	; 145
    48fc:	74 e0       	ldi	r23, 0x04	; 4
    48fe:	ce 01       	movw	r24, r28
    4900:	87 58       	subi	r24, 0x87	; 135
    4902:	9f 4f       	sbci	r25, 0xFF	; 255
    4904:	0e 94 cd 11 	call	0x239a	; 0x239a <f_mount>
    if (fr == FR_OK)
    4908:	81 11       	cpse	r24, r1
    490a:	e9 c0       	rjmp	.+466    	; 0x4ade <sdcard_create_sdload_times_file+0x22a>
    {
        printf("mount fs success \r\n");
    490c:	81 e2       	ldi	r24, 0x21	; 33
    490e:	95 e0       	ldi	r25, 0x05	; 5
    4910:	0e 94 c0 33 	call	0x6780	; 0x6780 <puts>
        
        sprintf(file_name, FILE_NAM_TEMPLATE, eeprom_read_byte((uint8_t*)0x69));
    4914:	89 e6       	ldi	r24, 0x69	; 105
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <eeprom_read_byte>
    491c:	1f 92       	push	r1
    491e:	8f 93       	push	r24
    4920:	0f 2e       	mov	r0, r31
    4922:	f4 e3       	ldi	r31, 0x34	; 52
    4924:	ef 2e       	mov	r14, r31
    4926:	f5 e0       	ldi	r31, 0x05	; 5
    4928:	ff 2e       	mov	r15, r31
    492a:	f0 2d       	mov	r31, r0
    492c:	ff 92       	push	r15
    492e:	ef 92       	push	r14
    4930:	8e 01       	movw	r16, r28
    4932:	0f 5f       	subi	r16, 0xFF	; 255
    4934:	1f 4f       	sbci	r17, 0xFF	; 255
    4936:	1f 93       	push	r17
    4938:	0f 93       	push	r16
    493a:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <sprintf>
        printf("deleting last load file: %s\r\n", file_name);
    493e:	1f 93       	push	r17
    4940:	0f 93       	push	r16
    4942:	82 e4       	ldi	r24, 0x42	; 66
    4944:	95 e0       	ldi	r25, 0x05	; 5
    4946:	9f 93       	push	r25
    4948:	8f 93       	push	r24
    494a:	0e 94 86 33 	call	0x670c	; 0x670c <printf>
        f_unlink(file_name);
    494e:	c8 01       	movw	r24, r16
    4950:	0e 94 75 17 	call	0x2eea	; 0x2eea <f_unlink>
               
        uint8_t new_id = eeprom_read_byte((uint8_t*)0x69) + 3;
    4954:	89 e6       	ldi	r24, 0x69	; 105
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <eeprom_read_byte>
    495c:	0f 2e       	mov	r0, r31
    495e:	f3 e0       	ldi	r31, 0x03	; 3
    4960:	df 2e       	mov	r13, r31
    4962:	f0 2d       	mov	r31, r0
    4964:	d8 0e       	add	r13, r24
        memset(file_name, 0, sizeof(file_name));
    4966:	88 e7       	ldi	r24, 0x78	; 120
    4968:	f8 01       	movw	r30, r16
    496a:	11 92       	st	Z+, r1
    496c:	8a 95       	dec	r24
    496e:	e9 f7       	brne	.-6      	; 0x496a <sdcard_create_sdload_times_file+0xb6>
        
        sprintf(file_name, FILE_NAM_TEMPLATE, new_id);
    4970:	1f 92       	push	r1
    4972:	df 92       	push	r13
    4974:	ff 92       	push	r15
    4976:	ef 92       	push	r14
    4978:	1f 93       	push	r17
    497a:	0f 93       	push	r16
    497c:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <sprintf>
        sprintf(line, "sd load nr times: 0x%02X\r\n", new_id);
    4980:	1f 92       	push	r1
    4982:	df 92       	push	r13
    4984:	80 e6       	ldi	r24, 0x60	; 96
    4986:	95 e0       	ldi	r25, 0x05	; 5
    4988:	9f 93       	push	r25
    498a:	8f 93       	push	r24
    498c:	ce 01       	movw	r24, r28
    498e:	84 55       	subi	r24, 0x54	; 84
    4990:	9d 4f       	sbci	r25, 0xFD	; 253
    4992:	9f 93       	push	r25
    4994:	8f 93       	push	r24
    4996:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <sprintf>
        eeprom_write_byte((uint8_t*)0x69, new_id);
    499a:	6d 2d       	mov	r22, r13
    499c:	89 e6       	ldi	r24, 0x69	; 105
    499e:	90 e0       	ldi	r25, 0x00	; 0
    49a0:	0e 94 d6 36 	call	0x6dac	; 0x6dac <eeprom_write_byte>
        
        printf("opening: %s\r\n", file_name);
    49a4:	1f 93       	push	r17
    49a6:	0f 93       	push	r16
    49a8:	8b e7       	ldi	r24, 0x7B	; 123
    49aa:	95 e0       	ldi	r25, 0x05	; 5
    49ac:	9f 93       	push	r25
    49ae:	8f 93       	push	r24
    49b0:	0e 94 86 33 	call	0x670c	; 0x670c <printf>
        fr = f_open(&file1, file_name, FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
    49b4:	4b e0       	ldi	r20, 0x0B	; 11
    49b6:	b8 01       	movw	r22, r16
    49b8:	ce 01       	movw	r24, r28
    49ba:	8c 5d       	subi	r24, 0xDC	; 220
    49bc:	9c 4f       	sbci	r25, 0xFC	; 252
    49be:	0e 94 13 12 	call	0x2426	; 0x2426 <f_open>
    49c2:	f8 2e       	mov	r15, r24
        if (fr == FR_OK)
    49c4:	0f b6       	in	r0, 0x3f	; 63
    49c6:	f8 94       	cli
    49c8:	de bf       	out	0x3e, r29	; 62
    49ca:	0f be       	out	0x3f, r0	; 63
    49cc:	cd bf       	out	0x3d, r28	; 61
    49ce:	f1 10       	cpse	r15, r1
    49d0:	80 c0       	rjmp	.+256    	; 0x4ad2 <sdcard_create_sdload_times_file+0x21e>
        {
            printf("file open success \r\n");
    49d2:	89 e8       	ldi	r24, 0x89	; 137
    49d4:	95 e0       	ldi	r25, 0x05	; 5
    49d6:	0e 94 c0 33 	call	0x6780	; 0x6780 <puts>
            printf("disk mounted and file opened \r\n");
    49da:	8d e9       	ldi	r24, 0x9D	; 157
    49dc:	95 e0       	ldi	r25, 0x05	; 5
    49de:	0e 94 c0 33 	call	0x6780	; 0x6780 <puts>
            printf("writing: %s\r\n", line);
    49e2:	05 55       	subi	r16, 0x55	; 85
    49e4:	1d 4f       	sbci	r17, 0xFD	; 253
    49e6:	1f 93       	push	r17
    49e8:	0f 93       	push	r16
    49ea:	8c eb       	ldi	r24, 0xBC	; 188
    49ec:	95 e0       	ldi	r25, 0x05	; 5
    49ee:	9f 93       	push	r25
    49f0:	8f 93       	push	r24
    49f2:	0e 94 86 33 	call	0x670c	; 0x670c <printf>
            f_write(&file1, line, strlen(line), &bw);
    49f6:	f8 01       	movw	r30, r16
    49f8:	01 90       	ld	r0, Z+
    49fa:	00 20       	and	r0, r0
    49fc:	e9 f7       	brne	.-6      	; 0x49f8 <sdcard_create_sdload_times_file+0x144>
    49fe:	31 97       	sbiw	r30, 0x01	; 1
    4a00:	af 01       	movw	r20, r30
    4a02:	40 1b       	sub	r20, r16
    4a04:	51 0b       	sbc	r21, r17
    4a06:	9e 01       	movw	r18, r28
    4a08:	2a 5b       	subi	r18, 0xBA	; 186
    4a0a:	3c 4f       	sbci	r19, 0xFC	; 252
    4a0c:	b8 01       	movw	r22, r16
    4a0e:	ce 01       	movw	r24, r28
    4a10:	8c 5d       	subi	r24, 0xDC	; 220
    4a12:	9c 4f       	sbci	r25, 0xFC	; 252
    4a14:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <f_write>
            if (fr == FR_OK)
    4a18:	0f 90       	pop	r0
    4a1a:	0f 90       	pop	r0
    4a1c:	0f 90       	pop	r0
    4a1e:	0f 90       	pop	r0
    4a20:	f1 10       	cpse	r15, r1
    4a22:	51 c0       	rjmp	.+162    	; 0x4ac6 <sdcard_create_sdload_times_file+0x212>
            {
                printf("file write success \r\n");
    4a24:	8a ec       	ldi	r24, 0xCA	; 202
    4a26:	95 e0       	ldi	r25, 0x05	; 5
    4a28:	0e 94 c0 33 	call	0x6780	; 0x6780 <puts>
                f_close(&file1);
    4a2c:	ce 01       	movw	r24, r28
    4a2e:	8c 5d       	subi	r24, 0xDC	; 220
    4a30:	9c 4f       	sbci	r25, 0xFC	; 252
    4a32:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <f_close>
                
                printf("openning the file again for reading...\r\n");
    4a36:	8f ed       	ldi	r24, 0xDF	; 223
    4a38:	95 e0       	ldi	r25, 0x05	; 5
    4a3a:	0e 94 c0 33 	call	0x6780	; 0x6780 <puts>
                fr = f_open(&file1, file_name, FA_READ);
    4a3e:	41 e0       	ldi	r20, 0x01	; 1
    4a40:	be 01       	movw	r22, r28
    4a42:	6f 5f       	subi	r22, 0xFF	; 255
    4a44:	7f 4f       	sbci	r23, 0xFF	; 255
    4a46:	ce 01       	movw	r24, r28
    4a48:	8c 5d       	subi	r24, 0xDC	; 220
    4a4a:	9c 4f       	sbci	r25, 0xFC	; 252
    4a4c:	0e 94 13 12 	call	0x2426	; 0x2426 <f_open>
                if (fr == FR_OK)
    4a50:	81 11       	cpse	r24, r1
    4a52:	31 c0       	rjmp	.+98     	; 0x4ab6 <sdcard_create_sdload_times_file+0x202>
                {
                    printf("reading content of the file\r\n");
    4a54:	87 e0       	ldi	r24, 0x07	; 7
    4a56:	96 e0       	ldi	r25, 0x06	; 6
    4a58:	0e 94 c0 33 	call	0x6780	; 0x6780 <puts>
                    fr = f_read(&file1, line, strlen(line), &bw);
    4a5c:	b8 01       	movw	r22, r16
    4a5e:	f8 01       	movw	r30, r16
    4a60:	01 90       	ld	r0, Z+
    4a62:	00 20       	and	r0, r0
    4a64:	e9 f7       	brne	.-6      	; 0x4a60 <sdcard_create_sdload_times_file+0x1ac>
    4a66:	31 97       	sbiw	r30, 0x01	; 1
    4a68:	af 01       	movw	r20, r30
    4a6a:	40 1b       	sub	r20, r16
    4a6c:	51 0b       	sbc	r21, r17
    4a6e:	9e 01       	movw	r18, r28
    4a70:	2a 5b       	subi	r18, 0xBA	; 186
    4a72:	3c 4f       	sbci	r19, 0xFC	; 252
    4a74:	ce 01       	movw	r24, r28
    4a76:	8c 5d       	subi	r24, 0xDC	; 220
    4a78:	9c 4f       	sbci	r25, 0xFC	; 252
    4a7a:	0e 94 b1 13 	call	0x2762	; 0x2762 <f_read>
                    if (fr == FR_OK)
    4a7e:	81 11       	cpse	r24, r1
    4a80:	13 c0       	rjmp	.+38     	; 0x4aa8 <sdcard_create_sdload_times_file+0x1f4>
                    {
                        printf("content:\r\n%s\r\n", line);
    4a82:	c8 01       	movw	r24, r16
    4a84:	9f 93       	push	r25
    4a86:	0f 93       	push	r16
    4a88:	84 e2       	ldi	r24, 0x24	; 36
    4a8a:	96 e0       	ldi	r25, 0x06	; 6
    4a8c:	9f 93       	push	r25
    4a8e:	8f 93       	push	r24
    4a90:	0e 94 86 33 	call	0x670c	; 0x670c <printf>
                        
                        printf("\r\nsuccess!! FatFs is working good\r\n");
    4a94:	83 e3       	ldi	r24, 0x33	; 51
    4a96:	96 e0       	ldi	r25, 0x06	; 6
    4a98:	0e 94 c0 33 	call	0x6780	; 0x6780 <puts>
    4a9c:	0f 90       	pop	r0
    4a9e:	0f 90       	pop	r0
    4aa0:	0f 90       	pop	r0
    4aa2:	0f 90       	pop	r0
                        retf = true;
    4aa4:	11 e0       	ldi	r17, 0x01	; 1
    4aa6:	01 c0       	rjmp	.+2      	; 0x4aaa <sdcard_create_sdload_times_file+0x1f6>
    FATFS fs;
    char line[120] = { 0 };
    FIL file1;
    UINT bw;
    FRESULT fr;
    bool retf = false;
    4aa8:	10 e0       	ldi	r17, 0x00	; 0
                        printf("content:\r\n%s\r\n", line);
                        
                        printf("\r\nsuccess!! FatFs is working good\r\n");
                        retf = true;
                    }               
                    f_close(&file1);
    4aaa:	ce 01       	movw	r24, r28
    4aac:	8c 5d       	subi	r24, 0xDC	; 220
    4aae:	9c 4f       	sbci	r25, 0xFC	; 252
    4ab0:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <f_close>
    4ab4:	01 c0       	rjmp	.+2      	; 0x4ab8 <sdcard_create_sdload_times_file+0x204>
    FATFS fs;
    char line[120] = { 0 };
    FIL file1;
    UINT bw;
    FRESULT fr;
    bool retf = false;
    4ab6:	10 e0       	ldi	r17, 0x00	; 0
                        printf("\r\nsuccess!! FatFs is working good\r\n");
                        retf = true;
                    }               
                    f_close(&file1);
                }       
                if (!retf)
    4ab8:	11 11       	cpse	r17, r1
    4aba:	16 c0       	rjmp	.+44     	; 0x4ae8 <sdcard_create_sdload_times_file+0x234>
                {
                    printf("\r\nERROR!!\r\n");
    4abc:	86 e5       	ldi	r24, 0x56	; 86
    4abe:	96 e0       	ldi	r25, 0x06	; 6
    4ac0:	0e 94 c0 33 	call	0x6780	; 0x6780 <puts>
    4ac4:	11 c0       	rjmp	.+34     	; 0x4ae8 <sdcard_create_sdload_times_file+0x234>
                }                  
            }
            else
            {
                printf("file write error \r\n");
    4ac6:	81 e6       	ldi	r24, 0x61	; 97
    4ac8:	96 e0       	ldi	r25, 0x06	; 6
    4aca:	0e 94 c0 33 	call	0x6780	; 0x6780 <puts>
    FATFS fs;
    char line[120] = { 0 };
    FIL file1;
    UINT bw;
    FRESULT fr;
    bool retf = false;
    4ace:	10 e0       	ldi	r17, 0x00	; 0
    4ad0:	0b c0       	rjmp	.+22     	; 0x4ae8 <sdcard_create_sdload_times_file+0x234>
                printf("file write error \r\n");
            }
        }
        else
        {
            printf("file open error \r\n");
    4ad2:	84 e7       	ldi	r24, 0x74	; 116
    4ad4:	96 e0       	ldi	r25, 0x06	; 6
    4ad6:	0e 94 c0 33 	call	0x6780	; 0x6780 <puts>
    FATFS fs;
    char line[120] = { 0 };
    FIL file1;
    UINT bw;
    FRESULT fr;
    bool retf = false;
    4ada:	10 e0       	ldi	r17, 0x00	; 0
    4adc:	05 c0       	rjmp	.+10     	; 0x4ae8 <sdcard_create_sdload_times_file+0x234>
            printf("file open error \r\n");
        }
    }
    else
    {
        printf("mount error \r\n");
    4ade:	86 e8       	ldi	r24, 0x86	; 134
    4ae0:	96 e0       	ldi	r25, 0x06	; 6
    4ae2:	0e 94 c0 33 	call	0x6780	; 0x6780 <puts>
    FATFS fs;
    char line[120] = { 0 };
    FIL file1;
    UINT bw;
    FRESULT fr;
    bool retf = false;
    4ae6:	10 e0       	ldi	r17, 0x00	; 0
    {
        printf("mount error \r\n");
    }
    
    return retf;
}
    4ae8:	81 2f       	mov	r24, r17
    4aea:	c9 5b       	subi	r28, 0xB9	; 185
    4aec:	dc 4f       	sbci	r29, 0xFC	; 252
    4aee:	0f b6       	in	r0, 0x3f	; 63
    4af0:	f8 94       	cli
    4af2:	de bf       	out	0x3e, r29	; 62
    4af4:	0f be       	out	0x3f, r0	; 63
    4af6:	cd bf       	out	0x3d, r28	; 61
    4af8:	df 91       	pop	r29
    4afa:	cf 91       	pop	r28
    4afc:	1f 91       	pop	r17
    4afe:	0f 91       	pop	r16
    4b00:	ff 90       	pop	r15
    4b02:	ef 90       	pop	r14
    4b04:	df 90       	pop	r13
    4b06:	08 95       	ret

00004b08 <sdcard_GetNbBlocks>:
    
    return true;
}

uint32_t sdcard_GetNbBlocks(void)
{
    4b08:	cf 93       	push	r28
    4b0a:	df 93       	push	r29
    4b0c:	00 d0       	rcall	.+0      	; 0x4b0e <sdcard_GetNbBlocks+0x6>
    4b0e:	00 d0       	rcall	.+0      	; 0x4b10 <sdcard_GetNbBlocks+0x8>
    4b10:	cd b7       	in	r28, 0x3d	; 61
    4b12:	de b7       	in	r29, 0x3e	; 62
    static uint32_t CachedTotalBlocks = 0;
	
	DWORD ioct_rsp = 0;
    4b14:	19 82       	std	Y+1, r1	; 0x01
    4b16:	1a 82       	std	Y+2, r1	; 0x02
    4b18:	1b 82       	std	Y+3, r1	; 0x03
    4b1a:	1c 82       	std	Y+4, r1	; 0x04
	
	if (CachedTotalBlocks != 0)
    4b1c:	60 91 d0 0a 	lds	r22, 0x0AD0	; 0x800ad0 <CachedTotalBlocks.4974>
    4b20:	70 91 d1 0a 	lds	r23, 0x0AD1	; 0x800ad1 <CachedTotalBlocks.4974+0x1>
    4b24:	80 91 d2 0a 	lds	r24, 0x0AD2	; 0x800ad2 <CachedTotalBlocks.4974+0x2>
    4b28:	90 91 d3 0a 	lds	r25, 0x0AD3	; 0x800ad3 <CachedTotalBlocks.4974+0x3>
    4b2c:	61 15       	cp	r22, r1
    4b2e:	71 05       	cpc	r23, r1
    4b30:	81 05       	cpc	r24, r1
    4b32:	91 05       	cpc	r25, r1
    4b34:	59 f5       	brne	.+86     	; 0x4b8c <sdcard_GetNbBlocks+0x84>
    {
	    return CachedTotalBlocks;
    }        
	
	disk_ioctl(0, GET_SECTOR_COUNT, &ioct_rsp);
    4b36:	ae 01       	movw	r20, r28
    4b38:	4f 5f       	subi	r20, 0xFF	; 255
    4b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    4b3c:	61 e0       	ldi	r22, 0x01	; 1
    4b3e:	80 e0       	ldi	r24, 0x00	; 0
    4b40:	0e 94 24 03 	call	0x648	; 0x648 <disk_ioctl>

	CachedTotalBlocks = ioct_rsp;
    4b44:	89 81       	ldd	r24, Y+1	; 0x01
    4b46:	9a 81       	ldd	r25, Y+2	; 0x02
    4b48:	2b 81       	ldd	r18, Y+3	; 0x03
    4b4a:	3c 81       	ldd	r19, Y+4	; 0x04
    4b4c:	80 93 d0 0a 	sts	0x0AD0, r24	; 0x800ad0 <CachedTotalBlocks.4974>
    4b50:	90 93 d1 0a 	sts	0x0AD1, r25	; 0x800ad1 <CachedTotalBlocks.4974+0x1>
    4b54:	20 93 d2 0a 	sts	0x0AD2, r18	; 0x800ad2 <CachedTotalBlocks.4974+0x2>
    4b58:	30 93 d3 0a 	sts	0x0AD3, r19	; 0x800ad3 <CachedTotalBlocks.4974+0x3>
	printf_P(PSTR("SD blocks: %li\r\n"), CachedTotalBlocks);
    4b5c:	3f 93       	push	r19
    4b5e:	2f 93       	push	r18
    4b60:	9f 93       	push	r25
    4b62:	8f 93       	push	r24
    4b64:	8c e5       	ldi	r24, 0x5C	; 92
    4b66:	91 e0       	ldi	r25, 0x01	; 1
    4b68:	9f 93       	push	r25
    4b6a:	8f 93       	push	r24
    4b6c:	0e 94 99 33 	call	0x6732	; 0x6732 <printf_P>
	
	return CachedTotalBlocks;
    4b70:	60 91 d0 0a 	lds	r22, 0x0AD0	; 0x800ad0 <CachedTotalBlocks.4974>
    4b74:	70 91 d1 0a 	lds	r23, 0x0AD1	; 0x800ad1 <CachedTotalBlocks.4974+0x1>
    4b78:	80 91 d2 0a 	lds	r24, 0x0AD2	; 0x800ad2 <CachedTotalBlocks.4974+0x2>
    4b7c:	90 91 d3 0a 	lds	r25, 0x0AD3	; 0x800ad3 <CachedTotalBlocks.4974+0x3>
    4b80:	0f 90       	pop	r0
    4b82:	0f 90       	pop	r0
    4b84:	0f 90       	pop	r0
    4b86:	0f 90       	pop	r0
    4b88:	0f 90       	pop	r0
    4b8a:	0f 90       	pop	r0
}
    4b8c:	0f 90       	pop	r0
    4b8e:	0f 90       	pop	r0
    4b90:	0f 90       	pop	r0
    4b92:	0f 90       	pop	r0
    4b94:	df 91       	pop	r29
    4b96:	cf 91       	pop	r28
    4b98:	08 95       	ret

00004b9a <sdcard_Init>:
    
    return retf;
}

bool sdcard_Init(void)
{
    4b9a:	0f 93       	push	r16
    4b9c:	1f 93       	push	r17
    4b9e:	cf 93       	push	r28
    4ba0:	df 93       	push	r29
    4ba2:	cd b7       	in	r28, 0x3d	; 61
    4ba4:	de b7       	in	r29, 0x3e	; 62
    4ba6:	d2 50       	subi	r29, 0x02	; 2
    4ba8:	0f b6       	in	r0, 0x3f	; 63
    4baa:	f8 94       	cli
    4bac:	de bf       	out	0x3e, r29	; 62
    4bae:	0f be       	out	0x3f, r0	; 63
    4bb0:	cd bf       	out	0x3d, r28	; 61
	printf_P(PSTR("\r\n\r\n"));
    4bb2:	8c eb       	ldi	r24, 0xBC	; 188
    4bb4:	91 e0       	ldi	r25, 0x01	; 1
    4bb6:	9f 93       	push	r25
    4bb8:	8f 93       	push	r24
    4bba:	0e 94 99 33 	call	0x6732	; 0x6732 <printf_P>
    4bbe:	0f 90       	pop	r0
    4bc0:	0f 90       	pop	r0
	do
	{
    	printf_P(PSTR("trying ... disk_initialize\r\n"));
    4bc2:	8f e9       	ldi	r24, 0x9F	; 159
    4bc4:	91 e0       	ldi	r25, 0x01	; 1
    4bc6:	9f 93       	push	r25
    4bc8:	8f 93       	push	r24
    4bca:	0e 94 99 33 	call	0x6732	; 0x6732 <printf_P>
	} while(disk_initialize(0) != FR_OK);
    4bce:	80 e0       	ldi	r24, 0x00	; 0
    4bd0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <disk_initialize>
    4bd4:	0f 90       	pop	r0
    4bd6:	0f 90       	pop	r0
    4bd8:	81 11       	cpse	r24, r1
    4bda:	f3 cf       	rjmp	.-26     	; 0x4bc2 <sdcard_Init+0x28>

	printf_P(PSTR("disk_initialize success\r\n"));
    4bdc:	85 e8       	ldi	r24, 0x85	; 133
    4bde:	91 e0       	ldi	r25, 0x01	; 1
    4be0:	9f 93       	push	r25
    4be2:	8f 93       	push	r24
    4be4:	0e 94 99 33 	call	0x6732	; 0x6732 <printf_P>
    
    sdcard_GetNbBlocks();
    4be8:	8f df       	rcall	.-226    	; 0x4b08 <sdcard_GetNbBlocks>
        
    uint8_t readed_sector[512] = { 0 };
    4bea:	8e 01       	movw	r16, r28
    4bec:	0f 5f       	subi	r16, 0xFF	; 255
    4bee:	1f 4f       	sbci	r17, 0xFF	; 255
    4bf0:	80 e0       	ldi	r24, 0x00	; 0
    4bf2:	92 e0       	ldi	r25, 0x02	; 2
    4bf4:	f8 01       	movw	r30, r16
    4bf6:	9c 01       	movw	r18, r24
    4bf8:	11 92       	st	Z+, r1
    4bfa:	21 50       	subi	r18, 0x01	; 1
    4bfc:	30 40       	sbci	r19, 0x00	; 0
    4bfe:	e1 f7       	brne	.-8      	; 0x4bf8 <sdcard_Init+0x5e>
    SD_read_sector(0, readed_sector);
    4c00:	a8 01       	movw	r20, r16
    4c02:	60 e0       	ldi	r22, 0x00	; 0
    4c04:	70 e0       	ldi	r23, 0x00	; 0
    4c06:	cb 01       	movw	r24, r22
    4c08:	0e 94 10 02 	call	0x420	; 0x420 <SD_read_sector>
    printf_P(PSTR("first SD sector:\r\n"));
    4c0c:	82 e7       	ldi	r24, 0x72	; 114
    4c0e:	91 e0       	ldi	r25, 0x01	; 1
    4c10:	9f 93       	push	r25
    4c12:	8f 93       	push	r24
    4c14:	0e 94 99 33 	call	0x6732	; 0x6732 <printf_P>
    uart_printhexdump(readed_sector, 512);
    4c18:	60 e0       	ldi	r22, 0x00	; 0
    4c1a:	72 e0       	ldi	r23, 0x02	; 2
    4c1c:	c8 01       	movw	r24, r16
    4c1e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <uart_printhexdump>
    printf_P(PSTR("\r\n\r\n"));
    4c22:	8d e6       	ldi	r24, 0x6D	; 109
    4c24:	91 e0       	ldi	r25, 0x01	; 1
    4c26:	9f 93       	push	r25
    4c28:	8f 93       	push	r24
    4c2a:	0e 94 99 33 	call	0x6732	; 0x6732 <printf_P>
    
    sdcard_create_sdload_times_file();
    4c2e:	42 de       	rcall	.-892    	; 0x48b4 <sdcard_create_sdload_times_file>
    
    return true;
    4c30:	0f 90       	pop	r0
    4c32:	0f 90       	pop	r0
    4c34:	0f 90       	pop	r0
    4c36:	0f 90       	pop	r0
    4c38:	0f 90       	pop	r0
    4c3a:	0f 90       	pop	r0
}
    4c3c:	81 e0       	ldi	r24, 0x01	; 1
    4c3e:	de 5f       	subi	r29, 0xFE	; 254
    4c40:	0f b6       	in	r0, 0x3f	; 63
    4c42:	f8 94       	cli
    4c44:	de bf       	out	0x3e, r29	; 62
    4c46:	0f be       	out	0x3f, r0	; 63
    4c48:	cd bf       	out	0x3d, r28	; 61
    4c4a:	df 91       	pop	r29
    4c4c:	cf 91       	pop	r28
    4c4e:	1f 91       	pop	r17
    4c50:	0f 91       	pop	r16
    4c52:	08 95       	ret

00004c54 <sdcard_WriteBlockHandler>:
 *
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
uintptr_t sdcard_WriteBlockHandler(uint8_t* buff_to_write, void* a, void* p)
{
    4c54:	cf 93       	push	r28
    4c56:	df 93       	push	r29
    4c58:	ec 01       	movw	r28, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    4c5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	/* Check if the endpoint is currently empty */
	if (!(Endpoint_IsReadWriteAllowed()))
    4c5e:	85 fd       	sbrc	r24, 5
    4c60:	09 c0       	rjmp	.+18     	; 0x4c74 <sdcard_WriteBlockHandler+0x20>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    4c62:	e8 ee       	ldi	r30, 0xE8	; 232
    4c64:	f0 e0       	ldi	r31, 0x00	; 0
    4c66:	80 81       	ld	r24, Z
    4c68:	8b 77       	andi	r24, 0x7B	; 123
    4c6a:	80 83       	st	Z, r24
	{
		/* Clear the current endpoint bank */
		Endpoint_ClearOUT();
		
		/* Wait until the host has sent another packet */
		if (Endpoint_WaitUntilReady())
    4c6c:	0e 94 86 2f 	call	0x5f0c	; 0x5f0c <Endpoint_WaitUntilReady>
    4c70:	81 11       	cpse	r24, r1
    4c72:	25 c0       	rjmp	.+74     	; 0x4cbe <sdcard_WriteBlockHandler+0x6a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    4c74:	e1 ef       	ldi	r30, 0xF1	; 241
    4c76:	f0 e0       	ldi	r31, 0x00	; 0
    4c78:	80 81       	ld	r24, Z
		  return 0;
	}
	
	/* Write one 16-byte chunk of data to the dataflash */
	buff_to_write[0] = Endpoint_Read_8();
    4c7a:	88 83       	st	Y, r24
    4c7c:	80 81       	ld	r24, Z
	buff_to_write[1] = Endpoint_Read_8();
    4c7e:	89 83       	std	Y+1, r24	; 0x01
    4c80:	80 81       	ld	r24, Z
	buff_to_write[2] = Endpoint_Read_8();
    4c82:	8a 83       	std	Y+2, r24	; 0x02
    4c84:	80 81       	ld	r24, Z
	buff_to_write[3] = Endpoint_Read_8();
    4c86:	8b 83       	std	Y+3, r24	; 0x03
    4c88:	80 81       	ld	r24, Z
	buff_to_write[4] = Endpoint_Read_8();
    4c8a:	8c 83       	std	Y+4, r24	; 0x04
    4c8c:	80 81       	ld	r24, Z
	buff_to_write[5] = Endpoint_Read_8();
    4c8e:	8d 83       	std	Y+5, r24	; 0x05
    4c90:	80 81       	ld	r24, Z
	buff_to_write[6] = Endpoint_Read_8();
    4c92:	8e 83       	std	Y+6, r24	; 0x06
    4c94:	80 81       	ld	r24, Z
	buff_to_write[7] = Endpoint_Read_8();
    4c96:	8f 83       	std	Y+7, r24	; 0x07
    4c98:	80 81       	ld	r24, Z
	buff_to_write[8] = Endpoint_Read_8();
    4c9a:	88 87       	std	Y+8, r24	; 0x08
    4c9c:	80 81       	ld	r24, Z
	buff_to_write[9] = Endpoint_Read_8();
    4c9e:	89 87       	std	Y+9, r24	; 0x09
    4ca0:	80 81       	ld	r24, Z
	buff_to_write[10] = Endpoint_Read_8();
    4ca2:	8a 87       	std	Y+10, r24	; 0x0a
    4ca4:	80 81       	ld	r24, Z
	buff_to_write[11] = Endpoint_Read_8();
    4ca6:	8b 87       	std	Y+11, r24	; 0x0b
    4ca8:	80 81       	ld	r24, Z
	buff_to_write[12] = Endpoint_Read_8();
    4caa:	8c 87       	std	Y+12, r24	; 0x0c
    4cac:	80 81       	ld	r24, Z
	buff_to_write[13] = Endpoint_Read_8();
    4cae:	8d 87       	std	Y+13, r24	; 0x0d
    4cb0:	80 81       	ld	r24, Z
	buff_to_write[14] = Endpoint_Read_8();
    4cb2:	8e 87       	std	Y+14, r24	; 0x0e
    4cb4:	80 81       	ld	r24, Z
	buff_to_write[15] = Endpoint_Read_8();
    4cb6:	8f 87       	std	Y+15, r24	; 0x0f
	
	return 16;
    4cb8:	80 e1       	ldi	r24, 0x10	; 16
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	02 c0       	rjmp	.+4      	; 0x4cc2 <sdcard_WriteBlockHandler+0x6e>
		/* Clear the current endpoint bank */
		Endpoint_ClearOUT();
		
		/* Wait until the host has sent another packet */
		if (Endpoint_WaitUntilReady())
		  return 0;
    4cbe:	80 e0       	ldi	r24, 0x00	; 0
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
	buff_to_write[13] = Endpoint_Read_8();
	buff_to_write[14] = Endpoint_Read_8();
	buff_to_write[15] = Endpoint_Read_8();
	
	return 16;
}
    4cc2:	df 91       	pop	r29
    4cc4:	cf 91       	pop	r28
    4cc6:	08 95       	ret

00004cc8 <sdcard_WriteBlocks>:

void sdcard_WriteBlocks(USB_ClassInfo_MS_Device_t* MSInterfaceInfo, uint32_t BlockAddress, uint16_t TotalBlocks)
{
    4cc8:	8f 92       	push	r8
    4cca:	9f 92       	push	r9
    4ccc:	af 92       	push	r10
    4cce:	bf 92       	push	r11
    4cd0:	cf 92       	push	r12
    4cd2:	df 92       	push	r13
    4cd4:	ef 92       	push	r14
    4cd6:	ff 92       	push	r15
    4cd8:	0f 93       	push	r16
    4cda:	1f 93       	push	r17
    4cdc:	cf 93       	push	r28
    4cde:	df 93       	push	r29
    4ce0:	6c 01       	movw	r12, r24
    4ce2:	4a 01       	movw	r8, r20
    4ce4:	5b 01       	movw	r10, r22
    4ce6:	79 01       	movw	r14, r18
	int i;
	static uint8_t buff_to_write[512];
	
	printf_P(PSTR("W %li %i\r\n"), BlockAddress, TotalBlocks);
    4ce8:	ff 92       	push	r15
    4cea:	2f 93       	push	r18
    4cec:	bf 92       	push	r11
    4cee:	af 92       	push	r10
    4cf0:	9f 92       	push	r9
    4cf2:	4f 93       	push	r20
    4cf4:	81 e5       	ldi	r24, 0x51	; 81
    4cf6:	91 e0       	ldi	r25, 0x01	; 1
    4cf8:	9f 93       	push	r25
    4cfa:	8f 93       	push	r24
    4cfc:	0e 94 99 33 	call	0x6732	; 0x6732 <printf_P>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
    4d00:	0e 94 86 2f 	call	0x5f0c	; 0x5f0c <Endpoint_WaitUntilReady>
    4d04:	2d b7       	in	r18, 0x3d	; 61
    4d06:	3e b7       	in	r19, 0x3e	; 62
    4d08:	28 5f       	subi	r18, 0xF8	; 248
    4d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d0c:	0f b6       	in	r0, 0x3f	; 63
    4d0e:	f8 94       	cli
    4d10:	3e bf       	out	0x3e, r19	; 62
    4d12:	0f be       	out	0x3f, r0	; 63
    4d14:	2d bf       	out	0x3d, r18	; 61
    4d16:	88 23       	and	r24, r24
    4d18:	59 f1       	breq	.+86     	; 0x4d70 <sdcard_WriteBlocks+0xa8>
    4d1a:	36 c0       	rjmp	.+108    	; 0x4d88 <sdcard_WriteBlocks+0xc0>
	
	while (TotalBlocks)
	{
		for (i = 0; i < 32; i++)
		{
			sdcard_WriteBlockHandler(buff_to_write + (16 * i), NULL, NULL);	
    4d1c:	ce 01       	movw	r24, r28
    4d1e:	82 95       	swap	r24
    4d20:	92 95       	swap	r25
    4d22:	90 7f       	andi	r25, 0xF0	; 240
    4d24:	98 27       	eor	r25, r24
    4d26:	80 7f       	andi	r24, 0xF0	; 240
    4d28:	98 27       	eor	r25, r24
    4d2a:	40 e0       	ldi	r20, 0x00	; 0
    4d2c:	50 e0       	ldi	r21, 0x00	; 0
    4d2e:	60 e0       	ldi	r22, 0x00	; 0
    4d30:	70 e0       	ldi	r23, 0x00	; 0
    4d32:	80 53       	subi	r24, 0x30	; 48
    4d34:	97 4f       	sbci	r25, 0xF7	; 247
    4d36:	8e df       	rcall	.-228    	; 0x4c54 <sdcard_WriteBlockHandler>
	if (Endpoint_WaitUntilReady())
	  return;
	
	while (TotalBlocks)
	{
		for (i = 0; i < 32; i++)
    4d38:	21 96       	adiw	r28, 0x01	; 1
    4d3a:	02 c0       	rjmp	.+4      	; 0x4d40 <sdcard_WriteBlocks+0x78>
    4d3c:	c0 e0       	ldi	r28, 0x00	; 0
    4d3e:	d0 e0       	ldi	r29, 0x00	; 0
    4d40:	c0 32       	cpi	r28, 0x20	; 32
    4d42:	d1 05       	cpc	r29, r1
    4d44:	5c f3       	brlt	.-42     	; 0x4d1c <sdcard_WriteBlocks+0x54>
		{
			sdcard_WriteBlockHandler(buff_to_write + (16 * i), NULL, NULL);	
		}
		
        disk_write(0, buff_to_write, BlockAddress, 1);
    4d46:	01 e0       	ldi	r16, 0x01	; 1
    4d48:	10 e0       	ldi	r17, 0x00	; 0
    4d4a:	a5 01       	movw	r20, r10
    4d4c:	94 01       	movw	r18, r8
    4d4e:	60 ed       	ldi	r22, 0xD0	; 208
    4d50:	78 e0       	ldi	r23, 0x08	; 8
    4d52:	80 e0       	ldi	r24, 0x00	; 0
    4d54:	0e 94 14 03 	call	0x628	; 0x628 <disk_write>
				
		/* Check if the current command is being aborted by the host */
		if (MSInterfaceInfo->State.IsMassStoreReset)
    4d58:	f6 01       	movw	r30, r12
    4d5a:	80 ad       	ldd	r24, Z+56	; 0x38
    4d5c:	81 11       	cpse	r24, r1
    4d5e:	14 c0       	rjmp	.+40     	; 0x4d88 <sdcard_WriteBlocks+0xc0>
		  return;
			
		/* Decrement the blocks remaining counter and reset the sub block counter */
		BlockAddress++;
    4d60:	ff ef       	ldi	r31, 0xFF	; 255
    4d62:	8f 1a       	sub	r8, r31
    4d64:	9f 0a       	sbc	r9, r31
    4d66:	af 0a       	sbc	r10, r31
    4d68:	bf 0a       	sbc	r11, r31
		TotalBlocks--;
    4d6a:	21 e0       	ldi	r18, 0x01	; 1
    4d6c:	e2 1a       	sub	r14, r18
    4d6e:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;
	
	while (TotalBlocks)
    4d70:	e1 14       	cp	r14, r1
    4d72:	f1 04       	cpc	r15, r1
    4d74:	19 f7       	brne	.-58     	; 0x4d3c <sdcard_WriteBlocks+0x74>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    4d76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		BlockAddress++;
		TotalBlocks--;
	}

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    4d7a:	85 fd       	sbrc	r24, 5
    4d7c:	05 c0       	rjmp	.+10     	; 0x4d88 <sdcard_WriteBlocks+0xc0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    4d7e:	e8 ee       	ldi	r30, 0xE8	; 232
    4d80:	f0 e0       	ldi	r31, 0x00	; 0
    4d82:	80 81       	ld	r24, Z
    4d84:	8b 77       	andi	r24, 0x7B	; 123
    4d86:	80 83       	st	Z, r24
	  Endpoint_ClearOUT();
}
    4d88:	df 91       	pop	r29
    4d8a:	cf 91       	pop	r28
    4d8c:	1f 91       	pop	r17
    4d8e:	0f 91       	pop	r16
    4d90:	ff 90       	pop	r15
    4d92:	ef 90       	pop	r14
    4d94:	df 90       	pop	r13
    4d96:	cf 90       	pop	r12
    4d98:	bf 90       	pop	r11
    4d9a:	af 90       	pop	r10
    4d9c:	9f 90       	pop	r9
    4d9e:	8f 90       	pop	r8
    4da0:	08 95       	ret

00004da2 <sdcard_ReadBlocks>:
	
	return 1;
}

void sdcard_ReadBlocks(USB_ClassInfo_MS_Device_t* MSInterfaceInfo, uint32_t BlockAddress, uint16_t TotalBlocks)
{
    4da2:	8f 92       	push	r8
    4da4:	9f 92       	push	r9
    4da6:	af 92       	push	r10
    4da8:	bf 92       	push	r11
    4daa:	ef 92       	push	r14
    4dac:	ff 92       	push	r15
    4dae:	0f 93       	push	r16
    4db0:	1f 93       	push	r17
    4db2:	cf 93       	push	r28
    4db4:	df 93       	push	r29
    4db6:	4a 01       	movw	r8, r20
    4db8:	5b 01       	movw	r10, r22
    4dba:	79 01       	movw	r14, r18
	static uint8_t buff_rd[512];
	int i;
	
	printf_P(PSTR("R %li %i\r\n"), BlockAddress, TotalBlocks);
    4dbc:	ff 92       	push	r15
    4dbe:	2f 93       	push	r18
    4dc0:	bf 92       	push	r11
    4dc2:	af 92       	push	r10
    4dc4:	9f 92       	push	r9
    4dc6:	4f 93       	push	r20
    4dc8:	86 e4       	ldi	r24, 0x46	; 70
    4dca:	91 e0       	ldi	r25, 0x01	; 1
    4dcc:	9f 93       	push	r25
    4dce:	8f 93       	push	r24
    4dd0:	0e 94 99 33 	call	0x6732	; 0x6732 <printf_P>
	
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
    4dd4:	0e 94 86 2f 	call	0x5f0c	; 0x5f0c <Endpoint_WaitUntilReady>
    4dd8:	2d b7       	in	r18, 0x3d	; 61
    4dda:	3e b7       	in	r19, 0x3e	; 62
    4ddc:	28 5f       	subi	r18, 0xF8	; 248
    4dde:	3f 4f       	sbci	r19, 0xFF	; 255
    4de0:	0f b6       	in	r0, 0x3f	; 63
    4de2:	f8 94       	cli
    4de4:	3e bf       	out	0x3e, r19	; 62
    4de6:	0f be       	out	0x3f, r0	; 63
    4de8:	2d bf       	out	0x3d, r18	; 61
    4dea:	88 23       	and	r24, r24
    4dec:	09 f4       	brne	.+2      	; 0x4df0 <sdcard_ReadBlocks+0x4e>
    4dee:	52 c0       	rjmp	.+164    	; 0x4e94 <sdcard_ReadBlocks+0xf2>
    4df0:	5e c0       	rjmp	.+188    	; 0x4eae <sdcard_ReadBlocks+0x10c>
	  return;
      
	while (TotalBlocks)
	{
        disk_read(0, buff_rd, BlockAddress, 1);
    4df2:	01 e0       	ldi	r16, 0x01	; 1
    4df4:	10 e0       	ldi	r17, 0x00	; 0
    4df6:	a5 01       	movw	r20, r10
    4df8:	94 01       	movw	r18, r8
    4dfa:	60 ed       	ldi	r22, 0xD0	; 208
    4dfc:	76 e0       	ldi	r23, 0x06	; 6
    4dfe:	80 e0       	ldi	r24, 0x00	; 0
    4e00:	0e 94 04 03 	call	0x608	; 0x608 <disk_read>
		for (i = 0; i < 32; i++)
    4e04:	00 e0       	ldi	r16, 0x00	; 0
    4e06:	10 e0       	ldi	r17, 0x00	; 0
    4e08:	3a c0       	rjmp	.+116    	; 0x4e7e <sdcard_ReadBlocks+0xdc>
		{
			sdcard_ReadBlockHandler(buff_rd + (16 * i), NULL, NULL);	
    4e0a:	e8 01       	movw	r28, r16
    4e0c:	c2 95       	swap	r28
    4e0e:	d2 95       	swap	r29
    4e10:	d0 7f       	andi	r29, 0xF0	; 240
    4e12:	dc 27       	eor	r29, r28
    4e14:	c0 7f       	andi	r28, 0xF0	; 240
    4e16:	dc 27       	eor	r29, r28
    4e18:	c0 53       	subi	r28, 0x30	; 48
    4e1a:	d9 4f       	sbci	r29, 0xF9	; 249
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    4e1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 */

static inline uint8_t sdcard_ReadBlockHandler(uint8_t* buffer, void* a, void* p)
{
	/* Check if the endpoint is currently full */
	if (!(Endpoint_IsReadWriteAllowed()))
    4e20:	85 fd       	sbrc	r24, 5
    4e22:	09 c0       	rjmp	.+18     	; 0x4e36 <sdcard_ReadBlocks+0x94>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4e24:	e8 ee       	ldi	r30, 0xE8	; 232
    4e26:	f0 e0       	ldi	r31, 0x00	; 0
    4e28:	80 81       	ld	r24, Z
    4e2a:	8e 77       	andi	r24, 0x7E	; 126
    4e2c:	80 83       	st	Z, r24
	{
		/* Clear the endpoint bank to send its contents to the host */
		Endpoint_ClearIN();
		
		/* Wait until the endpoint is ready for more data */
		if (Endpoint_WaitUntilReady())
    4e2e:	0e 94 86 2f 	call	0x5f0c	; 0x5f0c <Endpoint_WaitUntilReady>
    4e32:	81 11       	cpse	r24, r1
    4e34:	22 c0       	rjmp	.+68     	; 0x4e7a <sdcard_ReadBlocks+0xd8>
		  return 0;
	}
		
	Endpoint_Write_8(buffer[0]);
    4e36:	88 81       	ld	r24, Y
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4e38:	e1 ef       	ldi	r30, 0xF1	; 241
    4e3a:	f0 e0       	ldi	r31, 0x00	; 0
    4e3c:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[1]);
    4e3e:	89 81       	ldd	r24, Y+1	; 0x01
    4e40:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[2]);
    4e42:	8a 81       	ldd	r24, Y+2	; 0x02
    4e44:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[3]);
    4e46:	8b 81       	ldd	r24, Y+3	; 0x03
    4e48:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[4]);
    4e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    4e4c:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[5]);
    4e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e50:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[6]);
    4e52:	8e 81       	ldd	r24, Y+6	; 0x06
    4e54:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[7]);
    4e56:	8f 81       	ldd	r24, Y+7	; 0x07
    4e58:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[8]);
    4e5a:	88 85       	ldd	r24, Y+8	; 0x08
    4e5c:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[9]);
    4e5e:	89 85       	ldd	r24, Y+9	; 0x09
    4e60:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[10]);
    4e62:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e64:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[11]);
    4e66:	8b 85       	ldd	r24, Y+11	; 0x0b
    4e68:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[12]);
    4e6a:	8c 85       	ldd	r24, Y+12	; 0x0c
    4e6c:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[13]);
    4e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e70:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[14]);
    4e72:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e74:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[15]);
    4e76:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e78:	80 83       	st	Z, r24
	  return;
      
	while (TotalBlocks)
	{
        disk_read(0, buff_rd, BlockAddress, 1);
		for (i = 0; i < 32; i++)
    4e7a:	0f 5f       	subi	r16, 0xFF	; 255
    4e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e7e:	00 32       	cpi	r16, 0x20	; 32
    4e80:	11 05       	cpc	r17, r1
    4e82:	1c f2       	brlt	.-122    	; 0x4e0a <sdcard_ReadBlocks+0x68>
		{
			sdcard_ReadBlockHandler(buff_rd + (16 * i), NULL, NULL);	
		}
		/* Decrement the blocks remaining counter */
		BlockAddress++;
    4e84:	3f ef       	ldi	r19, 0xFF	; 255
    4e86:	83 1a       	sub	r8, r19
    4e88:	93 0a       	sbc	r9, r19
    4e8a:	a3 0a       	sbc	r10, r19
    4e8c:	b3 0a       	sbc	r11, r19
		TotalBlocks--;
    4e8e:	81 e0       	ldi	r24, 0x01	; 1
    4e90:	e8 1a       	sub	r14, r24
    4e92:	f1 08       	sbc	r15, r1
	
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;
      
	while (TotalBlocks)
    4e94:	e1 14       	cp	r14, r1
    4e96:	f1 04       	cpc	r15, r1
    4e98:	09 f0       	breq	.+2      	; 0x4e9c <sdcard_ReadBlocks+0xfa>
    4e9a:	ab cf       	rjmp	.-170    	; 0x4df2 <sdcard_ReadBlocks+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    4e9c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		BlockAddress++;
		TotalBlocks--;
	}
    
	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    4ea0:	85 fd       	sbrc	r24, 5
    4ea2:	05 c0       	rjmp	.+10     	; 0x4eae <sdcard_ReadBlocks+0x10c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4ea4:	e8 ee       	ldi	r30, 0xE8	; 232
    4ea6:	f0 e0       	ldi	r31, 0x00	; 0
    4ea8:	80 81       	ld	r24, Z
    4eaa:	8e 77       	andi	r24, 0x7E	; 126
    4eac:	80 83       	st	Z, r24
	  Endpoint_ClearIN();
}
    4eae:	df 91       	pop	r29
    4eb0:	cf 91       	pop	r28
    4eb2:	1f 91       	pop	r17
    4eb4:	0f 91       	pop	r16
    4eb6:	ff 90       	pop	r15
    4eb8:	ef 90       	pop	r14
    4eba:	bf 90       	pop	r11
    4ebc:	af 90       	pop	r10
    4ebe:	9f 90       	pop	r9
    4ec0:	8f 90       	pop	r8
    4ec2:	08 95       	ret

00004ec4 <sdcard_CheckDataflashOperation>:
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool sdcard_CheckDataflashOperation(void)
{	
	return true;
}
    4ec4:	81 e0       	ldi	r24, 0x01	; 1
    4ec6:	08 95       	ret

00004ec8 <Serial_putchar>:
{
	uint8_t* CurrByte = (uint8_t*)Buffer;

	while (Length--)
	  Serial_SendByte(*(CurrByte++));
}
    4ec8:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    4ecc:	95 ff       	sbrs	r25, 5
    4ece:	fc cf       	rjmp	.-8      	; 0x4ec8 <Serial_putchar>
    4ed0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4ed4:	80 e0       	ldi	r24, 0x00	; 0
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	08 95       	ret

00004eda <Serial_getchar>:
    4eda:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    4ede:	88 23       	and	r24, r24
    4ee0:	5c f4       	brge	.+22     	; 0x4ef8 <Serial_getchar+0x1e>
    4ee2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    4ee6:	88 23       	and	r24, r24
    4ee8:	24 f4       	brge	.+8      	; 0x4ef2 <Serial_getchar+0x18>
    4eea:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	08 95       	ret
    4ef2:	8f ef       	ldi	r24, 0xFF	; 255
    4ef4:	9f ef       	ldi	r25, 0xFF	; 255
    4ef6:	08 95       	ret
    4ef8:	8e ef       	ldi	r24, 0xFE	; 254
    4efa:	9f ef       	ldi	r25, 0xFF	; 255
    4efc:	08 95       	ret

00004efe <Serial_SendString>:
    4efe:	fc 01       	movw	r30, r24
    4f00:	07 c0       	rjmp	.+14     	; 0x4f10 <Serial_SendString+0x12>
    4f02:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    4f06:	95 ff       	sbrs	r25, 5
    4f08:	fc cf       	rjmp	.-8      	; 0x4f02 <Serial_SendString+0x4>
    4f0a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4f0e:	31 96       	adiw	r30, 0x01	; 1
    4f10:	80 81       	ld	r24, Z
    4f12:	81 11       	cpse	r24, r1
    4f14:	f6 cf       	rjmp	.-20     	; 0x4f02 <Serial_SendString+0x4>
    4f16:	08 95       	ret

00004f18 <Serial_CreateStream>:

void Serial_CreateStream(FILE* Stream)
{
    4f18:	fc 01       	movw	r30, r24
	if (!(Stream))
    4f1a:	89 2b       	or	r24, r25
    4f1c:	49 f4       	brne	.+18     	; 0x4f30 <Serial_CreateStream+0x18>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    4f1e:	e8 e4       	ldi	r30, 0x48	; 72
    4f20:	fd e0       	ldi	r31, 0x0D	; 13
    4f22:	8d e2       	ldi	r24, 0x2D	; 45
    4f24:	9d e0       	ldi	r25, 0x0D	; 13
    4f26:	91 83       	std	Z+1, r25	; 0x01
    4f28:	80 83       	st	Z, r24
		stdout = Stream;
    4f2a:	93 83       	std	Z+3, r25	; 0x03
    4f2c:	82 83       	std	Z+2, r24	; 0x02

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    4f2e:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    4f30:	8e e0       	ldi	r24, 0x0E	; 14
    4f32:	df 01       	movw	r26, r30
    4f34:	1d 92       	st	X+, r1
    4f36:	8a 95       	dec	r24
    4f38:	e9 f7       	brne	.-6      	; 0x4f34 <Serial_CreateStream+0x1c>
    4f3a:	83 e0       	ldi	r24, 0x03	; 3
    4f3c:	83 83       	std	Z+3, r24	; 0x03
    4f3e:	84 e6       	ldi	r24, 0x64	; 100
    4f40:	97 e2       	ldi	r25, 0x27	; 39
    4f42:	91 87       	std	Z+9, r25	; 0x09
    4f44:	80 87       	std	Z+8, r24	; 0x08
    4f46:	8d e6       	ldi	r24, 0x6D	; 109
    4f48:	97 e2       	ldi	r25, 0x27	; 39
    4f4a:	93 87       	std	Z+11, r25	; 0x0b
    4f4c:	82 87       	std	Z+10, r24	; 0x0a
    4f4e:	08 95       	ret

00004f50 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    4f50:	cf 93       	push	r28
    4f52:	df 93       	push	r29
    4f54:	ec 01       	movw	r28, r24
    4f56:	fc 01       	movw	r30, r24
    4f58:	70 96       	adiw	r30, 0x10	; 16
    4f5a:	8b e0       	ldi	r24, 0x0B	; 11
    4f5c:	df 01       	movw	r26, r30
    4f5e:	1d 92       	st	X+, r1
    4f60:	8a 95       	dec	r24
    4f62:	e9 f7       	brne	.-6      	; 0x4f5e <CDC_Device_ConfigureEndpoints+0xe>
    4f64:	82 e0       	ldi	r24, 0x02	; 2
    4f66:	8c 83       	std	Y+4, r24	; 0x04
    4f68:	89 87       	std	Y+9, r24	; 0x09
    4f6a:	83 e0       	ldi	r24, 0x03	; 3
    4f6c:	8e 87       	std	Y+14, r24	; 0x0e
    4f6e:	61 e0       	ldi	r22, 0x01	; 1
    4f70:	ce 01       	movw	r24, r28
    4f72:	01 96       	adiw	r24, 0x01	; 1
    4f74:	64 d7       	rcall	.+3784   	; 0x5e3e <Endpoint_ConfigureEndpointTable>
    4f76:	88 23       	and	r24, r24
    4f78:	51 f0       	breq	.+20     	; 0x4f8e <CDC_Device_ConfigureEndpoints+0x3e>
    4f7a:	61 e0       	ldi	r22, 0x01	; 1
    4f7c:	ce 01       	movw	r24, r28
    4f7e:	06 96       	adiw	r24, 0x06	; 6
    4f80:	5e d7       	rcall	.+3772   	; 0x5e3e <Endpoint_ConfigureEndpointTable>
    4f82:	88 23       	and	r24, r24
    4f84:	21 f0       	breq	.+8      	; 0x4f8e <CDC_Device_ConfigureEndpoints+0x3e>
    4f86:	61 e0       	ldi	r22, 0x01	; 1
    4f88:	ce 01       	movw	r24, r28
    4f8a:	0b 96       	adiw	r24, 0x0b	; 11
    4f8c:	58 d7       	rcall	.+3760   	; 0x5e3e <Endpoint_ConfigureEndpointTable>
    4f8e:	df 91       	pop	r29
    4f90:	cf 91       	pop	r28
    4f92:	08 95       	ret

00004f94 <CDC_Device_SendString>:
    4f94:	fc 01       	movw	r30, r24
    4f96:	90 91 3f 0d 	lds	r25, 0x0D3F	; 0x800d3f <USB_DeviceState>
    4f9a:	94 30       	cpi	r25, 0x04	; 4
    4f9c:	c9 f4       	brne	.+50     	; 0x4fd0 <CDC_Device_SendString+0x3c>
    4f9e:	84 89       	ldd	r24, Z+20	; 0x14
    4fa0:	95 89       	ldd	r25, Z+21	; 0x15
    4fa2:	a6 89       	ldd	r26, Z+22	; 0x16
    4fa4:	b7 89       	ldd	r27, Z+23	; 0x17
    4fa6:	89 2b       	or	r24, r25
    4fa8:	8a 2b       	or	r24, r26
    4faa:	8b 2b       	or	r24, r27
    4fac:	99 f0       	breq	.+38     	; 0x4fd4 <CDC_Device_SendString+0x40>
    4fae:	cb 01       	movw	r24, r22
    4fb0:	21 81       	ldd	r18, Z+1	; 0x01
    4fb2:	2f 70       	andi	r18, 0x0F	; 15
    4fb4:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    4fb8:	fb 01       	movw	r30, r22
    4fba:	01 90       	ld	r0, Z+
    4fbc:	00 20       	and	r0, r0
    4fbe:	e9 f7       	brne	.-6      	; 0x4fba <CDC_Device_SendString+0x26>
    4fc0:	31 97       	sbiw	r30, 0x01	; 1
    4fc2:	bf 01       	movw	r22, r30
    4fc4:	68 1b       	sub	r22, r24
    4fc6:	79 0b       	sbc	r23, r25
    4fc8:	40 e0       	ldi	r20, 0x00	; 0
    4fca:	50 e0       	ldi	r21, 0x00	; 0
    4fcc:	74 c5       	rjmp	.+2792   	; 0x5ab6 <Endpoint_Write_Stream_LE>
    4fce:	08 95       	ret
    4fd0:	82 e0       	ldi	r24, 0x02	; 2
    4fd2:	08 95       	ret
    4fd4:	82 e0       	ldi	r24, 0x02	; 2
    4fd6:	08 95       	ret

00004fd8 <CDC_Device_SendByte>:
    4fd8:	cf 93       	push	r28
    4fda:	fc 01       	movw	r30, r24
    4fdc:	90 91 3f 0d 	lds	r25, 0x0D3F	; 0x800d3f <USB_DeviceState>
    4fe0:	94 30       	cpi	r25, 0x04	; 4
    4fe2:	e9 f4       	brne	.+58     	; 0x501e <CDC_Device_SendByte+0x46>
    4fe4:	84 89       	ldd	r24, Z+20	; 0x14
    4fe6:	95 89       	ldd	r25, Z+21	; 0x15
    4fe8:	a6 89       	ldd	r26, Z+22	; 0x16
    4fea:	b7 89       	ldd	r27, Z+23	; 0x17
    4fec:	89 2b       	or	r24, r25
    4fee:	8a 2b       	or	r24, r26
    4ff0:	8b 2b       	or	r24, r27
    4ff2:	b9 f0       	breq	.+46     	; 0x5022 <CDC_Device_SendByte+0x4a>
    4ff4:	c6 2f       	mov	r28, r22
    4ff6:	81 81       	ldd	r24, Z+1	; 0x01
    4ff8:	8f 70       	andi	r24, 0x0F	; 15
    4ffa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    4ffe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5002:	85 fd       	sbrc	r24, 5
    5004:	08 c0       	rjmp	.+16     	; 0x5016 <CDC_Device_SendByte+0x3e>
    5006:	e8 ee       	ldi	r30, 0xE8	; 232
    5008:	f0 e0       	ldi	r31, 0x00	; 0
    500a:	80 81       	ld	r24, Z
    500c:	8e 77       	andi	r24, 0x7E	; 126
    500e:	80 83       	st	Z, r24
    5010:	7d d7       	rcall	.+3834   	; 0x5f0c <Endpoint_WaitUntilReady>
    5012:	81 11       	cpse	r24, r1
    5014:	07 c0       	rjmp	.+14     	; 0x5024 <CDC_Device_SendByte+0x4c>
    5016:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    501a:	80 e0       	ldi	r24, 0x00	; 0
    501c:	03 c0       	rjmp	.+6      	; 0x5024 <CDC_Device_SendByte+0x4c>
    501e:	82 e0       	ldi	r24, 0x02	; 2
    5020:	01 c0       	rjmp	.+2      	; 0x5024 <CDC_Device_SendByte+0x4c>
    5022:	82 e0       	ldi	r24, 0x02	; 2
    5024:	cf 91       	pop	r28
    5026:	08 95       	ret

00005028 <CDC_Device_putchar>:
    5028:	fb 01       	movw	r30, r22
    502a:	68 2f       	mov	r22, r24
    502c:	84 85       	ldd	r24, Z+12	; 0x0c
    502e:	95 85       	ldd	r25, Z+13	; 0x0d
    5030:	d3 df       	rcall	.-90     	; 0x4fd8 <CDC_Device_SendByte>
    5032:	88 23       	and	r24, r24
    5034:	19 f0       	breq	.+6      	; 0x503c <CDC_Device_putchar+0x14>
    5036:	8f ef       	ldi	r24, 0xFF	; 255
    5038:	9f ef       	ldi	r25, 0xFF	; 255
    503a:	08 95       	ret
    503c:	80 e0       	ldi	r24, 0x00	; 0
    503e:	90 e0       	ldi	r25, 0x00	; 0
    5040:	08 95       	ret

00005042 <CDC_Device_Flush>:
    5042:	cf 93       	push	r28
    5044:	fc 01       	movw	r30, r24
    5046:	90 91 3f 0d 	lds	r25, 0x0D3F	; 0x800d3f <USB_DeviceState>
    504a:	94 30       	cpi	r25, 0x04	; 4
    504c:	29 f5       	brne	.+74     	; 0x5098 <CDC_Device_Flush+0x56>
    504e:	84 89       	ldd	r24, Z+20	; 0x14
    5050:	95 89       	ldd	r25, Z+21	; 0x15
    5052:	a6 89       	ldd	r26, Z+22	; 0x16
    5054:	b7 89       	ldd	r27, Z+23	; 0x17
    5056:	89 2b       	or	r24, r25
    5058:	8a 2b       	or	r24, r26
    505a:	8b 2b       	or	r24, r27
    505c:	f9 f0       	breq	.+62     	; 0x509c <CDC_Device_Flush+0x5a>
    505e:	81 81       	ldd	r24, Z+1	; 0x01
    5060:	8f 70       	andi	r24, 0x0F	; 15
    5062:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    5066:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    506a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    506e:	89 2b       	or	r24, r25
    5070:	b9 f0       	breq	.+46     	; 0x50a0 <CDC_Device_Flush+0x5e>
    5072:	e8 ee       	ldi	r30, 0xE8	; 232
    5074:	f0 e0       	ldi	r31, 0x00	; 0
    5076:	90 81       	ld	r25, Z
    5078:	80 81       	ld	r24, Z
    507a:	8e 77       	andi	r24, 0x7E	; 126
    507c:	80 83       	st	Z, r24
    507e:	c9 2f       	mov	r28, r25
    5080:	c0 72       	andi	r28, 0x20	; 32
    5082:	95 fd       	sbrc	r25, 5
    5084:	0f c0       	rjmp	.+30     	; 0x50a4 <CDC_Device_Flush+0x62>
    5086:	42 d7       	rcall	.+3716   	; 0x5f0c <Endpoint_WaitUntilReady>
    5088:	81 11       	cpse	r24, r1
    508a:	0e c0       	rjmp	.+28     	; 0x50a8 <CDC_Device_Flush+0x66>
    508c:	e8 ee       	ldi	r30, 0xE8	; 232
    508e:	f0 e0       	ldi	r31, 0x00	; 0
    5090:	80 81       	ld	r24, Z
    5092:	8e 77       	andi	r24, 0x7E	; 126
    5094:	80 83       	st	Z, r24
    5096:	09 c0       	rjmp	.+18     	; 0x50aa <CDC_Device_Flush+0x68>
    5098:	c2 e0       	ldi	r28, 0x02	; 2
    509a:	07 c0       	rjmp	.+14     	; 0x50aa <CDC_Device_Flush+0x68>
    509c:	c2 e0       	ldi	r28, 0x02	; 2
    509e:	05 c0       	rjmp	.+10     	; 0x50aa <CDC_Device_Flush+0x68>
    50a0:	c0 e0       	ldi	r28, 0x00	; 0
    50a2:	03 c0       	rjmp	.+6      	; 0x50aa <CDC_Device_Flush+0x68>
    50a4:	c0 e0       	ldi	r28, 0x00	; 0
    50a6:	01 c0       	rjmp	.+2      	; 0x50aa <CDC_Device_Flush+0x68>
    50a8:	c8 2f       	mov	r28, r24
    50aa:	8c 2f       	mov	r24, r28
    50ac:	cf 91       	pop	r28
    50ae:	08 95       	ret

000050b0 <CDC_Device_USBTask>:
    50b0:	fc 01       	movw	r30, r24
    50b2:	90 91 3f 0d 	lds	r25, 0x0D3F	; 0x800d3f <USB_DeviceState>
    50b6:	94 30       	cpi	r25, 0x04	; 4
    50b8:	91 f4       	brne	.+36     	; 0x50de <CDC_Device_USBTask+0x2e>
    50ba:	84 89       	ldd	r24, Z+20	; 0x14
    50bc:	95 89       	ldd	r25, Z+21	; 0x15
    50be:	a6 89       	ldd	r26, Z+22	; 0x16
    50c0:	b7 89       	ldd	r27, Z+23	; 0x17
    50c2:	89 2b       	or	r24, r25
    50c4:	8a 2b       	or	r24, r26
    50c6:	8b 2b       	or	r24, r27
    50c8:	51 f0       	breq	.+20     	; 0x50de <CDC_Device_USBTask+0x2e>
    50ca:	81 81       	ldd	r24, Z+1	; 0x01
    50cc:	8f 70       	andi	r24, 0x0F	; 15
    50ce:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    50d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    50d6:	80 ff       	sbrs	r24, 0
    50d8:	02 c0       	rjmp	.+4      	; 0x50de <CDC_Device_USBTask+0x2e>
    50da:	cf 01       	movw	r24, r30
    50dc:	b2 cf       	rjmp	.-156    	; 0x5042 <CDC_Device_Flush>
    50de:	08 95       	ret

000050e0 <CDC_Device_ReceiveByte>:
    50e0:	20 91 3f 0d 	lds	r18, 0x0D3F	; 0x800d3f <USB_DeviceState>
    50e4:	24 30       	cpi	r18, 0x04	; 4
    50e6:	59 f5       	brne	.+86     	; 0x513e <CDC_Device_ReceiveByte+0x5e>
    50e8:	fc 01       	movw	r30, r24
    50ea:	44 89       	ldd	r20, Z+20	; 0x14
    50ec:	55 89       	ldd	r21, Z+21	; 0x15
    50ee:	66 89       	ldd	r22, Z+22	; 0x16
    50f0:	77 89       	ldd	r23, Z+23	; 0x17
    50f2:	45 2b       	or	r20, r21
    50f4:	46 2b       	or	r20, r22
    50f6:	47 2b       	or	r20, r23
    50f8:	29 f1       	breq	.+74     	; 0x5144 <CDC_Device_ReceiveByte+0x64>
    50fa:	86 81       	ldd	r24, Z+6	; 0x06
    50fc:	8f 70       	andi	r24, 0x0F	; 15
    50fe:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    5102:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5106:	82 ff       	sbrs	r24, 2
    5108:	20 c0       	rjmp	.+64     	; 0x514a <CDC_Device_ReceiveByte+0x6a>
    510a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    510e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    5112:	89 2b       	or	r24, r25
    5114:	21 f0       	breq	.+8      	; 0x511e <CDC_Device_ReceiveByte+0x3e>
    5116:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    511a:	30 e0       	ldi	r19, 0x00	; 0
    511c:	02 c0       	rjmp	.+4      	; 0x5122 <CDC_Device_ReceiveByte+0x42>
    511e:	2f ef       	ldi	r18, 0xFF	; 255
    5120:	3f ef       	ldi	r19, 0xFF	; 255
    5122:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    5126:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    512a:	89 2b       	or	r24, r25
    512c:	89 f4       	brne	.+34     	; 0x5150 <CDC_Device_ReceiveByte+0x70>
    512e:	e8 ee       	ldi	r30, 0xE8	; 232
    5130:	f0 e0       	ldi	r31, 0x00	; 0
    5132:	80 81       	ld	r24, Z
    5134:	8b 77       	andi	r24, 0x7B	; 123
    5136:	80 83       	st	Z, r24
    5138:	82 2f       	mov	r24, r18
    513a:	93 2f       	mov	r25, r19
    513c:	08 95       	ret
    513e:	8f ef       	ldi	r24, 0xFF	; 255
    5140:	9f ef       	ldi	r25, 0xFF	; 255
    5142:	08 95       	ret
    5144:	8f ef       	ldi	r24, 0xFF	; 255
    5146:	9f ef       	ldi	r25, 0xFF	; 255
    5148:	08 95       	ret
    514a:	8f ef       	ldi	r24, 0xFF	; 255
    514c:	9f ef       	ldi	r25, 0xFF	; 255
    514e:	08 95       	ret
    5150:	82 2f       	mov	r24, r18
    5152:	93 2f       	mov	r25, r19
    5154:	08 95       	ret

00005156 <CDC_Device_getchar>:
    5156:	fc 01       	movw	r30, r24
    5158:	84 85       	ldd	r24, Z+12	; 0x0c
    515a:	95 85       	ldd	r25, Z+13	; 0x0d
    515c:	c1 df       	rcall	.-126    	; 0x50e0 <CDC_Device_ReceiveByte>
    515e:	99 23       	and	r25, r25
    5160:	14 f4       	brge	.+4      	; 0x5166 <CDC_Device_getchar+0x10>
    5162:	8e ef       	ldi	r24, 0xFE	; 254
    5164:	9f ef       	ldi	r25, 0xFF	; 255
    5166:	08 95       	ret

00005168 <CDC_Device_CreateStream>:
    5168:	fb 01       	movw	r30, r22
    516a:	2e e0       	ldi	r18, 0x0E	; 14
    516c:	db 01       	movw	r26, r22
    516e:	1d 92       	st	X+, r1
    5170:	2a 95       	dec	r18
    5172:	e9 f7       	brne	.-6      	; 0x516e <CDC_Device_CreateStream+0x6>
    5174:	23 e0       	ldi	r18, 0x03	; 3
    5176:	23 83       	std	Z+3, r18	; 0x03
    5178:	24 e1       	ldi	r18, 0x14	; 20
    517a:	38 e2       	ldi	r19, 0x28	; 40
    517c:	31 87       	std	Z+9, r19	; 0x09
    517e:	20 87       	std	Z+8, r18	; 0x08
    5180:	2b ea       	ldi	r18, 0xAB	; 171
    5182:	38 e2       	ldi	r19, 0x28	; 40
    5184:	33 87       	std	Z+11, r19	; 0x0b
    5186:	22 87       	std	Z+10, r18	; 0x0a
    5188:	95 87       	std	Z+13, r25	; 0x0d
    518a:	84 87       	std	Z+12, r24	; 0x0c
    518c:	08 95       	ret

0000518e <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    518e:	08 95       	ret

00005190 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    5190:	cf 93       	push	r28
    5192:	df 93       	push	r29
    5194:	fc 01       	movw	r30, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5196:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    519a:	93 ff       	sbrs	r25, 3
    519c:	99 c0       	rjmp	.+306    	; 0x52d0 <CDC_Device_ProcessControlRequest+0x140>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    519e:	80 91 44 0d 	lds	r24, 0x0D44	; 0x800d44 <USB_ControlRequest+0x4>
    51a2:	90 91 45 0d 	lds	r25, 0x0D45	; 0x800d45 <USB_ControlRequest+0x5>
    51a6:	20 81       	ld	r18, Z
    51a8:	30 e0       	ldi	r19, 0x00	; 0
    51aa:	82 17       	cp	r24, r18
    51ac:	93 07       	cpc	r25, r19
    51ae:	09 f0       	breq	.+2      	; 0x51b2 <CDC_Device_ProcessControlRequest+0x22>
    51b0:	8f c0       	rjmp	.+286    	; 0x52d0 <CDC_Device_ProcessControlRequest+0x140>
    51b2:	ef 01       	movw	r28, r30
	  return;

	switch (USB_ControlRequest.bRequest)
    51b4:	80 91 41 0d 	lds	r24, 0x0D41	; 0x800d41 <USB_ControlRequest+0x1>
    51b8:	81 32       	cpi	r24, 0x21	; 33
    51ba:	59 f0       	breq	.+22     	; 0x51d2 <CDC_Device_ProcessControlRequest+0x42>
    51bc:	18 f4       	brcc	.+6      	; 0x51c4 <CDC_Device_ProcessControlRequest+0x34>
    51be:	80 32       	cpi	r24, 0x20	; 32
    51c0:	c1 f1       	breq	.+112    	; 0x5232 <CDC_Device_ProcessControlRequest+0xa2>
    51c2:	86 c0       	rjmp	.+268    	; 0x52d0 <CDC_Device_ProcessControlRequest+0x140>
    51c4:	82 32       	cpi	r24, 0x22	; 34
    51c6:	09 f4       	brne	.+2      	; 0x51ca <CDC_Device_ProcessControlRequest+0x3a>
    51c8:	61 c0       	rjmp	.+194    	; 0x528c <CDC_Device_ProcessControlRequest+0xfc>
    51ca:	83 32       	cpi	r24, 0x23	; 35
    51cc:	09 f4       	brne	.+2      	; 0x51d0 <CDC_Device_ProcessControlRequest+0x40>
    51ce:	72 c0       	rjmp	.+228    	; 0x52b4 <CDC_Device_ProcessControlRequest+0x124>
    51d0:	7f c0       	rjmp	.+254    	; 0x52d0 <CDC_Device_ProcessControlRequest+0x140>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    51d2:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <USB_ControlRequest>
    51d6:	81 3a       	cpi	r24, 0xA1	; 161
    51d8:	09 f0       	breq	.+2      	; 0x51dc <CDC_Device_ProcessControlRequest+0x4c>
    51da:	7a c0       	rjmp	.+244    	; 0x52d0 <CDC_Device_ProcessControlRequest+0x140>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    51dc:	e8 ee       	ldi	r30, 0xE8	; 232
    51de:	f0 e0       	ldi	r31, 0x00	; 0
    51e0:	80 81       	ld	r24, Z
    51e2:	87 7f       	andi	r24, 0xF7	; 247
    51e4:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    51e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    51ea:	80 ff       	sbrs	r24, 0
    51ec:	fc cf       	rjmp	.-8      	; 0x51e6 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    51ee:	8c 89       	ldd	r24, Y+20	; 0x14
    51f0:	9d 89       	ldd	r25, Y+21	; 0x15
    51f2:	ae 89       	ldd	r26, Y+22	; 0x16
    51f4:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    51f6:	e1 ef       	ldi	r30, 0xF1	; 241
    51f8:	f0 e0       	ldi	r31, 0x00	; 0
    51fa:	80 83       	st	Z, r24
				UEDATX = (Data >> 8);
    51fc:	49 2f       	mov	r20, r25
    51fe:	5a 2f       	mov	r21, r26
    5200:	6b 2f       	mov	r22, r27
    5202:	77 27       	eor	r23, r23
    5204:	40 83       	st	Z, r20
				UEDATX = (Data >> 16);
    5206:	ad 01       	movw	r20, r26
    5208:	66 27       	eor	r22, r22
    520a:	77 27       	eor	r23, r23
    520c:	40 83       	st	Z, r20
				UEDATX = (Data >> 24);
    520e:	8b 2f       	mov	r24, r27
    5210:	99 27       	eor	r25, r25
    5212:	aa 27       	eor	r26, r26
    5214:	bb 27       	eor	r27, r27
    5216:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    5218:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    521a:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    521c:	89 8d       	ldd	r24, Y+25	; 0x19
    521e:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    5220:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5222:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5224:	e8 ee       	ldi	r30, 0xE8	; 232
    5226:	f0 e0       	ldi	r31, 0x00	; 0
    5228:	80 81       	ld	r24, Z
    522a:	8e 77       	andi	r24, 0x7E	; 126
    522c:	80 83       	st	Z, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    522e:	4d d6       	rcall	.+3226   	; 0x5eca <Endpoint_ClearStatusStage>
    5230:	4f c0       	rjmp	.+158    	; 0x52d0 <CDC_Device_ProcessControlRequest+0x140>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    5232:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <USB_ControlRequest>
    5236:	81 32       	cpi	r24, 0x21	; 33
    5238:	09 f0       	breq	.+2      	; 0x523c <CDC_Device_ProcessControlRequest+0xac>
    523a:	4a c0       	rjmp	.+148    	; 0x52d0 <CDC_Device_ProcessControlRequest+0x140>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    523c:	e8 ee       	ldi	r30, 0xE8	; 232
    523e:	f0 e0       	ldi	r31, 0x00	; 0
    5240:	80 81       	ld	r24, Z
    5242:	87 7f       	andi	r24, 0xF7	; 247
    5244:	80 83       	st	Z, r24
    5246:	05 c0       	rjmp	.+10     	; 0x5252 <CDC_Device_ProcessControlRequest+0xc2>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    5248:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <USB_DeviceState>
    524c:	88 23       	and	r24, r24
    524e:	09 f4       	brne	.+2      	; 0x5252 <CDC_Device_ProcessControlRequest+0xc2>
    5250:	3f c0       	rjmp	.+126    	; 0x52d0 <CDC_Device_ProcessControlRequest+0x140>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5252:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    5256:	82 ff       	sbrs	r24, 2
    5258:	f7 cf       	rjmp	.-18     	; 0x5248 <CDC_Device_ProcessControlRequest+0xb8>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    525a:	e1 ef       	ldi	r30, 0xF1	; 241
    525c:	f0 e0       	ldi	r31, 0x00	; 0
    525e:	30 81       	ld	r19, Z
				Data.Bytes[1] = UEDATX;
    5260:	20 81       	ld	r18, Z
				Data.Bytes[2] = UEDATX;
    5262:	90 81       	ld	r25, Z
				Data.Bytes[3] = UEDATX;
    5264:	80 81       	ld	r24, Z
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    5266:	3c 8b       	std	Y+20, r19	; 0x14
    5268:	2d 8b       	std	Y+21, r18	; 0x15
    526a:	9e 8b       	std	Y+22, r25	; 0x16
    526c:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    526e:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    5270:	88 8f       	std	Y+24, r24	; 0x18
    5272:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    5274:	89 8f       	std	Y+25, r24	; 0x19
    5276:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    5278:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    527a:	e8 ee       	ldi	r30, 0xE8	; 232
    527c:	f0 e0       	ldi	r31, 0x00	; 0
    527e:	80 81       	ld	r24, Z
    5280:	8b 77       	andi	r24, 0x7B	; 123

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    5282:	80 83       	st	Z, r24

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    5284:	22 d6       	rcall	.+3140   	; 0x5eca <Endpoint_ClearStatusStage>
    5286:	ce 01       	movw	r24, r28
    5288:	82 df       	rcall	.-252    	; 0x518e <CDC_Device_Event_Stub>
    528a:	22 c0       	rjmp	.+68     	; 0x52d0 <CDC_Device_ProcessControlRequest+0x140>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    528c:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <USB_ControlRequest>
    5290:	81 32       	cpi	r24, 0x21	; 33
    5292:	f1 f4       	brne	.+60     	; 0x52d0 <CDC_Device_ProcessControlRequest+0x140>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5294:	e8 ee       	ldi	r30, 0xE8	; 232
    5296:	f0 e0       	ldi	r31, 0x00	; 0
    5298:	80 81       	ld	r24, Z
    529a:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    529c:	80 83       	st	Z, r24
    529e:	15 d6       	rcall	.+3114   	; 0x5eca <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    52a0:	80 91 42 0d 	lds	r24, 0x0D42	; 0x800d42 <USB_ControlRequest+0x2>
    52a4:	90 91 43 0d 	lds	r25, 0x0D43	; 0x800d43 <USB_ControlRequest+0x3>
    52a8:	99 8b       	std	Y+17, r25	; 0x11
    52aa:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    52ac:	ce 01       	movw	r24, r28
    52ae:	0e 94 23 1b 	call	0x3646	; 0x3646 <EVENT_CDC_Device_ControLineStateChanged>
    52b2:	0e c0       	rjmp	.+28     	; 0x52d0 <CDC_Device_ProcessControlRequest+0x140>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    52b4:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <USB_ControlRequest>
    52b8:	81 32       	cpi	r24, 0x21	; 33
    52ba:	51 f4       	brne	.+20     	; 0x52d0 <CDC_Device_ProcessControlRequest+0x140>
    52bc:	e8 ee       	ldi	r30, 0xE8	; 232
    52be:	f0 e0       	ldi	r31, 0x00	; 0
    52c0:	80 81       	ld	r24, Z
    52c2:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    52c4:	80 83       	st	Z, r24

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    52c6:	01 d6       	rcall	.+3074   	; 0x5eca <Endpoint_ClearStatusStage>
    52c8:	60 91 42 0d 	lds	r22, 0x0D42	; 0x800d42 <USB_ControlRequest+0x2>
    52cc:	ce 01       	movw	r24, r28
    52ce:	5f df       	rcall	.-322    	; 0x518e <CDC_Device_Event_Stub>
			}

			break;
	}
}
    52d0:	df 91       	pop	r29
    52d2:	cf 91       	pop	r28
    52d4:	08 95       	ret

000052d6 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    52d6:	3f 92       	push	r3
    52d8:	4f 92       	push	r4
    52da:	5f 92       	push	r5
    52dc:	6f 92       	push	r6
    52de:	7f 92       	push	r7
    52e0:	8f 92       	push	r8
    52e2:	9f 92       	push	r9
    52e4:	af 92       	push	r10
    52e6:	bf 92       	push	r11
    52e8:	cf 92       	push	r12
    52ea:	df 92       	push	r13
    52ec:	ef 92       	push	r14
    52ee:	ff 92       	push	r15
    52f0:	0f 93       	push	r16
    52f2:	1f 93       	push	r17
    52f4:	cf 93       	push	r28
    52f6:	df 93       	push	r29
    52f8:	00 d0       	rcall	.+0      	; 0x52fa <HID_Device_ProcessControlRequest+0x24>
    52fa:	1f 92       	push	r1
    52fc:	cd b7       	in	r28, 0x3d	; 61
    52fe:	de b7       	in	r29, 0x3e	; 62
    5300:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    5302:	ed b6       	in	r14, 0x3d	; 61
    5304:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5306:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    530a:	83 ff       	sbrs	r24, 3
    530c:	21 c1       	rjmp	.+578    	; 0x5550 <HID_Device_ProcessControlRequest+0x27a>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    530e:	20 91 44 0d 	lds	r18, 0x0D44	; 0x800d44 <USB_ControlRequest+0x4>
    5312:	30 91 45 0d 	lds	r19, 0x0D45	; 0x800d45 <USB_ControlRequest+0x5>
    5316:	f6 01       	movw	r30, r12
    5318:	80 81       	ld	r24, Z
    531a:	90 e0       	ldi	r25, 0x00	; 0
    531c:	28 17       	cp	r18, r24
    531e:	39 07       	cpc	r19, r25
    5320:	09 f0       	breq	.+2      	; 0x5324 <HID_Device_ProcessControlRequest+0x4e>
    5322:	16 c1       	rjmp	.+556    	; 0x5550 <HID_Device_ProcessControlRequest+0x27a>
	  return;

	switch (USB_ControlRequest.bRequest)
    5324:	80 91 41 0d 	lds	r24, 0x0D41	; 0x800d41 <USB_ControlRequest+0x1>
    5328:	83 30       	cpi	r24, 0x03	; 3
    532a:	09 f4       	brne	.+2      	; 0x532e <HID_Device_ProcessControlRequest+0x58>
    532c:	ac c0       	rjmp	.+344    	; 0x5486 <HID_Device_ProcessControlRequest+0x1b0>
    532e:	30 f4       	brcc	.+12     	; 0x533c <HID_Device_ProcessControlRequest+0x66>
    5330:	81 30       	cpi	r24, 0x01	; 1
    5332:	71 f0       	breq	.+28     	; 0x5350 <HID_Device_ProcessControlRequest+0x7a>
    5334:	82 30       	cpi	r24, 0x02	; 2
    5336:	09 f4       	brne	.+2      	; 0x533a <HID_Device_ProcessControlRequest+0x64>
    5338:	ef c0       	rjmp	.+478    	; 0x5518 <HID_Device_ProcessControlRequest+0x242>
    533a:	0a c1       	rjmp	.+532    	; 0x5550 <HID_Device_ProcessControlRequest+0x27a>
    533c:	8a 30       	cpi	r24, 0x0A	; 10
    533e:	09 f4       	brne	.+2      	; 0x5342 <HID_Device_ProcessControlRequest+0x6c>
    5340:	cf c0       	rjmp	.+414    	; 0x54e0 <HID_Device_ProcessControlRequest+0x20a>
    5342:	8b 30       	cpi	r24, 0x0B	; 11
    5344:	09 f4       	brne	.+2      	; 0x5348 <HID_Device_ProcessControlRequest+0x72>
    5346:	b8 c0       	rjmp	.+368    	; 0x54b8 <HID_Device_ProcessControlRequest+0x1e2>
    5348:	89 30       	cpi	r24, 0x09	; 9
    534a:	09 f0       	breq	.+2      	; 0x534e <HID_Device_ProcessControlRequest+0x78>
    534c:	01 c1       	rjmp	.+514    	; 0x5550 <HID_Device_ProcessControlRequest+0x27a>
    534e:	53 c0       	rjmp	.+166    	; 0x53f6 <HID_Device_ProcessControlRequest+0x120>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    5350:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <USB_ControlRequest>
    5354:	81 3a       	cpi	r24, 0xA1	; 161
    5356:	09 f0       	breq	.+2      	; 0x535a <HID_Device_ProcessControlRequest+0x84>
    5358:	fb c0       	rjmp	.+502    	; 0x5550 <HID_Device_ProcessControlRequest+0x27a>
			{
    535a:	ad b6       	in	r10, 0x3d	; 61
    535c:	be b6       	in	r11, 0x3e	; 62
				uint16_t ReportSize = 0;
    535e:	1a 82       	std	Y+2, r1	; 0x02
    5360:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    5362:	e0 e4       	ldi	r30, 0x40	; 64
    5364:	fd e0       	ldi	r31, 0x0D	; 13
    5366:	82 81       	ldd	r24, Z+2	; 0x02
    5368:	73 80       	ldd	r7, Z+3	; 0x03
    536a:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    536c:	7a 94       	dec	r7
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    536e:	f6 01       	movw	r30, r12
    5370:	40 85       	ldd	r20, Z+8	; 0x08
    5372:	50 e0       	ldi	r21, 0x00	; 0
    5374:	8d b7       	in	r24, 0x3d	; 61
    5376:	9e b7       	in	r25, 0x3e	; 62
    5378:	84 1b       	sub	r24, r20
    537a:	95 0b       	sbc	r25, r21
    537c:	0f b6       	in	r0, 0x3f	; 63
    537e:	f8 94       	cli
    5380:	9e bf       	out	0x3e, r25	; 62
    5382:	0f be       	out	0x3f, r0	; 63
    5384:	8d bf       	out	0x3d, r24	; 61
    5386:	ed b7       	in	r30, 0x3d	; 61
    5388:	fe b7       	in	r31, 0x3e	; 62
    538a:	31 96       	adiw	r30, 0x01	; 1
    538c:	4f 01       	movw	r8, r30

				memset(ReportData, 0, sizeof(ReportData));
    538e:	60 e0       	ldi	r22, 0x00	; 0
    5390:	70 e0       	ldi	r23, 0x00	; 0
    5392:	cf 01       	movw	r24, r30
    5394:	0e 94 65 33 	call	0x66ca	; 0x66ca <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    5398:	8e 01       	movw	r16, r28
    539a:	0f 5f       	subi	r16, 0xFF	; 255
    539c:	1f 4f       	sbci	r17, 0xFF	; 255
    539e:	94 01       	movw	r18, r8
    53a0:	47 2d       	mov	r20, r7
    53a2:	be 01       	movw	r22, r28
    53a4:	6d 5f       	subi	r22, 0xFD	; 253
    53a6:	7f 4f       	sbci	r23, 0xFF	; 255
    53a8:	c6 01       	movw	r24, r12
    53aa:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    53ae:	f6 01       	movw	r30, r12
    53b0:	86 81       	ldd	r24, Z+6	; 0x06
    53b2:	97 81       	ldd	r25, Z+7	; 0x07
    53b4:	00 97       	sbiw	r24, 0x00	; 0
    53b6:	29 f0       	breq	.+10     	; 0x53c2 <HID_Device_ProcessControlRequest+0xec>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
					       HIDInterfaceInfo->Config.PrevReportINBufferSize);
    53b8:	40 85       	ldd	r20, Z+8	; 0x08

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    53ba:	50 e0       	ldi	r21, 0x00	; 0
    53bc:	b4 01       	movw	r22, r8
    53be:	0e 94 5c 33 	call	0x66b8	; 0x66b8 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    53c2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    53c6:	e8 ee       	ldi	r30, 0xE8	; 232
    53c8:	f0 e0       	ldi	r31, 0x00	; 0
    53ca:	80 81       	ld	r24, Z
    53cc:	87 7f       	andi	r24, 0xF7	; 247
    53ce:	80 83       	st	Z, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    53d0:	8b 81       	ldd	r24, Y+3	; 0x03
    53d2:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    53d4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    53d8:	69 81       	ldd	r22, Y+1	; 0x01
    53da:	7a 81       	ldd	r23, Y+2	; 0x02
    53dc:	c4 01       	movw	r24, r8
    53de:	4c d4       	rcall	.+2200   	; 0x5c78 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    53e0:	e8 ee       	ldi	r30, 0xE8	; 232
    53e2:	f0 e0       	ldi	r31, 0x00	; 0
    53e4:	80 81       	ld	r24, Z
    53e6:	8b 77       	andi	r24, 0x7B	; 123
    53e8:	80 83       	st	Z, r24
    53ea:	0f b6       	in	r0, 0x3f	; 63
    53ec:	f8 94       	cli
    53ee:	be be       	out	0x3e, r11	; 62
    53f0:	0f be       	out	0x3f, r0	; 63
    53f2:	ad be       	out	0x3d, r10	; 61
    53f4:	ad c0       	rjmp	.+346    	; 0x5550 <HID_Device_ProcessControlRequest+0x27a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    53f6:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <USB_ControlRequest>
    53fa:	81 32       	cpi	r24, 0x21	; 33
    53fc:	09 f0       	breq	.+2      	; 0x5400 <HID_Device_ProcessControlRequest+0x12a>
    53fe:	a8 c0       	rjmp	.+336    	; 0x5550 <HID_Device_ProcessControlRequest+0x27a>
			{
    5400:	6d b6       	in	r6, 0x3d	; 61
    5402:	7e b6       	in	r7, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
    5404:	e0 e4       	ldi	r30, 0x40	; 64
    5406:	fd e0       	ldi	r31, 0x0D	; 13
    5408:	06 81       	ldd	r16, Z+6	; 0x06
    540a:	17 81       	ldd	r17, Z+7	; 0x07
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    540c:	42 80       	ldd	r4, Z+2	; 0x02
    540e:	53 80       	ldd	r5, Z+3	; 0x03
    5410:	34 2c       	mov	r3, r4
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    5412:	5a 94       	dec	r5
				uint8_t  ReportData[ReportSize];
    5414:	8d b7       	in	r24, 0x3d	; 61
    5416:	9e b7       	in	r25, 0x3e	; 62
    5418:	80 1b       	sub	r24, r16
    541a:	91 0b       	sbc	r25, r17
    541c:	0f b6       	in	r0, 0x3f	; 63
    541e:	f8 94       	cli
    5420:	9e bf       	out	0x3e, r25	; 62
    5422:	0f be       	out	0x3f, r0	; 63
    5424:	8d bf       	out	0x3d, r24	; 61
    5426:	ed b7       	in	r30, 0x3d	; 61
    5428:	fe b7       	in	r31, 0x3e	; 62
    542a:	31 96       	adiw	r30, 0x01	; 1
    542c:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    542e:	0f 2e       	mov	r0, r31
    5430:	f8 ee       	ldi	r31, 0xE8	; 232
    5432:	af 2e       	mov	r10, r31
    5434:	b1 2c       	mov	r11, r1
    5436:	f0 2d       	mov	r31, r0
    5438:	f5 01       	movw	r30, r10
    543a:	80 81       	ld	r24, Z
    543c:	87 7f       	andi	r24, 0xF7	; 247
    543e:	80 83       	st	Z, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    5440:	b8 01       	movw	r22, r16
    5442:	c4 01       	movw	r24, r8
    5444:	81 d4       	rcall	.+2306   	; 0x5d48 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5446:	f5 01       	movw	r30, r10
    5448:	80 81       	ld	r24, Z
    544a:	8e 77       	andi	r24, 0x7E	; 126
    544c:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    544e:	44 20       	and	r4, r4
    5450:	19 f0       	breq	.+6      	; 0x5458 <HID_Device_ProcessControlRequest+0x182>
    5452:	81 e0       	ldi	r24, 0x01	; 1
    5454:	90 e0       	ldi	r25, 0x00	; 0
    5456:	02 c0       	rjmp	.+4      	; 0x545c <HID_Device_ProcessControlRequest+0x186>
    5458:	80 e0       	ldi	r24, 0x00	; 0
    545a:	90 e0       	ldi	r25, 0x00	; 0
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    545c:	21 e0       	ldi	r18, 0x01	; 1
    545e:	30 e0       	ldi	r19, 0x00	; 0
    5460:	31 10       	cpse	r3, r1
    5462:	02 c0       	rjmp	.+4      	; 0x5468 <HID_Device_ProcessControlRequest+0x192>
    5464:	20 e0       	ldi	r18, 0x00	; 0
    5466:	30 e0       	ldi	r19, 0x00	; 0
    5468:	28 0d       	add	r18, r8
    546a:	39 1d       	adc	r19, r9

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    546c:	08 1b       	sub	r16, r24
    546e:	19 0b       	sbc	r17, r25
    5470:	45 2d       	mov	r20, r5
    5472:	64 2d       	mov	r22, r4
    5474:	c6 01       	movw	r24, r12
    5476:	0e 94 12 1b 	call	0x3624	; 0x3624 <CALLBACK_HID_Device_ProcessHIDReport>
    547a:	0f b6       	in	r0, 0x3f	; 63
    547c:	f8 94       	cli
    547e:	7e be       	out	0x3e, r7	; 62
    5480:	0f be       	out	0x3f, r0	; 63
    5482:	6d be       	out	0x3d, r6	; 61
    5484:	65 c0       	rjmp	.+202    	; 0x5550 <HID_Device_ProcessControlRequest+0x27a>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    5486:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <USB_ControlRequest>
    548a:	81 3a       	cpi	r24, 0xA1	; 161
    548c:	09 f0       	breq	.+2      	; 0x5490 <HID_Device_ProcessControlRequest+0x1ba>
    548e:	60 c0       	rjmp	.+192    	; 0x5550 <HID_Device_ProcessControlRequest+0x27a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5490:	e8 ee       	ldi	r30, 0xE8	; 232
    5492:	f0 e0       	ldi	r31, 0x00	; 0
    5494:	80 81       	ld	r24, Z
    5496:	87 7f       	andi	r24, 0xF7	; 247
    5498:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    549a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    549e:	80 ff       	sbrs	r24, 0
    54a0:	fc cf       	rjmp	.-8      	; 0x549a <HID_Device_ProcessControlRequest+0x1c4>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    54a2:	f6 01       	movw	r30, r12
    54a4:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    54a6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    54aa:	e8 ee       	ldi	r30, 0xE8	; 232
    54ac:	f0 e0       	ldi	r31, 0x00	; 0
    54ae:	80 81       	ld	r24, Z
    54b0:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    54b2:	80 83       	st	Z, r24
    54b4:	0a d5       	rcall	.+2580   	; 0x5eca <Endpoint_ClearStatusStage>
    54b6:	4c c0       	rjmp	.+152    	; 0x5550 <HID_Device_ProcessControlRequest+0x27a>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    54b8:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <USB_ControlRequest>
    54bc:	81 32       	cpi	r24, 0x21	; 33
    54be:	09 f0       	breq	.+2      	; 0x54c2 <HID_Device_ProcessControlRequest+0x1ec>
    54c0:	47 c0       	rjmp	.+142    	; 0x5550 <HID_Device_ProcessControlRequest+0x27a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    54c2:	e8 ee       	ldi	r30, 0xE8	; 232
    54c4:	f0 e0       	ldi	r31, 0x00	; 0
    54c6:	80 81       	ld	r24, Z
    54c8:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    54ca:	80 83       	st	Z, r24
    54cc:	fe d4       	rcall	.+2556   	; 0x5eca <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    54ce:	90 91 42 0d 	lds	r25, 0x0D42	; 0x800d42 <USB_ControlRequest+0x2>
    54d2:	81 e0       	ldi	r24, 0x01	; 1
    54d4:	91 11       	cpse	r25, r1
    54d6:	01 c0       	rjmp	.+2      	; 0x54da <HID_Device_ProcessControlRequest+0x204>
    54d8:	80 e0       	ldi	r24, 0x00	; 0
    54da:	f6 01       	movw	r30, r12
    54dc:	81 87       	std	Z+9, r24	; 0x09
    54de:	38 c0       	rjmp	.+112    	; 0x5550 <HID_Device_ProcessControlRequest+0x27a>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    54e0:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <USB_ControlRequest>
    54e4:	81 32       	cpi	r24, 0x21	; 33
    54e6:	a1 f5       	brne	.+104    	; 0x5550 <HID_Device_ProcessControlRequest+0x27a>
    54e8:	e8 ee       	ldi	r30, 0xE8	; 232
    54ea:	f0 e0       	ldi	r31, 0x00	; 0
    54ec:	80 81       	ld	r24, Z
    54ee:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    54f0:	80 83       	st	Z, r24
    54f2:	eb d4       	rcall	.+2518   	; 0x5eca <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    54f4:	80 91 42 0d 	lds	r24, 0x0D42	; 0x800d42 <USB_ControlRequest+0x2>
    54f8:	90 91 43 0d 	lds	r25, 0x0D43	; 0x800d43 <USB_ControlRequest+0x3>
    54fc:	88 27       	eor	r24, r24
    54fe:	00 24       	eor	r0, r0
    5500:	88 0f       	add	r24, r24
    5502:	99 1f       	adc	r25, r25
    5504:	00 1c       	adc	r0, r0
    5506:	88 0f       	add	r24, r24
    5508:	99 1f       	adc	r25, r25
    550a:	00 1c       	adc	r0, r0
    550c:	89 2f       	mov	r24, r25
    550e:	90 2d       	mov	r25, r0
    5510:	f6 01       	movw	r30, r12
    5512:	95 87       	std	Z+13, r25	; 0x0d
    5514:	84 87       	std	Z+12, r24	; 0x0c
    5516:	1c c0       	rjmp	.+56     	; 0x5550 <HID_Device_ProcessControlRequest+0x27a>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    5518:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <USB_ControlRequest>
    551c:	81 3a       	cpi	r24, 0xA1	; 161
    551e:	c1 f4       	brne	.+48     	; 0x5550 <HID_Device_ProcessControlRequest+0x27a>
    5520:	e8 ee       	ldi	r30, 0xE8	; 232
    5522:	f0 e0       	ldi	r31, 0x00	; 0
    5524:	80 81       	ld	r24, Z
    5526:	87 7f       	andi	r24, 0xF7	; 247
    5528:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    552a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    552e:	80 ff       	sbrs	r24, 0
    5530:	fc cf       	rjmp	.-8      	; 0x552a <HID_Device_ProcessControlRequest+0x254>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    5532:	f6 01       	movw	r30, r12
    5534:	84 85       	ldd	r24, Z+12	; 0x0c
    5536:	95 85       	ldd	r25, Z+13	; 0x0d
    5538:	96 95       	lsr	r25
    553a:	87 95       	ror	r24
    553c:	96 95       	lsr	r25
    553e:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    5540:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5544:	e8 ee       	ldi	r30, 0xE8	; 232
    5546:	f0 e0       	ldi	r31, 0x00	; 0
    5548:	80 81       	ld	r24, Z
    554a:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    554c:	80 83       	st	Z, r24
    554e:	bd d4       	rcall	.+2426   	; 0x5eca <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    5550:	0f b6       	in	r0, 0x3f	; 63
    5552:	f8 94       	cli
    5554:	fe be       	out	0x3e, r15	; 62
    5556:	0f be       	out	0x3f, r0	; 63
    5558:	ed be       	out	0x3d, r14	; 61
    555a:	0f 90       	pop	r0
    555c:	0f 90       	pop	r0
    555e:	0f 90       	pop	r0
    5560:	df 91       	pop	r29
    5562:	cf 91       	pop	r28
    5564:	1f 91       	pop	r17
    5566:	0f 91       	pop	r16
    5568:	ff 90       	pop	r15
    556a:	ef 90       	pop	r14
    556c:	df 90       	pop	r13
    556e:	cf 90       	pop	r12
    5570:	bf 90       	pop	r11
    5572:	af 90       	pop	r10
    5574:	9f 90       	pop	r9
    5576:	8f 90       	pop	r8
    5578:	7f 90       	pop	r7
    557a:	6f 90       	pop	r6
    557c:	5f 90       	pop	r5
    557e:	4f 90       	pop	r4
    5580:	3f 90       	pop	r3
    5582:	08 95       	ret

00005584 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    5584:	fc 01       	movw	r30, r24
    5586:	39 96       	adiw	r30, 0x09	; 9
    5588:	27 e0       	ldi	r18, 0x07	; 7
    558a:	df 01       	movw	r26, r30
    558c:	1d 92       	st	X+, r1
    558e:	2a 95       	dec	r18
    5590:	e9 f7       	brne	.-6      	; 0x558c <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    5592:	21 e0       	ldi	r18, 0x01	; 1
    5594:	fc 01       	movw	r30, r24
    5596:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    5598:	24 ef       	ldi	r18, 0xF4	; 244
    559a:	31 e0       	ldi	r19, 0x01	; 1
    559c:	35 87       	std	Z+13, r19	; 0x0d
    559e:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    55a0:	23 e0       	ldi	r18, 0x03	; 3
    55a2:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    55a4:	61 e0       	ldi	r22, 0x01	; 1
    55a6:	01 96       	adiw	r24, 0x01	; 1
    55a8:	4a c4       	rjmp	.+2196   	; 0x5e3e <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    55aa:	08 95       	ret

000055ac <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    55ac:	5f 92       	push	r5
    55ae:	6f 92       	push	r6
    55b0:	7f 92       	push	r7
    55b2:	8f 92       	push	r8
    55b4:	9f 92       	push	r9
    55b6:	af 92       	push	r10
    55b8:	bf 92       	push	r11
    55ba:	cf 92       	push	r12
    55bc:	df 92       	push	r13
    55be:	ef 92       	push	r14
    55c0:	ff 92       	push	r15
    55c2:	0f 93       	push	r16
    55c4:	1f 93       	push	r17
    55c6:	cf 93       	push	r28
    55c8:	df 93       	push	r29
    55ca:	00 d0       	rcall	.+0      	; 0x55cc <HID_Device_USBTask+0x20>
    55cc:	1f 92       	push	r1
    55ce:	cd b7       	in	r28, 0x3d	; 61
    55d0:	de b7       	in	r29, 0x3e	; 62
    55d2:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    55d4:	ad b6       	in	r10, 0x3d	; 61
    55d6:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    55d8:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <USB_DeviceState>
    55dc:	84 30       	cpi	r24, 0x04	; 4
    55de:	09 f0       	breq	.+2      	; 0x55e2 <HID_Device_USBTask+0x36>
    55e0:	90 c0       	rjmp	.+288    	; 0x5702 <HID_Device_USBTask+0x156>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    55e2:	f7 01       	movw	r30, r14
    55e4:	22 85       	ldd	r18, Z+10	; 0x0a
    55e6:	33 85       	ldd	r19, Z+11	; 0x0b
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    55e8:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    55ec:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    55f0:	28 17       	cp	r18, r24
    55f2:	39 07       	cpc	r19, r25
    55f4:	09 f4       	brne	.+2      	; 0x55f8 <HID_Device_USBTask+0x4c>
    55f6:	85 c0       	rjmp	.+266    	; 0x5702 <HID_Device_USBTask+0x156>
		#else
		return;
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
    55f8:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    55fa:	8f 70       	andi	r24, 0x0F	; 15
    55fc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    5600:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
    5604:	85 ff       	sbrs	r24, 5
    5606:	7d c0       	rjmp	.+250    	; 0x5702 <HID_Device_USBTask+0x156>
	{
    5608:	8d b6       	in	r8, 0x3d	; 61
    560a:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    560c:	40 85       	ldd	r20, Z+8	; 0x08
    560e:	50 e0       	ldi	r21, 0x00	; 0
    5610:	8d b7       	in	r24, 0x3d	; 61
    5612:	9e b7       	in	r25, 0x3e	; 62
    5614:	84 1b       	sub	r24, r20
    5616:	95 0b       	sbc	r25, r21
    5618:	0f b6       	in	r0, 0x3f	; 63
    561a:	f8 94       	cli
    561c:	9e bf       	out	0x3e, r25	; 62
    561e:	0f be       	out	0x3f, r0	; 63
    5620:	8d bf       	out	0x3d, r24	; 61
    5622:	ed b7       	in	r30, 0x3d	; 61
    5624:	fe b7       	in	r31, 0x3e	; 62
    5626:	31 96       	adiw	r30, 0x01	; 1
    5628:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    562a:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    562c:	1a 82       	std	Y+2, r1	; 0x02
    562e:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    5630:	60 e0       	ldi	r22, 0x00	; 0
    5632:	70 e0       	ldi	r23, 0x00	; 0
    5634:	cf 01       	movw	r24, r30
    5636:	0e 94 65 33 	call	0x66ca	; 0x66ca <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    563a:	8e 01       	movw	r16, r28
    563c:	0f 5f       	subi	r16, 0xFF	; 255
    563e:	1f 4f       	sbci	r17, 0xFF	; 255
    5640:	96 01       	movw	r18, r12
    5642:	40 e0       	ldi	r20, 0x00	; 0
    5644:	be 01       	movw	r22, r28
    5646:	6d 5f       	subi	r22, 0xFD	; 253
    5648:	7f 4f       	sbci	r23, 0xFF	; 255
    564a:	c7 01       	movw	r24, r14
    564c:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <CALLBACK_HID_Device_CreateHIDReport>
    5650:	68 2e       	mov	r6, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    5652:	f7 01       	movw	r30, r14
    5654:	84 85       	ldd	r24, Z+12	; 0x0c
    5656:	95 85       	ldd	r25, Z+13	; 0x0d
    5658:	89 2b       	or	r24, r25
    565a:	31 f0       	breq	.+12     	; 0x5668 <HID_Device_USBTask+0xbc>
    565c:	86 85       	ldd	r24, Z+14	; 0x0e
    565e:	97 85       	ldd	r25, Z+15	; 0x0f
    5660:	89 2b       	or	r24, r25
    5662:	21 f0       	breq	.+8      	; 0x566c <HID_Device_USBTask+0xc0>
    5664:	80 e0       	ldi	r24, 0x00	; 0
    5666:	03 c0       	rjmp	.+6      	; 0x566e <HID_Device_USBTask+0xc2>
    5668:	80 e0       	ldi	r24, 0x00	; 0
    566a:	01 c0       	rjmp	.+2      	; 0x566e <HID_Device_USBTask+0xc2>
    566c:	81 e0       	ldi	r24, 0x01	; 1
    566e:	81 70       	andi	r24, 0x01	; 1
    5670:	78 2e       	mov	r7, r24

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    5672:	f7 01       	movw	r30, r14
    5674:	06 81       	ldd	r16, Z+6	; 0x06
    5676:	17 81       	ldd	r17, Z+7	; 0x07
    5678:	01 15       	cp	r16, r1
    567a:	11 05       	cpc	r17, r1
    567c:	99 f0       	breq	.+38     	; 0x56a4 <HID_Device_USBTask+0xf8>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    567e:	49 81       	ldd	r20, Y+1	; 0x01
    5680:	5a 81       	ldd	r21, Y+2	; 0x02
    5682:	b8 01       	movw	r22, r16
    5684:	c6 01       	movw	r24, r12
    5686:	0e 94 4f 33 	call	0x669e	; 0x669e <memcmp>
    568a:	55 24       	eor	r5, r5
    568c:	53 94       	inc	r5
    568e:	89 2b       	or	r24, r25
    5690:	09 f4       	brne	.+2      	; 0x5694 <HID_Device_USBTask+0xe8>
    5692:	51 2c       	mov	r5, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    5694:	f7 01       	movw	r30, r14
    5696:	40 85       	ldd	r20, Z+8	; 0x08
    5698:	50 e0       	ldi	r21, 0x00	; 0
    569a:	b6 01       	movw	r22, r12
    569c:	c8 01       	movw	r24, r16
    569e:	0e 94 5c 33 	call	0x66b8	; 0x66b8 <memcpy>
    56a2:	01 c0       	rjmp	.+2      	; 0x56a6 <HID_Device_USBTask+0xfa>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    56a4:	51 2c       	mov	r5, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    56a6:	89 81       	ldd	r24, Y+1	; 0x01
    56a8:	9a 81       	ldd	r25, Y+2	; 0x02
    56aa:	89 2b       	or	r24, r25
    56ac:	f1 f0       	breq	.+60     	; 0x56ea <HID_Device_USBTask+0x13e>
    56ae:	61 10       	cpse	r6, r1
    56b0:	04 c0       	rjmp	.+8      	; 0x56ba <HID_Device_USBTask+0x10e>
    56b2:	51 10       	cpse	r5, r1
    56b4:	02 c0       	rjmp	.+4      	; 0x56ba <HID_Device_USBTask+0x10e>
    56b6:	77 20       	and	r7, r7
    56b8:	c1 f0       	breq	.+48     	; 0x56ea <HID_Device_USBTask+0x13e>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    56ba:	f7 01       	movw	r30, r14
    56bc:	84 85       	ldd	r24, Z+12	; 0x0c
    56be:	95 85       	ldd	r25, Z+13	; 0x0d
    56c0:	97 87       	std	Z+15, r25	; 0x0f
    56c2:	86 87       	std	Z+14, r24	; 0x0e

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
    56c4:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    56c6:	8f 70       	andi	r24, 0x0F	; 15
    56c8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			if (ReportID)
    56cc:	8b 81       	ldd	r24, Y+3	; 0x03
    56ce:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    56d0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    56d4:	69 81       	ldd	r22, Y+1	; 0x01
    56d6:	7a 81       	ldd	r23, Y+2	; 0x02
    56d8:	40 e0       	ldi	r20, 0x00	; 0
    56da:	50 e0       	ldi	r21, 0x00	; 0
    56dc:	c6 01       	movw	r24, r12
    56de:	eb d1       	rcall	.+982    	; 0x5ab6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    56e0:	e8 ee       	ldi	r30, 0xE8	; 232
    56e2:	f0 e0       	ldi	r31, 0x00	; 0
    56e4:	80 81       	ld	r24, Z
    56e6:	8e 77       	andi	r24, 0x7E	; 126
    56e8:	80 83       	st	Z, r24
    56ea:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    56ee:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    56f2:	f7 01       	movw	r30, r14
    56f4:	93 87       	std	Z+11, r25	; 0x0b
    56f6:	82 87       	std	Z+10, r24	; 0x0a
    56f8:	0f b6       	in	r0, 0x3f	; 63
    56fa:	f8 94       	cli
    56fc:	9e be       	out	0x3e, r9	; 62
    56fe:	0f be       	out	0x3f, r0	; 63
    5700:	8d be       	out	0x3d, r8	; 61
	}
}
    5702:	0f b6       	in	r0, 0x3f	; 63
    5704:	f8 94       	cli
    5706:	be be       	out	0x3e, r11	; 62
    5708:	0f be       	out	0x3f, r0	; 63
    570a:	ad be       	out	0x3d, r10	; 61
    570c:	0f 90       	pop	r0
    570e:	0f 90       	pop	r0
    5710:	0f 90       	pop	r0
    5712:	df 91       	pop	r29
    5714:	cf 91       	pop	r28
    5716:	1f 91       	pop	r17
    5718:	0f 91       	pop	r16
    571a:	ff 90       	pop	r15
    571c:	ef 90       	pop	r14
    571e:	df 90       	pop	r13
    5720:	cf 90       	pop	r12
    5722:	bf 90       	pop	r11
    5724:	af 90       	pop	r10
    5726:	9f 90       	pop	r9
    5728:	8f 90       	pop	r8
    572a:	7f 90       	pop	r7
    572c:	6f 90       	pop	r6
    572e:	5f 90       	pop	r5
    5730:	08 95       	ret

00005732 <MS_Device_ReadInCommandBlock>:
		MSInterfaceInfo->State.IsMassStoreReset = false;
	}
}

static bool MS_Device_ReadInCommandBlock(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    5732:	0f 93       	push	r16
    5734:	1f 93       	push	r17
    5736:	cf 93       	push	r28
    5738:	df 93       	push	r29
    573a:	00 d0       	rcall	.+0      	; 0x573c <MS_Device_ReadInCommandBlock+0xa>
    573c:	cd b7       	in	r28, 0x3d	; 61
    573e:	de b7       	in	r29, 0x3e	; 62
    5740:	8c 01       	movw	r16, r24
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    5742:	dc 01       	movw	r26, r24
    5744:	16 96       	adiw	r26, 0x06	; 6
    5746:	8c 91       	ld	r24, X
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5748:	8f 70       	andi	r24, 0x0F	; 15
    574a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	BytesProcessed = 0;
    574e:	1a 82       	std	Y+2, r1	; 0x02
    5750:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    5752:	04 c0       	rjmp	.+8      	; 0x575c <MS_Device_ReadInCommandBlock+0x2a>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    5754:	f8 01       	movw	r30, r16
    5756:	80 ad       	ldd	r24, Z+56	; 0x38
    5758:	81 11       	cpse	r24, r1
    575a:	52 c0       	rjmp	.+164    	; 0x5800 <MS_Device_ReadInCommandBlock+0xce>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    575c:	ae 01       	movw	r20, r28
    575e:	4f 5f       	subi	r20, 0xFF	; 255
    5760:	5f 4f       	sbci	r21, 0xFF	; 255
    5762:	6f e0       	ldi	r22, 0x0F	; 15
    5764:	70 e0       	ldi	r23, 0x00	; 0
    5766:	c8 01       	movw	r24, r16
    5768:	0c 96       	adiw	r24, 0x0c	; 12
    576a:	3d d2       	rcall	.+1146   	; 0x5be6 <Endpoint_Read_Stream_LE>
    576c:	85 30       	cpi	r24, 0x05	; 5
    576e:	91 f3       	breq	.-28     	; 0x5754 <MS_Device_ReadInCommandBlock+0x22>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    5770:	f8 01       	movw	r30, r16
    5772:	84 85       	ldd	r24, Z+12	; 0x0c
    5774:	95 85       	ldd	r25, Z+13	; 0x0d
    5776:	a6 85       	ldd	r26, Z+14	; 0x0e
    5778:	b7 85       	ldd	r27, Z+15	; 0x0f
    577a:	85 35       	cpi	r24, 0x55	; 85
    577c:	93 45       	sbci	r25, 0x53	; 83
    577e:	a2 44       	sbci	r26, 0x42	; 66
    5780:	b3 44       	sbci	r27, 0x43	; 67
    5782:	a1 f4       	brne	.+40     	; 0x57ac <MS_Device_ReadInCommandBlock+0x7a>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    5784:	d8 01       	movw	r26, r16
    5786:	59 96       	adiw	r26, 0x19	; 25
    5788:	9c 91       	ld	r25, X
    578a:	59 97       	sbiw	r26, 0x19	; 25
    578c:	1b 96       	adiw	r26, 0x0b	; 11
    578e:	8c 91       	ld	r24, X
    5790:	1b 97       	sbiw	r26, 0x0b	; 11
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    5792:	98 17       	cp	r25, r24
    5794:	58 f4       	brcc	.+22     	; 0x57ac <MS_Device_ReadInCommandBlock+0x7a>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    5796:	58 96       	adiw	r26, 0x18	; 24
    5798:	8c 91       	ld	r24, X
    579a:	58 97       	sbiw	r26, 0x18	; 24
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    579c:	8f 71       	andi	r24, 0x1F	; 31
    579e:	31 f4       	brne	.+12     	; 0x57ac <MS_Device_ReadInCommandBlock+0x7a>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    57a0:	5a 96       	adiw	r26, 0x1a	; 26
    57a2:	8c 91       	ld	r24, X
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    57a4:	88 23       	and	r24, r24
    57a6:	11 f0       	breq	.+4      	; 0x57ac <MS_Device_ReadInCommandBlock+0x7a>
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    57a8:	81 31       	cpi	r24, 0x11	; 17
    57aa:	80 f0       	brcs	.+32     	; 0x57cc <MS_Device_ReadInCommandBlock+0x9a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    57ac:	eb ee       	ldi	r30, 0xEB	; 235
    57ae:	f0 e0       	ldi	r31, 0x00	; 0
    57b0:	80 81       	ld	r24, Z
    57b2:	80 62       	ori	r24, 0x20	; 32
    57b4:	80 83       	st	Z, r24
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    57b6:	d8 01       	movw	r26, r16
    57b8:	11 96       	adiw	r26, 0x01	; 1
    57ba:	8c 91       	ld	r24, X
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    57bc:	8f 70       	andi	r24, 0x0F	; 15
    57be:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    57c2:	80 81       	ld	r24, Z
    57c4:	80 62       	ori	r24, 0x20	; 32
    57c6:	80 83       	st	Z, r24
		Endpoint_StallTransaction();

		return false;
    57c8:	80 e0       	ldi	r24, 0x00	; 0
    57ca:	1d c0       	rjmp	.+58     	; 0x5806 <MS_Device_ReadInCommandBlock+0xd4>
	}

	BytesProcessed = 0;
    57cc:	1a 82       	std	Y+2, r1	; 0x02
    57ce:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    57d0:	04 c0       	rjmp	.+8      	; 0x57da <MS_Device_ReadInCommandBlock+0xa8>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    57d2:	f8 01       	movw	r30, r16
    57d4:	80 ad       	ldd	r24, Z+56	; 0x38
    57d6:	81 11       	cpse	r24, r1
    57d8:	15 c0       	rjmp	.+42     	; 0x5804 <MS_Device_ReadInCommandBlock+0xd2>
		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
    57da:	d8 01       	movw	r26, r16
    57dc:	5a 96       	adiw	r26, 0x1a	; 26
    57de:	6c 91       	ld	r22, X

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    57e0:	70 e0       	ldi	r23, 0x00	; 0
    57e2:	ae 01       	movw	r20, r28
    57e4:	4f 5f       	subi	r20, 0xFF	; 255
    57e6:	5f 4f       	sbci	r21, 0xFF	; 255
    57e8:	c8 01       	movw	r24, r16
    57ea:	4b 96       	adiw	r24, 0x1b	; 27
    57ec:	fc d1       	rcall	.+1016   	; 0x5be6 <Endpoint_Read_Stream_LE>
    57ee:	85 30       	cpi	r24, 0x05	; 5
    57f0:	81 f3       	breq	.-32     	; 0x57d2 <MS_Device_ReadInCommandBlock+0xa0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    57f2:	e8 ee       	ldi	r30, 0xE8	; 232
    57f4:	f0 e0       	ldi	r31, 0x00	; 0
    57f6:	80 81       	ld	r24, Z
    57f8:	8b 77       	andi	r24, 0x7B	; 123
    57fa:	80 83       	st	Z, r24
		  return false;
	}

	Endpoint_ClearOUT();

	return true;
    57fc:	81 e0       	ldi	r24, 0x01	; 1
    57fe:	03 c0       	rjmp	.+6      	; 0x5806 <MS_Device_ReadInCommandBlock+0xd4>
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
    5800:	80 e0       	ldi	r24, 0x00	; 0
    5802:	01 c0       	rjmp	.+2      	; 0x5806 <MS_Device_ReadInCommandBlock+0xd4>
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
    5804:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_ClearOUT();

	return true;
}
    5806:	0f 90       	pop	r0
    5808:	0f 90       	pop	r0
    580a:	df 91       	pop	r29
    580c:	cf 91       	pop	r28
    580e:	1f 91       	pop	r17
    5810:	0f 91       	pop	r16
    5812:	08 95       	ret

00005814 <MS_Device_ReturnCommandStatus>:

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    5814:	0f 93       	push	r16
    5816:	1f 93       	push	r17
    5818:	cf 93       	push	r28
    581a:	df 93       	push	r29
    581c:	00 d0       	rcall	.+0      	; 0x581e <MS_Device_ReturnCommandStatus+0xa>
    581e:	cd b7       	in	r28, 0x3d	; 61
    5820:	de b7       	in	r29, 0x3e	; 62
    5822:	fc 01       	movw	r30, r24
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    5824:	86 81       	ldd	r24, Z+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5826:	8f 70       	andi	r24, 0x0F	; 15
    5828:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    582c:	03 c0       	rjmp	.+6      	; 0x5834 <MS_Device_ReturnCommandStatus+0x20>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    582e:	80 ad       	ldd	r24, Z+56	; 0x38
    5830:	81 11       	cpse	r24, r1
    5832:	27 c0       	rjmp	.+78     	; 0x5882 <MS_Device_ReturnCommandStatus+0x6e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    5834:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    5838:	85 fd       	sbrc	r24, 5
    583a:	f9 cf       	rjmp	.-14     	; 0x582e <MS_Device_ReturnCommandStatus+0x1a>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    583c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    583e:	8f 70       	andi	r24, 0x0F	; 15
    5840:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    5844:	03 c0       	rjmp	.+6      	; 0x584c <MS_Device_ReturnCommandStatus+0x38>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    5846:	80 ad       	ldd	r24, Z+56	; 0x38
    5848:	81 11       	cpse	r24, r1
    584a:	1b c0       	rjmp	.+54     	; 0x5882 <MS_Device_ReturnCommandStatus+0x6e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    584c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    5850:	85 fd       	sbrc	r24, 5
    5852:	f9 cf       	rjmp	.-14     	; 0x5846 <MS_Device_ReturnCommandStatus+0x32>
    5854:	8f 01       	movw	r16, r30

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    5856:	1a 82       	std	Y+2, r1	; 0x02
    5858:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    585a:	04 c0       	rjmp	.+8      	; 0x5864 <MS_Device_ReturnCommandStatus+0x50>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    585c:	f8 01       	movw	r30, r16
    585e:	80 ad       	ldd	r24, Z+56	; 0x38
    5860:	81 11       	cpse	r24, r1
    5862:	0f c0       	rjmp	.+30     	; 0x5882 <MS_Device_ReturnCommandStatus+0x6e>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    5864:	ae 01       	movw	r20, r28
    5866:	4f 5f       	subi	r20, 0xFF	; 255
    5868:	5f 4f       	sbci	r21, 0xFF	; 255
    586a:	6d e0       	ldi	r22, 0x0D	; 13
    586c:	70 e0       	ldi	r23, 0x00	; 0
    586e:	c8 01       	movw	r24, r16
    5870:	8b 96       	adiw	r24, 0x2b	; 43
    5872:	21 d1       	rcall	.+578    	; 0x5ab6 <Endpoint_Write_Stream_LE>
    5874:	85 30       	cpi	r24, 0x05	; 5
    5876:	91 f3       	breq	.-28     	; 0x585c <MS_Device_ReturnCommandStatus+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5878:	e8 ee       	ldi	r30, 0xE8	; 232
    587a:	f0 e0       	ldi	r31, 0x00	; 0
    587c:	80 81       	ld	r24, Z
    587e:	8e 77       	andi	r24, 0x7E	; 126
    5880:	80 83       	st	Z, r24
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_ClearIN();
}
    5882:	0f 90       	pop	r0
    5884:	0f 90       	pop	r0
    5886:	df 91       	pop	r29
    5888:	cf 91       	pop	r28
    588a:	1f 91       	pop	r17
    588c:	0f 91       	pop	r16
    588e:	08 95       	ret

00005890 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    5890:	cf 93       	push	r28
    5892:	df 93       	push	r29
    5894:	fc 01       	movw	r30, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5896:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    589a:	93 ff       	sbrs	r25, 3
    589c:	34 c0       	rjmp	.+104    	; 0x5906 <MS_Device_ProcessControlRequest+0x76>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    589e:	80 91 44 0d 	lds	r24, 0x0D44	; 0x800d44 <USB_ControlRequest+0x4>
    58a2:	90 91 45 0d 	lds	r25, 0x0D45	; 0x800d45 <USB_ControlRequest+0x5>
    58a6:	20 81       	ld	r18, Z
    58a8:	30 e0       	ldi	r19, 0x00	; 0
    58aa:	82 17       	cp	r24, r18
    58ac:	93 07       	cpc	r25, r19
    58ae:	59 f5       	brne	.+86     	; 0x5906 <MS_Device_ProcessControlRequest+0x76>
    58b0:	ef 01       	movw	r28, r30
	  return;

	switch (USB_ControlRequest.bRequest)
    58b2:	80 91 41 0d 	lds	r24, 0x0D41	; 0x800d41 <USB_ControlRequest+0x1>
    58b6:	8e 3f       	cpi	r24, 0xFE	; 254
    58b8:	79 f0       	breq	.+30     	; 0x58d8 <MS_Device_ProcessControlRequest+0x48>
    58ba:	8f 3f       	cpi	r24, 0xFF	; 255
    58bc:	21 f5       	brne	.+72     	; 0x5906 <MS_Device_ProcessControlRequest+0x76>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    58be:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <USB_ControlRequest>
    58c2:	81 32       	cpi	r24, 0x21	; 33
    58c4:	01 f5       	brne	.+64     	; 0x5906 <MS_Device_ProcessControlRequest+0x76>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    58c6:	e8 ee       	ldi	r30, 0xE8	; 232
    58c8:	f0 e0       	ldi	r31, 0x00	; 0
    58ca:	80 81       	ld	r24, Z
    58cc:	87 7f       	andi	r24, 0xF7	; 247
    58ce:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    58d0:	fc d2       	rcall	.+1528   	; 0x5eca <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    58d2:	81 e0       	ldi	r24, 0x01	; 1
    58d4:	88 af       	std	Y+56, r24	; 0x38
    58d6:	17 c0       	rjmp	.+46     	; 0x5906 <MS_Device_ProcessControlRequest+0x76>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    58d8:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <USB_ControlRequest>
    58dc:	81 3a       	cpi	r24, 0xA1	; 161
    58de:	99 f4       	brne	.+38     	; 0x5906 <MS_Device_ProcessControlRequest+0x76>
    58e0:	e8 ee       	ldi	r30, 0xE8	; 232
    58e2:	f0 e0       	ldi	r31, 0x00	; 0
    58e4:	80 81       	ld	r24, Z
    58e6:	87 7f       	andi	r24, 0xF7	; 247
    58e8:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    58ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    58ee:	80 ff       	sbrs	r24, 0
    58f0:	fc cf       	rjmp	.-8      	; 0x58ea <MS_Device_ProcessControlRequest+0x5a>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    58f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    58f4:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    58f6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    58fa:	e8 ee       	ldi	r30, 0xE8	; 232
    58fc:	f0 e0       	ldi	r31, 0x00	; 0
    58fe:	80 81       	ld	r24, Z
    5900:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    5902:	80 83       	st	Z, r24
    5904:	e2 d2       	rcall	.+1476   	; 0x5eca <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    5906:	df 91       	pop	r29
    5908:	cf 91       	pop	r28
    590a:	08 95       	ret

0000590c <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    590c:	cf 93       	push	r28
    590e:	df 93       	push	r29
    5910:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    5912:	fc 01       	movw	r30, r24
    5914:	3c 96       	adiw	r30, 0x0c	; 12
    5916:	8d e2       	ldi	r24, 0x2D	; 45
    5918:	df 01       	movw	r26, r30
    591a:	1d 92       	st	X+, r1
    591c:	8a 95       	dec	r24
    591e:	e9 f7       	brne	.-6      	; 0x591a <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    5920:	82 e0       	ldi	r24, 0x02	; 2
    5922:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    5924:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    5926:	61 e0       	ldi	r22, 0x01	; 1
    5928:	ce 01       	movw	r24, r28
    592a:	01 96       	adiw	r24, 0x01	; 1
    592c:	88 d2       	rcall	.+1296   	; 0x5e3e <Endpoint_ConfigureEndpointTable>
    592e:	88 23       	and	r24, r24
    5930:	21 f0       	breq	.+8      	; 0x593a <MS_Device_ConfigureEndpoints+0x2e>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    5932:	61 e0       	ldi	r22, 0x01	; 1
    5934:	ce 01       	movw	r24, r28
    5936:	06 96       	adiw	r24, 0x06	; 6
    5938:	82 d2       	rcall	.+1284   	; 0x5e3e <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    593a:	df 91       	pop	r29
    593c:	cf 91       	pop	r28
    593e:	08 95       	ret

00005940 <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    5940:	cf 93       	push	r28
    5942:	df 93       	push	r29
    5944:	ec 01       	movw	r28, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    5946:	90 91 3f 0d 	lds	r25, 0x0D3F	; 0x800d3f <USB_DeviceState>
    594a:	94 30       	cpi	r25, 0x04	; 4
    594c:	09 f0       	breq	.+2      	; 0x5950 <MS_Device_USBTask+0x10>
    594e:	72 c0       	rjmp	.+228    	; 0x5a34 <MS_Device_USBTask+0xf4>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    5950:	8e 81       	ldd	r24, Y+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5952:	8f 70       	andi	r24, 0x0F	; 15
    5954:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5958:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsOUTReceived())
    595c:	82 ff       	sbrs	r24, 2
    595e:	39 c0       	rjmp	.+114    	; 0x59d2 <MS_Device_USBTask+0x92>
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
    5960:	ce 01       	movw	r24, r28
    5962:	e7 de       	rcall	.-562    	; 0x5732 <MS_Device_ReadInCommandBlock>
    5964:	88 23       	and	r24, r24
    5966:	a9 f1       	breq	.+106    	; 0x59d2 <MS_Device_USBTask+0x92>
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    5968:	88 8d       	ldd	r24, Y+24	; 0x18
    596a:	88 23       	and	r24, r24
    596c:	24 f4       	brge	.+8      	; 0x5976 <MS_Device_USBTask+0x36>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    596e:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5970:	8f 70       	andi	r24, 0x0F	; 15
    5972:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    5976:	ce 01       	movw	r24, r28
    5978:	0e 94 29 1a 	call	0x3452	; 0x3452 <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    597c:	88 23       	and	r24, r24
    597e:	11 f0       	breq	.+4      	; 0x5984 <MS_Device_USBTask+0x44>
    5980:	90 e0       	ldi	r25, 0x00	; 0
    5982:	01 c0       	rjmp	.+2      	; 0x5986 <MS_Device_USBTask+0x46>
    5984:	91 e0       	ldi	r25, 0x01	; 1
    5986:	9f ab       	std	Y+55, r25	; 0x37
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    5988:	45 e5       	ldi	r20, 0x55	; 85
    598a:	53 e5       	ldi	r21, 0x53	; 83
    598c:	62 e4       	ldi	r22, 0x42	; 66
    598e:	73 e5       	ldi	r23, 0x53	; 83
    5990:	4b a7       	std	Y+43, r20	; 0x2b
    5992:	5c a7       	std	Y+44, r21	; 0x2c
    5994:	6d a7       	std	Y+45, r22	; 0x2d
    5996:	7e a7       	std	Y+46, r23	; 0x2e
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    5998:	48 89       	ldd	r20, Y+16	; 0x10
    599a:	59 89       	ldd	r21, Y+17	; 0x11
    599c:	6a 89       	ldd	r22, Y+18	; 0x12
    599e:	7b 89       	ldd	r23, Y+19	; 0x13
    59a0:	4f a7       	std	Y+47, r20	; 0x2f
    59a2:	58 ab       	std	Y+48, r21	; 0x30
    59a4:	69 ab       	std	Y+49, r22	; 0x31
    59a6:	7a ab       	std	Y+50, r23	; 0x32
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    59a8:	4c 89       	ldd	r20, Y+20	; 0x14
    59aa:	5d 89       	ldd	r21, Y+21	; 0x15
    59ac:	6e 89       	ldd	r22, Y+22	; 0x16
    59ae:	7f 89       	ldd	r23, Y+23	; 0x17
    59b0:	4b ab       	std	Y+51, r20	; 0x33
    59b2:	5c ab       	std	Y+52, r21	; 0x34
    59b4:	6d ab       	std	Y+53, r22	; 0x35
    59b6:	7e ab       	std	Y+54, r23	; 0x36

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    59b8:	81 11       	cpse	r24, r1
    59ba:	09 c0       	rjmp	.+18     	; 0x59ce <MS_Device_USBTask+0x8e>
    59bc:	45 2b       	or	r20, r21
    59be:	46 2b       	or	r20, r22
    59c0:	47 2b       	or	r20, r23
    59c2:	29 f0       	breq	.+10     	; 0x59ce <MS_Device_USBTask+0x8e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    59c4:	eb ee       	ldi	r30, 0xEB	; 235
    59c6:	f0 e0       	ldi	r31, 0x00	; 0
    59c8:	80 81       	ld	r24, Z
    59ca:	80 62       	ori	r24, 0x20	; 32
    59cc:	80 83       	st	Z, r24
			  Endpoint_StallTransaction();

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
    59ce:	ce 01       	movw	r24, r28
    59d0:	21 df       	rcall	.-446    	; 0x5814 <MS_Device_ReturnCommandStatus>
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    59d2:	88 ad       	ldd	r24, Y+56	; 0x38
    59d4:	88 23       	and	r24, r24
    59d6:	71 f1       	breq	.+92     	; 0x5a34 <MS_Device_USBTask+0xf4>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    59d8:	2e 81       	ldd	r18, Y+6	; 0x06
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    59da:	2f 70       	andi	r18, 0x0F	; 15
    59dc:	81 e0       	ldi	r24, 0x01	; 1
    59de:	90 e0       	ldi	r25, 0x00	; 0
    59e0:	ac 01       	movw	r20, r24
    59e2:	02 c0       	rjmp	.+4      	; 0x59e8 <MS_Device_USBTask+0xa8>
    59e4:	44 0f       	add	r20, r20
    59e6:	55 1f       	adc	r21, r21
    59e8:	2a 95       	dec	r18
    59ea:	e2 f7       	brpl	.-8      	; 0x59e4 <MS_Device_USBTask+0xa4>
    59ec:	ea ee       	ldi	r30, 0xEA	; 234
    59ee:	f0 e0       	ldi	r31, 0x00	; 0
    59f0:	40 83       	st	Z, r20
				UERST = 0;
    59f2:	10 82       	st	Z, r1
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    59f4:	29 81       	ldd	r18, Y+1	; 0x01
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    59f6:	2f 70       	andi	r18, 0x0F	; 15
    59f8:	02 c0       	rjmp	.+4      	; 0x59fe <MS_Device_USBTask+0xbe>
    59fa:	88 0f       	add	r24, r24
    59fc:	99 1f       	adc	r25, r25
    59fe:	2a 95       	dec	r18
    5a00:	e2 f7       	brpl	.-8      	; 0x59fa <MS_Device_USBTask+0xba>
    5a02:	80 83       	st	Z, r24
				UERST = 0;
    5a04:	10 82       	st	Z, r1

		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    5a06:	8e 81       	ldd	r24, Y+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5a08:	8f 70       	andi	r24, 0x0F	; 15
    5a0a:	a9 ee       	ldi	r26, 0xE9	; 233
    5a0c:	b0 e0       	ldi	r27, 0x00	; 0
    5a0e:	8c 93       	st	X, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    5a10:	eb ee       	ldi	r30, 0xEB	; 235
    5a12:	f0 e0       	ldi	r31, 0x00	; 0
    5a14:	80 81       	ld	r24, Z
    5a16:	80 61       	ori	r24, 0x10	; 16
    5a18:	80 83       	st	Z, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    5a1a:	80 81       	ld	r24, Z
    5a1c:	88 60       	ori	r24, 0x08	; 8
    5a1e:	80 83       	st	Z, r24
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    5a20:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5a22:	8f 70       	andi	r24, 0x0F	; 15
    5a24:	8c 93       	st	X, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    5a26:	80 81       	ld	r24, Z
    5a28:	80 61       	ori	r24, 0x10	; 16
    5a2a:	80 83       	st	Z, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    5a2c:	80 81       	ld	r24, Z
    5a2e:	88 60       	ori	r24, 0x08	; 8
    5a30:	80 83       	st	Z, r24
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    5a32:	18 ae       	std	Y+56, r1	; 0x38
	}
}
    5a34:	df 91       	pop	r29
    5a36:	cf 91       	pop	r28
    5a38:	08 95       	ret

00005a3a <Endpoint_Null_Stream>:
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    5a3a:	ef 92       	push	r14
    5a3c:	ff 92       	push	r15
    5a3e:	0f 93       	push	r16
    5a40:	1f 93       	push	r17
    5a42:	cf 93       	push	r28
    5a44:	df 93       	push	r29
    5a46:	ec 01       	movw	r28, r24
    5a48:	7b 01       	movw	r14, r22
    5a4a:	60 d2       	rcall	.+1216   	; 0x5f0c <Endpoint_WaitUntilReady>
    5a4c:	81 11       	cpse	r24, r1
    5a4e:	2c c0       	rjmp	.+88     	; 0x5aa8 <Endpoint_Null_Stream+0x6e>
    5a50:	e1 14       	cp	r14, r1
    5a52:	f1 04       	cpc	r15, r1
    5a54:	29 f0       	breq	.+10     	; 0x5a60 <Endpoint_Null_Stream+0x26>
    5a56:	f7 01       	movw	r30, r14
    5a58:	80 81       	ld	r24, Z
    5a5a:	91 81       	ldd	r25, Z+1	; 0x01
    5a5c:	c8 1b       	sub	r28, r24
    5a5e:	d9 0b       	sbc	r29, r25
    5a60:	00 e0       	ldi	r16, 0x00	; 0
    5a62:	10 e0       	ldi	r17, 0x00	; 0
    5a64:	1e c0       	rjmp	.+60     	; 0x5aa2 <Endpoint_Null_Stream+0x68>
    5a66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5a6a:	85 fd       	sbrc	r24, 5
    5a6c:	15 c0       	rjmp	.+42     	; 0x5a98 <Endpoint_Null_Stream+0x5e>
    5a6e:	e8 ee       	ldi	r30, 0xE8	; 232
    5a70:	f0 e0       	ldi	r31, 0x00	; 0
    5a72:	80 81       	ld	r24, Z
    5a74:	8e 77       	andi	r24, 0x7E	; 126
    5a76:	80 83       	st	Z, r24
    5a78:	e1 14       	cp	r14, r1
    5a7a:	f1 04       	cpc	r15, r1
    5a7c:	49 f0       	breq	.+18     	; 0x5a90 <Endpoint_Null_Stream+0x56>
    5a7e:	f7 01       	movw	r30, r14
    5a80:	80 81       	ld	r24, Z
    5a82:	91 81       	ldd	r25, Z+1	; 0x01
    5a84:	08 0f       	add	r16, r24
    5a86:	19 1f       	adc	r17, r25
    5a88:	11 83       	std	Z+1, r17	; 0x01
    5a8a:	00 83       	st	Z, r16
    5a8c:	85 e0       	ldi	r24, 0x05	; 5
    5a8e:	0c c0       	rjmp	.+24     	; 0x5aa8 <Endpoint_Null_Stream+0x6e>
    5a90:	3d d2       	rcall	.+1146   	; 0x5f0c <Endpoint_WaitUntilReady>
    5a92:	88 23       	and	r24, r24
    5a94:	31 f0       	breq	.+12     	; 0x5aa2 <Endpoint_Null_Stream+0x68>
    5a96:	08 c0       	rjmp	.+16     	; 0x5aa8 <Endpoint_Null_Stream+0x6e>
    5a98:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5a9c:	21 97       	sbiw	r28, 0x01	; 1
    5a9e:	0f 5f       	subi	r16, 0xFF	; 255
    5aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    5aa2:	20 97       	sbiw	r28, 0x00	; 0
    5aa4:	01 f7       	brne	.-64     	; 0x5a66 <Endpoint_Null_Stream+0x2c>
    5aa6:	80 e0       	ldi	r24, 0x00	; 0
    5aa8:	df 91       	pop	r29
    5aaa:	cf 91       	pop	r28
    5aac:	1f 91       	pop	r17
    5aae:	0f 91       	pop	r16
    5ab0:	ff 90       	pop	r15
    5ab2:	ef 90       	pop	r14
    5ab4:	08 95       	ret

00005ab6 <Endpoint_Write_Stream_LE>:
    5ab6:	cf 92       	push	r12
    5ab8:	df 92       	push	r13
    5aba:	ef 92       	push	r14
    5abc:	ff 92       	push	r15
    5abe:	0f 93       	push	r16
    5ac0:	1f 93       	push	r17
    5ac2:	cf 93       	push	r28
    5ac4:	df 93       	push	r29
    5ac6:	8c 01       	movw	r16, r24
    5ac8:	eb 01       	movw	r28, r22
    5aca:	6a 01       	movw	r12, r20
    5acc:	1f d2       	rcall	.+1086   	; 0x5f0c <Endpoint_WaitUntilReady>
    5ace:	81 11       	cpse	r24, r1
    5ad0:	32 c0       	rjmp	.+100    	; 0x5b36 <Endpoint_Write_Stream_LE+0x80>
    5ad2:	c1 14       	cp	r12, r1
    5ad4:	d1 04       	cpc	r13, r1
    5ad6:	39 f0       	breq	.+14     	; 0x5ae6 <Endpoint_Write_Stream_LE+0x30>
    5ad8:	f6 01       	movw	r30, r12
    5ada:	80 81       	ld	r24, Z
    5adc:	91 81       	ldd	r25, Z+1	; 0x01
    5ade:	c8 1b       	sub	r28, r24
    5ae0:	d9 0b       	sbc	r29, r25
    5ae2:	08 0f       	add	r16, r24
    5ae4:	19 1f       	adc	r17, r25
    5ae6:	e1 2c       	mov	r14, r1
    5ae8:	f1 2c       	mov	r15, r1
    5aea:	22 c0       	rjmp	.+68     	; 0x5b30 <Endpoint_Write_Stream_LE+0x7a>
    5aec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5af0:	85 fd       	sbrc	r24, 5
    5af2:	15 c0       	rjmp	.+42     	; 0x5b1e <Endpoint_Write_Stream_LE+0x68>
    5af4:	e8 ee       	ldi	r30, 0xE8	; 232
    5af6:	f0 e0       	ldi	r31, 0x00	; 0
    5af8:	90 81       	ld	r25, Z
    5afa:	9e 77       	andi	r25, 0x7E	; 126
    5afc:	90 83       	st	Z, r25
    5afe:	c1 14       	cp	r12, r1
    5b00:	d1 04       	cpc	r13, r1
    5b02:	49 f0       	breq	.+18     	; 0x5b16 <Endpoint_Write_Stream_LE+0x60>
    5b04:	f6 01       	movw	r30, r12
    5b06:	80 81       	ld	r24, Z
    5b08:	91 81       	ldd	r25, Z+1	; 0x01
    5b0a:	e8 0e       	add	r14, r24
    5b0c:	f9 1e       	adc	r15, r25
    5b0e:	f1 82       	std	Z+1, r15	; 0x01
    5b10:	e0 82       	st	Z, r14
    5b12:	85 e0       	ldi	r24, 0x05	; 5
    5b14:	10 c0       	rjmp	.+32     	; 0x5b36 <Endpoint_Write_Stream_LE+0x80>
    5b16:	fa d1       	rcall	.+1012   	; 0x5f0c <Endpoint_WaitUntilReady>
    5b18:	88 23       	and	r24, r24
    5b1a:	51 f0       	breq	.+20     	; 0x5b30 <Endpoint_Write_Stream_LE+0x7a>
    5b1c:	0c c0       	rjmp	.+24     	; 0x5b36 <Endpoint_Write_Stream_LE+0x80>
    5b1e:	f8 01       	movw	r30, r16
    5b20:	81 91       	ld	r24, Z+
    5b22:	8f 01       	movw	r16, r30
    5b24:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5b28:	21 97       	sbiw	r28, 0x01	; 1
    5b2a:	ff ef       	ldi	r31, 0xFF	; 255
    5b2c:	ef 1a       	sub	r14, r31
    5b2e:	ff 0a       	sbc	r15, r31
    5b30:	20 97       	sbiw	r28, 0x00	; 0
    5b32:	e1 f6       	brne	.-72     	; 0x5aec <Endpoint_Write_Stream_LE+0x36>
    5b34:	80 e0       	ldi	r24, 0x00	; 0
    5b36:	df 91       	pop	r29
    5b38:	cf 91       	pop	r28
    5b3a:	1f 91       	pop	r17
    5b3c:	0f 91       	pop	r16
    5b3e:	ff 90       	pop	r15
    5b40:	ef 90       	pop	r14
    5b42:	df 90       	pop	r13
    5b44:	cf 90       	pop	r12
    5b46:	08 95       	ret

00005b48 <Endpoint_Write_Stream_BE>:
    5b48:	cf 92       	push	r12
    5b4a:	df 92       	push	r13
    5b4c:	ef 92       	push	r14
    5b4e:	ff 92       	push	r15
    5b50:	0f 93       	push	r16
    5b52:	1f 93       	push	r17
    5b54:	cf 93       	push	r28
    5b56:	df 93       	push	r29
    5b58:	eb 01       	movw	r28, r22
    5b5a:	7a 01       	movw	r14, r20
    5b5c:	6b 01       	movw	r12, r22
    5b5e:	21 e0       	ldi	r18, 0x01	; 1
    5b60:	c2 1a       	sub	r12, r18
    5b62:	d1 08       	sbc	r13, r1
    5b64:	c8 0e       	add	r12, r24
    5b66:	d9 1e       	adc	r13, r25
    5b68:	d1 d1       	rcall	.+930    	; 0x5f0c <Endpoint_WaitUntilReady>
    5b6a:	81 11       	cpse	r24, r1
    5b6c:	33 c0       	rjmp	.+102    	; 0x5bd4 <Endpoint_Write_Stream_BE+0x8c>
    5b6e:	e1 14       	cp	r14, r1
    5b70:	f1 04       	cpc	r15, r1
    5b72:	39 f0       	breq	.+14     	; 0x5b82 <Endpoint_Write_Stream_BE+0x3a>
    5b74:	f7 01       	movw	r30, r14
    5b76:	80 81       	ld	r24, Z
    5b78:	91 81       	ldd	r25, Z+1	; 0x01
    5b7a:	c8 1b       	sub	r28, r24
    5b7c:	d9 0b       	sbc	r29, r25
    5b7e:	c8 1a       	sub	r12, r24
    5b80:	d9 0a       	sbc	r13, r25
    5b82:	00 e0       	ldi	r16, 0x00	; 0
    5b84:	10 e0       	ldi	r17, 0x00	; 0
    5b86:	23 c0       	rjmp	.+70     	; 0x5bce <Endpoint_Write_Stream_BE+0x86>
    5b88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5b8c:	85 fd       	sbrc	r24, 5
    5b8e:	15 c0       	rjmp	.+42     	; 0x5bba <Endpoint_Write_Stream_BE+0x72>
    5b90:	e8 ee       	ldi	r30, 0xE8	; 232
    5b92:	f0 e0       	ldi	r31, 0x00	; 0
    5b94:	80 81       	ld	r24, Z
    5b96:	8e 77       	andi	r24, 0x7E	; 126
    5b98:	80 83       	st	Z, r24
    5b9a:	e1 14       	cp	r14, r1
    5b9c:	f1 04       	cpc	r15, r1
    5b9e:	49 f0       	breq	.+18     	; 0x5bb2 <Endpoint_Write_Stream_BE+0x6a>
    5ba0:	f7 01       	movw	r30, r14
    5ba2:	80 81       	ld	r24, Z
    5ba4:	91 81       	ldd	r25, Z+1	; 0x01
    5ba6:	08 0f       	add	r16, r24
    5ba8:	19 1f       	adc	r17, r25
    5baa:	11 83       	std	Z+1, r17	; 0x01
    5bac:	00 83       	st	Z, r16
    5bae:	85 e0       	ldi	r24, 0x05	; 5
    5bb0:	11 c0       	rjmp	.+34     	; 0x5bd4 <Endpoint_Write_Stream_BE+0x8c>
    5bb2:	ac d1       	rcall	.+856    	; 0x5f0c <Endpoint_WaitUntilReady>
    5bb4:	88 23       	and	r24, r24
    5bb6:	59 f0       	breq	.+22     	; 0x5bce <Endpoint_Write_Stream_BE+0x86>
    5bb8:	0d c0       	rjmp	.+26     	; 0x5bd4 <Endpoint_Write_Stream_BE+0x8c>
    5bba:	f6 01       	movw	r30, r12
    5bbc:	80 81       	ld	r24, Z
    5bbe:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5bc2:	f1 e0       	ldi	r31, 0x01	; 1
    5bc4:	cf 1a       	sub	r12, r31
    5bc6:	d1 08       	sbc	r13, r1
    5bc8:	21 97       	sbiw	r28, 0x01	; 1
    5bca:	0f 5f       	subi	r16, 0xFF	; 255
    5bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    5bce:	20 97       	sbiw	r28, 0x00	; 0
    5bd0:	d9 f6       	brne	.-74     	; 0x5b88 <Endpoint_Write_Stream_BE+0x40>
    5bd2:	80 e0       	ldi	r24, 0x00	; 0
    5bd4:	df 91       	pop	r29
    5bd6:	cf 91       	pop	r28
    5bd8:	1f 91       	pop	r17
    5bda:	0f 91       	pop	r16
    5bdc:	ff 90       	pop	r15
    5bde:	ef 90       	pop	r14
    5be0:	df 90       	pop	r13
    5be2:	cf 90       	pop	r12
    5be4:	08 95       	ret

00005be6 <Endpoint_Read_Stream_LE>:
    5be6:	cf 92       	push	r12
    5be8:	df 92       	push	r13
    5bea:	ef 92       	push	r14
    5bec:	ff 92       	push	r15
    5bee:	0f 93       	push	r16
    5bf0:	1f 93       	push	r17
    5bf2:	cf 93       	push	r28
    5bf4:	df 93       	push	r29
    5bf6:	8c 01       	movw	r16, r24
    5bf8:	eb 01       	movw	r28, r22
    5bfa:	6a 01       	movw	r12, r20
    5bfc:	87 d1       	rcall	.+782    	; 0x5f0c <Endpoint_WaitUntilReady>
    5bfe:	81 11       	cpse	r24, r1
    5c00:	32 c0       	rjmp	.+100    	; 0x5c66 <Endpoint_Read_Stream_LE+0x80>
    5c02:	c1 14       	cp	r12, r1
    5c04:	d1 04       	cpc	r13, r1
    5c06:	39 f0       	breq	.+14     	; 0x5c16 <Endpoint_Read_Stream_LE+0x30>
    5c08:	f6 01       	movw	r30, r12
    5c0a:	80 81       	ld	r24, Z
    5c0c:	91 81       	ldd	r25, Z+1	; 0x01
    5c0e:	c8 1b       	sub	r28, r24
    5c10:	d9 0b       	sbc	r29, r25
    5c12:	08 0f       	add	r16, r24
    5c14:	19 1f       	adc	r17, r25
    5c16:	e1 2c       	mov	r14, r1
    5c18:	f1 2c       	mov	r15, r1
    5c1a:	22 c0       	rjmp	.+68     	; 0x5c60 <Endpoint_Read_Stream_LE+0x7a>
    5c1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5c20:	85 fd       	sbrc	r24, 5
    5c22:	15 c0       	rjmp	.+42     	; 0x5c4e <Endpoint_Read_Stream_LE+0x68>
    5c24:	e8 ee       	ldi	r30, 0xE8	; 232
    5c26:	f0 e0       	ldi	r31, 0x00	; 0
    5c28:	90 81       	ld	r25, Z
    5c2a:	9b 77       	andi	r25, 0x7B	; 123
    5c2c:	90 83       	st	Z, r25
    5c2e:	c1 14       	cp	r12, r1
    5c30:	d1 04       	cpc	r13, r1
    5c32:	49 f0       	breq	.+18     	; 0x5c46 <Endpoint_Read_Stream_LE+0x60>
    5c34:	f6 01       	movw	r30, r12
    5c36:	80 81       	ld	r24, Z
    5c38:	91 81       	ldd	r25, Z+1	; 0x01
    5c3a:	e8 0e       	add	r14, r24
    5c3c:	f9 1e       	adc	r15, r25
    5c3e:	f1 82       	std	Z+1, r15	; 0x01
    5c40:	e0 82       	st	Z, r14
    5c42:	85 e0       	ldi	r24, 0x05	; 5
    5c44:	10 c0       	rjmp	.+32     	; 0x5c66 <Endpoint_Read_Stream_LE+0x80>
    5c46:	62 d1       	rcall	.+708    	; 0x5f0c <Endpoint_WaitUntilReady>
    5c48:	88 23       	and	r24, r24
    5c4a:	51 f0       	breq	.+20     	; 0x5c60 <Endpoint_Read_Stream_LE+0x7a>
    5c4c:	0c c0       	rjmp	.+24     	; 0x5c66 <Endpoint_Read_Stream_LE+0x80>
    5c4e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5c52:	f8 01       	movw	r30, r16
    5c54:	81 93       	st	Z+, r24
    5c56:	8f 01       	movw	r16, r30
    5c58:	21 97       	sbiw	r28, 0x01	; 1
    5c5a:	ff ef       	ldi	r31, 0xFF	; 255
    5c5c:	ef 1a       	sub	r14, r31
    5c5e:	ff 0a       	sbc	r15, r31
    5c60:	20 97       	sbiw	r28, 0x00	; 0
    5c62:	e1 f6       	brne	.-72     	; 0x5c1c <Endpoint_Read_Stream_LE+0x36>
    5c64:	80 e0       	ldi	r24, 0x00	; 0
    5c66:	df 91       	pop	r29
    5c68:	cf 91       	pop	r28
    5c6a:	1f 91       	pop	r17
    5c6c:	0f 91       	pop	r16
    5c6e:	ff 90       	pop	r15
    5c70:	ef 90       	pop	r14
    5c72:	df 90       	pop	r13
    5c74:	cf 90       	pop	r12
    5c76:	08 95       	ret

00005c78 <Endpoint_Write_Control_Stream_LE>:
    5c78:	20 91 46 0d 	lds	r18, 0x0D46	; 0x800d46 <USB_ControlRequest+0x6>
    5c7c:	30 91 47 0d 	lds	r19, 0x0D47	; 0x800d47 <USB_ControlRequest+0x7>
    5c80:	26 17       	cp	r18, r22
    5c82:	37 07       	cpc	r19, r23
    5c84:	58 f0       	brcs	.+22     	; 0x5c9c <Endpoint_Write_Control_Stream_LE+0x24>
    5c86:	61 15       	cp	r22, r1
    5c88:	71 05       	cpc	r23, r1
    5c8a:	39 f4       	brne	.+14     	; 0x5c9a <Endpoint_Write_Control_Stream_LE+0x22>
    5c8c:	e8 ee       	ldi	r30, 0xE8	; 232
    5c8e:	f0 e0       	ldi	r31, 0x00	; 0
    5c90:	20 81       	ld	r18, Z
    5c92:	2e 77       	andi	r18, 0x7E	; 126
    5c94:	20 83       	st	Z, r18
    5c96:	9b 01       	movw	r18, r22
    5c98:	01 c0       	rjmp	.+2      	; 0x5c9c <Endpoint_Write_Control_Stream_LE+0x24>
    5c9a:	9b 01       	movw	r18, r22
    5c9c:	e8 2f       	mov	r30, r24
    5c9e:	f9 2f       	mov	r31, r25
    5ca0:	90 e0       	ldi	r25, 0x00	; 0
    5ca2:	30 c0       	rjmp	.+96     	; 0x5d04 <Endpoint_Write_Control_Stream_LE+0x8c>
    5ca4:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <USB_DeviceState>
    5ca8:	88 23       	and	r24, r24
    5caa:	09 f4       	brne	.+2      	; 0x5cae <Endpoint_Write_Control_Stream_LE+0x36>
    5cac:	41 c0       	rjmp	.+130    	; 0x5d30 <Endpoint_Write_Control_Stream_LE+0xb8>
    5cae:	85 30       	cpi	r24, 0x05	; 5
    5cb0:	09 f4       	brne	.+2      	; 0x5cb4 <Endpoint_Write_Control_Stream_LE+0x3c>
    5cb2:	40 c0       	rjmp	.+128    	; 0x5d34 <Endpoint_Write_Control_Stream_LE+0xbc>
    5cb4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5cb8:	83 fd       	sbrc	r24, 3
    5cba:	3e c0       	rjmp	.+124    	; 0x5d38 <Endpoint_Write_Control_Stream_LE+0xc0>
    5cbc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5cc0:	82 fd       	sbrc	r24, 2
    5cc2:	30 c0       	rjmp	.+96     	; 0x5d24 <Endpoint_Write_Control_Stream_LE+0xac>
    5cc4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5cc8:	80 ff       	sbrs	r24, 0
    5cca:	1c c0       	rjmp	.+56     	; 0x5d04 <Endpoint_Write_Control_Stream_LE+0x8c>
    5ccc:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    5cd0:	50 91 f3 00 	lds	r21, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    5cd4:	07 c0       	rjmp	.+14     	; 0x5ce4 <Endpoint_Write_Control_Stream_LE+0x6c>
    5cd6:	81 91       	ld	r24, Z+
    5cd8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5cdc:	21 50       	subi	r18, 0x01	; 1
    5cde:	31 09       	sbc	r19, r1
    5ce0:	4f 5f       	subi	r20, 0xFF	; 255
    5ce2:	5f 4f       	sbci	r21, 0xFF	; 255
    5ce4:	21 15       	cp	r18, r1
    5ce6:	31 05       	cpc	r19, r1
    5ce8:	19 f0       	breq	.+6      	; 0x5cf0 <Endpoint_Write_Control_Stream_LE+0x78>
    5cea:	48 30       	cpi	r20, 0x08	; 8
    5cec:	51 05       	cpc	r21, r1
    5cee:	98 f3       	brcs	.-26     	; 0x5cd6 <Endpoint_Write_Control_Stream_LE+0x5e>
    5cf0:	91 e0       	ldi	r25, 0x01	; 1
    5cf2:	48 30       	cpi	r20, 0x08	; 8
    5cf4:	51 05       	cpc	r21, r1
    5cf6:	09 f0       	breq	.+2      	; 0x5cfa <Endpoint_Write_Control_Stream_LE+0x82>
    5cf8:	90 e0       	ldi	r25, 0x00	; 0
    5cfa:	a8 ee       	ldi	r26, 0xE8	; 232
    5cfc:	b0 e0       	ldi	r27, 0x00	; 0
    5cfe:	8c 91       	ld	r24, X
    5d00:	8e 77       	andi	r24, 0x7E	; 126
    5d02:	8c 93       	st	X, r24
    5d04:	21 15       	cp	r18, r1
    5d06:	31 05       	cpc	r19, r1
    5d08:	69 f6       	brne	.-102    	; 0x5ca4 <Endpoint_Write_Control_Stream_LE+0x2c>
    5d0a:	91 11       	cpse	r25, r1
    5d0c:	cb cf       	rjmp	.-106    	; 0x5ca4 <Endpoint_Write_Control_Stream_LE+0x2c>
    5d0e:	0a c0       	rjmp	.+20     	; 0x5d24 <Endpoint_Write_Control_Stream_LE+0xac>
    5d10:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <USB_DeviceState>
    5d14:	88 23       	and	r24, r24
    5d16:	91 f0       	breq	.+36     	; 0x5d3c <Endpoint_Write_Control_Stream_LE+0xc4>
    5d18:	85 30       	cpi	r24, 0x05	; 5
    5d1a:	91 f0       	breq	.+36     	; 0x5d40 <Endpoint_Write_Control_Stream_LE+0xc8>
    5d1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5d20:	83 fd       	sbrc	r24, 3
    5d22:	10 c0       	rjmp	.+32     	; 0x5d44 <Endpoint_Write_Control_Stream_LE+0xcc>
    5d24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5d28:	82 ff       	sbrs	r24, 2
    5d2a:	f2 cf       	rjmp	.-28     	; 0x5d10 <Endpoint_Write_Control_Stream_LE+0x98>
    5d2c:	80 e0       	ldi	r24, 0x00	; 0
    5d2e:	08 95       	ret
    5d30:	82 e0       	ldi	r24, 0x02	; 2
    5d32:	08 95       	ret
    5d34:	83 e0       	ldi	r24, 0x03	; 3
    5d36:	08 95       	ret
    5d38:	81 e0       	ldi	r24, 0x01	; 1
    5d3a:	08 95       	ret
    5d3c:	82 e0       	ldi	r24, 0x02	; 2
    5d3e:	08 95       	ret
    5d40:	83 e0       	ldi	r24, 0x03	; 3
    5d42:	08 95       	ret
    5d44:	81 e0       	ldi	r24, 0x01	; 1
    5d46:	08 95       	ret

00005d48 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    5d48:	61 15       	cp	r22, r1
    5d4a:	71 05       	cpc	r23, r1
    5d4c:	29 f4       	brne	.+10     	; 0x5d58 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5d4e:	e8 ee       	ldi	r30, 0xE8	; 232
    5d50:	f0 e0       	ldi	r31, 0x00	; 0
    5d52:	20 81       	ld	r18, Z
    5d54:	2b 77       	andi	r18, 0x7B	; 123
    5d56:	20 83       	st	Z, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    5d58:	e8 2f       	mov	r30, r24
    5d5a:	f9 2f       	mov	r31, r25
    5d5c:	22 c0       	rjmp	.+68     	; 0x5da2 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    5d5e:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    5d62:	88 23       	and	r24, r24
    5d64:	71 f1       	breq	.+92     	; 0x5dc2 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    5d66:	85 30       	cpi	r24, 0x05	; 5
    5d68:	71 f1       	breq	.+92     	; 0x5dc6 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5d6a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    5d6e:	83 fd       	sbrc	r24, 3
    5d70:	2c c0       	rjmp	.+88     	; 0x5dca <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5d72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    5d76:	82 ff       	sbrs	r24, 2
    5d78:	14 c0       	rjmp	.+40     	; 0x5da2 <Endpoint_Read_Control_Stream_LE+0x5a>
    5d7a:	05 c0       	rjmp	.+10     	; 0x5d86 <Endpoint_Read_Control_Stream_LE+0x3e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    5d7c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    5d80:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    5d82:	61 50       	subi	r22, 0x01	; 1
    5d84:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    5d86:	61 15       	cp	r22, r1
    5d88:	71 05       	cpc	r23, r1
    5d8a:	31 f0       	breq	.+12     	; 0x5d98 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    5d8c:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    5d90:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    5d94:	89 2b       	or	r24, r25
    5d96:	91 f7       	brne	.-28     	; 0x5d7c <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5d98:	a8 ee       	ldi	r26, 0xE8	; 232
    5d9a:	b0 e0       	ldi	r27, 0x00	; 0
    5d9c:	8c 91       	ld	r24, X
    5d9e:	8b 77       	andi	r24, 0x7B	; 123
    5da0:	8c 93       	st	X, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    5da2:	61 15       	cp	r22, r1
    5da4:	71 05       	cpc	r23, r1
    5da6:	d9 f6       	brne	.-74     	; 0x5d5e <Endpoint_Read_Control_Stream_LE+0x16>
    5da8:	06 c0       	rjmp	.+12     	; 0x5db6 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    5daa:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    5dae:	88 23       	and	r24, r24
    5db0:	71 f0       	breq	.+28     	; 0x5dce <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    5db2:	85 30       	cpi	r24, 0x05	; 5
    5db4:	71 f0       	breq	.+28     	; 0x5dd2 <Endpoint_Read_Control_Stream_LE+0x8a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5db6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    5dba:	80 ff       	sbrs	r24, 0
    5dbc:	f6 cf       	rjmp	.-20     	; 0x5daa <Endpoint_Read_Control_Stream_LE+0x62>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    5dbe:	80 e0       	ldi	r24, 0x00	; 0
    5dc0:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    5dc2:	82 e0       	ldi	r24, 0x02	; 2
    5dc4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    5dc6:	83 e0       	ldi	r24, 0x03	; 3
    5dc8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    5dca:	81 e0       	ldi	r24, 0x01	; 1
    5dcc:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    5dce:	82 e0       	ldi	r24, 0x02	; 2
    5dd0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    5dd2:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    5dd4:	08 95       	ret

00005dd6 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    5dd6:	98 2f       	mov	r25, r24
    5dd8:	29 c0       	rjmp	.+82     	; 0x5e2c <Endpoint_ConfigureEndpoint_Prv+0x56>
    5dda:	29 2f       	mov	r18, r25
    5ddc:	2f 70       	andi	r18, 0x0F	; 15
    5dde:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    5de2:	98 17       	cp	r25, r24
    5de4:	39 f0       	breq	.+14     	; 0x5df4 <Endpoint_ConfigureEndpoint_Prv+0x1e>
    5de6:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    5dea:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    5dee:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    5df2:	03 c0       	rjmp	.+6      	; 0x5dfa <Endpoint_ConfigureEndpoint_Prv+0x24>
    5df4:	24 2f       	mov	r18, r20
    5df6:	76 2f       	mov	r23, r22
    5df8:	50 e0       	ldi	r21, 0x00	; 0
    5dfa:	21 ff       	sbrs	r18, 1
    5dfc:	16 c0       	rjmp	.+44     	; 0x5e2a <Endpoint_ConfigureEndpoint_Prv+0x54>
    5dfe:	eb ee       	ldi	r30, 0xEB	; 235
    5e00:	f0 e0       	ldi	r31, 0x00	; 0
    5e02:	30 81       	ld	r19, Z
    5e04:	3e 7f       	andi	r19, 0xFE	; 254
    5e06:	30 83       	st	Z, r19
    5e08:	ad ee       	ldi	r26, 0xED	; 237
    5e0a:	b0 e0       	ldi	r27, 0x00	; 0
    5e0c:	3c 91       	ld	r19, X
    5e0e:	3d 7f       	andi	r19, 0xFD	; 253
    5e10:	3c 93       	st	X, r19
    5e12:	30 81       	ld	r19, Z
    5e14:	31 60       	ori	r19, 0x01	; 1
    5e16:	30 83       	st	Z, r19
    5e18:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    5e1c:	2c 93       	st	X, r18
    5e1e:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    5e22:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    5e26:	22 23       	and	r18, r18
    5e28:	44 f4       	brge	.+16     	; 0x5e3a <Endpoint_ConfigureEndpoint_Prv+0x64>
    5e2a:	9f 5f       	subi	r25, 0xFF	; 255
    5e2c:	97 30       	cpi	r25, 0x07	; 7
    5e2e:	a8 f2       	brcs	.-86     	; 0x5dda <Endpoint_ConfigureEndpoint_Prv+0x4>
    5e30:	8f 70       	andi	r24, 0x0F	; 15
    5e32:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    5e36:	81 e0       	ldi	r24, 0x01	; 1
    5e38:	08 95       	ret
    5e3a:	80 e0       	ldi	r24, 0x00	; 0
    5e3c:	08 95       	ret

00005e3e <Endpoint_ConfigureEndpointTable>:
    5e3e:	0f 93       	push	r16
    5e40:	1f 93       	push	r17
    5e42:	cf 93       	push	r28
    5e44:	df 93       	push	r29
    5e46:	ec 01       	movw	r28, r24
    5e48:	06 2f       	mov	r16, r22
    5e4a:	10 e0       	ldi	r17, 0x00	; 0
    5e4c:	36 c0       	rjmp	.+108    	; 0x5eba <Endpoint_ConfigureEndpointTable+0x7c>
    5e4e:	e1 2f       	mov	r30, r17
    5e50:	f0 e0       	ldi	r31, 0x00	; 0
    5e52:	cf 01       	movw	r24, r30
    5e54:	88 0f       	add	r24, r24
    5e56:	99 1f       	adc	r25, r25
    5e58:	88 0f       	add	r24, r24
    5e5a:	99 1f       	adc	r25, r25
    5e5c:	e8 0f       	add	r30, r24
    5e5e:	f9 1f       	adc	r31, r25
    5e60:	ec 0f       	add	r30, r28
    5e62:	fd 1f       	adc	r31, r29
    5e64:	50 81       	ld	r21, Z
    5e66:	55 23       	and	r21, r21
    5e68:	39 f1       	breq	.+78     	; 0x5eb8 <Endpoint_ConfigureEndpointTable+0x7a>
    5e6a:	94 81       	ldd	r25, Z+4	; 0x04
    5e6c:	a1 81       	ldd	r26, Z+1	; 0x01
    5e6e:	b2 81       	ldd	r27, Z+2	; 0x02
    5e70:	63 81       	ldd	r22, Z+3	; 0x03
    5e72:	85 2f       	mov	r24, r21
    5e74:	8f 70       	andi	r24, 0x0F	; 15
    5e76:	87 30       	cpi	r24, 0x07	; 7
    5e78:	e0 f4       	brcc	.+56     	; 0x5eb2 <Endpoint_ConfigureEndpointTable+0x74>
    5e7a:	92 30       	cpi	r25, 0x02	; 2
    5e7c:	10 f0       	brcs	.+4      	; 0x5e82 <Endpoint_ConfigureEndpointTable+0x44>
    5e7e:	46 e0       	ldi	r20, 0x06	; 6
    5e80:	01 c0       	rjmp	.+2      	; 0x5e84 <Endpoint_ConfigureEndpointTable+0x46>
    5e82:	42 e0       	ldi	r20, 0x02	; 2
    5e84:	28 e0       	ldi	r18, 0x08	; 8
    5e86:	30 e0       	ldi	r19, 0x00	; 0
    5e88:	90 e0       	ldi	r25, 0x00	; 0
    5e8a:	03 c0       	rjmp	.+6      	; 0x5e92 <Endpoint_ConfigureEndpointTable+0x54>
    5e8c:	9f 5f       	subi	r25, 0xFF	; 255
    5e8e:	22 0f       	add	r18, r18
    5e90:	33 1f       	adc	r19, r19
    5e92:	2a 17       	cp	r18, r26
    5e94:	3b 07       	cpc	r19, r27
    5e96:	d0 f3       	brcs	.-12     	; 0x5e8c <Endpoint_ConfigureEndpointTable+0x4e>
    5e98:	92 95       	swap	r25
    5e9a:	90 7f       	andi	r25, 0xF0	; 240
    5e9c:	20 e4       	ldi	r18, 0x40	; 64
    5e9e:	62 9f       	mul	r22, r18
    5ea0:	b0 01       	movw	r22, r0
    5ea2:	11 24       	eor	r1, r1
    5ea4:	55 1f       	adc	r21, r21
    5ea6:	55 27       	eor	r21, r21
    5ea8:	55 1f       	adc	r21, r21
    5eaa:	49 2b       	or	r20, r25
    5eac:	65 2b       	or	r22, r21
    5eae:	93 df       	rcall	.-218    	; 0x5dd6 <Endpoint_ConfigureEndpoint_Prv>
    5eb0:	01 c0       	rjmp	.+2      	; 0x5eb4 <Endpoint_ConfigureEndpointTable+0x76>
    5eb2:	80 e0       	ldi	r24, 0x00	; 0
    5eb4:	88 23       	and	r24, r24
    5eb6:	21 f0       	breq	.+8      	; 0x5ec0 <Endpoint_ConfigureEndpointTable+0x82>
    5eb8:	1f 5f       	subi	r17, 0xFF	; 255
    5eba:	10 17       	cp	r17, r16
    5ebc:	40 f2       	brcs	.-112    	; 0x5e4e <Endpoint_ConfigureEndpointTable+0x10>
    5ebe:	81 e0       	ldi	r24, 0x01	; 1
    5ec0:	df 91       	pop	r29
    5ec2:	cf 91       	pop	r28
    5ec4:	1f 91       	pop	r17
    5ec6:	0f 91       	pop	r16
    5ec8:	08 95       	ret

00005eca <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    5eca:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <USB_ControlRequest>
    5ece:	88 23       	and	r24, r24
    5ed0:	9c f4       	brge	.+38     	; 0x5ef8 <Endpoint_ClearStatusStage+0x2e>
    5ed2:	04 c0       	rjmp	.+8      	; 0x5edc <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    5ed4:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <USB_DeviceState>
    5ed8:	88 23       	and	r24, r24
    5eda:	b9 f0       	breq	.+46     	; 0x5f0a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5edc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    5ee0:	82 ff       	sbrs	r24, 2
    5ee2:	f8 cf       	rjmp	.-16     	; 0x5ed4 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5ee4:	e8 ee       	ldi	r30, 0xE8	; 232
    5ee6:	f0 e0       	ldi	r31, 0x00	; 0
    5ee8:	80 81       	ld	r24, Z
    5eea:	8b 77       	andi	r24, 0x7B	; 123
    5eec:	80 83       	st	Z, r24
    5eee:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    5ef0:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <USB_DeviceState>
    5ef4:	88 23       	and	r24, r24
    5ef6:	49 f0       	breq	.+18     	; 0x5f0a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5ef8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    5efc:	80 ff       	sbrs	r24, 0
    5efe:	f8 cf       	rjmp	.-16     	; 0x5ef0 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5f00:	e8 ee       	ldi	r30, 0xE8	; 232
    5f02:	f0 e0       	ldi	r31, 0x00	; 0
    5f04:	80 81       	ld	r24, Z
    5f06:	8e 77       	andi	r24, 0x7E	; 126
    5f08:	80 83       	st	Z, r24
    5f0a:	08 95       	ret

00005f0c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    5f0c:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    5f10:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    5f14:	44 e6       	ldi	r20, 0x64	; 100
    5f16:	02 c0       	rjmp	.+4      	; 0x5f1c <Endpoint_WaitUntilReady+0x10>

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;
    5f18:	9c 01       	movw	r18, r24

			if (!(TimeoutMSRem--))
    5f1a:	45 2f       	mov	r20, r21
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    5f1c:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    5f20:	98 2f       	mov	r25, r24
    5f22:	91 70       	andi	r25, 0x01	; 1
    5f24:	80 fd       	sbrc	r24, 0
    5f26:	90 e8       	ldi	r25, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    5f28:	90 38       	cpi	r25, 0x80	; 128
    5f2a:	29 f4       	brne	.+10     	; 0x5f36 <Endpoint_WaitUntilReady+0x2a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5f2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		{
			if (Endpoint_IsINReady())
    5f30:	80 ff       	sbrs	r24, 0
    5f32:	05 c0       	rjmp	.+10     	; 0x5f3e <Endpoint_WaitUntilReady+0x32>
    5f34:	1b c0       	rjmp	.+54     	; 0x5f6c <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5f36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    5f3a:	82 fd       	sbrc	r24, 2
    5f3c:	19 c0       	rjmp	.+50     	; 0x5f70 <Endpoint_WaitUntilReady+0x64>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    5f3e:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    5f42:	88 23       	and	r24, r24
    5f44:	b9 f0       	breq	.+46     	; 0x5f74 <Endpoint_WaitUntilReady+0x68>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    5f46:	85 30       	cpi	r24, 0x05	; 5
    5f48:	b9 f0       	breq	.+46     	; 0x5f78 <Endpoint_WaitUntilReady+0x6c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    5f4a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    5f4e:	85 fd       	sbrc	r24, 5
    5f50:	15 c0       	rjmp	.+42     	; 0x5f7c <Endpoint_WaitUntilReady+0x70>
    5f52:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    5f56:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    5f5a:	28 17       	cp	r18, r24
    5f5c:	39 07       	cpc	r19, r25
    5f5e:	f1 f2       	breq	.-68     	; 0x5f1c <Endpoint_WaitUntilReady+0x10>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    5f60:	5f ef       	ldi	r21, 0xFF	; 255
    5f62:	54 0f       	add	r21, r20
    5f64:	41 11       	cpse	r20, r1
    5f66:	d8 cf       	rjmp	.-80     	; 0x5f18 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
    5f68:	84 e0       	ldi	r24, 0x04	; 4
    5f6a:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    5f6c:	80 e0       	ldi	r24, 0x00	; 0
    5f6e:	08 95       	ret
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    5f70:	80 e0       	ldi	r24, 0x00	; 0
    5f72:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    5f74:	82 e0       	ldi	r24, 0x02	; 2
    5f76:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    5f78:	83 e0       	ldi	r24, 0x03	; 3
    5f7a:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    5f7c:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    5f7e:	08 95       	ret

00005f80 <USB_Init_Device>:

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    5f80:	cf 93       	push	r28
    5f82:	df 93       	push	r29
    5f84:	10 92 3f 0d 	sts	0x0D3F, r1	; 0x800d3f <USB_DeviceState>
    5f88:	10 92 3b 0d 	sts	0x0D3B, r1	; 0x800d3b <USB_Device_ConfigurationNumber>
    5f8c:	10 92 3d 0d 	sts	0x0D3D, r1	; 0x800d3d <USB_Device_RemoteWakeupEnabled>
    5f90:	10 92 3c 0d 	sts	0x0D3C, r1	; 0x800d3c <USB_Device_CurrentlySelfPowered>
    5f94:	c0 ee       	ldi	r28, 0xE0	; 224
    5f96:	d0 e0       	ldi	r29, 0x00	; 0
    5f98:	88 81       	ld	r24, Y
    5f9a:	8b 7f       	andi	r24, 0xFB	; 251
    5f9c:	88 83       	st	Y, r24
    5f9e:	e8 ed       	ldi	r30, 0xD8	; 216
    5fa0:	f0 e0       	ldi	r31, 0x00	; 0
    5fa2:	80 81       	ld	r24, Z
    5fa4:	81 60       	ori	r24, 0x01	; 1
    5fa6:	80 83       	st	Z, r24
    5fa8:	42 e0       	ldi	r20, 0x02	; 2
    5faa:	60 e0       	ldi	r22, 0x00	; 0
    5fac:	80 e0       	ldi	r24, 0x00	; 0
    5fae:	13 df       	rcall	.-474    	; 0x5dd6 <Endpoint_ConfigureEndpoint_Prv>
    5fb0:	e1 ee       	ldi	r30, 0xE1	; 225
    5fb2:	f0 e0       	ldi	r31, 0x00	; 0
    5fb4:	80 81       	ld	r24, Z
    5fb6:	8e 7f       	andi	r24, 0xFE	; 254
    5fb8:	80 83       	st	Z, r24
    5fba:	e2 ee       	ldi	r30, 0xE2	; 226
    5fbc:	f0 e0       	ldi	r31, 0x00	; 0
    5fbe:	80 81       	ld	r24, Z
    5fc0:	81 60       	ori	r24, 0x01	; 1
    5fc2:	80 83       	st	Z, r24
    5fc4:	80 81       	ld	r24, Z
    5fc6:	88 60       	ori	r24, 0x08	; 8
    5fc8:	80 83       	st	Z, r24
    5fca:	88 81       	ld	r24, Y
    5fcc:	8e 7f       	andi	r24, 0xFE	; 254
    5fce:	88 83       	st	Y, r24
    5fd0:	df 91       	pop	r29
    5fd2:	cf 91       	pop	r28
    5fd4:	08 95       	ret

00005fd6 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    5fd6:	cf 93       	push	r28
    5fd8:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    5fda:	28 d0       	rcall	.+80     	; 0x602c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    5fdc:	2f d0       	rcall	.+94     	; 0x603c <USB_INT_ClearAllInterrupts>
    5fde:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    5fe0:	d0 e0       	ldi	r29, 0x00	; 0
    5fe2:	88 81       	ld	r24, Y
    5fe4:	8f 77       	andi	r24, 0x7F	; 127
    5fe6:	88 83       	st	Y, r24
    5fe8:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    5fea:	80 68       	ori	r24, 0x80	; 128
    5fec:	88 83       	st	Y, r24
    5fee:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    5ff0:	8f 7d       	andi	r24, 0xDF	; 223
    5ff2:	88 83       	st	Y, r24
    5ff4:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    5ff6:	f0 e0       	ldi	r31, 0x00	; 0
    5ff8:	80 81       	ld	r24, Z
    5ffa:	80 68       	ori	r24, 0x80	; 128
    5ffc:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    5ffe:	19 bc       	out	0x29, r1	; 41
			#else
			USB_PLL_Off();
			#endif
		}

		USB_Init_Device();
    6000:	bf df       	rcall	.-130    	; 0x5f80 <USB_Init_Device>
    6002:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    6004:	80 61       	ori	r24, 0x10	; 16
    6006:	88 83       	st	Y, r24
    6008:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    600a:	cf 91       	pop	r28
    600c:	08 95       	ret

0000600e <USB_Init>:
    600e:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    6010:	f0 e0       	ldi	r31, 0x00	; 0
    6012:	80 81       	ld	r24, Z
    6014:	8f 7e       	andi	r24, 0xEF	; 239
    6016:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    6018:	e7 ed       	ldi	r30, 0xD7	; 215
    601a:	f0 e0       	ldi	r31, 0x00	; 0
    601c:	80 81       	ld	r24, Z
    601e:	81 60       	ori	r24, 0x01	; 1
    6020:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    6022:	81 e0       	ldi	r24, 0x01	; 1
    6024:	80 93 3e 0d 	sts	0x0D3E, r24	; 0x800d3e <USB_IsInitialized>

	USB_ResetInterface();
    6028:	d6 cf       	rjmp	.-84     	; 0x5fd6 <USB_ResetInterface>
    602a:	08 95       	ret

0000602c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    602c:	e8 ed       	ldi	r30, 0xD8	; 216
    602e:	f0 e0       	ldi	r31, 0x00	; 0
    6030:	80 81       	ld	r24, Z
    6032:	8c 7f       	andi	r24, 0xFC	; 252
    6034:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    6036:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    603a:	08 95       	ret

0000603c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    603c:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    6040:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    6044:	08 95       	ret

00006046 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    6046:	1f 92       	push	r1
    6048:	0f 92       	push	r0
    604a:	0f b6       	in	r0, 0x3f	; 63
    604c:	0f 92       	push	r0
    604e:	11 24       	eor	r1, r1
    6050:	0b b6       	in	r0, 0x3b	; 59
    6052:	0f 92       	push	r0
    6054:	2f 93       	push	r18
    6056:	3f 93       	push	r19
    6058:	4f 93       	push	r20
    605a:	5f 93       	push	r21
    605c:	6f 93       	push	r22
    605e:	7f 93       	push	r23
    6060:	8f 93       	push	r24
    6062:	9f 93       	push	r25
    6064:	af 93       	push	r26
    6066:	bf 93       	push	r27
    6068:	ef 93       	push	r30
    606a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    606c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    6070:	82 ff       	sbrs	r24, 2
    6072:	0b c0       	rjmp	.+22     	; 0x608a <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    6074:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    6078:	82 ff       	sbrs	r24, 2
    607a:	07 c0       	rjmp	.+14     	; 0x608a <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    607c:	e1 ee       	ldi	r30, 0xE1	; 225
    607e:	f0 e0       	ldi	r31, 0x00	; 0
    6080:	80 81       	ld	r24, Z
    6082:	8b 7f       	andi	r24, 0xFB	; 251
    6084:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    6086:	0e 94 56 1a 	call	0x34ac	; 0x34ac <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    608a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    608e:	80 ff       	sbrs	r24, 0
    6090:	1f c0       	rjmp	.+62     	; 0x60d0 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    6092:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    6096:	80 ff       	sbrs	r24, 0
    6098:	1b c0       	rjmp	.+54     	; 0x60d0 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    609a:	ea ed       	ldi	r30, 0xDA	; 218
    609c:	f0 e0       	ldi	r31, 0x00	; 0
    609e:	80 81       	ld	r24, Z
    60a0:	8e 7f       	andi	r24, 0xFE	; 254
    60a2:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    60a4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    60a8:	80 ff       	sbrs	r24, 0
    60aa:	0d c0       	rjmp	.+26     	; 0x60c6 <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    60ac:	84 e1       	ldi	r24, 0x14	; 20
    60ae:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    60b0:	86 e1       	ldi	r24, 0x16	; 22
    60b2:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    60b4:	09 b4       	in	r0, 0x29	; 41
    60b6:	00 fe       	sbrs	r0, 0
    60b8:	fd cf       	rjmp	.-6      	; 0x60b4 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    60ba:	81 e0       	ldi	r24, 0x01	; 1
    60bc:	80 93 3f 0d 	sts	0x0D3F, r24	; 0x800d3f <USB_DeviceState>
			EVENT_USB_Device_Connect();
    60c0:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <EVENT_USB_Device_Connect>
    60c4:	05 c0       	rjmp	.+10     	; 0x60d0 <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    60c6:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    60c8:	10 92 3f 0d 	sts	0x0D3F, r1	; 0x800d3f <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    60cc:	0e 94 e6 19 	call	0x33cc	; 0x33cc <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    60d0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    60d4:	80 ff       	sbrs	r24, 0
    60d6:	16 c0       	rjmp	.+44     	; 0x6104 <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    60d8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    60dc:	80 ff       	sbrs	r24, 0
    60de:	12 c0       	rjmp	.+36     	; 0x6104 <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    60e0:	e2 ee       	ldi	r30, 0xE2	; 226
    60e2:	f0 e0       	ldi	r31, 0x00	; 0
    60e4:	80 81       	ld	r24, Z
    60e6:	8e 7f       	andi	r24, 0xFE	; 254
    60e8:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    60ea:	80 81       	ld	r24, Z
    60ec:	80 61       	ori	r24, 0x10	; 16
    60ee:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    60f0:	e8 ed       	ldi	r30, 0xD8	; 216
    60f2:	f0 e0       	ldi	r31, 0x00	; 0
    60f4:	80 81       	ld	r24, Z
    60f6:	80 62       	ori	r24, 0x20	; 32
    60f8:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    60fa:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    60fc:	85 e0       	ldi	r24, 0x05	; 5
    60fe:	80 93 3f 0d 	sts	0x0D3F, r24	; 0x800d3f <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    6102:	6d d2       	rcall	.+1242   	; 0x65de <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    6104:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    6108:	84 ff       	sbrs	r24, 4
    610a:	2f c0       	rjmp	.+94     	; 0x616a <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    610c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    6110:	84 ff       	sbrs	r24, 4
    6112:	2b c0       	rjmp	.+86     	; 0x616a <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    6114:	84 e1       	ldi	r24, 0x14	; 20
    6116:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    6118:	86 e1       	ldi	r24, 0x16	; 22
    611a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    611c:	09 b4       	in	r0, 0x29	; 41
    611e:	00 fe       	sbrs	r0, 0
    6120:	fd cf       	rjmp	.-6      	; 0x611c <__vector_10+0xd6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    6122:	e8 ed       	ldi	r30, 0xD8	; 216
    6124:	f0 e0       	ldi	r31, 0x00	; 0
    6126:	80 81       	ld	r24, Z
    6128:	8f 7d       	andi	r24, 0xDF	; 223
    612a:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    612c:	e1 ee       	ldi	r30, 0xE1	; 225
    612e:	f0 e0       	ldi	r31, 0x00	; 0
    6130:	80 81       	ld	r24, Z
    6132:	8f 7e       	andi	r24, 0xEF	; 239
    6134:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    6136:	e2 ee       	ldi	r30, 0xE2	; 226
    6138:	f0 e0       	ldi	r31, 0x00	; 0
    613a:	80 81       	ld	r24, Z
    613c:	8f 7e       	andi	r24, 0xEF	; 239
    613e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    6140:	80 81       	ld	r24, Z
    6142:	81 60       	ori	r24, 0x01	; 1
    6144:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    6146:	80 91 3b 0d 	lds	r24, 0x0D3B	; 0x800d3b <USB_Device_ConfigurationNumber>
    614a:	88 23       	and	r24, r24
    614c:	21 f0       	breq	.+8      	; 0x6156 <__vector_10+0x110>
		  USB_DeviceState = DEVICE_STATE_Configured;
    614e:	84 e0       	ldi	r24, 0x04	; 4
    6150:	80 93 3f 0d 	sts	0x0D3F, r24	; 0x800d3f <USB_DeviceState>
    6154:	09 c0       	rjmp	.+18     	; 0x6168 <__vector_10+0x122>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    6156:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    615a:	88 23       	and	r24, r24
    615c:	14 f4       	brge	.+4      	; 0x6162 <__vector_10+0x11c>
    615e:	83 e0       	ldi	r24, 0x03	; 3
    6160:	01 c0       	rjmp	.+2      	; 0x6164 <__vector_10+0x11e>
    6162:	81 e0       	ldi	r24, 0x01	; 1
    6164:	80 93 3f 0d 	sts	0x0D3F, r24	; 0x800d3f <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    6168:	3a d2       	rcall	.+1140   	; 0x65de <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    616a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    616e:	83 ff       	sbrs	r24, 3
    6170:	23 c0       	rjmp	.+70     	; 0x61b8 <__vector_10+0x172>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    6172:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    6176:	83 ff       	sbrs	r24, 3
    6178:	1f c0       	rjmp	.+62     	; 0x61b8 <__vector_10+0x172>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    617a:	e1 ee       	ldi	r30, 0xE1	; 225
    617c:	f0 e0       	ldi	r31, 0x00	; 0
    617e:	80 81       	ld	r24, Z
    6180:	87 7f       	andi	r24, 0xF7	; 247
    6182:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    6184:	82 e0       	ldi	r24, 0x02	; 2
    6186:	80 93 3f 0d 	sts	0x0D3F, r24	; 0x800d3f <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    618a:	10 92 3b 0d 	sts	0x0D3B, r1	; 0x800d3b <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    618e:	80 81       	ld	r24, Z
    6190:	8e 7f       	andi	r24, 0xFE	; 254
    6192:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    6194:	e2 ee       	ldi	r30, 0xE2	; 226
    6196:	f0 e0       	ldi	r31, 0x00	; 0
    6198:	80 81       	ld	r24, Z
    619a:	8e 7f       	andi	r24, 0xFE	; 254
    619c:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    619e:	80 81       	ld	r24, Z
    61a0:	80 61       	ori	r24, 0x10	; 16
    61a2:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    61a4:	42 e0       	ldi	r20, 0x02	; 2
    61a6:	60 e0       	ldi	r22, 0x00	; 0
    61a8:	80 e0       	ldi	r24, 0x00	; 0
    61aa:	15 de       	rcall	.-982    	; 0x5dd6 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    61ac:	e0 ef       	ldi	r30, 0xF0	; 240
    61ae:	f0 e0       	ldi	r31, 0x00	; 0
    61b0:	80 81       	ld	r24, Z
    61b2:	88 60       	ori	r24, 0x08	; 8

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    61b4:	80 83       	st	Z, r24
    61b6:	13 d2       	rcall	.+1062   	; 0x65de <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    61b8:	ff 91       	pop	r31
    61ba:	ef 91       	pop	r30
    61bc:	bf 91       	pop	r27
    61be:	af 91       	pop	r26
    61c0:	9f 91       	pop	r25
    61c2:	8f 91       	pop	r24
    61c4:	7f 91       	pop	r23
    61c6:	6f 91       	pop	r22
    61c8:	5f 91       	pop	r21
    61ca:	4f 91       	pop	r20
    61cc:	3f 91       	pop	r19
    61ce:	2f 91       	pop	r18
    61d0:	0f 90       	pop	r0
    61d2:	0b be       	out	0x3b, r0	; 59
    61d4:	0f 90       	pop	r0
    61d6:	0f be       	out	0x3f, r0	; 63
    61d8:	0f 90       	pop	r0
    61da:	1f 90       	pop	r1
    61dc:	18 95       	reti

000061de <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    61de:	1f 92       	push	r1
    61e0:	0f 92       	push	r0
    61e2:	0f b6       	in	r0, 0x3f	; 63
    61e4:	0f 92       	push	r0
    61e6:	11 24       	eor	r1, r1
    61e8:	0b b6       	in	r0, 0x3b	; 59
    61ea:	0f 92       	push	r0
    61ec:	ef 92       	push	r14
    61ee:	ff 92       	push	r15
    61f0:	1f 93       	push	r17
    61f2:	2f 93       	push	r18
    61f4:	3f 93       	push	r19
    61f6:	4f 93       	push	r20
    61f8:	5f 93       	push	r21
    61fa:	6f 93       	push	r22
    61fc:	7f 93       	push	r23
    61fe:	8f 93       	push	r24
    6200:	9f 93       	push	r25
    6202:	af 93       	push	r26
    6204:	bf 93       	push	r27
    6206:	cf 93       	push	r28
    6208:	df 93       	push	r29
    620a:	ef 93       	push	r30
    620c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    620e:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    6212:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    6214:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    6218:	98 2f       	mov	r25, r24
    621a:	91 70       	andi	r25, 0x01	; 1
    621c:	80 fd       	sbrc	r24, 0
    621e:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    6220:	19 2f       	mov	r17, r25
    6222:	1c 2b       	or	r17, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6224:	0f 2e       	mov	r0, r31
    6226:	f9 ee       	ldi	r31, 0xE9	; 233
    6228:	ef 2e       	mov	r14, r31
    622a:	f1 2c       	mov	r15, r1
    622c:	f0 2d       	mov	r31, r0
    622e:	f7 01       	movw	r30, r14
    6230:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    6232:	c0 ef       	ldi	r28, 0xF0	; 240
    6234:	d0 e0       	ldi	r29, 0x00	; 0
    6236:	88 81       	ld	r24, Y
    6238:	87 7f       	andi	r24, 0xF7	; 247
    623a:	88 83       	st	Y, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    623c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    623e:	7f d1       	rcall	.+766    	; 0x653e <USB_Device_ProcessControlRequest>
    6240:	f7 01       	movw	r30, r14
    6242:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    6244:	88 81       	ld	r24, Y
    6246:	88 60       	ori	r24, 0x08	; 8
    6248:	88 83       	st	Y, r24
    624a:	c1 2f       	mov	r28, r17
    624c:	cf 70       	andi	r28, 0x0F	; 15
    624e:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    6250:	ff 91       	pop	r31
    6252:	ef 91       	pop	r30
    6254:	df 91       	pop	r29
    6256:	cf 91       	pop	r28
    6258:	bf 91       	pop	r27
    625a:	af 91       	pop	r26
    625c:	9f 91       	pop	r25
    625e:	8f 91       	pop	r24
    6260:	7f 91       	pop	r23
    6262:	6f 91       	pop	r22
    6264:	5f 91       	pop	r21
    6266:	4f 91       	pop	r20
    6268:	3f 91       	pop	r19
    626a:	2f 91       	pop	r18
    626c:	1f 91       	pop	r17
    626e:	ff 90       	pop	r15
    6270:	ef 90       	pop	r14
    6272:	0f 90       	pop	r0
    6274:	0b be       	out	0x3b, r0	; 59
    6276:	0f 90       	pop	r0
    6278:	0f be       	out	0x3f, r0	; 63
    627a:	0f 90       	pop	r0
    627c:	1f 90       	pop	r1
    627e:	18 95       	reti

00006280 <USB_Device_GetStatus>:

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;

	switch (USB_ControlRequest.bmRequestType)
    6280:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <USB_ControlRequest>
    6284:	80 38       	cpi	r24, 0x80	; 128
    6286:	19 f0       	breq	.+6      	; 0x628e <USB_Device_GetStatus+0xe>
    6288:	82 38       	cpi	r24, 0x82	; 130
    628a:	71 f0       	breq	.+28     	; 0x62a8 <USB_Device_GetStatus+0x28>
    628c:	08 95       	ret
	{
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
		{
			#if !defined(NO_DEVICE_SELF_POWER)
			if (USB_Device_CurrentlySelfPowered)
    628e:	80 91 3c 0d 	lds	r24, 0x0D3C	; 0x800d3c <USB_Device_CurrentlySelfPowered>
    6292:	81 11       	cpse	r24, r1
    6294:	02 c0       	rjmp	.+4      	; 0x629a <USB_Device_GetStatus+0x1a>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    6296:	90 e0       	ldi	r25, 0x00	; 0
    6298:	01 c0       	rjmp	.+2      	; 0x629c <USB_Device_GetStatus+0x1c>
	{
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
		{
			#if !defined(NO_DEVICE_SELF_POWER)
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
    629a:	91 e0       	ldi	r25, 0x01	; 1
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    629c:	80 91 3d 0d 	lds	r24, 0x0D3D	; 0x800d3d <USB_Device_RemoteWakeupEnabled>
    62a0:	88 23       	and	r24, r24
    62a2:	81 f0       	breq	.+32     	; 0x62c4 <USB_Device_GetStatus+0x44>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    62a4:	92 60       	ori	r25, 0x02	; 2
    62a6:	0e c0       	rjmp	.+28     	; 0x62c4 <USB_Device_GetStatus+0x44>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    62a8:	80 91 44 0d 	lds	r24, 0x0D44	; 0x800d44 <USB_ControlRequest+0x4>
    62ac:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    62ae:	87 30       	cpi	r24, 0x07	; 7
    62b0:	b0 f4       	brcc	.+44     	; 0x62de <USB_Device_GetStatus+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    62b2:	e9 ee       	ldi	r30, 0xE9	; 233
    62b4:	f0 e0       	ldi	r31, 0x00	; 0
    62b6:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    62b8:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    62bc:	95 fb       	bst	r25, 5
    62be:	99 27       	eor	r25, r25
    62c0:	90 f9       	bld	r25, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    62c2:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    62c4:	e8 ee       	ldi	r30, 0xE8	; 232
    62c6:	f0 e0       	ldi	r31, 0x00	; 0
    62c8:	80 81       	ld	r24, Z
    62ca:	87 7f       	andi	r24, 0xF7	; 247
    62cc:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    62ce:	a1 ef       	ldi	r26, 0xF1	; 241
    62d0:	b0 e0       	ldi	r27, 0x00	; 0
    62d2:	9c 93       	st	X, r25
				UEDATX = (Data >> 8);
    62d4:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    62d6:	80 81       	ld	r24, Z
    62d8:	8e 77       	andi	r24, 0x7E	; 126
    62da:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    62dc:	f6 cd       	rjmp	.-1044   	; 0x5eca <Endpoint_ClearStatusStage>
    62de:	08 95       	ret

000062e0 <USB_Device_ClearSetFeature>:
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    62e0:	80 91 40 0d 	lds	r24, 0x0D40	; 0x800d40 <USB_ControlRequest>
    62e4:	8f 71       	andi	r24, 0x1F	; 31
    62e6:	19 f0       	breq	.+6      	; 0x62ee <USB_Device_ClearSetFeature+0xe>
    62e8:	82 30       	cpi	r24, 0x02	; 2
    62ea:	71 f0       	breq	.+28     	; 0x6308 <USB_Device_ClearSetFeature+0x28>
    62ec:	08 95       	ret
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    62ee:	80 91 42 0d 	lds	r24, 0x0D42	; 0x800d42 <USB_ControlRequest+0x2>
    62f2:	81 30       	cpi	r24, 0x01	; 1
    62f4:	09 f0       	breq	.+2      	; 0x62f8 <USB_Device_ClearSetFeature+0x18>
    62f6:	3f c0       	rjmp	.+126    	; 0x6376 <USB_Device_ClearSetFeature+0x96>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    62f8:	90 91 41 0d 	lds	r25, 0x0D41	; 0x800d41 <USB_ControlRequest+0x1>
    62fc:	93 30       	cpi	r25, 0x03	; 3
    62fe:	09 f0       	breq	.+2      	; 0x6302 <USB_Device_ClearSetFeature+0x22>
    6300:	80 e0       	ldi	r24, 0x00	; 0
    6302:	80 93 3d 0d 	sts	0x0D3D, r24	; 0x800d3d <USB_Device_RemoteWakeupEnabled>
			else
			  return;

			break;
    6306:	2f c0       	rjmp	.+94     	; 0x6366 <USB_Device_ClearSetFeature+0x86>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    6308:	80 91 42 0d 	lds	r24, 0x0D42	; 0x800d42 <USB_ControlRequest+0x2>
    630c:	81 11       	cpse	r24, r1
    630e:	2b c0       	rjmp	.+86     	; 0x6366 <USB_Device_ClearSetFeature+0x86>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    6310:	80 91 44 0d 	lds	r24, 0x0D44	; 0x800d44 <USB_ControlRequest+0x4>
    6314:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    6316:	9f ef       	ldi	r25, 0xFF	; 255
    6318:	98 0f       	add	r25, r24
    631a:	96 30       	cpi	r25, 0x06	; 6
    631c:	60 f5       	brcc	.+88     	; 0x6376 <USB_Device_ClearSetFeature+0x96>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    631e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    6322:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    6326:	90 ff       	sbrs	r25, 0
    6328:	1e c0       	rjmp	.+60     	; 0x6366 <USB_Device_ClearSetFeature+0x86>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    632a:	90 91 41 0d 	lds	r25, 0x0D41	; 0x800d41 <USB_ControlRequest+0x1>
    632e:	93 30       	cpi	r25, 0x03	; 3
    6330:	31 f4       	brne	.+12     	; 0x633e <USB_Device_ClearSetFeature+0x5e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    6332:	eb ee       	ldi	r30, 0xEB	; 235
    6334:	f0 e0       	ldi	r31, 0x00	; 0
    6336:	80 81       	ld	r24, Z
    6338:	80 62       	ori	r24, 0x20	; 32
    633a:	80 83       	st	Z, r24
    633c:	14 c0       	rjmp	.+40     	; 0x6366 <USB_Device_ClearSetFeature+0x86>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    633e:	eb ee       	ldi	r30, 0xEB	; 235
    6340:	f0 e0       	ldi	r31, 0x00	; 0
    6342:	90 81       	ld	r25, Z
    6344:	90 61       	ori	r25, 0x10	; 16
    6346:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    6348:	21 e0       	ldi	r18, 0x01	; 1
    634a:	30 e0       	ldi	r19, 0x00	; 0
    634c:	a9 01       	movw	r20, r18
    634e:	02 c0       	rjmp	.+4      	; 0x6354 <USB_Device_ClearSetFeature+0x74>
    6350:	44 0f       	add	r20, r20
    6352:	55 1f       	adc	r21, r21
    6354:	8a 95       	dec	r24
    6356:	e2 f7       	brpl	.-8      	; 0x6350 <USB_Device_ClearSetFeature+0x70>
    6358:	aa ee       	ldi	r26, 0xEA	; 234
    635a:	b0 e0       	ldi	r27, 0x00	; 0
    635c:	4c 93       	st	X, r20
				UERST = 0;
    635e:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    6360:	80 81       	ld	r24, Z
    6362:	88 60       	ori	r24, 0x08	; 8
    6364:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6366:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    636a:	e8 ee       	ldi	r30, 0xE8	; 232
    636c:	f0 e0       	ldi	r31, 0x00	; 0
    636e:	80 81       	ld	r24, Z
    6370:	87 7f       	andi	r24, 0xF7	; 247
    6372:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    6374:	aa cd       	rjmp	.-1196   	; 0x5eca <Endpoint_ClearStatusStage>
    6376:	08 95       	ret

00006378 <USB_Device_SetAddress>:
		Endpoint_StallTransaction();
	}
}

static void USB_Device_SetAddress(void)
{
    6378:	cf 93       	push	r28
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    637a:	c0 91 42 0d 	lds	r28, 0x0D42	; 0x800d42 <USB_ControlRequest+0x2>
    637e:	cf 77       	andi	r28, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    6380:	e3 ee       	ldi	r30, 0xE3	; 227
    6382:	f0 e0       	ldi	r31, 0x00	; 0
    6384:	80 81       	ld	r24, Z
    6386:	80 78       	andi	r24, 0x80	; 128
    6388:	8c 2b       	or	r24, r28
    638a:	80 83       	st	Z, r24
    638c:	e8 ee       	ldi	r30, 0xE8	; 232
    638e:	f0 e0       	ldi	r31, 0x00	; 0
    6390:	80 81       	ld	r24, Z
    6392:	87 7f       	andi	r24, 0xF7	; 247
    6394:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    6396:	99 dd       	rcall	.-1230   	; 0x5eca <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    6398:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    639c:	80 ff       	sbrs	r24, 0
    639e:	fc cf       	rjmp	.-8      	; 0x6398 <USB_Device_SetAddress+0x20>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    63a0:	e3 ee       	ldi	r30, 0xE3	; 227
    63a2:	f0 e0       	ldi	r31, 0x00	; 0
    63a4:	80 81       	ld	r24, Z
    63a6:	80 68       	ori	r24, 0x80	; 128
    63a8:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    63aa:	cc 23       	and	r28, r28
    63ac:	11 f0       	breq	.+4      	; 0x63b2 <USB_Device_SetAddress+0x3a>
    63ae:	83 e0       	ldi	r24, 0x03	; 3
    63b0:	01 c0       	rjmp	.+2      	; 0x63b4 <USB_Device_SetAddress+0x3c>
    63b2:	82 e0       	ldi	r24, 0x02	; 2
    63b4:	80 93 3f 0d 	sts	0x0D3F, r24	; 0x800d3f <USB_DeviceState>
}
    63b8:	cf 91       	pop	r28
    63ba:	08 95       	ret

000063bc <USB_Device_GetConfiguration>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    63bc:	e8 ee       	ldi	r30, 0xE8	; 232
    63be:	f0 e0       	ldi	r31, 0x00	; 0
    63c0:	80 81       	ld	r24, Z
    63c2:	87 7f       	andi	r24, 0xF7	; 247
    63c4:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    63c6:	80 91 3b 0d 	lds	r24, 0x0D3B	; 0x800d3b <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    63ca:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    63ce:	80 81       	ld	r24, Z
    63d0:	8e 77       	andi	r24, 0x7E	; 126
    63d2:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    63d4:	7a cd       	rjmp	.-1292   	; 0x5eca <Endpoint_ClearStatusStage>
    63d6:	08 95       	ret

000063d8 <USB_Device_GetInternalSerialDescriptor>:

extern void(*LUFA_DREG_HOOK_INTERNAL_SERIAL)(uint16_t* serial_str, size_t nr_elements);

#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
static void USB_Device_GetInternalSerialDescriptor(void)
{
    63d8:	0f 93       	push	r16
    63da:	1f 93       	push	r17
    63dc:	cf 93       	push	r28
    63de:	df 93       	push	r29
    63e0:	cd b7       	in	r28, 0x3d	; 61
    63e2:	de b7       	in	r29, 0x3e	; 62
    63e4:	aa 97       	sbiw	r28, 0x2a	; 42
    63e6:	0f b6       	in	r0, 0x3f	; 63
    63e8:	f8 94       	cli
    63ea:	de bf       	out	0x3e, r29	; 62
    63ec:	0f be       	out	0x3f, r0	; 63
    63ee:	cd bf       	out	0x3d, r28	; 61
    {
        USB_Descriptor_Header_t Header;
        uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
    } SignatureDescriptor;

    SignatureDescriptor.Header.Type = DTYPE_String;
    63f0:	83 e0       	ldi	r24, 0x03	; 3
    63f2:	8a 83       	std	Y+2, r24	; 0x02
    SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    63f4:	8a e2       	ldi	r24, 0x2A	; 42
    63f6:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    63f8:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    63fa:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    63fc:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    63fe:	2e e0       	ldi	r18, 0x0E	; 14
    6400:	20 c0       	rjmp	.+64     	; 0x6442 <USB_Device_GetInternalSerialDescriptor+0x6a>

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    6402:	e2 2f       	mov	r30, r18
    6404:	f0 e0       	ldi	r31, 0x00	; 0
    6406:	81 e2       	ldi	r24, 0x21	; 33
    6408:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    640c:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    640e:	90 ff       	sbrs	r25, 0
    6410:	03 c0       	rjmp	.+6      	; 0x6418 <USB_Device_GetInternalSerialDescriptor+0x40>
					{
						SerialByte >>= 4;
    6412:	e2 95       	swap	r30
    6414:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    6416:	2f 5f       	subi	r18, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    6418:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    641a:	a9 2f       	mov	r26, r25
    641c:	b0 e0       	ldi	r27, 0x00	; 0
    641e:	aa 0f       	add	r26, r26
    6420:	bb 1f       	adc	r27, r27
    6422:	43 e0       	ldi	r20, 0x03	; 3
    6424:	50 e0       	ldi	r21, 0x00	; 0
    6426:	4c 0f       	add	r20, r28
    6428:	5d 1f       	adc	r21, r29
    642a:	a4 0f       	add	r26, r20
    642c:	b5 1f       	adc	r27, r21
    642e:	ea 30       	cpi	r30, 0x0A	; 10
    6430:	18 f0       	brcs	.+6      	; 0x6438 <USB_Device_GetInternalSerialDescriptor+0x60>
    6432:	f0 e0       	ldi	r31, 0x00	; 0
    6434:	f7 96       	adiw	r30, 0x37	; 55
    6436:	02 c0       	rjmp	.+4      	; 0x643c <USB_Device_GetInternalSerialDescriptor+0x64>
    6438:	f0 e0       	ldi	r31, 0x00	; 0
    643a:	f0 96       	adiw	r30, 0x30	; 48
    643c:	ed 93       	st	X+, r30
    643e:	fc 93       	st	X, r31
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    6440:	9f 5f       	subi	r25, 0xFF	; 255
    6442:	94 31       	cpi	r25, 0x14	; 20
    6444:	f0 f2       	brcs	.-68     	; 0x6402 <USB_Device_GetInternalSerialDescriptor+0x2a>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    6446:	3f bf       	out	0x3f, r19	; 63

    USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

    if (NULL != LUFA_DREG_HOOK_INTERNAL_SERIAL)
    6448:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <LUFA_DREG_HOOK_INTERNAL_SERIAL>
    644c:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <LUFA_DREG_HOOK_INTERNAL_SERIAL+0x1>
    6450:	30 97       	sbiw	r30, 0x00	; 0
    6452:	29 f0       	breq	.+10     	; 0x645e <USB_Device_GetInternalSerialDescriptor+0x86>
    {
        LUFA_DREG_HOOK_INTERNAL_SERIAL(SignatureDescriptor.UnicodeString, INTERNAL_SERIAL_LENGTH_BITS / 4);
    6454:	64 e1       	ldi	r22, 0x14	; 20
    6456:	70 e0       	ldi	r23, 0x00	; 0
    6458:	ce 01       	movw	r24, r28
    645a:	03 96       	adiw	r24, 0x03	; 3
    645c:	09 95       	icall
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    645e:	08 ee       	ldi	r16, 0xE8	; 232
    6460:	10 e0       	ldi	r17, 0x00	; 0
    6462:	f8 01       	movw	r30, r16
    6464:	80 81       	ld	r24, Z
    6466:	87 7f       	andi	r24, 0xF7	; 247
    6468:	80 83       	st	Z, r24
    }
    
    Endpoint_ClearSETUP();

    Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    646a:	6a e2       	ldi	r22, 0x2A	; 42
    646c:	70 e0       	ldi	r23, 0x00	; 0
    646e:	ce 01       	movw	r24, r28
    6470:	01 96       	adiw	r24, 0x01	; 1
    6472:	02 dc       	rcall	.-2044   	; 0x5c78 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    6474:	f8 01       	movw	r30, r16
    6476:	80 81       	ld	r24, Z
    6478:	8b 77       	andi	r24, 0x7B	; 123
    647a:	80 83       	st	Z, r24
    Endpoint_ClearOUT();
}
    647c:	aa 96       	adiw	r28, 0x2a	; 42
    647e:	0f b6       	in	r0, 0x3f	; 63
    6480:	f8 94       	cli
    6482:	de bf       	out	0x3e, r29	; 62
    6484:	0f be       	out	0x3f, r0	; 63
    6486:	cd bf       	out	0x3d, r28	; 61
    6488:	df 91       	pop	r29
    648a:	cf 91       	pop	r28
    648c:	1f 91       	pop	r17
    648e:	0f 91       	pop	r16
    6490:	08 95       	ret

00006492 <USB_Device_GetDescriptor>:
#endif

static void USB_Device_GetDescriptor(void)
{
    6492:	0f 93       	push	r16
    6494:	1f 93       	push	r17
    6496:	cf 93       	push	r28
    6498:	df 93       	push	r29
    649a:	00 d0       	rcall	.+0      	; 0x649c <USB_Device_GetDescriptor+0xa>
    649c:	cd b7       	in	r28, 0x3d	; 61
    649e:	de b7       	in	r29, 0x3e	; 62
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    64a0:	80 91 42 0d 	lds	r24, 0x0D42	; 0x800d42 <USB_ControlRequest+0x2>
    64a4:	90 91 43 0d 	lds	r25, 0x0D43	; 0x800d43 <USB_ControlRequest+0x3>
    64a8:	8c 3d       	cpi	r24, 0xDC	; 220
    64aa:	23 e0       	ldi	r18, 0x03	; 3
    64ac:	92 07       	cpc	r25, r18
    64ae:	11 f4       	brne	.+4      	; 0x64b4 <USB_Device_GetDescriptor+0x22>
	{
		USB_Device_GetInternalSerialDescriptor();
    64b0:	93 df       	rcall	.-218    	; 0x63d8 <USB_Device_GetInternalSerialDescriptor>
		return;
    64b2:	19 c0       	rjmp	.+50     	; 0x64e6 <USB_Device_GetDescriptor+0x54>
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    64b4:	60 91 44 0d 	lds	r22, 0x0D44	; 0x800d44 <USB_ControlRequest+0x4>
    64b8:	70 91 45 0d 	lds	r23, 0x0D45	; 0x800d45 <USB_ControlRequest+0x5>
    64bc:	ae 01       	movw	r20, r28
    64be:	4f 5f       	subi	r20, 0xFF	; 255
    64c0:	5f 4f       	sbci	r21, 0xFF	; 255
    64c2:	0e 94 76 02 	call	0x4ec	; 0x4ec <CALLBACK_USB_GetDescriptor>
    64c6:	00 97       	sbiw	r24, 0x00	; 0
    64c8:	71 f0       	breq	.+28     	; 0x64e6 <USB_Device_GetDescriptor+0x54>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    64ca:	08 ee       	ldi	r16, 0xE8	; 232
    64cc:	10 e0       	ldi	r17, 0x00	; 0
    64ce:	f8 01       	movw	r30, r16
    64d0:	20 81       	ld	r18, Z
    64d2:	27 7f       	andi	r18, 0xF7	; 247
    64d4:	20 83       	st	Z, r18
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    64d6:	bc 01       	movw	r22, r24
    64d8:	89 81       	ldd	r24, Y+1	; 0x01
    64da:	9a 81       	ldd	r25, Y+2	; 0x02
    64dc:	cd db       	rcall	.-2150   	; 0x5c78 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    64de:	f8 01       	movw	r30, r16
    64e0:	80 81       	ld	r24, Z
    64e2:	8b 77       	andi	r24, 0x7B	; 123
    64e4:	80 83       	st	Z, r24
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
}
    64e6:	0f 90       	pop	r0
    64e8:	0f 90       	pop	r0
    64ea:	df 91       	pop	r29
    64ec:	cf 91       	pop	r28
    64ee:	1f 91       	pop	r17
    64f0:	0f 91       	pop	r16
    64f2:	08 95       	ret

000064f4 <USB_Device_SetConfiguration>:
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    64f4:	80 91 42 0d 	lds	r24, 0x0D42	; 0x800d42 <USB_ControlRequest+0x2>
    64f8:	90 91 43 0d 	lds	r25, 0x0D43	; 0x800d43 <USB_ControlRequest+0x3>
    64fc:	99 27       	eor	r25, r25
    64fe:	02 97       	sbiw	r24, 0x02	; 2
    6500:	ec f4       	brge	.+58     	; 0x653c <USB_Device_SetConfiguration+0x48>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    6502:	e8 ee       	ldi	r30, 0xE8	; 232
    6504:	f0 e0       	ldi	r31, 0x00	; 0
    6506:	80 81       	ld	r24, Z
    6508:	87 7f       	andi	r24, 0xF7	; 247
    650a:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    650c:	80 91 42 0d 	lds	r24, 0x0D42	; 0x800d42 <USB_ControlRequest+0x2>
    6510:	80 93 3b 0d 	sts	0x0D3B, r24	; 0x800d3b <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    6514:	da dc       	rcall	.-1612   	; 0x5eca <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    6516:	80 91 3b 0d 	lds	r24, 0x0D3B	; 0x800d3b <USB_Device_ConfigurationNumber>
    651a:	88 23       	and	r24, r24
    651c:	21 f0       	breq	.+8      	; 0x6526 <USB_Device_SetConfiguration+0x32>
	  USB_DeviceState = DEVICE_STATE_Configured;
    651e:	84 e0       	ldi	r24, 0x04	; 4
    6520:	80 93 3f 0d 	sts	0x0D3F, r24	; 0x800d3f <USB_DeviceState>
    6524:	09 c0       	rjmp	.+18     	; 0x6538 <USB_Device_SetConfiguration+0x44>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    6526:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    652a:	88 23       	and	r24, r24
    652c:	14 f4       	brge	.+4      	; 0x6532 <USB_Device_SetConfiguration+0x3e>
    652e:	84 e0       	ldi	r24, 0x04	; 4
    6530:	01 c0       	rjmp	.+2      	; 0x6534 <USB_Device_SetConfiguration+0x40>
    6532:	81 e0       	ldi	r24, 0x01	; 1
    6534:	80 93 3f 0d 	sts	0x0D3F, r24	; 0x800d3f <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    6538:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <EVENT_USB_Device_ConfigurationChanged>
    653c:	08 95       	ret

0000653e <USB_Device_ProcessControlRequest>:
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    653e:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    6540:	e0 e4       	ldi	r30, 0x40	; 64
    6542:	fd e0       	ldi	r31, 0x0D	; 13

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    6544:	05 c0       	rjmp	.+10     	; 0x6550 <USB_Device_ProcessControlRequest+0x12>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    6546:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	  *(RequestHeader++) = Endpoint_Read_8();
    654a:	90 83       	st	Z, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    654c:	8f 5f       	subi	r24, 0xFF	; 255
	  *(RequestHeader++) = Endpoint_Read_8();
    654e:	31 96       	adiw	r30, 0x01	; 1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    6550:	88 30       	cpi	r24, 0x08	; 8
    6552:	c8 f3       	brcs	.-14     	; 0x6546 <USB_Device_ProcessControlRequest+0x8>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    6554:	0e 94 1c 1a 	call	0x3438	; 0x3438 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    6558:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    655c:	83 ff       	sbrs	r24, 3
    655e:	30 c0       	rjmp	.+96     	; 0x65c0 <USB_Device_ProcessControlRequest+0x82>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    6560:	e0 e4       	ldi	r30, 0x40	; 64
    6562:	fd e0       	ldi	r31, 0x0D	; 13
    6564:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
    6566:	81 81       	ldd	r24, Z+1	; 0x01
    6568:	85 30       	cpi	r24, 0x05	; 5
    656a:	d1 f0       	breq	.+52     	; 0x65a0 <USB_Device_ProcessControlRequest+0x62>
    656c:	30 f4       	brcc	.+12     	; 0x657a <USB_Device_ProcessControlRequest+0x3c>
    656e:	81 30       	cpi	r24, 0x01	; 1
    6570:	89 f0       	breq	.+34     	; 0x6594 <USB_Device_ProcessControlRequest+0x56>
    6572:	50 f0       	brcs	.+20     	; 0x6588 <USB_Device_ProcessControlRequest+0x4a>
    6574:	83 30       	cpi	r24, 0x03	; 3
    6576:	71 f0       	breq	.+28     	; 0x6594 <USB_Device_ProcessControlRequest+0x56>
    6578:	23 c0       	rjmp	.+70     	; 0x65c0 <USB_Device_ProcessControlRequest+0x82>
    657a:	88 30       	cpi	r24, 0x08	; 8
    657c:	d1 f0       	breq	.+52     	; 0x65b2 <USB_Device_ProcessControlRequest+0x74>
    657e:	89 30       	cpi	r24, 0x09	; 9
    6580:	e1 f0       	breq	.+56     	; 0x65ba <USB_Device_ProcessControlRequest+0x7c>
    6582:	86 30       	cpi	r24, 0x06	; 6
    6584:	e9 f4       	brne	.+58     	; 0x65c0 <USB_Device_ProcessControlRequest+0x82>
    6586:	10 c0       	rjmp	.+32     	; 0x65a8 <USB_Device_ProcessControlRequest+0x6a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    6588:	90 38       	cpi	r25, 0x80	; 128
    658a:	11 f0       	breq	.+4      	; 0x6590 <USB_Device_ProcessControlRequest+0x52>
    658c:	92 38       	cpi	r25, 0x82	; 130
    658e:	c1 f4       	brne	.+48     	; 0x65c0 <USB_Device_ProcessControlRequest+0x82>
					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT)))
				{
					USB_Device_GetStatus();
    6590:	77 de       	rcall	.-786    	; 0x6280 <USB_Device_GetStatus>
    6592:	16 c0       	rjmp	.+44     	; 0x65c0 <USB_Device_ProcessControlRequest+0x82>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    6594:	99 23       	and	r25, r25
    6596:	11 f0       	breq	.+4      	; 0x659c <USB_Device_ProcessControlRequest+0x5e>
    6598:	92 30       	cpi	r25, 0x02	; 2
					(bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_ENDPOINT)))
				{
					USB_Device_ClearSetFeature();
    659a:	91 f4       	brne	.+36     	; 0x65c0 <USB_Device_ProcessControlRequest+0x82>
    659c:	a1 de       	rcall	.-702    	; 0x62e0 <USB_Device_ClearSetFeature>
    659e:	10 c0       	rjmp	.+32     	; 0x65c0 <USB_Device_ProcessControlRequest+0x82>
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    65a0:	91 11       	cpse	r25, r1
				  USB_Device_SetAddress();
    65a2:	0e c0       	rjmp	.+28     	; 0x65c0 <USB_Device_ProcessControlRequest+0x82>
    65a4:	e9 de       	rcall	.-558    	; 0x6378 <USB_Device_SetAddress>
    65a6:	0c c0       	rjmp	.+24     	; 0x65c0 <USB_Device_ProcessControlRequest+0x82>

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    65a8:	90 58       	subi	r25, 0x80	; 128
    65aa:	92 30       	cpi	r25, 0x02	; 2
					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_INTERFACE)))
				{
					USB_Device_GetDescriptor();
    65ac:	48 f4       	brcc	.+18     	; 0x65c0 <USB_Device_ProcessControlRequest+0x82>
    65ae:	71 df       	rcall	.-286    	; 0x6492 <USB_Device_GetDescriptor>
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    65b0:	07 c0       	rjmp	.+14     	; 0x65c0 <USB_Device_ProcessControlRequest+0x82>
    65b2:	90 38       	cpi	r25, 0x80	; 128
				  USB_Device_GetConfiguration();
    65b4:	29 f4       	brne	.+10     	; 0x65c0 <USB_Device_ProcessControlRequest+0x82>
    65b6:	02 df       	rcall	.-508    	; 0x63bc <USB_Device_GetConfiguration>

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    65b8:	03 c0       	rjmp	.+6      	; 0x65c0 <USB_Device_ProcessControlRequest+0x82>
    65ba:	91 11       	cpse	r25, r1
				  USB_Device_SetConfiguration();
    65bc:	01 c0       	rjmp	.+2      	; 0x65c0 <USB_Device_ProcessControlRequest+0x82>
    65be:	9a df       	rcall	.-204    	; 0x64f4 <USB_Device_SetConfiguration>
    65c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    65c4:	83 ff       	sbrs	r24, 3
    65c6:	0a c0       	rjmp	.+20     	; 0x65dc <USB_Device_ProcessControlRequest+0x9e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    65c8:	e8 ee       	ldi	r30, 0xE8	; 232
    65ca:	f0 e0       	ldi	r31, 0x00	; 0
    65cc:	80 81       	ld	r24, Z
    65ce:	87 7f       	andi	r24, 0xF7	; 247
    65d0:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    65d2:	eb ee       	ldi	r30, 0xEB	; 235
    65d4:	f0 e0       	ldi	r31, 0x00	; 0
    65d6:	80 81       	ld	r24, Z
    65d8:	80 62       	ori	r24, 0x20	; 32
    65da:	80 83       	st	Z, r24
    65dc:	08 95       	ret

000065de <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    65de:	08 95       	ret

000065e0 <USB_DeviceTask>:
	#endif
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
    65e0:	cf 93       	push	r28
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    65e2:	80 91 3f 0d 	lds	r24, 0x0D3F	; 0x800d3f <USB_DeviceState>
    65e6:	88 23       	and	r24, r24
    65e8:	99 f0       	breq	.+38     	; 0x6610 <USB_DeviceTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    65ea:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    65ee:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    65f0:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    65f4:	98 2f       	mov	r25, r24
    65f6:	91 70       	andi	r25, 0x01	; 1
    65f8:	80 fd       	sbrc	r24, 0
    65fa:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    65fc:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    65fe:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    6602:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    6606:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    6608:	9a df       	rcall	.-204    	; 0x653e <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    660a:	cf 70       	andi	r28, 0x0F	; 15
    660c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(PrevEndpoint);
}
    6610:	cf 91       	pop	r28
    6612:	08 95       	ret

00006614 <USB_USBTask>:
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
    6614:	e5 cf       	rjmp	.-54     	; 0x65e0 <USB_DeviceTask>
    6616:	08 95       	ret

00006618 <__udivmodsi4>:
    6618:	a1 e2       	ldi	r26, 0x21	; 33
    661a:	1a 2e       	mov	r1, r26
    661c:	aa 1b       	sub	r26, r26
    661e:	bb 1b       	sub	r27, r27
    6620:	fd 01       	movw	r30, r26
    6622:	0d c0       	rjmp	.+26     	; 0x663e <__udivmodsi4_ep>

00006624 <__udivmodsi4_loop>:
    6624:	aa 1f       	adc	r26, r26
    6626:	bb 1f       	adc	r27, r27
    6628:	ee 1f       	adc	r30, r30
    662a:	ff 1f       	adc	r31, r31
    662c:	a2 17       	cp	r26, r18
    662e:	b3 07       	cpc	r27, r19
    6630:	e4 07       	cpc	r30, r20
    6632:	f5 07       	cpc	r31, r21
    6634:	20 f0       	brcs	.+8      	; 0x663e <__udivmodsi4_ep>
    6636:	a2 1b       	sub	r26, r18
    6638:	b3 0b       	sbc	r27, r19
    663a:	e4 0b       	sbc	r30, r20
    663c:	f5 0b       	sbc	r31, r21

0000663e <__udivmodsi4_ep>:
    663e:	66 1f       	adc	r22, r22
    6640:	77 1f       	adc	r23, r23
    6642:	88 1f       	adc	r24, r24
    6644:	99 1f       	adc	r25, r25
    6646:	1a 94       	dec	r1
    6648:	69 f7       	brne	.-38     	; 0x6624 <__udivmodsi4_loop>
    664a:	60 95       	com	r22
    664c:	70 95       	com	r23
    664e:	80 95       	com	r24
    6650:	90 95       	com	r25
    6652:	9b 01       	movw	r18, r22
    6654:	ac 01       	movw	r20, r24
    6656:	bd 01       	movw	r22, r26
    6658:	cf 01       	movw	r24, r30
    665a:	08 95       	ret

0000665c <__umulhisi3>:
    665c:	a2 9f       	mul	r26, r18
    665e:	b0 01       	movw	r22, r0
    6660:	b3 9f       	mul	r27, r19
    6662:	c0 01       	movw	r24, r0
    6664:	a3 9f       	mul	r26, r19
    6666:	70 0d       	add	r23, r0
    6668:	81 1d       	adc	r24, r1
    666a:	11 24       	eor	r1, r1
    666c:	91 1d       	adc	r25, r1
    666e:	b2 9f       	mul	r27, r18
    6670:	70 0d       	add	r23, r0
    6672:	81 1d       	adc	r24, r1
    6674:	11 24       	eor	r1, r1
    6676:	91 1d       	adc	r25, r1
    6678:	08 95       	ret

0000667a <__muluhisi3>:
    667a:	f0 df       	rcall	.-32     	; 0x665c <__umulhisi3>
    667c:	a5 9f       	mul	r26, r21
    667e:	90 0d       	add	r25, r0
    6680:	b4 9f       	mul	r27, r20
    6682:	90 0d       	add	r25, r0
    6684:	a4 9f       	mul	r26, r20
    6686:	80 0d       	add	r24, r0
    6688:	91 1d       	adc	r25, r1
    668a:	11 24       	eor	r1, r1
    668c:	08 95       	ret

0000668e <isgraph>:
    668e:	80 32       	cpi	r24, 0x20	; 32
    6690:	09 f0       	breq	.+2      	; 0x6694 <isprint+0x2>

00006692 <isprint>:
    6692:	91 11       	cpse	r25, r1
    6694:	d0 c2       	rjmp	.+1440   	; 0x6c36 <__ctype_isfalse>
    6696:	80 52       	subi	r24, 0x20	; 32
    6698:	8f 55       	subi	r24, 0x5F	; 95
    669a:	e0 f7       	brcc	.-8      	; 0x6694 <isprint+0x2>
    669c:	08 95       	ret

0000669e <memcmp>:
    669e:	fb 01       	movw	r30, r22
    66a0:	dc 01       	movw	r26, r24
    66a2:	04 c0       	rjmp	.+8      	; 0x66ac <memcmp+0xe>
    66a4:	8d 91       	ld	r24, X+
    66a6:	01 90       	ld	r0, Z+
    66a8:	80 19       	sub	r24, r0
    66aa:	21 f4       	brne	.+8      	; 0x66b4 <memcmp+0x16>
    66ac:	41 50       	subi	r20, 0x01	; 1
    66ae:	50 40       	sbci	r21, 0x00	; 0
    66b0:	c8 f7       	brcc	.-14     	; 0x66a4 <memcmp+0x6>
    66b2:	88 1b       	sub	r24, r24
    66b4:	99 0b       	sbc	r25, r25
    66b6:	08 95       	ret

000066b8 <memcpy>:
    66b8:	fb 01       	movw	r30, r22
    66ba:	dc 01       	movw	r26, r24
    66bc:	02 c0       	rjmp	.+4      	; 0x66c2 <memcpy+0xa>
    66be:	01 90       	ld	r0, Z+
    66c0:	0d 92       	st	X+, r0
    66c2:	41 50       	subi	r20, 0x01	; 1
    66c4:	50 40       	sbci	r21, 0x00	; 0
    66c6:	d8 f7       	brcc	.-10     	; 0x66be <memcpy+0x6>
    66c8:	08 95       	ret

000066ca <memset>:
    66ca:	dc 01       	movw	r26, r24
    66cc:	01 c0       	rjmp	.+2      	; 0x66d0 <memset+0x6>
    66ce:	6d 93       	st	X+, r22
    66d0:	41 50       	subi	r20, 0x01	; 1
    66d2:	50 40       	sbci	r21, 0x00	; 0
    66d4:	e0 f7       	brcc	.-8      	; 0x66ce <memset+0x4>
    66d6:	08 95       	ret

000066d8 <strchr>:
    66d8:	fc 01       	movw	r30, r24
    66da:	81 91       	ld	r24, Z+
    66dc:	86 17       	cp	r24, r22
    66de:	21 f0       	breq	.+8      	; 0x66e8 <strchr+0x10>
    66e0:	88 23       	and	r24, r24
    66e2:	d9 f7       	brne	.-10     	; 0x66da <strchr+0x2>
    66e4:	99 27       	eor	r25, r25
    66e6:	08 95       	ret
    66e8:	31 97       	sbiw	r30, 0x01	; 1
    66ea:	cf 01       	movw	r24, r30
    66ec:	08 95       	ret

000066ee <fprintf>:
    66ee:	cf 93       	push	r28
    66f0:	df 93       	push	r29
    66f2:	cd b7       	in	r28, 0x3d	; 61
    66f4:	de b7       	in	r29, 0x3e	; 62
    66f6:	ae 01       	movw	r20, r28
    66f8:	47 5f       	subi	r20, 0xF7	; 247
    66fa:	5f 4f       	sbci	r21, 0xFF	; 255
    66fc:	6f 81       	ldd	r22, Y+7	; 0x07
    66fe:	78 85       	ldd	r23, Y+8	; 0x08
    6700:	8d 81       	ldd	r24, Y+5	; 0x05
    6702:	9e 81       	ldd	r25, Y+6	; 0x06
    6704:	9b d0       	rcall	.+310    	; 0x683c <vfprintf>
    6706:	df 91       	pop	r29
    6708:	cf 91       	pop	r28
    670a:	08 95       	ret

0000670c <printf>:
    670c:	cf 93       	push	r28
    670e:	df 93       	push	r29
    6710:	cd b7       	in	r28, 0x3d	; 61
    6712:	de b7       	in	r29, 0x3e	; 62
    6714:	ae 01       	movw	r20, r28
    6716:	4b 5f       	subi	r20, 0xFB	; 251
    6718:	5f 4f       	sbci	r21, 0xFF	; 255
    671a:	fa 01       	movw	r30, r20
    671c:	61 91       	ld	r22, Z+
    671e:	71 91       	ld	r23, Z+
    6720:	af 01       	movw	r20, r30
    6722:	80 91 4a 0d 	lds	r24, 0x0D4A	; 0x800d4a <__iob+0x2>
    6726:	90 91 4b 0d 	lds	r25, 0x0D4B	; 0x800d4b <__iob+0x3>
    672a:	88 d0       	rcall	.+272    	; 0x683c <vfprintf>
    672c:	df 91       	pop	r29
    672e:	cf 91       	pop	r28
    6730:	08 95       	ret

00006732 <printf_P>:
    6732:	0f 93       	push	r16
    6734:	1f 93       	push	r17
    6736:	cf 93       	push	r28
    6738:	df 93       	push	r29
    673a:	cd b7       	in	r28, 0x3d	; 61
    673c:	de b7       	in	r29, 0x3e	; 62
    673e:	ae 01       	movw	r20, r28
    6740:	49 5f       	subi	r20, 0xF9	; 249
    6742:	5f 4f       	sbci	r21, 0xFF	; 255
    6744:	da 01       	movw	r26, r20
    6746:	6d 91       	ld	r22, X+
    6748:	7d 91       	ld	r23, X+
    674a:	ad 01       	movw	r20, r26
    674c:	08 e4       	ldi	r16, 0x48	; 72
    674e:	1d e0       	ldi	r17, 0x0D	; 13
    6750:	f8 01       	movw	r30, r16
    6752:	82 81       	ldd	r24, Z+2	; 0x02
    6754:	93 81       	ldd	r25, Z+3	; 0x03
    6756:	dc 01       	movw	r26, r24
    6758:	13 96       	adiw	r26, 0x03	; 3
    675a:	2c 91       	ld	r18, X
    675c:	13 97       	sbiw	r26, 0x03	; 3
    675e:	28 60       	ori	r18, 0x08	; 8
    6760:	13 96       	adiw	r26, 0x03	; 3
    6762:	2c 93       	st	X, r18
    6764:	6b d0       	rcall	.+214    	; 0x683c <vfprintf>
    6766:	d8 01       	movw	r26, r16
    6768:	12 96       	adiw	r26, 0x02	; 2
    676a:	ed 91       	ld	r30, X+
    676c:	fc 91       	ld	r31, X
    676e:	13 97       	sbiw	r26, 0x03	; 3
    6770:	23 81       	ldd	r18, Z+3	; 0x03
    6772:	27 7f       	andi	r18, 0xF7	; 247
    6774:	23 83       	std	Z+3, r18	; 0x03
    6776:	df 91       	pop	r29
    6778:	cf 91       	pop	r28
    677a:	1f 91       	pop	r17
    677c:	0f 91       	pop	r16
    677e:	08 95       	ret

00006780 <puts>:
    6780:	0f 93       	push	r16
    6782:	1f 93       	push	r17
    6784:	cf 93       	push	r28
    6786:	df 93       	push	r29
    6788:	e0 91 4a 0d 	lds	r30, 0x0D4A	; 0x800d4a <__iob+0x2>
    678c:	f0 91 4b 0d 	lds	r31, 0x0D4B	; 0x800d4b <__iob+0x3>
    6790:	23 81       	ldd	r18, Z+3	; 0x03
    6792:	21 ff       	sbrs	r18, 1
    6794:	1b c0       	rjmp	.+54     	; 0x67cc <puts+0x4c>
    6796:	8c 01       	movw	r16, r24
    6798:	d0 e0       	ldi	r29, 0x00	; 0
    679a:	c0 e0       	ldi	r28, 0x00	; 0
    679c:	f8 01       	movw	r30, r16
    679e:	81 91       	ld	r24, Z+
    67a0:	8f 01       	movw	r16, r30
    67a2:	60 91 4a 0d 	lds	r22, 0x0D4A	; 0x800d4a <__iob+0x2>
    67a6:	70 91 4b 0d 	lds	r23, 0x0D4B	; 0x800d4b <__iob+0x3>
    67aa:	db 01       	movw	r26, r22
    67ac:	18 96       	adiw	r26, 0x08	; 8
    67ae:	ed 91       	ld	r30, X+
    67b0:	fc 91       	ld	r31, X
    67b2:	19 97       	sbiw	r26, 0x09	; 9
    67b4:	88 23       	and	r24, r24
    67b6:	31 f0       	breq	.+12     	; 0x67c4 <puts+0x44>
    67b8:	09 95       	icall
    67ba:	89 2b       	or	r24, r25
    67bc:	79 f3       	breq	.-34     	; 0x679c <puts+0x1c>
    67be:	df ef       	ldi	r29, 0xFF	; 255
    67c0:	cf ef       	ldi	r28, 0xFF	; 255
    67c2:	ec cf       	rjmp	.-40     	; 0x679c <puts+0x1c>
    67c4:	8a e0       	ldi	r24, 0x0A	; 10
    67c6:	09 95       	icall
    67c8:	89 2b       	or	r24, r25
    67ca:	19 f0       	breq	.+6      	; 0x67d2 <puts+0x52>
    67cc:	8f ef       	ldi	r24, 0xFF	; 255
    67ce:	9f ef       	ldi	r25, 0xFF	; 255
    67d0:	02 c0       	rjmp	.+4      	; 0x67d6 <puts+0x56>
    67d2:	8d 2f       	mov	r24, r29
    67d4:	9c 2f       	mov	r25, r28
    67d6:	df 91       	pop	r29
    67d8:	cf 91       	pop	r28
    67da:	1f 91       	pop	r17
    67dc:	0f 91       	pop	r16
    67de:	08 95       	ret

000067e0 <sprintf>:
    67e0:	0f 93       	push	r16
    67e2:	1f 93       	push	r17
    67e4:	cf 93       	push	r28
    67e6:	df 93       	push	r29
    67e8:	cd b7       	in	r28, 0x3d	; 61
    67ea:	de b7       	in	r29, 0x3e	; 62
    67ec:	2e 97       	sbiw	r28, 0x0e	; 14
    67ee:	0f b6       	in	r0, 0x3f	; 63
    67f0:	f8 94       	cli
    67f2:	de bf       	out	0x3e, r29	; 62
    67f4:	0f be       	out	0x3f, r0	; 63
    67f6:	cd bf       	out	0x3d, r28	; 61
    67f8:	0d 89       	ldd	r16, Y+21	; 0x15
    67fa:	1e 89       	ldd	r17, Y+22	; 0x16
    67fc:	86 e0       	ldi	r24, 0x06	; 6
    67fe:	8c 83       	std	Y+4, r24	; 0x04
    6800:	1a 83       	std	Y+2, r17	; 0x02
    6802:	09 83       	std	Y+1, r16	; 0x01
    6804:	8f ef       	ldi	r24, 0xFF	; 255
    6806:	9f e7       	ldi	r25, 0x7F	; 127
    6808:	9e 83       	std	Y+6, r25	; 0x06
    680a:	8d 83       	std	Y+5, r24	; 0x05
    680c:	ae 01       	movw	r20, r28
    680e:	47 5e       	subi	r20, 0xE7	; 231
    6810:	5f 4f       	sbci	r21, 0xFF	; 255
    6812:	6f 89       	ldd	r22, Y+23	; 0x17
    6814:	78 8d       	ldd	r23, Y+24	; 0x18
    6816:	ce 01       	movw	r24, r28
    6818:	01 96       	adiw	r24, 0x01	; 1
    681a:	10 d0       	rcall	.+32     	; 0x683c <vfprintf>
    681c:	ef 81       	ldd	r30, Y+7	; 0x07
    681e:	f8 85       	ldd	r31, Y+8	; 0x08
    6820:	e0 0f       	add	r30, r16
    6822:	f1 1f       	adc	r31, r17
    6824:	10 82       	st	Z, r1
    6826:	2e 96       	adiw	r28, 0x0e	; 14
    6828:	0f b6       	in	r0, 0x3f	; 63
    682a:	f8 94       	cli
    682c:	de bf       	out	0x3e, r29	; 62
    682e:	0f be       	out	0x3f, r0	; 63
    6830:	cd bf       	out	0x3d, r28	; 61
    6832:	df 91       	pop	r29
    6834:	cf 91       	pop	r28
    6836:	1f 91       	pop	r17
    6838:	0f 91       	pop	r16
    683a:	08 95       	ret

0000683c <vfprintf>:
    683c:	2f 92       	push	r2
    683e:	3f 92       	push	r3
    6840:	4f 92       	push	r4
    6842:	5f 92       	push	r5
    6844:	6f 92       	push	r6
    6846:	7f 92       	push	r7
    6848:	8f 92       	push	r8
    684a:	9f 92       	push	r9
    684c:	af 92       	push	r10
    684e:	bf 92       	push	r11
    6850:	cf 92       	push	r12
    6852:	df 92       	push	r13
    6854:	ef 92       	push	r14
    6856:	ff 92       	push	r15
    6858:	0f 93       	push	r16
    685a:	1f 93       	push	r17
    685c:	cf 93       	push	r28
    685e:	df 93       	push	r29
    6860:	cd b7       	in	r28, 0x3d	; 61
    6862:	de b7       	in	r29, 0x3e	; 62
    6864:	2b 97       	sbiw	r28, 0x0b	; 11
    6866:	0f b6       	in	r0, 0x3f	; 63
    6868:	f8 94       	cli
    686a:	de bf       	out	0x3e, r29	; 62
    686c:	0f be       	out	0x3f, r0	; 63
    686e:	cd bf       	out	0x3d, r28	; 61
    6870:	6c 01       	movw	r12, r24
    6872:	7b 01       	movw	r14, r22
    6874:	8a 01       	movw	r16, r20
    6876:	fc 01       	movw	r30, r24
    6878:	17 82       	std	Z+7, r1	; 0x07
    687a:	16 82       	std	Z+6, r1	; 0x06
    687c:	83 81       	ldd	r24, Z+3	; 0x03
    687e:	81 ff       	sbrs	r24, 1
    6880:	bf c1       	rjmp	.+894    	; 0x6c00 <vfprintf+0x3c4>
    6882:	ce 01       	movw	r24, r28
    6884:	01 96       	adiw	r24, 0x01	; 1
    6886:	3c 01       	movw	r6, r24
    6888:	f6 01       	movw	r30, r12
    688a:	93 81       	ldd	r25, Z+3	; 0x03
    688c:	f7 01       	movw	r30, r14
    688e:	93 fd       	sbrc	r25, 3
    6890:	85 91       	lpm	r24, Z+
    6892:	93 ff       	sbrs	r25, 3
    6894:	81 91       	ld	r24, Z+
    6896:	7f 01       	movw	r14, r30
    6898:	88 23       	and	r24, r24
    689a:	09 f4       	brne	.+2      	; 0x689e <vfprintf+0x62>
    689c:	ad c1       	rjmp	.+858    	; 0x6bf8 <vfprintf+0x3bc>
    689e:	85 32       	cpi	r24, 0x25	; 37
    68a0:	39 f4       	brne	.+14     	; 0x68b0 <vfprintf+0x74>
    68a2:	93 fd       	sbrc	r25, 3
    68a4:	85 91       	lpm	r24, Z+
    68a6:	93 ff       	sbrs	r25, 3
    68a8:	81 91       	ld	r24, Z+
    68aa:	7f 01       	movw	r14, r30
    68ac:	85 32       	cpi	r24, 0x25	; 37
    68ae:	21 f4       	brne	.+8      	; 0x68b8 <vfprintf+0x7c>
    68b0:	b6 01       	movw	r22, r12
    68b2:	90 e0       	ldi	r25, 0x00	; 0
    68b4:	d9 d1       	rcall	.+946    	; 0x6c68 <fputc>
    68b6:	e8 cf       	rjmp	.-48     	; 0x6888 <vfprintf+0x4c>
    68b8:	91 2c       	mov	r9, r1
    68ba:	21 2c       	mov	r2, r1
    68bc:	31 2c       	mov	r3, r1
    68be:	ff e1       	ldi	r31, 0x1F	; 31
    68c0:	f3 15       	cp	r31, r3
    68c2:	d8 f0       	brcs	.+54     	; 0x68fa <vfprintf+0xbe>
    68c4:	8b 32       	cpi	r24, 0x2B	; 43
    68c6:	79 f0       	breq	.+30     	; 0x68e6 <vfprintf+0xaa>
    68c8:	38 f4       	brcc	.+14     	; 0x68d8 <vfprintf+0x9c>
    68ca:	80 32       	cpi	r24, 0x20	; 32
    68cc:	79 f0       	breq	.+30     	; 0x68ec <vfprintf+0xb0>
    68ce:	83 32       	cpi	r24, 0x23	; 35
    68d0:	a1 f4       	brne	.+40     	; 0x68fa <vfprintf+0xbe>
    68d2:	23 2d       	mov	r18, r3
    68d4:	20 61       	ori	r18, 0x10	; 16
    68d6:	1d c0       	rjmp	.+58     	; 0x6912 <vfprintf+0xd6>
    68d8:	8d 32       	cpi	r24, 0x2D	; 45
    68da:	61 f0       	breq	.+24     	; 0x68f4 <vfprintf+0xb8>
    68dc:	80 33       	cpi	r24, 0x30	; 48
    68de:	69 f4       	brne	.+26     	; 0x68fa <vfprintf+0xbe>
    68e0:	23 2d       	mov	r18, r3
    68e2:	21 60       	ori	r18, 0x01	; 1
    68e4:	16 c0       	rjmp	.+44     	; 0x6912 <vfprintf+0xd6>
    68e6:	83 2d       	mov	r24, r3
    68e8:	82 60       	ori	r24, 0x02	; 2
    68ea:	38 2e       	mov	r3, r24
    68ec:	e3 2d       	mov	r30, r3
    68ee:	e4 60       	ori	r30, 0x04	; 4
    68f0:	3e 2e       	mov	r3, r30
    68f2:	2a c0       	rjmp	.+84     	; 0x6948 <vfprintf+0x10c>
    68f4:	f3 2d       	mov	r31, r3
    68f6:	f8 60       	ori	r31, 0x08	; 8
    68f8:	1d c0       	rjmp	.+58     	; 0x6934 <vfprintf+0xf8>
    68fa:	37 fc       	sbrc	r3, 7
    68fc:	2d c0       	rjmp	.+90     	; 0x6958 <vfprintf+0x11c>
    68fe:	20 ed       	ldi	r18, 0xD0	; 208
    6900:	28 0f       	add	r18, r24
    6902:	2a 30       	cpi	r18, 0x0A	; 10
    6904:	40 f0       	brcs	.+16     	; 0x6916 <vfprintf+0xda>
    6906:	8e 32       	cpi	r24, 0x2E	; 46
    6908:	b9 f4       	brne	.+46     	; 0x6938 <vfprintf+0xfc>
    690a:	36 fc       	sbrc	r3, 6
    690c:	75 c1       	rjmp	.+746    	; 0x6bf8 <vfprintf+0x3bc>
    690e:	23 2d       	mov	r18, r3
    6910:	20 64       	ori	r18, 0x40	; 64
    6912:	32 2e       	mov	r3, r18
    6914:	19 c0       	rjmp	.+50     	; 0x6948 <vfprintf+0x10c>
    6916:	36 fe       	sbrs	r3, 6
    6918:	06 c0       	rjmp	.+12     	; 0x6926 <vfprintf+0xea>
    691a:	8a e0       	ldi	r24, 0x0A	; 10
    691c:	98 9e       	mul	r9, r24
    691e:	20 0d       	add	r18, r0
    6920:	11 24       	eor	r1, r1
    6922:	92 2e       	mov	r9, r18
    6924:	11 c0       	rjmp	.+34     	; 0x6948 <vfprintf+0x10c>
    6926:	ea e0       	ldi	r30, 0x0A	; 10
    6928:	2e 9e       	mul	r2, r30
    692a:	20 0d       	add	r18, r0
    692c:	11 24       	eor	r1, r1
    692e:	22 2e       	mov	r2, r18
    6930:	f3 2d       	mov	r31, r3
    6932:	f0 62       	ori	r31, 0x20	; 32
    6934:	3f 2e       	mov	r3, r31
    6936:	08 c0       	rjmp	.+16     	; 0x6948 <vfprintf+0x10c>
    6938:	8c 36       	cpi	r24, 0x6C	; 108
    693a:	21 f4       	brne	.+8      	; 0x6944 <vfprintf+0x108>
    693c:	83 2d       	mov	r24, r3
    693e:	80 68       	ori	r24, 0x80	; 128
    6940:	38 2e       	mov	r3, r24
    6942:	02 c0       	rjmp	.+4      	; 0x6948 <vfprintf+0x10c>
    6944:	88 36       	cpi	r24, 0x68	; 104
    6946:	41 f4       	brne	.+16     	; 0x6958 <vfprintf+0x11c>
    6948:	f7 01       	movw	r30, r14
    694a:	93 fd       	sbrc	r25, 3
    694c:	85 91       	lpm	r24, Z+
    694e:	93 ff       	sbrs	r25, 3
    6950:	81 91       	ld	r24, Z+
    6952:	7f 01       	movw	r14, r30
    6954:	81 11       	cpse	r24, r1
    6956:	b3 cf       	rjmp	.-154    	; 0x68be <vfprintf+0x82>
    6958:	98 2f       	mov	r25, r24
    695a:	9f 7d       	andi	r25, 0xDF	; 223
    695c:	95 54       	subi	r25, 0x45	; 69
    695e:	93 30       	cpi	r25, 0x03	; 3
    6960:	28 f4       	brcc	.+10     	; 0x696c <vfprintf+0x130>
    6962:	0c 5f       	subi	r16, 0xFC	; 252
    6964:	1f 4f       	sbci	r17, 0xFF	; 255
    6966:	9f e3       	ldi	r25, 0x3F	; 63
    6968:	99 83       	std	Y+1, r25	; 0x01
    696a:	0d c0       	rjmp	.+26     	; 0x6986 <vfprintf+0x14a>
    696c:	83 36       	cpi	r24, 0x63	; 99
    696e:	31 f0       	breq	.+12     	; 0x697c <vfprintf+0x140>
    6970:	83 37       	cpi	r24, 0x73	; 115
    6972:	71 f0       	breq	.+28     	; 0x6990 <vfprintf+0x154>
    6974:	83 35       	cpi	r24, 0x53	; 83
    6976:	09 f0       	breq	.+2      	; 0x697a <vfprintf+0x13e>
    6978:	55 c0       	rjmp	.+170    	; 0x6a24 <vfprintf+0x1e8>
    697a:	20 c0       	rjmp	.+64     	; 0x69bc <vfprintf+0x180>
    697c:	f8 01       	movw	r30, r16
    697e:	80 81       	ld	r24, Z
    6980:	89 83       	std	Y+1, r24	; 0x01
    6982:	0e 5f       	subi	r16, 0xFE	; 254
    6984:	1f 4f       	sbci	r17, 0xFF	; 255
    6986:	88 24       	eor	r8, r8
    6988:	83 94       	inc	r8
    698a:	91 2c       	mov	r9, r1
    698c:	53 01       	movw	r10, r6
    698e:	12 c0       	rjmp	.+36     	; 0x69b4 <vfprintf+0x178>
    6990:	28 01       	movw	r4, r16
    6992:	f2 e0       	ldi	r31, 0x02	; 2
    6994:	4f 0e       	add	r4, r31
    6996:	51 1c       	adc	r5, r1
    6998:	f8 01       	movw	r30, r16
    699a:	a0 80       	ld	r10, Z
    699c:	b1 80       	ldd	r11, Z+1	; 0x01
    699e:	36 fe       	sbrs	r3, 6
    69a0:	03 c0       	rjmp	.+6      	; 0x69a8 <vfprintf+0x16c>
    69a2:	69 2d       	mov	r22, r9
    69a4:	70 e0       	ldi	r23, 0x00	; 0
    69a6:	02 c0       	rjmp	.+4      	; 0x69ac <vfprintf+0x170>
    69a8:	6f ef       	ldi	r22, 0xFF	; 255
    69aa:	7f ef       	ldi	r23, 0xFF	; 255
    69ac:	c5 01       	movw	r24, r10
    69ae:	51 d1       	rcall	.+674    	; 0x6c52 <strnlen>
    69b0:	4c 01       	movw	r8, r24
    69b2:	82 01       	movw	r16, r4
    69b4:	f3 2d       	mov	r31, r3
    69b6:	ff 77       	andi	r31, 0x7F	; 127
    69b8:	3f 2e       	mov	r3, r31
    69ba:	15 c0       	rjmp	.+42     	; 0x69e6 <vfprintf+0x1aa>
    69bc:	28 01       	movw	r4, r16
    69be:	22 e0       	ldi	r18, 0x02	; 2
    69c0:	42 0e       	add	r4, r18
    69c2:	51 1c       	adc	r5, r1
    69c4:	f8 01       	movw	r30, r16
    69c6:	a0 80       	ld	r10, Z
    69c8:	b1 80       	ldd	r11, Z+1	; 0x01
    69ca:	36 fe       	sbrs	r3, 6
    69cc:	03 c0       	rjmp	.+6      	; 0x69d4 <vfprintf+0x198>
    69ce:	69 2d       	mov	r22, r9
    69d0:	70 e0       	ldi	r23, 0x00	; 0
    69d2:	02 c0       	rjmp	.+4      	; 0x69d8 <vfprintf+0x19c>
    69d4:	6f ef       	ldi	r22, 0xFF	; 255
    69d6:	7f ef       	ldi	r23, 0xFF	; 255
    69d8:	c5 01       	movw	r24, r10
    69da:	30 d1       	rcall	.+608    	; 0x6c3c <strnlen_P>
    69dc:	4c 01       	movw	r8, r24
    69de:	f3 2d       	mov	r31, r3
    69e0:	f0 68       	ori	r31, 0x80	; 128
    69e2:	3f 2e       	mov	r3, r31
    69e4:	82 01       	movw	r16, r4
    69e6:	33 fc       	sbrc	r3, 3
    69e8:	19 c0       	rjmp	.+50     	; 0x6a1c <vfprintf+0x1e0>
    69ea:	82 2d       	mov	r24, r2
    69ec:	90 e0       	ldi	r25, 0x00	; 0
    69ee:	88 16       	cp	r8, r24
    69f0:	99 06       	cpc	r9, r25
    69f2:	a0 f4       	brcc	.+40     	; 0x6a1c <vfprintf+0x1e0>
    69f4:	b6 01       	movw	r22, r12
    69f6:	80 e2       	ldi	r24, 0x20	; 32
    69f8:	90 e0       	ldi	r25, 0x00	; 0
    69fa:	36 d1       	rcall	.+620    	; 0x6c68 <fputc>
    69fc:	2a 94       	dec	r2
    69fe:	f5 cf       	rjmp	.-22     	; 0x69ea <vfprintf+0x1ae>
    6a00:	f5 01       	movw	r30, r10
    6a02:	37 fc       	sbrc	r3, 7
    6a04:	85 91       	lpm	r24, Z+
    6a06:	37 fe       	sbrs	r3, 7
    6a08:	81 91       	ld	r24, Z+
    6a0a:	5f 01       	movw	r10, r30
    6a0c:	b6 01       	movw	r22, r12
    6a0e:	90 e0       	ldi	r25, 0x00	; 0
    6a10:	2b d1       	rcall	.+598    	; 0x6c68 <fputc>
    6a12:	21 10       	cpse	r2, r1
    6a14:	2a 94       	dec	r2
    6a16:	21 e0       	ldi	r18, 0x01	; 1
    6a18:	82 1a       	sub	r8, r18
    6a1a:	91 08       	sbc	r9, r1
    6a1c:	81 14       	cp	r8, r1
    6a1e:	91 04       	cpc	r9, r1
    6a20:	79 f7       	brne	.-34     	; 0x6a00 <vfprintf+0x1c4>
    6a22:	e1 c0       	rjmp	.+450    	; 0x6be6 <vfprintf+0x3aa>
    6a24:	84 36       	cpi	r24, 0x64	; 100
    6a26:	11 f0       	breq	.+4      	; 0x6a2c <vfprintf+0x1f0>
    6a28:	89 36       	cpi	r24, 0x69	; 105
    6a2a:	39 f5       	brne	.+78     	; 0x6a7a <vfprintf+0x23e>
    6a2c:	f8 01       	movw	r30, r16
    6a2e:	37 fe       	sbrs	r3, 7
    6a30:	07 c0       	rjmp	.+14     	; 0x6a40 <vfprintf+0x204>
    6a32:	60 81       	ld	r22, Z
    6a34:	71 81       	ldd	r23, Z+1	; 0x01
    6a36:	82 81       	ldd	r24, Z+2	; 0x02
    6a38:	93 81       	ldd	r25, Z+3	; 0x03
    6a3a:	0c 5f       	subi	r16, 0xFC	; 252
    6a3c:	1f 4f       	sbci	r17, 0xFF	; 255
    6a3e:	08 c0       	rjmp	.+16     	; 0x6a50 <vfprintf+0x214>
    6a40:	60 81       	ld	r22, Z
    6a42:	71 81       	ldd	r23, Z+1	; 0x01
    6a44:	07 2e       	mov	r0, r23
    6a46:	00 0c       	add	r0, r0
    6a48:	88 0b       	sbc	r24, r24
    6a4a:	99 0b       	sbc	r25, r25
    6a4c:	0e 5f       	subi	r16, 0xFE	; 254
    6a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    6a50:	f3 2d       	mov	r31, r3
    6a52:	ff 76       	andi	r31, 0x6F	; 111
    6a54:	3f 2e       	mov	r3, r31
    6a56:	97 ff       	sbrs	r25, 7
    6a58:	09 c0       	rjmp	.+18     	; 0x6a6c <vfprintf+0x230>
    6a5a:	90 95       	com	r25
    6a5c:	80 95       	com	r24
    6a5e:	70 95       	com	r23
    6a60:	61 95       	neg	r22
    6a62:	7f 4f       	sbci	r23, 0xFF	; 255
    6a64:	8f 4f       	sbci	r24, 0xFF	; 255
    6a66:	9f 4f       	sbci	r25, 0xFF	; 255
    6a68:	f0 68       	ori	r31, 0x80	; 128
    6a6a:	3f 2e       	mov	r3, r31
    6a6c:	2a e0       	ldi	r18, 0x0A	; 10
    6a6e:	30 e0       	ldi	r19, 0x00	; 0
    6a70:	a3 01       	movw	r20, r6
    6a72:	36 d1       	rcall	.+620    	; 0x6ce0 <__ultoa_invert>
    6a74:	88 2e       	mov	r8, r24
    6a76:	86 18       	sub	r8, r6
    6a78:	44 c0       	rjmp	.+136    	; 0x6b02 <vfprintf+0x2c6>
    6a7a:	85 37       	cpi	r24, 0x75	; 117
    6a7c:	31 f4       	brne	.+12     	; 0x6a8a <vfprintf+0x24e>
    6a7e:	23 2d       	mov	r18, r3
    6a80:	2f 7e       	andi	r18, 0xEF	; 239
    6a82:	b2 2e       	mov	r11, r18
    6a84:	2a e0       	ldi	r18, 0x0A	; 10
    6a86:	30 e0       	ldi	r19, 0x00	; 0
    6a88:	25 c0       	rjmp	.+74     	; 0x6ad4 <vfprintf+0x298>
    6a8a:	93 2d       	mov	r25, r3
    6a8c:	99 7f       	andi	r25, 0xF9	; 249
    6a8e:	b9 2e       	mov	r11, r25
    6a90:	8f 36       	cpi	r24, 0x6F	; 111
    6a92:	c1 f0       	breq	.+48     	; 0x6ac4 <vfprintf+0x288>
    6a94:	18 f4       	brcc	.+6      	; 0x6a9c <vfprintf+0x260>
    6a96:	88 35       	cpi	r24, 0x58	; 88
    6a98:	79 f0       	breq	.+30     	; 0x6ab8 <vfprintf+0x27c>
    6a9a:	ae c0       	rjmp	.+348    	; 0x6bf8 <vfprintf+0x3bc>
    6a9c:	80 37       	cpi	r24, 0x70	; 112
    6a9e:	19 f0       	breq	.+6      	; 0x6aa6 <vfprintf+0x26a>
    6aa0:	88 37       	cpi	r24, 0x78	; 120
    6aa2:	21 f0       	breq	.+8      	; 0x6aac <vfprintf+0x270>
    6aa4:	a9 c0       	rjmp	.+338    	; 0x6bf8 <vfprintf+0x3bc>
    6aa6:	e9 2f       	mov	r30, r25
    6aa8:	e0 61       	ori	r30, 0x10	; 16
    6aaa:	be 2e       	mov	r11, r30
    6aac:	b4 fe       	sbrs	r11, 4
    6aae:	0d c0       	rjmp	.+26     	; 0x6aca <vfprintf+0x28e>
    6ab0:	fb 2d       	mov	r31, r11
    6ab2:	f4 60       	ori	r31, 0x04	; 4
    6ab4:	bf 2e       	mov	r11, r31
    6ab6:	09 c0       	rjmp	.+18     	; 0x6aca <vfprintf+0x28e>
    6ab8:	34 fe       	sbrs	r3, 4
    6aba:	0a c0       	rjmp	.+20     	; 0x6ad0 <vfprintf+0x294>
    6abc:	29 2f       	mov	r18, r25
    6abe:	26 60       	ori	r18, 0x06	; 6
    6ac0:	b2 2e       	mov	r11, r18
    6ac2:	06 c0       	rjmp	.+12     	; 0x6ad0 <vfprintf+0x294>
    6ac4:	28 e0       	ldi	r18, 0x08	; 8
    6ac6:	30 e0       	ldi	r19, 0x00	; 0
    6ac8:	05 c0       	rjmp	.+10     	; 0x6ad4 <vfprintf+0x298>
    6aca:	20 e1       	ldi	r18, 0x10	; 16
    6acc:	30 e0       	ldi	r19, 0x00	; 0
    6ace:	02 c0       	rjmp	.+4      	; 0x6ad4 <vfprintf+0x298>
    6ad0:	20 e1       	ldi	r18, 0x10	; 16
    6ad2:	32 e0       	ldi	r19, 0x02	; 2
    6ad4:	f8 01       	movw	r30, r16
    6ad6:	b7 fe       	sbrs	r11, 7
    6ad8:	07 c0       	rjmp	.+14     	; 0x6ae8 <vfprintf+0x2ac>
    6ada:	60 81       	ld	r22, Z
    6adc:	71 81       	ldd	r23, Z+1	; 0x01
    6ade:	82 81       	ldd	r24, Z+2	; 0x02
    6ae0:	93 81       	ldd	r25, Z+3	; 0x03
    6ae2:	0c 5f       	subi	r16, 0xFC	; 252
    6ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    6ae6:	06 c0       	rjmp	.+12     	; 0x6af4 <vfprintf+0x2b8>
    6ae8:	60 81       	ld	r22, Z
    6aea:	71 81       	ldd	r23, Z+1	; 0x01
    6aec:	80 e0       	ldi	r24, 0x00	; 0
    6aee:	90 e0       	ldi	r25, 0x00	; 0
    6af0:	0e 5f       	subi	r16, 0xFE	; 254
    6af2:	1f 4f       	sbci	r17, 0xFF	; 255
    6af4:	a3 01       	movw	r20, r6
    6af6:	f4 d0       	rcall	.+488    	; 0x6ce0 <__ultoa_invert>
    6af8:	88 2e       	mov	r8, r24
    6afa:	86 18       	sub	r8, r6
    6afc:	fb 2d       	mov	r31, r11
    6afe:	ff 77       	andi	r31, 0x7F	; 127
    6b00:	3f 2e       	mov	r3, r31
    6b02:	36 fe       	sbrs	r3, 6
    6b04:	0d c0       	rjmp	.+26     	; 0x6b20 <vfprintf+0x2e4>
    6b06:	23 2d       	mov	r18, r3
    6b08:	2e 7f       	andi	r18, 0xFE	; 254
    6b0a:	a2 2e       	mov	r10, r18
    6b0c:	89 14       	cp	r8, r9
    6b0e:	58 f4       	brcc	.+22     	; 0x6b26 <vfprintf+0x2ea>
    6b10:	34 fe       	sbrs	r3, 4
    6b12:	0b c0       	rjmp	.+22     	; 0x6b2a <vfprintf+0x2ee>
    6b14:	32 fc       	sbrc	r3, 2
    6b16:	09 c0       	rjmp	.+18     	; 0x6b2a <vfprintf+0x2ee>
    6b18:	83 2d       	mov	r24, r3
    6b1a:	8e 7e       	andi	r24, 0xEE	; 238
    6b1c:	a8 2e       	mov	r10, r24
    6b1e:	05 c0       	rjmp	.+10     	; 0x6b2a <vfprintf+0x2ee>
    6b20:	b8 2c       	mov	r11, r8
    6b22:	a3 2c       	mov	r10, r3
    6b24:	03 c0       	rjmp	.+6      	; 0x6b2c <vfprintf+0x2f0>
    6b26:	b8 2c       	mov	r11, r8
    6b28:	01 c0       	rjmp	.+2      	; 0x6b2c <vfprintf+0x2f0>
    6b2a:	b9 2c       	mov	r11, r9
    6b2c:	a4 fe       	sbrs	r10, 4
    6b2e:	0f c0       	rjmp	.+30     	; 0x6b4e <vfprintf+0x312>
    6b30:	fe 01       	movw	r30, r28
    6b32:	e8 0d       	add	r30, r8
    6b34:	f1 1d       	adc	r31, r1
    6b36:	80 81       	ld	r24, Z
    6b38:	80 33       	cpi	r24, 0x30	; 48
    6b3a:	21 f4       	brne	.+8      	; 0x6b44 <vfprintf+0x308>
    6b3c:	9a 2d       	mov	r25, r10
    6b3e:	99 7e       	andi	r25, 0xE9	; 233
    6b40:	a9 2e       	mov	r10, r25
    6b42:	09 c0       	rjmp	.+18     	; 0x6b56 <vfprintf+0x31a>
    6b44:	a2 fe       	sbrs	r10, 2
    6b46:	06 c0       	rjmp	.+12     	; 0x6b54 <vfprintf+0x318>
    6b48:	b3 94       	inc	r11
    6b4a:	b3 94       	inc	r11
    6b4c:	04 c0       	rjmp	.+8      	; 0x6b56 <vfprintf+0x31a>
    6b4e:	8a 2d       	mov	r24, r10
    6b50:	86 78       	andi	r24, 0x86	; 134
    6b52:	09 f0       	breq	.+2      	; 0x6b56 <vfprintf+0x31a>
    6b54:	b3 94       	inc	r11
    6b56:	a3 fc       	sbrc	r10, 3
    6b58:	10 c0       	rjmp	.+32     	; 0x6b7a <vfprintf+0x33e>
    6b5a:	a0 fe       	sbrs	r10, 0
    6b5c:	06 c0       	rjmp	.+12     	; 0x6b6a <vfprintf+0x32e>
    6b5e:	b2 14       	cp	r11, r2
    6b60:	80 f4       	brcc	.+32     	; 0x6b82 <vfprintf+0x346>
    6b62:	28 0c       	add	r2, r8
    6b64:	92 2c       	mov	r9, r2
    6b66:	9b 18       	sub	r9, r11
    6b68:	0d c0       	rjmp	.+26     	; 0x6b84 <vfprintf+0x348>
    6b6a:	b2 14       	cp	r11, r2
    6b6c:	58 f4       	brcc	.+22     	; 0x6b84 <vfprintf+0x348>
    6b6e:	b6 01       	movw	r22, r12
    6b70:	80 e2       	ldi	r24, 0x20	; 32
    6b72:	90 e0       	ldi	r25, 0x00	; 0
    6b74:	79 d0       	rcall	.+242    	; 0x6c68 <fputc>
    6b76:	b3 94       	inc	r11
    6b78:	f8 cf       	rjmp	.-16     	; 0x6b6a <vfprintf+0x32e>
    6b7a:	b2 14       	cp	r11, r2
    6b7c:	18 f4       	brcc	.+6      	; 0x6b84 <vfprintf+0x348>
    6b7e:	2b 18       	sub	r2, r11
    6b80:	02 c0       	rjmp	.+4      	; 0x6b86 <vfprintf+0x34a>
    6b82:	98 2c       	mov	r9, r8
    6b84:	21 2c       	mov	r2, r1
    6b86:	a4 fe       	sbrs	r10, 4
    6b88:	0f c0       	rjmp	.+30     	; 0x6ba8 <vfprintf+0x36c>
    6b8a:	b6 01       	movw	r22, r12
    6b8c:	80 e3       	ldi	r24, 0x30	; 48
    6b8e:	90 e0       	ldi	r25, 0x00	; 0
    6b90:	6b d0       	rcall	.+214    	; 0x6c68 <fputc>
    6b92:	a2 fe       	sbrs	r10, 2
    6b94:	16 c0       	rjmp	.+44     	; 0x6bc2 <vfprintf+0x386>
    6b96:	a1 fc       	sbrc	r10, 1
    6b98:	03 c0       	rjmp	.+6      	; 0x6ba0 <vfprintf+0x364>
    6b9a:	88 e7       	ldi	r24, 0x78	; 120
    6b9c:	90 e0       	ldi	r25, 0x00	; 0
    6b9e:	02 c0       	rjmp	.+4      	; 0x6ba4 <vfprintf+0x368>
    6ba0:	88 e5       	ldi	r24, 0x58	; 88
    6ba2:	90 e0       	ldi	r25, 0x00	; 0
    6ba4:	b6 01       	movw	r22, r12
    6ba6:	0c c0       	rjmp	.+24     	; 0x6bc0 <vfprintf+0x384>
    6ba8:	8a 2d       	mov	r24, r10
    6baa:	86 78       	andi	r24, 0x86	; 134
    6bac:	51 f0       	breq	.+20     	; 0x6bc2 <vfprintf+0x386>
    6bae:	a1 fe       	sbrs	r10, 1
    6bb0:	02 c0       	rjmp	.+4      	; 0x6bb6 <vfprintf+0x37a>
    6bb2:	8b e2       	ldi	r24, 0x2B	; 43
    6bb4:	01 c0       	rjmp	.+2      	; 0x6bb8 <vfprintf+0x37c>
    6bb6:	80 e2       	ldi	r24, 0x20	; 32
    6bb8:	a7 fc       	sbrc	r10, 7
    6bba:	8d e2       	ldi	r24, 0x2D	; 45
    6bbc:	b6 01       	movw	r22, r12
    6bbe:	90 e0       	ldi	r25, 0x00	; 0
    6bc0:	53 d0       	rcall	.+166    	; 0x6c68 <fputc>
    6bc2:	89 14       	cp	r8, r9
    6bc4:	30 f4       	brcc	.+12     	; 0x6bd2 <vfprintf+0x396>
    6bc6:	b6 01       	movw	r22, r12
    6bc8:	80 e3       	ldi	r24, 0x30	; 48
    6bca:	90 e0       	ldi	r25, 0x00	; 0
    6bcc:	4d d0       	rcall	.+154    	; 0x6c68 <fputc>
    6bce:	9a 94       	dec	r9
    6bd0:	f8 cf       	rjmp	.-16     	; 0x6bc2 <vfprintf+0x386>
    6bd2:	8a 94       	dec	r8
    6bd4:	f3 01       	movw	r30, r6
    6bd6:	e8 0d       	add	r30, r8
    6bd8:	f1 1d       	adc	r31, r1
    6bda:	80 81       	ld	r24, Z
    6bdc:	b6 01       	movw	r22, r12
    6bde:	90 e0       	ldi	r25, 0x00	; 0
    6be0:	43 d0       	rcall	.+134    	; 0x6c68 <fputc>
    6be2:	81 10       	cpse	r8, r1
    6be4:	f6 cf       	rjmp	.-20     	; 0x6bd2 <vfprintf+0x396>
    6be6:	22 20       	and	r2, r2
    6be8:	09 f4       	brne	.+2      	; 0x6bec <vfprintf+0x3b0>
    6bea:	4e ce       	rjmp	.-868    	; 0x6888 <vfprintf+0x4c>
    6bec:	b6 01       	movw	r22, r12
    6bee:	80 e2       	ldi	r24, 0x20	; 32
    6bf0:	90 e0       	ldi	r25, 0x00	; 0
    6bf2:	3a d0       	rcall	.+116    	; 0x6c68 <fputc>
    6bf4:	2a 94       	dec	r2
    6bf6:	f7 cf       	rjmp	.-18     	; 0x6be6 <vfprintf+0x3aa>
    6bf8:	f6 01       	movw	r30, r12
    6bfa:	86 81       	ldd	r24, Z+6	; 0x06
    6bfc:	97 81       	ldd	r25, Z+7	; 0x07
    6bfe:	02 c0       	rjmp	.+4      	; 0x6c04 <vfprintf+0x3c8>
    6c00:	8f ef       	ldi	r24, 0xFF	; 255
    6c02:	9f ef       	ldi	r25, 0xFF	; 255
    6c04:	2b 96       	adiw	r28, 0x0b	; 11
    6c06:	0f b6       	in	r0, 0x3f	; 63
    6c08:	f8 94       	cli
    6c0a:	de bf       	out	0x3e, r29	; 62
    6c0c:	0f be       	out	0x3f, r0	; 63
    6c0e:	cd bf       	out	0x3d, r28	; 61
    6c10:	df 91       	pop	r29
    6c12:	cf 91       	pop	r28
    6c14:	1f 91       	pop	r17
    6c16:	0f 91       	pop	r16
    6c18:	ff 90       	pop	r15
    6c1a:	ef 90       	pop	r14
    6c1c:	df 90       	pop	r13
    6c1e:	cf 90       	pop	r12
    6c20:	bf 90       	pop	r11
    6c22:	af 90       	pop	r10
    6c24:	9f 90       	pop	r9
    6c26:	8f 90       	pop	r8
    6c28:	7f 90       	pop	r7
    6c2a:	6f 90       	pop	r6
    6c2c:	5f 90       	pop	r5
    6c2e:	4f 90       	pop	r4
    6c30:	3f 90       	pop	r3
    6c32:	2f 90       	pop	r2
    6c34:	08 95       	ret

00006c36 <__ctype_isfalse>:
    6c36:	99 27       	eor	r25, r25
    6c38:	88 27       	eor	r24, r24

00006c3a <__ctype_istrue>:
    6c3a:	08 95       	ret

00006c3c <strnlen_P>:
    6c3c:	fc 01       	movw	r30, r24
    6c3e:	05 90       	lpm	r0, Z+
    6c40:	61 50       	subi	r22, 0x01	; 1
    6c42:	70 40       	sbci	r23, 0x00	; 0
    6c44:	01 10       	cpse	r0, r1
    6c46:	d8 f7       	brcc	.-10     	; 0x6c3e <strnlen_P+0x2>
    6c48:	80 95       	com	r24
    6c4a:	90 95       	com	r25
    6c4c:	8e 0f       	add	r24, r30
    6c4e:	9f 1f       	adc	r25, r31
    6c50:	08 95       	ret

00006c52 <strnlen>:
    6c52:	fc 01       	movw	r30, r24
    6c54:	61 50       	subi	r22, 0x01	; 1
    6c56:	70 40       	sbci	r23, 0x00	; 0
    6c58:	01 90       	ld	r0, Z+
    6c5a:	01 10       	cpse	r0, r1
    6c5c:	d8 f7       	brcc	.-10     	; 0x6c54 <strnlen+0x2>
    6c5e:	80 95       	com	r24
    6c60:	90 95       	com	r25
    6c62:	8e 0f       	add	r24, r30
    6c64:	9f 1f       	adc	r25, r31
    6c66:	08 95       	ret

00006c68 <fputc>:
    6c68:	0f 93       	push	r16
    6c6a:	1f 93       	push	r17
    6c6c:	cf 93       	push	r28
    6c6e:	df 93       	push	r29
    6c70:	fb 01       	movw	r30, r22
    6c72:	23 81       	ldd	r18, Z+3	; 0x03
    6c74:	21 fd       	sbrc	r18, 1
    6c76:	03 c0       	rjmp	.+6      	; 0x6c7e <fputc+0x16>
    6c78:	8f ef       	ldi	r24, 0xFF	; 255
    6c7a:	9f ef       	ldi	r25, 0xFF	; 255
    6c7c:	2c c0       	rjmp	.+88     	; 0x6cd6 <fputc+0x6e>
    6c7e:	22 ff       	sbrs	r18, 2
    6c80:	16 c0       	rjmp	.+44     	; 0x6cae <fputc+0x46>
    6c82:	46 81       	ldd	r20, Z+6	; 0x06
    6c84:	57 81       	ldd	r21, Z+7	; 0x07
    6c86:	24 81       	ldd	r18, Z+4	; 0x04
    6c88:	35 81       	ldd	r19, Z+5	; 0x05
    6c8a:	42 17       	cp	r20, r18
    6c8c:	53 07       	cpc	r21, r19
    6c8e:	44 f4       	brge	.+16     	; 0x6ca0 <fputc+0x38>
    6c90:	a0 81       	ld	r26, Z
    6c92:	b1 81       	ldd	r27, Z+1	; 0x01
    6c94:	9d 01       	movw	r18, r26
    6c96:	2f 5f       	subi	r18, 0xFF	; 255
    6c98:	3f 4f       	sbci	r19, 0xFF	; 255
    6c9a:	31 83       	std	Z+1, r19	; 0x01
    6c9c:	20 83       	st	Z, r18
    6c9e:	8c 93       	st	X, r24
    6ca0:	26 81       	ldd	r18, Z+6	; 0x06
    6ca2:	37 81       	ldd	r19, Z+7	; 0x07
    6ca4:	2f 5f       	subi	r18, 0xFF	; 255
    6ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    6ca8:	37 83       	std	Z+7, r19	; 0x07
    6caa:	26 83       	std	Z+6, r18	; 0x06
    6cac:	14 c0       	rjmp	.+40     	; 0x6cd6 <fputc+0x6e>
    6cae:	8b 01       	movw	r16, r22
    6cb0:	ec 01       	movw	r28, r24
    6cb2:	fb 01       	movw	r30, r22
    6cb4:	00 84       	ldd	r0, Z+8	; 0x08
    6cb6:	f1 85       	ldd	r31, Z+9	; 0x09
    6cb8:	e0 2d       	mov	r30, r0
    6cba:	09 95       	icall
    6cbc:	89 2b       	or	r24, r25
    6cbe:	e1 f6       	brne	.-72     	; 0x6c78 <fputc+0x10>
    6cc0:	d8 01       	movw	r26, r16
    6cc2:	16 96       	adiw	r26, 0x06	; 6
    6cc4:	8d 91       	ld	r24, X+
    6cc6:	9c 91       	ld	r25, X
    6cc8:	17 97       	sbiw	r26, 0x07	; 7
    6cca:	01 96       	adiw	r24, 0x01	; 1
    6ccc:	17 96       	adiw	r26, 0x07	; 7
    6cce:	9c 93       	st	X, r25
    6cd0:	8e 93       	st	-X, r24
    6cd2:	16 97       	sbiw	r26, 0x06	; 6
    6cd4:	ce 01       	movw	r24, r28
    6cd6:	df 91       	pop	r29
    6cd8:	cf 91       	pop	r28
    6cda:	1f 91       	pop	r17
    6cdc:	0f 91       	pop	r16
    6cde:	08 95       	ret

00006ce0 <__ultoa_invert>:
    6ce0:	fa 01       	movw	r30, r20
    6ce2:	aa 27       	eor	r26, r26
    6ce4:	28 30       	cpi	r18, 0x08	; 8
    6ce6:	51 f1       	breq	.+84     	; 0x6d3c <__ultoa_invert+0x5c>
    6ce8:	20 31       	cpi	r18, 0x10	; 16
    6cea:	81 f1       	breq	.+96     	; 0x6d4c <__ultoa_invert+0x6c>
    6cec:	e8 94       	clt
    6cee:	6f 93       	push	r22
    6cf0:	6e 7f       	andi	r22, 0xFE	; 254
    6cf2:	6e 5f       	subi	r22, 0xFE	; 254
    6cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    6cf6:	8f 4f       	sbci	r24, 0xFF	; 255
    6cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    6cfa:	af 4f       	sbci	r26, 0xFF	; 255
    6cfc:	b1 e0       	ldi	r27, 0x01	; 1
    6cfe:	3e d0       	rcall	.+124    	; 0x6d7c <__ultoa_invert+0x9c>
    6d00:	b4 e0       	ldi	r27, 0x04	; 4
    6d02:	3c d0       	rcall	.+120    	; 0x6d7c <__ultoa_invert+0x9c>
    6d04:	67 0f       	add	r22, r23
    6d06:	78 1f       	adc	r23, r24
    6d08:	89 1f       	adc	r24, r25
    6d0a:	9a 1f       	adc	r25, r26
    6d0c:	a1 1d       	adc	r26, r1
    6d0e:	68 0f       	add	r22, r24
    6d10:	79 1f       	adc	r23, r25
    6d12:	8a 1f       	adc	r24, r26
    6d14:	91 1d       	adc	r25, r1
    6d16:	a1 1d       	adc	r26, r1
    6d18:	6a 0f       	add	r22, r26
    6d1a:	71 1d       	adc	r23, r1
    6d1c:	81 1d       	adc	r24, r1
    6d1e:	91 1d       	adc	r25, r1
    6d20:	a1 1d       	adc	r26, r1
    6d22:	20 d0       	rcall	.+64     	; 0x6d64 <__ultoa_invert+0x84>
    6d24:	09 f4       	brne	.+2      	; 0x6d28 <__ultoa_invert+0x48>
    6d26:	68 94       	set
    6d28:	3f 91       	pop	r19
    6d2a:	2a e0       	ldi	r18, 0x0A	; 10
    6d2c:	26 9f       	mul	r18, r22
    6d2e:	11 24       	eor	r1, r1
    6d30:	30 19       	sub	r19, r0
    6d32:	30 5d       	subi	r19, 0xD0	; 208
    6d34:	31 93       	st	Z+, r19
    6d36:	de f6       	brtc	.-74     	; 0x6cee <__ultoa_invert+0xe>
    6d38:	cf 01       	movw	r24, r30
    6d3a:	08 95       	ret
    6d3c:	46 2f       	mov	r20, r22
    6d3e:	47 70       	andi	r20, 0x07	; 7
    6d40:	40 5d       	subi	r20, 0xD0	; 208
    6d42:	41 93       	st	Z+, r20
    6d44:	b3 e0       	ldi	r27, 0x03	; 3
    6d46:	0f d0       	rcall	.+30     	; 0x6d66 <__ultoa_invert+0x86>
    6d48:	c9 f7       	brne	.-14     	; 0x6d3c <__ultoa_invert+0x5c>
    6d4a:	f6 cf       	rjmp	.-20     	; 0x6d38 <__ultoa_invert+0x58>
    6d4c:	46 2f       	mov	r20, r22
    6d4e:	4f 70       	andi	r20, 0x0F	; 15
    6d50:	40 5d       	subi	r20, 0xD0	; 208
    6d52:	4a 33       	cpi	r20, 0x3A	; 58
    6d54:	18 f0       	brcs	.+6      	; 0x6d5c <__ultoa_invert+0x7c>
    6d56:	49 5d       	subi	r20, 0xD9	; 217
    6d58:	31 fd       	sbrc	r19, 1
    6d5a:	40 52       	subi	r20, 0x20	; 32
    6d5c:	41 93       	st	Z+, r20
    6d5e:	02 d0       	rcall	.+4      	; 0x6d64 <__ultoa_invert+0x84>
    6d60:	a9 f7       	brne	.-22     	; 0x6d4c <__ultoa_invert+0x6c>
    6d62:	ea cf       	rjmp	.-44     	; 0x6d38 <__ultoa_invert+0x58>
    6d64:	b4 e0       	ldi	r27, 0x04	; 4
    6d66:	a6 95       	lsr	r26
    6d68:	97 95       	ror	r25
    6d6a:	87 95       	ror	r24
    6d6c:	77 95       	ror	r23
    6d6e:	67 95       	ror	r22
    6d70:	ba 95       	dec	r27
    6d72:	c9 f7       	brne	.-14     	; 0x6d66 <__ultoa_invert+0x86>
    6d74:	00 97       	sbiw	r24, 0x00	; 0
    6d76:	61 05       	cpc	r22, r1
    6d78:	71 05       	cpc	r23, r1
    6d7a:	08 95       	ret
    6d7c:	9b 01       	movw	r18, r22
    6d7e:	ac 01       	movw	r20, r24
    6d80:	0a 2e       	mov	r0, r26
    6d82:	06 94       	lsr	r0
    6d84:	57 95       	ror	r21
    6d86:	47 95       	ror	r20
    6d88:	37 95       	ror	r19
    6d8a:	27 95       	ror	r18
    6d8c:	ba 95       	dec	r27
    6d8e:	c9 f7       	brne	.-14     	; 0x6d82 <__ultoa_invert+0xa2>
    6d90:	62 0f       	add	r22, r18
    6d92:	73 1f       	adc	r23, r19
    6d94:	84 1f       	adc	r24, r20
    6d96:	95 1f       	adc	r25, r21
    6d98:	a0 1d       	adc	r26, r0
    6d9a:	08 95       	ret

00006d9c <eeprom_read_byte>:
    6d9c:	f9 99       	sbic	0x1f, 1	; 31
    6d9e:	fe cf       	rjmp	.-4      	; 0x6d9c <eeprom_read_byte>
    6da0:	92 bd       	out	0x22, r25	; 34
    6da2:	81 bd       	out	0x21, r24	; 33
    6da4:	f8 9a       	sbi	0x1f, 0	; 31
    6da6:	99 27       	eor	r25, r25
    6da8:	80 b5       	in	r24, 0x20	; 32
    6daa:	08 95       	ret

00006dac <eeprom_write_byte>:
    6dac:	26 2f       	mov	r18, r22

00006dae <eeprom_write_r18>:
    6dae:	f9 99       	sbic	0x1f, 1	; 31
    6db0:	fe cf       	rjmp	.-4      	; 0x6dae <eeprom_write_r18>
    6db2:	1f ba       	out	0x1f, r1	; 31
    6db4:	92 bd       	out	0x22, r25	; 34
    6db6:	81 bd       	out	0x21, r24	; 33
    6db8:	20 bd       	out	0x20, r18	; 32
    6dba:	0f b6       	in	r0, 0x3f	; 63
    6dbc:	f8 94       	cli
    6dbe:	fa 9a       	sbi	0x1f, 2	; 31
    6dc0:	f9 9a       	sbi	0x1f, 1	; 31
    6dc2:	0f be       	out	0x3f, r0	; 63
    6dc4:	01 96       	adiw	r24, 0x01	; 1
    6dc6:	08 95       	ret

00006dc8 <_exit>:
    6dc8:	f8 94       	cli

00006dca <__stop_program>:
    6dca:	ff cf       	rjmp	.-2      	; 0x6dca <__stop_program>
