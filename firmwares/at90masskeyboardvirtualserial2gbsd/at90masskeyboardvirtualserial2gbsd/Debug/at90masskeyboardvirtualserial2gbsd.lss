
at90masskeyboardvirtualserial2gbsd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000422  00800100  0000349c  00003530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000349c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000457  00800522  00800522  00003952  2**0
                  ALLOC
  3 .noinit       00000004  00800979  00800979  00003952  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00003952  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000039b0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000005f0  00000000  00000000  000039f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000b492  00000000  00000000  00003fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002fd9  00000000  00000000  0000f472  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000e95c  00000000  00000000  0001244b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001320  00000000  00000000  00020da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000197e8  00000000  00000000  000220c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000069d9  00000000  00000000  0003b8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000808  00000000  00000000  00042289  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00009129  00000000  00000000  00042a91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	b0 c0       	rjmp	.+352    	; 0x166 <__bad_interrupt>
       6:	00 00       	nop
       8:	ae c0       	rjmp	.+348    	; 0x166 <__bad_interrupt>
       a:	00 00       	nop
       c:	ac c0       	rjmp	.+344    	; 0x166 <__bad_interrupt>
       e:	00 00       	nop
      10:	aa c0       	rjmp	.+340    	; 0x166 <__bad_interrupt>
      12:	00 00       	nop
      14:	a8 c0       	rjmp	.+336    	; 0x166 <__bad_interrupt>
      16:	00 00       	nop
      18:	a6 c0       	rjmp	.+332    	; 0x166 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a4 c0       	rjmp	.+328    	; 0x166 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a2 c0       	rjmp	.+324    	; 0x166 <__bad_interrupt>
      22:	00 00       	nop
      24:	a0 c0       	rjmp	.+320    	; 0x166 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 b6 13 	jmp	0x276c	; 0x276c <__vector_10>
      2c:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__vector_11>
      30:	9a c0       	rjmp	.+308    	; 0x166 <__bad_interrupt>
      32:	00 00       	nop
      34:	98 c0       	rjmp	.+304    	; 0x166 <__bad_interrupt>
      36:	00 00       	nop
      38:	96 c0       	rjmp	.+300    	; 0x166 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	94 c0       	rjmp	.+296    	; 0x166 <__bad_interrupt>
      3e:	00 00       	nop
      40:	92 c0       	rjmp	.+292    	; 0x166 <__bad_interrupt>
      42:	00 00       	nop
      44:	90 c0       	rjmp	.+288    	; 0x166 <__bad_interrupt>
      46:	00 00       	nop
      48:	8e c0       	rjmp	.+284    	; 0x166 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8c c0       	rjmp	.+280    	; 0x166 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8a c0       	rjmp	.+276    	; 0x166 <__bad_interrupt>
      52:	00 00       	nop
      54:	88 c0       	rjmp	.+272    	; 0x166 <__bad_interrupt>
      56:	00 00       	nop
      58:	86 c0       	rjmp	.+268    	; 0x166 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	84 c0       	rjmp	.+264    	; 0x166 <__bad_interrupt>
      5e:	00 00       	nop
      60:	82 c0       	rjmp	.+260    	; 0x166 <__bad_interrupt>
      62:	00 00       	nop
      64:	80 c0       	rjmp	.+256    	; 0x166 <__bad_interrupt>
      66:	00 00       	nop
      68:	7e c0       	rjmp	.+252    	; 0x166 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7c c0       	rjmp	.+248    	; 0x166 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7a c0       	rjmp	.+244    	; 0x166 <__bad_interrupt>
      72:	00 00       	nop
      74:	78 c0       	rjmp	.+240    	; 0x166 <__bad_interrupt>
      76:	00 00       	nop
      78:	76 c0       	rjmp	.+236    	; 0x166 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	74 c0       	rjmp	.+232    	; 0x166 <__bad_interrupt>
      7e:	00 00       	nop
      80:	72 c0       	rjmp	.+228    	; 0x166 <__bad_interrupt>
      82:	00 00       	nop
      84:	70 c0       	rjmp	.+224    	; 0x166 <__bad_interrupt>
      86:	00 00       	nop
      88:	6e c0       	rjmp	.+220    	; 0x166 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6c c0       	rjmp	.+216    	; 0x166 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6a c0       	rjmp	.+212    	; 0x166 <__bad_interrupt>
      92:	00 00       	nop
      94:	68 c0       	rjmp	.+208    	; 0x166 <__bad_interrupt>
	...

00000098 <__trampolines_end>:
      98:	52 65       	ori	r21, 0x52	; 82
      9a:	61 64       	ori	r22, 0x41	; 65
      9c:	79 0d       	add	r23, r9
      9e:	0a 00       	.word	0x000a	; ????

000000a0 <__c.4759>:
      a0:	44 69 73 63 6f 6e 6e 65 63 74 0d 0a 00              Disconnect...

000000ad <__c.4754>:
      ad:	43 6f 6e 6e 65 63 74 0d 0a 00                       Connect...

000000b7 <__c.4749>:
      b7:	68 74 74 70 73 3a 2f 2f 77 77 77 2e 66 72 33 33     https://www.fr33
      c7:	70 72 6f 6a 65 63 74 2e 6f 72 67 0d 0a 70 6f 77     project.org..pow
      d7:	65 72 65 64 20 62 79 20 4c 55 46 41 0d 0a 0d 0a     ered by LUFA....
	...

000000e8 <__c.4721>:
      e8:	52 20 25 6c 69 20 25 69 0d 0a 00                    R %li %i...

000000f3 <__c.4701>:
      f3:	57 20 25 6c 69 20 25 69 0d 0a 00                    W %li %i...

000000fe <__c.4687>:
      fe:	0d 0a 53 44 20 62 6c 6f 63 6b 73 3a 20 25 6c 69     ..SD blocks: %li
     10e:	0d 0a 00                                            ...

00000111 <__c.4681>:
     111:	0d 0a 0d 0a 00                                      .....

00000116 <__c.4679>:
     116:	66 69 72 73 74 20 53 44 20 73 65 63 74 6f 72 3a     first SD sector:
     126:	0d 0a 00 00                                         ....

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d0 e2       	ldi	r29, 0x20	; 32
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61

00000136 <__do_copy_data>:
     136:	15 e0       	ldi	r17, 0x05	; 5
     138:	a0 e0       	ldi	r26, 0x00	; 0
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	ec e9       	ldi	r30, 0x9C	; 156
     13e:	f4 e3       	ldi	r31, 0x34	; 52
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0b bf       	out	0x3b, r16	; 59
     144:	02 c0       	rjmp	.+4      	; 0x14a <__do_copy_data+0x14>
     146:	07 90       	elpm	r0, Z+
     148:	0d 92       	st	X+, r0
     14a:	a2 32       	cpi	r26, 0x22	; 34
     14c:	b1 07       	cpc	r27, r17
     14e:	d9 f7       	brne	.-10     	; 0x146 <__do_copy_data+0x10>

00000150 <__do_clear_bss>:
     150:	29 e0       	ldi	r18, 0x09	; 9
     152:	a2 e2       	ldi	r26, 0x22	; 34
     154:	b5 e0       	ldi	r27, 0x05	; 5
     156:	01 c0       	rjmp	.+2      	; 0x15a <.do_clear_bss_start>

00000158 <.do_clear_bss_loop>:
     158:	1d 92       	st	X+, r1

0000015a <.do_clear_bss_start>:
     15a:	a9 37       	cpi	r26, 0x79	; 121
     15c:	b2 07       	cpc	r27, r18
     15e:	e1 f7       	brne	.-8      	; 0x158 <.do_clear_bss_loop>
     160:	da d4       	rcall	.+2484   	; 0xb16 <main>
     162:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <_exit>

00000166 <__bad_interrupt>:
     166:	4c cf       	rjmp	.-360    	; 0x0 <__vectors>

00000168 <on_sd>:
    PORTA = 0b11111111;
    PORTB = 0b11111111;
    PORTC = 0b11111111;
    PORTD = 0b11111111;
    //PORTE = 0b11111111;
    PORTF = 0b11111111;
     168:	84 b1       	in	r24, 0x04	; 4
     16a:	80 64       	ori	r24, 0x40	; 64
     16c:	84 b9       	out	0x04, r24	; 4
     16e:	85 b1       	in	r24, 0x05	; 5
     170:	8f 7b       	andi	r24, 0xBF	; 191
     172:	85 b9       	out	0x05, r24	; 5
     174:	08 95       	ret

00000176 <uart_putc>:
     176:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     17a:	95 ff       	sbrs	r25, 5
     17c:	fc cf       	rjmp	.-8      	; 0x176 <uart_putc>
     17e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     182:	08 95       	ret

00000184 <uart_puts>:
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	ec 01       	movw	r28, r24
     18a:	0f c0       	rjmp	.+30     	; 0x1aa <uart_puts+0x26>
     18c:	8a 30       	cpi	r24, 0x0A	; 10
     18e:	49 f4       	brne	.+18     	; 0x1a2 <uart_puts+0x1e>
     190:	90 91 22 05 	lds	r25, 0x0522	; 0x800522 <__data_end>
     194:	9d 30       	cpi	r25, 0x0D	; 13
     196:	29 f0       	breq	.+10     	; 0x1a2 <uart_puts+0x1e>
     198:	8d e0       	ldi	r24, 0x0D	; 13
     19a:	ed df       	rcall	.-38     	; 0x176 <uart_putc>
     19c:	8a e0       	ldi	r24, 0x0A	; 10
     19e:	eb df       	rcall	.-42     	; 0x176 <uart_putc>
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <uart_puts+0x20>
     1a2:	e9 df       	rcall	.-46     	; 0x176 <uart_putc>
     1a4:	89 91       	ld	r24, Y+
     1a6:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <__data_end>
     1aa:	88 81       	ld	r24, Y
     1ac:	81 11       	cpse	r24, r1
     1ae:	ee cf       	rjmp	.-36     	; 0x18c <uart_puts+0x8>
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret

000001b6 <uart_putsnl>:
     1b6:	e6 df       	rcall	.-52     	; 0x184 <uart_puts>
     1b8:	8b e4       	ldi	r24, 0x4B	; 75
     1ba:	94 e0       	ldi	r25, 0x04	; 4
     1bc:	e3 cf       	rjmp	.-58     	; 0x184 <uart_puts>
     1be:	08 95       	ret

000001c0 <uart_printhexchar>:
     1c0:	1f 93       	push	r17
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
     1ca:	61 97       	sbiw	r28, 0x11	; 17
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	f8 94       	cli
     1d0:	de bf       	out	0x3e, r29	; 62
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	cd bf       	out	0x3d, r28	; 61
     1d6:	18 2f       	mov	r17, r24
     1d8:	81 e1       	ldi	r24, 0x11	; 17
     1da:	e6 ea       	ldi	r30, 0xA6	; 166
     1dc:	f1 e0       	ldi	r31, 0x01	; 1
     1de:	de 01       	movw	r26, r28
     1e0:	11 96       	adiw	r26, 0x01	; 1
     1e2:	01 90       	ld	r0, Z+
     1e4:	0d 92       	st	X+, r0
     1e6:	8a 95       	dec	r24
     1e8:	e1 f7       	brne	.-8      	; 0x1e2 <uart_printhexchar+0x22>
     1ea:	81 2f       	mov	r24, r17
     1ec:	82 95       	swap	r24
     1ee:	8f 70       	andi	r24, 0x0F	; 15
     1f0:	e1 e0       	ldi	r30, 0x01	; 1
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	ec 0f       	add	r30, r28
     1f6:	fd 1f       	adc	r31, r29
     1f8:	e8 0f       	add	r30, r24
     1fa:	f1 1d       	adc	r31, r1
     1fc:	80 81       	ld	r24, Z
     1fe:	bb df       	rcall	.-138    	; 0x176 <uart_putc>
     200:	1f 70       	andi	r17, 0x0F	; 15
     202:	e1 e0       	ldi	r30, 0x01	; 1
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	ec 0f       	add	r30, r28
     208:	fd 1f       	adc	r31, r29
     20a:	e1 0f       	add	r30, r17
     20c:	f1 1d       	adc	r31, r1
     20e:	80 81       	ld	r24, Z
     210:	b2 df       	rcall	.-156    	; 0x176 <uart_putc>
     212:	61 96       	adiw	r28, 0x11	; 17
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	f8 94       	cli
     218:	de bf       	out	0x3e, r29	; 62
     21a:	0f be       	out	0x3f, r0	; 63
     21c:	cd bf       	out	0x3d, r28	; 61
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	08 95       	ret

00000226 <uart_printhexdump>:
     226:	9f 92       	push	r9
     228:	af 92       	push	r10
     22a:	bf 92       	push	r11
     22c:	cf 92       	push	r12
     22e:	df 92       	push	r13
     230:	ef 92       	push	r14
     232:	ff 92       	push	r15
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	ec 01       	movw	r28, r24
     23e:	5b 01       	movw	r10, r22
     240:	67 2b       	or	r22, r23
     242:	09 f4       	brne	.+2      	; 0x246 <uart_printhexdump+0x20>
     244:	3c c0       	rjmp	.+120    	; 0x2be <uart_printhexdump+0x98>
     246:	e1 2c       	mov	r14, r1
     248:	f1 2c       	mov	r15, r1
     24a:	32 c0       	rjmp	.+100    	; 0x2b0 <uart_printhexdump+0x8a>
     24c:	6e 01       	movw	r12, r28
     24e:	8f ef       	ldi	r24, 0xFF	; 255
     250:	c8 1a       	sub	r12, r24
     252:	d8 0a       	sbc	r13, r24
     254:	88 81       	ld	r24, Y
     256:	b4 df       	rcall	.-152    	; 0x1c0 <uart_printhexchar>
     258:	80 e2       	ldi	r24, 0x20	; 32
     25a:	8d df       	rcall	.-230    	; 0x176 <uart_putc>
     25c:	ef ef       	ldi	r30, 0xFF	; 255
     25e:	ee 1a       	sub	r14, r30
     260:	fe 0a       	sbc	r15, r30
     262:	c7 01       	movw	r24, r14
     264:	8f 70       	andi	r24, 0x0F	; 15
     266:	99 27       	eor	r25, r25
     268:	89 2b       	or	r24, r25
     26a:	29 f0       	breq	.+10     	; 0x276 <uart_printhexdump+0x50>
     26c:	c5 01       	movw	r24, r10
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	08 17       	cp	r16, r24
     272:	19 07       	cpc	r17, r25
     274:	e1 f4       	brne	.+56     	; 0x2ae <uart_printhexdump+0x88>
     276:	8e 01       	movw	r16, r28
     278:	0f 50       	subi	r16, 0x0F	; 15
     27a:	11 09       	sbc	r17, r1
     27c:	c0 e0       	ldi	r28, 0x00	; 0
     27e:	d0 e0       	ldi	r29, 0x00	; 0
     280:	10 c0       	rjmp	.+32     	; 0x2a2 <uart_printhexdump+0x7c>
     282:	f8 01       	movw	r30, r16
     284:	90 80       	ld	r9, Z
     286:	89 2d       	mov	r24, r9
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <isprint>
     28e:	89 2b       	or	r24, r25
     290:	19 f0       	breq	.+6      	; 0x298 <uart_printhexdump+0x72>
     292:	89 2d       	mov	r24, r9
     294:	70 df       	rcall	.-288    	; 0x176 <uart_putc>
     296:	02 c0       	rjmp	.+4      	; 0x29c <uart_printhexdump+0x76>
     298:	8e e2       	ldi	r24, 0x2E	; 46
     29a:	6d df       	rcall	.-294    	; 0x176 <uart_putc>
     29c:	0f 5f       	subi	r16, 0xFF	; 255
     29e:	1f 4f       	sbci	r17, 0xFF	; 255
     2a0:	21 96       	adiw	r28, 0x01	; 1
     2a2:	c0 31       	cpi	r28, 0x10	; 16
     2a4:	d1 05       	cpc	r29, r1
     2a6:	6c f3       	brlt	.-38     	; 0x282 <uart_printhexdump+0x5c>
     2a8:	8b e4       	ldi	r24, 0x4B	; 75
     2aa:	94 e0       	ldi	r25, 0x04	; 4
     2ac:	6b df       	rcall	.-298    	; 0x184 <uart_puts>
     2ae:	e6 01       	movw	r28, r12
     2b0:	87 01       	movw	r16, r14
     2b2:	ea 14       	cp	r14, r10
     2b4:	fb 04       	cpc	r15, r11
     2b6:	50 f2       	brcs	.-108    	; 0x24c <uart_printhexdump+0x26>
     2b8:	8b e4       	ldi	r24, 0x4B	; 75
     2ba:	94 e0       	ldi	r25, 0x04	; 4
     2bc:	63 df       	rcall	.-314    	; 0x184 <uart_puts>
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	cf 90       	pop	r12
     2ce:	bf 90       	pop	r11
     2d0:	af 90       	pop	r10
     2d2:	9f 90       	pop	r9
     2d4:	08 95       	ret

000002d6 <SPI_init>:
    //PORTG = 0b00011111;
}

void SPI_init(void)
{
    CS_DDR |= CS; // SD card circuit select as output
     2d6:	84 b1       	in	r24, 0x04	; 4
     2d8:	81 60       	ori	r24, 0x01	; 1
     2da:	84 b9       	out	0x04, r24	; 4
    DDRB |= MOSI + SCK; // MOSI and SCK as outputs
     2dc:	84 b1       	in	r24, 0x04	; 4
     2de:	86 60       	ori	r24, 0x06	; 6
     2e0:	84 b9       	out	0x04, r24	; 4
    PORTB |= MISO; // pullup in MISO, might not be needed
     2e2:	85 b1       	in	r24, 0x05	; 5
     2e4:	88 60       	ori	r24, 0x08	; 8
     2e6:	85 b9       	out	0x05, r24	; 5
     2e8:	08 95       	ret

000002ea <SPI_write>:
}

unsigned char SPI_write(uint8_t ch)
{
    SPDR = ch;
     2ea:	8e bd       	out	0x2e, r24	; 46
    while (!(SPSR & (1 << SPIF))) {}
     2ec:	0d b4       	in	r0, 0x2d	; 45
     2ee:	07 fe       	sbrs	r0, 7
     2f0:	fd cf       	rjmp	.-6      	; 0x2ec <SPI_write+0x2>
    return SPDR;
     2f2:	8e b5       	in	r24, 0x2e	; 46
}
     2f4:	08 95       	ret

000002f6 <wait_sd_some_cycl>:

void wait_sd_some_cycl(void)
{
    SPI_write(0xFF);
     2f6:	8f ef       	ldi	r24, 0xFF	; 255
     2f8:	f8 df       	rcall	.-16     	; 0x2ea <SPI_write>
    SPI_write(0xFF);
     2fa:	8f ef       	ldi	r24, 0xFF	; 255
     2fc:	f6 df       	rcall	.-20     	; 0x2ea <SPI_write>
    SPI_write(0xFF);
     2fe:	8f ef       	ldi	r24, 0xFF	; 255
     300:	f4 df       	rcall	.-24     	; 0x2ea <SPI_write>
    SPI_write(0xFF);
     302:	8f ef       	ldi	r24, 0xFF	; 255
     304:	f2 df       	rcall	.-28     	; 0x2ea <SPI_write>
    SPI_write(0xFF);
     306:	8f ef       	ldi	r24, 0xFF	; 255
     308:	f0 df       	rcall	.-32     	; 0x2ea <SPI_write>
    SPI_write(0xFF);
     30a:	8f ef       	ldi	r24, 0xFF	; 255
     30c:	ee df       	rcall	.-36     	; 0x2ea <SPI_write>
    SPI_write(0xFF);
     30e:	8f ef       	ldi	r24, 0xFF	; 255
     310:	ec df       	rcall	.-40     	; 0x2ea <SPI_write>
    SPI_write(0xFF);
     312:	8f ef       	ldi	r24, 0xFF	; 255
     314:	ea df       	rcall	.-44     	; 0x2ea <SPI_write>
     316:	8f ef       	ldi	r24, 0xFF	; 255
    SPI_write(0xFF);
     318:	e8 df       	rcall	.-48     	; 0x2ea <SPI_write>
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	e6 cf       	rjmp	.-52     	; 0x2ea <SPI_write>
    SPI_write(0xFF);
     31e:	08 95       	ret

00000320 <read_spi_while_byte_is_not>:
     320:	8f 92       	push	r8
     322:	9f 92       	push	r9
     324:	af 92       	push	r10
}


bool read_spi_while_byte_is_not(uint8_t byte, uint32_t max_timeout)
{
     326:	bf 92       	push	r11
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	cf 93       	push	r28
     332:	c8 2f       	mov	r28, r24
     334:	4a 01       	movw	r8, r20
     336:	5b 01       	movw	r10, r22
    for (uint32_t i = 0; i < max_timeout; i++)
     338:	c1 2c       	mov	r12, r1
     33a:	d1 2c       	mov	r13, r1
     33c:	76 01       	movw	r14, r12
     33e:	18 c0       	rjmp	.+48     	; 0x370 <read_spi_while_byte_is_not+0x50>
    {
        if (SPI_write(0xFF) == byte)
     340:	8f ef       	ldi	r24, 0xFF	; 255
     342:	d3 df       	rcall	.-90     	; 0x2ea <SPI_write>
     344:	8c 17       	cp	r24, r28
     346:	f1 f0       	breq	.+60     	; 0x384 <read_spi_while_byte_is_not+0x64>
        {
            return true;
        }

        if ((i + 1) % 1000 == 0)
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	c8 1a       	sub	r12, r24
     34c:	d8 0a       	sbc	r13, r24
     34e:	e8 0a       	sbc	r14, r24
     350:	f8 0a       	sbc	r15, r24
     352:	c7 01       	movw	r24, r14
     354:	b6 01       	movw	r22, r12
     356:	28 ee       	ldi	r18, 0xE8	; 232
     358:	33 e0       	ldi	r19, 0x03	; 3
     35a:	40 e0       	ldi	r20, 0x00	; 0
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <__udivmodsi4>
     362:	67 2b       	or	r22, r23
     364:	68 2b       	or	r22, r24
     366:	69 2b       	or	r22, r25
     368:	19 f4       	brne	.+6      	; 0x370 <read_spi_while_byte_is_not+0x50>
        {
            uart_putsnl("\r\nsd waiting for data...");
     36a:	87 eb       	ldi	r24, 0xB7	; 183
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	23 df       	rcall	.-442    	; 0x1b6 <uart_putsnl>
}


bool read_spi_while_byte_is_not(uint8_t byte, uint32_t max_timeout)
{
    for (uint32_t i = 0; i < max_timeout; i++)
     370:	c8 14       	cp	r12, r8
     372:	d9 04       	cpc	r13, r9
     374:	ea 04       	cpc	r14, r10
     376:	fb 04       	cpc	r15, r11
     378:	18 f3       	brcs	.-58     	; 0x340 <read_spi_while_byte_is_not+0x20>
        {
            uart_putsnl("\r\nsd waiting for data...");
        }
    }

    uart_putsnl("\r\nERROR sd waiting for data timeout...");
     37a:	80 ed       	ldi	r24, 0xD0	; 208
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	1b df       	rcall	.-458    	; 0x1b6 <uart_putsnl>

    return false;
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	01 c0       	rjmp	.+2      	; 0x386 <read_spi_while_byte_is_not+0x66>
{
    for (uint32_t i = 0; i < max_timeout; i++)
    {
        if (SPI_write(0xFF) == byte)
        {
            return true;
     384:	81 e0       	ldi	r24, 0x01	; 1
    }

    uart_putsnl("\r\nERROR sd waiting for data timeout...");

    return false;
}
     386:	cf 91       	pop	r28
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	bf 90       	pop	r11
     392:	af 90       	pop	r10
     394:	9f 90       	pop	r9
     396:	8f 90       	pop	r8
     398:	08 95       	ret

0000039a <SD_command>:

unsigned char SD_command(unsigned char cmd,
                         unsigned long arg,
                         unsigned char crc,
                         unsigned char read)
{
     39a:	bf 92       	push	r11
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
     3b0:	a0 97       	sbiw	r28, 0x20	; 32
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	de bf       	out	0x3e, r29	; 62
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	cd bf       	out	0x3d, r28	; 61
     3bc:	18 2f       	mov	r17, r24
     3be:	e4 2e       	mov	r14, r20
     3c0:	d5 2e       	mov	r13, r21
     3c2:	c6 2e       	mov	r12, r22
     3c4:	b7 2e       	mov	r11, r23
     3c6:	f2 2e       	mov	r15, r18
    unsigned char i;
    unsigned char buffer[32] = { 0 };
     3c8:	fe 01       	movw	r30, r28
     3ca:	31 96       	adiw	r30, 0x01	; 1
     3cc:	80 e2       	ldi	r24, 0x20	; 32
     3ce:	df 01       	movw	r26, r30
     3d0:	1d 92       	st	X+, r1
     3d2:	8a 95       	dec	r24
     3d4:	e9 f7       	brne	.-6      	; 0x3d0 <SD_command+0x36>
    unsigned char ret = 0xFF;

    wait_sd_some_cycl();
     3d6:	8f df       	rcall	.-226    	; 0x2f6 <wait_sd_some_cycl>

    uart_puts("CMD ");
     3d8:	87 ef       	ldi	r24, 0xF7	; 247
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	d3 de       	rcall	.-602    	; 0x184 <uart_puts>
    uart_printhexchar(cmd);
     3de:	81 2f       	mov	r24, r17
     3e0:	ef de       	rcall	.-546    	; 0x1c0 <uart_printhexchar>
    uart_putc(' ');
     3e2:	80 e2       	ldi	r24, 0x20	; 32
     3e4:	c8 de       	rcall	.-624    	; 0x176 <uart_putc>

    SPI_write(cmd);
     3e6:	81 2f       	mov	r24, r17
     3e8:	80 df       	rcall	.-256    	; 0x2ea <SPI_write>
    SPI_write(arg >> 24);
     3ea:	8b 2d       	mov	r24, r11
     3ec:	7e df       	rcall	.-260    	; 0x2ea <SPI_write>
    SPI_write(arg >> 16);
     3ee:	8c 2d       	mov	r24, r12
     3f0:	7c df       	rcall	.-264    	; 0x2ea <SPI_write>
    SPI_write(arg >> 8);
     3f2:	8d 2d       	mov	r24, r13
     3f4:	7a df       	rcall	.-268    	; 0x2ea <SPI_write>
     3f6:	8e 2d       	mov	r24, r14
    SPI_write(arg);
     3f8:	78 df       	rcall	.-272    	; 0x2ea <SPI_write>
     3fa:	8f 2d       	mov	r24, r15
    SPI_write(crc);
     3fc:	76 df       	rcall	.-276    	; 0x2ea <SPI_write>
     3fe:	10 e0       	ldi	r17, 0x00	; 0
     400:	0c c0       	rjmp	.+24     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>

    for (i = 0; i < read; i++)
     402:	e1 2e       	mov	r14, r17
     404:	f1 2c       	mov	r15, r1
    {
        buffer[i] = SPI_write(0xFF);
     406:	8f ef       	ldi	r24, 0xFF	; 255
     408:	70 df       	rcall	.-288    	; 0x2ea <SPI_write>
     40a:	e1 e0       	ldi	r30, 0x01	; 1
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	ec 0f       	add	r30, r28
     410:	fd 1f       	adc	r31, r29
     412:	ee 0d       	add	r30, r14
     414:	ff 1d       	adc	r31, r15
     416:	80 83       	st	Z, r24
     418:	1f 5f       	subi	r17, 0xFF	; 255
     41a:	10 17       	cp	r17, r16
     41c:	90 f3       	brcs	.-28     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
    SPI_write(arg >> 16);
    SPI_write(arg >> 8);
    SPI_write(arg);
    SPI_write(crc);

    for (i = 0; i < read; i++)
     41e:	ee 24       	eor	r14, r14
     420:	ea 94       	dec	r14
     422:	f1 2c       	mov	r15, r1
     424:	10 c0       	rjmp	.+32     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     426:	e1 e0       	ldi	r30, 0x01	; 1
     428:	f0 e0       	ldi	r31, 0x00	; 0
        buffer[i] = SPI_write(0xFF);
    }

    for (i = 0; i < read; i++)
    {
        uart_printhexchar(buffer[i]);
     42a:	ec 0f       	add	r30, r28
     42c:	fd 1f       	adc	r31, r29
     42e:	ef 0d       	add	r30, r15
     430:	f1 1d       	adc	r31, r1
     432:	10 81       	ld	r17, Z
     434:	81 2f       	mov	r24, r17
     436:	c4 de       	rcall	.-632    	; 0x1c0 <uart_printhexchar>
     438:	80 e2       	ldi	r24, 0x20	; 32
     43a:	9d de       	rcall	.-710    	; 0x176 <uart_putc>
        uart_putc(' ');
     43c:	1f 3f       	cpi	r17, 0xFF	; 255
     43e:	09 f4       	brne	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     440:	1e 2d       	mov	r17, r14
        if (buffer[i] != 0xFF)
     442:	f3 94       	inc	r15
     444:	e1 2e       	mov	r14, r17
     446:	f0 16       	cp	r15, r16
    for (i = 0; i < read; i++)
    {
        buffer[i] = SPI_write(0xFF);
    }

    for (i = 0; i < read; i++)
     448:	70 f3       	brcs	.-36     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     44a:	8b e4       	ldi	r24, 0x4B	; 75
     44c:	94 e0       	ldi	r25, 0x04	; 4
     44e:	9a de       	rcall	.-716    	; 0x184 <uart_puts>
        {
            ret = buffer[i];
        }
    }

    uart_puts("\r\n");
     450:	8e 2d       	mov	r24, r14
     452:	a0 96       	adiw	r28, 0x20	; 32
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli

    return ret;
}
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	ff 90       	pop	r15
     468:	ef 90       	pop	r14
     46a:	df 90       	pop	r13
     46c:	cf 90       	pop	r12
     46e:	bf 90       	pop	r11
     470:	08 95       	ret

00000472 <SD_init>:
     472:	0f 93       	push	r16
     474:	cf 93       	push	r28
     476:	82 e5       	ldi	r24, 0x52	; 82
     478:	8c bd       	out	0x2c, r24	; 44
{
    char i;

    SPI_SLOW();
    // ]r:10
    CS_DISABLE();
     47a:	85 b1       	in	r24, 0x05	; 5
     47c:	81 60       	ori	r24, 0x01	; 1
     47e:	85 b9       	out	0x05, r24	; 5
    for (i = 0; i < 10; i++) // idle for 1 bytes / 80 clocks
     480:	c0 e0       	ldi	r28, 0x00	; 0
     482:	03 c0       	rjmp	.+6      	; 0x48a <SD_init+0x18>
    {
        SPI_write(0xFF);
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	31 df       	rcall	.-414    	; 0x2ea <SPI_write>
    char i;

    SPI_SLOW();
    // ]r:10
    CS_DISABLE();
    for (i = 0; i < 10; i++) // idle for 1 bytes / 80 clocks
     488:	cf 5f       	subi	r28, 0xFF	; 255
     48a:	ca 30       	cpi	r28, 0x0A	; 10
     48c:	d8 f3       	brcs	.-10     	; 0x484 <SD_init+0x12>
    {
        SPI_write(0xFF);
    }

    uart_putsnl("clearing sd...");
     48e:	8c ef       	ldi	r24, 0xFC	; 252
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	91 de       	rcall	.-734    	; 0x1b6 <uart_putsnl>
    CS_ENABLE();
     494:	85 b1       	in	r24, 0x05	; 5
     496:	8e 7f       	andi	r24, 0xFE	; 254
     498:	85 b9       	out	0x05, r24	; 5
    if (!read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
     49a:	40 ea       	ldi	r20, 0xA0	; 160
     49c:	56 e8       	ldi	r21, 0x86	; 134
     49e:	61 e0       	ldi	r22, 0x01	; 1
     4a0:	70 e0       	ldi	r23, 0x00	; 0
     4a2:	8f ef       	ldi	r24, 0xFF	; 255
     4a4:	3d df       	rcall	.-390    	; 0x320 <read_spi_while_byte_is_not>
     4a6:	88 23       	and	r24, r24
     4a8:	09 f4       	brne	.+2      	; 0x4ac <SD_init+0x3a>
     4aa:	53 c0       	rjmp	.+166    	; 0x552 <SD_init+0xe0>
    {
        return SD_INIT_ERR_CANT_CLEAR;
    }
    CS_DISABLE();
     4ac:	85 b1       	in	r24, 0x05	; 5
     4ae:	81 60       	ori	r24, 0x01	; 1
     4b0:	85 b9       	out	0x05, r24	; 5

    // [0x40 0x00 0x00 0x00 0x00 0x95 r:8] until we get "1"
    for (i = 0; i < 10; i++)
     4b2:	c0 e0       	ldi	r28, 0x00	; 0
     4b4:	19 c0       	rjmp	.+50     	; 0x4e8 <SD_init+0x76>
    {
        CS_ENABLE();
     4b6:	85 b1       	in	r24, 0x05	; 5
     4b8:	8e 7f       	andi	r24, 0xFE	; 254
     4ba:	85 b9       	out	0x05, r24	; 5
        if (SD_command(CMD0, 0x00000000, 0x95, 8) == 1)
     4bc:	08 e0       	ldi	r16, 0x08	; 8
     4be:	25 e9       	ldi	r18, 0x95	; 149
     4c0:	40 e0       	ldi	r20, 0x00	; 0
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	ba 01       	movw	r22, r20
     4c6:	80 e4       	ldi	r24, 0x40	; 64
     4c8:	68 df       	rcall	.-304    	; 0x39a <SD_command>
     4ca:	81 30       	cpi	r24, 0x01	; 1
     4cc:	79 f0       	breq	.+30     	; 0x4ec <SD_init+0x7a>
        {
            break;
        }
        CS_DISABLE();
     4ce:	85 b1       	in	r24, 0x05	; 5
     4d0:	81 60       	ori	r24, 0x01	; 1
     4d2:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d4:	2f ef       	ldi	r18, 0xFF	; 255
     4d6:	81 ee       	ldi	r24, 0xE1	; 225
     4d8:	94 e0       	ldi	r25, 0x04	; 4
     4da:	21 50       	subi	r18, 0x01	; 1
     4dc:	80 40       	sbci	r24, 0x00	; 0
     4de:	90 40       	sbci	r25, 0x00	; 0
     4e0:	e1 f7       	brne	.-8      	; 0x4da <SD_init+0x68>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <SD_init+0x72>
     4e4:	00 00       	nop
        return SD_INIT_ERR_CANT_CLEAR;
    }
    CS_DISABLE();

    // [0x40 0x00 0x00 0x00 0x00 0x95 r:8] until we get "1"
    for (i = 0; i < 10; i++)
     4e6:	cf 5f       	subi	r28, 0xFF	; 255
     4e8:	ca 30       	cpi	r28, 0x0A	; 10
     4ea:	28 f3       	brcs	.-54     	; 0x4b6 <SD_init+0x44>
            break;
        }
        CS_DISABLE();
        _delay_ms(100);
    }
    if (i == 10) // card did not respond to initialization
     4ec:	ca 30       	cpi	r28, 0x0A	; 10
     4ee:	99 f1       	breq	.+102    	; 0x556 <SD_init+0xe4>
     4f0:	c0 e0       	ldi	r28, 0x00	; 0
     4f2:	19 c0       	rjmp	.+50     	; 0x526 <SD_init+0xb4>
    }

    // CMD1 until card comes out of idle, but maximum of 10 times
    for (i = 0; i < 10; i++)
    {
        CS_ENABLE();
     4f4:	85 b1       	in	r24, 0x05	; 5
     4f6:	8e 7f       	andi	r24, 0xFE	; 254
     4f8:	85 b9       	out	0x05, r24	; 5
        if (SD_command(CMD1, 0x00000000, 0xFF, 8) == 0)
     4fa:	08 e0       	ldi	r16, 0x08	; 8
     4fc:	2f ef       	ldi	r18, 0xFF	; 255
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	ba 01       	movw	r22, r20
     504:	81 e4       	ldi	r24, 0x41	; 65
     506:	49 df       	rcall	.-366    	; 0x39a <SD_command>
     508:	88 23       	and	r24, r24
     50a:	79 f0       	breq	.+30     	; 0x52a <SD_init+0xb8>
        {
            break;
        }
        CS_DISABLE();
     50c:	85 b1       	in	r24, 0x05	; 5
     50e:	81 60       	ori	r24, 0x01	; 1
     510:	85 b9       	out	0x05, r24	; 5
     512:	2f ef       	ldi	r18, 0xFF	; 255
     514:	81 ee       	ldi	r24, 0xE1	; 225
     516:	94 e0       	ldi	r25, 0x04	; 4
     518:	21 50       	subi	r18, 0x01	; 1
     51a:	80 40       	sbci	r24, 0x00	; 0
     51c:	90 40       	sbci	r25, 0x00	; 0
     51e:	e1 f7       	brne	.-8      	; 0x518 <SD_init+0xa6>
     520:	00 c0       	rjmp	.+0      	; 0x522 <SD_init+0xb0>
     522:	00 00       	nop
    {
        return SD_INIT_ERR_DONT_RESPOND;
    }

    // CMD1 until card comes out of idle, but maximum of 10 times
    for (i = 0; i < 10; i++)
     524:	cf 5f       	subi	r28, 0xFF	; 255
     526:	ca 30       	cpi	r28, 0x0A	; 10
     528:	28 f3       	brcs	.-54     	; 0x4f4 <SD_init+0x82>
            break;
        }
        CS_DISABLE();
        _delay_ms(100);
    }
    if (i == 10) // card did not come out of idle
     52a:	ca 30       	cpi	r28, 0x0A	; 10
     52c:	b1 f0       	breq	.+44     	; 0x55a <SD_init+0xe8>
    {
        return SD_INIT_ERR_DONT_OUT_IDLE;
    }

    // SET_BLOCKLEN to 512
    CS_ENABLE();
     52e:	85 b1       	in	r24, 0x05	; 5
     530:	8e 7f       	andi	r24, 0xFE	; 254
     532:	85 b9       	out	0x05, r24	; 5
    SD_command(CMD16, 512, 0xFF, 8);
     534:	08 e0       	ldi	r16, 0x08	; 8
     536:	2f ef       	ldi	r18, 0xFF	; 255
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	52 e0       	ldi	r21, 0x02	; 2
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	80 e5       	ldi	r24, 0x50	; 80
     542:	2b df       	rcall	.-426    	; 0x39a <SD_command>
    CS_DISABLE();
     544:	85 b1       	in	r24, 0x05	; 5
     546:	81 60       	ori	r24, 0x01	; 1
     548:	85 b9       	out	0x05, r24	; 5

    SPI_FAST();
     54a:	81 e5       	ldi	r24, 0x51	; 81
     54c:	8c bd       	out	0x2c, r24	; 44

    return SD_INIT_OK;
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	05 c0       	rjmp	.+10     	; 0x55c <SD_init+0xea>

    uart_putsnl("clearing sd...");
    CS_ENABLE();
    if (!read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
    {
        return SD_INIT_ERR_CANT_CLEAR;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	03 c0       	rjmp	.+6      	; 0x55c <SD_init+0xea>
        CS_DISABLE();
        _delay_ms(100);
    }
    if (i == 10) // card did not respond to initialization
    {
        return SD_INIT_ERR_DONT_RESPOND;
     556:	82 e0       	ldi	r24, 0x02	; 2
     558:	01 c0       	rjmp	.+2      	; 0x55c <SD_init+0xea>
        CS_DISABLE();
        _delay_ms(100);
    }
    if (i == 10) // card did not come out of idle
    {
        return SD_INIT_ERR_DONT_OUT_IDLE;
     55a:	83 e0       	ldi	r24, 0x03	; 3
    CS_DISABLE();

    SPI_FAST();

    return SD_INIT_OK;
}
     55c:	cf 91       	pop	r28
     55e:	0f 91       	pop	r16
     560:	08 95       	ret

00000562 <SD_read_sector>:

// TODO: This function will not exit gracefully if SD card does not do what it should
bool SD_read_sector(unsigned long sector, uint8_t* buffer)
{
     562:	8f 92       	push	r8
     564:	9f 92       	push	r9
     566:	af 92       	push	r10
     568:	bf 92       	push	r11
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	4b 01       	movw	r8, r22
     578:	5c 01       	movw	r10, r24
     57a:	7a 01       	movw	r14, r20
    unsigned short i = 0;
    bool retf = false;

    CS_ENABLE();
     57c:	85 b1       	in	r24, 0x05	; 5
     57e:	8e 7f       	andi	r24, 0xFE	; 254
     580:	85 b9       	out	0x05, r24	; 5
    wait_sd_some_cycl();
     582:	b9 de       	rcall	.-654    	; 0x2f6 <wait_sd_some_cycl>

    SPI_write(CMD17);
     584:	81 e5       	ldi	r24, 0x51	; 81
     586:	b1 de       	rcall	.-670    	; 0x2ea <SPI_write>
    SPI_write(sector >> 15); // sector*512 >> 24
     588:	d5 01       	movw	r26, r10
     58a:	c4 01       	movw	r24, r8
     58c:	07 2e       	mov	r0, r23
     58e:	7f e0       	ldi	r23, 0x0F	; 15
     590:	b6 95       	lsr	r27
     592:	a7 95       	ror	r26
     594:	97 95       	ror	r25
     596:	87 95       	ror	r24
     598:	7a 95       	dec	r23
     59a:	d1 f7       	brne	.-12     	; 0x590 <SD_read_sector+0x2e>
     59c:	70 2d       	mov	r23, r0
     59e:	a5 de       	rcall	.-694    	; 0x2ea <SPI_write>
    SPI_write(sector >> 7); // sector*512 >> 16
     5a0:	d5 01       	movw	r26, r10
     5a2:	c4 01       	movw	r24, r8
     5a4:	68 94       	set
     5a6:	16 f8       	bld	r1, 6
     5a8:	b6 95       	lsr	r27
     5aa:	a7 95       	ror	r26
     5ac:	97 95       	ror	r25
     5ae:	87 95       	ror	r24
     5b0:	16 94       	lsr	r1
     5b2:	d1 f7       	brne	.-12     	; 0x5a8 <SD_read_sector+0x46>
    SPI_write(sector << 1); // sector*512 >> 8
     5b4:	9a de       	rcall	.-716    	; 0x2ea <SPI_write>
     5b6:	88 2d       	mov	r24, r8
    SPI_write(0);          // sector*512
     5b8:	88 0f       	add	r24, r24
     5ba:	97 de       	rcall	.-722    	; 0x2ea <SPI_write>
     5bc:	80 e0       	ldi	r24, 0x00	; 0
    SPI_write(0xFF);
     5be:	95 de       	rcall	.-726    	; 0x2ea <SPI_write>
     5c0:	8f ef       	ldi	r24, 0xFF	; 255

    // wait for 0
    if (read_spi_while_byte_is_not(0, RECOMMEND_WAIT_TIMEOUT_SPI))
     5c2:	93 de       	rcall	.-730    	; 0x2ea <SPI_write>
     5c4:	40 ea       	ldi	r20, 0xA0	; 160
     5c6:	56 e8       	ldi	r21, 0x86	; 134
     5c8:	61 e0       	ldi	r22, 0x01	; 1
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	a8 de       	rcall	.-688    	; 0x320 <read_spi_while_byte_is_not>
     5d0:	88 23       	and	r24, r24
    {
        // wait for data Start Block token
        if (read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI))
     5d2:	f1 f0       	breq	.+60     	; 0x610 <SD_read_sector+0xae>
     5d4:	40 ea       	ldi	r20, 0xA0	; 160
     5d6:	56 e8       	ldi	r21, 0x86	; 134
     5d8:	61 e0       	ldi	r22, 0x01	; 1
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	8e ef       	ldi	r24, 0xFE	; 254
     5de:	a0 de       	rcall	.-704    	; 0x320 <read_spi_while_byte_is_not>
     5e0:	81 11       	cpse	r24, r1
     5e2:	0a c0       	rjmp	.+20     	; 0x5f8 <SD_read_sector+0x96>
        {
            for (i = 0; i < 512; i++)
            {
                buffer[i] = SPI_write(0xFF);
     5e4:	16 c0       	rjmp	.+44     	; 0x612 <SD_read_sector+0xb0>
     5e6:	87 01       	movw	r16, r14
     5e8:	0c 0f       	add	r16, r28
     5ea:	1d 1f       	adc	r17, r29
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	7d de       	rcall	.-774    	; 0x2ea <SPI_write>
     5f0:	f8 01       	movw	r30, r16
    if (read_spi_while_byte_is_not(0, RECOMMEND_WAIT_TIMEOUT_SPI))
    {
        // wait for data Start Block token
        if (read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI))
        {
            for (i = 0; i < 512; i++)
     5f2:	80 83       	st	Z, r24
     5f4:	21 96       	adiw	r28, 0x01	; 1
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <SD_read_sector+0x9a>
     5f8:	c0 e0       	ldi	r28, 0x00	; 0
     5fa:	d0 e0       	ldi	r29, 0x00	; 0
     5fc:	c1 15       	cp	r28, r1
     5fe:	f2 e0       	ldi	r31, 0x02	; 2
            {
                buffer[i] = SPI_write(0xFF);
            }
            // skip checksum
            SPI_write(0xFF);
     600:	df 07       	cpc	r29, r31
     602:	88 f3       	brcs	.-30     	; 0x5e6 <SD_read_sector+0x84>
     604:	8f ef       	ldi	r24, 0xFF	; 255
            SPI_write(0xFF);
     606:	71 de       	rcall	.-798    	; 0x2ea <SPI_write>
     608:	8f ef       	ldi	r24, 0xFF	; 255
     60a:	6f de       	rcall	.-802    	; 0x2ea <SPI_write>

            retf = true;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	01 c0       	rjmp	.+2      	; 0x612 <SD_read_sector+0xb0>

// TODO: This function will not exit gracefully if SD card does not do what it should
bool SD_read_sector(unsigned long sector, uint8_t* buffer)
{
    unsigned short i = 0;
    bool retf = false;
     610:	80 e0       	ldi	r24, 0x00	; 0
            retf = true;
        }

    }

    CS_DISABLE();
     612:	95 b1       	in	r25, 0x05	; 5
     614:	91 60       	ori	r25, 0x01	; 1
     616:	95 b9       	out	0x05, r25	; 5

    return retf;
}
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	ff 90       	pop	r15
     622:	ef 90       	pop	r14
     624:	bf 90       	pop	r11
     626:	af 90       	pop	r10
     628:	9f 90       	pop	r9
     62a:	8f 90       	pop	r8
     62c:	08 95       	ret

0000062e <SD_write_sector>:

bool SD_write_sector(unsigned long sector, uint8_t* buffer)
{
     62e:	cf 92       	push	r12
     630:	df 92       	push	r13
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	6b 01       	movw	r12, r22
     640:	7c 01       	movw	r14, r24
     642:	8a 01       	movw	r16, r20
    unsigned short i = 0;
    bool retf = false;

    CS_ENABLE();
     644:	85 b1       	in	r24, 0x05	; 5
     646:	8e 7f       	andi	r24, 0xFE	; 254
     648:	85 b9       	out	0x05, r24	; 5
    wait_sd_some_cycl();
     64a:	55 de       	rcall	.-854    	; 0x2f6 <wait_sd_some_cycl>

    SPI_write(CMD24);
     64c:	88 e5       	ldi	r24, 0x58	; 88
     64e:	4d de       	rcall	.-870    	; 0x2ea <SPI_write>
    SPI_write(sector >> 15); // sector*512 >> 24
     650:	d7 01       	movw	r26, r14
     652:	c6 01       	movw	r24, r12
     654:	07 2e       	mov	r0, r23
     656:	7f e0       	ldi	r23, 0x0F	; 15
     658:	b6 95       	lsr	r27
     65a:	a7 95       	ror	r26
     65c:	97 95       	ror	r25
     65e:	87 95       	ror	r24
     660:	7a 95       	dec	r23
     662:	d1 f7       	brne	.-12     	; 0x658 <SD_write_sector+0x2a>
     664:	70 2d       	mov	r23, r0
     666:	41 de       	rcall	.-894    	; 0x2ea <SPI_write>
    SPI_write(sector >> 7); // sector*512 >> 16
     668:	d7 01       	movw	r26, r14
     66a:	c6 01       	movw	r24, r12
     66c:	68 94       	set
     66e:	16 f8       	bld	r1, 6
     670:	b6 95       	lsr	r27
     672:	a7 95       	ror	r26
     674:	97 95       	ror	r25
     676:	87 95       	ror	r24
     678:	16 94       	lsr	r1
     67a:	d1 f7       	brne	.-12     	; 0x670 <SD_write_sector+0x42>
    SPI_write(sector << 1); // sector*512 >> 8
     67c:	36 de       	rcall	.-916    	; 0x2ea <SPI_write>
     67e:	8c 2d       	mov	r24, r12
    SPI_write(0);          // sector*512
     680:	88 0f       	add	r24, r24
     682:	33 de       	rcall	.-922    	; 0x2ea <SPI_write>
     684:	80 e0       	ldi	r24, 0x00	; 0
    SPI_write(0xFF);
     686:	31 de       	rcall	.-926    	; 0x2ea <SPI_write>
     688:	8f ef       	ldi	r24, 0xFF	; 255

    // wait for 0
    if (read_spi_while_byte_is_not(0, RECOMMEND_WAIT_TIMEOUT_SPI))
     68a:	2f de       	rcall	.-930    	; 0x2ea <SPI_write>
     68c:	40 ea       	ldi	r20, 0xA0	; 160
     68e:	56 e8       	ldi	r21, 0x86	; 134
     690:	61 e0       	ldi	r22, 0x01	; 1
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	44 de       	rcall	.-888    	; 0x320 <read_spi_while_byte_is_not>
     698:	88 23       	and	r24, r24
    {
        // wait for 0xff
        if (read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
     69a:	69 f1       	breq	.+90     	; 0x6f6 <SD_write_sector+0xc8>
     69c:	40 ea       	ldi	r20, 0xA0	; 160
     69e:	56 e8       	ldi	r21, 0x86	; 134
     6a0:	61 e0       	ldi	r22, 0x01	; 1
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	8f ef       	ldi	r24, 0xFF	; 255
     6a6:	3c de       	rcall	.-904    	; 0x320 <read_spi_while_byte_is_not>
     6a8:	88 23       	and	r24, r24
        {
            // SEND Start Block token
            SPI_write(0xFE);
     6aa:	39 f1       	breq	.+78     	; 0x6fa <SD_write_sector+0xcc>
     6ac:	8e ef       	ldi	r24, 0xFE	; 254
            for (i = 0; i < 512; i++)
     6ae:	1d de       	rcall	.-966    	; 0x2ea <SPI_write>
     6b0:	c0 e0       	ldi	r28, 0x00	; 0
     6b2:	d0 e0       	ldi	r29, 0x00	; 0
            {
                SPI_write(buffer[i]);
     6b4:	06 c0       	rjmp	.+12     	; 0x6c2 <SD_write_sector+0x94>
     6b6:	f8 01       	movw	r30, r16
     6b8:	ec 0f       	add	r30, r28
     6ba:	fd 1f       	adc	r31, r29
        // wait for 0xff
        if (read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
        {
            // SEND Start Block token
            SPI_write(0xFE);
            for (i = 0; i < 512; i++)
     6bc:	80 81       	ld	r24, Z
     6be:	15 de       	rcall	.-982    	; 0x2ea <SPI_write>
     6c0:	21 96       	adiw	r28, 0x01	; 1
     6c2:	c1 15       	cp	r28, r1
     6c4:	82 e0       	ldi	r24, 0x02	; 2
            {
                SPI_write(buffer[i]);
            }

            // skip checksum
            SPI_write(0);
     6c6:	d8 07       	cpc	r29, r24
     6c8:	b0 f3       	brcs	.-20     	; 0x6b6 <SD_write_sector+0x88>
            SPI_write(0);
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	0e de       	rcall	.-996    	; 0x2ea <SPI_write>
     6ce:	80 e0       	ldi	r24, 0x00	; 0

            if (SPI_write(0) == CMD24_SUCCESS_BYTE)
     6d0:	0c de       	rcall	.-1000   	; 0x2ea <SPI_write>
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	0a de       	rcall	.-1004   	; 0x2ea <SPI_write>
     6d6:	85 3e       	cpi	r24, 0xE5	; 229
            {
                // wait for idle
                if (read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
     6d8:	49 f4       	brne	.+18     	; 0x6ec <SD_write_sector+0xbe>
     6da:	40 ea       	ldi	r20, 0xA0	; 160
     6dc:	56 e8       	ldi	r21, 0x86	; 134
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	8f ef       	ldi	r24, 0xFF	; 255
     6e4:	1d de       	rcall	.-966    	; 0x320 <read_spi_while_byte_is_not>
     6e6:	81 11       	cpse	r24, r1
     6e8:	0a c0       	rjmp	.+20     	; 0x6fe <SD_write_sector+0xd0>
     6ea:	0a c0       	rjmp	.+20     	; 0x700 <SD_write_sector+0xd2>
                    retf = true;
                }
            }
            else
            {
                uart_putsnl("\r\nERROR! CMD24_SUCCESS_BYTE dont recved\r\n");
     6ec:	8b e0       	ldi	r24, 0x0B	; 11
     6ee:	92 e0       	ldi	r25, 0x02	; 2
     6f0:	62 dd       	rcall	.-1340   	; 0x1b6 <uart_putsnl>
     6f2:	80 e0       	ldi	r24, 0x00	; 0
}

bool SD_write_sector(unsigned long sector, uint8_t* buffer)
{
    unsigned short i = 0;
    bool retf = false;
     6f4:	05 c0       	rjmp	.+10     	; 0x700 <SD_write_sector+0xd2>
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	03 c0       	rjmp	.+6      	; 0x700 <SD_write_sector+0xd2>
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	01 c0       	rjmp	.+2      	; 0x700 <SD_write_sector+0xd2>
     6fe:	81 e0       	ldi	r24, 0x01	; 1
            if (SPI_write(0) == CMD24_SUCCESS_BYTE)
            {
                // wait for idle
                if (read_spi_while_byte_is_not(0xFF, RECOMMEND_WAIT_TIMEOUT_SPI))
                {
                    retf = true;
     700:	95 b1       	in	r25, 0x05	; 5
                uart_putsnl("\r\nERROR! CMD24_SUCCESS_BYTE dont recved\r\n");
            }
        }
    }

    CS_DISABLE();
     702:	91 60       	ori	r25, 0x01	; 1
     704:	95 b9       	out	0x05, r25	; 5
     706:	df 91       	pop	r29

    return retf;
}
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	df 90       	pop	r13
     714:	cf 90       	pop	r12
     716:	08 95       	ret

00000718 <sd_get_number_of_sectors>:
     718:	7f 92       	push	r7

bool sd_get_number_of_sectors(uint32_t* number_of_sectors)
{
     71a:	8f 92       	push	r8
     71c:	9f 92       	push	r9
     71e:	af 92       	push	r10
     720:	bf 92       	push	r11
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	8c 01       	movw	r16, r24
    uint32_t ret = 1;
    uint8_t csd_read_bl_len = 0;
    uint8_t csd_c_size_mult = 0;
    uint32_t csd_c_size = 0;

    CS_ENABLE();
     734:	85 b1       	in	r24, 0x05	; 5
     736:	8e 7f       	andi	r24, 0xFE	; 254
     738:	85 b9       	out	0x05, r24	; 5
    wait_sd_some_cycl();
     73a:	dd dd       	rcall	.-1094   	; 0x2f6 <wait_sd_some_cycl>

    SPI_write(CMD9);
     73c:	89 e4       	ldi	r24, 0x49	; 73
     73e:	d5 dd       	rcall	.-1110   	; 0x2ea <SPI_write>
    SPI_write(0);
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	d3 dd       	rcall	.-1114   	; 0x2ea <SPI_write>
    SPI_write(0);
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	d1 dd       	rcall	.-1118   	; 0x2ea <SPI_write>
    SPI_write(0);
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	cf dd       	rcall	.-1122   	; 0x2ea <SPI_write>
     74c:	80 e0       	ldi	r24, 0x00	; 0
    SPI_write(0);
     74e:	cd dd       	rcall	.-1126   	; 0x2ea <SPI_write>
     750:	40 ea       	ldi	r20, 0xA0	; 160

    if (read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI))
     752:	56 e8       	ldi	r21, 0x86	; 134
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	8e ef       	ldi	r24, 0xFE	; 254
     75a:	e2 dd       	rcall	.-1084   	; 0x320 <read_spi_while_byte_is_not>
     75c:	81 11       	cpse	r24, r1
     75e:	57 c0       	rjmp	.+174    	; 0x80e <sd_get_number_of_sectors+0xf6>
     760:	c1 2c       	mov	r12, r1
    return retf;
}

bool sd_get_number_of_sectors(uint32_t* number_of_sectors)
{
    uint32_t ret = 1;
     762:	d1 2c       	mov	r13, r1
     764:	76 01       	movw	r14, r12
     766:	c3 94       	inc	r12
     768:	5f c0       	rjmp	.+190    	; 0x828 <sd_get_number_of_sectors+0x110>
     76a:	8f ef       	ldi	r24, 0xFF	; 255

    if (read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI))
    {
        for (uint8_t i = 0; i < 18; i++)
        {
            uint8_t b = SPI_write(0xFF);
     76c:	be dd       	rcall	.-1156   	; 0x2ea <SPI_write>
     76e:	c7 30       	cpi	r28, 0x07	; 7
     770:	c9 f0       	breq	.+50     	; 0x7a4 <sd_get_number_of_sectors+0x8c>

            switch (i)
     772:	28 f4       	brcc	.+10     	; 0x77e <sd_get_number_of_sectors+0x66>
     774:	c5 30       	cpi	r28, 0x05	; 5
     776:	49 f0       	breq	.+18     	; 0x78a <sd_get_number_of_sectors+0x72>
     778:	c6 30       	cpi	r28, 0x06	; 6
     77a:	51 f0       	breq	.+20     	; 0x790 <sd_get_number_of_sectors+0x78>
     77c:	46 c0       	rjmp	.+140    	; 0x80a <sd_get_number_of_sectors+0xf2>
     77e:	c9 30       	cpi	r28, 0x09	; 9
     780:	71 f1       	breq	.+92     	; 0x7de <sd_get_number_of_sectors+0xc6>
     782:	f0 f0       	brcs	.+60     	; 0x7c0 <sd_get_number_of_sectors+0xa8>
     784:	ca 30       	cpi	r28, 0x0A	; 10
     786:	79 f1       	breq	.+94     	; 0x7e6 <sd_get_number_of_sectors+0xce>
     788:	40 c0       	rjmp	.+128    	; 0x80a <sd_get_number_of_sectors+0xf2>
     78a:	8f 70       	andi	r24, 0x0F	; 15
     78c:	78 2e       	mov	r7, r24
            {
                case 5:
                    csd_read_bl_len = b & 0x0f;
     78e:	3d c0       	rjmp	.+122    	; 0x80a <sd_get_number_of_sectors+0xf2>
     790:	48 2f       	mov	r20, r24
                    break;
     792:	43 70       	andi	r20, 0x03	; 3

                case 6:
                    csd_c_size = b & 0x03;
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	88 24       	eor	r8, r8
     79c:	94 2e       	mov	r9, r20
                    csd_c_size <<= 8;
     79e:	a5 2e       	mov	r10, r21
     7a0:	b6 2e       	mov	r11, r22
     7a2:	33 c0       	rjmp	.+102    	; 0x80a <sd_get_number_of_sectors+0xf2>
     7a4:	b5 01       	movw	r22, r10
                    break;
     7a6:	a4 01       	movw	r20, r8

                case 7:
                    csd_c_size |= b;
     7a8:	48 2b       	or	r20, r24
     7aa:	4a 01       	movw	r8, r20
     7ac:	5b 01       	movw	r10, r22
                    csd_c_size <<= 2;
     7ae:	88 0c       	add	r8, r8
     7b0:	99 1c       	adc	r9, r9
     7b2:	aa 1c       	adc	r10, r10
     7b4:	bb 1c       	adc	r11, r11
     7b6:	88 0c       	add	r8, r8
     7b8:	99 1c       	adc	r9, r9
     7ba:	aa 1c       	adc	r10, r10
     7bc:	bb 1c       	adc	r11, r11
     7be:	25 c0       	rjmp	.+74     	; 0x80a <sd_get_number_of_sectors+0xf2>
     7c0:	82 95       	swap	r24
                    break;
     7c2:	86 95       	lsr	r24

                case 8:
                    csd_c_size |= b >> 6;
     7c4:	86 95       	lsr	r24
     7c6:	83 70       	andi	r24, 0x03	; 3
     7c8:	b5 01       	movw	r22, r10
     7ca:	a4 01       	movw	r20, r8
     7cc:	48 2b       	or	r20, r24
     7ce:	4a 01       	movw	r8, r20
     7d0:	5b 01       	movw	r10, r22
                    csd_c_size++;
     7d2:	8f ef       	ldi	r24, 0xFF	; 255
     7d4:	88 1a       	sub	r8, r24
     7d6:	98 0a       	sbc	r9, r24
     7d8:	a8 0a       	sbc	r10, r24
     7da:	b8 0a       	sbc	r11, r24
     7dc:	16 c0       	rjmp	.+44     	; 0x80a <sd_get_number_of_sectors+0xf2>
     7de:	83 70       	andi	r24, 0x03	; 3
                    break;
     7e0:	d8 2f       	mov	r29, r24

                case 9:
                    csd_c_size_mult = b & 0x03;
     7e2:	dd 0f       	add	r29, r29
                    csd_c_size_mult <<= 1;
     7e4:	12 c0       	rjmp	.+36     	; 0x80a <sd_get_number_of_sectors+0xf2>
     7e6:	88 1f       	adc	r24, r24
                    break;
     7e8:	88 27       	eor	r24, r24

                case 10:
                    csd_c_size_mult |= b >> 7;
     7ea:	88 1f       	adc	r24, r24
     7ec:	d8 2b       	or	r29, r24
     7ee:	87 2d       	mov	r24, r7
     7f0:	90 e0       	ldi	r25, 0x00	; 0
                    ret = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
     7f2:	8d 0f       	add	r24, r29
     7f4:	91 1d       	adc	r25, r1
     7f6:	02 96       	adiw	r24, 0x02	; 2
     7f8:	75 01       	movw	r14, r10
     7fa:	64 01       	movw	r12, r8
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <sd_get_number_of_sectors+0xee>
     7fe:	cc 0c       	add	r12, r12
     800:	dd 1c       	adc	r13, r13
     802:	ee 1c       	adc	r14, r14
     804:	ff 1c       	adc	r15, r15
     806:	8a 95       	dec	r24
     808:	d2 f7       	brpl	.-12     	; 0x7fe <sd_get_number_of_sectors+0xe6>
     80a:	cf 5f       	subi	r28, 0xFF	; 255
     80c:	0a c0       	rjmp	.+20     	; 0x822 <sd_get_number_of_sectors+0x10a>
    SPI_write(0);
    SPI_write(0);

    if (read_spi_while_byte_is_not(0xFE, RECOMMEND_WAIT_TIMEOUT_SPI))
    {
        for (uint8_t i = 0; i < 18; i++)
     80e:	c0 e0       	ldi	r28, 0x00	; 0
     810:	81 2c       	mov	r8, r1
     812:	91 2c       	mov	r9, r1
     814:	54 01       	movw	r10, r8
     816:	d0 e0       	ldi	r29, 0x00	; 0
     818:	71 2c       	mov	r7, r1
     81a:	c1 2c       	mov	r12, r1
     81c:	d1 2c       	mov	r13, r1
     81e:	76 01       	movw	r14, r12
     820:	c3 94       	inc	r12
     822:	c2 31       	cpi	r28, 0x12	; 18
     824:	08 f4       	brcc	.+2      	; 0x828 <sd_get_number_of_sectors+0x110>
     826:	a1 cf       	rjmp	.-190    	; 0x76a <sd_get_number_of_sectors+0x52>
     828:	85 b1       	in	r24, 0x05	; 5
     82a:	81 60       	ori	r24, 0x01	; 1
                    break;
            }
        }
    }

    CS_DISABLE();
     82c:	85 b9       	out	0x05, r24	; 5
     82e:	d7 01       	movw	r26, r14
     830:	c6 01       	movw	r24, r12

    if (ret % 512 != 0)
     832:	91 70       	andi	r25, 0x01	; 1
     834:	aa 27       	eor	r26, r26
     836:	bb 27       	eor	r27, r27
     838:	89 2b       	or	r24, r25
     83a:	8a 2b       	or	r24, r26
     83c:	8b 2b       	or	r24, r27
     83e:	29 f0       	breq	.+10     	; 0x84a <sd_get_number_of_sectors+0x132>
     840:	85 e3       	ldi	r24, 0x35	; 53
    {
        uart_putsnl("\r\nERROR! number of bytes is not % 512\r\n");
     842:	92 e0       	ldi	r25, 0x02	; 2
     844:	b8 dc       	rcall	.-1680   	; 0x1b6 <uart_putsnl>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	0f c0       	rjmp	.+30     	; 0x868 <sd_get_number_of_sectors+0x150>
        return false;
     84a:	0b 2e       	mov	r0, r27
     84c:	b9 e0       	ldi	r27, 0x09	; 9
    }

    *number_of_sectors = ret / 512;
     84e:	f6 94       	lsr	r15
     850:	e7 94       	ror	r14
     852:	d7 94       	ror	r13
     854:	c7 94       	ror	r12
     856:	ba 95       	dec	r27
     858:	d1 f7       	brne	.-12     	; 0x84e <sd_get_number_of_sectors+0x136>
     85a:	b0 2d       	mov	r27, r0
     85c:	f8 01       	movw	r30, r16
     85e:	c0 82       	st	Z, r12
     860:	d1 82       	std	Z+1, r13	; 0x01
     862:	e2 82       	std	Z+2, r14	; 0x02
     864:	f3 82       	std	Z+3, r15	; 0x03
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	df 91       	pop	r29

    return true;
     86a:	cf 91       	pop	r28
}
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	cf 90       	pop	r12
     878:	bf 90       	pop	r11
     87a:	af 90       	pop	r10
     87c:	9f 90       	pop	r9
     87e:	8f 90       	pop	r8
     880:	7f 90       	pop	r7
     882:	08 95       	ret

00000884 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
     884:	29 2f       	mov	r18, r25
     886:	33 27       	eor	r19, r19
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     888:	23 30       	cpi	r18, 0x03	; 3
     88a:	31 05       	cpc	r19, r1
     88c:	c9 f0       	breq	.+50     	; 0x8c0 <CALLBACK_USB_GetDescriptor+0x3c>
     88e:	40 f4       	brcc	.+16     	; 0x8a0 <CALLBACK_USB_GetDescriptor+0x1c>
     890:	21 30       	cpi	r18, 0x01	; 1
     892:	31 05       	cpc	r19, r1
     894:	09 f4       	brne	.+2      	; 0x898 <CALLBACK_USB_GetDescriptor+0x14>
     896:	47 c0       	rjmp	.+142    	; 0x926 <CALLBACK_USB_GetDescriptor+0xa2>
     898:	22 30       	cpi	r18, 0x02	; 2
     89a:	31 05       	cpc	r19, r1
     89c:	61 f0       	breq	.+24     	; 0x8b6 <CALLBACK_USB_GetDescriptor+0x32>
     89e:	06 c0       	rjmp	.+12     	; 0x8ac <CALLBACK_USB_GetDescriptor+0x28>
     8a0:	21 32       	cpi	r18, 0x21	; 33
     8a2:	31 05       	cpc	r19, r1
     8a4:	b1 f1       	breq	.+108    	; 0x912 <CALLBACK_USB_GetDescriptor+0x8e>
     8a6:	22 32       	cpi	r18, 0x22	; 34
     8a8:	31 05       	cpc	r19, r1
     8aa:	c1 f1       	breq	.+112    	; 0x91c <CALLBACK_USB_GetDescriptor+0x98>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	41 c0       	rjmp	.+130    	; 0x938 <CALLBACK_USB_GetDescriptor+0xb4>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
     8b6:	86 e7       	ldi	r24, 0x76	; 118
     8b8:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
     8ba:	28 ec       	ldi	r18, 0xC8	; 200
     8bc:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
     8be:	3c c0       	rjmp	.+120    	; 0x938 <CALLBACK_USB_GetDescriptor+0xb4>
        case DTYPE_String:
            if (USB_ControlRequest.wLength == 0xFF)
     8c0:	20 91 71 09 	lds	r18, 0x0971	; 0x800971 <USB_ControlRequest+0x6>
     8c4:	30 91 72 09 	lds	r19, 0x0972	; 0x800972 <USB_ControlRequest+0x7>
     8c8:	2f 3f       	cpi	r18, 0xFF	; 255
     8ca:	31 05       	cpc	r19, r1
     8cc:	39 f4       	brne	.+14     	; 0x8dc <CALLBACK_USB_GetDescriptor+0x58>
            {
                guess_os.maybe_linux = 1;
     8ce:	20 91 57 09 	lds	r18, 0x0957	; 0x800957 <guess_os>
                guess_os.maybe_win = 1;
                guess_os.not_mac =
     8d2:	23 60       	ori	r18, 0x03	; 3
     8d4:	20 62       	ori	r18, 0x20	; 32
     8d6:	20 93 57 09 	sts	0x0957, r18	; 0x800957 <guess_os>
     8da:	05 c0       	rjmp	.+10     	; 0x8e6 <CALLBACK_USB_GetDescriptor+0x62>
                    1; // In testing, MacOS NEVER sets a descript request lenght of 255
            }
            else
            {
                guess_os.not_linux =
     8dc:	20 91 57 09 	lds	r18, 0x0957	; 0x800957 <guess_os>
     8e0:	28 60       	ori	r18, 0x08	; 8
     8e2:	20 93 57 09 	sts	0x0957, r18	; 0x800957 <guess_os>
                    1; // In testing, Linux ALWAYS sets a descriptor request length of 255;
            }

            switch (DescriptorNumber)
     8e6:	99 27       	eor	r25, r25
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	91 05       	cpc	r25, r1
     8ec:	41 f0       	breq	.+16     	; 0x8fe <CALLBACK_USB_GetDescriptor+0x7a>
     8ee:	00 f1       	brcs	.+64     	; 0x930 <CALLBACK_USB_GetDescriptor+0xac>
     8f0:	02 97       	sbiw	r24, 0x02	; 2
     8f2:	51 f0       	breq	.+20     	; 0x908 <CALLBACK_USB_GetDescriptor+0x84>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	1d c0       	rjmp	.+58     	; 0x938 <CALLBACK_USB_GetDescriptor+0xb4>
                    Address = &LanguageString;
                    Size    = LanguageString.Header.Size;
                    break;
                case STRING_ID_Manufacturer:
                    Address = &ManufacturerString;
                    Size    = ManufacturerString.Header.Size;
     8fe:	8a e0       	ldi	r24, 0x0A	; 10
     900:	90 e0       	ldi	r25, 0x00	; 0
                case STRING_ID_Language:
                    Address = &LanguageString;
                    Size    = LanguageString.Header.Size;
                    break;
                case STRING_ID_Manufacturer:
                    Address = &ManufacturerString;
     902:	28 eb       	ldi	r18, 0xB8	; 184
     904:	32 e0       	ldi	r19, 0x02	; 2
                    Size    = ManufacturerString.Header.Size;
                    break;
     906:	18 c0       	rjmp	.+48     	; 0x938 <CALLBACK_USB_GetDescriptor+0xb4>
                case STRING_ID_Product:
                    Address = &ProductString;
                    Size    = ProductString.Header.Size;
     908:	8e e3       	ldi	r24, 0x3E	; 62
     90a:	90 e0       	ldi	r25, 0x00	; 0
                case STRING_ID_Manufacturer:
                    Address = &ManufacturerString;
                    Size    = ManufacturerString.Header.Size;
                    break;
                case STRING_ID_Product:
                    Address = &ProductString;
     90c:	28 e7       	ldi	r18, 0x78	; 120
     90e:	32 e0       	ldi	r19, 0x02	; 2
                    Size    = ProductString.Header.Size;
                    break;
     910:	13 c0       	rjmp	.+38     	; 0x938 <CALLBACK_USB_GetDescriptor+0xb4>
            }

            break;
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_KeyboardHID;
            Size    = sizeof(USB_HID_Descriptor_HID_t);
     912:	89 e0       	ldi	r24, 0x09	; 9
     914:	90 e0       	ldi	r25, 0x00	; 0
                    break;
            }

            break;
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_KeyboardHID;
     916:	21 ef       	ldi	r18, 0xF1	; 241
     918:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_HID_Descriptor_HID_t);
            break;
     91a:	0e c0       	rjmp	.+28     	; 0x938 <CALLBACK_USB_GetDescriptor+0xb4>
        case HID_DTYPE_Report:
            Address = &KeyboardReport;
            Size    = sizeof(KeyboardReport);
     91c:	80 e4       	ldi	r24, 0x40	; 64
     91e:	90 e0       	ldi	r25, 0x00	; 0
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_KeyboardHID;
            Size    = sizeof(USB_HID_Descriptor_HID_t);
            break;
        case HID_DTYPE_Report:
            Address = &KeyboardReport;
     920:	20 e5       	ldi	r18, 0x50	; 80
     922:	33 e0       	ldi	r19, 0x03	; 3
            Size    = sizeof(KeyboardReport);
            break;
     924:	09 c0       	rjmp	.+18     	; 0x938 <CALLBACK_USB_GetDescriptor+0xb4>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
     926:	82 e1       	ldi	r24, 0x12	; 18
     928:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
     92a:	2e e3       	ldi	r18, 0x3E	; 62
     92c:	33 e0       	ldi	r19, 0x03	; 3
     92e:	04 c0       	rjmp	.+8      	; 0x938 <CALLBACK_USB_GetDescriptor+0xb4>

            switch (DescriptorNumber)
            {
                case STRING_ID_Language:
                    Address = &LanguageString;
                    Size    = LanguageString.Header.Size;
     930:	84 e0       	ldi	r24, 0x04	; 4
     932:	90 e0       	ldi	r25, 0x00	; 0
            }

            switch (DescriptorNumber)
            {
                case STRING_ID_Language:
                    Address = &LanguageString;
     934:	24 ec       	ldi	r18, 0xC4	; 196
     936:	32 e0       	ldi	r19, 0x02	; 2
            Address = &KeyboardReport;
            Size    = sizeof(KeyboardReport);
            break;
    }

    *DescriptorAddress = Address;
     938:	fa 01       	movw	r30, r20
     93a:	31 83       	std	Z+1, r19	; 0x01
     93c:	20 83       	st	Z, r18
    return Size;
}
     93e:	08 95       	ret

00000940 <guess_host_os>:


guess_os_t guess_host_os(void)
{
    if (guess_os.not_mac && guess_os.not_linux && guess_os.maybe_win)
     940:	80 91 57 09 	lds	r24, 0x0957	; 0x800957 <guess_os>
     944:	98 2f       	mov	r25, r24
     946:	9a 72       	andi	r25, 0x2A	; 42
     948:	9a 32       	cpi	r25, 0x2A	; 42
     94a:	41 f0       	breq	.+16     	; 0x95c <guess_host_os+0x1c>
    {
        return GO_WINDOWS;
    }
    else if (guess_os.maybe_linux && !guess_os.not_linux)
     94c:	98 2f       	mov	r25, r24
     94e:	99 70       	andi	r25, 0x09	; 9
     950:	91 30       	cpi	r25, 0x01	; 1
     952:	31 f0       	breq	.+12     	; 0x960 <guess_host_os+0x20>
    {
        return GO_LINUX;
    }
    else if (!guess_os.not_mac)
     954:	85 fd       	sbrc	r24, 5
     956:	06 c0       	rjmp	.+12     	; 0x964 <guess_host_os+0x24>
    {
        return GO_MAC;
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	08 95       	ret

guess_os_t guess_host_os(void)
{
    if (guess_os.not_mac && guess_os.not_linux && guess_os.maybe_win)
    {
        return GO_WINDOWS;
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	08 95       	ret
    }
    else if (guess_os.maybe_linux && !guess_os.not_linux)
    {
        return GO_LINUX;
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	08 95       	ret
    else if (!guess_os.not_mac)
    {
        return GO_MAC;
    }

    return GO_WINDOWS;
     964:	80 e0       	ldi	r24, 0x00	; 0
}
     966:	08 95       	ret

00000968 <guess_host_os_string>:

const char* guess_host_os_string(void)
{
    switch (guess_host_os())
     968:	eb df       	rcall	.-42     	; 0x940 <guess_host_os>
     96a:	81 30       	cpi	r24, 0x01	; 1
     96c:	41 f0       	breq	.+16     	; 0x97e <guess_host_os_string+0x16>
     96e:	82 30       	cpi	r24, 0x02	; 2
     970:	19 f0       	breq	.+6      	; 0x978 <guess_host_os_string+0x10>
    {
        case GO_WINDOWS:
            return "OS_WINDOWS";
     972:	8d e5       	ldi	r24, 0x5D	; 93
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	08 95       	ret
        case GO_LINUX:
            return "OS_LINUX";
            break;

        case GO_MAC:
            return "OS_MAC";
     978:	81 e7       	ldi	r24, 0x71	; 113
     97a:	92 e0       	ldi	r25, 0x02	; 2
     97c:	08 95       	ret
        case GO_WINDOWS:
            return "OS_WINDOWS";
            break;

        case GO_LINUX:
            return "OS_LINUX";
     97e:	88 e6       	ldi	r24, 0x68	; 104
     980:	92 e0       	ldi	r25, 0x02	; 2

        default:
            return "OS_WINDOWS";
            break;
    }
}
     982:	08 95       	ret

00000984 <ioinit>:
{
    //MCUCR = _BV(JTD); MCUCR = _BV(JTD);   /* Disable JTAG */

    //pull up

    PORTA = 0b11111111;
     984:	8f ef       	ldi	r24, 0xFF	; 255
     986:	82 b9       	out	0x02, r24	; 2
    PORTB = 0b11111111;
     988:	85 b9       	out	0x05, r24	; 5
    PORTC = 0b11111111;
     98a:	88 b9       	out	0x08, r24	; 8
    PORTD = 0b11111111;
     98c:	8b b9       	out	0x0b, r24	; 11
    //PORTE = 0b11111111;
    PORTF = 0b11111111;
     98e:	81 bb       	out	0x11, r24	; 17
    //PORTG = 0b00011111;

    sei();
     990:	78 94       	sei
     992:	08 95       	ret

00000994 <myrand>:
    static uint8_t cur;
    //32 bit random number, from noinit sram
    static uint32_t random31 __attribute__((section(".noinit")));
    //temp storage for random number
    uint32_t temp;
    temp = random31 << 1;
     994:	80 91 79 09 	lds	r24, 0x0979	; 0x800979 <__bss_end>
     998:	90 91 7a 09 	lds	r25, 0x097A	; 0x80097a <__bss_end+0x1>
     99c:	a0 91 7b 09 	lds	r26, 0x097B	; 0x80097b <__bss_end+0x2>
     9a0:	b0 91 7c 09 	lds	r27, 0x097C	; 0x80097c <__bss_end+0x3>
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	aa 1f       	adc	r26, r26
     9aa:	bb 1f       	adc	r27, r27
    //if bit31 set, or if init sram happens to be 0
    if ((temp & 0x80000000) || (temp == 0))
     9ac:	18 16       	cp	r1, r24
     9ae:	19 06       	cpc	r1, r25
     9b0:	1a 06       	cpc	r1, r26
     9b2:	1b 06       	cpc	r1, r27
     9b4:	44 f0       	brlt	.+16     	; 0x9c6 <myrand+0x32>
    {
        //xor magic number (taps)
        temp ^= 0x20AA95B5;
     9b6:	25 eb       	ldi	r18, 0xB5	; 181
     9b8:	82 27       	eor	r24, r18
     9ba:	25 e9       	ldi	r18, 0x95	; 149
     9bc:	92 27       	eor	r25, r18
     9be:	2a ea       	ldi	r18, 0xAA	; 170
     9c0:	a2 27       	eor	r26, r18
     9c2:	20 e2       	ldi	r18, 0x20	; 32
     9c4:	b2 27       	eor	r27, r18
    }
    //save back to random number for next time
    random31 = temp;
     9c6:	80 93 79 09 	sts	0x0979, r24	; 0x800979 <__bss_end>
     9ca:	90 93 7a 09 	sts	0x097A, r25	; 0x80097a <__bss_end+0x1>
     9ce:	a0 93 7b 09 	sts	0x097B, r26	; 0x80097b <__bss_end+0x2>
     9d2:	b0 93 7c 09 	sts	0x097C, r27	; 0x80097c <__bss_end+0x3>
    //return lowest byte only
    return temp + cur++;
     9d6:	20 91 3b 05 	lds	r18, 0x053B	; 0x80053b <cur.4475>
     9da:	31 e0       	ldi	r19, 0x01	; 1
     9dc:	32 0f       	add	r19, r18
     9de:	30 93 3b 05 	sts	0x053B, r19	; 0x80053b <cur.4475>
}
     9e2:	82 0f       	add	r24, r18
     9e4:	08 95       	ret

000009e6 <lufa_hook_usb_serialnumber_randomize>:
Get-CimInstance -ClassName Win32_DiskDrive -Property *  | where{$_.Interfacetype -eq 'USB'}

*/
void lufa_hook_usb_serialnumber_randomize(uint16_t* serial_str,
        size_t nr_elements)
{
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	7c 01       	movw	r14, r24
     9f4:	8b 01       	movw	r16, r22
    /*
        hooked LUFA USB_Device_GetInternalSerialDescriptor (DeviceStandardReq.c)
    */
    static bool init;
    static uint8_t charset[0x10];
    if (!init)
     9f6:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <init.4482>
     9fa:	81 11       	cpse	r24, r1
     9fc:	1b c0       	rjmp	.+54     	; 0xa34 <lufa_hook_usb_serialnumber_randomize+0x4e>
    {
        init = true;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <init.4482>
        for (size_t i = 0; i < sizeof(charset); i++)
     a04:	c0 e0       	ldi	r28, 0x00	; 0
     a06:	d0 e0       	ldi	r29, 0x00	; 0
     a08:	12 c0       	rjmp	.+36     	; 0xa2e <lufa_hook_usb_serialnumber_randomize+0x48>
        {
            charset[i] = (myrand() % ('9' + 1 - '1')) + '1';
     a0a:	c4 df       	rcall	.-120    	; 0x994 <myrand>
     a0c:	fe 01       	movw	r30, r28
     a0e:	e6 5d       	subi	r30, 0xD6	; 214
     a10:	fa 4f       	sbci	r31, 0xFA	; 250
     a12:	99 e3       	ldi	r25, 0x39	; 57
     a14:	89 9f       	mul	r24, r25
     a16:	91 2d       	mov	r25, r1
     a18:	11 24       	eor	r1, r1
     a1a:	96 95       	lsr	r25
     a1c:	29 2f       	mov	r18, r25
     a1e:	22 0f       	add	r18, r18
     a20:	22 0f       	add	r18, r18
     a22:	22 0f       	add	r18, r18
     a24:	92 0f       	add	r25, r18
     a26:	89 1b       	sub	r24, r25
     a28:	8f 5c       	subi	r24, 0xCF	; 207
     a2a:	80 83       	st	Z, r24
    static bool init;
    static uint8_t charset[0x10];
    if (!init)
    {
        init = true;
        for (size_t i = 0; i < sizeof(charset); i++)
     a2c:	21 96       	adiw	r28, 0x01	; 1
     a2e:	c0 31       	cpi	r28, 0x10	; 16
     a30:	d1 05       	cpc	r29, r1
     a32:	58 f3       	brcs	.-42     	; 0xa0a <lufa_hook_usb_serialnumber_randomize+0x24>
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0f c0       	rjmp	.+30     	; 0xa58 <lufa_hook_usb_serialnumber_randomize+0x72>
        }

    }
    for (size_t i = 0; i < nr_elements; i++)
    {
        serial_str[i] = charset[i % sizeof(charset)];
     a3a:	fc 01       	movw	r30, r24
     a3c:	ee 0f       	add	r30, r30
     a3e:	ff 1f       	adc	r31, r31
     a40:	ee 0d       	add	r30, r14
     a42:	ff 1d       	adc	r31, r15
     a44:	dc 01       	movw	r26, r24
     a46:	af 70       	andi	r26, 0x0F	; 15
     a48:	bb 27       	eor	r27, r27
     a4a:	a6 5d       	subi	r26, 0xD6	; 214
     a4c:	ba 4f       	sbci	r27, 0xFA	; 250
     a4e:	2c 91       	ld	r18, X
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	31 83       	std	Z+1, r19	; 0x01
     a54:	20 83       	st	Z, r18
        {
            charset[i] = (myrand() % ('9' + 1 - '1')) + '1';
        }

    }
    for (size_t i = 0; i < nr_elements; i++)
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	80 17       	cp	r24, r16
     a5a:	91 07       	cpc	r25, r17
     a5c:	70 f3       	brcs	.-36     	; 0xa3a <lufa_hook_usb_serialnumber_randomize+0x54>
    {
        serial_str[i] = charset[i % sizeof(charset)];
    }
}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	08 95       	ret

00000a6c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     a6c:	84 b7       	in	r24, 0x34	; 52
     a6e:	87 7f       	andi	r24, 0xF7	; 247
     a70:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	a8 95       	wdr
     a78:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a7c:	88 61       	ori	r24, 0x18	; 24
     a7e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a82:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     a86:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	80 e8       	ldi	r24, 0x80	; 128
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     a94:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     a98:	0f be       	out	0x3f, r0	; 63

    /* Disable clock division */
    clock_prescale_set(clock_div_1);

    /* Hardware Initialization */
    ioinit();
     a9a:	74 df       	rcall	.-280    	; 0x984 <ioinit>
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     a9c:	87 e6       	ldi	r24, 0x67	; 103
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     aa4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     aa8:	86 e0       	ldi	r24, 0x06	; 6
     aaa:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     aae:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     ab2:	88 e1       	ldi	r24, 0x18	; 24
     ab4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
     ab8:	8a b1       	in	r24, 0x0a	; 10
     aba:	88 60       	ori	r24, 0x08	; 8
     abc:	8a b9       	out	0x0a, r24	; 10
				PORTD |= (1 << 2);
     abe:	8b b1       	in	r24, 0x0b	; 11
     ac0:	84 60       	ori	r24, 0x04	; 4
     ac2:	8b b9       	out	0x0b, r24	; 11

    Serial_Init(9600, false);
    Serial_SendString("\r\n\r\nSetup mass storage sd and keyboard by David Reguera Garcia aka Dreg - MIT License\r\ndreg@fr33project.org\r\nhttps://github.com/therealdreg\r\n");
     ac4:	80 e9       	ldi	r24, 0x90	; 144
     ac6:	93 e0       	ldi	r25, 0x03	; 3
     ac8:	b0 d5       	rcall	.+2912   	; 0x162a <Serial_SendString>
    Serial_CreateStream(NULL);
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	ba d5       	rcall	.+2932   	; 0x1644 <Serial_CreateStream>
    printf("https://www.rootkit.es\r\n");
     ad0:	8e e1       	ldi	r24, 0x1E	; 30
     ad2:	94 e0       	ldi	r25, 0x04	; 4
     ad4:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <puts>
    printf_P(PSTR("https://www.fr33project.org\r\npowered by LUFA\r\n\r\n"));
     ad8:	87 eb       	ldi	r24, 0xB7	; 183
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	9f 93       	push	r25
     ade:	8f 93       	push	r24

    on_sd();
     ae0:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <printf_P>

    sdcard_Init();
     ae4:	41 db       	rcall	.-2430   	; 0x168 <on_sd>
     ae6:	06 d4       	rcall	.+2060   	; 0x12f4 <sdcard_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     ae8:	8a b1       	in	r24, 0x0a	; 10
     aea:	80 6c       	ori	r24, 0xC0	; 192
     aec:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     aee:	8b b1       	in	r24, 0x0b	; 11
     af0:	8f 73       	andi	r24, 0x3F	; 63
     af2:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRD  &= ~BUTTONS_BUTTON1;
     af4:	8a b1       	in	r24, 0x0a	; 10
     af6:	8f 7d       	andi	r24, 0xDF	; 223
     af8:	8a b9       	out	0x0a, r24	; 10
				PORTD |=  BUTTONS_BUTTON1;
     afa:	8b b1       	in	r24, 0x0b	; 11
     afc:	80 62       	ori	r24, 0x20	; 32
     afe:	8b b9       	out	0x0b, r24	; 11
                
                DDRE  &= ~BUTTONS_BUTTON2;
     b00:	8d b1       	in	r24, 0x0d	; 13
     b02:	8b 7f       	andi	r24, 0xFB	; 251
     b04:	8d b9       	out	0x0d, r24	; 13
                PORTE |=  BUTTONS_BUTTON2;
     b06:	8e b1       	in	r24, 0x0e	; 14
     b08:	84 60       	ori	r24, 0x04	; 4
     b0a:	8e b9       	out	0x0e, r24	; 14

    LEDs_Init();

    Buttons_Init();

    USB_Init();
     b0c:	0e 94 9a 13 	call	0x2734	; 0x2734 <USB_Init>
}
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	08 95       	ret

00000b16 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	c4 56       	subi	r28, 0x64	; 100
     b20:	d1 09       	sbc	r29, r1
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	f8 94       	cli
     b26:	de bf       	out	0x3e, r29	; 62
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	cd bf       	out	0x3d, r28	; 61
    SetupHardware();
     b2c:	9f df       	rcall	.-194    	; 0xa6c <SetupHardware>

    /* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
    CDC_Device_CreateStream(&VirtualSerial2_CDC_Interface, &USBSerialStream);
     b2e:	6c e3       	ldi	r22, 0x3C	; 60
     b30:	75 e0       	ldi	r23, 0x05	; 5
     b32:	80 e3       	ldi	r24, 0x30	; 48
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	ae d6       	rcall	.+3420   	; 0x1894 <CDC_Device_CreateStream>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     b38:	8b b1       	in	r24, 0x0b	; 11
     b3a:	8f 73       	andi	r24, 0x3F	; 63
     b3c:	80 64       	ori	r24, 0x40	; 64
     b3e:	8b b9       	out	0x0b, r24	; 11
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     b40:	78 94       	sei


    GlobalInterruptEnable();

    uint16_t i = 1;
    uint8_t j = 0;
     b42:	d1 2c       	mov	r13, r1
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);


    GlobalInterruptEnable();

    uint16_t i = 1;
     b44:	01 e0       	ldi	r16, 0x01	; 1
     b46:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t j = 0;
    for (;;)
    {
        MS_Device_USBTask(&Disk_MS_Interface);
     b48:	8b e5       	ldi	r24, 0x5B	; 91
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	0e 94 33 10 	call	0x2066	; 0x2066 <MS_Device_USBTask>
        HID_Device_USBTask(&Keyboard_HID_Interface);
     b50:	8b e4       	ldi	r24, 0x4B	; 75
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <HID_Device_USBTask>

        /* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
        /* Echo all received data x3 on the CDC interface */
        int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial2_CDC_Interface);
     b58:	80 e3       	ldi	r24, 0x30	; 48
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	57 d6       	rcall	.+3246   	; 0x180c <CDC_Device_ReceiveByte>
     b5e:	7c 01       	movw	r14, r24
        static char first_char_typ = ' ';
        if (!(ReceivedByte < 0) && first_char_typ == ' ')
     b60:	99 23       	and	r25, r25
     b62:	5c f0       	brlt	.+22     	; 0xb7a <main+0x64>
     b64:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <first_char_typ.4502>
     b68:	80 32       	cpi	r24, 0x20	; 32
     b6a:	39 f4       	brne	.+14     	; 0xb7a <main+0x64>
        {
            if (isprint(ReceivedByte))
     b6c:	c7 01       	movw	r24, r14
     b6e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <isprint>
     b72:	89 2b       	or	r24, r25
     b74:	11 f0       	breq	.+4      	; 0xb7a <main+0x64>
            {
                first_char_typ = ReceivedByte;
     b76:	e0 92 2d 01 	sts	0x012D, r14	; 0x80012d <first_char_typ.4502>
            }
        }

        if (i++ % 0x9FFF == 0)
     b7a:	78 01       	movw	r14, r16
     b7c:	2f ef       	ldi	r18, 0xFF	; 255
     b7e:	e2 1a       	sub	r14, r18
     b80:	f2 0a       	sbc	r15, r18
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	0f 3f       	cpi	r16, 0xFF	; 255
     b88:	af e9       	ldi	r26, 0x9F	; 159
     b8a:	1a 07       	cpc	r17, r26
     b8c:	10 f4       	brcc	.+4      	; 0xb92 <main+0x7c>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	4f ef       	ldi	r20, 0xFF	; 255
     b94:	5f e9       	ldi	r21, 0x9F	; 159
     b96:	84 9f       	mul	r24, r20
     b98:	90 01       	movw	r18, r0
     b9a:	85 9f       	mul	r24, r21
     b9c:	30 0d       	add	r19, r0
     b9e:	94 9f       	mul	r25, r20
     ba0:	30 0d       	add	r19, r0
     ba2:	11 24       	eor	r1, r1
     ba4:	02 17       	cp	r16, r18
     ba6:	13 07       	cpc	r17, r19
     ba8:	09 f0       	breq	.+2      	; 0xbac <main+0x96>
     baa:	48 c0       	rjmp	.+144    	; 0xc3c <main+0x126>
        {
            char buff[100] = { 0 };
     bac:	fe 01       	movw	r30, r28
     bae:	31 96       	adiw	r30, 0x01	; 1
     bb0:	84 e6       	ldi	r24, 0x64	; 100
     bb2:	df 01       	movw	r26, r30
     bb4:	1d 92       	st	X+, r1
     bb6:	8a 95       	dec	r24
     bb8:	e9 f7       	brne	.-6      	; 0xbb4 <main+0x9e>
            static uint8_t gh = 0;
            if (gh == 50)
     bba:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <gh.4504>
     bbe:	82 33       	cpi	r24, 0x32	; 50
            {
                fprintf(&USBSerialStream, "\r\nguess_host_os: %s\r\n\r\n",
     bc0:	c1 f4       	brne	.+48     	; 0xbf2 <main+0xdc>
     bc2:	d2 de       	rcall	.-604    	; 0x968 <guess_host_os_string>
     bc4:	9f 93       	push	r25
     bc6:	8f 93       	push	r24
     bc8:	86 e3       	ldi	r24, 0x36	; 54
     bca:	94 e0       	ldi	r25, 0x04	; 4
     bcc:	9f 93       	push	r25
     bce:	8f 93       	push	r24
     bd0:	8c e3       	ldi	r24, 0x3C	; 60
     bd2:	95 e0       	ldi	r25, 0x05	; 5
     bd4:	9f 93       	push	r25
     bd6:	8f 93       	push	r24
     bd8:	0e 94 f5 16 	call	0x2dea	; 0x2dea <fprintf>
                        guess_host_os_string());
                gh++;
     bdc:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <gh.4504>
     be0:	8f 5f       	subi	r24, 0xFF	; 255
     be2:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <gh.4504>
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	0f 90       	pop	r0
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
            }
            if (gh < 50)
     bf2:	80 91 29 05 	lds	r24, 0x0529	; 0x800529 <gh.4504>
     bf6:	82 33       	cpi	r24, 0x32	; 50
     bf8:	18 f4       	brcc	.+6      	; 0xc00 <main+0xea>
            {
                gh++;
     bfa:	8f 5f       	subi	r24, 0xFF	; 255
     bfc:	80 93 29 05 	sts	0x0529, r24	; 0x800529 <gh.4504>
            }

            sprintf(buff,
                    "hello world from AT90 (the first char typed in this PORT was: %c): %d\r\n",
                    first_char_typ, j++);
     c00:	cc 24       	eor	r12, r12
     c02:	c3 94       	inc	r12
     c04:	cd 0c       	add	r12, r13
            if (gh < 50)
            {
                gh++;
            }

            sprintf(buff,
     c06:	1f 92       	push	r1
     c08:	df 92       	push	r13
     c0a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <first_char_typ.4502>
     c0e:	1f 92       	push	r1
     c10:	8f 93       	push	r24
     c12:	8e e4       	ldi	r24, 0x4E	; 78
     c14:	94 e0       	ldi	r25, 0x04	; 4
     c16:	9f 93       	push	r25
     c18:	8f 93       	push	r24
     c1a:	8e 01       	movw	r16, r28
     c1c:	0f 5f       	subi	r16, 0xFF	; 255
     c1e:	1f 4f       	sbci	r17, 0xFF	; 255
     c20:	1f 93       	push	r17
     c22:	0f 93       	push	r16
     c24:	0e 94 6e 17 	call	0x2edc	; 0x2edc <sprintf>
                    "hello world from AT90 (the first char typed in this PORT was: %c): %d\r\n",
                    first_char_typ, j++);
            CDC_Device_SendString(&VirtualSerial2_CDC_Interface, buff);
     c28:	b8 01       	movw	r22, r16
     c2a:	80 e3       	ldi	r24, 0x30	; 48
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	48 d5       	rcall	.+2704   	; 0x16c0 <CDC_Device_SendString>
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	de bf       	out	0x3e, r29	; 62
     c36:	0f be       	out	0x3f, r0	; 63
                gh++;
            }

            sprintf(buff,
                    "hello world from AT90 (the first char typed in this PORT was: %c): %d\r\n",
                    first_char_typ, j++);
     c38:	cd bf       	out	0x3d, r28	; 61
            CDC_Device_SendString(&VirtualSerial2_CDC_Interface, buff);
        }

        CDC_Device_USBTask(&VirtualSerial2_CDC_Interface);
     c3a:	dc 2c       	mov	r13, r12
     c3c:	80 e3       	ldi	r24, 0x30	; 48
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	cd d5       	rcall	.+2970   	; 0x17dc <CDC_Device_USBTask>
        USB_USBTask();
     c42:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <USB_USBTask>
            {
                first_char_typ = ReceivedByte;
            }
        }

        if (i++ % 0x9FFF == 0)
     c46:	87 01       	movw	r16, r14
            CDC_Device_SendString(&VirtualSerial2_CDC_Interface, buff);
        }

        CDC_Device_USBTask(&VirtualSerial2_CDC_Interface);
        USB_USBTask();
    }
     c48:	7f cf       	rjmp	.-258    	; 0xb48 <main+0x32>

00000c4a <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    printf_P(PSTR("Connect\r\n"));
     c4a:	8d ea       	ldi	r24, 0xAD	; 173
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	9f 93       	push	r25
     c50:	8f 93       	push	r24
     c52:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <printf_P>
     c56:	8b b1       	in	r24, 0x0b	; 11
     c58:	8f 73       	andi	r24, 0x3F	; 63
     c5a:	80 68       	ori	r24, 0x80	; 128
     c5c:	8b b9       	out	0x0b, r24	; 11

    LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	08 95       	ret

00000c64 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    printf_P(PSTR("Disconnect\r\n"));
     c64:	80 ea       	ldi	r24, 0xA0	; 160
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	9f 93       	push	r25
     c6a:	8f 93       	push	r24
     c6c:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <printf_P>
     c70:	8b b1       	in	r24, 0x0b	; 11
     c72:	8f 73       	andi	r24, 0x3F	; 63
     c74:	80 64       	ori	r24, 0x40	; 64
     c76:	8b b9       	out	0x0b, r24	; 11
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	08 95       	ret

00000c7e <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     c7e:	cf 93       	push	r28
    bool ConfigSuccess = true;

    printf_P(PSTR("Ready\r\n"));
     c80:	88 e9       	ldi	r24, 0x98	; 152
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	9f 93       	push	r25
     c86:	8f 93       	push	r24
     c88:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <printf_P>

    ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     c8c:	8b e4       	ldi	r24, 0x4B	; 75
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 55 0e 	call	0x1caa	; 0x1caa <HID_Device_ConfigureEndpoints>
     c94:	c8 2f       	mov	r28, r24
    ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     c96:	8b e5       	ldi	r24, 0x5B	; 91
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	0e 94 19 10 	call	0x2032	; 0x2032 <MS_Device_ConfigureEndpoints>
     c9e:	c8 23       	and	r28, r24
    ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial2_CDC_Interface);
     ca0:	80 e3       	ldi	r24, 0x30	; 48
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	eb d4       	rcall	.+2518   	; 0x167c <CDC_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     ca6:	e2 ee       	ldi	r30, 0xE2	; 226
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	90 81       	ld	r25, Z
     cac:	94 60       	ori	r25, 0x04	; 4
     cae:	90 83       	st	Z, r25

    USB_Device_EnableSOFEvents();

    LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	cc 23       	and	r28, r28
     cb6:	21 f0       	breq	.+8      	; 0xcc0 <EVENT_USB_Device_ConfigurationChanged+0x42>
     cb8:	88 23       	and	r24, r24
     cba:	11 f0       	breq	.+4      	; 0xcc0 <EVENT_USB_Device_ConfigurationChanged+0x42>
     cbc:	90 ec       	ldi	r25, 0xC0	; 192
     cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <EVENT_USB_Device_ConfigurationChanged+0x44>
     cc0:	90 e4       	ldi	r25, 0x40	; 64
     cc2:	8b b1       	in	r24, 0x0b	; 11
     cc4:	8f 73       	andi	r24, 0x3F	; 63
     cc6:	89 2b       	or	r24, r25
     cc8:	8b b9       	out	0x0b, r24	; 11
}
     cca:	cf 91       	pop	r28
     ccc:	08 95       	ret

00000cce <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
    MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     cce:	8b e5       	ldi	r24, 0x5B	; 91
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <MS_Device_ProcessControlRequest>
    HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     cd6:	8b e4       	ldi	r24, 0x4B	; 75
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	92 d6       	rcall	.+3364   	; 0x1a00 <HID_Device_ProcessControlRequest>
    CDC_Device_ProcessControlRequest(&VirtualSerial2_CDC_Interface);
     cdc:	80 e3       	ldi	r24, 0x30	; 48
     cde:	91 e0       	ldi	r25, 0x01	; 1
     ce0:	ed c5       	rjmp	.+3034   	; 0x18bc <CDC_Device_ProcessControlRequest>
     ce2:	08 95       	ret

00000ce4 <CALLBACK_MS_Device_SCSICommandReceived>:
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const
        MSInterfaceInfo)
{
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	ec 01       	movw	r28, r24
    bool CommandSuccess;
    static bool show_os = false;

    if (!show_os)
     cea:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <show_os.4774>
     cee:	81 11       	cpse	r24, r1
     cf0:	10 c0       	rjmp	.+32     	; 0xd12 <CALLBACK_MS_Device_SCSICommandReceived+0x2e>
    {
        show_os = true;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <show_os.4774>
        printf("\r\nguess_host_os: %s\r\n", guess_host_os_string());
     cf8:	37 de       	rcall	.-914    	; 0x968 <guess_host_os_string>
     cfa:	9f 93       	push	r25
     cfc:	8f 93       	push	r24
     cfe:	86 e9       	ldi	r24, 0x96	; 150
     d00:	94 e0       	ldi	r25, 0x04	; 4
     d02:	9f 93       	push	r25
     d04:	8f 93       	push	r24
     d06:	0e 94 04 17 	call	0x2e08	; 0x2e08 <printf>
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
    }


    if (!last_led)
     d12:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <last_led>
     d16:	81 11       	cpse	r24, r1
     d18:	04 c0       	rjmp	.+8      	; 0xd22 <CALLBACK_MS_Device_SCSICommandReceived+0x3e>
     d1a:	8b b1       	in	r24, 0x0b	; 11
     d1c:	8f 73       	andi	r24, 0x3F	; 63
     d1e:	80 68       	ori	r24, 0x80	; 128
     d20:	8b b9       	out	0x0b, r24	; 11
    {
        LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
    }

    CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     d22:	ce 01       	movw	r24, r28
     d24:	4d d2       	rcall	.+1178   	; 0x11c0 <SCSI_DecodeSCSICommand>

    if (!last_led)
     d26:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <last_led>
     d2a:	91 11       	cpse	r25, r1
     d2c:	03 c0       	rjmp	.+6      	; 0xd34 <CALLBACK_MS_Device_SCSICommandReceived+0x50>
     d2e:	9b b1       	in	r25, 0x0b	; 11
     d30:	90 6c       	ori	r25, 0xC0	; 192
     d32:	9b b9       	out	0x0b, r25	; 11
    {
        LEDs_SetAllLEDs(LEDMASK_USB_READY);
    }

    return CommandSuccess;
}
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	08 95       	ret

00000d3a <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     d3a:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <Keyboard_HID_Interface+0xe>
     d3e:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <Keyboard_HID_Interface+0xf>
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	29 f0       	breq	.+10     	; 0xd50 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <Keyboard_HID_Interface+0xf>
     d4c:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <Keyboard_HID_Interface+0xe>
     d50:	08 95       	ret

00000d52 <CALLBACK_HID_Device_CreateHIDReport>:
        HIDInterfaceInfo,
        uint8_t* const ReportID,
        const uint8_t ReportType,
        void* ReportData,
        uint16_t* const ReportSize)
{
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	e9 01       	movw	r28, r18
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return (((PIND & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1) | ((PINE & BUTTONS_BUTTON2) ^ BUTTONS_BUTTON2));
     d5c:	49 b1       	in	r20, 0x09	; 9
     d5e:	8c b1       	in	r24, 0x0c	; 12
     d60:	40 95       	com	r20
     d62:	40 72       	andi	r20, 0x20	; 32
     d64:	80 95       	com	r24
     d66:	84 70       	andi	r24, 0x04	; 4
     d68:	48 2b       	or	r20, r24
    static uint16_t i = 0;
    uint8_t ButtonStatus_LCL = Buttons_GetStatus();



    i++;
     d6a:	e0 91 26 05 	lds	r30, 0x0526	; 0x800526 <i.4791>
     d6e:	f0 91 27 05 	lds	r31, 0x0527	; 0x800527 <i.4791+0x1>
     d72:	31 96       	adiw	r30, 0x01	; 1
     d74:	f0 93 27 05 	sts	0x0527, r31	; 0x800527 <i.4791+0x1>
     d78:	e0 93 26 05 	sts	0x0526, r30	; 0x800526 <i.4791>
    if (i % 0x8F == 0)
     d7c:	9f 01       	movw	r18, r30
     d7e:	a3 e9       	ldi	r26, 0x93	; 147
     d80:	b2 e7       	ldi	r27, 0x72	; 114
     d82:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__umulhisi3>
     d86:	00 24       	eor	r0, r0
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	00 1c       	adc	r0, r0
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	00 1c       	adc	r0, r0
     d94:	89 2f       	mov	r24, r25
     d96:	90 2d       	mov	r25, r0
     d98:	5f e8       	ldi	r21, 0x8F	; 143
     d9a:	58 9f       	mul	r21, r24
     d9c:	90 01       	movw	r18, r0
     d9e:	59 9f       	mul	r21, r25
     da0:	30 0d       	add	r19, r0
     da2:	11 24       	eor	r1, r1
     da4:	e2 17       	cp	r30, r18
     da6:	f3 07       	cpc	r31, r19
     da8:	21 f4       	brne	.+8      	; 0xdb2 <CALLBACK_HID_Device_CreateHIDReport+0x60>
    {
        i = 0;
     daa:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <i.4791+0x1>
     dae:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <i.4791>
    }


    if (last_shift)
     db2:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <last_shift.4786>
     db6:	88 23       	and	r24, r24
     db8:	19 f0       	breq	.+6      	; 0xdc0 <CALLBACK_HID_Device_CreateHIDReport+0x6e>
    {
        KeyboardReport->Modifier = 0;
     dba:	18 82       	st	Y, r1
        last_shift = false;
     dbc:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <last_shift.4786>
     dc0:	84 2f       	mov	r24, r20
     dc2:	80 72       	andi	r24, 0x20	; 32
    }

    if ((ButtonStatus_LCL & BUTTONS_BUTTON1)
     dc4:	89 f1       	breq	.+98     	; 0xe28 <CALLBACK_HID_Device_CreateHIDReport+0xd6>
            && (ButtonStatus_LCL & BUTTONS_BUTTON2))
     dc6:	42 ff       	sbrs	r20, 2
     dc8:	2f c0       	rjmp	.+94     	; 0xe28 <CALLBACK_HID_Device_CreateHIDReport+0xd6>
    {
        KeyboardReport->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	88 83       	st	Y, r24
        KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_D;
     dce:	87 e0       	ldi	r24, 0x07	; 7
     dd0:	8a 83       	std	Y+2, r24	; 0x02
        last_shift = true;
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <last_shift.4786>
     dd8:	8b b1       	in	r24, 0x0b	; 11
     dda:	80 6c       	ori	r24, 0xC0	; 192
     ddc:	8b b9       	out	0x0b, r24	; 11
        LEDs_SetAllLEDs(LEDS_LED1 | LEDS_LED2);
        last_led = true;
     dde:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <last_led>

        switch (guess_host_os())
     de2:	ae dd       	rcall	.-1188   	; 0x940 <guess_host_os>
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	59 f0       	breq	.+22     	; 0xdfe <CALLBACK_HID_Device_CreateHIDReport+0xac>
     de8:	18 f0       	brcs	.+6      	; 0xdf0 <CALLBACK_HID_Device_CreateHIDReport+0x9e>
     dea:	82 30       	cpi	r24, 0x02	; 2
     dec:	79 f0       	breq	.+30     	; 0xe0c <CALLBACK_HID_Device_CreateHIDReport+0xba>
     dee:	15 c0       	rjmp	.+42     	; 0xe1a <CALLBACK_HID_Device_CreateHIDReport+0xc8>
        {
            case GO_WINDOWS:
                str_to_print = OS_WIN;
     df0:	8c e1       	ldi	r24, 0x1C	; 28
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	90 93 24 05 	sts	0x0524, r25	; 0x800524 <str_to_print.4787+0x1>
     df8:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <str_to_print.4787>
                break;
     dfc:	4e c0       	rjmp	.+156    	; 0xe9a <CALLBACK_HID_Device_CreateHIDReport+0x148>

            case GO_LINUX:
                str_to_print = OS_LIN;
     dfe:	8d e0       	ldi	r24, 0x0D	; 13
     e00:	91 e0       	ldi	r25, 0x01	; 1
     e02:	90 93 24 05 	sts	0x0524, r25	; 0x800524 <str_to_print.4787+0x1>
     e06:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <str_to_print.4787>
                break;
     e0a:	47 c0       	rjmp	.+142    	; 0xe9a <CALLBACK_HID_Device_CreateHIDReport+0x148>

            case GO_MAC:
                str_to_print = OS_MAC;
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	90 93 24 05 	sts	0x0524, r25	; 0x800524 <str_to_print.4787+0x1>
     e14:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <str_to_print.4787>
                break;
     e18:	40 c0       	rjmp	.+128    	; 0xe9a <CALLBACK_HID_Device_CreateHIDReport+0x148>

            default:
                str_to_print = OS_WIN;
     e1a:	8c e1       	ldi	r24, 0x1C	; 28
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	90 93 24 05 	sts	0x0524, r25	; 0x800524 <str_to_print.4787+0x1>
     e22:	80 93 23 05 	sts	0x0523, r24	; 0x800523 <str_to_print.4787>
                break;
     e26:	39 c0       	rjmp	.+114    	; 0xe9a <CALLBACK_HID_Device_CreateHIDReport+0x148>
        }
    }
    else if (ButtonStatus_LCL & BUTTONS_BUTTON2)
     e28:	42 ff       	sbrs	r20, 2
     e2a:	0a c0       	rjmp	.+20     	; 0xe40 <CALLBACK_HID_Device_CreateHIDReport+0xee>
    {
        KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_R;
     e2c:	85 e1       	ldi	r24, 0x15	; 21
     e2e:	8a 83       	std	Y+2, r24	; 0x02
     e30:	8b b1       	in	r24, 0x0b	; 11
     e32:	8f 73       	andi	r24, 0x3F	; 63
     e34:	80 64       	ori	r24, 0x40	; 64
     e36:	8b b9       	out	0x0b, r24	; 11
        LEDs_SetAllLEDs(LEDS_LED1);
        last_led = true;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <last_led>
     e3e:	2d c0       	rjmp	.+90     	; 0xe9a <CALLBACK_HID_Device_CreateHIDReport+0x148>
    }
    else if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     e40:	88 23       	and	r24, r24
     e42:	51 f0       	breq	.+20     	; 0xe58 <CALLBACK_HID_Device_CreateHIDReport+0x106>
    {
        KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_G;
     e44:	8a e0       	ldi	r24, 0x0A	; 10
     e46:	8a 83       	std	Y+2, r24	; 0x02
     e48:	8b b1       	in	r24, 0x0b	; 11
     e4a:	8f 73       	andi	r24, 0x3F	; 63
     e4c:	80 68       	ori	r24, 0x80	; 128
     e4e:	8b b9       	out	0x0b, r24	; 11
        LEDs_SetAllLEDs(LEDS_LED2);
        last_led = true;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <last_led>
     e56:	21 c0       	rjmp	.+66     	; 0xe9a <CALLBACK_HID_Device_CreateHIDReport+0x148>
    }
    else
    {
        if (last_led)
     e58:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <last_led>
     e5c:	88 23       	and	r24, r24
     e5e:	29 f0       	breq	.+10     	; 0xe6a <CALLBACK_HID_Device_CreateHIDReport+0x118>
        {
            last_led = false;
     e60:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <last_led>
     e64:	8b b1       	in	r24, 0x0b	; 11
     e66:	8f 73       	andi	r24, 0x3F	; 63
     e68:	8b b9       	out	0x0b, r24	; 11
            LEDs_SetAllLEDs(LEDS_NO_LEDS);
        }
        if (*str_to_print == '\0')
     e6a:	e0 91 23 05 	lds	r30, 0x0523	; 0x800523 <str_to_print.4787>
     e6e:	f0 91 24 05 	lds	r31, 0x0524	; 0x800524 <str_to_print.4787+0x1>
     e72:	80 81       	ld	r24, Z
     e74:	81 11       	cpse	r24, r1
     e76:	05 c0       	rjmp	.+10     	; 0xe82 <CALLBACK_HID_Device_CreateHIDReport+0x130>
        {
            str_to_print = NULL;
     e78:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <str_to_print.4787+0x1>
     e7c:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <str_to_print.4787>
     e80:	0c c0       	rjmp	.+24     	; 0xe9a <CALLBACK_HID_Device_CreateHIDReport+0x148>
        }
        else
        {
            if (i == 0)
     e82:	20 91 26 05 	lds	r18, 0x0526	; 0x800526 <i.4791>
     e86:	30 91 27 05 	lds	r19, 0x0527	; 0x800527 <i.4791+0x1>
     e8a:	23 2b       	or	r18, r19
     e8c:	31 f4       	brne	.+12     	; 0xe9a <CALLBACK_HID_Device_CreateHIDReport+0x148>
            {
                KeyboardReport->KeyCode[0] = *str_to_print;
     e8e:	8a 83       	std	Y+2, r24	; 0x02
                str_to_print++;
     e90:	31 96       	adiw	r30, 0x01	; 1
     e92:	f0 93 24 05 	sts	0x0524, r31	; 0x800524 <str_to_print.4787+0x1>
     e96:	e0 93 23 05 	sts	0x0523, r30	; 0x800523 <str_to_print.4787>
            }
        }
    }

    *ReportSize = sizeof(USB_KeyboardReport_Data_t);
     e9a:	88 e0       	ldi	r24, 0x08	; 8
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	f8 01       	movw	r30, r16
     ea0:	91 83       	std	Z+1, r25	; 0x01
     ea2:	80 83       	st	Z, r24
    return false;
}
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	08 95       	ret

00000eb0 <CALLBACK_HID_Device_ProcessHIDReport>:
        const uint16_t ReportSize)
{
    uint8_t  LEDMask   = LEDS_NO_LEDS;
    uint8_t* LEDReport = (uint8_t*)ReportData;

    if (last_led)
     eb0:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <last_led>
     eb4:	81 11       	cpse	r24, r1
     eb6:	0c c0       	rjmp	.+24     	; 0xed0 <CALLBACK_HID_Device_ProcessHIDReport+0x20>
    {
        return;
    }

    if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     eb8:	f9 01       	movw	r30, r18
     eba:	90 81       	ld	r25, Z
     ebc:	90 fd       	sbrc	r25, 0
    {
        LEDMask |= LEDS_LED1;
     ebe:	80 e4       	ldi	r24, 0x40	; 64
    }

    if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     ec0:	91 fd       	sbrc	r25, 1
    {
        LEDMask |= LEDS_LED2;
     ec2:	80 68       	ori	r24, 0x80	; 128
    }

    if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     ec4:	92 fd       	sbrc	r25, 2
    {
        LEDMask |= LEDS_LED1 | LEDS_LED2;
     ec6:	80 6c       	ori	r24, 0xC0	; 192
     ec8:	9b b1       	in	r25, 0x0b	; 11
     eca:	9f 73       	andi	r25, 0x3F	; 63
     ecc:	89 2b       	or	r24, r25
     ece:	8b b9       	out	0x0b, r24	; 11
     ed0:	08 95       	ret

00000ed2 <EVENT_CDC_Device_ControLineStateChanged>:
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const
        CDCInterfaceInfo)
{
     ed2:	08 95       	ret

00000ed4 <SCSI_Command_ModeSense_6>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ModeSense_6(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     ed4:	dc 01       	movw	r26, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ed6:	e1 ef       	ldi	r30, 0xF1	; 241
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	10 82       	st	Z, r1
     edc:	10 82       	st	Z, r1
     ede:	10 82       	st	Z, r1
     ee0:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ee2:	e8 ee       	ldi	r30, 0xE8	; 232
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	90 81       	ld	r25, Z
     ee8:	9e 77       	andi	r25, 0x7E	; 126
     eea:	90 83       	st	Z, r25
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     eec:	54 96       	adiw	r26, 0x14	; 20
     eee:	4d 91       	ld	r20, X+
     ef0:	5d 91       	ld	r21, X+
     ef2:	6d 91       	ld	r22, X+
     ef4:	7c 91       	ld	r23, X
     ef6:	57 97       	sbiw	r26, 0x17	; 23
     ef8:	44 50       	subi	r20, 0x04	; 4
     efa:	51 09       	sbc	r21, r1
     efc:	61 09       	sbc	r22, r1
     efe:	71 09       	sbc	r23, r1
     f00:	54 96       	adiw	r26, 0x14	; 20
     f02:	4d 93       	st	X+, r20
     f04:	5d 93       	st	X+, r21
     f06:	6d 93       	st	X+, r22
     f08:	7c 93       	st	X, r23
     f0a:	57 97       	sbiw	r26, 0x17	; 23

	return true;
}
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	08 95       	ret

00000f10 <SCSI_Command_Request_Sense>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     f10:	ef 92       	push	r14
     f12:	ff 92       	push	r15
     f14:	0f 93       	push	r16
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	8c 01       	movw	r16, r24
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     f1e:	fc 01       	movw	r30, r24
     f20:	c7 8d       	ldd	r28, Z+31	; 0x1f
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     f22:	dc 2f       	mov	r29, r28
     f24:	c3 31       	cpi	r28, 0x13	; 19
     f26:	08 f0       	brcs	.+2      	; 0xf2a <SCSI_Command_Request_Sense+0x1a>
     f28:	d2 e1       	ldi	r29, 0x12	; 18

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     f2a:	ed 2e       	mov	r14, r29
     f2c:	f1 2c       	mov	r15, r1
     f2e:	40 e0       	ldi	r20, 0x00	; 0
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	b7 01       	movw	r22, r14
     f34:	84 e9       	ldi	r24, 0x94	; 148
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	0e 94 ee 10 	call	0x21dc	; 0x21dc <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     f3c:	8c 2f       	mov	r24, r28
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	8e 19       	sub	r24, r14
     f46:	9f 09       	sbc	r25, r15
     f48:	0e 94 b0 10 	call	0x2160	; 0x2160 <Endpoint_Null_Stream>
     f4c:	e8 ee       	ldi	r30, 0xE8	; 232
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	8e 77       	andi	r24, 0x7E	; 126
     f54:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     f56:	f8 01       	movw	r30, r16
     f58:	84 89       	ldd	r24, Z+20	; 0x14
     f5a:	95 89       	ldd	r25, Z+21	; 0x15
     f5c:	a6 89       	ldd	r26, Z+22	; 0x16
     f5e:	b7 89       	ldd	r27, Z+23	; 0x17
     f60:	8d 1b       	sub	r24, r29
     f62:	91 09       	sbc	r25, r1
     f64:	a1 09       	sbc	r26, r1
     f66:	b1 09       	sbc	r27, r1
     f68:	84 8b       	std	Z+20, r24	; 0x14
     f6a:	95 8b       	std	Z+21, r25	; 0x15
     f6c:	a6 8b       	std	Z+22, r26	; 0x16
     f6e:	b7 8b       	std	Z+23, r27	; 0x17

	return true;
}
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	ff 90       	pop	r15
     f7c:	ef 90       	pop	r14
     f7e:	08 95       	ret

00000f80 <SCSI_Command_Inquiry>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	fc 01       	movw	r30, r24
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
     f8e:	86 8d       	ldd	r24, Z+30	; 0x1e
     f90:	97 8d       	ldd	r25, Z+31	; 0x1f

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     f92:	09 2f       	mov	r16, r25
     f94:	18 2f       	mov	r17, r24
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     f96:	78 01       	movw	r14, r16
     f98:	05 32       	cpi	r16, 0x25	; 37
     f9a:	11 05       	cpc	r17, r1
     f9c:	28 f0       	brcs	.+10     	; 0xfa8 <SCSI_Command_Inquiry+0x28>
     f9e:	0f 2e       	mov	r0, r31
     fa0:	f4 e2       	ldi	r31, 0x24	; 36
     fa2:	ef 2e       	mov	r14, r31
     fa4:	f1 2c       	mov	r15, r1
     fa6:	f0 2d       	mov	r31, r0

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     fa8:	84 8d       	ldd	r24, Z+28	; 0x1c
     faa:	83 70       	andi	r24, 0x03	; 3
     fac:	19 f4       	brne	.+6      	; 0xfb4 <SCSI_Command_Inquiry+0x34>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
     fae:	85 8d       	ldd	r24, Z+29	; 0x1d
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     fb0:	88 23       	and	r24, r24
     fb2:	69 f0       	breq	.+26     	; 0xfce <SCSI_Command_Inquiry+0x4e>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     fb4:	e6 e9       	ldi	r30, 0x96	; 150
     fb6:	f1 e0       	ldi	r31, 0x01	; 1
     fb8:	80 81       	ld	r24, Z
     fba:	80 7f       	andi	r24, 0xF0	; 240
     fbc:	85 60       	ori	r24, 0x05	; 5
     fbe:	80 83       	st	Z, r24
     fc0:	e4 e9       	ldi	r30, 0x94	; 148
     fc2:	f1 e0       	ldi	r31, 0x01	; 1
     fc4:	84 e2       	ldi	r24, 0x24	; 36
     fc6:	84 87       	std	Z+12, r24	; 0x0c
     fc8:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_INVALID_FIELD_IN_CDB,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	21 c0       	rjmp	.+66     	; 0x1010 <SCSI_Command_Inquiry+0x90>
     fce:	ef 01       	movw	r28, r30
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	b7 01       	movw	r22, r14
     fd6:	8c ea       	ldi	r24, 0xAC	; 172
     fd8:	94 e0       	ldi	r25, 0x04	; 4
     fda:	0e 94 ee 10 	call	0x21dc	; 0x21dc <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	70 e0       	ldi	r23, 0x00	; 0
     fe2:	c8 01       	movw	r24, r16
     fe4:	8e 19       	sub	r24, r14
     fe6:	9f 09       	sbc	r25, r15
     fe8:	0e 94 b0 10 	call	0x2160	; 0x2160 <Endpoint_Null_Stream>
     fec:	e8 ee       	ldi	r30, 0xE8	; 232
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	8e 77       	andi	r24, 0x7E	; 126
     ff4:	80 83       	st	Z, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     ff6:	8c 89       	ldd	r24, Y+20	; 0x14
     ff8:	9d 89       	ldd	r25, Y+21	; 0x15
     ffa:	ae 89       	ldd	r26, Y+22	; 0x16
     ffc:	bf 89       	ldd	r27, Y+23	; 0x17
     ffe:	8e 19       	sub	r24, r14
    1000:	9f 09       	sbc	r25, r15
    1002:	a1 09       	sbc	r26, r1
    1004:	b1 09       	sbc	r27, r1
    1006:	8c 8b       	std	Y+20, r24	; 0x14
    1008:	9d 8b       	std	Y+21, r25	; 0x15
    100a:	ae 8b       	std	Y+22, r26	; 0x16
    100c:	bf 8b       	std	Y+23, r27	; 0x17

	return true;
    100e:	81 e0       	ldi	r24, 0x01	; 1
}
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	08 95       	ret

0000101e <SCSI_Command_Read_Capacity_10>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	28 97       	sbiw	r28, 0x08	; 8
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	8c 01       	movw	r16, r24
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
    1038:	1a d1       	rcall	.+564    	; 0x126e <sdcard_GetNbBlocks>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	a1 09       	sbc	r26, r1
    1042:	b1 09       	sbc	r27, r1
    1044:	89 83       	std	Y+1, r24	; 0x01
    1046:	9a 83       	std	Y+2, r25	; 0x02
    1048:	ab 83       	std	Y+3, r26	; 0x03
    104a:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	92 e0       	ldi	r25, 0x02	; 2
    1050:	a0 e0       	ldi	r26, 0x00	; 0
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	8d 83       	std	Y+5, r24	; 0x05
    1056:	9e 83       	std	Y+6, r25	; 0x06
    1058:	af 83       	std	Y+7, r26	; 0x07
    105a:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	64 e0       	ldi	r22, 0x04	; 4
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	ce 01       	movw	r24, r28
    1066:	01 96       	adiw	r24, 0x01	; 1
    1068:	0e 94 37 11 	call	0x226e	; 0x226e <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
    106c:	40 e0       	ldi	r20, 0x00	; 0
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	64 e0       	ldi	r22, 0x04	; 4
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	ce 01       	movw	r24, r28
    1076:	05 96       	adiw	r24, 0x05	; 5
    1078:	0e 94 37 11 	call	0x226e	; 0x226e <Endpoint_Write_Stream_BE>
    107c:	e8 ee       	ldi	r30, 0xE8	; 232
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	8e 77       	andi	r24, 0x7E	; 126
    1084:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
    1086:	f8 01       	movw	r30, r16
    1088:	84 89       	ldd	r24, Z+20	; 0x14
    108a:	95 89       	ldd	r25, Z+21	; 0x15
    108c:	a6 89       	ldd	r26, Z+22	; 0x16
    108e:	b7 89       	ldd	r27, Z+23	; 0x17
    1090:	08 97       	sbiw	r24, 0x08	; 8
    1092:	a1 09       	sbc	r26, r1
    1094:	b1 09       	sbc	r27, r1
    1096:	84 8b       	std	Z+20, r24	; 0x14
    1098:	95 8b       	std	Z+21, r25	; 0x15
    109a:	a6 8b       	std	Z+22, r26	; 0x16
    109c:	b7 8b       	std	Z+23, r27	; 0x17

	return true;
}
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	28 96       	adiw	r28, 0x08	; 8
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	08 95       	ret

000010b6 <SCSI_Command_Send_Diagnostic>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
    10ba:	fc 01       	movw	r30, r24
    10bc:	24 8d       	ldd	r18, Z+28	; 0x1c
    10be:	22 fd       	sbrc	r18, 2
    10c0:	0d c0       	rjmp	.+26     	; 0x10dc <SCSI_Command_Send_Diagnostic+0x26>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    10c2:	e6 e9       	ldi	r30, 0x96	; 150
    10c4:	f1 e0       	ldi	r31, 0x01	; 1
    10c6:	80 81       	ld	r24, Z
    10c8:	80 7f       	andi	r24, 0xF0	; 240
    10ca:	85 60       	ori	r24, 0x05	; 5
    10cc:	80 83       	st	Z, r24
    10ce:	e4 e9       	ldi	r30, 0x94	; 148
    10d0:	f1 e0       	ldi	r31, 0x01	; 1
    10d2:	84 e2       	ldi	r24, 0x24	; 36
    10d4:	84 87       	std	Z+12, r24	; 0x0c
    10d6:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_INVALID_FIELD_IN_CDB,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	13 c0       	rjmp	.+38     	; 0x1102 <SCSI_Command_Send_Diagnostic+0x4c>
    10dc:	ec 01       	movw	r28, r24
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(sdcard_CheckDataflashOperation()))
    10de:	88 d2       	rcall	.+1296   	; 0x15f0 <sdcard_CheckDataflashOperation>
    10e0:	81 11       	cpse	r24, r1
    10e2:	0b c0       	rjmp	.+22     	; 0x10fa <SCSI_Command_Send_Diagnostic+0x44>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
    10e4:	e6 e9       	ldi	r30, 0x96	; 150
    10e6:	f1 e0       	ldi	r31, 0x01	; 1
    10e8:	90 81       	ld	r25, Z
    10ea:	90 7f       	andi	r25, 0xF0	; 240
    10ec:	94 60       	ori	r25, 0x04	; 4
    10ee:	90 83       	st	Z, r25
    10f0:	e4 e9       	ldi	r30, 0x94	; 148
    10f2:	f1 e0       	ldi	r31, 0x01	; 1
    10f4:	14 86       	std	Z+12, r1	; 0x0c
    10f6:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    10f8:	04 c0       	rjmp	.+8      	; 0x1102 <SCSI_Command_Send_Diagnostic+0x4c>
	}

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    10fa:	1c 8a       	std	Y+20, r1	; 0x14
    10fc:	1d 8a       	std	Y+21, r1	; 0x15
    10fe:	1e 8a       	std	Y+22, r1	; 0x16
    1100:	1f 8a       	std	Y+23, r1	; 0x17

	return true;
}
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	08 95       	ret

00001108 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
    1108:	bf 92       	push	r11
    110a:	cf 92       	push	r12
    110c:	df 92       	push	r13
    110e:	ef 92       	push	r14
    1110:	ff 92       	push	r15
    1112:	0f 93       	push	r16
    1114:	1f 93       	push	r17
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	ec 01       	movw	r28, r24
    111c:	b6 2e       	mov	r11, r22

		return false;
	}

	/* Load in the 32-bit block address (SCSI uses big-endian, so have to reverse the byte order) */
	BlockAddress = SwapEndian_32(*(uint32_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[2]);
    111e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1120:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1122:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1124:	38 a1       	ldd	r19, Y+32	; 0x20

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
    1126:	c3 2e       	mov	r12, r19
    1128:	d2 2e       	mov	r13, r18
    112a:	e9 2e       	mov	r14, r25
    112c:	f8 2e       	mov	r15, r24

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);
    112e:	8a a1       	ldd	r24, Y+34	; 0x22
    1130:	9b a1       	ldd	r25, Y+35	; 0x23

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    1132:	09 2f       	mov	r16, r25
    1134:	18 2f       	mov	r17, r24

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
    1136:	9b d0       	rcall	.+310    	; 0x126e <sdcard_GetNbBlocks>
    1138:	c6 16       	cp	r12, r22
    113a:	d7 06       	cpc	r13, r23
    113c:	e8 06       	cpc	r14, r24
    113e:	f9 06       	cpc	r15, r25
    1140:	68 f0       	brcs	.+26     	; 0x115c <SCSI_Command_ReadWrite_10+0x54>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    1142:	e6 e9       	ldi	r30, 0x96	; 150
    1144:	f1 e0       	ldi	r31, 0x01	; 1
    1146:	80 81       	ld	r24, Z
    1148:	80 7f       	andi	r24, 0xF0	; 240
    114a:	85 60       	ori	r24, 0x05	; 5
    114c:	80 83       	st	Z, r24
    114e:	e4 e9       	ldi	r30, 0x94	; 148
    1150:	f1 e0       	ldi	r31, 0x01	; 1
    1152:	81 e2       	ldi	r24, 0x21	; 33
    1154:	84 87       	std	Z+12, r24	; 0x0c
    1156:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	28 c0       	rjmp	.+80     	; 0x11ac <SCSI_Command_ReadWrite_10+0xa4>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
    115c:	bb 20       	and	r11, r11
    115e:	31 f0       	breq	.+12     	; 0x116c <SCSI_Command_ReadWrite_10+0x64>
	  sdcard_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    1160:	98 01       	movw	r18, r16
    1162:	b7 01       	movw	r22, r14
    1164:	a6 01       	movw	r20, r12
    1166:	ce 01       	movw	r24, r28
    1168:	b6 d1       	rcall	.+876    	; 0x14d6 <sdcard_ReadBlocks>
    116a:	05 c0       	rjmp	.+10     	; 0x1176 <SCSI_Command_ReadWrite_10+0x6e>
	else
	  sdcard_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    116c:	98 01       	movw	r18, r16
    116e:	b7 01       	movw	r22, r14
    1170:	a6 01       	movw	r20, r12
    1172:	ce 01       	movw	r24, r28
    1174:	4c d1       	rcall	.+664    	; 0x140e <sdcard_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
    1176:	c8 01       	movw	r24, r16
    1178:	a0 e0       	ldi	r26, 0x00	; 0
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	07 2e       	mov	r0, r23
    117e:	79 e0       	ldi	r23, 0x09	; 9
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	aa 1f       	adc	r26, r26
    1186:	bb 1f       	adc	r27, r27
    1188:	7a 95       	dec	r23
    118a:	d1 f7       	brne	.-12     	; 0x1180 <SCSI_Command_ReadWrite_10+0x78>
    118c:	70 2d       	mov	r23, r0
    118e:	4c 89       	ldd	r20, Y+20	; 0x14
    1190:	5d 89       	ldd	r21, Y+21	; 0x15
    1192:	6e 89       	ldd	r22, Y+22	; 0x16
    1194:	7f 89       	ldd	r23, Y+23	; 0x17
    1196:	8a 01       	movw	r16, r20
    1198:	9b 01       	movw	r18, r22
    119a:	08 1b       	sub	r16, r24
    119c:	19 0b       	sbc	r17, r25
    119e:	2a 0b       	sbc	r18, r26
    11a0:	3b 0b       	sbc	r19, r27
    11a2:	0c 8b       	std	Y+20, r16	; 0x14
    11a4:	1d 8b       	std	Y+21, r17	; 0x15
    11a6:	2e 8b       	std	Y+22, r18	; 0x16
    11a8:	3f 8b       	std	Y+23, r19	; 0x17

	return true;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
}
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	ff 90       	pop	r15
    11b6:	ef 90       	pop	r14
    11b8:	df 90       	pop	r13
    11ba:	cf 90       	pop	r12
    11bc:	bf 90       	pop	r11
    11be:	08 95       	ret

000011c0 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    11c0:	fc 01       	movw	r30, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    11c2:	93 8d       	ldd	r25, Z+27	; 0x1b
    11c4:	9d 31       	cpi	r25, 0x1D	; 29
    11c6:	21 f1       	breq	.+72     	; 0x1210 <SCSI_DecodeSCSICommand+0x50>
    11c8:	68 f4       	brcc	.+26     	; 0x11e4 <SCSI_DecodeSCSICommand+0x24>
    11ca:	92 31       	cpi	r25, 0x12	; 18
    11cc:	c1 f0       	breq	.+48     	; 0x11fe <SCSI_DecodeSCSICommand+0x3e>
    11ce:	28 f4       	brcc	.+10     	; 0x11da <SCSI_DecodeSCSICommand+0x1a>
    11d0:	99 23       	and	r25, r25
    11d2:	61 f1       	breq	.+88     	; 0x122c <SCSI_DecodeSCSICommand+0x6c>
    11d4:	93 30       	cpi	r25, 0x03	; 3
    11d6:	b1 f0       	breq	.+44     	; 0x1204 <SCSI_DecodeSCSICommand+0x44>
    11d8:	2f c0       	rjmp	.+94     	; 0x1238 <SCSI_DecodeSCSICommand+0x78>
    11da:	9a 31       	cpi	r25, 0x1A	; 26
    11dc:	21 f1       	breq	.+72     	; 0x1226 <SCSI_DecodeSCSICommand+0x66>
    11de:	9b 31       	cpi	r25, 0x1B	; 27
    11e0:	29 f1       	breq	.+74     	; 0x122c <SCSI_DecodeSCSICommand+0x6c>
    11e2:	2a c0       	rjmp	.+84     	; 0x1238 <SCSI_DecodeSCSICommand+0x78>
    11e4:	98 32       	cpi	r25, 0x28	; 40
    11e6:	d9 f0       	breq	.+54     	; 0x121e <SCSI_DecodeSCSICommand+0x5e>
    11e8:	28 f4       	brcc	.+10     	; 0x11f4 <SCSI_DecodeSCSICommand+0x34>
    11ea:	9e 31       	cpi	r25, 0x1E	; 30
    11ec:	f9 f0       	breq	.+62     	; 0x122c <SCSI_DecodeSCSICommand+0x6c>
    11ee:	95 32       	cpi	r25, 0x25	; 37
    11f0:	61 f0       	breq	.+24     	; 0x120a <SCSI_DecodeSCSICommand+0x4a>
    11f2:	22 c0       	rjmp	.+68     	; 0x1238 <SCSI_DecodeSCSICommand+0x78>
    11f4:	9a 32       	cpi	r25, 0x2A	; 42
    11f6:	79 f0       	breq	.+30     	; 0x1216 <SCSI_DecodeSCSICommand+0x56>
    11f8:	9f 32       	cpi	r25, 0x2F	; 47
    11fa:	c1 f0       	breq	.+48     	; 0x122c <SCSI_DecodeSCSICommand+0x6c>
    11fc:	1d c0       	rjmp	.+58     	; 0x1238 <SCSI_DecodeSCSICommand+0x78>
	{
		case SCSI_CMD_INQUIRY:
			CommandSuccess = SCSI_Command_Inquiry(MSInterfaceInfo);
    11fe:	cf 01       	movw	r24, r30
    1200:	bf de       	rcall	.-642    	; 0xf80 <SCSI_Command_Inquiry>
			break;
    1202:	26 c0       	rjmp	.+76     	; 0x1250 <SCSI_DecodeSCSICommand+0x90>
		case SCSI_CMD_REQUEST_SENSE:
			CommandSuccess = SCSI_Command_Request_Sense(MSInterfaceInfo);
    1204:	cf 01       	movw	r24, r30
    1206:	84 de       	rcall	.-760    	; 0xf10 <SCSI_Command_Request_Sense>
			break;
		case SCSI_CMD_READ_CAPACITY_10:
			CommandSuccess = SCSI_Command_Read_Capacity_10(MSInterfaceInfo);
    1208:	23 c0       	rjmp	.+70     	; 0x1250 <SCSI_DecodeSCSICommand+0x90>
    120a:	cf 01       	movw	r24, r30
			break;
    120c:	08 df       	rcall	.-496    	; 0x101e <SCSI_Command_Read_Capacity_10>
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
    120e:	20 c0       	rjmp	.+64     	; 0x1250 <SCSI_DecodeSCSICommand+0x90>
    1210:	cf 01       	movw	r24, r30
			break;
    1212:	51 df       	rcall	.-350    	; 0x10b6 <SCSI_Command_Send_Diagnostic>
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
    1214:	1d c0       	rjmp	.+58     	; 0x1250 <SCSI_DecodeSCSICommand+0x90>
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	cf 01       	movw	r24, r30
			break;
    121a:	76 df       	rcall	.-276    	; 0x1108 <SCSI_Command_ReadWrite_10>
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
    121c:	19 c0       	rjmp	.+50     	; 0x1250 <SCSI_DecodeSCSICommand+0x90>
    121e:	61 e0       	ldi	r22, 0x01	; 1
    1220:	cf 01       	movw	r24, r30
			break;
    1222:	72 df       	rcall	.-284    	; 0x1108 <SCSI_Command_ReadWrite_10>
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
    1224:	15 c0       	rjmp	.+42     	; 0x1250 <SCSI_DecodeSCSICommand+0x90>
    1226:	cf 01       	movw	r24, r30
    1228:	55 de       	rcall	.-854    	; 0xed4 <SCSI_Command_ModeSense_6>
			break;
    122a:	12 c0       	rjmp	.+36     	; 0x1250 <SCSI_DecodeSCSICommand+0x90>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    122c:	14 8a       	std	Z+20, r1	; 0x14
    122e:	15 8a       	std	Z+21, r1	; 0x15
    1230:	16 8a       	std	Z+22, r1	; 0x16
    1232:	17 8a       	std	Z+23, r1	; 0x17
		case SCSI_CMD_START_STOP_UNIT:
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
    1234:	81 e0       	ldi	r24, 0x01	; 1
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
			break;
    1236:	0c c0       	rjmp	.+24     	; 0x1250 <SCSI_DecodeSCSICommand+0x90>
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    1238:	e6 e9       	ldi	r30, 0x96	; 150
    123a:	f1 e0       	ldi	r31, 0x01	; 1
    123c:	80 81       	ld	r24, Z
    123e:	80 7f       	andi	r24, 0xF0	; 240
    1240:	85 60       	ori	r24, 0x05	; 5
    1242:	80 83       	st	Z, r24
    1244:	e4 e9       	ldi	r30, 0x94	; 148
    1246:	f1 e0       	ldi	r31, 0x01	; 1
    1248:	80 e2       	ldi	r24, 0x20	; 32
    124a:	84 87       	std	Z+12, r24	; 0x0c
    124c:	15 86       	std	Z+13, r1	; 0x0d
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess = false;
    124e:	80 e0       	ldi	r24, 0x00	; 0
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
    1250:	88 23       	and	r24, r24
    1252:	59 f0       	breq	.+22     	; 0x126a <SCSI_DecodeSCSICommand+0xaa>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
    1254:	e6 e9       	ldi	r30, 0x96	; 150
    1256:	f1 e0       	ldi	r31, 0x01	; 1
    1258:	80 81       	ld	r24, Z
    125a:	80 7f       	andi	r24, 0xF0	; 240
    125c:	80 83       	st	Z, r24
    125e:	e4 e9       	ldi	r30, 0x94	; 148
    1260:	f1 e0       	ldi	r31, 0x01	; 1
    1262:	14 86       	std	Z+12, r1	; 0x0c
    1264:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	08 95       	ret
	}

	return false;
    126a:	80 e0       	ldi	r24, 0x00	; 0
}
    126c:	08 95       	ret

0000126e <sdcard_GetNbBlocks>:

uint32_t sdcard_GetNbBlocks(void)
{
    static uint32_t CachedTotalBlocks = 0;

    if (CachedTotalBlocks != 0)
    126e:	60 91 53 09 	lds	r22, 0x0953	; 0x800953 <CachedTotalBlocks.4686>
    1272:	70 91 54 09 	lds	r23, 0x0954	; 0x800954 <CachedTotalBlocks.4686+0x1>
    1276:	80 91 55 09 	lds	r24, 0x0955	; 0x800955 <CachedTotalBlocks.4686+0x2>
    127a:	90 91 56 09 	lds	r25, 0x0956	; 0x800956 <CachedTotalBlocks.4686+0x3>
    127e:	61 15       	cp	r22, r1
    1280:	71 05       	cpc	r23, r1
    1282:	81 05       	cpc	r24, r1
    1284:	91 05       	cpc	r25, r1
    1286:	a9 f5       	brne	.+106    	; 0x12f2 <sdcard_GetNbBlocks+0x84>
    {
        return CachedTotalBlocks;
    }

    if (!sd_get_number_of_sectors(&CachedTotalBlocks))
    1288:	83 e5       	ldi	r24, 0x53	; 83
    128a:	99 e0       	ldi	r25, 0x09	; 9
    128c:	45 da       	rcall	.-2934   	; 0x718 <sd_get_number_of_sectors>
    128e:	81 11       	cpse	r24, r1
    1290:	10 c0       	rjmp	.+32     	; 0x12b2 <sdcard_GetNbBlocks+0x44>
    {
        uart_puts("\r\nERROR sd_get_number_of_sectors fails, forcing 2GB\r\n");
    1292:	80 ed       	ldi	r24, 0xD0	; 208
    1294:	94 e0       	ldi	r25, 0x04	; 4
    1296:	0e 94 c2 00 	call	0x184	; 0x184 <uart_puts>
        CachedTotalBlocks = 3921920;  //2 GB
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	98 ed       	ldi	r25, 0xD8	; 216
    129e:	ab e3       	ldi	r26, 0x3B	; 59
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	80 93 53 09 	sts	0x0953, r24	; 0x800953 <CachedTotalBlocks.4686>
    12a6:	90 93 54 09 	sts	0x0954, r25	; 0x800954 <CachedTotalBlocks.4686+0x1>
    12aa:	a0 93 55 09 	sts	0x0955, r26	; 0x800955 <CachedTotalBlocks.4686+0x2>
    12ae:	b0 93 56 09 	sts	0x0956, r27	; 0x800956 <CachedTotalBlocks.4686+0x3>
    }

    printf_P(PSTR("\r\nSD blocks: %li\r\n"), CachedTotalBlocks);
    12b2:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <CachedTotalBlocks.4686+0x3>
    12b6:	8f 93       	push	r24
    12b8:	80 91 55 09 	lds	r24, 0x0955	; 0x800955 <CachedTotalBlocks.4686+0x2>
    12bc:	8f 93       	push	r24
    12be:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <CachedTotalBlocks.4686+0x1>
    12c2:	8f 93       	push	r24
    12c4:	80 91 53 09 	lds	r24, 0x0953	; 0x800953 <CachedTotalBlocks.4686>
    12c8:	8f 93       	push	r24
    12ca:	8e ef       	ldi	r24, 0xFE	; 254
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	9f 93       	push	r25
    12d0:	8f 93       	push	r24
    12d2:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <printf_P>

    return CachedTotalBlocks;
    12d6:	60 91 53 09 	lds	r22, 0x0953	; 0x800953 <CachedTotalBlocks.4686>
    12da:	70 91 54 09 	lds	r23, 0x0954	; 0x800954 <CachedTotalBlocks.4686+0x1>
    12de:	80 91 55 09 	lds	r24, 0x0955	; 0x800955 <CachedTotalBlocks.4686+0x2>
    12e2:	90 91 56 09 	lds	r25, 0x0956	; 0x800956 <CachedTotalBlocks.4686+0x3>
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
}
    12f2:	08 95       	ret

000012f4 <sdcard_Init>:
#include "at90lib.h"
#include "sdcard.h"


bool sdcard_Init(void)
{
    12f4:	0f 93       	push	r16
    12f6:	1f 93       	push	r17
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	cd b7       	in	r28, 0x3d	; 61
    12fe:	de b7       	in	r29, 0x3e	; 62
    1300:	d2 50       	subi	r29, 0x02	; 2
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	de bf       	out	0x3e, r29	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	cd bf       	out	0x3d, r28	; 61
    uint8_t ret;

    SPI_init();
    130c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <SPI_init>
    do
    {
        ret = SD_init();
    1310:	b0 d8       	rcall	.-3744   	; 0x472 <SD_init>
    1312:	18 2f       	mov	r17, r24
        if (ret)
    1314:	88 23       	and	r24, r24
    1316:	49 f0       	breq	.+18     	; 0x132a <sdcard_Init+0x36>
        {
            uart_puts("SD err: ");
    1318:	86 e0       	ldi	r24, 0x06	; 6
    131a:	95 e0       	ldi	r25, 0x05	; 5
    131c:	0e 94 c2 00 	call	0x184	; 0x184 <uart_puts>
            uart_printhexchar(ret);
    1320:	81 2f       	mov	r24, r17
    1322:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <uart_printhexchar>
            return false;
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	2d c0       	rjmp	.+90     	; 0x1384 <sdcard_Init+0x90>
        }
    }   while (ret);
    132a:	81 11       	cpse	r24, r1
    132c:	f1 cf       	rjmp	.-30     	; 0x1310 <sdcard_Init+0x1c>

    uart_puts("SD init sucesss!\r\n");
    132e:	8f e0       	ldi	r24, 0x0F	; 15
    1330:	95 e0       	ldi	r25, 0x05	; 5
    1332:	0e 94 c2 00 	call	0x184	; 0x184 <uart_puts>

    sdcard_GetNbBlocks();
    1336:	9b df       	rcall	.-202    	; 0x126e <sdcard_GetNbBlocks>

    uint8_t readed_sector[512] = { 0 };
    1338:	8e 01       	movw	r16, r28
    133a:	0f 5f       	subi	r16, 0xFF	; 255
    133c:	1f 4f       	sbci	r17, 0xFF	; 255
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	92 e0       	ldi	r25, 0x02	; 2
    1342:	f8 01       	movw	r30, r16
    1344:	9c 01       	movw	r18, r24
    1346:	11 92       	st	Z+, r1
    1348:	21 50       	subi	r18, 0x01	; 1
    134a:	30 40       	sbci	r19, 0x00	; 0
    134c:	e1 f7       	brne	.-8      	; 0x1346 <sdcard_Init+0x52>
    SD_read_sector(0, readed_sector);
    134e:	a8 01       	movw	r20, r16
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	cb 01       	movw	r24, r22
    1356:	05 d9       	rcall	.-3574   	; 0x562 <SD_read_sector>
    printf_P(PSTR("first SD sector:\r\n"));
    1358:	86 e1       	ldi	r24, 0x16	; 22
    135a:	91 e0       	ldi	r25, 0x01	; 1
    135c:	9f 93       	push	r25
    135e:	8f 93       	push	r24
    1360:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <printf_P>
    uart_printhexdump(readed_sector, 512);
    1364:	60 e0       	ldi	r22, 0x00	; 0
    1366:	72 e0       	ldi	r23, 0x02	; 2
    1368:	c8 01       	movw	r24, r16
    136a:	0e 94 13 01 	call	0x226	; 0x226 <uart_printhexdump>
    printf_P(PSTR("\r\n\r\n"));
    136e:	81 e1       	ldi	r24, 0x11	; 17
    1370:	91 e0       	ldi	r25, 0x01	; 1
    1372:	9f 93       	push	r25
    1374:	8f 93       	push	r24
    1376:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <printf_P>

    return true;
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	81 e0       	ldi	r24, 0x01	; 1
}
    1384:	de 5f       	subi	r29, 0xFE	; 254
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	08 95       	ret

0000139a <sdcard_WriteBlockHandler>:
 *
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
uintptr_t sdcard_WriteBlockHandler(uint8_t* buff_to_write, void* a, void* p)
{
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	ec 01       	movw	r28, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    /* Check if the endpoint is currently empty */
    if (!(Endpoint_IsReadWriteAllowed()))
    13a4:	85 fd       	sbrc	r24, 5
    13a6:	09 c0       	rjmp	.+18     	; 0x13ba <sdcard_WriteBlockHandler+0x20>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    13a8:	e8 ee       	ldi	r30, 0xE8	; 232
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8b 77       	andi	r24, 0x7B	; 123
    13b0:	80 83       	st	Z, r24
    {
        /* Clear the current endpoint bank */
        Endpoint_ClearOUT();

        /* Wait until the host has sent another packet */
        if (Endpoint_WaitUntilReady())
    13b2:	0e 94 19 13 	call	0x2632	; 0x2632 <Endpoint_WaitUntilReady>
    13b6:	81 11       	cpse	r24, r1
    13b8:	25 c0       	rjmp	.+74     	; 0x1404 <sdcard_WriteBlockHandler+0x6a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    13ba:	e1 ef       	ldi	r30, 0xF1	; 241
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
            return 0;
        }
    }

    /* Write one 16-byte chunk of data to the dataflash */
    buff_to_write[0] = Endpoint_Read_8();
    13c0:	88 83       	st	Y, r24
    13c2:	80 81       	ld	r24, Z
    buff_to_write[1] = Endpoint_Read_8();
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	80 81       	ld	r24, Z
    buff_to_write[2] = Endpoint_Read_8();
    13c8:	8a 83       	std	Y+2, r24	; 0x02
    13ca:	80 81       	ld	r24, Z
    buff_to_write[3] = Endpoint_Read_8();
    13cc:	8b 83       	std	Y+3, r24	; 0x03
    13ce:	80 81       	ld	r24, Z
    buff_to_write[4] = Endpoint_Read_8();
    13d0:	8c 83       	std	Y+4, r24	; 0x04
    13d2:	80 81       	ld	r24, Z
    buff_to_write[5] = Endpoint_Read_8();
    13d4:	8d 83       	std	Y+5, r24	; 0x05
    13d6:	80 81       	ld	r24, Z
    buff_to_write[6] = Endpoint_Read_8();
    13d8:	8e 83       	std	Y+6, r24	; 0x06
    13da:	80 81       	ld	r24, Z
    buff_to_write[7] = Endpoint_Read_8();
    13dc:	8f 83       	std	Y+7, r24	; 0x07
    13de:	80 81       	ld	r24, Z
    buff_to_write[8] = Endpoint_Read_8();
    13e0:	88 87       	std	Y+8, r24	; 0x08
    13e2:	80 81       	ld	r24, Z
    buff_to_write[9] = Endpoint_Read_8();
    13e4:	89 87       	std	Y+9, r24	; 0x09
    13e6:	80 81       	ld	r24, Z
    buff_to_write[10] = Endpoint_Read_8();
    13e8:	8a 87       	std	Y+10, r24	; 0x0a
    13ea:	80 81       	ld	r24, Z
    buff_to_write[11] = Endpoint_Read_8();
    13ec:	8b 87       	std	Y+11, r24	; 0x0b
    13ee:	80 81       	ld	r24, Z
    buff_to_write[12] = Endpoint_Read_8();
    13f0:	8c 87       	std	Y+12, r24	; 0x0c
    13f2:	80 81       	ld	r24, Z
    buff_to_write[13] = Endpoint_Read_8();
    13f4:	8d 87       	std	Y+13, r24	; 0x0d
    13f6:	80 81       	ld	r24, Z
    buff_to_write[14] = Endpoint_Read_8();
    13f8:	8e 87       	std	Y+14, r24	; 0x0e
    13fa:	80 81       	ld	r24, Z
    buff_to_write[15] = Endpoint_Read_8();
    13fc:	8f 87       	std	Y+15, r24	; 0x0f

    return 16;
    13fe:	80 e1       	ldi	r24, 0x10	; 16
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <sdcard_WriteBlockHandler+0x6e>
        Endpoint_ClearOUT();

        /* Wait until the host has sent another packet */
        if (Endpoint_WaitUntilReady())
        {
            return 0;
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    buff_to_write[13] = Endpoint_Read_8();
    buff_to_write[14] = Endpoint_Read_8();
    buff_to_write[15] = Endpoint_Read_8();

    return 16;
}
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	08 95       	ret

0000140e <sdcard_WriteBlocks>:

void sdcard_WriteBlocks(USB_ClassInfo_MS_Device_t* MSInterfaceInfo,
                        uint32_t BlockAddress, uint16_t TotalBlocks)
{
    140e:	8f 92       	push	r8
    1410:	9f 92       	push	r9
    1412:	af 92       	push	r10
    1414:	bf 92       	push	r11
    1416:	ef 92       	push	r14
    1418:	ff 92       	push	r15
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	7c 01       	movw	r14, r24
    1424:	4a 01       	movw	r8, r20
    1426:	5b 01       	movw	r10, r22
    1428:	89 01       	movw	r16, r18
    int i;
    static uint8_t buff_to_write[512];

    printf_P(PSTR("W %li %i\r\n"), BlockAddress, TotalBlocks);
    142a:	1f 93       	push	r17
    142c:	2f 93       	push	r18
    142e:	bf 92       	push	r11
    1430:	af 92       	push	r10
    1432:	9f 92       	push	r9
    1434:	4f 93       	push	r20
    1436:	83 ef       	ldi	r24, 0xF3	; 243
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	9f 93       	push	r25
    143c:	8f 93       	push	r24
    143e:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <printf_P>

    /* Wait until endpoint is ready before continuing */
    if (Endpoint_WaitUntilReady())
    1442:	0e 94 19 13 	call	0x2632	; 0x2632 <Endpoint_WaitUntilReady>
    1446:	2d b7       	in	r18, 0x3d	; 61
    1448:	3e b7       	in	r19, 0x3e	; 62
    144a:	28 5f       	subi	r18, 0xF8	; 248
    144c:	3f 4f       	sbci	r19, 0xFF	; 255
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	3e bf       	out	0x3e, r19	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	2d bf       	out	0x3d, r18	; 61
    1458:	88 23       	and	r24, r24
    145a:	31 f1       	breq	.+76     	; 0x14a8 <sdcard_WriteBlocks+0x9a>
    145c:	31 c0       	rjmp	.+98     	; 0x14c0 <sdcard_WriteBlocks+0xb2>

    while (TotalBlocks)
    {
        for (i = 0; i < 32; i++)
        {
            sdcard_WriteBlockHandler(buff_to_write + (16 * i), NULL, NULL);
    145e:	ce 01       	movw	r24, r28
    1460:	82 95       	swap	r24
    1462:	92 95       	swap	r25
    1464:	90 7f       	andi	r25, 0xF0	; 240
    1466:	98 27       	eor	r25, r24
    1468:	80 7f       	andi	r24, 0xF0	; 240
    146a:	98 27       	eor	r25, r24
    146c:	40 e0       	ldi	r20, 0x00	; 0
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	8d 5a       	subi	r24, 0xAD	; 173
    1476:	98 4f       	sbci	r25, 0xF8	; 248
    1478:	90 df       	rcall	.-224    	; 0x139a <sdcard_WriteBlockHandler>
        return;
    }

    while (TotalBlocks)
    {
        for (i = 0; i < 32; i++)
    147a:	21 96       	adiw	r28, 0x01	; 1
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <sdcard_WriteBlocks+0x74>
    147e:	c0 e0       	ldi	r28, 0x00	; 0
    1480:	d0 e0       	ldi	r29, 0x00	; 0
    1482:	c0 32       	cpi	r28, 0x20	; 32
    1484:	d1 05       	cpc	r29, r1
    1486:	5c f3       	brlt	.-42     	; 0x145e <sdcard_WriteBlocks+0x50>
        {
            sdcard_WriteBlockHandler(buff_to_write + (16 * i), NULL, NULL);
        }

        SD_write_sector(BlockAddress, buff_to_write);
    1488:	43 e5       	ldi	r20, 0x53	; 83
    148a:	57 e0       	ldi	r21, 0x07	; 7
    148c:	c5 01       	movw	r24, r10
    148e:	b4 01       	movw	r22, r8
    1490:	ce d8       	rcall	.-3684   	; 0x62e <SD_write_sector>

        /* Check if the current command is being aborted by the host */
        if (MSInterfaceInfo->State.IsMassStoreReset)
    1492:	f7 01       	movw	r30, r14
    1494:	80 ad       	ldd	r24, Z+56	; 0x38
    1496:	81 11       	cpse	r24, r1
    1498:	13 c0       	rjmp	.+38     	; 0x14c0 <sdcard_WriteBlocks+0xb2>
        {
            return;
        }

        /* Decrement the blocks remaining counter and reset the sub block counter */
        BlockAddress++;
    149a:	ff ef       	ldi	r31, 0xFF	; 255
    149c:	8f 1a       	sub	r8, r31
    149e:	9f 0a       	sbc	r9, r31
    14a0:	af 0a       	sbc	r10, r31
    14a2:	bf 0a       	sbc	r11, r31
        TotalBlocks--;
    14a4:	01 50       	subi	r16, 0x01	; 1
    14a6:	11 09       	sbc	r17, r1
    if (Endpoint_WaitUntilReady())
    {
        return;
    }

    while (TotalBlocks)
    14a8:	01 15       	cp	r16, r1
    14aa:	11 05       	cpc	r17, r1
    14ac:	41 f7       	brne	.-48     	; 0x147e <sdcard_WriteBlocks+0x70>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    14ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        BlockAddress++;
        TotalBlocks--;
    }

    /* If the endpoint is empty, clear it ready for the next packet from the host */
    if (!(Endpoint_IsReadWriteAllowed()))
    14b2:	85 fd       	sbrc	r24, 5
    14b4:	05 c0       	rjmp	.+10     	; 0x14c0 <sdcard_WriteBlocks+0xb2>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14b6:	e8 ee       	ldi	r30, 0xE8	; 232
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8b 77       	andi	r24, 0x7B	; 123
    14be:	80 83       	st	Z, r24
    {
        Endpoint_ClearOUT();
    }
}
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	ff 90       	pop	r15
    14ca:	ef 90       	pop	r14
    14cc:	bf 90       	pop	r11
    14ce:	af 90       	pop	r10
    14d0:	9f 90       	pop	r9
    14d2:	8f 90       	pop	r8
    14d4:	08 95       	ret

000014d6 <sdcard_ReadBlocks>:
    return 1;
}

void sdcard_ReadBlocks(USB_ClassInfo_MS_Device_t* MSInterfaceInfo,
                       uint32_t BlockAddress, uint16_t TotalBlocks)
{
    14d6:	8f 92       	push	r8
    14d8:	9f 92       	push	r9
    14da:	af 92       	push	r10
    14dc:	bf 92       	push	r11
    14de:	ef 92       	push	r14
    14e0:	ff 92       	push	r15
    14e2:	0f 93       	push	r16
    14e4:	1f 93       	push	r17
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	4a 01       	movw	r8, r20
    14ec:	5b 01       	movw	r10, r22
    14ee:	79 01       	movw	r14, r18
    static uint8_t buff_rd[512];
    int i;

    printf_P(PSTR("R %li %i\r\n"), BlockAddress, TotalBlocks);
    14f0:	ff 92       	push	r15
    14f2:	2f 93       	push	r18
    14f4:	bf 92       	push	r11
    14f6:	af 92       	push	r10
    14f8:	9f 92       	push	r9
    14fa:	4f 93       	push	r20
    14fc:	88 ee       	ldi	r24, 0xE8	; 232
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	9f 93       	push	r25
    1502:	8f 93       	push	r24
    1504:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <printf_P>

    /* Wait until endpoint is ready before continuing */
    if (Endpoint_WaitUntilReady())
    1508:	0e 94 19 13 	call	0x2632	; 0x2632 <Endpoint_WaitUntilReady>
    150c:	2d b7       	in	r18, 0x3d	; 61
    150e:	3e b7       	in	r19, 0x3e	; 62
    1510:	28 5f       	subi	r18, 0xF8	; 248
    1512:	3f 4f       	sbci	r19, 0xFF	; 255
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	3e bf       	out	0x3e, r19	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	2d bf       	out	0x3d, r18	; 61
    151e:	88 23       	and	r24, r24
    1520:	09 f4       	brne	.+2      	; 0x1524 <sdcard_ReadBlocks+0x4e>
    1522:	4e c0       	rjmp	.+156    	; 0x15c0 <sdcard_ReadBlocks+0xea>
    1524:	5a c0       	rjmp	.+180    	; 0x15da <sdcard_ReadBlocks+0x104>
    while (TotalBlocks)
    {
#ifdef MULTIPLE_READ_SD
        read_multi_buff(buff_rd);
#else
        SD_read_sector(BlockAddress, buff_rd);
    1526:	43 e5       	ldi	r20, 0x53	; 83
    1528:	55 e0       	ldi	r21, 0x05	; 5
    152a:	c5 01       	movw	r24, r10
    152c:	b4 01       	movw	r22, r8
    152e:	19 d8       	rcall	.-4046   	; 0x562 <SD_read_sector>
#endif
        //uart_printhexdump(buff_rd, 512);
        for (i = 0; i < 32; i++)
    1530:	00 e0       	ldi	r16, 0x00	; 0
    1532:	10 e0       	ldi	r17, 0x00	; 0
    1534:	3a c0       	rjmp	.+116    	; 0x15aa <sdcard_ReadBlocks+0xd4>
        {
            sdcard_ReadBlockHandler(buff_rd + (16 * i), NULL, NULL);
    1536:	e8 01       	movw	r28, r16
    1538:	c2 95       	swap	r28
    153a:	d2 95       	swap	r29
    153c:	d0 7f       	andi	r29, 0xF0	; 240
    153e:	dc 27       	eor	r29, r28
    1540:	c0 7f       	andi	r28, 0xF0	; 240
    1542:	dc 27       	eor	r29, r28
    1544:	cd 5a       	subi	r28, 0xAD	; 173
    1546:	da 4f       	sbci	r29, 0xFA	; 250
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1548:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 */

static inline uint8_t sdcard_ReadBlockHandler(uint8_t* buffer, void* a, void* p)
{
    /* Check if the endpoint is currently full */
    if (!(Endpoint_IsReadWriteAllowed()))
    154c:	85 fd       	sbrc	r24, 5
    154e:	09 c0       	rjmp	.+18     	; 0x1562 <sdcard_ReadBlocks+0x8c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1550:	e8 ee       	ldi	r30, 0xE8	; 232
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	8e 77       	andi	r24, 0x7E	; 126
    1558:	80 83       	st	Z, r24
    {
        /* Clear the endpoint bank to send its contents to the host */
        Endpoint_ClearIN();

        /* Wait until the endpoint is ready for more data */
        if (Endpoint_WaitUntilReady())
    155a:	0e 94 19 13 	call	0x2632	; 0x2632 <Endpoint_WaitUntilReady>
    155e:	81 11       	cpse	r24, r1
    1560:	22 c0       	rjmp	.+68     	; 0x15a6 <sdcard_ReadBlocks+0xd0>
        {
            return 0;
        }
    }

    Endpoint_Write_8(buffer[0]);
    1562:	88 81       	ld	r24, Y
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1564:	e1 ef       	ldi	r30, 0xF1	; 241
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[1]);
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[2]);
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[3]);
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[4]);
    1576:	8c 81       	ldd	r24, Y+4	; 0x04
    1578:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[5]);
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
    157c:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[6]);
    157e:	8e 81       	ldd	r24, Y+6	; 0x06
    1580:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[7]);
    1582:	8f 81       	ldd	r24, Y+7	; 0x07
    1584:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[8]);
    1586:	88 85       	ldd	r24, Y+8	; 0x08
    1588:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[9]);
    158a:	89 85       	ldd	r24, Y+9	; 0x09
    158c:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[10]);
    158e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1590:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[11]);
    1592:	8b 85       	ldd	r24, Y+11	; 0x0b
    1594:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[12]);
    1596:	8c 85       	ldd	r24, Y+12	; 0x0c
    1598:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[13]);
    159a:	8d 85       	ldd	r24, Y+13	; 0x0d
    159c:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[14]);
    159e:	8e 85       	ldd	r24, Y+14	; 0x0e
    15a0:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[15]);
    15a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a4:	80 83       	st	Z, r24
        read_multi_buff(buff_rd);
#else
        SD_read_sector(BlockAddress, buff_rd);
#endif
        //uart_printhexdump(buff_rd, 512);
        for (i = 0; i < 32; i++)
    15a6:	0f 5f       	subi	r16, 0xFF	; 255
    15a8:	1f 4f       	sbci	r17, 0xFF	; 255
    15aa:	00 32       	cpi	r16, 0x20	; 32
    15ac:	11 05       	cpc	r17, r1
    15ae:	1c f2       	brlt	.-122    	; 0x1536 <sdcard_ReadBlocks+0x60>
        {
            sdcard_ReadBlockHandler(buff_rd + (16 * i), NULL, NULL);
        }
        /* Decrement the blocks remaining counter */
        BlockAddress++;
    15b0:	3f ef       	ldi	r19, 0xFF	; 255
    15b2:	83 1a       	sub	r8, r19
    15b4:	93 0a       	sbc	r9, r19
    15b6:	a3 0a       	sbc	r10, r19
    15b8:	b3 0a       	sbc	r11, r19
        TotalBlocks--;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	e8 1a       	sub	r14, r24
    15be:	f1 08       	sbc	r15, r1
    //#define MULTIPLE_READ_SD

#ifdef MULTIPLE_READ_SD
    sd_raw_initmultiread(BlockAddress);
#endif
    while (TotalBlocks)
    15c0:	e1 14       	cp	r14, r1
    15c2:	f1 04       	cpc	r15, r1
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <sdcard_ReadBlocks+0xf2>
    15c6:	af cf       	rjmp	.-162    	; 0x1526 <sdcard_ReadBlocks+0x50>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#ifdef MULTIPLE_READ_SD
    sd_raw_stopmultiread();
#endif

    /* If the endpoint is full, send its contents to the host */
    if (!(Endpoint_IsReadWriteAllowed()))
    15cc:	85 fd       	sbrc	r24, 5
    15ce:	05 c0       	rjmp	.+10     	; 0x15da <sdcard_ReadBlocks+0x104>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15d0:	e8 ee       	ldi	r30, 0xE8	; 232
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	8e 77       	andi	r24, 0x7E	; 126
    15d8:	80 83       	st	Z, r24
    {
        Endpoint_ClearIN();
    }
}
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	ff 90       	pop	r15
    15e4:	ef 90       	pop	r14
    15e6:	bf 90       	pop	r11
    15e8:	af 90       	pop	r10
    15ea:	9f 90       	pop	r9
    15ec:	8f 90       	pop	r8
    15ee:	08 95       	ret

000015f0 <sdcard_CheckDataflashOperation>:
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool sdcard_CheckDataflashOperation(void)
{
    return true;
}
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	08 95       	ret

000015f4 <Serial_putchar>:
{
	uint8_t* CurrByte = (uint8_t*)Buffer;

	while (Length--)
	  Serial_SendByte(*(CurrByte++));
}
    15f4:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    15f8:	95 ff       	sbrs	r25, 5
    15fa:	fc cf       	rjmp	.-8      	; 0x15f4 <Serial_putchar>
    15fc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	08 95       	ret

00001606 <Serial_getchar>:
    1606:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    160a:	88 23       	and	r24, r24
    160c:	5c f4       	brge	.+22     	; 0x1624 <Serial_getchar+0x1e>
    160e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1612:	88 23       	and	r24, r24
    1614:	24 f4       	brge	.+8      	; 0x161e <Serial_getchar+0x18>
    1616:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	08 95       	ret
    161e:	8f ef       	ldi	r24, 0xFF	; 255
    1620:	9f ef       	ldi	r25, 0xFF	; 255
    1622:	08 95       	ret
    1624:	8e ef       	ldi	r24, 0xFE	; 254
    1626:	9f ef       	ldi	r25, 0xFF	; 255
    1628:	08 95       	ret

0000162a <Serial_SendString>:
    162a:	fc 01       	movw	r30, r24
    162c:	07 c0       	rjmp	.+14     	; 0x163c <Serial_SendString+0x12>
    162e:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1632:	95 ff       	sbrs	r25, 5
    1634:	fc cf       	rjmp	.-8      	; 0x162e <Serial_SendString+0x4>
    1636:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    163a:	31 96       	adiw	r30, 0x01	; 1
    163c:	80 81       	ld	r24, Z
    163e:	81 11       	cpse	r24, r1
    1640:	f6 cf       	rjmp	.-20     	; 0x162e <Serial_SendString+0x4>
    1642:	08 95       	ret

00001644 <Serial_CreateStream>:

void Serial_CreateStream(FILE* Stream)
{
    1644:	fc 01       	movw	r30, r24
	if (!(Stream))
    1646:	89 2b       	or	r24, r25
    1648:	49 f4       	brne	.+18     	; 0x165c <Serial_CreateStream+0x18>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    164a:	e3 e7       	ldi	r30, 0x73	; 115
    164c:	f9 e0       	ldi	r31, 0x09	; 9
    164e:	88 e5       	ldi	r24, 0x58	; 88
    1650:	99 e0       	ldi	r25, 0x09	; 9
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	80 83       	st	Z, r24
		stdout = Stream;
    1656:	93 83       	std	Z+3, r25	; 0x03
    1658:	82 83       	std	Z+2, r24	; 0x02

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    165a:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    165c:	8e e0       	ldi	r24, 0x0E	; 14
    165e:	df 01       	movw	r26, r30
    1660:	1d 92       	st	X+, r1
    1662:	8a 95       	dec	r24
    1664:	e9 f7       	brne	.-6      	; 0x1660 <Serial_CreateStream+0x1c>
    1666:	83 e0       	ldi	r24, 0x03	; 3
    1668:	83 83       	std	Z+3, r24	; 0x03
    166a:	8a ef       	ldi	r24, 0xFA	; 250
    166c:	9a e0       	ldi	r25, 0x0A	; 10
    166e:	91 87       	std	Z+9, r25	; 0x09
    1670:	80 87       	std	Z+8, r24	; 0x08
    1672:	83 e0       	ldi	r24, 0x03	; 3
    1674:	9b e0       	ldi	r25, 0x0B	; 11
    1676:	93 87       	std	Z+11, r25	; 0x0b
    1678:	82 87       	std	Z+10, r24	; 0x0a
    167a:	08 95       	ret

0000167c <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	ec 01       	movw	r28, r24
    1682:	fc 01       	movw	r30, r24
    1684:	70 96       	adiw	r30, 0x10	; 16
    1686:	8b e0       	ldi	r24, 0x0B	; 11
    1688:	df 01       	movw	r26, r30
    168a:	1d 92       	st	X+, r1
    168c:	8a 95       	dec	r24
    168e:	e9 f7       	brne	.-6      	; 0x168a <CDC_Device_ConfigureEndpoints+0xe>
    1690:	82 e0       	ldi	r24, 0x02	; 2
    1692:	8c 83       	std	Y+4, r24	; 0x04
    1694:	89 87       	std	Y+9, r24	; 0x09
    1696:	83 e0       	ldi	r24, 0x03	; 3
    1698:	8e 87       	std	Y+14, r24	; 0x0e
    169a:	61 e0       	ldi	r22, 0x01	; 1
    169c:	ce 01       	movw	r24, r28
    169e:	01 96       	adiw	r24, 0x01	; 1
    16a0:	61 d7       	rcall	.+3778   	; 0x2564 <Endpoint_ConfigureEndpointTable>
    16a2:	88 23       	and	r24, r24
    16a4:	51 f0       	breq	.+20     	; 0x16ba <CDC_Device_ConfigureEndpoints+0x3e>
    16a6:	61 e0       	ldi	r22, 0x01	; 1
    16a8:	ce 01       	movw	r24, r28
    16aa:	06 96       	adiw	r24, 0x06	; 6
    16ac:	5b d7       	rcall	.+3766   	; 0x2564 <Endpoint_ConfigureEndpointTable>
    16ae:	88 23       	and	r24, r24
    16b0:	21 f0       	breq	.+8      	; 0x16ba <CDC_Device_ConfigureEndpoints+0x3e>
    16b2:	61 e0       	ldi	r22, 0x01	; 1
    16b4:	ce 01       	movw	r24, r28
    16b6:	0b 96       	adiw	r24, 0x0b	; 11
    16b8:	55 d7       	rcall	.+3754   	; 0x2564 <Endpoint_ConfigureEndpointTable>
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	08 95       	ret

000016c0 <CDC_Device_SendString>:
    16c0:	fc 01       	movw	r30, r24
    16c2:	90 91 6a 09 	lds	r25, 0x096A	; 0x80096a <USB_DeviceState>
    16c6:	94 30       	cpi	r25, 0x04	; 4
    16c8:	c9 f4       	brne	.+50     	; 0x16fc <CDC_Device_SendString+0x3c>
    16ca:	84 89       	ldd	r24, Z+20	; 0x14
    16cc:	95 89       	ldd	r25, Z+21	; 0x15
    16ce:	a6 89       	ldd	r26, Z+22	; 0x16
    16d0:	b7 89       	ldd	r27, Z+23	; 0x17
    16d2:	89 2b       	or	r24, r25
    16d4:	8a 2b       	or	r24, r26
    16d6:	8b 2b       	or	r24, r27
    16d8:	99 f0       	breq	.+38     	; 0x1700 <CDC_Device_SendString+0x40>
    16da:	cb 01       	movw	r24, r22
    16dc:	21 81       	ldd	r18, Z+1	; 0x01
    16de:	2f 70       	andi	r18, 0x0F	; 15
    16e0:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    16e4:	fb 01       	movw	r30, r22
    16e6:	01 90       	ld	r0, Z+
    16e8:	00 20       	and	r0, r0
    16ea:	e9 f7       	brne	.-6      	; 0x16e6 <CDC_Device_SendString+0x26>
    16ec:	31 97       	sbiw	r30, 0x01	; 1
    16ee:	bf 01       	movw	r22, r30
    16f0:	68 1b       	sub	r22, r24
    16f2:	79 0b       	sbc	r23, r25
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	71 c5       	rjmp	.+2786   	; 0x21dc <Endpoint_Write_Stream_LE>
    16fa:	08 95       	ret
    16fc:	82 e0       	ldi	r24, 0x02	; 2
    16fe:	08 95       	ret
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	08 95       	ret

00001704 <CDC_Device_SendByte>:
    1704:	cf 93       	push	r28
    1706:	fc 01       	movw	r30, r24
    1708:	90 91 6a 09 	lds	r25, 0x096A	; 0x80096a <USB_DeviceState>
    170c:	94 30       	cpi	r25, 0x04	; 4
    170e:	e9 f4       	brne	.+58     	; 0x174a <CDC_Device_SendByte+0x46>
    1710:	84 89       	ldd	r24, Z+20	; 0x14
    1712:	95 89       	ldd	r25, Z+21	; 0x15
    1714:	a6 89       	ldd	r26, Z+22	; 0x16
    1716:	b7 89       	ldd	r27, Z+23	; 0x17
    1718:	89 2b       	or	r24, r25
    171a:	8a 2b       	or	r24, r26
    171c:	8b 2b       	or	r24, r27
    171e:	b9 f0       	breq	.+46     	; 0x174e <CDC_Device_SendByte+0x4a>
    1720:	c6 2f       	mov	r28, r22
    1722:	81 81       	ldd	r24, Z+1	; 0x01
    1724:	8f 70       	andi	r24, 0x0F	; 15
    1726:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    172a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    172e:	85 fd       	sbrc	r24, 5
    1730:	08 c0       	rjmp	.+16     	; 0x1742 <CDC_Device_SendByte+0x3e>
    1732:	e8 ee       	ldi	r30, 0xE8	; 232
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	8e 77       	andi	r24, 0x7E	; 126
    173a:	80 83       	st	Z, r24
    173c:	7a d7       	rcall	.+3828   	; 0x2632 <Endpoint_WaitUntilReady>
    173e:	81 11       	cpse	r24, r1
    1740:	07 c0       	rjmp	.+14     	; 0x1750 <CDC_Device_SendByte+0x4c>
    1742:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	03 c0       	rjmp	.+6      	; 0x1750 <CDC_Device_SendByte+0x4c>
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	01 c0       	rjmp	.+2      	; 0x1750 <CDC_Device_SendByte+0x4c>
    174e:	82 e0       	ldi	r24, 0x02	; 2
    1750:	cf 91       	pop	r28
    1752:	08 95       	ret

00001754 <CDC_Device_putchar>:
    1754:	fb 01       	movw	r30, r22
    1756:	68 2f       	mov	r22, r24
    1758:	84 85       	ldd	r24, Z+12	; 0x0c
    175a:	95 85       	ldd	r25, Z+13	; 0x0d
    175c:	d3 df       	rcall	.-90     	; 0x1704 <CDC_Device_SendByte>
    175e:	88 23       	and	r24, r24
    1760:	19 f0       	breq	.+6      	; 0x1768 <CDC_Device_putchar+0x14>
    1762:	8f ef       	ldi	r24, 0xFF	; 255
    1764:	9f ef       	ldi	r25, 0xFF	; 255
    1766:	08 95       	ret
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	08 95       	ret

0000176e <CDC_Device_Flush>:
    176e:	cf 93       	push	r28
    1770:	fc 01       	movw	r30, r24
    1772:	90 91 6a 09 	lds	r25, 0x096A	; 0x80096a <USB_DeviceState>
    1776:	94 30       	cpi	r25, 0x04	; 4
    1778:	29 f5       	brne	.+74     	; 0x17c4 <CDC_Device_Flush+0x56>
    177a:	84 89       	ldd	r24, Z+20	; 0x14
    177c:	95 89       	ldd	r25, Z+21	; 0x15
    177e:	a6 89       	ldd	r26, Z+22	; 0x16
    1780:	b7 89       	ldd	r27, Z+23	; 0x17
    1782:	89 2b       	or	r24, r25
    1784:	8a 2b       	or	r24, r26
    1786:	8b 2b       	or	r24, r27
    1788:	f9 f0       	breq	.+62     	; 0x17c8 <CDC_Device_Flush+0x5a>
    178a:	81 81       	ldd	r24, Z+1	; 0x01
    178c:	8f 70       	andi	r24, 0x0F	; 15
    178e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1792:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1796:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    179a:	89 2b       	or	r24, r25
    179c:	b9 f0       	breq	.+46     	; 0x17cc <CDC_Device_Flush+0x5e>
    179e:	e8 ee       	ldi	r30, 0xE8	; 232
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	90 81       	ld	r25, Z
    17a4:	80 81       	ld	r24, Z
    17a6:	8e 77       	andi	r24, 0x7E	; 126
    17a8:	80 83       	st	Z, r24
    17aa:	c9 2f       	mov	r28, r25
    17ac:	c0 72       	andi	r28, 0x20	; 32
    17ae:	95 fd       	sbrc	r25, 5
    17b0:	0f c0       	rjmp	.+30     	; 0x17d0 <CDC_Device_Flush+0x62>
    17b2:	3f d7       	rcall	.+3710   	; 0x2632 <Endpoint_WaitUntilReady>
    17b4:	81 11       	cpse	r24, r1
    17b6:	0e c0       	rjmp	.+28     	; 0x17d4 <CDC_Device_Flush+0x66>
    17b8:	e8 ee       	ldi	r30, 0xE8	; 232
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	8e 77       	andi	r24, 0x7E	; 126
    17c0:	80 83       	st	Z, r24
    17c2:	09 c0       	rjmp	.+18     	; 0x17d6 <CDC_Device_Flush+0x68>
    17c4:	c2 e0       	ldi	r28, 0x02	; 2
    17c6:	07 c0       	rjmp	.+14     	; 0x17d6 <CDC_Device_Flush+0x68>
    17c8:	c2 e0       	ldi	r28, 0x02	; 2
    17ca:	05 c0       	rjmp	.+10     	; 0x17d6 <CDC_Device_Flush+0x68>
    17cc:	c0 e0       	ldi	r28, 0x00	; 0
    17ce:	03 c0       	rjmp	.+6      	; 0x17d6 <CDC_Device_Flush+0x68>
    17d0:	c0 e0       	ldi	r28, 0x00	; 0
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <CDC_Device_Flush+0x68>
    17d4:	c8 2f       	mov	r28, r24
    17d6:	8c 2f       	mov	r24, r28
    17d8:	cf 91       	pop	r28
    17da:	08 95       	ret

000017dc <CDC_Device_USBTask>:
    17dc:	fc 01       	movw	r30, r24
    17de:	90 91 6a 09 	lds	r25, 0x096A	; 0x80096a <USB_DeviceState>
    17e2:	94 30       	cpi	r25, 0x04	; 4
    17e4:	91 f4       	brne	.+36     	; 0x180a <CDC_Device_USBTask+0x2e>
    17e6:	84 89       	ldd	r24, Z+20	; 0x14
    17e8:	95 89       	ldd	r25, Z+21	; 0x15
    17ea:	a6 89       	ldd	r26, Z+22	; 0x16
    17ec:	b7 89       	ldd	r27, Z+23	; 0x17
    17ee:	89 2b       	or	r24, r25
    17f0:	8a 2b       	or	r24, r26
    17f2:	8b 2b       	or	r24, r27
    17f4:	51 f0       	breq	.+20     	; 0x180a <CDC_Device_USBTask+0x2e>
    17f6:	81 81       	ldd	r24, Z+1	; 0x01
    17f8:	8f 70       	andi	r24, 0x0F	; 15
    17fa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    17fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1802:	80 ff       	sbrs	r24, 0
    1804:	02 c0       	rjmp	.+4      	; 0x180a <CDC_Device_USBTask+0x2e>
    1806:	cf 01       	movw	r24, r30
    1808:	b2 cf       	rjmp	.-156    	; 0x176e <CDC_Device_Flush>
    180a:	08 95       	ret

0000180c <CDC_Device_ReceiveByte>:
    180c:	20 91 6a 09 	lds	r18, 0x096A	; 0x80096a <USB_DeviceState>
    1810:	24 30       	cpi	r18, 0x04	; 4
    1812:	59 f5       	brne	.+86     	; 0x186a <CDC_Device_ReceiveByte+0x5e>
    1814:	fc 01       	movw	r30, r24
    1816:	44 89       	ldd	r20, Z+20	; 0x14
    1818:	55 89       	ldd	r21, Z+21	; 0x15
    181a:	66 89       	ldd	r22, Z+22	; 0x16
    181c:	77 89       	ldd	r23, Z+23	; 0x17
    181e:	45 2b       	or	r20, r21
    1820:	46 2b       	or	r20, r22
    1822:	47 2b       	or	r20, r23
    1824:	29 f1       	breq	.+74     	; 0x1870 <CDC_Device_ReceiveByte+0x64>
    1826:	86 81       	ldd	r24, Z+6	; 0x06
    1828:	8f 70       	andi	r24, 0x0F	; 15
    182a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    182e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1832:	82 ff       	sbrs	r24, 2
    1834:	20 c0       	rjmp	.+64     	; 0x1876 <CDC_Device_ReceiveByte+0x6a>
    1836:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    183a:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    183e:	89 2b       	or	r24, r25
    1840:	21 f0       	breq	.+8      	; 0x184a <CDC_Device_ReceiveByte+0x3e>
    1842:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	02 c0       	rjmp	.+4      	; 0x184e <CDC_Device_ReceiveByte+0x42>
    184a:	2f ef       	ldi	r18, 0xFF	; 255
    184c:	3f ef       	ldi	r19, 0xFF	; 255
    184e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1852:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1856:	89 2b       	or	r24, r25
    1858:	89 f4       	brne	.+34     	; 0x187c <CDC_Device_ReceiveByte+0x70>
    185a:	e8 ee       	ldi	r30, 0xE8	; 232
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	8b 77       	andi	r24, 0x7B	; 123
    1862:	80 83       	st	Z, r24
    1864:	82 2f       	mov	r24, r18
    1866:	93 2f       	mov	r25, r19
    1868:	08 95       	ret
    186a:	8f ef       	ldi	r24, 0xFF	; 255
    186c:	9f ef       	ldi	r25, 0xFF	; 255
    186e:	08 95       	ret
    1870:	8f ef       	ldi	r24, 0xFF	; 255
    1872:	9f ef       	ldi	r25, 0xFF	; 255
    1874:	08 95       	ret
    1876:	8f ef       	ldi	r24, 0xFF	; 255
    1878:	9f ef       	ldi	r25, 0xFF	; 255
    187a:	08 95       	ret
    187c:	82 2f       	mov	r24, r18
    187e:	93 2f       	mov	r25, r19
    1880:	08 95       	ret

00001882 <CDC_Device_getchar>:
    1882:	fc 01       	movw	r30, r24
    1884:	84 85       	ldd	r24, Z+12	; 0x0c
    1886:	95 85       	ldd	r25, Z+13	; 0x0d
    1888:	c1 df       	rcall	.-126    	; 0x180c <CDC_Device_ReceiveByte>
    188a:	99 23       	and	r25, r25
    188c:	14 f4       	brge	.+4      	; 0x1892 <CDC_Device_getchar+0x10>
    188e:	8e ef       	ldi	r24, 0xFE	; 254
    1890:	9f ef       	ldi	r25, 0xFF	; 255
    1892:	08 95       	ret

00001894 <CDC_Device_CreateStream>:
    1894:	fb 01       	movw	r30, r22
    1896:	2e e0       	ldi	r18, 0x0E	; 14
    1898:	db 01       	movw	r26, r22
    189a:	1d 92       	st	X+, r1
    189c:	2a 95       	dec	r18
    189e:	e9 f7       	brne	.-6      	; 0x189a <CDC_Device_CreateStream+0x6>
    18a0:	23 e0       	ldi	r18, 0x03	; 3
    18a2:	23 83       	std	Z+3, r18	; 0x03
    18a4:	2a ea       	ldi	r18, 0xAA	; 170
    18a6:	3b e0       	ldi	r19, 0x0B	; 11
    18a8:	31 87       	std	Z+9, r19	; 0x09
    18aa:	20 87       	std	Z+8, r18	; 0x08
    18ac:	21 e4       	ldi	r18, 0x41	; 65
    18ae:	3c e0       	ldi	r19, 0x0C	; 12
    18b0:	33 87       	std	Z+11, r19	; 0x0b
    18b2:	22 87       	std	Z+10, r18	; 0x0a
    18b4:	95 87       	std	Z+13, r25	; 0x0d
    18b6:	84 87       	std	Z+12, r24	; 0x0c
    18b8:	08 95       	ret

000018ba <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    18ba:	08 95       	ret

000018bc <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	fc 01       	movw	r30, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18c2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    18c6:	93 ff       	sbrs	r25, 3
    18c8:	98 c0       	rjmp	.+304    	; 0x19fa <CDC_Device_ProcessControlRequest+0x13e>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    18ca:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <USB_ControlRequest+0x4>
    18ce:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <USB_ControlRequest+0x5>
    18d2:	20 81       	ld	r18, Z
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	82 17       	cp	r24, r18
    18d8:	93 07       	cpc	r25, r19
    18da:	09 f0       	breq	.+2      	; 0x18de <CDC_Device_ProcessControlRequest+0x22>
    18dc:	8e c0       	rjmp	.+284    	; 0x19fa <CDC_Device_ProcessControlRequest+0x13e>
    18de:	ef 01       	movw	r28, r30
	  return;

	switch (USB_ControlRequest.bRequest)
    18e0:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <USB_ControlRequest+0x1>
    18e4:	81 32       	cpi	r24, 0x21	; 33
    18e6:	59 f0       	breq	.+22     	; 0x18fe <CDC_Device_ProcessControlRequest+0x42>
    18e8:	18 f4       	brcc	.+6      	; 0x18f0 <CDC_Device_ProcessControlRequest+0x34>
    18ea:	80 32       	cpi	r24, 0x20	; 32
    18ec:	c1 f1       	breq	.+112    	; 0x195e <CDC_Device_ProcessControlRequest+0xa2>
    18ee:	85 c0       	rjmp	.+266    	; 0x19fa <CDC_Device_ProcessControlRequest+0x13e>
    18f0:	82 32       	cpi	r24, 0x22	; 34
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <CDC_Device_ProcessControlRequest+0x3a>
    18f4:	61 c0       	rjmp	.+194    	; 0x19b8 <CDC_Device_ProcessControlRequest+0xfc>
    18f6:	83 32       	cpi	r24, 0x23	; 35
    18f8:	09 f4       	brne	.+2      	; 0x18fc <CDC_Device_ProcessControlRequest+0x40>
    18fa:	71 c0       	rjmp	.+226    	; 0x19de <CDC_Device_ProcessControlRequest+0x122>
    18fc:	7e c0       	rjmp	.+252    	; 0x19fa <CDC_Device_ProcessControlRequest+0x13e>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    18fe:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest>
    1902:	81 3a       	cpi	r24, 0xA1	; 161
    1904:	09 f0       	breq	.+2      	; 0x1908 <CDC_Device_ProcessControlRequest+0x4c>
    1906:	79 c0       	rjmp	.+242    	; 0x19fa <CDC_Device_ProcessControlRequest+0x13e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1908:	e8 ee       	ldi	r30, 0xE8	; 232
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	87 7f       	andi	r24, 0xF7	; 247
    1910:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1912:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    1916:	80 ff       	sbrs	r24, 0
    1918:	fc cf       	rjmp	.-8      	; 0x1912 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    191a:	8c 89       	ldd	r24, Y+20	; 0x14
    191c:	9d 89       	ldd	r25, Y+21	; 0x15
    191e:	ae 89       	ldd	r26, Y+22	; 0x16
    1920:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    1922:	e1 ef       	ldi	r30, 0xF1	; 241
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 83       	st	Z, r24
				UEDATX = (Data >> 8);
    1928:	49 2f       	mov	r20, r25
    192a:	5a 2f       	mov	r21, r26
    192c:	6b 2f       	mov	r22, r27
    192e:	77 27       	eor	r23, r23
    1930:	40 83       	st	Z, r20
				UEDATX = (Data >> 16);
    1932:	ad 01       	movw	r20, r26
    1934:	66 27       	eor	r22, r22
    1936:	77 27       	eor	r23, r23
    1938:	40 83       	st	Z, r20
				UEDATX = (Data >> 24);
    193a:	8b 2f       	mov	r24, r27
    193c:	99 27       	eor	r25, r25
    193e:	aa 27       	eor	r26, r26
    1940:	bb 27       	eor	r27, r27
    1942:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1944:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1946:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    1948:	89 8d       	ldd	r24, Y+25	; 0x19
    194a:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    194c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    194e:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1950:	e8 ee       	ldi	r30, 0xE8	; 232
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	8e 77       	andi	r24, 0x7E	; 126
    1958:	80 83       	st	Z, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    195a:	4a d6       	rcall	.+3220   	; 0x25f0 <Endpoint_ClearStatusStage>
    195c:	4e c0       	rjmp	.+156    	; 0x19fa <CDC_Device_ProcessControlRequest+0x13e>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    195e:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest>
    1962:	81 32       	cpi	r24, 0x21	; 33
    1964:	09 f0       	breq	.+2      	; 0x1968 <CDC_Device_ProcessControlRequest+0xac>
    1966:	49 c0       	rjmp	.+146    	; 0x19fa <CDC_Device_ProcessControlRequest+0x13e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1968:	e8 ee       	ldi	r30, 0xE8	; 232
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	87 7f       	andi	r24, 0xF7	; 247
    1970:	80 83       	st	Z, r24
    1972:	05 c0       	rjmp	.+10     	; 0x197e <CDC_Device_ProcessControlRequest+0xc2>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    1974:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_DeviceState>
    1978:	88 23       	and	r24, r24
    197a:	09 f4       	brne	.+2      	; 0x197e <CDC_Device_ProcessControlRequest+0xc2>
    197c:	3e c0       	rjmp	.+124    	; 0x19fa <CDC_Device_ProcessControlRequest+0x13e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    197e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1982:	82 ff       	sbrs	r24, 2
    1984:	f7 cf       	rjmp	.-18     	; 0x1974 <CDC_Device_ProcessControlRequest+0xb8>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    1986:	e1 ef       	ldi	r30, 0xF1	; 241
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	30 81       	ld	r19, Z
				Data.Bytes[1] = UEDATX;
    198c:	20 81       	ld	r18, Z
				Data.Bytes[2] = UEDATX;
    198e:	90 81       	ld	r25, Z
				Data.Bytes[3] = UEDATX;
    1990:	80 81       	ld	r24, Z
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1992:	3c 8b       	std	Y+20, r19	; 0x14
    1994:	2d 8b       	std	Y+21, r18	; 0x15
    1996:	9e 8b       	std	Y+22, r25	; 0x16
    1998:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    199a:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    199c:	88 8f       	std	Y+24, r24	; 0x18
    199e:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    19a0:	89 8f       	std	Y+25, r24	; 0x19
    19a2:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    19a4:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    19a6:	e8 ee       	ldi	r30, 0xE8	; 232
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	8b 77       	andi	r24, 0x7B	; 123

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    19ae:	80 83       	st	Z, r24

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    19b0:	1f d6       	rcall	.+3134   	; 0x25f0 <Endpoint_ClearStatusStage>
    19b2:	ce 01       	movw	r24, r28
    19b4:	82 df       	rcall	.-252    	; 0x18ba <CDC_Device_Event_Stub>
    19b6:	21 c0       	rjmp	.+66     	; 0x19fa <CDC_Device_ProcessControlRequest+0x13e>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    19b8:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest>
    19bc:	81 32       	cpi	r24, 0x21	; 33
    19be:	e9 f4       	brne	.+58     	; 0x19fa <CDC_Device_ProcessControlRequest+0x13e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19c0:	e8 ee       	ldi	r30, 0xE8	; 232
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    19c8:	80 83       	st	Z, r24
    19ca:	12 d6       	rcall	.+3108   	; 0x25f0 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    19cc:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <USB_ControlRequest+0x2>
    19d0:	90 91 6e 09 	lds	r25, 0x096E	; 0x80096e <USB_ControlRequest+0x3>
    19d4:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    19d6:	88 8b       	std	Y+16, r24	; 0x10
    19d8:	ce 01       	movw	r24, r28
    19da:	7b da       	rcall	.-2826   	; 0xed2 <EVENT_CDC_Device_ControLineStateChanged>
    19dc:	0e c0       	rjmp	.+28     	; 0x19fa <CDC_Device_ProcessControlRequest+0x13e>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    19de:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest>
    19e2:	81 32       	cpi	r24, 0x21	; 33
    19e4:	51 f4       	brne	.+20     	; 0x19fa <CDC_Device_ProcessControlRequest+0x13e>
    19e6:	e8 ee       	ldi	r30, 0xE8	; 232
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    19ee:	80 83       	st	Z, r24
    19f0:	ff d5       	rcall	.+3070   	; 0x25f0 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    19f2:	60 91 6d 09 	lds	r22, 0x096D	; 0x80096d <USB_ControlRequest+0x2>
    19f6:	ce 01       	movw	r24, r28
    19f8:	60 df       	rcall	.-320    	; 0x18ba <CDC_Device_Event_Stub>
    19fa:	df 91       	pop	r29
			}

			break;
	}
}
    19fc:	cf 91       	pop	r28
    19fe:	08 95       	ret

00001a00 <HID_Device_ProcessControlRequest>:
    1a00:	3f 92       	push	r3
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1a02:	4f 92       	push	r4
    1a04:	5f 92       	push	r5
    1a06:	6f 92       	push	r6
    1a08:	7f 92       	push	r7
    1a0a:	8f 92       	push	r8
    1a0c:	9f 92       	push	r9
    1a0e:	af 92       	push	r10
    1a10:	bf 92       	push	r11
    1a12:	cf 92       	push	r12
    1a14:	df 92       	push	r13
    1a16:	ef 92       	push	r14
    1a18:	ff 92       	push	r15
    1a1a:	0f 93       	push	r16
    1a1c:	1f 93       	push	r17
    1a1e:	cf 93       	push	r28
    1a20:	df 93       	push	r29
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <HID_Device_ProcessControlRequest+0x24>
    1a24:	1f 92       	push	r1
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1a2c:	ed b6       	in	r14, 0x3d	; 61
    1a2e:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a30:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1a34:	83 ff       	sbrs	r24, 3
    1a36:	1f c1       	rjmp	.+574    	; 0x1c76 <HID_Device_ProcessControlRequest+0x276>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1a38:	20 91 6f 09 	lds	r18, 0x096F	; 0x80096f <USB_ControlRequest+0x4>
    1a3c:	30 91 70 09 	lds	r19, 0x0970	; 0x800970 <USB_ControlRequest+0x5>
    1a40:	f6 01       	movw	r30, r12
    1a42:	80 81       	ld	r24, Z
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	28 17       	cp	r18, r24
    1a48:	39 07       	cpc	r19, r25
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <HID_Device_ProcessControlRequest+0x4e>
    1a4c:	14 c1       	rjmp	.+552    	; 0x1c76 <HID_Device_ProcessControlRequest+0x276>
	  return;

	switch (USB_ControlRequest.bRequest)
    1a4e:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <USB_ControlRequest+0x1>
    1a52:	83 30       	cpi	r24, 0x03	; 3
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <HID_Device_ProcessControlRequest+0x58>
    1a56:	aa c0       	rjmp	.+340    	; 0x1bac <HID_Device_ProcessControlRequest+0x1ac>
    1a58:	30 f4       	brcc	.+12     	; 0x1a66 <HID_Device_ProcessControlRequest+0x66>
    1a5a:	81 30       	cpi	r24, 0x01	; 1
    1a5c:	71 f0       	breq	.+28     	; 0x1a7a <HID_Device_ProcessControlRequest+0x7a>
    1a5e:	82 30       	cpi	r24, 0x02	; 2
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <HID_Device_ProcessControlRequest+0x64>
    1a62:	ed c0       	rjmp	.+474    	; 0x1c3e <HID_Device_ProcessControlRequest+0x23e>
    1a64:	08 c1       	rjmp	.+528    	; 0x1c76 <HID_Device_ProcessControlRequest+0x276>
    1a66:	8a 30       	cpi	r24, 0x0A	; 10
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <HID_Device_ProcessControlRequest+0x6c>
    1a6a:	cd c0       	rjmp	.+410    	; 0x1c06 <HID_Device_ProcessControlRequest+0x206>
    1a6c:	8b 30       	cpi	r24, 0x0B	; 11
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <HID_Device_ProcessControlRequest+0x72>
    1a70:	b6 c0       	rjmp	.+364    	; 0x1bde <HID_Device_ProcessControlRequest+0x1de>
    1a72:	89 30       	cpi	r24, 0x09	; 9
    1a74:	09 f0       	breq	.+2      	; 0x1a78 <HID_Device_ProcessControlRequest+0x78>
    1a76:	ff c0       	rjmp	.+510    	; 0x1c76 <HID_Device_ProcessControlRequest+0x276>
    1a78:	52 c0       	rjmp	.+164    	; 0x1b1e <HID_Device_ProcessControlRequest+0x11e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1a7a:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest>
    1a7e:	81 3a       	cpi	r24, 0xA1	; 161
    1a80:	09 f0       	breq	.+2      	; 0x1a84 <HID_Device_ProcessControlRequest+0x84>
    1a82:	f9 c0       	rjmp	.+498    	; 0x1c76 <HID_Device_ProcessControlRequest+0x276>
			{
    1a84:	ad b6       	in	r10, 0x3d	; 61
    1a86:	be b6       	in	r11, 0x3e	; 62
				uint16_t ReportSize = 0;
    1a88:	1a 82       	std	Y+2, r1	; 0x02
    1a8a:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1a8c:	eb e6       	ldi	r30, 0x6B	; 107
    1a8e:	f9 e0       	ldi	r31, 0x09	; 9
    1a90:	82 81       	ldd	r24, Z+2	; 0x02
    1a92:	73 80       	ldd	r7, Z+3	; 0x03
    1a94:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1a96:	7a 94       	dec	r7
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1a98:	f6 01       	movw	r30, r12
    1a9a:	40 85       	ldd	r20, Z+8	; 0x08
    1a9c:	50 e0       	ldi	r21, 0x00	; 0
    1a9e:	8d b7       	in	r24, 0x3d	; 61
    1aa0:	9e b7       	in	r25, 0x3e	; 62
    1aa2:	84 1b       	sub	r24, r20
    1aa4:	95 0b       	sbc	r25, r21
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	f8 94       	cli
    1aaa:	9e bf       	out	0x3e, r25	; 62
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	8d bf       	out	0x3d, r24	; 61
    1ab0:	ed b7       	in	r30, 0x3d	; 61
    1ab2:	fe b7       	in	r31, 0x3e	; 62
    1ab4:	31 96       	adiw	r30, 0x01	; 1
    1ab6:	4f 01       	movw	r8, r30

				memset(ReportData, 0, sizeof(ReportData));
    1ab8:	60 e0       	ldi	r22, 0x00	; 0
    1aba:	70 e0       	ldi	r23, 0x00	; 0
    1abc:	cf 01       	movw	r24, r30
    1abe:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1ac2:	8e 01       	movw	r16, r28
    1ac4:	0f 5f       	subi	r16, 0xFF	; 255
    1ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac8:	94 01       	movw	r18, r8
    1aca:	47 2d       	mov	r20, r7
    1acc:	be 01       	movw	r22, r28
    1ace:	6d 5f       	subi	r22, 0xFD	; 253
    1ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad2:	c6 01       	movw	r24, r12
    1ad4:	3e d9       	rcall	.-3460   	; 0xd52 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1ad6:	f6 01       	movw	r30, r12
    1ad8:	86 81       	ldd	r24, Z+6	; 0x06
    1ada:	97 81       	ldd	r25, Z+7	; 0x07
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	29 f0       	breq	.+10     	; 0x1aea <HID_Device_ProcessControlRequest+0xea>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
					       HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1ae0:	40 85       	ldd	r20, Z+8	; 0x08

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1ae2:	50 e0       	ldi	r21, 0x00	; 0
    1ae4:	b4 01       	movw	r22, r8
    1ae6:	0e 94 e5 16 	call	0x2dca	; 0x2dca <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1aea:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1aee:	e8 ee       	ldi	r30, 0xE8	; 232
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	87 7f       	andi	r24, 0xF7	; 247
    1af6:	80 83       	st	Z, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1afc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1b00:	69 81       	ldd	r22, Y+1	; 0x01
    1b02:	7a 81       	ldd	r23, Y+2	; 0x02
    1b04:	c4 01       	movw	r24, r8
    1b06:	4b d4       	rcall	.+2198   	; 0x239e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b08:	e8 ee       	ldi	r30, 0xE8	; 232
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	8b 77       	andi	r24, 0x7B	; 123
    1b10:	80 83       	st	Z, r24
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	be be       	out	0x3e, r11	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	ad be       	out	0x3d, r10	; 61
    1b1c:	ac c0       	rjmp	.+344    	; 0x1c76 <HID_Device_ProcessControlRequest+0x276>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1b1e:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest>
    1b22:	81 32       	cpi	r24, 0x21	; 33
    1b24:	09 f0       	breq	.+2      	; 0x1b28 <HID_Device_ProcessControlRequest+0x128>
    1b26:	a7 c0       	rjmp	.+334    	; 0x1c76 <HID_Device_ProcessControlRequest+0x276>
			{
    1b28:	6d b6       	in	r6, 0x3d	; 61
    1b2a:	7e b6       	in	r7, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1b2c:	eb e6       	ldi	r30, 0x6B	; 107
    1b2e:	f9 e0       	ldi	r31, 0x09	; 9
    1b30:	06 81       	ldd	r16, Z+6	; 0x06
    1b32:	17 81       	ldd	r17, Z+7	; 0x07
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1b34:	42 80       	ldd	r4, Z+2	; 0x02
    1b36:	53 80       	ldd	r5, Z+3	; 0x03
    1b38:	34 2c       	mov	r3, r4
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    1b3a:	5a 94       	dec	r5
				uint8_t  ReportData[ReportSize];
    1b3c:	8d b7       	in	r24, 0x3d	; 61
    1b3e:	9e b7       	in	r25, 0x3e	; 62
    1b40:	80 1b       	sub	r24, r16
    1b42:	91 0b       	sbc	r25, r17
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	9e bf       	out	0x3e, r25	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	8d bf       	out	0x3d, r24	; 61
    1b4e:	ed b7       	in	r30, 0x3d	; 61
    1b50:	fe b7       	in	r31, 0x3e	; 62
    1b52:	31 96       	adiw	r30, 0x01	; 1
    1b54:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b56:	0f 2e       	mov	r0, r31
    1b58:	f8 ee       	ldi	r31, 0xE8	; 232
    1b5a:	af 2e       	mov	r10, r31
    1b5c:	b1 2c       	mov	r11, r1
    1b5e:	f0 2d       	mov	r31, r0
    1b60:	f5 01       	movw	r30, r10
    1b62:	80 81       	ld	r24, Z
    1b64:	87 7f       	andi	r24, 0xF7	; 247
    1b66:	80 83       	st	Z, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1b68:	b8 01       	movw	r22, r16
    1b6a:	c4 01       	movw	r24, r8
    1b6c:	80 d4       	rcall	.+2304   	; 0x246e <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b6e:	f5 01       	movw	r30, r10
    1b70:	80 81       	ld	r24, Z
    1b72:	8e 77       	andi	r24, 0x7E	; 126
    1b74:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1b76:	44 20       	and	r4, r4
    1b78:	19 f0       	breq	.+6      	; 0x1b80 <HID_Device_ProcessControlRequest+0x180>
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <HID_Device_ProcessControlRequest+0x184>
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    1b84:	21 e0       	ldi	r18, 0x01	; 1
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	31 10       	cpse	r3, r1
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <HID_Device_ProcessControlRequest+0x190>
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	28 0d       	add	r18, r8
    1b92:	39 1d       	adc	r19, r9

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1b94:	08 1b       	sub	r16, r24
    1b96:	19 0b       	sbc	r17, r25
    1b98:	45 2d       	mov	r20, r5
    1b9a:	64 2d       	mov	r22, r4
    1b9c:	c6 01       	movw	r24, r12
    1b9e:	88 d9       	rcall	.-3312   	; 0xeb0 <CALLBACK_HID_Device_ProcessHIDReport>
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	7e be       	out	0x3e, r7	; 62
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	6d be       	out	0x3d, r6	; 61
    1baa:	65 c0       	rjmp	.+202    	; 0x1c76 <HID_Device_ProcessControlRequest+0x276>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1bac:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest>
    1bb0:	81 3a       	cpi	r24, 0xA1	; 161
    1bb2:	09 f0       	breq	.+2      	; 0x1bb6 <HID_Device_ProcessControlRequest+0x1b6>
    1bb4:	60 c0       	rjmp	.+192    	; 0x1c76 <HID_Device_ProcessControlRequest+0x276>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1bb6:	e8 ee       	ldi	r30, 0xE8	; 232
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	87 7f       	andi	r24, 0xF7	; 247
    1bbe:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1bc0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1bc4:	80 ff       	sbrs	r24, 0
    1bc6:	fc cf       	rjmp	.-8      	; 0x1bc0 <HID_Device_ProcessControlRequest+0x1c0>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1bc8:	f6 01       	movw	r30, r12
    1bca:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1bcc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bd0:	e8 ee       	ldi	r30, 0xE8	; 232
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1bd8:	80 83       	st	Z, r24
    1bda:	0a d5       	rcall	.+2580   	; 0x25f0 <Endpoint_ClearStatusStage>
    1bdc:	4c c0       	rjmp	.+152    	; 0x1c76 <HID_Device_ProcessControlRequest+0x276>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1bde:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest>
    1be2:	81 32       	cpi	r24, 0x21	; 33
    1be4:	09 f0       	breq	.+2      	; 0x1be8 <HID_Device_ProcessControlRequest+0x1e8>
    1be6:	47 c0       	rjmp	.+142    	; 0x1c76 <HID_Device_ProcessControlRequest+0x276>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1be8:	e8 ee       	ldi	r30, 0xE8	; 232
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1bf0:	80 83       	st	Z, r24
    1bf2:	fe d4       	rcall	.+2556   	; 0x25f0 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1bf4:	90 91 6d 09 	lds	r25, 0x096D	; 0x80096d <USB_ControlRequest+0x2>
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	91 11       	cpse	r25, r1
    1bfc:	01 c0       	rjmp	.+2      	; 0x1c00 <HID_Device_ProcessControlRequest+0x200>
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	f6 01       	movw	r30, r12
    1c02:	81 87       	std	Z+9, r24	; 0x09
    1c04:	38 c0       	rjmp	.+112    	; 0x1c76 <HID_Device_ProcessControlRequest+0x276>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1c06:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest>
    1c0a:	81 32       	cpi	r24, 0x21	; 33
    1c0c:	a1 f5       	brne	.+104    	; 0x1c76 <HID_Device_ProcessControlRequest+0x276>
    1c0e:	e8 ee       	ldi	r30, 0xE8	; 232
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1c16:	80 83       	st	Z, r24
    1c18:	eb d4       	rcall	.+2518   	; 0x25f0 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1c1a:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <USB_ControlRequest+0x2>
    1c1e:	90 91 6e 09 	lds	r25, 0x096E	; 0x80096e <USB_ControlRequest+0x3>
    1c22:	88 27       	eor	r24, r24
    1c24:	00 24       	eor	r0, r0
    1c26:	88 0f       	add	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	00 1c       	adc	r0, r0
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	00 1c       	adc	r0, r0
    1c32:	89 2f       	mov	r24, r25
    1c34:	90 2d       	mov	r25, r0
    1c36:	f6 01       	movw	r30, r12
    1c38:	95 87       	std	Z+13, r25	; 0x0d
    1c3a:	84 87       	std	Z+12, r24	; 0x0c
    1c3c:	1c c0       	rjmp	.+56     	; 0x1c76 <HID_Device_ProcessControlRequest+0x276>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1c3e:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest>
    1c42:	81 3a       	cpi	r24, 0xA1	; 161
    1c44:	c1 f4       	brne	.+48     	; 0x1c76 <HID_Device_ProcessControlRequest+0x276>
    1c46:	e8 ee       	ldi	r30, 0xE8	; 232
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	87 7f       	andi	r24, 0xF7	; 247
    1c4e:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1c54:	80 ff       	sbrs	r24, 0
    1c56:	fc cf       	rjmp	.-8      	; 0x1c50 <HID_Device_ProcessControlRequest+0x250>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1c58:	f6 01       	movw	r30, r12
    1c5a:	84 85       	ldd	r24, Z+12	; 0x0c
    1c5c:	95 85       	ldd	r25, Z+13	; 0x0d
    1c5e:	96 95       	lsr	r25
    1c60:	87 95       	ror	r24
    1c62:	96 95       	lsr	r25
    1c64:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c66:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c6a:	e8 ee       	ldi	r30, 0xE8	; 232
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1c72:	80 83       	st	Z, r24
    1c74:	bd d4       	rcall	.+2426   	; 0x25f0 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	fe be       	out	0x3e, r15	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	ed be       	out	0x3d, r14	; 61
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	1f 91       	pop	r17
    1c8c:	0f 91       	pop	r16
    1c8e:	ff 90       	pop	r15
    1c90:	ef 90       	pop	r14
    1c92:	df 90       	pop	r13
    1c94:	cf 90       	pop	r12
    1c96:	bf 90       	pop	r11
    1c98:	af 90       	pop	r10
    1c9a:	9f 90       	pop	r9
    1c9c:	8f 90       	pop	r8
    1c9e:	7f 90       	pop	r7
    1ca0:	6f 90       	pop	r6
    1ca2:	5f 90       	pop	r5
    1ca4:	4f 90       	pop	r4
    1ca6:	3f 90       	pop	r3
    1ca8:	08 95       	ret

00001caa <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1caa:	fc 01       	movw	r30, r24
    1cac:	39 96       	adiw	r30, 0x09	; 9
    1cae:	27 e0       	ldi	r18, 0x07	; 7
    1cb0:	df 01       	movw	r26, r30
    1cb2:	1d 92       	st	X+, r1
    1cb4:	2a 95       	dec	r18
    1cb6:	e9 f7       	brne	.-6      	; 0x1cb2 <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1cb8:	21 e0       	ldi	r18, 0x01	; 1
    1cba:	fc 01       	movw	r30, r24
    1cbc:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1cbe:	24 ef       	ldi	r18, 0xF4	; 244
    1cc0:	31 e0       	ldi	r19, 0x01	; 1
    1cc2:	35 87       	std	Z+13, r19	; 0x0d
    1cc4:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1cc6:	23 e0       	ldi	r18, 0x03	; 3
    1cc8:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1cca:	61 e0       	ldi	r22, 0x01	; 1
    1ccc:	01 96       	adiw	r24, 0x01	; 1
    1cce:	4a c4       	rjmp	.+2196   	; 0x2564 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    1cd0:	08 95       	ret

00001cd2 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1cd2:	5f 92       	push	r5
    1cd4:	6f 92       	push	r6
    1cd6:	7f 92       	push	r7
    1cd8:	8f 92       	push	r8
    1cda:	9f 92       	push	r9
    1cdc:	af 92       	push	r10
    1cde:	bf 92       	push	r11
    1ce0:	cf 92       	push	r12
    1ce2:	df 92       	push	r13
    1ce4:	ef 92       	push	r14
    1ce6:	ff 92       	push	r15
    1ce8:	0f 93       	push	r16
    1cea:	1f 93       	push	r17
    1cec:	cf 93       	push	r28
    1cee:	df 93       	push	r29
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <HID_Device_USBTask+0x20>
    1cf2:	1f 92       	push	r1
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1cfa:	ad b6       	in	r10, 0x3d	; 61
    1cfc:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1cfe:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_DeviceState>
    1d02:	84 30       	cpi	r24, 0x04	; 4
    1d04:	09 f0       	breq	.+2      	; 0x1d08 <HID_Device_USBTask+0x36>
    1d06:	90 c0       	rjmp	.+288    	; 0x1e28 <HID_Device_USBTask+0x156>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1d08:	f7 01       	movw	r30, r14
    1d0a:	22 85       	ldd	r18, Z+10	; 0x0a
    1d0c:	33 85       	ldd	r19, Z+11	; 0x0b
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1d0e:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1d12:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1d16:	28 17       	cp	r18, r24
    1d18:	39 07       	cpc	r19, r25
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <HID_Device_USBTask+0x4c>
    1d1c:	85 c0       	rjmp	.+266    	; 0x1e28 <HID_Device_USBTask+0x156>
		#else
		return;
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
    1d1e:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d20:	8f 70       	andi	r24, 0x0F	; 15
    1d22:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1d26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
    1d2a:	85 ff       	sbrs	r24, 5
    1d2c:	7d c0       	rjmp	.+250    	; 0x1e28 <HID_Device_USBTask+0x156>
	{
    1d2e:	8d b6       	in	r8, 0x3d	; 61
    1d30:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1d32:	40 85       	ldd	r20, Z+8	; 0x08
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	8d b7       	in	r24, 0x3d	; 61
    1d38:	9e b7       	in	r25, 0x3e	; 62
    1d3a:	84 1b       	sub	r24, r20
    1d3c:	95 0b       	sbc	r25, r21
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	9e bf       	out	0x3e, r25	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	8d bf       	out	0x3d, r24	; 61
    1d48:	ed b7       	in	r30, 0x3d	; 61
    1d4a:	fe b7       	in	r31, 0x3e	; 62
    1d4c:	31 96       	adiw	r30, 0x01	; 1
    1d4e:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    1d50:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1d52:	1a 82       	std	Y+2, r1	; 0x02
    1d54:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    1d56:	60 e0       	ldi	r22, 0x00	; 0
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	cf 01       	movw	r24, r30
    1d5c:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1d60:	8e 01       	movw	r16, r28
    1d62:	0f 5f       	subi	r16, 0xFF	; 255
    1d64:	1f 4f       	sbci	r17, 0xFF	; 255
    1d66:	96 01       	movw	r18, r12
    1d68:	40 e0       	ldi	r20, 0x00	; 0
    1d6a:	be 01       	movw	r22, r28
    1d6c:	6d 5f       	subi	r22, 0xFD	; 253
    1d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d70:	c7 01       	movw	r24, r14
    1d72:	0e 94 a9 06 	call	0xd52	; 0xd52 <CALLBACK_HID_Device_CreateHIDReport>
    1d76:	68 2e       	mov	r6, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1d78:	f7 01       	movw	r30, r14
    1d7a:	84 85       	ldd	r24, Z+12	; 0x0c
    1d7c:	95 85       	ldd	r25, Z+13	; 0x0d
    1d7e:	89 2b       	or	r24, r25
    1d80:	31 f0       	breq	.+12     	; 0x1d8e <HID_Device_USBTask+0xbc>
    1d82:	86 85       	ldd	r24, Z+14	; 0x0e
    1d84:	97 85       	ldd	r25, Z+15	; 0x0f
    1d86:	89 2b       	or	r24, r25
    1d88:	21 f0       	breq	.+8      	; 0x1d92 <HID_Device_USBTask+0xc0>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	03 c0       	rjmp	.+6      	; 0x1d94 <HID_Device_USBTask+0xc2>
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	01 c0       	rjmp	.+2      	; 0x1d94 <HID_Device_USBTask+0xc2>
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	81 70       	andi	r24, 0x01	; 1
    1d96:	78 2e       	mov	r7, r24

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1d98:	f7 01       	movw	r30, r14
    1d9a:	06 81       	ldd	r16, Z+6	; 0x06
    1d9c:	17 81       	ldd	r17, Z+7	; 0x07
    1d9e:	01 15       	cp	r16, r1
    1da0:	11 05       	cpc	r17, r1
    1da2:	99 f0       	breq	.+38     	; 0x1dca <HID_Device_USBTask+0xf8>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1da4:	49 81       	ldd	r20, Y+1	; 0x01
    1da6:	5a 81       	ldd	r21, Y+2	; 0x02
    1da8:	b8 01       	movw	r22, r16
    1daa:	c6 01       	movw	r24, r12
    1dac:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <memcmp>
    1db0:	55 24       	eor	r5, r5
    1db2:	53 94       	inc	r5
    1db4:	89 2b       	or	r24, r25
    1db6:	09 f4       	brne	.+2      	; 0x1dba <HID_Device_USBTask+0xe8>
    1db8:	51 2c       	mov	r5, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1dba:	f7 01       	movw	r30, r14
    1dbc:	40 85       	ldd	r20, Z+8	; 0x08
    1dbe:	50 e0       	ldi	r21, 0x00	; 0
    1dc0:	b6 01       	movw	r22, r12
    1dc2:	c8 01       	movw	r24, r16
    1dc4:	0e 94 e5 16 	call	0x2dca	; 0x2dca <memcpy>
    1dc8:	01 c0       	rjmp	.+2      	; 0x1dcc <HID_Device_USBTask+0xfa>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1dca:	51 2c       	mov	r5, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1dcc:	89 81       	ldd	r24, Y+1	; 0x01
    1dce:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd0:	89 2b       	or	r24, r25
    1dd2:	f1 f0       	breq	.+60     	; 0x1e10 <HID_Device_USBTask+0x13e>
    1dd4:	61 10       	cpse	r6, r1
    1dd6:	04 c0       	rjmp	.+8      	; 0x1de0 <HID_Device_USBTask+0x10e>
    1dd8:	51 10       	cpse	r5, r1
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <HID_Device_USBTask+0x10e>
    1ddc:	77 20       	and	r7, r7
    1dde:	c1 f0       	breq	.+48     	; 0x1e10 <HID_Device_USBTask+0x13e>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1de0:	f7 01       	movw	r30, r14
    1de2:	84 85       	ldd	r24, Z+12	; 0x0c
    1de4:	95 85       	ldd	r25, Z+13	; 0x0d
    1de6:	97 87       	std	Z+15, r25	; 0x0f
    1de8:	86 87       	std	Z+14, r24	; 0x0e

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
    1dea:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dec:	8f 70       	andi	r24, 0x0F	; 15
    1dee:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			if (ReportID)
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1df6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1dfa:	69 81       	ldd	r22, Y+1	; 0x01
    1dfc:	7a 81       	ldd	r23, Y+2	; 0x02
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	c6 01       	movw	r24, r12
    1e04:	eb d1       	rcall	.+982    	; 0x21dc <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e06:	e8 ee       	ldi	r30, 0xE8	; 232
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	8e 77       	andi	r24, 0x7E	; 126
    1e0e:	80 83       	st	Z, r24
    1e10:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1e14:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1e18:	f7 01       	movw	r30, r14
    1e1a:	93 87       	std	Z+11, r25	; 0x0b
    1e1c:	82 87       	std	Z+10, r24	; 0x0a
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	9e be       	out	0x3e, r9	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	8d be       	out	0x3d, r8	; 61
	}
}
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	be be       	out	0x3e, r11	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	ad be       	out	0x3d, r10	; 61
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	1f 91       	pop	r17
    1e3e:	0f 91       	pop	r16
    1e40:	ff 90       	pop	r15
    1e42:	ef 90       	pop	r14
    1e44:	df 90       	pop	r13
    1e46:	cf 90       	pop	r12
    1e48:	bf 90       	pop	r11
    1e4a:	af 90       	pop	r10
    1e4c:	9f 90       	pop	r9
    1e4e:	8f 90       	pop	r8
    1e50:	7f 90       	pop	r7
    1e52:	6f 90       	pop	r6
    1e54:	5f 90       	pop	r5
    1e56:	08 95       	ret

00001e58 <MS_Device_ReadInCommandBlock>:
		MSInterfaceInfo->State.IsMassStoreReset = false;
	}
}

static bool MS_Device_ReadInCommandBlock(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1e58:	0f 93       	push	r16
    1e5a:	1f 93       	push	r17
    1e5c:	cf 93       	push	r28
    1e5e:	df 93       	push	r29
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <MS_Device_ReadInCommandBlock+0xa>
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	8c 01       	movw	r16, r24
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    1e68:	dc 01       	movw	r26, r24
    1e6a:	16 96       	adiw	r26, 0x06	; 6
    1e6c:	8c 91       	ld	r24, X
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e6e:	8f 70       	andi	r24, 0x0F	; 15
    1e70:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	BytesProcessed = 0;
    1e74:	1a 82       	std	Y+2, r1	; 0x02
    1e76:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1e78:	04 c0       	rjmp	.+8      	; 0x1e82 <MS_Device_ReadInCommandBlock+0x2a>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1e7a:	f8 01       	movw	r30, r16
    1e7c:	80 ad       	ldd	r24, Z+56	; 0x38
    1e7e:	81 11       	cpse	r24, r1
    1e80:	52 c0       	rjmp	.+164    	; 0x1f26 <MS_Device_ReadInCommandBlock+0xce>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1e82:	ae 01       	movw	r20, r28
    1e84:	4f 5f       	subi	r20, 0xFF	; 255
    1e86:	5f 4f       	sbci	r21, 0xFF	; 255
    1e88:	6f e0       	ldi	r22, 0x0F	; 15
    1e8a:	70 e0       	ldi	r23, 0x00	; 0
    1e8c:	c8 01       	movw	r24, r16
    1e8e:	0c 96       	adiw	r24, 0x0c	; 12
    1e90:	3d d2       	rcall	.+1146   	; 0x230c <Endpoint_Read_Stream_LE>
    1e92:	85 30       	cpi	r24, 0x05	; 5
    1e94:	91 f3       	breq	.-28     	; 0x1e7a <MS_Device_ReadInCommandBlock+0x22>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1e96:	f8 01       	movw	r30, r16
    1e98:	84 85       	ldd	r24, Z+12	; 0x0c
    1e9a:	95 85       	ldd	r25, Z+13	; 0x0d
    1e9c:	a6 85       	ldd	r26, Z+14	; 0x0e
    1e9e:	b7 85       	ldd	r27, Z+15	; 0x0f
    1ea0:	85 35       	cpi	r24, 0x55	; 85
    1ea2:	93 45       	sbci	r25, 0x53	; 83
    1ea4:	a2 44       	sbci	r26, 0x42	; 66
    1ea6:	b3 44       	sbci	r27, 0x43	; 67
    1ea8:	a1 f4       	brne	.+40     	; 0x1ed2 <MS_Device_ReadInCommandBlock+0x7a>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    1eaa:	d8 01       	movw	r26, r16
    1eac:	59 96       	adiw	r26, 0x19	; 25
    1eae:	9c 91       	ld	r25, X
    1eb0:	59 97       	sbiw	r26, 0x19	; 25
    1eb2:	1b 96       	adiw	r26, 0x0b	; 11
    1eb4:	8c 91       	ld	r24, X
    1eb6:	1b 97       	sbiw	r26, 0x0b	; 11
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1eb8:	98 17       	cp	r25, r24
    1eba:	58 f4       	brcc	.+22     	; 0x1ed2 <MS_Device_ReadInCommandBlock+0x7a>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1ebc:	58 96       	adiw	r26, 0x18	; 24
    1ebe:	8c 91       	ld	r24, X
    1ec0:	58 97       	sbiw	r26, 0x18	; 24
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    1ec2:	8f 71       	andi	r24, 0x1F	; 31
    1ec4:	31 f4       	brne	.+12     	; 0x1ed2 <MS_Device_ReadInCommandBlock+0x7a>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    1ec6:	5a 96       	adiw	r26, 0x1a	; 26
    1ec8:	8c 91       	ld	r24, X
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1eca:	88 23       	and	r24, r24
    1ecc:	11 f0       	breq	.+4      	; 0x1ed2 <MS_Device_ReadInCommandBlock+0x7a>
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    1ece:	81 31       	cpi	r24, 0x11	; 17
    1ed0:	80 f0       	brcs	.+32     	; 0x1ef2 <MS_Device_ReadInCommandBlock+0x9a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1ed2:	eb ee       	ldi	r30, 0xEB	; 235
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	80 62       	ori	r24, 0x20	; 32
    1eda:	80 83       	st	Z, r24
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    1edc:	d8 01       	movw	r26, r16
    1ede:	11 96       	adiw	r26, 0x01	; 1
    1ee0:	8c 91       	ld	r24, X
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ee2:	8f 70       	andi	r24, 0x0F	; 15
    1ee4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1ee8:	80 81       	ld	r24, Z
    1eea:	80 62       	ori	r24, 0x20	; 32
    1eec:	80 83       	st	Z, r24
		Endpoint_StallTransaction();

		return false;
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	1d c0       	rjmp	.+58     	; 0x1f2c <MS_Device_ReadInCommandBlock+0xd4>
	}

	BytesProcessed = 0;
    1ef2:	1a 82       	std	Y+2, r1	; 0x02
    1ef4:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1ef6:	04 c0       	rjmp	.+8      	; 0x1f00 <MS_Device_ReadInCommandBlock+0xa8>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1ef8:	f8 01       	movw	r30, r16
    1efa:	80 ad       	ldd	r24, Z+56	; 0x38
    1efc:	81 11       	cpse	r24, r1
    1efe:	15 c0       	rjmp	.+42     	; 0x1f2a <MS_Device_ReadInCommandBlock+0xd2>
		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
    1f00:	d8 01       	movw	r26, r16
    1f02:	5a 96       	adiw	r26, 0x1a	; 26
    1f04:	6c 91       	ld	r22, X

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1f06:	70 e0       	ldi	r23, 0x00	; 0
    1f08:	ae 01       	movw	r20, r28
    1f0a:	4f 5f       	subi	r20, 0xFF	; 255
    1f0c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0e:	c8 01       	movw	r24, r16
    1f10:	4b 96       	adiw	r24, 0x1b	; 27
    1f12:	fc d1       	rcall	.+1016   	; 0x230c <Endpoint_Read_Stream_LE>
    1f14:	85 30       	cpi	r24, 0x05	; 5
    1f16:	81 f3       	breq	.-32     	; 0x1ef8 <MS_Device_ReadInCommandBlock+0xa0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1f18:	e8 ee       	ldi	r30, 0xE8	; 232
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	8b 77       	andi	r24, 0x7B	; 123
    1f20:	80 83       	st	Z, r24
		  return false;
	}

	Endpoint_ClearOUT();

	return true;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	03 c0       	rjmp	.+6      	; 0x1f2c <MS_Device_ReadInCommandBlock+0xd4>
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	01 c0       	rjmp	.+2      	; 0x1f2c <MS_Device_ReadInCommandBlock+0xd4>
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_ClearOUT();

	return true;
}
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	1f 91       	pop	r17
    1f36:	0f 91       	pop	r16
    1f38:	08 95       	ret

00001f3a <MS_Device_ReturnCommandStatus>:

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1f3a:	0f 93       	push	r16
    1f3c:	1f 93       	push	r17
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <MS_Device_ReturnCommandStatus+0xa>
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	fc 01       	movw	r30, r24
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    1f4a:	86 81       	ldd	r24, Z+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f4c:	8f 70       	andi	r24, 0x0F	; 15
    1f4e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1f52:	03 c0       	rjmp	.+6      	; 0x1f5a <MS_Device_ReturnCommandStatus+0x20>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1f54:	80 ad       	ldd	r24, Z+56	; 0x38
    1f56:	81 11       	cpse	r24, r1
    1f58:	27 c0       	rjmp	.+78     	; 0x1fa8 <MS_Device_ReturnCommandStatus+0x6e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1f5a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    1f5e:	85 fd       	sbrc	r24, 5
    1f60:	f9 cf       	rjmp	.-14     	; 0x1f54 <MS_Device_ReturnCommandStatus+0x1a>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    1f62:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f64:	8f 70       	andi	r24, 0x0F	; 15
    1f66:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1f6a:	03 c0       	rjmp	.+6      	; 0x1f72 <MS_Device_ReturnCommandStatus+0x38>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1f6c:	80 ad       	ldd	r24, Z+56	; 0x38
    1f6e:	81 11       	cpse	r24, r1
    1f70:	1b c0       	rjmp	.+54     	; 0x1fa8 <MS_Device_ReturnCommandStatus+0x6e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1f72:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    1f76:	85 fd       	sbrc	r24, 5
    1f78:	f9 cf       	rjmp	.-14     	; 0x1f6c <MS_Device_ReturnCommandStatus+0x32>
    1f7a:	8f 01       	movw	r16, r30

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    1f7c:	1a 82       	std	Y+2, r1	; 0x02
    1f7e:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1f80:	04 c0       	rjmp	.+8      	; 0x1f8a <MS_Device_ReturnCommandStatus+0x50>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1f82:	f8 01       	movw	r30, r16
    1f84:	80 ad       	ldd	r24, Z+56	; 0x38
    1f86:	81 11       	cpse	r24, r1
    1f88:	0f c0       	rjmp	.+30     	; 0x1fa8 <MS_Device_ReturnCommandStatus+0x6e>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1f8a:	ae 01       	movw	r20, r28
    1f8c:	4f 5f       	subi	r20, 0xFF	; 255
    1f8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f90:	6d e0       	ldi	r22, 0x0D	; 13
    1f92:	70 e0       	ldi	r23, 0x00	; 0
    1f94:	c8 01       	movw	r24, r16
    1f96:	8b 96       	adiw	r24, 0x2b	; 43
    1f98:	21 d1       	rcall	.+578    	; 0x21dc <Endpoint_Write_Stream_LE>
    1f9a:	85 30       	cpi	r24, 0x05	; 5
    1f9c:	91 f3       	breq	.-28     	; 0x1f82 <MS_Device_ReturnCommandStatus+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1f9e:	e8 ee       	ldi	r30, 0xE8	; 232
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	8e 77       	andi	r24, 0x7E	; 126
    1fa6:	80 83       	st	Z, r24
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_ClearIN();
}
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	1f 91       	pop	r17
    1fb2:	0f 91       	pop	r16
    1fb4:	08 95       	ret

00001fb6 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1fb6:	cf 93       	push	r28
    1fb8:	df 93       	push	r29
    1fba:	fc 01       	movw	r30, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fbc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    1fc0:	93 ff       	sbrs	r25, 3
    1fc2:	34 c0       	rjmp	.+104    	; 0x202c <MS_Device_ProcessControlRequest+0x76>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1fc4:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <USB_ControlRequest+0x4>
    1fc8:	90 91 70 09 	lds	r25, 0x0970	; 0x800970 <USB_ControlRequest+0x5>
    1fcc:	20 81       	ld	r18, Z
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	82 17       	cp	r24, r18
    1fd2:	93 07       	cpc	r25, r19
    1fd4:	59 f5       	brne	.+86     	; 0x202c <MS_Device_ProcessControlRequest+0x76>
    1fd6:	ef 01       	movw	r28, r30
	  return;

	switch (USB_ControlRequest.bRequest)
    1fd8:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <USB_ControlRequest+0x1>
    1fdc:	8e 3f       	cpi	r24, 0xFE	; 254
    1fde:	79 f0       	breq	.+30     	; 0x1ffe <MS_Device_ProcessControlRequest+0x48>
    1fe0:	8f 3f       	cpi	r24, 0xFF	; 255
    1fe2:	21 f5       	brne	.+72     	; 0x202c <MS_Device_ProcessControlRequest+0x76>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1fe4:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest>
    1fe8:	81 32       	cpi	r24, 0x21	; 33
    1fea:	01 f5       	brne	.+64     	; 0x202c <MS_Device_ProcessControlRequest+0x76>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fec:	e8 ee       	ldi	r30, 0xE8	; 232
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	87 7f       	andi	r24, 0xF7	; 247
    1ff4:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1ff6:	fc d2       	rcall	.+1528   	; 0x25f0 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	88 af       	std	Y+56, r24	; 0x38
    1ffc:	17 c0       	rjmp	.+46     	; 0x202c <MS_Device_ProcessControlRequest+0x76>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1ffe:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest>
    2002:	81 3a       	cpi	r24, 0xA1	; 161
    2004:	99 f4       	brne	.+38     	; 0x202c <MS_Device_ProcessControlRequest+0x76>
    2006:	e8 ee       	ldi	r30, 0xE8	; 232
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	87 7f       	andi	r24, 0xF7	; 247
    200e:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2010:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2014:	80 ff       	sbrs	r24, 0
    2016:	fc cf       	rjmp	.-8      	; 0x2010 <MS_Device_ProcessControlRequest+0x5a>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    2018:	8b 85       	ldd	r24, Y+11	; 0x0b
    201a:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    201c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2020:	e8 ee       	ldi	r30, 0xE8	; 232
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2028:	80 83       	st	Z, r24
    202a:	e2 d2       	rcall	.+1476   	; 0x25f0 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    202c:	df 91       	pop	r29
    202e:	cf 91       	pop	r28
    2030:	08 95       	ret

00002032 <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
    2036:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    2038:	fc 01       	movw	r30, r24
    203a:	3c 96       	adiw	r30, 0x0c	; 12
    203c:	8d e2       	ldi	r24, 0x2D	; 45
    203e:	df 01       	movw	r26, r30
    2040:	1d 92       	st	X+, r1
    2042:	8a 95       	dec	r24
    2044:	e9 f7       	brne	.-6      	; 0x2040 <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    2046:	82 e0       	ldi	r24, 0x02	; 2
    2048:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    204a:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    204c:	61 e0       	ldi	r22, 0x01	; 1
    204e:	ce 01       	movw	r24, r28
    2050:	01 96       	adiw	r24, 0x01	; 1
    2052:	88 d2       	rcall	.+1296   	; 0x2564 <Endpoint_ConfigureEndpointTable>
    2054:	88 23       	and	r24, r24
    2056:	21 f0       	breq	.+8      	; 0x2060 <MS_Device_ConfigureEndpoints+0x2e>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    2058:	61 e0       	ldi	r22, 0x01	; 1
    205a:	ce 01       	movw	r24, r28
    205c:	06 96       	adiw	r24, 0x06	; 6
    205e:	82 d2       	rcall	.+1284   	; 0x2564 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	08 95       	ret

00002066 <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    2066:	cf 93       	push	r28
    2068:	df 93       	push	r29
    206a:	ec 01       	movw	r28, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    206c:	90 91 6a 09 	lds	r25, 0x096A	; 0x80096a <USB_DeviceState>
    2070:	94 30       	cpi	r25, 0x04	; 4
    2072:	09 f0       	breq	.+2      	; 0x2076 <MS_Device_USBTask+0x10>
    2074:	72 c0       	rjmp	.+228    	; 0x215a <__stack+0x5b>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    2076:	8e 81       	ldd	r24, Y+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2078:	8f 70       	andi	r24, 0x0F	; 15
    207a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    207e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsOUTReceived())
    2082:	82 ff       	sbrs	r24, 2
    2084:	39 c0       	rjmp	.+114    	; 0x20f8 <MS_Device_USBTask+0x92>
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
    2086:	ce 01       	movw	r24, r28
    2088:	e7 de       	rcall	.-562    	; 0x1e58 <MS_Device_ReadInCommandBlock>
    208a:	88 23       	and	r24, r24
    208c:	a9 f1       	breq	.+106    	; 0x20f8 <MS_Device_USBTask+0x92>
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    208e:	88 8d       	ldd	r24, Y+24	; 0x18
    2090:	88 23       	and	r24, r24
    2092:	24 f4       	brge	.+8      	; 0x209c <MS_Device_USBTask+0x36>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    2094:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2096:	8f 70       	andi	r24, 0x0F	; 15
    2098:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    209c:	ce 01       	movw	r24, r28
    209e:	0e 94 72 06 	call	0xce4	; 0xce4 <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    20a2:	88 23       	and	r24, r24
    20a4:	11 f0       	breq	.+4      	; 0x20aa <MS_Device_USBTask+0x44>
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	01 c0       	rjmp	.+2      	; 0x20ac <MS_Device_USBTask+0x46>
    20aa:	91 e0       	ldi	r25, 0x01	; 1
    20ac:	9f ab       	std	Y+55, r25	; 0x37
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    20ae:	45 e5       	ldi	r20, 0x55	; 85
    20b0:	53 e5       	ldi	r21, 0x53	; 83
    20b2:	62 e4       	ldi	r22, 0x42	; 66
    20b4:	73 e5       	ldi	r23, 0x53	; 83
    20b6:	4b a7       	std	Y+43, r20	; 0x2b
    20b8:	5c a7       	std	Y+44, r21	; 0x2c
    20ba:	6d a7       	std	Y+45, r22	; 0x2d
    20bc:	7e a7       	std	Y+46, r23	; 0x2e
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    20be:	48 89       	ldd	r20, Y+16	; 0x10
    20c0:	59 89       	ldd	r21, Y+17	; 0x11
    20c2:	6a 89       	ldd	r22, Y+18	; 0x12
    20c4:	7b 89       	ldd	r23, Y+19	; 0x13
    20c6:	4f a7       	std	Y+47, r20	; 0x2f
    20c8:	58 ab       	std	Y+48, r21	; 0x30
    20ca:	69 ab       	std	Y+49, r22	; 0x31
    20cc:	7a ab       	std	Y+50, r23	; 0x32
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    20ce:	4c 89       	ldd	r20, Y+20	; 0x14
    20d0:	5d 89       	ldd	r21, Y+21	; 0x15
    20d2:	6e 89       	ldd	r22, Y+22	; 0x16
    20d4:	7f 89       	ldd	r23, Y+23	; 0x17
    20d6:	4b ab       	std	Y+51, r20	; 0x33
    20d8:	5c ab       	std	Y+52, r21	; 0x34
    20da:	6d ab       	std	Y+53, r22	; 0x35
    20dc:	7e ab       	std	Y+54, r23	; 0x36

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    20de:	81 11       	cpse	r24, r1
    20e0:	09 c0       	rjmp	.+18     	; 0x20f4 <MS_Device_USBTask+0x8e>
    20e2:	45 2b       	or	r20, r21
    20e4:	46 2b       	or	r20, r22
    20e6:	47 2b       	or	r20, r23
    20e8:	29 f0       	breq	.+10     	; 0x20f4 <MS_Device_USBTask+0x8e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    20ea:	eb ee       	ldi	r30, 0xEB	; 235
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	80 62       	ori	r24, 0x20	; 32
    20f2:	80 83       	st	Z, r24
			  Endpoint_StallTransaction();

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
    20f4:	ce 01       	movw	r24, r28
    20f6:	21 df       	rcall	.-446    	; 0x1f3a <MS_Device_ReturnCommandStatus>
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    20f8:	88 ad       	ldd	r24, Y+56	; 0x38
    20fa:	88 23       	and	r24, r24
    20fc:	71 f1       	breq	.+92     	; 0x215a <__stack+0x5b>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    20fe:	2e 81       	ldd	r18, Y+6	; 0x06
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2100:	2f 70       	andi	r18, 0x0F	; 15
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	ac 01       	movw	r20, r24
    2108:	02 c0       	rjmp	.+4      	; 0x210e <__stack+0xf>
    210a:	44 0f       	add	r20, r20
    210c:	55 1f       	adc	r21, r21
    210e:	2a 95       	dec	r18
    2110:	e2 f7       	brpl	.-8      	; 0x210a <__stack+0xb>
    2112:	ea ee       	ldi	r30, 0xEA	; 234
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	40 83       	st	Z, r20
				UERST = 0;
    2118:	10 82       	st	Z, r1
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    211a:	29 81       	ldd	r18, Y+1	; 0x01
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    211c:	2f 70       	andi	r18, 0x0F	; 15
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <__stack+0x25>
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	2a 95       	dec	r18
    2126:	e2 f7       	brpl	.-8      	; 0x2120 <__stack+0x21>
    2128:	80 83       	st	Z, r24
				UERST = 0;
    212a:	10 82       	st	Z, r1

		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    212c:	8e 81       	ldd	r24, Y+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    212e:	8f 70       	andi	r24, 0x0F	; 15
    2130:	a9 ee       	ldi	r26, 0xE9	; 233
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	8c 93       	st	X, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2136:	eb ee       	ldi	r30, 0xEB	; 235
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	80 61       	ori	r24, 0x10	; 16
    213e:	80 83       	st	Z, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2140:	80 81       	ld	r24, Z
    2142:	88 60       	ori	r24, 0x08	; 8
    2144:	80 83       	st	Z, r24
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    2146:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2148:	8f 70       	andi	r24, 0x0F	; 15
    214a:	8c 93       	st	X, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    214c:	80 81       	ld	r24, Z
    214e:	80 61       	ori	r24, 0x10	; 16
    2150:	80 83       	st	Z, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2152:	80 81       	ld	r24, Z
    2154:	88 60       	ori	r24, 0x08	; 8
    2156:	80 83       	st	Z, r24
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    2158:	18 ae       	std	Y+56, r1	; 0x38
	}
}
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	08 95       	ret

00002160 <Endpoint_Null_Stream>:
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2160:	ef 92       	push	r14
    2162:	ff 92       	push	r15
    2164:	0f 93       	push	r16
    2166:	1f 93       	push	r17
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	ec 01       	movw	r28, r24
    216e:	7b 01       	movw	r14, r22
    2170:	60 d2       	rcall	.+1216   	; 0x2632 <Endpoint_WaitUntilReady>
    2172:	81 11       	cpse	r24, r1
    2174:	2c c0       	rjmp	.+88     	; 0x21ce <Endpoint_Null_Stream+0x6e>
    2176:	e1 14       	cp	r14, r1
    2178:	f1 04       	cpc	r15, r1
    217a:	29 f0       	breq	.+10     	; 0x2186 <Endpoint_Null_Stream+0x26>
    217c:	f7 01       	movw	r30, r14
    217e:	80 81       	ld	r24, Z
    2180:	91 81       	ldd	r25, Z+1	; 0x01
    2182:	c8 1b       	sub	r28, r24
    2184:	d9 0b       	sbc	r29, r25
    2186:	00 e0       	ldi	r16, 0x00	; 0
    2188:	10 e0       	ldi	r17, 0x00	; 0
    218a:	1e c0       	rjmp	.+60     	; 0x21c8 <Endpoint_Null_Stream+0x68>
    218c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2190:	85 fd       	sbrc	r24, 5
    2192:	15 c0       	rjmp	.+42     	; 0x21be <Endpoint_Null_Stream+0x5e>
    2194:	e8 ee       	ldi	r30, 0xE8	; 232
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	8e 77       	andi	r24, 0x7E	; 126
    219c:	80 83       	st	Z, r24
    219e:	e1 14       	cp	r14, r1
    21a0:	f1 04       	cpc	r15, r1
    21a2:	49 f0       	breq	.+18     	; 0x21b6 <Endpoint_Null_Stream+0x56>
    21a4:	f7 01       	movw	r30, r14
    21a6:	80 81       	ld	r24, Z
    21a8:	91 81       	ldd	r25, Z+1	; 0x01
    21aa:	08 0f       	add	r16, r24
    21ac:	19 1f       	adc	r17, r25
    21ae:	11 83       	std	Z+1, r17	; 0x01
    21b0:	00 83       	st	Z, r16
    21b2:	85 e0       	ldi	r24, 0x05	; 5
    21b4:	0c c0       	rjmp	.+24     	; 0x21ce <Endpoint_Null_Stream+0x6e>
    21b6:	3d d2       	rcall	.+1146   	; 0x2632 <Endpoint_WaitUntilReady>
    21b8:	88 23       	and	r24, r24
    21ba:	31 f0       	breq	.+12     	; 0x21c8 <Endpoint_Null_Stream+0x68>
    21bc:	08 c0       	rjmp	.+16     	; 0x21ce <Endpoint_Null_Stream+0x6e>
    21be:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    21c2:	21 97       	sbiw	r28, 0x01	; 1
    21c4:	0f 5f       	subi	r16, 0xFF	; 255
    21c6:	1f 4f       	sbci	r17, 0xFF	; 255
    21c8:	20 97       	sbiw	r28, 0x00	; 0
    21ca:	01 f7       	brne	.-64     	; 0x218c <Endpoint_Null_Stream+0x2c>
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	ff 90       	pop	r15
    21d8:	ef 90       	pop	r14
    21da:	08 95       	ret

000021dc <Endpoint_Write_Stream_LE>:
    21dc:	cf 92       	push	r12
    21de:	df 92       	push	r13
    21e0:	ef 92       	push	r14
    21e2:	ff 92       	push	r15
    21e4:	0f 93       	push	r16
    21e6:	1f 93       	push	r17
    21e8:	cf 93       	push	r28
    21ea:	df 93       	push	r29
    21ec:	8c 01       	movw	r16, r24
    21ee:	eb 01       	movw	r28, r22
    21f0:	6a 01       	movw	r12, r20
    21f2:	1f d2       	rcall	.+1086   	; 0x2632 <Endpoint_WaitUntilReady>
    21f4:	81 11       	cpse	r24, r1
    21f6:	32 c0       	rjmp	.+100    	; 0x225c <Endpoint_Write_Stream_LE+0x80>
    21f8:	c1 14       	cp	r12, r1
    21fa:	d1 04       	cpc	r13, r1
    21fc:	39 f0       	breq	.+14     	; 0x220c <Endpoint_Write_Stream_LE+0x30>
    21fe:	f6 01       	movw	r30, r12
    2200:	80 81       	ld	r24, Z
    2202:	91 81       	ldd	r25, Z+1	; 0x01
    2204:	c8 1b       	sub	r28, r24
    2206:	d9 0b       	sbc	r29, r25
    2208:	08 0f       	add	r16, r24
    220a:	19 1f       	adc	r17, r25
    220c:	e1 2c       	mov	r14, r1
    220e:	f1 2c       	mov	r15, r1
    2210:	22 c0       	rjmp	.+68     	; 0x2256 <Endpoint_Write_Stream_LE+0x7a>
    2212:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2216:	85 fd       	sbrc	r24, 5
    2218:	15 c0       	rjmp	.+42     	; 0x2244 <Endpoint_Write_Stream_LE+0x68>
    221a:	e8 ee       	ldi	r30, 0xE8	; 232
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	90 81       	ld	r25, Z
    2220:	9e 77       	andi	r25, 0x7E	; 126
    2222:	90 83       	st	Z, r25
    2224:	c1 14       	cp	r12, r1
    2226:	d1 04       	cpc	r13, r1
    2228:	49 f0       	breq	.+18     	; 0x223c <Endpoint_Write_Stream_LE+0x60>
    222a:	f6 01       	movw	r30, r12
    222c:	80 81       	ld	r24, Z
    222e:	91 81       	ldd	r25, Z+1	; 0x01
    2230:	e8 0e       	add	r14, r24
    2232:	f9 1e       	adc	r15, r25
    2234:	f1 82       	std	Z+1, r15	; 0x01
    2236:	e0 82       	st	Z, r14
    2238:	85 e0       	ldi	r24, 0x05	; 5
    223a:	10 c0       	rjmp	.+32     	; 0x225c <Endpoint_Write_Stream_LE+0x80>
    223c:	fa d1       	rcall	.+1012   	; 0x2632 <Endpoint_WaitUntilReady>
    223e:	88 23       	and	r24, r24
    2240:	51 f0       	breq	.+20     	; 0x2256 <Endpoint_Write_Stream_LE+0x7a>
    2242:	0c c0       	rjmp	.+24     	; 0x225c <Endpoint_Write_Stream_LE+0x80>
    2244:	f8 01       	movw	r30, r16
    2246:	81 91       	ld	r24, Z+
    2248:	8f 01       	movw	r16, r30
    224a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    224e:	21 97       	sbiw	r28, 0x01	; 1
    2250:	ff ef       	ldi	r31, 0xFF	; 255
    2252:	ef 1a       	sub	r14, r31
    2254:	ff 0a       	sbc	r15, r31
    2256:	20 97       	sbiw	r28, 0x00	; 0
    2258:	e1 f6       	brne	.-72     	; 0x2212 <Endpoint_Write_Stream_LE+0x36>
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	1f 91       	pop	r17
    2262:	0f 91       	pop	r16
    2264:	ff 90       	pop	r15
    2266:	ef 90       	pop	r14
    2268:	df 90       	pop	r13
    226a:	cf 90       	pop	r12
    226c:	08 95       	ret

0000226e <Endpoint_Write_Stream_BE>:
    226e:	cf 92       	push	r12
    2270:	df 92       	push	r13
    2272:	ef 92       	push	r14
    2274:	ff 92       	push	r15
    2276:	0f 93       	push	r16
    2278:	1f 93       	push	r17
    227a:	cf 93       	push	r28
    227c:	df 93       	push	r29
    227e:	eb 01       	movw	r28, r22
    2280:	7a 01       	movw	r14, r20
    2282:	6b 01       	movw	r12, r22
    2284:	21 e0       	ldi	r18, 0x01	; 1
    2286:	c2 1a       	sub	r12, r18
    2288:	d1 08       	sbc	r13, r1
    228a:	c8 0e       	add	r12, r24
    228c:	d9 1e       	adc	r13, r25
    228e:	d1 d1       	rcall	.+930    	; 0x2632 <Endpoint_WaitUntilReady>
    2290:	81 11       	cpse	r24, r1
    2292:	33 c0       	rjmp	.+102    	; 0x22fa <Endpoint_Write_Stream_BE+0x8c>
    2294:	e1 14       	cp	r14, r1
    2296:	f1 04       	cpc	r15, r1
    2298:	39 f0       	breq	.+14     	; 0x22a8 <Endpoint_Write_Stream_BE+0x3a>
    229a:	f7 01       	movw	r30, r14
    229c:	80 81       	ld	r24, Z
    229e:	91 81       	ldd	r25, Z+1	; 0x01
    22a0:	c8 1b       	sub	r28, r24
    22a2:	d9 0b       	sbc	r29, r25
    22a4:	c8 1a       	sub	r12, r24
    22a6:	d9 0a       	sbc	r13, r25
    22a8:	00 e0       	ldi	r16, 0x00	; 0
    22aa:	10 e0       	ldi	r17, 0x00	; 0
    22ac:	23 c0       	rjmp	.+70     	; 0x22f4 <Endpoint_Write_Stream_BE+0x86>
    22ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    22b2:	85 fd       	sbrc	r24, 5
    22b4:	15 c0       	rjmp	.+42     	; 0x22e0 <Endpoint_Write_Stream_BE+0x72>
    22b6:	e8 ee       	ldi	r30, 0xE8	; 232
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	8e 77       	andi	r24, 0x7E	; 126
    22be:	80 83       	st	Z, r24
    22c0:	e1 14       	cp	r14, r1
    22c2:	f1 04       	cpc	r15, r1
    22c4:	49 f0       	breq	.+18     	; 0x22d8 <Endpoint_Write_Stream_BE+0x6a>
    22c6:	f7 01       	movw	r30, r14
    22c8:	80 81       	ld	r24, Z
    22ca:	91 81       	ldd	r25, Z+1	; 0x01
    22cc:	08 0f       	add	r16, r24
    22ce:	19 1f       	adc	r17, r25
    22d0:	11 83       	std	Z+1, r17	; 0x01
    22d2:	00 83       	st	Z, r16
    22d4:	85 e0       	ldi	r24, 0x05	; 5
    22d6:	11 c0       	rjmp	.+34     	; 0x22fa <Endpoint_Write_Stream_BE+0x8c>
    22d8:	ac d1       	rcall	.+856    	; 0x2632 <Endpoint_WaitUntilReady>
    22da:	88 23       	and	r24, r24
    22dc:	59 f0       	breq	.+22     	; 0x22f4 <Endpoint_Write_Stream_BE+0x86>
    22de:	0d c0       	rjmp	.+26     	; 0x22fa <Endpoint_Write_Stream_BE+0x8c>
    22e0:	f6 01       	movw	r30, r12
    22e2:	80 81       	ld	r24, Z
    22e4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    22e8:	f1 e0       	ldi	r31, 0x01	; 1
    22ea:	cf 1a       	sub	r12, r31
    22ec:	d1 08       	sbc	r13, r1
    22ee:	21 97       	sbiw	r28, 0x01	; 1
    22f0:	0f 5f       	subi	r16, 0xFF	; 255
    22f2:	1f 4f       	sbci	r17, 0xFF	; 255
    22f4:	20 97       	sbiw	r28, 0x00	; 0
    22f6:	d9 f6       	brne	.-74     	; 0x22ae <Endpoint_Write_Stream_BE+0x40>
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	1f 91       	pop	r17
    2300:	0f 91       	pop	r16
    2302:	ff 90       	pop	r15
    2304:	ef 90       	pop	r14
    2306:	df 90       	pop	r13
    2308:	cf 90       	pop	r12
    230a:	08 95       	ret

0000230c <Endpoint_Read_Stream_LE>:
    230c:	cf 92       	push	r12
    230e:	df 92       	push	r13
    2310:	ef 92       	push	r14
    2312:	ff 92       	push	r15
    2314:	0f 93       	push	r16
    2316:	1f 93       	push	r17
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	8c 01       	movw	r16, r24
    231e:	eb 01       	movw	r28, r22
    2320:	6a 01       	movw	r12, r20
    2322:	87 d1       	rcall	.+782    	; 0x2632 <Endpoint_WaitUntilReady>
    2324:	81 11       	cpse	r24, r1
    2326:	32 c0       	rjmp	.+100    	; 0x238c <Endpoint_Read_Stream_LE+0x80>
    2328:	c1 14       	cp	r12, r1
    232a:	d1 04       	cpc	r13, r1
    232c:	39 f0       	breq	.+14     	; 0x233c <Endpoint_Read_Stream_LE+0x30>
    232e:	f6 01       	movw	r30, r12
    2330:	80 81       	ld	r24, Z
    2332:	91 81       	ldd	r25, Z+1	; 0x01
    2334:	c8 1b       	sub	r28, r24
    2336:	d9 0b       	sbc	r29, r25
    2338:	08 0f       	add	r16, r24
    233a:	19 1f       	adc	r17, r25
    233c:	e1 2c       	mov	r14, r1
    233e:	f1 2c       	mov	r15, r1
    2340:	22 c0       	rjmp	.+68     	; 0x2386 <Endpoint_Read_Stream_LE+0x7a>
    2342:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2346:	85 fd       	sbrc	r24, 5
    2348:	15 c0       	rjmp	.+42     	; 0x2374 <Endpoint_Read_Stream_LE+0x68>
    234a:	e8 ee       	ldi	r30, 0xE8	; 232
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	90 81       	ld	r25, Z
    2350:	9b 77       	andi	r25, 0x7B	; 123
    2352:	90 83       	st	Z, r25
    2354:	c1 14       	cp	r12, r1
    2356:	d1 04       	cpc	r13, r1
    2358:	49 f0       	breq	.+18     	; 0x236c <Endpoint_Read_Stream_LE+0x60>
    235a:	f6 01       	movw	r30, r12
    235c:	80 81       	ld	r24, Z
    235e:	91 81       	ldd	r25, Z+1	; 0x01
    2360:	e8 0e       	add	r14, r24
    2362:	f9 1e       	adc	r15, r25
    2364:	f1 82       	std	Z+1, r15	; 0x01
    2366:	e0 82       	st	Z, r14
    2368:	85 e0       	ldi	r24, 0x05	; 5
    236a:	10 c0       	rjmp	.+32     	; 0x238c <Endpoint_Read_Stream_LE+0x80>
    236c:	62 d1       	rcall	.+708    	; 0x2632 <Endpoint_WaitUntilReady>
    236e:	88 23       	and	r24, r24
    2370:	51 f0       	breq	.+20     	; 0x2386 <Endpoint_Read_Stream_LE+0x7a>
    2372:	0c c0       	rjmp	.+24     	; 0x238c <Endpoint_Read_Stream_LE+0x80>
    2374:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2378:	f8 01       	movw	r30, r16
    237a:	81 93       	st	Z+, r24
    237c:	8f 01       	movw	r16, r30
    237e:	21 97       	sbiw	r28, 0x01	; 1
    2380:	ff ef       	ldi	r31, 0xFF	; 255
    2382:	ef 1a       	sub	r14, r31
    2384:	ff 0a       	sbc	r15, r31
    2386:	20 97       	sbiw	r28, 0x00	; 0
    2388:	e1 f6       	brne	.-72     	; 0x2342 <Endpoint_Read_Stream_LE+0x36>
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	1f 91       	pop	r17
    2392:	0f 91       	pop	r16
    2394:	ff 90       	pop	r15
    2396:	ef 90       	pop	r14
    2398:	df 90       	pop	r13
    239a:	cf 90       	pop	r12
    239c:	08 95       	ret

0000239e <Endpoint_Write_Control_Stream_LE>:
    239e:	20 91 71 09 	lds	r18, 0x0971	; 0x800971 <USB_ControlRequest+0x6>
    23a2:	30 91 72 09 	lds	r19, 0x0972	; 0x800972 <USB_ControlRequest+0x7>
    23a6:	26 17       	cp	r18, r22
    23a8:	37 07       	cpc	r19, r23
    23aa:	58 f0       	brcs	.+22     	; 0x23c2 <Endpoint_Write_Control_Stream_LE+0x24>
    23ac:	61 15       	cp	r22, r1
    23ae:	71 05       	cpc	r23, r1
    23b0:	39 f4       	brne	.+14     	; 0x23c0 <Endpoint_Write_Control_Stream_LE+0x22>
    23b2:	e8 ee       	ldi	r30, 0xE8	; 232
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	20 81       	ld	r18, Z
    23b8:	2e 77       	andi	r18, 0x7E	; 126
    23ba:	20 83       	st	Z, r18
    23bc:	9b 01       	movw	r18, r22
    23be:	01 c0       	rjmp	.+2      	; 0x23c2 <Endpoint_Write_Control_Stream_LE+0x24>
    23c0:	9b 01       	movw	r18, r22
    23c2:	e8 2f       	mov	r30, r24
    23c4:	f9 2f       	mov	r31, r25
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	30 c0       	rjmp	.+96     	; 0x242a <Endpoint_Write_Control_Stream_LE+0x8c>
    23ca:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_DeviceState>
    23ce:	88 23       	and	r24, r24
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <Endpoint_Write_Control_Stream_LE+0x36>
    23d2:	41 c0       	rjmp	.+130    	; 0x2456 <Endpoint_Write_Control_Stream_LE+0xb8>
    23d4:	85 30       	cpi	r24, 0x05	; 5
    23d6:	09 f4       	brne	.+2      	; 0x23da <Endpoint_Write_Control_Stream_LE+0x3c>
    23d8:	40 c0       	rjmp	.+128    	; 0x245a <Endpoint_Write_Control_Stream_LE+0xbc>
    23da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    23de:	83 fd       	sbrc	r24, 3
    23e0:	3e c0       	rjmp	.+124    	; 0x245e <Endpoint_Write_Control_Stream_LE+0xc0>
    23e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    23e6:	82 fd       	sbrc	r24, 2
    23e8:	30 c0       	rjmp	.+96     	; 0x244a <Endpoint_Write_Control_Stream_LE+0xac>
    23ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    23ee:	80 ff       	sbrs	r24, 0
    23f0:	1c c0       	rjmp	.+56     	; 0x242a <Endpoint_Write_Control_Stream_LE+0x8c>
    23f2:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    23f6:	50 91 f3 00 	lds	r21, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    23fa:	07 c0       	rjmp	.+14     	; 0x240a <Endpoint_Write_Control_Stream_LE+0x6c>
    23fc:	81 91       	ld	r24, Z+
    23fe:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    2402:	21 50       	subi	r18, 0x01	; 1
    2404:	31 09       	sbc	r19, r1
    2406:	4f 5f       	subi	r20, 0xFF	; 255
    2408:	5f 4f       	sbci	r21, 0xFF	; 255
    240a:	21 15       	cp	r18, r1
    240c:	31 05       	cpc	r19, r1
    240e:	19 f0       	breq	.+6      	; 0x2416 <Endpoint_Write_Control_Stream_LE+0x78>
    2410:	48 30       	cpi	r20, 0x08	; 8
    2412:	51 05       	cpc	r21, r1
    2414:	98 f3       	brcs	.-26     	; 0x23fc <Endpoint_Write_Control_Stream_LE+0x5e>
    2416:	91 e0       	ldi	r25, 0x01	; 1
    2418:	48 30       	cpi	r20, 0x08	; 8
    241a:	51 05       	cpc	r21, r1
    241c:	09 f0       	breq	.+2      	; 0x2420 <Endpoint_Write_Control_Stream_LE+0x82>
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	a8 ee       	ldi	r26, 0xE8	; 232
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	8c 91       	ld	r24, X
    2426:	8e 77       	andi	r24, 0x7E	; 126
    2428:	8c 93       	st	X, r24
    242a:	21 15       	cp	r18, r1
    242c:	31 05       	cpc	r19, r1
    242e:	69 f6       	brne	.-102    	; 0x23ca <Endpoint_Write_Control_Stream_LE+0x2c>
    2430:	91 11       	cpse	r25, r1
    2432:	cb cf       	rjmp	.-106    	; 0x23ca <Endpoint_Write_Control_Stream_LE+0x2c>
    2434:	0a c0       	rjmp	.+20     	; 0x244a <Endpoint_Write_Control_Stream_LE+0xac>
    2436:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_DeviceState>
    243a:	88 23       	and	r24, r24
    243c:	91 f0       	breq	.+36     	; 0x2462 <Endpoint_Write_Control_Stream_LE+0xc4>
    243e:	85 30       	cpi	r24, 0x05	; 5
    2440:	91 f0       	breq	.+36     	; 0x2466 <Endpoint_Write_Control_Stream_LE+0xc8>
    2442:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    2446:	83 fd       	sbrc	r24, 3
    2448:	10 c0       	rjmp	.+32     	; 0x246a <Endpoint_Write_Control_Stream_LE+0xcc>
    244a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    244e:	82 ff       	sbrs	r24, 2
    2450:	f2 cf       	rjmp	.-28     	; 0x2436 <Endpoint_Write_Control_Stream_LE+0x98>
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	08 95       	ret
    2456:	82 e0       	ldi	r24, 0x02	; 2
    2458:	08 95       	ret
    245a:	83 e0       	ldi	r24, 0x03	; 3
    245c:	08 95       	ret
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	08 95       	ret
    2462:	82 e0       	ldi	r24, 0x02	; 2
    2464:	08 95       	ret
    2466:	83 e0       	ldi	r24, 0x03	; 3
    2468:	08 95       	ret
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	08 95       	ret

0000246e <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    246e:	61 15       	cp	r22, r1
    2470:	71 05       	cpc	r23, r1
    2472:	29 f4       	brne	.+10     	; 0x247e <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2474:	e8 ee       	ldi	r30, 0xE8	; 232
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	20 81       	ld	r18, Z
    247a:	2b 77       	andi	r18, 0x7B	; 123
    247c:	20 83       	st	Z, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    247e:	e8 2f       	mov	r30, r24
    2480:	f9 2f       	mov	r31, r25
    2482:	22 c0       	rjmp	.+68     	; 0x24c8 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2484:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2488:	88 23       	and	r24, r24
    248a:	71 f1       	breq	.+92     	; 0x24e8 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    248c:	85 30       	cpi	r24, 0x05	; 5
    248e:	71 f1       	breq	.+92     	; 0x24ec <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2490:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    2494:	83 fd       	sbrc	r24, 3
    2496:	2c c0       	rjmp	.+88     	; 0x24f0 <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2498:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    249c:	82 ff       	sbrs	r24, 2
    249e:	14 c0       	rjmp	.+40     	; 0x24c8 <Endpoint_Read_Control_Stream_LE+0x5a>
    24a0:	05 c0       	rjmp	.+10     	; 0x24ac <Endpoint_Read_Control_Stream_LE+0x3e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    24a2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    24a6:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    24a8:	61 50       	subi	r22, 0x01	; 1
    24aa:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    24ac:	61 15       	cp	r22, r1
    24ae:	71 05       	cpc	r23, r1
    24b0:	31 f0       	breq	.+12     	; 0x24be <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    24b2:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    24b6:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    24ba:	89 2b       	or	r24, r25
    24bc:	91 f7       	brne	.-28     	; 0x24a2 <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    24be:	a8 ee       	ldi	r26, 0xE8	; 232
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	8c 91       	ld	r24, X
    24c4:	8b 77       	andi	r24, 0x7B	; 123
    24c6:	8c 93       	st	X, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    24c8:	61 15       	cp	r22, r1
    24ca:	71 05       	cpc	r23, r1
    24cc:	d9 f6       	brne	.-74     	; 0x2484 <Endpoint_Read_Control_Stream_LE+0x16>
    24ce:	06 c0       	rjmp	.+12     	; 0x24dc <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    24d0:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    24d4:	88 23       	and	r24, r24
    24d6:	71 f0       	breq	.+28     	; 0x24f4 <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    24d8:	85 30       	cpi	r24, 0x05	; 5
    24da:	71 f0       	breq	.+28     	; 0x24f8 <Endpoint_Read_Control_Stream_LE+0x8a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    24dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    24e0:	80 ff       	sbrs	r24, 0
    24e2:	f6 cf       	rjmp	.-20     	; 0x24d0 <Endpoint_Read_Control_Stream_LE+0x62>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    24e8:	82 e0       	ldi	r24, 0x02	; 2
    24ea:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    24ec:	83 e0       	ldi	r24, 0x03	; 3
    24ee:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    24f4:	82 e0       	ldi	r24, 0x02	; 2
    24f6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    24f8:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    24fa:	08 95       	ret

000024fc <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    24fc:	98 2f       	mov	r25, r24
    24fe:	29 c0       	rjmp	.+82     	; 0x2552 <Endpoint_ConfigureEndpoint_Prv+0x56>
    2500:	29 2f       	mov	r18, r25
    2502:	2f 70       	andi	r18, 0x0F	; 15
    2504:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2508:	98 17       	cp	r25, r24
    250a:	39 f0       	breq	.+14     	; 0x251a <Endpoint_ConfigureEndpoint_Prv+0x1e>
    250c:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2510:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2514:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2518:	03 c0       	rjmp	.+6      	; 0x2520 <Endpoint_ConfigureEndpoint_Prv+0x24>
    251a:	24 2f       	mov	r18, r20
    251c:	76 2f       	mov	r23, r22
    251e:	50 e0       	ldi	r21, 0x00	; 0
    2520:	21 ff       	sbrs	r18, 1
    2522:	16 c0       	rjmp	.+44     	; 0x2550 <Endpoint_ConfigureEndpoint_Prv+0x54>
    2524:	eb ee       	ldi	r30, 0xEB	; 235
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	30 81       	ld	r19, Z
    252a:	3e 7f       	andi	r19, 0xFE	; 254
    252c:	30 83       	st	Z, r19
    252e:	ad ee       	ldi	r26, 0xED	; 237
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	3c 91       	ld	r19, X
    2534:	3d 7f       	andi	r19, 0xFD	; 253
    2536:	3c 93       	st	X, r19
    2538:	30 81       	ld	r19, Z
    253a:	31 60       	ori	r19, 0x01	; 1
    253c:	30 83       	st	Z, r19
    253e:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2542:	2c 93       	st	X, r18
    2544:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    2548:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    254c:	22 23       	and	r18, r18
    254e:	44 f4       	brge	.+16     	; 0x2560 <Endpoint_ConfigureEndpoint_Prv+0x64>
    2550:	9f 5f       	subi	r25, 0xFF	; 255
    2552:	97 30       	cpi	r25, 0x07	; 7
    2554:	a8 f2       	brcs	.-86     	; 0x2500 <Endpoint_ConfigureEndpoint_Prv+0x4>
    2556:	8f 70       	andi	r24, 0x0F	; 15
    2558:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	08 95       	ret
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	08 95       	ret

00002564 <Endpoint_ConfigureEndpointTable>:
    2564:	0f 93       	push	r16
    2566:	1f 93       	push	r17
    2568:	cf 93       	push	r28
    256a:	df 93       	push	r29
    256c:	ec 01       	movw	r28, r24
    256e:	06 2f       	mov	r16, r22
    2570:	10 e0       	ldi	r17, 0x00	; 0
    2572:	36 c0       	rjmp	.+108    	; 0x25e0 <Endpoint_ConfigureEndpointTable+0x7c>
    2574:	e1 2f       	mov	r30, r17
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	cf 01       	movw	r24, r30
    257a:	88 0f       	add	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	e8 0f       	add	r30, r24
    2584:	f9 1f       	adc	r31, r25
    2586:	ec 0f       	add	r30, r28
    2588:	fd 1f       	adc	r31, r29
    258a:	50 81       	ld	r21, Z
    258c:	55 23       	and	r21, r21
    258e:	39 f1       	breq	.+78     	; 0x25de <Endpoint_ConfigureEndpointTable+0x7a>
    2590:	94 81       	ldd	r25, Z+4	; 0x04
    2592:	a1 81       	ldd	r26, Z+1	; 0x01
    2594:	b2 81       	ldd	r27, Z+2	; 0x02
    2596:	63 81       	ldd	r22, Z+3	; 0x03
    2598:	85 2f       	mov	r24, r21
    259a:	8f 70       	andi	r24, 0x0F	; 15
    259c:	87 30       	cpi	r24, 0x07	; 7
    259e:	e0 f4       	brcc	.+56     	; 0x25d8 <Endpoint_ConfigureEndpointTable+0x74>
    25a0:	92 30       	cpi	r25, 0x02	; 2
    25a2:	10 f0       	brcs	.+4      	; 0x25a8 <Endpoint_ConfigureEndpointTable+0x44>
    25a4:	46 e0       	ldi	r20, 0x06	; 6
    25a6:	01 c0       	rjmp	.+2      	; 0x25aa <Endpoint_ConfigureEndpointTable+0x46>
    25a8:	42 e0       	ldi	r20, 0x02	; 2
    25aa:	28 e0       	ldi	r18, 0x08	; 8
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	03 c0       	rjmp	.+6      	; 0x25b8 <Endpoint_ConfigureEndpointTable+0x54>
    25b2:	9f 5f       	subi	r25, 0xFF	; 255
    25b4:	22 0f       	add	r18, r18
    25b6:	33 1f       	adc	r19, r19
    25b8:	2a 17       	cp	r18, r26
    25ba:	3b 07       	cpc	r19, r27
    25bc:	d0 f3       	brcs	.-12     	; 0x25b2 <Endpoint_ConfigureEndpointTable+0x4e>
    25be:	92 95       	swap	r25
    25c0:	90 7f       	andi	r25, 0xF0	; 240
    25c2:	20 e4       	ldi	r18, 0x40	; 64
    25c4:	62 9f       	mul	r22, r18
    25c6:	b0 01       	movw	r22, r0
    25c8:	11 24       	eor	r1, r1
    25ca:	55 1f       	adc	r21, r21
    25cc:	55 27       	eor	r21, r21
    25ce:	55 1f       	adc	r21, r21
    25d0:	49 2b       	or	r20, r25
    25d2:	65 2b       	or	r22, r21
    25d4:	93 df       	rcall	.-218    	; 0x24fc <Endpoint_ConfigureEndpoint_Prv>
    25d6:	01 c0       	rjmp	.+2      	; 0x25da <Endpoint_ConfigureEndpointTable+0x76>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	88 23       	and	r24, r24
    25dc:	21 f0       	breq	.+8      	; 0x25e6 <Endpoint_ConfigureEndpointTable+0x82>
    25de:	1f 5f       	subi	r17, 0xFF	; 255
    25e0:	10 17       	cp	r17, r16
    25e2:	40 f2       	brcs	.-112    	; 0x2574 <Endpoint_ConfigureEndpointTable+0x10>
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	df 91       	pop	r29
    25e8:	cf 91       	pop	r28
    25ea:	1f 91       	pop	r17
    25ec:	0f 91       	pop	r16
    25ee:	08 95       	ret

000025f0 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    25f0:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest>
    25f4:	88 23       	and	r24, r24
    25f6:	9c f4       	brge	.+38     	; 0x261e <Endpoint_ClearStatusStage+0x2e>
    25f8:	04 c0       	rjmp	.+8      	; 0x2602 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    25fa:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_DeviceState>
    25fe:	88 23       	and	r24, r24
    2600:	b9 f0       	breq	.+46     	; 0x2630 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2602:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2606:	82 ff       	sbrs	r24, 2
    2608:	f8 cf       	rjmp	.-16     	; 0x25fa <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    260a:	e8 ee       	ldi	r30, 0xE8	; 232
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	8b 77       	andi	r24, 0x7B	; 123
    2612:	80 83       	st	Z, r24
    2614:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2616:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_DeviceState>
    261a:	88 23       	and	r24, r24
    261c:	49 f0       	breq	.+18     	; 0x2630 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    261e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    2622:	80 ff       	sbrs	r24, 0
    2624:	f8 cf       	rjmp	.-16     	; 0x2616 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2626:	e8 ee       	ldi	r30, 0xE8	; 232
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	8e 77       	andi	r24, 0x7E	; 126
    262e:	80 83       	st	Z, r24
    2630:	08 95       	ret

00002632 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2632:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    2636:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    263a:	44 e6       	ldi	r20, 0x64	; 100
    263c:	02 c0       	rjmp	.+4      	; 0x2642 <Endpoint_WaitUntilReady+0x10>

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;
    263e:	9c 01       	movw	r18, r24

			if (!(TimeoutMSRem--))
    2640:	45 2f       	mov	r20, r21
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2642:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2646:	98 2f       	mov	r25, r24
    2648:	91 70       	andi	r25, 0x01	; 1
    264a:	80 fd       	sbrc	r24, 0
    264c:	90 e8       	ldi	r25, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    264e:	90 38       	cpi	r25, 0x80	; 128
    2650:	29 f4       	brne	.+10     	; 0x265c <Endpoint_WaitUntilReady+0x2a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2652:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		{
			if (Endpoint_IsINReady())
    2656:	80 ff       	sbrs	r24, 0
    2658:	05 c0       	rjmp	.+10     	; 0x2664 <Endpoint_WaitUntilReady+0x32>
    265a:	1b c0       	rjmp	.+54     	; 0x2692 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    265c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    2660:	82 fd       	sbrc	r24, 2
    2662:	19 c0       	rjmp	.+50     	; 0x2696 <Endpoint_WaitUntilReady+0x64>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2664:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2668:	88 23       	and	r24, r24
    266a:	b9 f0       	breq	.+46     	; 0x269a <Endpoint_WaitUntilReady+0x68>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    266c:	85 30       	cpi	r24, 0x05	; 5
    266e:	b9 f0       	breq	.+46     	; 0x269e <Endpoint_WaitUntilReady+0x6c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2670:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    2674:	85 fd       	sbrc	r24, 5
    2676:	15 c0       	rjmp	.+42     	; 0x26a2 <Endpoint_WaitUntilReady+0x70>
    2678:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    267c:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    2680:	28 17       	cp	r18, r24
    2682:	39 07       	cpc	r19, r25
    2684:	f1 f2       	breq	.-68     	; 0x2642 <Endpoint_WaitUntilReady+0x10>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    2686:	5f ef       	ldi	r21, 0xFF	; 255
    2688:	54 0f       	add	r21, r20
    268a:	41 11       	cpse	r20, r1
    268c:	d8 cf       	rjmp	.-80     	; 0x263e <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
    268e:	84 e0       	ldi	r24, 0x04	; 4
    2690:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	08 95       	ret
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    269a:	82 e0       	ldi	r24, 0x02	; 2
    269c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    269e:	83 e0       	ldi	r24, 0x03	; 3
    26a0:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    26a2:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    26a4:	08 95       	ret

000026a6 <USB_Init_Device>:

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    26a6:	cf 93       	push	r28
    26a8:	df 93       	push	r29
    26aa:	10 92 6a 09 	sts	0x096A, r1	; 0x80096a <USB_DeviceState>
    26ae:	10 92 66 09 	sts	0x0966, r1	; 0x800966 <USB_Device_ConfigurationNumber>
    26b2:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <USB_Device_RemoteWakeupEnabled>
    26b6:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <USB_Device_CurrentlySelfPowered>
    26ba:	c0 ee       	ldi	r28, 0xE0	; 224
    26bc:	d0 e0       	ldi	r29, 0x00	; 0
    26be:	88 81       	ld	r24, Y
    26c0:	8b 7f       	andi	r24, 0xFB	; 251
    26c2:	88 83       	st	Y, r24
    26c4:	e8 ed       	ldi	r30, 0xD8	; 216
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	81 60       	ori	r24, 0x01	; 1
    26cc:	80 83       	st	Z, r24
    26ce:	42 e0       	ldi	r20, 0x02	; 2
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	13 df       	rcall	.-474    	; 0x24fc <Endpoint_ConfigureEndpoint_Prv>
    26d6:	e1 ee       	ldi	r30, 0xE1	; 225
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	8e 7f       	andi	r24, 0xFE	; 254
    26de:	80 83       	st	Z, r24
    26e0:	e2 ee       	ldi	r30, 0xE2	; 226
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	81 60       	ori	r24, 0x01	; 1
    26e8:	80 83       	st	Z, r24
    26ea:	80 81       	ld	r24, Z
    26ec:	88 60       	ori	r24, 0x08	; 8
    26ee:	80 83       	st	Z, r24
    26f0:	88 81       	ld	r24, Y
    26f2:	8e 7f       	andi	r24, 0xFE	; 254
    26f4:	88 83       	st	Y, r24
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	08 95       	ret

000026fc <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    2700:	28 d0       	rcall	.+80     	; 0x2752 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2702:	2f d0       	rcall	.+94     	; 0x2762 <USB_INT_ClearAllInterrupts>
    2704:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    2706:	d0 e0       	ldi	r29, 0x00	; 0
    2708:	88 81       	ld	r24, Y
    270a:	8f 77       	andi	r24, 0x7F	; 127
    270c:	88 83       	st	Y, r24
    270e:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    2710:	80 68       	ori	r24, 0x80	; 128
    2712:	88 83       	st	Y, r24
    2714:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2716:	8f 7d       	andi	r24, 0xDF	; 223
    2718:	88 83       	st	Y, r24
    271a:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	80 68       	ori	r24, 0x80	; 128
    2722:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2724:	19 bc       	out	0x29, r1	; 41
			#else
			USB_PLL_Off();
			#endif
		}

		USB_Init_Device();
    2726:	bf df       	rcall	.-130    	; 0x26a6 <USB_Init_Device>
    2728:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    272a:	80 61       	ori	r24, 0x10	; 16
    272c:	88 83       	st	Y, r24
    272e:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2730:	cf 91       	pop	r28
    2732:	08 95       	ret

00002734 <USB_Init>:
    2734:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	8f 7e       	andi	r24, 0xEF	; 239
    273c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    273e:	e7 ed       	ldi	r30, 0xD7	; 215
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	81 60       	ori	r24, 0x01	; 1
    2746:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <USB_IsInitialized>

	USB_ResetInterface();
    274e:	d6 cf       	rjmp	.-84     	; 0x26fc <USB_ResetInterface>
    2750:	08 95       	ret

00002752 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    2752:	e8 ed       	ldi	r30, 0xD8	; 216
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	8c 7f       	andi	r24, 0xFC	; 252
    275a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    275c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2760:	08 95       	ret

00002762 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    2762:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    2766:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    276a:	08 95       	ret

0000276c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    276c:	1f 92       	push	r1
    276e:	0f 92       	push	r0
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	0f 92       	push	r0
    2774:	11 24       	eor	r1, r1
    2776:	0b b6       	in	r0, 0x3b	; 59
    2778:	0f 92       	push	r0
    277a:	2f 93       	push	r18
    277c:	3f 93       	push	r19
    277e:	4f 93       	push	r20
    2780:	5f 93       	push	r21
    2782:	6f 93       	push	r22
    2784:	7f 93       	push	r23
    2786:	8f 93       	push	r24
    2788:	9f 93       	push	r25
    278a:	af 93       	push	r26
    278c:	bf 93       	push	r27
    278e:	ef 93       	push	r30
    2790:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    2792:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2796:	82 ff       	sbrs	r24, 2
    2798:	0b c0       	rjmp	.+22     	; 0x27b0 <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    279a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    279e:	82 ff       	sbrs	r24, 2
    27a0:	07 c0       	rjmp	.+14     	; 0x27b0 <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    27a2:	e1 ee       	ldi	r30, 0xE1	; 225
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	8b 7f       	andi	r24, 0xFB	; 251
    27aa:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    27ac:	0e 94 9d 06 	call	0xd3a	; 0xd3a <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    27b0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    27b4:	80 ff       	sbrs	r24, 0
    27b6:	1f c0       	rjmp	.+62     	; 0x27f6 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    27b8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    27bc:	80 ff       	sbrs	r24, 0
    27be:	1b c0       	rjmp	.+54     	; 0x27f6 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    27c0:	ea ed       	ldi	r30, 0xDA	; 218
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	8e 7f       	andi	r24, 0xFE	; 254
    27c8:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    27ca:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    27ce:	80 ff       	sbrs	r24, 0
    27d0:	0d c0       	rjmp	.+26     	; 0x27ec <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    27d2:	84 e1       	ldi	r24, 0x14	; 20
    27d4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    27d6:	86 e1       	ldi	r24, 0x16	; 22
    27d8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    27da:	09 b4       	in	r0, 0x29	; 41
    27dc:	00 fe       	sbrs	r0, 0
    27de:	fd cf       	rjmp	.-6      	; 0x27da <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <USB_DeviceState>
			EVENT_USB_Device_Connect();
    27e6:	0e 94 25 06 	call	0xc4a	; 0xc4a <EVENT_USB_Device_Connect>
    27ea:	05 c0       	rjmp	.+10     	; 0x27f6 <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    27ec:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    27ee:	10 92 6a 09 	sts	0x096A, r1	; 0x80096a <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    27f2:	0e 94 32 06 	call	0xc64	; 0xc64 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    27f6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    27fa:	80 ff       	sbrs	r24, 0
    27fc:	16 c0       	rjmp	.+44     	; 0x282a <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    27fe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2802:	80 ff       	sbrs	r24, 0
    2804:	12 c0       	rjmp	.+36     	; 0x282a <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2806:	e2 ee       	ldi	r30, 0xE2	; 226
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	8e 7f       	andi	r24, 0xFE	; 254
    280e:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2810:	80 81       	ld	r24, Z
    2812:	80 61       	ori	r24, 0x10	; 16
    2814:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2816:	e8 ed       	ldi	r30, 0xD8	; 216
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	80 62       	ori	r24, 0x20	; 32
    281e:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2820:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    2822:	85 e0       	ldi	r24, 0x05	; 5
    2824:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    2828:	6d d2       	rcall	.+1242   	; 0x2d04 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    282a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    282e:	84 ff       	sbrs	r24, 4
    2830:	2f c0       	rjmp	.+94     	; 0x2890 <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    2832:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2836:	84 ff       	sbrs	r24, 4
    2838:	2b c0       	rjmp	.+86     	; 0x2890 <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    283a:	84 e1       	ldi	r24, 0x14	; 20
    283c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    283e:	86 e1       	ldi	r24, 0x16	; 22
    2840:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2842:	09 b4       	in	r0, 0x29	; 41
    2844:	00 fe       	sbrs	r0, 0
    2846:	fd cf       	rjmp	.-6      	; 0x2842 <__vector_10+0xd6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2848:	e8 ed       	ldi	r30, 0xD8	; 216
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	8f 7d       	andi	r24, 0xDF	; 223
    2850:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    2852:	e1 ee       	ldi	r30, 0xE1	; 225
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	8f 7e       	andi	r24, 0xEF	; 239
    285a:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    285c:	e2 ee       	ldi	r30, 0xE2	; 226
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	8f 7e       	andi	r24, 0xEF	; 239
    2864:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2866:	80 81       	ld	r24, Z
    2868:	81 60       	ori	r24, 0x01	; 1
    286a:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    286c:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <USB_Device_ConfigurationNumber>
    2870:	88 23       	and	r24, r24
    2872:	21 f0       	breq	.+8      	; 0x287c <__vector_10+0x110>
		  USB_DeviceState = DEVICE_STATE_Configured;
    2874:	84 e0       	ldi	r24, 0x04	; 4
    2876:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <USB_DeviceState>
    287a:	09 c0       	rjmp	.+18     	; 0x288e <__vector_10+0x122>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    287c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2880:	88 23       	and	r24, r24
    2882:	14 f4       	brge	.+4      	; 0x2888 <__vector_10+0x11c>
    2884:	83 e0       	ldi	r24, 0x03	; 3
    2886:	01 c0       	rjmp	.+2      	; 0x288a <__vector_10+0x11e>
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    288e:	3a d2       	rcall	.+1140   	; 0x2d04 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2890:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2894:	83 ff       	sbrs	r24, 3
    2896:	23 c0       	rjmp	.+70     	; 0x28de <__vector_10+0x172>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    2898:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    289c:	83 ff       	sbrs	r24, 3
    289e:	1f c0       	rjmp	.+62     	; 0x28de <__vector_10+0x172>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    28a0:	e1 ee       	ldi	r30, 0xE1	; 225
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	87 7f       	andi	r24, 0xF7	; 247
    28a8:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    28aa:	82 e0       	ldi	r24, 0x02	; 2
    28ac:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    28b0:	10 92 66 09 	sts	0x0966, r1	; 0x800966 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    28b4:	80 81       	ld	r24, Z
    28b6:	8e 7f       	andi	r24, 0xFE	; 254
    28b8:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    28ba:	e2 ee       	ldi	r30, 0xE2	; 226
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	8e 7f       	andi	r24, 0xFE	; 254
    28c2:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    28c4:	80 81       	ld	r24, Z
    28c6:	80 61       	ori	r24, 0x10	; 16
    28c8:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    28ca:	42 e0       	ldi	r20, 0x02	; 2
    28cc:	60 e0       	ldi	r22, 0x00	; 0
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	15 de       	rcall	.-982    	; 0x24fc <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    28d2:	e0 ef       	ldi	r30, 0xF0	; 240
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	88 60       	ori	r24, 0x08	; 8

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    28da:	80 83       	st	Z, r24
    28dc:	13 d2       	rcall	.+1062   	; 0x2d04 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    28de:	ff 91       	pop	r31
    28e0:	ef 91       	pop	r30
    28e2:	bf 91       	pop	r27
    28e4:	af 91       	pop	r26
    28e6:	9f 91       	pop	r25
    28e8:	8f 91       	pop	r24
    28ea:	7f 91       	pop	r23
    28ec:	6f 91       	pop	r22
    28ee:	5f 91       	pop	r21
    28f0:	4f 91       	pop	r20
    28f2:	3f 91       	pop	r19
    28f4:	2f 91       	pop	r18
    28f6:	0f 90       	pop	r0
    28f8:	0b be       	out	0x3b, r0	; 59
    28fa:	0f 90       	pop	r0
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	0f 90       	pop	r0
    2900:	1f 90       	pop	r1
    2902:	18 95       	reti

00002904 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    2904:	1f 92       	push	r1
    2906:	0f 92       	push	r0
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	0f 92       	push	r0
    290c:	11 24       	eor	r1, r1
    290e:	0b b6       	in	r0, 0x3b	; 59
    2910:	0f 92       	push	r0
    2912:	ef 92       	push	r14
    2914:	ff 92       	push	r15
    2916:	1f 93       	push	r17
    2918:	2f 93       	push	r18
    291a:	3f 93       	push	r19
    291c:	4f 93       	push	r20
    291e:	5f 93       	push	r21
    2920:	6f 93       	push	r22
    2922:	7f 93       	push	r23
    2924:	8f 93       	push	r24
    2926:	9f 93       	push	r25
    2928:	af 93       	push	r26
    292a:	bf 93       	push	r27
    292c:	cf 93       	push	r28
    292e:	df 93       	push	r29
    2930:	ef 93       	push	r30
    2932:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2934:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2938:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    293a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    293e:	98 2f       	mov	r25, r24
    2940:	91 70       	andi	r25, 0x01	; 1
    2942:	80 fd       	sbrc	r24, 0
    2944:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2946:	19 2f       	mov	r17, r25
    2948:	1c 2b       	or	r17, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    294a:	0f 2e       	mov	r0, r31
    294c:	f9 ee       	ldi	r31, 0xE9	; 233
    294e:	ef 2e       	mov	r14, r31
    2950:	f1 2c       	mov	r15, r1
    2952:	f0 2d       	mov	r31, r0
    2954:	f7 01       	movw	r30, r14
    2956:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    2958:	c0 ef       	ldi	r28, 0xF0	; 240
    295a:	d0 e0       	ldi	r29, 0x00	; 0
    295c:	88 81       	ld	r24, Y
    295e:	87 7f       	andi	r24, 0xF7	; 247
    2960:	88 83       	st	Y, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    2962:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    2964:	7f d1       	rcall	.+766    	; 0x2c64 <USB_Device_ProcessControlRequest>
    2966:	f7 01       	movw	r30, r14
    2968:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    296a:	88 81       	ld	r24, Y
    296c:	88 60       	ori	r24, 0x08	; 8
    296e:	88 83       	st	Y, r24
    2970:	c1 2f       	mov	r28, r17
    2972:	cf 70       	andi	r28, 0x0F	; 15
    2974:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    2976:	ff 91       	pop	r31
    2978:	ef 91       	pop	r30
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	bf 91       	pop	r27
    2980:	af 91       	pop	r26
    2982:	9f 91       	pop	r25
    2984:	8f 91       	pop	r24
    2986:	7f 91       	pop	r23
    2988:	6f 91       	pop	r22
    298a:	5f 91       	pop	r21
    298c:	4f 91       	pop	r20
    298e:	3f 91       	pop	r19
    2990:	2f 91       	pop	r18
    2992:	1f 91       	pop	r17
    2994:	ff 90       	pop	r15
    2996:	ef 90       	pop	r14
    2998:	0f 90       	pop	r0
    299a:	0b be       	out	0x3b, r0	; 59
    299c:	0f 90       	pop	r0
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	0f 90       	pop	r0
    29a2:	1f 90       	pop	r1
    29a4:	18 95       	reti

000029a6 <USB_Device_GetStatus>:

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;

	switch (USB_ControlRequest.bmRequestType)
    29a6:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest>
    29aa:	80 38       	cpi	r24, 0x80	; 128
    29ac:	19 f0       	breq	.+6      	; 0x29b4 <USB_Device_GetStatus+0xe>
    29ae:	82 38       	cpi	r24, 0x82	; 130
    29b0:	71 f0       	breq	.+28     	; 0x29ce <USB_Device_GetStatus+0x28>
    29b2:	08 95       	ret
	{
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
		{
			#if !defined(NO_DEVICE_SELF_POWER)
			if (USB_Device_CurrentlySelfPowered)
    29b4:	80 91 67 09 	lds	r24, 0x0967	; 0x800967 <USB_Device_CurrentlySelfPowered>
    29b8:	81 11       	cpse	r24, r1
    29ba:	02 c0       	rjmp	.+4      	; 0x29c0 <USB_Device_GetStatus+0x1a>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	01 c0       	rjmp	.+2      	; 0x29c2 <USB_Device_GetStatus+0x1c>
	{
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
		{
			#if !defined(NO_DEVICE_SELF_POWER)
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
    29c0:	91 e0       	ldi	r25, 0x01	; 1
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    29c2:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <USB_Device_RemoteWakeupEnabled>
    29c6:	88 23       	and	r24, r24
    29c8:	81 f0       	breq	.+32     	; 0x29ea <USB_Device_GetStatus+0x44>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    29ca:	92 60       	ori	r25, 0x02	; 2
    29cc:	0e c0       	rjmp	.+28     	; 0x29ea <USB_Device_GetStatus+0x44>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    29ce:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <USB_ControlRequest+0x4>
    29d2:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    29d4:	87 30       	cpi	r24, 0x07	; 7
    29d6:	b0 f4       	brcc	.+44     	; 0x2a04 <USB_Device_GetStatus+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    29d8:	e9 ee       	ldi	r30, 0xE9	; 233
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    29de:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    29e2:	95 fb       	bst	r25, 5
    29e4:	99 27       	eor	r25, r25
    29e6:	90 f9       	bld	r25, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    29e8:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    29ea:	e8 ee       	ldi	r30, 0xE8	; 232
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	87 7f       	andi	r24, 0xF7	; 247
    29f2:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    29f4:	a1 ef       	ldi	r26, 0xF1	; 241
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	9c 93       	st	X, r25
				UEDATX = (Data >> 8);
    29fa:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    29fc:	80 81       	ld	r24, Z
    29fe:	8e 77       	andi	r24, 0x7E	; 126
    2a00:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2a02:	f6 cd       	rjmp	.-1044   	; 0x25f0 <Endpoint_ClearStatusStage>
    2a04:	08 95       	ret

00002a06 <USB_Device_ClearSetFeature>:
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2a06:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <USB_ControlRequest>
    2a0a:	8f 71       	andi	r24, 0x1F	; 31
    2a0c:	19 f0       	breq	.+6      	; 0x2a14 <USB_Device_ClearSetFeature+0xe>
    2a0e:	82 30       	cpi	r24, 0x02	; 2
    2a10:	71 f0       	breq	.+28     	; 0x2a2e <USB_Device_ClearSetFeature+0x28>
    2a12:	08 95       	ret
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    2a14:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <USB_ControlRequest+0x2>
    2a18:	81 30       	cpi	r24, 0x01	; 1
    2a1a:	09 f0       	breq	.+2      	; 0x2a1e <USB_Device_ClearSetFeature+0x18>
    2a1c:	3f c0       	rjmp	.+126    	; 0x2a9c <USB_Device_ClearSetFeature+0x96>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2a1e:	90 91 6c 09 	lds	r25, 0x096C	; 0x80096c <USB_ControlRequest+0x1>
    2a22:	93 30       	cpi	r25, 0x03	; 3
    2a24:	09 f0       	breq	.+2      	; 0x2a28 <USB_Device_ClearSetFeature+0x22>
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <USB_Device_RemoteWakeupEnabled>
			else
			  return;

			break;
    2a2c:	2f c0       	rjmp	.+94     	; 0x2a8c <USB_Device_ClearSetFeature+0x86>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2a2e:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <USB_ControlRequest+0x2>
    2a32:	81 11       	cpse	r24, r1
    2a34:	2b c0       	rjmp	.+86     	; 0x2a8c <USB_Device_ClearSetFeature+0x86>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2a36:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <USB_ControlRequest+0x4>
    2a3a:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    2a3c:	9f ef       	ldi	r25, 0xFF	; 255
    2a3e:	98 0f       	add	r25, r24
    2a40:	96 30       	cpi	r25, 0x06	; 6
    2a42:	60 f5       	brcc	.+88     	; 0x2a9c <USB_Device_ClearSetFeature+0x96>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2a44:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2a48:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2a4c:	90 ff       	sbrs	r25, 0
    2a4e:	1e c0       	rjmp	.+60     	; 0x2a8c <USB_Device_ClearSetFeature+0x86>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2a50:	90 91 6c 09 	lds	r25, 0x096C	; 0x80096c <USB_ControlRequest+0x1>
    2a54:	93 30       	cpi	r25, 0x03	; 3
    2a56:	31 f4       	brne	.+12     	; 0x2a64 <USB_Device_ClearSetFeature+0x5e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2a58:	eb ee       	ldi	r30, 0xEB	; 235
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	80 62       	ori	r24, 0x20	; 32
    2a60:	80 83       	st	Z, r24
    2a62:	14 c0       	rjmp	.+40     	; 0x2a8c <USB_Device_ClearSetFeature+0x86>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2a64:	eb ee       	ldi	r30, 0xEB	; 235
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	90 81       	ld	r25, Z
    2a6a:	90 61       	ori	r25, 0x10	; 16
    2a6c:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2a6e:	21 e0       	ldi	r18, 0x01	; 1
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	a9 01       	movw	r20, r18
    2a74:	02 c0       	rjmp	.+4      	; 0x2a7a <USB_Device_ClearSetFeature+0x74>
    2a76:	44 0f       	add	r20, r20
    2a78:	55 1f       	adc	r21, r21
    2a7a:	8a 95       	dec	r24
    2a7c:	e2 f7       	brpl	.-8      	; 0x2a76 <USB_Device_ClearSetFeature+0x70>
    2a7e:	aa ee       	ldi	r26, 0xEA	; 234
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	4c 93       	st	X, r20
				UERST = 0;
    2a84:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2a86:	80 81       	ld	r24, Z
    2a88:	88 60       	ori	r24, 0x08	; 8
    2a8a:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2a8c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2a90:	e8 ee       	ldi	r30, 0xE8	; 232
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	87 7f       	andi	r24, 0xF7	; 247
    2a98:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2a9a:	aa cd       	rjmp	.-1196   	; 0x25f0 <Endpoint_ClearStatusStage>
    2a9c:	08 95       	ret

00002a9e <USB_Device_SetAddress>:
		Endpoint_StallTransaction();
	}
}

static void USB_Device_SetAddress(void)
{
    2a9e:	cf 93       	push	r28
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2aa0:	c0 91 6d 09 	lds	r28, 0x096D	; 0x80096d <USB_ControlRequest+0x2>
    2aa4:	cf 77       	andi	r28, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2aa6:	e3 ee       	ldi	r30, 0xE3	; 227
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	80 78       	andi	r24, 0x80	; 128
    2aae:	8c 2b       	or	r24, r28
    2ab0:	80 83       	st	Z, r24
    2ab2:	e8 ee       	ldi	r30, 0xE8	; 232
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	80 81       	ld	r24, Z
    2ab8:	87 7f       	andi	r24, 0xF7	; 247
    2aba:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2abc:	99 dd       	rcall	.-1230   	; 0x25f0 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2abe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    2ac2:	80 ff       	sbrs	r24, 0
    2ac4:	fc cf       	rjmp	.-8      	; 0x2abe <USB_Device_SetAddress+0x20>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2ac6:	e3 ee       	ldi	r30, 0xE3	; 227
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	80 68       	ori	r24, 0x80	; 128
    2ace:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2ad0:	cc 23       	and	r28, r28
    2ad2:	11 f0       	breq	.+4      	; 0x2ad8 <USB_Device_SetAddress+0x3a>
    2ad4:	83 e0       	ldi	r24, 0x03	; 3
    2ad6:	01 c0       	rjmp	.+2      	; 0x2ada <USB_Device_SetAddress+0x3c>
    2ad8:	82 e0       	ldi	r24, 0x02	; 2
    2ada:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <USB_DeviceState>
}
    2ade:	cf 91       	pop	r28
    2ae0:	08 95       	ret

00002ae2 <USB_Device_GetConfiguration>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2ae2:	e8 ee       	ldi	r30, 0xE8	; 232
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	80 81       	ld	r24, Z
    2ae8:	87 7f       	andi	r24, 0xF7	; 247
    2aea:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2aec:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2af0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2af4:	80 81       	ld	r24, Z
    2af6:	8e 77       	andi	r24, 0x7E	; 126
    2af8:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2afa:	7a cd       	rjmp	.-1292   	; 0x25f0 <Endpoint_ClearStatusStage>
    2afc:	08 95       	ret

00002afe <USB_Device_GetInternalSerialDescriptor>:

extern void(*LUFA_DREG_HOOK_INTERNAL_SERIAL)(uint16_t* serial_str, size_t nr_elements);

#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
static void USB_Device_GetInternalSerialDescriptor(void)
{
    2afe:	0f 93       	push	r16
    2b00:	1f 93       	push	r17
    2b02:	cf 93       	push	r28
    2b04:	df 93       	push	r29
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
    2b0a:	aa 97       	sbiw	r28, 0x2a	; 42
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	de bf       	out	0x3e, r29	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	cd bf       	out	0x3d, r28	; 61
    {
        USB_Descriptor_Header_t Header;
        uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
    } SignatureDescriptor;

    SignatureDescriptor.Header.Type = DTYPE_String;
    2b16:	83 e0       	ldi	r24, 0x03	; 3
    2b18:	8a 83       	std	Y+2, r24	; 0x02
    SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2b1a:	8a e2       	ldi	r24, 0x2A	; 42
    2b1c:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2b1e:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2b20:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2b22:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2b24:	2e e0       	ldi	r18, 0x0E	; 14
    2b26:	20 c0       	rjmp	.+64     	; 0x2b68 <USB_Device_GetInternalSerialDescriptor+0x6a>

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2b28:	e2 2f       	mov	r30, r18
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	81 e2       	ldi	r24, 0x21	; 33
    2b2e:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    2b32:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    2b34:	90 ff       	sbrs	r25, 0
    2b36:	03 c0       	rjmp	.+6      	; 0x2b3e <USB_Device_GetInternalSerialDescriptor+0x40>
					{
						SerialByte >>= 4;
    2b38:	e2 95       	swap	r30
    2b3a:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    2b3c:	2f 5f       	subi	r18, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2b3e:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2b40:	a9 2f       	mov	r26, r25
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	aa 0f       	add	r26, r26
    2b46:	bb 1f       	adc	r27, r27
    2b48:	43 e0       	ldi	r20, 0x03	; 3
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	4c 0f       	add	r20, r28
    2b4e:	5d 1f       	adc	r21, r29
    2b50:	a4 0f       	add	r26, r20
    2b52:	b5 1f       	adc	r27, r21
    2b54:	ea 30       	cpi	r30, 0x0A	; 10
    2b56:	18 f0       	brcs	.+6      	; 0x2b5e <USB_Device_GetInternalSerialDescriptor+0x60>
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	f7 96       	adiw	r30, 0x37	; 55
    2b5c:	02 c0       	rjmp	.+4      	; 0x2b62 <USB_Device_GetInternalSerialDescriptor+0x64>
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	f0 96       	adiw	r30, 0x30	; 48
    2b62:	ed 93       	st	X+, r30
    2b64:	fc 93       	st	X, r31
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2b66:	9f 5f       	subi	r25, 0xFF	; 255
    2b68:	94 31       	cpi	r25, 0x14	; 20
    2b6a:	f0 f2       	brcs	.-68     	; 0x2b28 <USB_Device_GetInternalSerialDescriptor+0x2a>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2b6c:	3f bf       	out	0x3f, r19	; 63

    USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

    if (NULL != LUFA_DREG_HOOK_INTERNAL_SERIAL)
    2b6e:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <LUFA_DREG_HOOK_INTERNAL_SERIAL>
    2b72:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <LUFA_DREG_HOOK_INTERNAL_SERIAL+0x1>
    2b76:	30 97       	sbiw	r30, 0x00	; 0
    2b78:	29 f0       	breq	.+10     	; 0x2b84 <USB_Device_GetInternalSerialDescriptor+0x86>
    {
        LUFA_DREG_HOOK_INTERNAL_SERIAL(SignatureDescriptor.UnicodeString, INTERNAL_SERIAL_LENGTH_BITS / 4);
    2b7a:	64 e1       	ldi	r22, 0x14	; 20
    2b7c:	70 e0       	ldi	r23, 0x00	; 0
    2b7e:	ce 01       	movw	r24, r28
    2b80:	03 96       	adiw	r24, 0x03	; 3
    2b82:	09 95       	icall
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2b84:	08 ee       	ldi	r16, 0xE8	; 232
    2b86:	10 e0       	ldi	r17, 0x00	; 0
    2b88:	f8 01       	movw	r30, r16
    2b8a:	80 81       	ld	r24, Z
    2b8c:	87 7f       	andi	r24, 0xF7	; 247
    2b8e:	80 83       	st	Z, r24
    }
    
    Endpoint_ClearSETUP();

    Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2b90:	6a e2       	ldi	r22, 0x2A	; 42
    2b92:	70 e0       	ldi	r23, 0x00	; 0
    2b94:	ce 01       	movw	r24, r28
    2b96:	01 96       	adiw	r24, 0x01	; 1
    2b98:	02 dc       	rcall	.-2044   	; 0x239e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2b9a:	f8 01       	movw	r30, r16
    2b9c:	80 81       	ld	r24, Z
    2b9e:	8b 77       	andi	r24, 0x7B	; 123
    2ba0:	80 83       	st	Z, r24
    Endpoint_ClearOUT();
}
    2ba2:	aa 96       	adiw	r28, 0x2a	; 42
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	f8 94       	cli
    2ba8:	de bf       	out	0x3e, r29	; 62
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	df 91       	pop	r29
    2bb0:	cf 91       	pop	r28
    2bb2:	1f 91       	pop	r17
    2bb4:	0f 91       	pop	r16
    2bb6:	08 95       	ret

00002bb8 <USB_Device_GetDescriptor>:
#endif

static void USB_Device_GetDescriptor(void)
{
    2bb8:	0f 93       	push	r16
    2bba:	1f 93       	push	r17
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	00 d0       	rcall	.+0      	; 0x2bc2 <USB_Device_GetDescriptor+0xa>
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2bc6:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <USB_ControlRequest+0x2>
    2bca:	90 91 6e 09 	lds	r25, 0x096E	; 0x80096e <USB_ControlRequest+0x3>
    2bce:	8c 3d       	cpi	r24, 0xDC	; 220
    2bd0:	23 e0       	ldi	r18, 0x03	; 3
    2bd2:	92 07       	cpc	r25, r18
    2bd4:	11 f4       	brne	.+4      	; 0x2bda <USB_Device_GetDescriptor+0x22>
	{
		USB_Device_GetInternalSerialDescriptor();
    2bd6:	93 df       	rcall	.-218    	; 0x2afe <USB_Device_GetInternalSerialDescriptor>
		return;
    2bd8:	19 c0       	rjmp	.+50     	; 0x2c0c <USB_Device_GetDescriptor+0x54>
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2bda:	60 91 6f 09 	lds	r22, 0x096F	; 0x80096f <USB_ControlRequest+0x4>
    2bde:	70 91 70 09 	lds	r23, 0x0970	; 0x800970 <USB_ControlRequest+0x5>
    2be2:	ae 01       	movw	r20, r28
    2be4:	4f 5f       	subi	r20, 0xFF	; 255
    2be6:	5f 4f       	sbci	r21, 0xFF	; 255
    2be8:	0e 94 42 04 	call	0x884	; 0x884 <CALLBACK_USB_GetDescriptor>
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	71 f0       	breq	.+28     	; 0x2c0c <USB_Device_GetDescriptor+0x54>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2bf0:	08 ee       	ldi	r16, 0xE8	; 232
    2bf2:	10 e0       	ldi	r17, 0x00	; 0
    2bf4:	f8 01       	movw	r30, r16
    2bf6:	20 81       	ld	r18, Z
    2bf8:	27 7f       	andi	r18, 0xF7	; 247
    2bfa:	20 83       	st	Z, r18
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	9a 81       	ldd	r25, Y+2	; 0x02
    2c02:	cd db       	rcall	.-2150   	; 0x239e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2c04:	f8 01       	movw	r30, r16
    2c06:	80 81       	ld	r24, Z
    2c08:	8b 77       	andi	r24, 0x7B	; 123
    2c0a:	80 83       	st	Z, r24
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
}
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	1f 91       	pop	r17
    2c16:	0f 91       	pop	r16
    2c18:	08 95       	ret

00002c1a <USB_Device_SetConfiguration>:
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2c1a:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <USB_ControlRequest+0x2>
    2c1e:	90 91 6e 09 	lds	r25, 0x096E	; 0x80096e <USB_ControlRequest+0x3>
    2c22:	99 27       	eor	r25, r25
    2c24:	02 97       	sbiw	r24, 0x02	; 2
    2c26:	ec f4       	brge	.+58     	; 0x2c62 <USB_Device_SetConfiguration+0x48>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2c28:	e8 ee       	ldi	r30, 0xE8	; 232
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	80 81       	ld	r24, Z
    2c2e:	87 7f       	andi	r24, 0xF7	; 247
    2c30:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2c32:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <USB_ControlRequest+0x2>
    2c36:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    2c3a:	da dc       	rcall	.-1612   	; 0x25f0 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2c3c:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <USB_Device_ConfigurationNumber>
    2c40:	88 23       	and	r24, r24
    2c42:	21 f0       	breq	.+8      	; 0x2c4c <USB_Device_SetConfiguration+0x32>
	  USB_DeviceState = DEVICE_STATE_Configured;
    2c44:	84 e0       	ldi	r24, 0x04	; 4
    2c46:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <USB_DeviceState>
    2c4a:	09 c0       	rjmp	.+18     	; 0x2c5e <USB_Device_SetConfiguration+0x44>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2c4c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2c50:	88 23       	and	r24, r24
    2c52:	14 f4       	brge	.+4      	; 0x2c58 <USB_Device_SetConfiguration+0x3e>
    2c54:	84 e0       	ldi	r24, 0x04	; 4
    2c56:	01 c0       	rjmp	.+2      	; 0x2c5a <USB_Device_SetConfiguration+0x40>
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    2c5e:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <EVENT_USB_Device_ConfigurationChanged>
    2c62:	08 95       	ret

00002c64 <USB_Device_ProcessControlRequest>:
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2c64:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    2c66:	eb e6       	ldi	r30, 0x6B	; 107
    2c68:	f9 e0       	ldi	r31, 0x09	; 9

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2c6a:	05 c0       	rjmp	.+10     	; 0x2c76 <USB_Device_ProcessControlRequest+0x12>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2c6c:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	  *(RequestHeader++) = Endpoint_Read_8();
    2c70:	90 83       	st	Z, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2c72:	8f 5f       	subi	r24, 0xFF	; 255
	  *(RequestHeader++) = Endpoint_Read_8();
    2c74:	31 96       	adiw	r30, 0x01	; 1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2c76:	88 30       	cpi	r24, 0x08	; 8
    2c78:	c8 f3       	brcs	.-14     	; 0x2c6c <USB_Device_ProcessControlRequest+0x8>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2c7a:	0e 94 67 06 	call	0xcce	; 0xcce <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2c7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    2c82:	83 ff       	sbrs	r24, 3
    2c84:	30 c0       	rjmp	.+96     	; 0x2ce6 <USB_Device_ProcessControlRequest+0x82>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2c86:	eb e6       	ldi	r30, 0x6B	; 107
    2c88:	f9 e0       	ldi	r31, 0x09	; 9
    2c8a:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
    2c8c:	81 81       	ldd	r24, Z+1	; 0x01
    2c8e:	85 30       	cpi	r24, 0x05	; 5
    2c90:	d1 f0       	breq	.+52     	; 0x2cc6 <USB_Device_ProcessControlRequest+0x62>
    2c92:	30 f4       	brcc	.+12     	; 0x2ca0 <USB_Device_ProcessControlRequest+0x3c>
    2c94:	81 30       	cpi	r24, 0x01	; 1
    2c96:	89 f0       	breq	.+34     	; 0x2cba <USB_Device_ProcessControlRequest+0x56>
    2c98:	50 f0       	brcs	.+20     	; 0x2cae <USB_Device_ProcessControlRequest+0x4a>
    2c9a:	83 30       	cpi	r24, 0x03	; 3
    2c9c:	71 f0       	breq	.+28     	; 0x2cba <USB_Device_ProcessControlRequest+0x56>
    2c9e:	23 c0       	rjmp	.+70     	; 0x2ce6 <USB_Device_ProcessControlRequest+0x82>
    2ca0:	88 30       	cpi	r24, 0x08	; 8
    2ca2:	d1 f0       	breq	.+52     	; 0x2cd8 <USB_Device_ProcessControlRequest+0x74>
    2ca4:	89 30       	cpi	r24, 0x09	; 9
    2ca6:	e1 f0       	breq	.+56     	; 0x2ce0 <USB_Device_ProcessControlRequest+0x7c>
    2ca8:	86 30       	cpi	r24, 0x06	; 6
    2caa:	e9 f4       	brne	.+58     	; 0x2ce6 <USB_Device_ProcessControlRequest+0x82>
    2cac:	10 c0       	rjmp	.+32     	; 0x2cce <USB_Device_ProcessControlRequest+0x6a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2cae:	90 38       	cpi	r25, 0x80	; 128
    2cb0:	11 f0       	breq	.+4      	; 0x2cb6 <USB_Device_ProcessControlRequest+0x52>
    2cb2:	92 38       	cpi	r25, 0x82	; 130
    2cb4:	c1 f4       	brne	.+48     	; 0x2ce6 <USB_Device_ProcessControlRequest+0x82>
					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT)))
				{
					USB_Device_GetStatus();
    2cb6:	77 de       	rcall	.-786    	; 0x29a6 <USB_Device_GetStatus>
    2cb8:	16 c0       	rjmp	.+44     	; 0x2ce6 <USB_Device_ProcessControlRequest+0x82>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2cba:	99 23       	and	r25, r25
    2cbc:	11 f0       	breq	.+4      	; 0x2cc2 <USB_Device_ProcessControlRequest+0x5e>
    2cbe:	92 30       	cpi	r25, 0x02	; 2
					(bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_ENDPOINT)))
				{
					USB_Device_ClearSetFeature();
    2cc0:	91 f4       	brne	.+36     	; 0x2ce6 <USB_Device_ProcessControlRequest+0x82>
    2cc2:	a1 de       	rcall	.-702    	; 0x2a06 <USB_Device_ClearSetFeature>
    2cc4:	10 c0       	rjmp	.+32     	; 0x2ce6 <USB_Device_ProcessControlRequest+0x82>
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2cc6:	91 11       	cpse	r25, r1
				  USB_Device_SetAddress();
    2cc8:	0e c0       	rjmp	.+28     	; 0x2ce6 <USB_Device_ProcessControlRequest+0x82>
    2cca:	e9 de       	rcall	.-558    	; 0x2a9e <USB_Device_SetAddress>
    2ccc:	0c c0       	rjmp	.+24     	; 0x2ce6 <USB_Device_ProcessControlRequest+0x82>

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2cce:	90 58       	subi	r25, 0x80	; 128
    2cd0:	92 30       	cpi	r25, 0x02	; 2
					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_INTERFACE)))
				{
					USB_Device_GetDescriptor();
    2cd2:	48 f4       	brcc	.+18     	; 0x2ce6 <USB_Device_ProcessControlRequest+0x82>
    2cd4:	71 df       	rcall	.-286    	; 0x2bb8 <USB_Device_GetDescriptor>
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2cd6:	07 c0       	rjmp	.+14     	; 0x2ce6 <USB_Device_ProcessControlRequest+0x82>
    2cd8:	90 38       	cpi	r25, 0x80	; 128
				  USB_Device_GetConfiguration();
    2cda:	29 f4       	brne	.+10     	; 0x2ce6 <USB_Device_ProcessControlRequest+0x82>
    2cdc:	02 df       	rcall	.-508    	; 0x2ae2 <USB_Device_GetConfiguration>

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2cde:	03 c0       	rjmp	.+6      	; 0x2ce6 <USB_Device_ProcessControlRequest+0x82>
    2ce0:	91 11       	cpse	r25, r1
				  USB_Device_SetConfiguration();
    2ce2:	01 c0       	rjmp	.+2      	; 0x2ce6 <USB_Device_ProcessControlRequest+0x82>
    2ce4:	9a df       	rcall	.-204    	; 0x2c1a <USB_Device_SetConfiguration>
    2ce6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2cea:	83 ff       	sbrs	r24, 3
    2cec:	0a c0       	rjmp	.+20     	; 0x2d02 <USB_Device_ProcessControlRequest+0x9e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2cee:	e8 ee       	ldi	r30, 0xE8	; 232
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	80 81       	ld	r24, Z
    2cf4:	87 7f       	andi	r24, 0xF7	; 247
    2cf6:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2cf8:	eb ee       	ldi	r30, 0xEB	; 235
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	80 81       	ld	r24, Z
    2cfe:	80 62       	ori	r24, 0x20	; 32
    2d00:	80 83       	st	Z, r24
    2d02:	08 95       	ret

00002d04 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    2d04:	08 95       	ret

00002d06 <USB_DeviceTask>:
	#endif
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
    2d06:	cf 93       	push	r28
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2d08:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <USB_DeviceState>
    2d0c:	88 23       	and	r24, r24
    2d0e:	99 f0       	breq	.+38     	; 0x2d36 <USB_DeviceTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2d10:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2d14:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2d16:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2d1a:	98 2f       	mov	r25, r24
    2d1c:	91 70       	andi	r25, 0x01	; 1
    2d1e:	80 fd       	sbrc	r24, 0
    2d20:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2d22:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2d24:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2d28:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2d2c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    2d2e:	9a df       	rcall	.-204    	; 0x2c64 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2d30:	cf 70       	andi	r28, 0x0F	; 15
    2d32:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(PrevEndpoint);
}
    2d36:	cf 91       	pop	r28
    2d38:	08 95       	ret

00002d3a <USB_USBTask>:
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
    2d3a:	e5 cf       	rjmp	.-54     	; 0x2d06 <USB_DeviceTask>
    2d3c:	08 95       	ret

00002d3e <__udivmodsi4>:
    2d3e:	a1 e2       	ldi	r26, 0x21	; 33
    2d40:	1a 2e       	mov	r1, r26
    2d42:	aa 1b       	sub	r26, r26
    2d44:	bb 1b       	sub	r27, r27
    2d46:	fd 01       	movw	r30, r26
    2d48:	0d c0       	rjmp	.+26     	; 0x2d64 <__udivmodsi4_ep>

00002d4a <__udivmodsi4_loop>:
    2d4a:	aa 1f       	adc	r26, r26
    2d4c:	bb 1f       	adc	r27, r27
    2d4e:	ee 1f       	adc	r30, r30
    2d50:	ff 1f       	adc	r31, r31
    2d52:	a2 17       	cp	r26, r18
    2d54:	b3 07       	cpc	r27, r19
    2d56:	e4 07       	cpc	r30, r20
    2d58:	f5 07       	cpc	r31, r21
    2d5a:	20 f0       	brcs	.+8      	; 0x2d64 <__udivmodsi4_ep>
    2d5c:	a2 1b       	sub	r26, r18
    2d5e:	b3 0b       	sbc	r27, r19
    2d60:	e4 0b       	sbc	r30, r20
    2d62:	f5 0b       	sbc	r31, r21

00002d64 <__udivmodsi4_ep>:
    2d64:	66 1f       	adc	r22, r22
    2d66:	77 1f       	adc	r23, r23
    2d68:	88 1f       	adc	r24, r24
    2d6a:	99 1f       	adc	r25, r25
    2d6c:	1a 94       	dec	r1
    2d6e:	69 f7       	brne	.-38     	; 0x2d4a <__udivmodsi4_loop>
    2d70:	60 95       	com	r22
    2d72:	70 95       	com	r23
    2d74:	80 95       	com	r24
    2d76:	90 95       	com	r25
    2d78:	9b 01       	movw	r18, r22
    2d7a:	ac 01       	movw	r20, r24
    2d7c:	bd 01       	movw	r22, r26
    2d7e:	cf 01       	movw	r24, r30
    2d80:	08 95       	ret

00002d82 <__umulhisi3>:
    2d82:	a2 9f       	mul	r26, r18
    2d84:	b0 01       	movw	r22, r0
    2d86:	b3 9f       	mul	r27, r19
    2d88:	c0 01       	movw	r24, r0
    2d8a:	a3 9f       	mul	r26, r19
    2d8c:	70 0d       	add	r23, r0
    2d8e:	81 1d       	adc	r24, r1
    2d90:	11 24       	eor	r1, r1
    2d92:	91 1d       	adc	r25, r1
    2d94:	b2 9f       	mul	r27, r18
    2d96:	70 0d       	add	r23, r0
    2d98:	81 1d       	adc	r24, r1
    2d9a:	11 24       	eor	r1, r1
    2d9c:	91 1d       	adc	r25, r1
    2d9e:	08 95       	ret

00002da0 <isgraph>:
    2da0:	80 32       	cpi	r24, 0x20	; 32
    2da2:	09 f0       	breq	.+2      	; 0x2da6 <isprint+0x2>

00002da4 <isprint>:
    2da4:	91 11       	cpse	r25, r1
    2da6:	c5 c2       	rjmp	.+1418   	; 0x3332 <__ctype_isfalse>
    2da8:	80 52       	subi	r24, 0x20	; 32
    2daa:	8f 55       	subi	r24, 0x5F	; 95
    2dac:	e0 f7       	brcc	.-8      	; 0x2da6 <isprint+0x2>
    2dae:	08 95       	ret

00002db0 <memcmp>:
    2db0:	fb 01       	movw	r30, r22
    2db2:	dc 01       	movw	r26, r24
    2db4:	04 c0       	rjmp	.+8      	; 0x2dbe <memcmp+0xe>
    2db6:	8d 91       	ld	r24, X+
    2db8:	01 90       	ld	r0, Z+
    2dba:	80 19       	sub	r24, r0
    2dbc:	21 f4       	brne	.+8      	; 0x2dc6 <memcmp+0x16>
    2dbe:	41 50       	subi	r20, 0x01	; 1
    2dc0:	50 40       	sbci	r21, 0x00	; 0
    2dc2:	c8 f7       	brcc	.-14     	; 0x2db6 <memcmp+0x6>
    2dc4:	88 1b       	sub	r24, r24
    2dc6:	99 0b       	sbc	r25, r25
    2dc8:	08 95       	ret

00002dca <memcpy>:
    2dca:	fb 01       	movw	r30, r22
    2dcc:	dc 01       	movw	r26, r24
    2dce:	02 c0       	rjmp	.+4      	; 0x2dd4 <memcpy+0xa>
    2dd0:	01 90       	ld	r0, Z+
    2dd2:	0d 92       	st	X+, r0
    2dd4:	41 50       	subi	r20, 0x01	; 1
    2dd6:	50 40       	sbci	r21, 0x00	; 0
    2dd8:	d8 f7       	brcc	.-10     	; 0x2dd0 <memcpy+0x6>
    2dda:	08 95       	ret

00002ddc <memset>:
    2ddc:	dc 01       	movw	r26, r24
    2dde:	01 c0       	rjmp	.+2      	; 0x2de2 <memset+0x6>
    2de0:	6d 93       	st	X+, r22
    2de2:	41 50       	subi	r20, 0x01	; 1
    2de4:	50 40       	sbci	r21, 0x00	; 0
    2de6:	e0 f7       	brcc	.-8      	; 0x2de0 <memset+0x4>
    2de8:	08 95       	ret

00002dea <fprintf>:
    2dea:	cf 93       	push	r28
    2dec:	df 93       	push	r29
    2dee:	cd b7       	in	r28, 0x3d	; 61
    2df0:	de b7       	in	r29, 0x3e	; 62
    2df2:	ae 01       	movw	r20, r28
    2df4:	47 5f       	subi	r20, 0xF7	; 247
    2df6:	5f 4f       	sbci	r21, 0xFF	; 255
    2df8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dfa:	78 85       	ldd	r23, Y+8	; 0x08
    2dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2e00:	9b d0       	rcall	.+310    	; 0x2f38 <vfprintf>
    2e02:	df 91       	pop	r29
    2e04:	cf 91       	pop	r28
    2e06:	08 95       	ret

00002e08 <printf>:
    2e08:	cf 93       	push	r28
    2e0a:	df 93       	push	r29
    2e0c:	cd b7       	in	r28, 0x3d	; 61
    2e0e:	de b7       	in	r29, 0x3e	; 62
    2e10:	ae 01       	movw	r20, r28
    2e12:	4b 5f       	subi	r20, 0xFB	; 251
    2e14:	5f 4f       	sbci	r21, 0xFF	; 255
    2e16:	fa 01       	movw	r30, r20
    2e18:	61 91       	ld	r22, Z+
    2e1a:	71 91       	ld	r23, Z+
    2e1c:	af 01       	movw	r20, r30
    2e1e:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <__iob+0x2>
    2e22:	90 91 76 09 	lds	r25, 0x0976	; 0x800976 <__iob+0x3>
    2e26:	88 d0       	rcall	.+272    	; 0x2f38 <vfprintf>
    2e28:	df 91       	pop	r29
    2e2a:	cf 91       	pop	r28
    2e2c:	08 95       	ret

00002e2e <printf_P>:
    2e2e:	0f 93       	push	r16
    2e30:	1f 93       	push	r17
    2e32:	cf 93       	push	r28
    2e34:	df 93       	push	r29
    2e36:	cd b7       	in	r28, 0x3d	; 61
    2e38:	de b7       	in	r29, 0x3e	; 62
    2e3a:	ae 01       	movw	r20, r28
    2e3c:	49 5f       	subi	r20, 0xF9	; 249
    2e3e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e40:	da 01       	movw	r26, r20
    2e42:	6d 91       	ld	r22, X+
    2e44:	7d 91       	ld	r23, X+
    2e46:	ad 01       	movw	r20, r26
    2e48:	03 e7       	ldi	r16, 0x73	; 115
    2e4a:	19 e0       	ldi	r17, 0x09	; 9
    2e4c:	f8 01       	movw	r30, r16
    2e4e:	82 81       	ldd	r24, Z+2	; 0x02
    2e50:	93 81       	ldd	r25, Z+3	; 0x03
    2e52:	dc 01       	movw	r26, r24
    2e54:	13 96       	adiw	r26, 0x03	; 3
    2e56:	2c 91       	ld	r18, X
    2e58:	13 97       	sbiw	r26, 0x03	; 3
    2e5a:	28 60       	ori	r18, 0x08	; 8
    2e5c:	13 96       	adiw	r26, 0x03	; 3
    2e5e:	2c 93       	st	X, r18
    2e60:	6b d0       	rcall	.+214    	; 0x2f38 <vfprintf>
    2e62:	d8 01       	movw	r26, r16
    2e64:	12 96       	adiw	r26, 0x02	; 2
    2e66:	ed 91       	ld	r30, X+
    2e68:	fc 91       	ld	r31, X
    2e6a:	13 97       	sbiw	r26, 0x03	; 3
    2e6c:	23 81       	ldd	r18, Z+3	; 0x03
    2e6e:	27 7f       	andi	r18, 0xF7	; 247
    2e70:	23 83       	std	Z+3, r18	; 0x03
    2e72:	df 91       	pop	r29
    2e74:	cf 91       	pop	r28
    2e76:	1f 91       	pop	r17
    2e78:	0f 91       	pop	r16
    2e7a:	08 95       	ret

00002e7c <puts>:
    2e7c:	0f 93       	push	r16
    2e7e:	1f 93       	push	r17
    2e80:	cf 93       	push	r28
    2e82:	df 93       	push	r29
    2e84:	e0 91 75 09 	lds	r30, 0x0975	; 0x800975 <__iob+0x2>
    2e88:	f0 91 76 09 	lds	r31, 0x0976	; 0x800976 <__iob+0x3>
    2e8c:	23 81       	ldd	r18, Z+3	; 0x03
    2e8e:	21 ff       	sbrs	r18, 1
    2e90:	1b c0       	rjmp	.+54     	; 0x2ec8 <puts+0x4c>
    2e92:	8c 01       	movw	r16, r24
    2e94:	d0 e0       	ldi	r29, 0x00	; 0
    2e96:	c0 e0       	ldi	r28, 0x00	; 0
    2e98:	f8 01       	movw	r30, r16
    2e9a:	81 91       	ld	r24, Z+
    2e9c:	8f 01       	movw	r16, r30
    2e9e:	60 91 75 09 	lds	r22, 0x0975	; 0x800975 <__iob+0x2>
    2ea2:	70 91 76 09 	lds	r23, 0x0976	; 0x800976 <__iob+0x3>
    2ea6:	db 01       	movw	r26, r22
    2ea8:	18 96       	adiw	r26, 0x08	; 8
    2eaa:	ed 91       	ld	r30, X+
    2eac:	fc 91       	ld	r31, X
    2eae:	19 97       	sbiw	r26, 0x09	; 9
    2eb0:	88 23       	and	r24, r24
    2eb2:	31 f0       	breq	.+12     	; 0x2ec0 <puts+0x44>
    2eb4:	09 95       	icall
    2eb6:	89 2b       	or	r24, r25
    2eb8:	79 f3       	breq	.-34     	; 0x2e98 <puts+0x1c>
    2eba:	df ef       	ldi	r29, 0xFF	; 255
    2ebc:	cf ef       	ldi	r28, 0xFF	; 255
    2ebe:	ec cf       	rjmp	.-40     	; 0x2e98 <puts+0x1c>
    2ec0:	8a e0       	ldi	r24, 0x0A	; 10
    2ec2:	09 95       	icall
    2ec4:	89 2b       	or	r24, r25
    2ec6:	19 f0       	breq	.+6      	; 0x2ece <puts+0x52>
    2ec8:	8f ef       	ldi	r24, 0xFF	; 255
    2eca:	9f ef       	ldi	r25, 0xFF	; 255
    2ecc:	02 c0       	rjmp	.+4      	; 0x2ed2 <puts+0x56>
    2ece:	8d 2f       	mov	r24, r29
    2ed0:	9c 2f       	mov	r25, r28
    2ed2:	df 91       	pop	r29
    2ed4:	cf 91       	pop	r28
    2ed6:	1f 91       	pop	r17
    2ed8:	0f 91       	pop	r16
    2eda:	08 95       	ret

00002edc <sprintf>:
    2edc:	0f 93       	push	r16
    2ede:	1f 93       	push	r17
    2ee0:	cf 93       	push	r28
    2ee2:	df 93       	push	r29
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
    2ee8:	2e 97       	sbiw	r28, 0x0e	; 14
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	f8 94       	cli
    2eee:	de bf       	out	0x3e, r29	; 62
    2ef0:	0f be       	out	0x3f, r0	; 63
    2ef2:	cd bf       	out	0x3d, r28	; 61
    2ef4:	0d 89       	ldd	r16, Y+21	; 0x15
    2ef6:	1e 89       	ldd	r17, Y+22	; 0x16
    2ef8:	86 e0       	ldi	r24, 0x06	; 6
    2efa:	8c 83       	std	Y+4, r24	; 0x04
    2efc:	1a 83       	std	Y+2, r17	; 0x02
    2efe:	09 83       	std	Y+1, r16	; 0x01
    2f00:	8f ef       	ldi	r24, 0xFF	; 255
    2f02:	9f e7       	ldi	r25, 0x7F	; 127
    2f04:	9e 83       	std	Y+6, r25	; 0x06
    2f06:	8d 83       	std	Y+5, r24	; 0x05
    2f08:	ae 01       	movw	r20, r28
    2f0a:	47 5e       	subi	r20, 0xE7	; 231
    2f0c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f0e:	6f 89       	ldd	r22, Y+23	; 0x17
    2f10:	78 8d       	ldd	r23, Y+24	; 0x18
    2f12:	ce 01       	movw	r24, r28
    2f14:	01 96       	adiw	r24, 0x01	; 1
    2f16:	10 d0       	rcall	.+32     	; 0x2f38 <vfprintf>
    2f18:	ef 81       	ldd	r30, Y+7	; 0x07
    2f1a:	f8 85       	ldd	r31, Y+8	; 0x08
    2f1c:	e0 0f       	add	r30, r16
    2f1e:	f1 1f       	adc	r31, r17
    2f20:	10 82       	st	Z, r1
    2f22:	2e 96       	adiw	r28, 0x0e	; 14
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	f8 94       	cli
    2f28:	de bf       	out	0x3e, r29	; 62
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	cd bf       	out	0x3d, r28	; 61
    2f2e:	df 91       	pop	r29
    2f30:	cf 91       	pop	r28
    2f32:	1f 91       	pop	r17
    2f34:	0f 91       	pop	r16
    2f36:	08 95       	ret

00002f38 <vfprintf>:
    2f38:	2f 92       	push	r2
    2f3a:	3f 92       	push	r3
    2f3c:	4f 92       	push	r4
    2f3e:	5f 92       	push	r5
    2f40:	6f 92       	push	r6
    2f42:	7f 92       	push	r7
    2f44:	8f 92       	push	r8
    2f46:	9f 92       	push	r9
    2f48:	af 92       	push	r10
    2f4a:	bf 92       	push	r11
    2f4c:	cf 92       	push	r12
    2f4e:	df 92       	push	r13
    2f50:	ef 92       	push	r14
    2f52:	ff 92       	push	r15
    2f54:	0f 93       	push	r16
    2f56:	1f 93       	push	r17
    2f58:	cf 93       	push	r28
    2f5a:	df 93       	push	r29
    2f5c:	cd b7       	in	r28, 0x3d	; 61
    2f5e:	de b7       	in	r29, 0x3e	; 62
    2f60:	2b 97       	sbiw	r28, 0x0b	; 11
    2f62:	0f b6       	in	r0, 0x3f	; 63
    2f64:	f8 94       	cli
    2f66:	de bf       	out	0x3e, r29	; 62
    2f68:	0f be       	out	0x3f, r0	; 63
    2f6a:	cd bf       	out	0x3d, r28	; 61
    2f6c:	6c 01       	movw	r12, r24
    2f6e:	7b 01       	movw	r14, r22
    2f70:	8a 01       	movw	r16, r20
    2f72:	fc 01       	movw	r30, r24
    2f74:	17 82       	std	Z+7, r1	; 0x07
    2f76:	16 82       	std	Z+6, r1	; 0x06
    2f78:	83 81       	ldd	r24, Z+3	; 0x03
    2f7a:	81 ff       	sbrs	r24, 1
    2f7c:	bf c1       	rjmp	.+894    	; 0x32fc <vfprintf+0x3c4>
    2f7e:	ce 01       	movw	r24, r28
    2f80:	01 96       	adiw	r24, 0x01	; 1
    2f82:	3c 01       	movw	r6, r24
    2f84:	f6 01       	movw	r30, r12
    2f86:	93 81       	ldd	r25, Z+3	; 0x03
    2f88:	f7 01       	movw	r30, r14
    2f8a:	93 fd       	sbrc	r25, 3
    2f8c:	85 91       	lpm	r24, Z+
    2f8e:	93 ff       	sbrs	r25, 3
    2f90:	81 91       	ld	r24, Z+
    2f92:	7f 01       	movw	r14, r30
    2f94:	88 23       	and	r24, r24
    2f96:	09 f4       	brne	.+2      	; 0x2f9a <vfprintf+0x62>
    2f98:	ad c1       	rjmp	.+858    	; 0x32f4 <vfprintf+0x3bc>
    2f9a:	85 32       	cpi	r24, 0x25	; 37
    2f9c:	39 f4       	brne	.+14     	; 0x2fac <vfprintf+0x74>
    2f9e:	93 fd       	sbrc	r25, 3
    2fa0:	85 91       	lpm	r24, Z+
    2fa2:	93 ff       	sbrs	r25, 3
    2fa4:	81 91       	ld	r24, Z+
    2fa6:	7f 01       	movw	r14, r30
    2fa8:	85 32       	cpi	r24, 0x25	; 37
    2faa:	21 f4       	brne	.+8      	; 0x2fb4 <vfprintf+0x7c>
    2fac:	b6 01       	movw	r22, r12
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	d9 d1       	rcall	.+946    	; 0x3364 <fputc>
    2fb2:	e8 cf       	rjmp	.-48     	; 0x2f84 <vfprintf+0x4c>
    2fb4:	91 2c       	mov	r9, r1
    2fb6:	21 2c       	mov	r2, r1
    2fb8:	31 2c       	mov	r3, r1
    2fba:	ff e1       	ldi	r31, 0x1F	; 31
    2fbc:	f3 15       	cp	r31, r3
    2fbe:	d8 f0       	brcs	.+54     	; 0x2ff6 <vfprintf+0xbe>
    2fc0:	8b 32       	cpi	r24, 0x2B	; 43
    2fc2:	79 f0       	breq	.+30     	; 0x2fe2 <vfprintf+0xaa>
    2fc4:	38 f4       	brcc	.+14     	; 0x2fd4 <vfprintf+0x9c>
    2fc6:	80 32       	cpi	r24, 0x20	; 32
    2fc8:	79 f0       	breq	.+30     	; 0x2fe8 <vfprintf+0xb0>
    2fca:	83 32       	cpi	r24, 0x23	; 35
    2fcc:	a1 f4       	brne	.+40     	; 0x2ff6 <vfprintf+0xbe>
    2fce:	23 2d       	mov	r18, r3
    2fd0:	20 61       	ori	r18, 0x10	; 16
    2fd2:	1d c0       	rjmp	.+58     	; 0x300e <vfprintf+0xd6>
    2fd4:	8d 32       	cpi	r24, 0x2D	; 45
    2fd6:	61 f0       	breq	.+24     	; 0x2ff0 <vfprintf+0xb8>
    2fd8:	80 33       	cpi	r24, 0x30	; 48
    2fda:	69 f4       	brne	.+26     	; 0x2ff6 <vfprintf+0xbe>
    2fdc:	23 2d       	mov	r18, r3
    2fde:	21 60       	ori	r18, 0x01	; 1
    2fe0:	16 c0       	rjmp	.+44     	; 0x300e <vfprintf+0xd6>
    2fe2:	83 2d       	mov	r24, r3
    2fe4:	82 60       	ori	r24, 0x02	; 2
    2fe6:	38 2e       	mov	r3, r24
    2fe8:	e3 2d       	mov	r30, r3
    2fea:	e4 60       	ori	r30, 0x04	; 4
    2fec:	3e 2e       	mov	r3, r30
    2fee:	2a c0       	rjmp	.+84     	; 0x3044 <vfprintf+0x10c>
    2ff0:	f3 2d       	mov	r31, r3
    2ff2:	f8 60       	ori	r31, 0x08	; 8
    2ff4:	1d c0       	rjmp	.+58     	; 0x3030 <vfprintf+0xf8>
    2ff6:	37 fc       	sbrc	r3, 7
    2ff8:	2d c0       	rjmp	.+90     	; 0x3054 <vfprintf+0x11c>
    2ffa:	20 ed       	ldi	r18, 0xD0	; 208
    2ffc:	28 0f       	add	r18, r24
    2ffe:	2a 30       	cpi	r18, 0x0A	; 10
    3000:	40 f0       	brcs	.+16     	; 0x3012 <vfprintf+0xda>
    3002:	8e 32       	cpi	r24, 0x2E	; 46
    3004:	b9 f4       	brne	.+46     	; 0x3034 <vfprintf+0xfc>
    3006:	36 fc       	sbrc	r3, 6
    3008:	75 c1       	rjmp	.+746    	; 0x32f4 <vfprintf+0x3bc>
    300a:	23 2d       	mov	r18, r3
    300c:	20 64       	ori	r18, 0x40	; 64
    300e:	32 2e       	mov	r3, r18
    3010:	19 c0       	rjmp	.+50     	; 0x3044 <vfprintf+0x10c>
    3012:	36 fe       	sbrs	r3, 6
    3014:	06 c0       	rjmp	.+12     	; 0x3022 <vfprintf+0xea>
    3016:	8a e0       	ldi	r24, 0x0A	; 10
    3018:	98 9e       	mul	r9, r24
    301a:	20 0d       	add	r18, r0
    301c:	11 24       	eor	r1, r1
    301e:	92 2e       	mov	r9, r18
    3020:	11 c0       	rjmp	.+34     	; 0x3044 <vfprintf+0x10c>
    3022:	ea e0       	ldi	r30, 0x0A	; 10
    3024:	2e 9e       	mul	r2, r30
    3026:	20 0d       	add	r18, r0
    3028:	11 24       	eor	r1, r1
    302a:	22 2e       	mov	r2, r18
    302c:	f3 2d       	mov	r31, r3
    302e:	f0 62       	ori	r31, 0x20	; 32
    3030:	3f 2e       	mov	r3, r31
    3032:	08 c0       	rjmp	.+16     	; 0x3044 <vfprintf+0x10c>
    3034:	8c 36       	cpi	r24, 0x6C	; 108
    3036:	21 f4       	brne	.+8      	; 0x3040 <vfprintf+0x108>
    3038:	83 2d       	mov	r24, r3
    303a:	80 68       	ori	r24, 0x80	; 128
    303c:	38 2e       	mov	r3, r24
    303e:	02 c0       	rjmp	.+4      	; 0x3044 <vfprintf+0x10c>
    3040:	88 36       	cpi	r24, 0x68	; 104
    3042:	41 f4       	brne	.+16     	; 0x3054 <vfprintf+0x11c>
    3044:	f7 01       	movw	r30, r14
    3046:	93 fd       	sbrc	r25, 3
    3048:	85 91       	lpm	r24, Z+
    304a:	93 ff       	sbrs	r25, 3
    304c:	81 91       	ld	r24, Z+
    304e:	7f 01       	movw	r14, r30
    3050:	81 11       	cpse	r24, r1
    3052:	b3 cf       	rjmp	.-154    	; 0x2fba <vfprintf+0x82>
    3054:	98 2f       	mov	r25, r24
    3056:	9f 7d       	andi	r25, 0xDF	; 223
    3058:	95 54       	subi	r25, 0x45	; 69
    305a:	93 30       	cpi	r25, 0x03	; 3
    305c:	28 f4       	brcc	.+10     	; 0x3068 <vfprintf+0x130>
    305e:	0c 5f       	subi	r16, 0xFC	; 252
    3060:	1f 4f       	sbci	r17, 0xFF	; 255
    3062:	9f e3       	ldi	r25, 0x3F	; 63
    3064:	99 83       	std	Y+1, r25	; 0x01
    3066:	0d c0       	rjmp	.+26     	; 0x3082 <vfprintf+0x14a>
    3068:	83 36       	cpi	r24, 0x63	; 99
    306a:	31 f0       	breq	.+12     	; 0x3078 <vfprintf+0x140>
    306c:	83 37       	cpi	r24, 0x73	; 115
    306e:	71 f0       	breq	.+28     	; 0x308c <vfprintf+0x154>
    3070:	83 35       	cpi	r24, 0x53	; 83
    3072:	09 f0       	breq	.+2      	; 0x3076 <vfprintf+0x13e>
    3074:	55 c0       	rjmp	.+170    	; 0x3120 <vfprintf+0x1e8>
    3076:	20 c0       	rjmp	.+64     	; 0x30b8 <vfprintf+0x180>
    3078:	f8 01       	movw	r30, r16
    307a:	80 81       	ld	r24, Z
    307c:	89 83       	std	Y+1, r24	; 0x01
    307e:	0e 5f       	subi	r16, 0xFE	; 254
    3080:	1f 4f       	sbci	r17, 0xFF	; 255
    3082:	88 24       	eor	r8, r8
    3084:	83 94       	inc	r8
    3086:	91 2c       	mov	r9, r1
    3088:	53 01       	movw	r10, r6
    308a:	12 c0       	rjmp	.+36     	; 0x30b0 <vfprintf+0x178>
    308c:	28 01       	movw	r4, r16
    308e:	f2 e0       	ldi	r31, 0x02	; 2
    3090:	4f 0e       	add	r4, r31
    3092:	51 1c       	adc	r5, r1
    3094:	f8 01       	movw	r30, r16
    3096:	a0 80       	ld	r10, Z
    3098:	b1 80       	ldd	r11, Z+1	; 0x01
    309a:	36 fe       	sbrs	r3, 6
    309c:	03 c0       	rjmp	.+6      	; 0x30a4 <vfprintf+0x16c>
    309e:	69 2d       	mov	r22, r9
    30a0:	70 e0       	ldi	r23, 0x00	; 0
    30a2:	02 c0       	rjmp	.+4      	; 0x30a8 <vfprintf+0x170>
    30a4:	6f ef       	ldi	r22, 0xFF	; 255
    30a6:	7f ef       	ldi	r23, 0xFF	; 255
    30a8:	c5 01       	movw	r24, r10
    30aa:	51 d1       	rcall	.+674    	; 0x334e <strnlen>
    30ac:	4c 01       	movw	r8, r24
    30ae:	82 01       	movw	r16, r4
    30b0:	f3 2d       	mov	r31, r3
    30b2:	ff 77       	andi	r31, 0x7F	; 127
    30b4:	3f 2e       	mov	r3, r31
    30b6:	15 c0       	rjmp	.+42     	; 0x30e2 <vfprintf+0x1aa>
    30b8:	28 01       	movw	r4, r16
    30ba:	22 e0       	ldi	r18, 0x02	; 2
    30bc:	42 0e       	add	r4, r18
    30be:	51 1c       	adc	r5, r1
    30c0:	f8 01       	movw	r30, r16
    30c2:	a0 80       	ld	r10, Z
    30c4:	b1 80       	ldd	r11, Z+1	; 0x01
    30c6:	36 fe       	sbrs	r3, 6
    30c8:	03 c0       	rjmp	.+6      	; 0x30d0 <vfprintf+0x198>
    30ca:	69 2d       	mov	r22, r9
    30cc:	70 e0       	ldi	r23, 0x00	; 0
    30ce:	02 c0       	rjmp	.+4      	; 0x30d4 <vfprintf+0x19c>
    30d0:	6f ef       	ldi	r22, 0xFF	; 255
    30d2:	7f ef       	ldi	r23, 0xFF	; 255
    30d4:	c5 01       	movw	r24, r10
    30d6:	30 d1       	rcall	.+608    	; 0x3338 <strnlen_P>
    30d8:	4c 01       	movw	r8, r24
    30da:	f3 2d       	mov	r31, r3
    30dc:	f0 68       	ori	r31, 0x80	; 128
    30de:	3f 2e       	mov	r3, r31
    30e0:	82 01       	movw	r16, r4
    30e2:	33 fc       	sbrc	r3, 3
    30e4:	19 c0       	rjmp	.+50     	; 0x3118 <vfprintf+0x1e0>
    30e6:	82 2d       	mov	r24, r2
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	88 16       	cp	r8, r24
    30ec:	99 06       	cpc	r9, r25
    30ee:	a0 f4       	brcc	.+40     	; 0x3118 <vfprintf+0x1e0>
    30f0:	b6 01       	movw	r22, r12
    30f2:	80 e2       	ldi	r24, 0x20	; 32
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	36 d1       	rcall	.+620    	; 0x3364 <fputc>
    30f8:	2a 94       	dec	r2
    30fa:	f5 cf       	rjmp	.-22     	; 0x30e6 <vfprintf+0x1ae>
    30fc:	f5 01       	movw	r30, r10
    30fe:	37 fc       	sbrc	r3, 7
    3100:	85 91       	lpm	r24, Z+
    3102:	37 fe       	sbrs	r3, 7
    3104:	81 91       	ld	r24, Z+
    3106:	5f 01       	movw	r10, r30
    3108:	b6 01       	movw	r22, r12
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	2b d1       	rcall	.+598    	; 0x3364 <fputc>
    310e:	21 10       	cpse	r2, r1
    3110:	2a 94       	dec	r2
    3112:	21 e0       	ldi	r18, 0x01	; 1
    3114:	82 1a       	sub	r8, r18
    3116:	91 08       	sbc	r9, r1
    3118:	81 14       	cp	r8, r1
    311a:	91 04       	cpc	r9, r1
    311c:	79 f7       	brne	.-34     	; 0x30fc <vfprintf+0x1c4>
    311e:	e1 c0       	rjmp	.+450    	; 0x32e2 <vfprintf+0x3aa>
    3120:	84 36       	cpi	r24, 0x64	; 100
    3122:	11 f0       	breq	.+4      	; 0x3128 <vfprintf+0x1f0>
    3124:	89 36       	cpi	r24, 0x69	; 105
    3126:	39 f5       	brne	.+78     	; 0x3176 <vfprintf+0x23e>
    3128:	f8 01       	movw	r30, r16
    312a:	37 fe       	sbrs	r3, 7
    312c:	07 c0       	rjmp	.+14     	; 0x313c <vfprintf+0x204>
    312e:	60 81       	ld	r22, Z
    3130:	71 81       	ldd	r23, Z+1	; 0x01
    3132:	82 81       	ldd	r24, Z+2	; 0x02
    3134:	93 81       	ldd	r25, Z+3	; 0x03
    3136:	0c 5f       	subi	r16, 0xFC	; 252
    3138:	1f 4f       	sbci	r17, 0xFF	; 255
    313a:	08 c0       	rjmp	.+16     	; 0x314c <vfprintf+0x214>
    313c:	60 81       	ld	r22, Z
    313e:	71 81       	ldd	r23, Z+1	; 0x01
    3140:	07 2e       	mov	r0, r23
    3142:	00 0c       	add	r0, r0
    3144:	88 0b       	sbc	r24, r24
    3146:	99 0b       	sbc	r25, r25
    3148:	0e 5f       	subi	r16, 0xFE	; 254
    314a:	1f 4f       	sbci	r17, 0xFF	; 255
    314c:	f3 2d       	mov	r31, r3
    314e:	ff 76       	andi	r31, 0x6F	; 111
    3150:	3f 2e       	mov	r3, r31
    3152:	97 ff       	sbrs	r25, 7
    3154:	09 c0       	rjmp	.+18     	; 0x3168 <vfprintf+0x230>
    3156:	90 95       	com	r25
    3158:	80 95       	com	r24
    315a:	70 95       	com	r23
    315c:	61 95       	neg	r22
    315e:	7f 4f       	sbci	r23, 0xFF	; 255
    3160:	8f 4f       	sbci	r24, 0xFF	; 255
    3162:	9f 4f       	sbci	r25, 0xFF	; 255
    3164:	f0 68       	ori	r31, 0x80	; 128
    3166:	3f 2e       	mov	r3, r31
    3168:	2a e0       	ldi	r18, 0x0A	; 10
    316a:	30 e0       	ldi	r19, 0x00	; 0
    316c:	a3 01       	movw	r20, r6
    316e:	36 d1       	rcall	.+620    	; 0x33dc <__ultoa_invert>
    3170:	88 2e       	mov	r8, r24
    3172:	86 18       	sub	r8, r6
    3174:	44 c0       	rjmp	.+136    	; 0x31fe <vfprintf+0x2c6>
    3176:	85 37       	cpi	r24, 0x75	; 117
    3178:	31 f4       	brne	.+12     	; 0x3186 <vfprintf+0x24e>
    317a:	23 2d       	mov	r18, r3
    317c:	2f 7e       	andi	r18, 0xEF	; 239
    317e:	b2 2e       	mov	r11, r18
    3180:	2a e0       	ldi	r18, 0x0A	; 10
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	25 c0       	rjmp	.+74     	; 0x31d0 <vfprintf+0x298>
    3186:	93 2d       	mov	r25, r3
    3188:	99 7f       	andi	r25, 0xF9	; 249
    318a:	b9 2e       	mov	r11, r25
    318c:	8f 36       	cpi	r24, 0x6F	; 111
    318e:	c1 f0       	breq	.+48     	; 0x31c0 <vfprintf+0x288>
    3190:	18 f4       	brcc	.+6      	; 0x3198 <vfprintf+0x260>
    3192:	88 35       	cpi	r24, 0x58	; 88
    3194:	79 f0       	breq	.+30     	; 0x31b4 <vfprintf+0x27c>
    3196:	ae c0       	rjmp	.+348    	; 0x32f4 <vfprintf+0x3bc>
    3198:	80 37       	cpi	r24, 0x70	; 112
    319a:	19 f0       	breq	.+6      	; 0x31a2 <vfprintf+0x26a>
    319c:	88 37       	cpi	r24, 0x78	; 120
    319e:	21 f0       	breq	.+8      	; 0x31a8 <vfprintf+0x270>
    31a0:	a9 c0       	rjmp	.+338    	; 0x32f4 <vfprintf+0x3bc>
    31a2:	e9 2f       	mov	r30, r25
    31a4:	e0 61       	ori	r30, 0x10	; 16
    31a6:	be 2e       	mov	r11, r30
    31a8:	b4 fe       	sbrs	r11, 4
    31aa:	0d c0       	rjmp	.+26     	; 0x31c6 <vfprintf+0x28e>
    31ac:	fb 2d       	mov	r31, r11
    31ae:	f4 60       	ori	r31, 0x04	; 4
    31b0:	bf 2e       	mov	r11, r31
    31b2:	09 c0       	rjmp	.+18     	; 0x31c6 <vfprintf+0x28e>
    31b4:	34 fe       	sbrs	r3, 4
    31b6:	0a c0       	rjmp	.+20     	; 0x31cc <vfprintf+0x294>
    31b8:	29 2f       	mov	r18, r25
    31ba:	26 60       	ori	r18, 0x06	; 6
    31bc:	b2 2e       	mov	r11, r18
    31be:	06 c0       	rjmp	.+12     	; 0x31cc <vfprintf+0x294>
    31c0:	28 e0       	ldi	r18, 0x08	; 8
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	05 c0       	rjmp	.+10     	; 0x31d0 <vfprintf+0x298>
    31c6:	20 e1       	ldi	r18, 0x10	; 16
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	02 c0       	rjmp	.+4      	; 0x31d0 <vfprintf+0x298>
    31cc:	20 e1       	ldi	r18, 0x10	; 16
    31ce:	32 e0       	ldi	r19, 0x02	; 2
    31d0:	f8 01       	movw	r30, r16
    31d2:	b7 fe       	sbrs	r11, 7
    31d4:	07 c0       	rjmp	.+14     	; 0x31e4 <vfprintf+0x2ac>
    31d6:	60 81       	ld	r22, Z
    31d8:	71 81       	ldd	r23, Z+1	; 0x01
    31da:	82 81       	ldd	r24, Z+2	; 0x02
    31dc:	93 81       	ldd	r25, Z+3	; 0x03
    31de:	0c 5f       	subi	r16, 0xFC	; 252
    31e0:	1f 4f       	sbci	r17, 0xFF	; 255
    31e2:	06 c0       	rjmp	.+12     	; 0x31f0 <vfprintf+0x2b8>
    31e4:	60 81       	ld	r22, Z
    31e6:	71 81       	ldd	r23, Z+1	; 0x01
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	0e 5f       	subi	r16, 0xFE	; 254
    31ee:	1f 4f       	sbci	r17, 0xFF	; 255
    31f0:	a3 01       	movw	r20, r6
    31f2:	f4 d0       	rcall	.+488    	; 0x33dc <__ultoa_invert>
    31f4:	88 2e       	mov	r8, r24
    31f6:	86 18       	sub	r8, r6
    31f8:	fb 2d       	mov	r31, r11
    31fa:	ff 77       	andi	r31, 0x7F	; 127
    31fc:	3f 2e       	mov	r3, r31
    31fe:	36 fe       	sbrs	r3, 6
    3200:	0d c0       	rjmp	.+26     	; 0x321c <vfprintf+0x2e4>
    3202:	23 2d       	mov	r18, r3
    3204:	2e 7f       	andi	r18, 0xFE	; 254
    3206:	a2 2e       	mov	r10, r18
    3208:	89 14       	cp	r8, r9
    320a:	58 f4       	brcc	.+22     	; 0x3222 <vfprintf+0x2ea>
    320c:	34 fe       	sbrs	r3, 4
    320e:	0b c0       	rjmp	.+22     	; 0x3226 <vfprintf+0x2ee>
    3210:	32 fc       	sbrc	r3, 2
    3212:	09 c0       	rjmp	.+18     	; 0x3226 <vfprintf+0x2ee>
    3214:	83 2d       	mov	r24, r3
    3216:	8e 7e       	andi	r24, 0xEE	; 238
    3218:	a8 2e       	mov	r10, r24
    321a:	05 c0       	rjmp	.+10     	; 0x3226 <vfprintf+0x2ee>
    321c:	b8 2c       	mov	r11, r8
    321e:	a3 2c       	mov	r10, r3
    3220:	03 c0       	rjmp	.+6      	; 0x3228 <vfprintf+0x2f0>
    3222:	b8 2c       	mov	r11, r8
    3224:	01 c0       	rjmp	.+2      	; 0x3228 <vfprintf+0x2f0>
    3226:	b9 2c       	mov	r11, r9
    3228:	a4 fe       	sbrs	r10, 4
    322a:	0f c0       	rjmp	.+30     	; 0x324a <vfprintf+0x312>
    322c:	fe 01       	movw	r30, r28
    322e:	e8 0d       	add	r30, r8
    3230:	f1 1d       	adc	r31, r1
    3232:	80 81       	ld	r24, Z
    3234:	80 33       	cpi	r24, 0x30	; 48
    3236:	21 f4       	brne	.+8      	; 0x3240 <vfprintf+0x308>
    3238:	9a 2d       	mov	r25, r10
    323a:	99 7e       	andi	r25, 0xE9	; 233
    323c:	a9 2e       	mov	r10, r25
    323e:	09 c0       	rjmp	.+18     	; 0x3252 <vfprintf+0x31a>
    3240:	a2 fe       	sbrs	r10, 2
    3242:	06 c0       	rjmp	.+12     	; 0x3250 <vfprintf+0x318>
    3244:	b3 94       	inc	r11
    3246:	b3 94       	inc	r11
    3248:	04 c0       	rjmp	.+8      	; 0x3252 <vfprintf+0x31a>
    324a:	8a 2d       	mov	r24, r10
    324c:	86 78       	andi	r24, 0x86	; 134
    324e:	09 f0       	breq	.+2      	; 0x3252 <vfprintf+0x31a>
    3250:	b3 94       	inc	r11
    3252:	a3 fc       	sbrc	r10, 3
    3254:	10 c0       	rjmp	.+32     	; 0x3276 <vfprintf+0x33e>
    3256:	a0 fe       	sbrs	r10, 0
    3258:	06 c0       	rjmp	.+12     	; 0x3266 <vfprintf+0x32e>
    325a:	b2 14       	cp	r11, r2
    325c:	80 f4       	brcc	.+32     	; 0x327e <vfprintf+0x346>
    325e:	28 0c       	add	r2, r8
    3260:	92 2c       	mov	r9, r2
    3262:	9b 18       	sub	r9, r11
    3264:	0d c0       	rjmp	.+26     	; 0x3280 <vfprintf+0x348>
    3266:	b2 14       	cp	r11, r2
    3268:	58 f4       	brcc	.+22     	; 0x3280 <vfprintf+0x348>
    326a:	b6 01       	movw	r22, r12
    326c:	80 e2       	ldi	r24, 0x20	; 32
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	79 d0       	rcall	.+242    	; 0x3364 <fputc>
    3272:	b3 94       	inc	r11
    3274:	f8 cf       	rjmp	.-16     	; 0x3266 <vfprintf+0x32e>
    3276:	b2 14       	cp	r11, r2
    3278:	18 f4       	brcc	.+6      	; 0x3280 <vfprintf+0x348>
    327a:	2b 18       	sub	r2, r11
    327c:	02 c0       	rjmp	.+4      	; 0x3282 <vfprintf+0x34a>
    327e:	98 2c       	mov	r9, r8
    3280:	21 2c       	mov	r2, r1
    3282:	a4 fe       	sbrs	r10, 4
    3284:	0f c0       	rjmp	.+30     	; 0x32a4 <vfprintf+0x36c>
    3286:	b6 01       	movw	r22, r12
    3288:	80 e3       	ldi	r24, 0x30	; 48
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	6b d0       	rcall	.+214    	; 0x3364 <fputc>
    328e:	a2 fe       	sbrs	r10, 2
    3290:	16 c0       	rjmp	.+44     	; 0x32be <vfprintf+0x386>
    3292:	a1 fc       	sbrc	r10, 1
    3294:	03 c0       	rjmp	.+6      	; 0x329c <vfprintf+0x364>
    3296:	88 e7       	ldi	r24, 0x78	; 120
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	02 c0       	rjmp	.+4      	; 0x32a0 <vfprintf+0x368>
    329c:	88 e5       	ldi	r24, 0x58	; 88
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	b6 01       	movw	r22, r12
    32a2:	0c c0       	rjmp	.+24     	; 0x32bc <vfprintf+0x384>
    32a4:	8a 2d       	mov	r24, r10
    32a6:	86 78       	andi	r24, 0x86	; 134
    32a8:	51 f0       	breq	.+20     	; 0x32be <vfprintf+0x386>
    32aa:	a1 fe       	sbrs	r10, 1
    32ac:	02 c0       	rjmp	.+4      	; 0x32b2 <vfprintf+0x37a>
    32ae:	8b e2       	ldi	r24, 0x2B	; 43
    32b0:	01 c0       	rjmp	.+2      	; 0x32b4 <vfprintf+0x37c>
    32b2:	80 e2       	ldi	r24, 0x20	; 32
    32b4:	a7 fc       	sbrc	r10, 7
    32b6:	8d e2       	ldi	r24, 0x2D	; 45
    32b8:	b6 01       	movw	r22, r12
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	53 d0       	rcall	.+166    	; 0x3364 <fputc>
    32be:	89 14       	cp	r8, r9
    32c0:	30 f4       	brcc	.+12     	; 0x32ce <vfprintf+0x396>
    32c2:	b6 01       	movw	r22, r12
    32c4:	80 e3       	ldi	r24, 0x30	; 48
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	4d d0       	rcall	.+154    	; 0x3364 <fputc>
    32ca:	9a 94       	dec	r9
    32cc:	f8 cf       	rjmp	.-16     	; 0x32be <vfprintf+0x386>
    32ce:	8a 94       	dec	r8
    32d0:	f3 01       	movw	r30, r6
    32d2:	e8 0d       	add	r30, r8
    32d4:	f1 1d       	adc	r31, r1
    32d6:	80 81       	ld	r24, Z
    32d8:	b6 01       	movw	r22, r12
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	43 d0       	rcall	.+134    	; 0x3364 <fputc>
    32de:	81 10       	cpse	r8, r1
    32e0:	f6 cf       	rjmp	.-20     	; 0x32ce <vfprintf+0x396>
    32e2:	22 20       	and	r2, r2
    32e4:	09 f4       	brne	.+2      	; 0x32e8 <vfprintf+0x3b0>
    32e6:	4e ce       	rjmp	.-868    	; 0x2f84 <vfprintf+0x4c>
    32e8:	b6 01       	movw	r22, r12
    32ea:	80 e2       	ldi	r24, 0x20	; 32
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	3a d0       	rcall	.+116    	; 0x3364 <fputc>
    32f0:	2a 94       	dec	r2
    32f2:	f7 cf       	rjmp	.-18     	; 0x32e2 <vfprintf+0x3aa>
    32f4:	f6 01       	movw	r30, r12
    32f6:	86 81       	ldd	r24, Z+6	; 0x06
    32f8:	97 81       	ldd	r25, Z+7	; 0x07
    32fa:	02 c0       	rjmp	.+4      	; 0x3300 <vfprintf+0x3c8>
    32fc:	8f ef       	ldi	r24, 0xFF	; 255
    32fe:	9f ef       	ldi	r25, 0xFF	; 255
    3300:	2b 96       	adiw	r28, 0x0b	; 11
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	de bf       	out	0x3e, r29	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	cd bf       	out	0x3d, r28	; 61
    330c:	df 91       	pop	r29
    330e:	cf 91       	pop	r28
    3310:	1f 91       	pop	r17
    3312:	0f 91       	pop	r16
    3314:	ff 90       	pop	r15
    3316:	ef 90       	pop	r14
    3318:	df 90       	pop	r13
    331a:	cf 90       	pop	r12
    331c:	bf 90       	pop	r11
    331e:	af 90       	pop	r10
    3320:	9f 90       	pop	r9
    3322:	8f 90       	pop	r8
    3324:	7f 90       	pop	r7
    3326:	6f 90       	pop	r6
    3328:	5f 90       	pop	r5
    332a:	4f 90       	pop	r4
    332c:	3f 90       	pop	r3
    332e:	2f 90       	pop	r2
    3330:	08 95       	ret

00003332 <__ctype_isfalse>:
    3332:	99 27       	eor	r25, r25
    3334:	88 27       	eor	r24, r24

00003336 <__ctype_istrue>:
    3336:	08 95       	ret

00003338 <strnlen_P>:
    3338:	fc 01       	movw	r30, r24
    333a:	05 90       	lpm	r0, Z+
    333c:	61 50       	subi	r22, 0x01	; 1
    333e:	70 40       	sbci	r23, 0x00	; 0
    3340:	01 10       	cpse	r0, r1
    3342:	d8 f7       	brcc	.-10     	; 0x333a <strnlen_P+0x2>
    3344:	80 95       	com	r24
    3346:	90 95       	com	r25
    3348:	8e 0f       	add	r24, r30
    334a:	9f 1f       	adc	r25, r31
    334c:	08 95       	ret

0000334e <strnlen>:
    334e:	fc 01       	movw	r30, r24
    3350:	61 50       	subi	r22, 0x01	; 1
    3352:	70 40       	sbci	r23, 0x00	; 0
    3354:	01 90       	ld	r0, Z+
    3356:	01 10       	cpse	r0, r1
    3358:	d8 f7       	brcc	.-10     	; 0x3350 <strnlen+0x2>
    335a:	80 95       	com	r24
    335c:	90 95       	com	r25
    335e:	8e 0f       	add	r24, r30
    3360:	9f 1f       	adc	r25, r31
    3362:	08 95       	ret

00003364 <fputc>:
    3364:	0f 93       	push	r16
    3366:	1f 93       	push	r17
    3368:	cf 93       	push	r28
    336a:	df 93       	push	r29
    336c:	fb 01       	movw	r30, r22
    336e:	23 81       	ldd	r18, Z+3	; 0x03
    3370:	21 fd       	sbrc	r18, 1
    3372:	03 c0       	rjmp	.+6      	; 0x337a <fputc+0x16>
    3374:	8f ef       	ldi	r24, 0xFF	; 255
    3376:	9f ef       	ldi	r25, 0xFF	; 255
    3378:	2c c0       	rjmp	.+88     	; 0x33d2 <fputc+0x6e>
    337a:	22 ff       	sbrs	r18, 2
    337c:	16 c0       	rjmp	.+44     	; 0x33aa <fputc+0x46>
    337e:	46 81       	ldd	r20, Z+6	; 0x06
    3380:	57 81       	ldd	r21, Z+7	; 0x07
    3382:	24 81       	ldd	r18, Z+4	; 0x04
    3384:	35 81       	ldd	r19, Z+5	; 0x05
    3386:	42 17       	cp	r20, r18
    3388:	53 07       	cpc	r21, r19
    338a:	44 f4       	brge	.+16     	; 0x339c <fputc+0x38>
    338c:	a0 81       	ld	r26, Z
    338e:	b1 81       	ldd	r27, Z+1	; 0x01
    3390:	9d 01       	movw	r18, r26
    3392:	2f 5f       	subi	r18, 0xFF	; 255
    3394:	3f 4f       	sbci	r19, 0xFF	; 255
    3396:	31 83       	std	Z+1, r19	; 0x01
    3398:	20 83       	st	Z, r18
    339a:	8c 93       	st	X, r24
    339c:	26 81       	ldd	r18, Z+6	; 0x06
    339e:	37 81       	ldd	r19, Z+7	; 0x07
    33a0:	2f 5f       	subi	r18, 0xFF	; 255
    33a2:	3f 4f       	sbci	r19, 0xFF	; 255
    33a4:	37 83       	std	Z+7, r19	; 0x07
    33a6:	26 83       	std	Z+6, r18	; 0x06
    33a8:	14 c0       	rjmp	.+40     	; 0x33d2 <fputc+0x6e>
    33aa:	8b 01       	movw	r16, r22
    33ac:	ec 01       	movw	r28, r24
    33ae:	fb 01       	movw	r30, r22
    33b0:	00 84       	ldd	r0, Z+8	; 0x08
    33b2:	f1 85       	ldd	r31, Z+9	; 0x09
    33b4:	e0 2d       	mov	r30, r0
    33b6:	09 95       	icall
    33b8:	89 2b       	or	r24, r25
    33ba:	e1 f6       	brne	.-72     	; 0x3374 <fputc+0x10>
    33bc:	d8 01       	movw	r26, r16
    33be:	16 96       	adiw	r26, 0x06	; 6
    33c0:	8d 91       	ld	r24, X+
    33c2:	9c 91       	ld	r25, X
    33c4:	17 97       	sbiw	r26, 0x07	; 7
    33c6:	01 96       	adiw	r24, 0x01	; 1
    33c8:	17 96       	adiw	r26, 0x07	; 7
    33ca:	9c 93       	st	X, r25
    33cc:	8e 93       	st	-X, r24
    33ce:	16 97       	sbiw	r26, 0x06	; 6
    33d0:	ce 01       	movw	r24, r28
    33d2:	df 91       	pop	r29
    33d4:	cf 91       	pop	r28
    33d6:	1f 91       	pop	r17
    33d8:	0f 91       	pop	r16
    33da:	08 95       	ret

000033dc <__ultoa_invert>:
    33dc:	fa 01       	movw	r30, r20
    33de:	aa 27       	eor	r26, r26
    33e0:	28 30       	cpi	r18, 0x08	; 8
    33e2:	51 f1       	breq	.+84     	; 0x3438 <__ultoa_invert+0x5c>
    33e4:	20 31       	cpi	r18, 0x10	; 16
    33e6:	81 f1       	breq	.+96     	; 0x3448 <__ultoa_invert+0x6c>
    33e8:	e8 94       	clt
    33ea:	6f 93       	push	r22
    33ec:	6e 7f       	andi	r22, 0xFE	; 254
    33ee:	6e 5f       	subi	r22, 0xFE	; 254
    33f0:	7f 4f       	sbci	r23, 0xFF	; 255
    33f2:	8f 4f       	sbci	r24, 0xFF	; 255
    33f4:	9f 4f       	sbci	r25, 0xFF	; 255
    33f6:	af 4f       	sbci	r26, 0xFF	; 255
    33f8:	b1 e0       	ldi	r27, 0x01	; 1
    33fa:	3e d0       	rcall	.+124    	; 0x3478 <__ultoa_invert+0x9c>
    33fc:	b4 e0       	ldi	r27, 0x04	; 4
    33fe:	3c d0       	rcall	.+120    	; 0x3478 <__ultoa_invert+0x9c>
    3400:	67 0f       	add	r22, r23
    3402:	78 1f       	adc	r23, r24
    3404:	89 1f       	adc	r24, r25
    3406:	9a 1f       	adc	r25, r26
    3408:	a1 1d       	adc	r26, r1
    340a:	68 0f       	add	r22, r24
    340c:	79 1f       	adc	r23, r25
    340e:	8a 1f       	adc	r24, r26
    3410:	91 1d       	adc	r25, r1
    3412:	a1 1d       	adc	r26, r1
    3414:	6a 0f       	add	r22, r26
    3416:	71 1d       	adc	r23, r1
    3418:	81 1d       	adc	r24, r1
    341a:	91 1d       	adc	r25, r1
    341c:	a1 1d       	adc	r26, r1
    341e:	20 d0       	rcall	.+64     	; 0x3460 <__ultoa_invert+0x84>
    3420:	09 f4       	brne	.+2      	; 0x3424 <__ultoa_invert+0x48>
    3422:	68 94       	set
    3424:	3f 91       	pop	r19
    3426:	2a e0       	ldi	r18, 0x0A	; 10
    3428:	26 9f       	mul	r18, r22
    342a:	11 24       	eor	r1, r1
    342c:	30 19       	sub	r19, r0
    342e:	30 5d       	subi	r19, 0xD0	; 208
    3430:	31 93       	st	Z+, r19
    3432:	de f6       	brtc	.-74     	; 0x33ea <__ultoa_invert+0xe>
    3434:	cf 01       	movw	r24, r30
    3436:	08 95       	ret
    3438:	46 2f       	mov	r20, r22
    343a:	47 70       	andi	r20, 0x07	; 7
    343c:	40 5d       	subi	r20, 0xD0	; 208
    343e:	41 93       	st	Z+, r20
    3440:	b3 e0       	ldi	r27, 0x03	; 3
    3442:	0f d0       	rcall	.+30     	; 0x3462 <__ultoa_invert+0x86>
    3444:	c9 f7       	brne	.-14     	; 0x3438 <__ultoa_invert+0x5c>
    3446:	f6 cf       	rjmp	.-20     	; 0x3434 <__ultoa_invert+0x58>
    3448:	46 2f       	mov	r20, r22
    344a:	4f 70       	andi	r20, 0x0F	; 15
    344c:	40 5d       	subi	r20, 0xD0	; 208
    344e:	4a 33       	cpi	r20, 0x3A	; 58
    3450:	18 f0       	brcs	.+6      	; 0x3458 <__ultoa_invert+0x7c>
    3452:	49 5d       	subi	r20, 0xD9	; 217
    3454:	31 fd       	sbrc	r19, 1
    3456:	40 52       	subi	r20, 0x20	; 32
    3458:	41 93       	st	Z+, r20
    345a:	02 d0       	rcall	.+4      	; 0x3460 <__ultoa_invert+0x84>
    345c:	a9 f7       	brne	.-22     	; 0x3448 <__ultoa_invert+0x6c>
    345e:	ea cf       	rjmp	.-44     	; 0x3434 <__ultoa_invert+0x58>
    3460:	b4 e0       	ldi	r27, 0x04	; 4
    3462:	a6 95       	lsr	r26
    3464:	97 95       	ror	r25
    3466:	87 95       	ror	r24
    3468:	77 95       	ror	r23
    346a:	67 95       	ror	r22
    346c:	ba 95       	dec	r27
    346e:	c9 f7       	brne	.-14     	; 0x3462 <__ultoa_invert+0x86>
    3470:	00 97       	sbiw	r24, 0x00	; 0
    3472:	61 05       	cpc	r22, r1
    3474:	71 05       	cpc	r23, r1
    3476:	08 95       	ret
    3478:	9b 01       	movw	r18, r22
    347a:	ac 01       	movw	r20, r24
    347c:	0a 2e       	mov	r0, r26
    347e:	06 94       	lsr	r0
    3480:	57 95       	ror	r21
    3482:	47 95       	ror	r20
    3484:	37 95       	ror	r19
    3486:	27 95       	ror	r18
    3488:	ba 95       	dec	r27
    348a:	c9 f7       	brne	.-14     	; 0x347e <__ultoa_invert+0xa2>
    348c:	62 0f       	add	r22, r18
    348e:	73 1f       	adc	r23, r19
    3490:	84 1f       	adc	r24, r20
    3492:	95 1f       	adc	r25, r21
    3494:	a0 1d       	adc	r26, r0
    3496:	08 95       	ret

00003498 <_exit>:
    3498:	f8 94       	cli

0000349a <__stop_program>:
    349a:	ff cf       	rjmp	.-2      	; 0x349a <__stop_program>
