
at90keyboardmouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000011d0  00001264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800110  00800110  00001274  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005a4a  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d53  00000000  00000000  00006fee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000081f6  00000000  00000000  00008d41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000818  00000000  00000000  00010f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00016fde  00000000  00000000  00011750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003116  00000000  00000000  0002872e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f0  00000000  00000000  0002b844  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000071a6  00000000  00000000  0002bd34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cd c0       	rjmp	.+410    	; 0x19c <__ctors_end>
       2:	00 00       	nop
       4:	e8 c0       	rjmp	.+464    	; 0x1d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	e6 c0       	rjmp	.+460    	; 0x1d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	e4 c0       	rjmp	.+456    	; 0x1d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	e2 c0       	rjmp	.+452    	; 0x1d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	e0 c0       	rjmp	.+448    	; 0x1d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	de c0       	rjmp	.+444    	; 0x1d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	dc c0       	rjmp	.+440    	; 0x1d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	da c0       	rjmp	.+436    	; 0x1d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d8 c0       	rjmp	.+432    	; 0x1d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	32 c6       	rjmp	.+3172   	; 0xc8e <__vector_10>
      2a:	00 00       	nop
      2c:	d4 c0       	rjmp	.+424    	; 0x1d6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d2 c0       	rjmp	.+420    	; 0x1d6 <__bad_interrupt>
      32:	00 00       	nop
      34:	d0 c0       	rjmp	.+416    	; 0x1d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	ce c0       	rjmp	.+412    	; 0x1d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	cc c0       	rjmp	.+408    	; 0x1d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ca c0       	rjmp	.+404    	; 0x1d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c8 c0       	rjmp	.+400    	; 0x1d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	c6 c0       	rjmp	.+396    	; 0x1d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c4 c0       	rjmp	.+392    	; 0x1d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c2 c0       	rjmp	.+388    	; 0x1d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	c0 c0       	rjmp	.+384    	; 0x1d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	be c0       	rjmp	.+380    	; 0x1d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bc c0       	rjmp	.+376    	; 0x1d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ba c0       	rjmp	.+372    	; 0x1d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b8 c0       	rjmp	.+368    	; 0x1d6 <__bad_interrupt>
      66:	00 00       	nop
      68:	b6 c0       	rjmp	.+364    	; 0x1d6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b4 c0       	rjmp	.+360    	; 0x1d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b2 c0       	rjmp	.+356    	; 0x1d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	b0 c0       	rjmp	.+352    	; 0x1d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	ae c0       	rjmp	.+348    	; 0x1d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ac c0       	rjmp	.+344    	; 0x1d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	aa c0       	rjmp	.+340    	; 0x1d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a8 c0       	rjmp	.+336    	; 0x1d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	a6 c0       	rjmp	.+332    	; 0x1d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a4 c0       	rjmp	.+328    	; 0x1d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a2 c0       	rjmp	.+324    	; 0x1d6 <__bad_interrupt>
      92:	00 00       	nop
      94:	a0 c0       	rjmp	.+320    	; 0x1d6 <__bad_interrupt>
	...

00000098 <ProductString>:
      98:	36 03 4c 00 55 00 46 00 41 00 20 00 4d 00 75 00     6.L.U.F.A. .M.u.
      a8:	6c 00 74 00 69 00 20 00 48 00 49 00 44 00 20 00     l.t.i. .H.I.D. .
      b8:	52 00 65 00 70 00 6f 00 72 00 74 00 20 00 44 00     R.e.p.o.r.t. .D.
      c8:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000d0 <ManufacturerString>:
      d0:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      e0:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000ea <LanguageString>:
      ea:	04 03 09 04                                         ....

000000ee <ConfigurationDescriptor>:
      ee:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
      fe:	00 00 09 21 11 01 00 01 22 79 00 07 05 81 03 08     ...!...."y......
     10e:	00 05                                               ..

00000110 <DeviceDescriptor>:
     110:	12 01 10 01 00 00 00 08 69 69 25 22 01 00 01 02     ........ii%"....
     120:	00 01                                               ..

00000122 <HIDReport>:
     122:	05 01 09 02 a1 01 85 01 09 01 a1 00 05 09 19 01     ................
     132:	29 03 15 00 25 01 95 03 75 01 81 02 95 01 75 05     )...%...u.....u.
     142:	81 01 05 01 09 30 09 31 15 ff 25 01 35 ff 45 01     .....0.1..%.5.E.
     152:	95 02 75 08 81 06 c0 c0 05 01 09 06 a1 01 85 02     ..u.............
     162:	05 07 19 e0 29 e7 15 00 25 01 75 01 95 08 81 02     ....)...%.u.....
     172:	95 01 75 08 81 01 05 08 19 01 29 05 95 05 75 01     ..u.......)...u.
     182:	91 02 95 01 75 03 91 01 15 00 25 65 05 07 19 00     ....u.....%e....
     192:	29 65 95 06 75 08 81 00 c0 00                       )e..u.....

0000019c <__ctors_end>:
     19c:	11 24       	eor	r1, r1
     19e:	1f be       	out	0x3f, r1	; 63
     1a0:	cf ef       	ldi	r28, 0xFF	; 255
     1a2:	d0 e2       	ldi	r29, 0x20	; 32
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	cd bf       	out	0x3d, r28	; 61

000001a8 <__do_copy_data>:
     1a8:	11 e0       	ldi	r17, 0x01	; 1
     1aa:	a0 e0       	ldi	r26, 0x00	; 0
     1ac:	b1 e0       	ldi	r27, 0x01	; 1
     1ae:	e0 ed       	ldi	r30, 0xD0	; 208
     1b0:	f1 e1       	ldi	r31, 0x11	; 17
     1b2:	00 e0       	ldi	r16, 0x00	; 0
     1b4:	0b bf       	out	0x3b, r16	; 59
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <__do_copy_data+0x14>
     1b8:	07 90       	elpm	r0, Z+
     1ba:	0d 92       	st	X+, r0
     1bc:	a0 31       	cpi	r26, 0x10	; 16
     1be:	b1 07       	cpc	r27, r17
     1c0:	d9 f7       	brne	.-10     	; 0x1b8 <__do_copy_data+0x10>

000001c2 <__do_clear_bss>:
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	a0 e1       	ldi	r26, 0x10	; 16
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	01 c0       	rjmp	.+2      	; 0x1cc <.do_clear_bss_start>

000001ca <.do_clear_bss_loop>:
     1ca:	1d 92       	st	X+, r1

000001cc <.do_clear_bss_start>:
     1cc:	a5 32       	cpi	r26, 0x25	; 37
     1ce:	b2 07       	cpc	r27, r18
     1d0:	e1 f7       	brne	.-8      	; 0x1ca <.do_clear_bss_loop>
     1d2:	6a d0       	rcall	.+212    	; 0x2a8 <main>
     1d4:	fb c7       	rjmp	.+4086   	; 0x11cc <_exit>

000001d6 <__bad_interrupt>:
     1d6:	14 cf       	rjmp	.-472    	; 0x0 <__vectors>

000001d8 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
     1d8:	29 2f       	mov	r18, r25
     1da:	33 27       	eor	r19, r19
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     1dc:	23 30       	cpi	r18, 0x03	; 3
     1de:	31 05       	cpc	r19, r1
     1e0:	c9 f0       	breq	.+50     	; 0x214 <CALLBACK_USB_GetDescriptor+0x3c>
     1e2:	40 f4       	brcc	.+16     	; 0x1f4 <CALLBACK_USB_GetDescriptor+0x1c>
     1e4:	21 30       	cpi	r18, 0x01	; 1
     1e6:	31 05       	cpc	r19, r1
     1e8:	09 f4       	brne	.+2      	; 0x1ec <CALLBACK_USB_GetDescriptor+0x14>
     1ea:	38 c0       	rjmp	.+112    	; 0x25c <CALLBACK_USB_GetDescriptor+0x84>
     1ec:	22 30       	cpi	r18, 0x02	; 2
     1ee:	31 05       	cpc	r19, r1
     1f0:	61 f0       	breq	.+24     	; 0x20a <CALLBACK_USB_GetDescriptor+0x32>
     1f2:	06 c0       	rjmp	.+12     	; 0x200 <CALLBACK_USB_GetDescriptor+0x28>
     1f4:	21 32       	cpi	r18, 0x21	; 33
     1f6:	31 05       	cpc	r19, r1
     1f8:	39 f1       	breq	.+78     	; 0x248 <CALLBACK_USB_GetDescriptor+0x70>
     1fa:	22 32       	cpi	r18, 0x22	; 34
     1fc:	31 05       	cpc	r19, r1
     1fe:	49 f1       	breq	.+82     	; 0x252 <CALLBACK_USB_GetDescriptor+0x7a>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	32 c0       	rjmp	.+100    	; 0x26e <CALLBACK_USB_GetDescriptor+0x96>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
     20a:	82 e2       	ldi	r24, 0x22	; 34
     20c:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
     20e:	2e ee       	ldi	r18, 0xEE	; 238
     210:	30 e0       	ldi	r19, 0x00	; 0
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
     212:	2d c0       	rjmp	.+90     	; 0x26e <CALLBACK_USB_GetDescriptor+0x96>
        case DTYPE_String:
            switch (DescriptorNumber)
     214:	99 27       	eor	r25, r25
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	91 05       	cpc	r25, r1
     21a:	51 f0       	breq	.+20     	; 0x230 <CALLBACK_USB_GetDescriptor+0x58>
     21c:	18 f0       	brcs	.+6      	; 0x224 <CALLBACK_USB_GetDescriptor+0x4c>
     21e:	02 97       	sbiw	r24, 0x02	; 2
     220:	69 f0       	breq	.+26     	; 0x23c <CALLBACK_USB_GetDescriptor+0x64>
     222:	21 c0       	rjmp	.+66     	; 0x266 <CALLBACK_USB_GetDescriptor+0x8e>
            {
                case STRING_ID_Language:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
     224:	ea ee       	ldi	r30, 0xEA	; 234
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	84 91       	lpm	r24, Z
     22a:	90 e0       	ldi	r25, 0x00	; 0
            break;
        case DTYPE_String:
            switch (DescriptorNumber)
            {
                case STRING_ID_Language:
                    Address = &LanguageString;
     22c:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
     22e:	1f c0       	rjmp	.+62     	; 0x26e <CALLBACK_USB_GetDescriptor+0x96>
                case STRING_ID_Manufacturer:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     230:	e0 ed       	ldi	r30, 0xD0	; 208
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	84 91       	lpm	r24, Z
     236:	90 e0       	ldi	r25, 0x00	; 0
                case STRING_ID_Language:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
                    break;
                case STRING_ID_Manufacturer:
                    Address = &ManufacturerString;
     238:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
     23a:	19 c0       	rjmp	.+50     	; 0x26e <CALLBACK_USB_GetDescriptor+0x96>
                case STRING_ID_Product:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
     23c:	e8 e9       	ldi	r30, 0x98	; 152
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	84 91       	lpm	r24, Z
     242:	90 e0       	ldi	r25, 0x00	; 0
                case STRING_ID_Manufacturer:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case STRING_ID_Product:
                    Address = &ProductString;
     244:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
     246:	13 c0       	rjmp	.+38     	; 0x26e <CALLBACK_USB_GetDescriptor+0x96>
            }

            break;
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_HIDData;
            Size    = sizeof(USB_HID_Descriptor_HID_t);
     248:	89 e0       	ldi	r24, 0x09	; 9
     24a:	90 e0       	ldi	r25, 0x00	; 0
                    break;
            }

            break;
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_HIDData;
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	31 e0       	ldi	r19, 0x01	; 1
            Size    = sizeof(USB_HID_Descriptor_HID_t);
            break;
     250:	0e c0       	rjmp	.+28     	; 0x26e <CALLBACK_USB_GetDescriptor+0x96>
        case HID_DTYPE_Report:
            Address = &HIDReport;
            Size    = sizeof(HIDReport);
     252:	89 e7       	ldi	r24, 0x79	; 121
     254:	90 e0       	ldi	r25, 0x00	; 0
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_HIDData;
            Size    = sizeof(USB_HID_Descriptor_HID_t);
            break;
        case HID_DTYPE_Report:
            Address = &HIDReport;
     256:	22 e2       	ldi	r18, 0x22	; 34
     258:	31 e0       	ldi	r19, 0x01	; 1
            Size    = sizeof(HIDReport);
            break;
     25a:	09 c0       	rjmp	.+18     	; 0x26e <CALLBACK_USB_GetDescriptor+0x96>

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
     25c:	82 e1       	ldi	r24, 0x12	; 18
     25e:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
     260:	20 e1       	ldi	r18, 0x10	; 16
     262:	31 e0       	ldi	r19, 0x01	; 1
     264:	04 c0       	rjmp	.+8      	; 0x26e <CALLBACK_USB_GetDescriptor+0x96>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
     26a:	20 e0       	ldi	r18, 0x00	; 0
     26c:	30 e0       	ldi	r19, 0x00	; 0
            Address = &HIDReport;
            Size    = sizeof(HIDReport);
            break;
    }

    *DescriptorAddress = Address;
     26e:	fa 01       	movw	r30, r20
     270:	31 83       	std	Z+1, r19	; 0x01
     272:	20 83       	st	Z, r18
    return Size;
}
     274:	08 95       	ret

00000276 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
     276:	84 b7       	in	r24, 0x34	; 52
     278:	87 7f       	andi	r24, 0xF7	; 247
     27a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	f8 94       	cli
     280:	a8 95       	wdr
     282:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     286:	88 61       	ori	r24, 0x18	; 24
     288:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     28c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     290:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	80 e8       	ldi	r24, 0x80	; 128
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	f8 94       	cli
     29a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     29e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     2a2:	0f be       	out	0x3f, r0	; 63
    clock_prescale_set(clock_div_1);

    /* Hardware Initialization */
    //Joystick_Init();
    //LEDs_Init();
    USB_Init();
     2a4:	d8 c4       	rjmp	.+2480   	; 0xc56 <USB_Init>
     2a6:	08 95       	ret

000002a8 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    SetupHardware();
     2a8:	e6 df       	rcall	.-52     	; 0x276 <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     2aa:	78 94       	sei
    //LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
    GlobalInterruptEnable();

    for (;;)
    {
        HID_Device_USBTask(&Device_HID_Interface);
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	91 e0       	ldi	r25, 0x01	; 1
        USB_USBTask();
     2b0:	95 d1       	rcall	.+810    	; 0x5dc <HID_Device_USBTask>
     2b2:	6d d7       	rcall	.+3802   	; 0x118e <USB_USBTask>
     2b4:	fb cf       	rjmp	.-10     	; 0x2ac <main+0x4>

000002b6 <EVENT_USB_Device_Connect>:
    USB_Init();
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
     2b6:	08 95       	ret

000002b8 <EVENT_USB_Device_Disconnect>:
    //LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
     2b8:	08 95       	ret

000002ba <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
    bool ConfigSuccess = true;

    ConfigSuccess &= HID_Device_ConfigureEndpoints(&Device_HID_Interface);
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	7a d1       	rcall	.+756    	; 0x5b4 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     2c0:	e2 ee       	ldi	r30, 0xE2	; 226
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	80 81       	ld	r24, Z
     2c6:	84 60       	ori	r24, 0x04	; 4
     2c8:	80 83       	st	Z, r24
     2ca:	08 95       	ret

000002cc <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
    HID_Device_ProcessControlRequest(&Device_HID_Interface);
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	1e c0       	rjmp	.+60     	; 0x30e <HID_Device_ProcessControlRequest>
     2d2:	08 95       	ret

000002d4 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     2d4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
     2d8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
     2dc:	00 97       	sbiw	r24, 0x00	; 0
     2de:	29 f0       	breq	.+10     	; 0x2ea <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
     2e6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>
     2ea:	08 95       	ret

000002ec <CALLBACK_HID_Device_CreateHIDReport>:
        HIDInterfaceInfo,
        uint8_t* const ReportID,
        const uint8_t ReportType,
        void* ReportData,
        uint16_t* const ReportSize)
{
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
    if (!(ButtonStatus_LCL & BUTTONS_BUTTON1))
    {
        USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)
                ReportData;

        KeyboardReport->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	f9 01       	movw	r30, r18
     2f4:	80 83       	st	Z, r24
        if (JoyStatus_LCL & JOY_PRESS)
        {
            KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_E;
        }

        *ReportID   = HID_REPORTID_KeyboardReport;
     2f6:	fb 01       	movw	r30, r22
     2f8:	80 83       	st	Z, r24
        *ReportSize = sizeof(USB_KeyboardReport_Data_t);
     2fa:	88 e0       	ldi	r24, 0x08	; 8
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	f8 01       	movw	r30, r16
     300:	91 83       	std	Z+1, r25	; 0x01
     302:	80 83       	st	Z, r24

        *ReportID   = HID_REPORTID_MouseReport;
        *ReportSize = sizeof(USB_MouseReport_Data_t);
        return true;
    }
}
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	08 95       	ret

0000030c <CALLBACK_HID_Device_ProcessHIDReport>:
        HIDInterfaceInfo,
        const uint8_t ReportID,
        const uint8_t ReportType,
        const void* ReportData,
        const uint16_t ReportSize)
{
     30c:	08 95       	ret

0000030e <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     30e:	3f 92       	push	r3
     310:	4f 92       	push	r4
     312:	5f 92       	push	r5
     314:	6f 92       	push	r6
     316:	7f 92       	push	r7
     318:	8f 92       	push	r8
     31a:	9f 92       	push	r9
     31c:	af 92       	push	r10
     31e:	bf 92       	push	r11
     320:	cf 92       	push	r12
     322:	df 92       	push	r13
     324:	ef 92       	push	r14
     326:	ff 92       	push	r15
     328:	0f 93       	push	r16
     32a:	1f 93       	push	r17
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	00 d0       	rcall	.+0      	; 0x332 <HID_Device_ProcessControlRequest+0x24>
     332:	1f 92       	push	r1
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     33a:	ed b6       	in	r14, 0x3d	; 61
     33c:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     33e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     342:	83 ff       	sbrs	r24, 3
     344:	1d c1       	rjmp	.+570    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     346:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <USB_ControlRequest+0x4>
     34a:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <USB_ControlRequest+0x5>
     34e:	f6 01       	movw	r30, r12
     350:	80 81       	ld	r24, Z
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	28 17       	cp	r18, r24
     356:	39 07       	cpc	r19, r25
     358:	09 f0       	breq	.+2      	; 0x35c <HID_Device_ProcessControlRequest+0x4e>
     35a:	12 c1       	rjmp	.+548    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
	  return;

	switch (USB_ControlRequest.bRequest)
     35c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <USB_ControlRequest+0x1>
     360:	83 30       	cpi	r24, 0x03	; 3
     362:	09 f4       	brne	.+2      	; 0x366 <HID_Device_ProcessControlRequest+0x58>
     364:	a8 c0       	rjmp	.+336    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     366:	30 f4       	brcc	.+12     	; 0x374 <HID_Device_ProcessControlRequest+0x66>
     368:	81 30       	cpi	r24, 0x01	; 1
     36a:	71 f0       	breq	.+28     	; 0x388 <HID_Device_ProcessControlRequest+0x7a>
     36c:	82 30       	cpi	r24, 0x02	; 2
     36e:	09 f4       	brne	.+2      	; 0x372 <HID_Device_ProcessControlRequest+0x64>
     370:	eb c0       	rjmp	.+470    	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     372:	06 c1       	rjmp	.+524    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     374:	8a 30       	cpi	r24, 0x0A	; 10
     376:	09 f4       	brne	.+2      	; 0x37a <HID_Device_ProcessControlRequest+0x6c>
     378:	cb c0       	rjmp	.+406    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     37a:	8b 30       	cpi	r24, 0x0B	; 11
     37c:	09 f4       	brne	.+2      	; 0x380 <HID_Device_ProcessControlRequest+0x72>
     37e:	b4 c0       	rjmp	.+360    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     380:	89 30       	cpi	r24, 0x09	; 9
     382:	09 f0       	breq	.+2      	; 0x386 <HID_Device_ProcessControlRequest+0x78>
     384:	fd c0       	rjmp	.+506    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     386:	50 c0       	rjmp	.+160    	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     388:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest>
     38c:	81 3a       	cpi	r24, 0xA1	; 161
     38e:	09 f0       	breq	.+2      	; 0x392 <HID_Device_ProcessControlRequest+0x84>
     390:	f7 c0       	rjmp	.+494    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
			{
     392:	ad b6       	in	r10, 0x3d	; 61
     394:	be b6       	in	r11, 0x3e	; 62
				uint16_t ReportSize = 0;
     396:	1a 82       	std	Y+2, r1	; 0x02
     398:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     39a:	ed e1       	ldi	r30, 0x1D	; 29
     39c:	f1 e0       	ldi	r31, 0x01	; 1
     39e:	82 81       	ldd	r24, Z+2	; 0x02
     3a0:	73 80       	ldd	r7, Z+3	; 0x03
     3a2:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     3a4:	7a 94       	dec	r7
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     3a6:	f6 01       	movw	r30, r12
     3a8:	40 85       	ldd	r20, Z+8	; 0x08
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	8d b7       	in	r24, 0x3d	; 61
     3ae:	9e b7       	in	r25, 0x3e	; 62
     3b0:	84 1b       	sub	r24, r20
     3b2:	95 0b       	sbc	r25, r21
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	9e bf       	out	0x3e, r25	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	8d bf       	out	0x3d, r24	; 61
     3be:	ed b7       	in	r30, 0x3d	; 61
     3c0:	fe b7       	in	r31, 0x3e	; 62
     3c2:	31 96       	adiw	r30, 0x01	; 1
     3c4:	4f 01       	movw	r8, r30

				memset(ReportData, 0, sizeof(ReportData));
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	cf 01       	movw	r24, r30
     3cc:	f8 d6       	rcall	.+3568   	; 0x11be <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     3ce:	8e 01       	movw	r16, r28
     3d0:	0f 5f       	subi	r16, 0xFF	; 255
     3d2:	1f 4f       	sbci	r17, 0xFF	; 255
     3d4:	94 01       	movw	r18, r8
     3d6:	47 2d       	mov	r20, r7
     3d8:	be 01       	movw	r22, r28
     3da:	6d 5f       	subi	r22, 0xFD	; 253
     3dc:	7f 4f       	sbci	r23, 0xFF	; 255
     3de:	c6 01       	movw	r24, r12
     3e0:	85 df       	rcall	.-246    	; 0x2ec <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     3e2:	f6 01       	movw	r30, r12
     3e4:	86 81       	ldd	r24, Z+6	; 0x06
     3e6:	97 81       	ldd	r25, Z+7	; 0x07
     3e8:	00 97       	sbiw	r24, 0x00	; 0
     3ea:	21 f0       	breq	.+8      	; 0x3f4 <HID_Device_ProcessControlRequest+0xe6>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
					       HIDInterfaceInfo->Config.PrevReportINBufferSize);
     3ec:	40 85       	ldd	r20, Z+8	; 0x08

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	b4 01       	movw	r22, r8
     3f2:	dc d6       	rcall	.+3512   	; 0x11ac <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3f4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     3f8:	e8 ee       	ldi	r30, 0xE8	; 232
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	87 7f       	andi	r24, 0xF7	; 247
     400:	80 83       	st	Z, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
     402:	8b 81       	ldd	r24, Y+3	; 0x03
     404:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     406:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     40a:	69 81       	ldd	r22, Y+1	; 0x01
     40c:	7a 81       	ldd	r23, Y+2	; 0x02
     40e:	c4 01       	movw	r24, r8
     410:	ee d1       	rcall	.+988    	; 0x7ee <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     412:	e8 ee       	ldi	r30, 0xE8	; 232
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 81       	ld	r24, Z
     418:	8b 77       	andi	r24, 0x7B	; 123
     41a:	80 83       	st	Z, r24
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	be be       	out	0x3e, r11	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	ad be       	out	0x3d, r10	; 61
     426:	ac c0       	rjmp	.+344    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     428:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest>
     42c:	81 32       	cpi	r24, 0x21	; 33
     42e:	09 f0       	breq	.+2      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     430:	a7 c0       	rjmp	.+334    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
			{
     432:	6d b6       	in	r6, 0x3d	; 61
     434:	7e b6       	in	r7, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
     436:	ed e1       	ldi	r30, 0x1D	; 29
     438:	f1 e0       	ldi	r31, 0x01	; 1
     43a:	06 81       	ldd	r16, Z+6	; 0x06
     43c:	17 81       	ldd	r17, Z+7	; 0x07
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     43e:	42 80       	ldd	r4, Z+2	; 0x02
     440:	53 80       	ldd	r5, Z+3	; 0x03
     442:	34 2c       	mov	r3, r4
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     444:	5a 94       	dec	r5
				uint8_t  ReportData[ReportSize];
     446:	8d b7       	in	r24, 0x3d	; 61
     448:	9e b7       	in	r25, 0x3e	; 62
     44a:	80 1b       	sub	r24, r16
     44c:	91 0b       	sbc	r25, r17
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	f8 94       	cli
     452:	9e bf       	out	0x3e, r25	; 62
     454:	0f be       	out	0x3f, r0	; 63
     456:	8d bf       	out	0x3d, r24	; 61
     458:	ed b7       	in	r30, 0x3d	; 61
     45a:	fe b7       	in	r31, 0x3e	; 62
     45c:	31 96       	adiw	r30, 0x01	; 1
     45e:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     460:	0f 2e       	mov	r0, r31
     462:	f8 ee       	ldi	r31, 0xE8	; 232
     464:	af 2e       	mov	r10, r31
     466:	b1 2c       	mov	r11, r1
     468:	f0 2d       	mov	r31, r0
     46a:	f5 01       	movw	r30, r10
     46c:	80 81       	ld	r24, Z
     46e:	87 7f       	andi	r24, 0xF7	; 247

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     470:	80 83       	st	Z, r24
     472:	b8 01       	movw	r22, r16
     474:	c4 01       	movw	r24, r8
     476:	23 d2       	rcall	.+1094   	; 0x8be <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     478:	f5 01       	movw	r30, r10
     47a:	80 81       	ld	r24, Z
     47c:	8e 77       	andi	r24, 0x7E	; 126
     47e:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     480:	44 20       	and	r4, r4
     482:	19 f0       	breq	.+6      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	02 c0       	rjmp	.+4      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     48a:	80 e0       	ldi	r24, 0x00	; 0
     48c:	90 e0       	ldi	r25, 0x00	; 0
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     48e:	21 e0       	ldi	r18, 0x01	; 1
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	31 10       	cpse	r3, r1
     494:	02 c0       	rjmp	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	28 0d       	add	r18, r8
     49c:	39 1d       	adc	r19, r9

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     49e:	08 1b       	sub	r16, r24
     4a0:	19 0b       	sbc	r17, r25
     4a2:	45 2d       	mov	r20, r5
     4a4:	64 2d       	mov	r22, r4
     4a6:	c6 01       	movw	r24, r12
     4a8:	31 df       	rcall	.-414    	; 0x30c <CALLBACK_HID_Device_ProcessHIDReport>
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	7e be       	out	0x3e, r7	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	6d be       	out	0x3d, r6	; 61
     4b4:	65 c0       	rjmp	.+202    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     4b6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest>
     4ba:	81 3a       	cpi	r24, 0xA1	; 161
     4bc:	09 f0       	breq	.+2      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4be:	60 c0       	rjmp	.+192    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     4c0:	e8 ee       	ldi	r30, 0xE8	; 232
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	80 81       	ld	r24, Z
     4c6:	87 7f       	andi	r24, 0xF7	; 247
     4c8:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     4ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     4ce:	80 ff       	sbrs	r24, 0
     4d0:	fc cf       	rjmp	.-8      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     4d2:	f6 01       	movw	r30, r12
     4d4:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     4d6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4da:	e8 ee       	ldi	r30, 0xE8	; 232
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	80 81       	ld	r24, Z
     4e0:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     4e2:	80 83       	st	Z, r24
     4e4:	16 d3       	rcall	.+1580   	; 0xb12 <Endpoint_ClearStatusStage>
     4e6:	4c c0       	rjmp	.+152    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     4e8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest>
     4ec:	81 32       	cpi	r24, 0x21	; 33
     4ee:	09 f0       	breq	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     4f0:	47 c0       	rjmp	.+142    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     4f2:	e8 ee       	ldi	r30, 0xE8	; 232
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	80 81       	ld	r24, Z
     4f8:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     4fa:	80 83       	st	Z, r24
     4fc:	0a d3       	rcall	.+1556   	; 0xb12 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     4fe:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <USB_ControlRequest+0x2>
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	91 11       	cpse	r25, r1
     506:	01 c0       	rjmp	.+2      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	f6 01       	movw	r30, r12
     50c:	81 87       	std	Z+9, r24	; 0x09
     50e:	38 c0       	rjmp	.+112    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     510:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest>
     514:	81 32       	cpi	r24, 0x21	; 33
     516:	a1 f5       	brne	.+104    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     518:	e8 ee       	ldi	r30, 0xE8	; 232
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     520:	80 83       	st	Z, r24
     522:	f7 d2       	rcall	.+1518   	; 0xb12 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     524:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x2>
     528:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <USB_ControlRequest+0x3>
     52c:	88 27       	eor	r24, r24
     52e:	00 24       	eor	r0, r0
     530:	88 0f       	add	r24, r24
     532:	99 1f       	adc	r25, r25
     534:	00 1c       	adc	r0, r0
     536:	88 0f       	add	r24, r24
     538:	99 1f       	adc	r25, r25
     53a:	00 1c       	adc	r0, r0
     53c:	89 2f       	mov	r24, r25
     53e:	90 2d       	mov	r25, r0
     540:	f6 01       	movw	r30, r12
     542:	95 87       	std	Z+13, r25	; 0x0d
     544:	84 87       	std	Z+12, r24	; 0x0c
     546:	1c c0       	rjmp	.+56     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     548:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest>
     54c:	81 3a       	cpi	r24, 0xA1	; 161
     54e:	c1 f4       	brne	.+48     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     550:	e8 ee       	ldi	r30, 0xE8	; 232
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	80 81       	ld	r24, Z
     556:	87 7f       	andi	r24, 0xF7	; 247
     558:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     55a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     55e:	80 ff       	sbrs	r24, 0
     560:	fc cf       	rjmp	.-8      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     562:	f6 01       	movw	r30, r12
     564:	84 85       	ldd	r24, Z+12	; 0x0c
     566:	95 85       	ldd	r25, Z+13	; 0x0d
     568:	96 95       	lsr	r25
     56a:	87 95       	ror	r24
     56c:	96 95       	lsr	r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     56e:	87 95       	ror	r24
     570:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     574:	e8 ee       	ldi	r30, 0xE8	; 232
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	80 81       	ld	r24, Z
     57a:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     57c:	80 83       	st	Z, r24
     57e:	c9 d2       	rcall	.+1426   	; 0xb12 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	fe be       	out	0x3e, r15	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	ed be       	out	0x3d, r14	; 61
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	0f 91       	pop	r16
     598:	ff 90       	pop	r15
     59a:	ef 90       	pop	r14
     59c:	df 90       	pop	r13
     59e:	cf 90       	pop	r12
     5a0:	bf 90       	pop	r11
     5a2:	af 90       	pop	r10
     5a4:	9f 90       	pop	r9
     5a6:	8f 90       	pop	r8
     5a8:	7f 90       	pop	r7
     5aa:	6f 90       	pop	r6
     5ac:	5f 90       	pop	r5
     5ae:	4f 90       	pop	r4
     5b0:	3f 90       	pop	r3
     5b2:	08 95       	ret

000005b4 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     5b4:	fc 01       	movw	r30, r24
     5b6:	39 96       	adiw	r30, 0x09	; 9
     5b8:	27 e0       	ldi	r18, 0x07	; 7
     5ba:	df 01       	movw	r26, r30
     5bc:	1d 92       	st	X+, r1
     5be:	2a 95       	dec	r18
     5c0:	e9 f7       	brne	.-6      	; 0x5bc <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     5c2:	21 e0       	ldi	r18, 0x01	; 1
     5c4:	fc 01       	movw	r30, r24
     5c6:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     5c8:	24 ef       	ldi	r18, 0xF4	; 244
     5ca:	31 e0       	ldi	r19, 0x01	; 1
     5cc:	35 87       	std	Z+13, r19	; 0x0d
     5ce:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     5d0:	23 e0       	ldi	r18, 0x03	; 3
     5d2:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	01 96       	adiw	r24, 0x01	; 1
     5d8:	56 c2       	rjmp	.+1196   	; 0xa86 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
     5da:	08 95       	ret

000005dc <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     5dc:	5f 92       	push	r5
     5de:	6f 92       	push	r6
     5e0:	7f 92       	push	r7
     5e2:	8f 92       	push	r8
     5e4:	9f 92       	push	r9
     5e6:	af 92       	push	r10
     5e8:	bf 92       	push	r11
     5ea:	cf 92       	push	r12
     5ec:	df 92       	push	r13
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <HID_Device_USBTask+0x20>
     5fc:	1f 92       	push	r1
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     604:	ad b6       	in	r10, 0x3d	; 61
     606:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     608:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>
     60c:	84 30       	cpi	r24, 0x04	; 4
     60e:	09 f0       	breq	.+2      	; 0x612 <HID_Device_USBTask+0x36>
     610:	8c c0       	rjmp	.+280    	; 0x72a <HID_Device_USBTask+0x14e>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     612:	f7 01       	movw	r30, r14
     614:	22 85       	ldd	r18, Z+10	; 0x0a
     616:	33 85       	ldd	r19, Z+11	; 0x0b
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     618:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     61c:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     620:	28 17       	cp	r18, r24
     622:	39 07       	cpc	r19, r25
     624:	09 f4       	brne	.+2      	; 0x628 <HID_Device_USBTask+0x4c>
     626:	81 c0       	rjmp	.+258    	; 0x72a <HID_Device_USBTask+0x14e>
		#else
		return;
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
     628:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     62a:	8f 70       	andi	r24, 0x0F	; 15
     62c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     630:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
     634:	85 ff       	sbrs	r24, 5
     636:	79 c0       	rjmp	.+242    	; 0x72a <HID_Device_USBTask+0x14e>
	{
     638:	8d b6       	in	r8, 0x3d	; 61
     63a:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     63c:	40 85       	ldd	r20, Z+8	; 0x08
     63e:	50 e0       	ldi	r21, 0x00	; 0
     640:	8d b7       	in	r24, 0x3d	; 61
     642:	9e b7       	in	r25, 0x3e	; 62
     644:	84 1b       	sub	r24, r20
     646:	95 0b       	sbc	r25, r21
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	9e bf       	out	0x3e, r25	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	8d bf       	out	0x3d, r24	; 61
     652:	ed b7       	in	r30, 0x3d	; 61
     654:	fe b7       	in	r31, 0x3e	; 62
     656:	31 96       	adiw	r30, 0x01	; 1
     658:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
     65a:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     65c:	1a 82       	std	Y+2, r1	; 0x02
     65e:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	cf 01       	movw	r24, r30
     666:	ab d5       	rcall	.+2902   	; 0x11be <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     668:	8e 01       	movw	r16, r28
     66a:	0f 5f       	subi	r16, 0xFF	; 255
     66c:	1f 4f       	sbci	r17, 0xFF	; 255
     66e:	96 01       	movw	r18, r12
     670:	40 e0       	ldi	r20, 0x00	; 0
     672:	be 01       	movw	r22, r28
     674:	6d 5f       	subi	r22, 0xFD	; 253
     676:	7f 4f       	sbci	r23, 0xFF	; 255
     678:	c7 01       	movw	r24, r14
     67a:	38 de       	rcall	.-912    	; 0x2ec <CALLBACK_HID_Device_CreateHIDReport>
     67c:	68 2e       	mov	r6, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     67e:	f7 01       	movw	r30, r14
     680:	84 85       	ldd	r24, Z+12	; 0x0c
     682:	95 85       	ldd	r25, Z+13	; 0x0d
     684:	89 2b       	or	r24, r25
     686:	31 f0       	breq	.+12     	; 0x694 <HID_Device_USBTask+0xb8>
     688:	86 85       	ldd	r24, Z+14	; 0x0e
     68a:	97 85       	ldd	r25, Z+15	; 0x0f
     68c:	89 2b       	or	r24, r25
     68e:	21 f0       	breq	.+8      	; 0x698 <HID_Device_USBTask+0xbc>
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	03 c0       	rjmp	.+6      	; 0x69a <HID_Device_USBTask+0xbe>
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	01 c0       	rjmp	.+2      	; 0x69a <HID_Device_USBTask+0xbe>
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	81 70       	andi	r24, 0x01	; 1
     69c:	78 2e       	mov	r7, r24

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     69e:	f7 01       	movw	r30, r14
     6a0:	06 81       	ldd	r16, Z+6	; 0x06
     6a2:	17 81       	ldd	r17, Z+7	; 0x07
     6a4:	01 15       	cp	r16, r1
     6a6:	11 05       	cpc	r17, r1
     6a8:	89 f0       	breq	.+34     	; 0x6cc <HID_Device_USBTask+0xf0>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     6aa:	49 81       	ldd	r20, Y+1	; 0x01
     6ac:	5a 81       	ldd	r21, Y+2	; 0x02
     6ae:	b8 01       	movw	r22, r16
     6b0:	c6 01       	movw	r24, r12
     6b2:	6f d5       	rcall	.+2782   	; 0x1192 <memcmp>
     6b4:	55 24       	eor	r5, r5
     6b6:	53 94       	inc	r5
     6b8:	89 2b       	or	r24, r25
     6ba:	09 f4       	brne	.+2      	; 0x6be <HID_Device_USBTask+0xe2>
     6bc:	51 2c       	mov	r5, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     6be:	f7 01       	movw	r30, r14
     6c0:	40 85       	ldd	r20, Z+8	; 0x08
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	b6 01       	movw	r22, r12
     6c6:	c8 01       	movw	r24, r16
     6c8:	71 d5       	rcall	.+2786   	; 0x11ac <memcpy>
     6ca:	01 c0       	rjmp	.+2      	; 0x6ce <HID_Device_USBTask+0xf2>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     6cc:	51 2c       	mov	r5, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	9a 81       	ldd	r25, Y+2	; 0x02
     6d2:	89 2b       	or	r24, r25
     6d4:	f1 f0       	breq	.+60     	; 0x712 <HID_Device_USBTask+0x136>
     6d6:	61 10       	cpse	r6, r1
     6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <HID_Device_USBTask+0x106>
     6da:	51 10       	cpse	r5, r1
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <HID_Device_USBTask+0x106>
     6de:	77 20       	and	r7, r7
     6e0:	c1 f0       	breq	.+48     	; 0x712 <HID_Device_USBTask+0x136>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     6e2:	f7 01       	movw	r30, r14
     6e4:	84 85       	ldd	r24, Z+12	; 0x0c
     6e6:	95 85       	ldd	r25, Z+13	; 0x0d
     6e8:	97 87       	std	Z+15, r25	; 0x0f
     6ea:	86 87       	std	Z+14, r24	; 0x0e

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
     6ec:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     6ee:	8f 70       	andi	r24, 0x0F	; 15
     6f0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			if (ReportID)
     6f4:	8b 81       	ldd	r24, Y+3	; 0x03
     6f6:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     6f8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     6fc:	69 81       	ldd	r22, Y+1	; 0x01
     6fe:	7a 81       	ldd	r23, Y+2	; 0x02
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	c6 01       	movw	r24, r12
     706:	29 d0       	rcall	.+82     	; 0x75a <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     708:	e8 ee       	ldi	r30, 0xE8	; 232
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	8e 77       	andi	r24, 0x7E	; 126
     710:	80 83       	st	Z, r24
     712:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     716:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
     71a:	f7 01       	movw	r30, r14
     71c:	93 87       	std	Z+11, r25	; 0x0b
     71e:	82 87       	std	Z+10, r24	; 0x0a
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	f8 94       	cli
     724:	9e be       	out	0x3e, r9	; 62
     726:	0f be       	out	0x3f, r0	; 63
     728:	8d be       	out	0x3d, r8	; 61
	}
}
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	be be       	out	0x3e, r11	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	ad be       	out	0x3d, r10	; 61
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	df 90       	pop	r13
     748:	cf 90       	pop	r12
     74a:	bf 90       	pop	r11
     74c:	af 90       	pop	r10
     74e:	9f 90       	pop	r9
     750:	8f 90       	pop	r8
     752:	7f 90       	pop	r7
     754:	6f 90       	pop	r6
     756:	5f 90       	pop	r5
     758:	08 95       	ret

0000075a <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     75a:	cf 92       	push	r12
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	8c 01       	movw	r16, r24
     76c:	eb 01       	movw	r28, r22
     76e:	6a 01       	movw	r12, r20
     770:	f1 d1       	rcall	.+994    	; 0xb54 <Endpoint_WaitUntilReady>
     772:	81 11       	cpse	r24, r1
     774:	33 c0       	rjmp	.+102    	; 0x7dc <Endpoint_Write_Stream_LE+0x82>
     776:	c1 14       	cp	r12, r1
     778:	d1 04       	cpc	r13, r1
     77a:	39 f0       	breq	.+14     	; 0x78a <Endpoint_Write_Stream_LE+0x30>
     77c:	f6 01       	movw	r30, r12
     77e:	80 81       	ld	r24, Z
     780:	91 81       	ldd	r25, Z+1	; 0x01
     782:	c8 1b       	sub	r28, r24
     784:	d9 0b       	sbc	r29, r25
     786:	08 0f       	add	r16, r24
     788:	19 1f       	adc	r17, r25
     78a:	e1 2c       	mov	r14, r1
     78c:	f1 2c       	mov	r15, r1
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <Endpoint_Write_Stream_LE+0x7c>
     790:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     794:	95 fd       	sbrc	r25, 5
     796:	16 c0       	rjmp	.+44     	; 0x7c4 <Endpoint_Write_Stream_LE+0x6a>
     798:	e8 ee       	ldi	r30, 0xE8	; 232
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	8e 77       	andi	r24, 0x7E	; 126
     7a0:	80 83       	st	Z, r24
     7a2:	f5 d4       	rcall	.+2538   	; 0x118e <USB_USBTask>
     7a4:	c1 14       	cp	r12, r1
     7a6:	d1 04       	cpc	r13, r1
     7a8:	49 f0       	breq	.+18     	; 0x7bc <Endpoint_Write_Stream_LE+0x62>
     7aa:	f6 01       	movw	r30, r12
     7ac:	80 81       	ld	r24, Z
     7ae:	91 81       	ldd	r25, Z+1	; 0x01
     7b0:	e8 0e       	add	r14, r24
     7b2:	f9 1e       	adc	r15, r25
     7b4:	f1 82       	std	Z+1, r15	; 0x01
     7b6:	e0 82       	st	Z, r14
     7b8:	85 e0       	ldi	r24, 0x05	; 5
     7ba:	10 c0       	rjmp	.+32     	; 0x7dc <Endpoint_Write_Stream_LE+0x82>
     7bc:	cb d1       	rcall	.+918    	; 0xb54 <Endpoint_WaitUntilReady>
     7be:	88 23       	and	r24, r24
     7c0:	51 f0       	breq	.+20     	; 0x7d6 <Endpoint_Write_Stream_LE+0x7c>
     7c2:	0c c0       	rjmp	.+24     	; 0x7dc <Endpoint_Write_Stream_LE+0x82>
     7c4:	f8 01       	movw	r30, r16
     7c6:	81 91       	ld	r24, Z+
     7c8:	8f 01       	movw	r16, r30
     7ca:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7ce:	21 97       	sbiw	r28, 0x01	; 1
     7d0:	ff ef       	ldi	r31, 0xFF	; 255
     7d2:	ef 1a       	sub	r14, r31
     7d4:	ff 0a       	sbc	r15, r31
     7d6:	20 97       	sbiw	r28, 0x00	; 0
     7d8:	d9 f6       	brne	.-74     	; 0x790 <Endpoint_Write_Stream_LE+0x36>
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	ff 90       	pop	r15
     7e6:	ef 90       	pop	r14
     7e8:	df 90       	pop	r13
     7ea:	cf 90       	pop	r12
     7ec:	08 95       	ret

000007ee <Endpoint_Write_Control_Stream_LE>:
     7ee:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <USB_ControlRequest+0x6>
     7f2:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <USB_ControlRequest+0x7>
     7f6:	26 17       	cp	r18, r22
     7f8:	37 07       	cpc	r19, r23
     7fa:	58 f0       	brcs	.+22     	; 0x812 <Endpoint_Write_Control_Stream_LE+0x24>
     7fc:	61 15       	cp	r22, r1
     7fe:	71 05       	cpc	r23, r1
     800:	39 f4       	brne	.+14     	; 0x810 <Endpoint_Write_Control_Stream_LE+0x22>
     802:	e8 ee       	ldi	r30, 0xE8	; 232
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	20 81       	ld	r18, Z
     808:	2e 77       	andi	r18, 0x7E	; 126
     80a:	20 83       	st	Z, r18
     80c:	9b 01       	movw	r18, r22
     80e:	01 c0       	rjmp	.+2      	; 0x812 <Endpoint_Write_Control_Stream_LE+0x24>
     810:	9b 01       	movw	r18, r22
     812:	e8 2f       	mov	r30, r24
     814:	f9 2f       	mov	r31, r25
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	30 c0       	rjmp	.+96     	; 0x87a <Endpoint_Write_Control_Stream_LE+0x8c>
     81a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>
     81e:	88 23       	and	r24, r24
     820:	09 f4       	brne	.+2      	; 0x824 <Endpoint_Write_Control_Stream_LE+0x36>
     822:	41 c0       	rjmp	.+130    	; 0x8a6 <Endpoint_Write_Control_Stream_LE+0xb8>
     824:	85 30       	cpi	r24, 0x05	; 5
     826:	09 f4       	brne	.+2      	; 0x82a <Endpoint_Write_Control_Stream_LE+0x3c>
     828:	40 c0       	rjmp	.+128    	; 0x8aa <Endpoint_Write_Control_Stream_LE+0xbc>
     82a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     82e:	83 fd       	sbrc	r24, 3
     830:	3e c0       	rjmp	.+124    	; 0x8ae <Endpoint_Write_Control_Stream_LE+0xc0>
     832:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     836:	82 fd       	sbrc	r24, 2
     838:	30 c0       	rjmp	.+96     	; 0x89a <Endpoint_Write_Control_Stream_LE+0xac>
     83a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     83e:	80 ff       	sbrs	r24, 0
     840:	1c c0       	rjmp	.+56     	; 0x87a <Endpoint_Write_Control_Stream_LE+0x8c>
     842:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     846:	50 91 f3 00 	lds	r21, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     84a:	07 c0       	rjmp	.+14     	; 0x85a <Endpoint_Write_Control_Stream_LE+0x6c>
     84c:	81 91       	ld	r24, Z+
     84e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     852:	21 50       	subi	r18, 0x01	; 1
     854:	31 09       	sbc	r19, r1
     856:	4f 5f       	subi	r20, 0xFF	; 255
     858:	5f 4f       	sbci	r21, 0xFF	; 255
     85a:	21 15       	cp	r18, r1
     85c:	31 05       	cpc	r19, r1
     85e:	19 f0       	breq	.+6      	; 0x866 <Endpoint_Write_Control_Stream_LE+0x78>
     860:	48 30       	cpi	r20, 0x08	; 8
     862:	51 05       	cpc	r21, r1
     864:	98 f3       	brcs	.-26     	; 0x84c <Endpoint_Write_Control_Stream_LE+0x5e>
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	48 30       	cpi	r20, 0x08	; 8
     86a:	51 05       	cpc	r21, r1
     86c:	09 f0       	breq	.+2      	; 0x870 <Endpoint_Write_Control_Stream_LE+0x82>
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	a8 ee       	ldi	r26, 0xE8	; 232
     872:	b0 e0       	ldi	r27, 0x00	; 0
     874:	8c 91       	ld	r24, X
     876:	8e 77       	andi	r24, 0x7E	; 126
     878:	8c 93       	st	X, r24
     87a:	21 15       	cp	r18, r1
     87c:	31 05       	cpc	r19, r1
     87e:	69 f6       	brne	.-102    	; 0x81a <Endpoint_Write_Control_Stream_LE+0x2c>
     880:	91 11       	cpse	r25, r1
     882:	cb cf       	rjmp	.-106    	; 0x81a <Endpoint_Write_Control_Stream_LE+0x2c>
     884:	0a c0       	rjmp	.+20     	; 0x89a <Endpoint_Write_Control_Stream_LE+0xac>
     886:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>
     88a:	88 23       	and	r24, r24
     88c:	91 f0       	breq	.+36     	; 0x8b2 <Endpoint_Write_Control_Stream_LE+0xc4>
     88e:	85 30       	cpi	r24, 0x05	; 5
     890:	91 f0       	breq	.+36     	; 0x8b6 <Endpoint_Write_Control_Stream_LE+0xc8>
     892:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     896:	83 fd       	sbrc	r24, 3
     898:	10 c0       	rjmp	.+32     	; 0x8ba <Endpoint_Write_Control_Stream_LE+0xcc>
     89a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     89e:	82 ff       	sbrs	r24, 2
     8a0:	f2 cf       	rjmp	.-28     	; 0x886 <Endpoint_Write_Control_Stream_LE+0x98>
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	08 95       	ret
     8a6:	82 e0       	ldi	r24, 0x02	; 2
     8a8:	08 95       	ret
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	08 95       	ret
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	08 95       	ret
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	08 95       	ret
     8b6:	83 e0       	ldi	r24, 0x03	; 3
     8b8:	08 95       	ret
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 95       	ret

000008be <Endpoint_Read_Control_Stream_LE>:
     8be:	61 15       	cp	r22, r1
     8c0:	71 05       	cpc	r23, r1
     8c2:	29 f4       	brne	.+10     	; 0x8ce <Endpoint_Read_Control_Stream_LE+0x10>
     8c4:	e8 ee       	ldi	r30, 0xE8	; 232
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	20 81       	ld	r18, Z
     8ca:	2b 77       	andi	r18, 0x7B	; 123
     8cc:	20 83       	st	Z, r18
     8ce:	e8 2f       	mov	r30, r24
     8d0:	f9 2f       	mov	r31, r25
     8d2:	22 c0       	rjmp	.+68     	; 0x918 <Endpoint_Read_Control_Stream_LE+0x5a>
     8d4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>
     8d8:	88 23       	and	r24, r24
     8da:	71 f1       	breq	.+92     	; 0x938 <Endpoint_Read_Control_Stream_LE+0x7a>
     8dc:	85 30       	cpi	r24, 0x05	; 5
     8de:	71 f1       	breq	.+92     	; 0x93c <Endpoint_Read_Control_Stream_LE+0x7e>
     8e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8e4:	83 fd       	sbrc	r24, 3
     8e6:	2c c0       	rjmp	.+88     	; 0x940 <Endpoint_Read_Control_Stream_LE+0x82>
     8e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8ec:	82 ff       	sbrs	r24, 2
     8ee:	14 c0       	rjmp	.+40     	; 0x918 <Endpoint_Read_Control_Stream_LE+0x5a>
     8f0:	05 c0       	rjmp	.+10     	; 0x8fc <Endpoint_Read_Control_Stream_LE+0x3e>
     8f2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8f6:	81 93       	st	Z+, r24
     8f8:	61 50       	subi	r22, 0x01	; 1
     8fa:	71 09       	sbc	r23, r1
     8fc:	61 15       	cp	r22, r1
     8fe:	71 05       	cpc	r23, r1
     900:	31 f0       	breq	.+12     	; 0x90e <Endpoint_Read_Control_Stream_LE+0x50>
     902:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     906:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     90a:	89 2b       	or	r24, r25
     90c:	91 f7       	brne	.-28     	; 0x8f2 <Endpoint_Read_Control_Stream_LE+0x34>
     90e:	a8 ee       	ldi	r26, 0xE8	; 232
     910:	b0 e0       	ldi	r27, 0x00	; 0
     912:	8c 91       	ld	r24, X
     914:	8b 77       	andi	r24, 0x7B	; 123
     916:	8c 93       	st	X, r24
     918:	61 15       	cp	r22, r1
     91a:	71 05       	cpc	r23, r1
     91c:	d9 f6       	brne	.-74     	; 0x8d4 <Endpoint_Read_Control_Stream_LE+0x16>
     91e:	06 c0       	rjmp	.+12     	; 0x92c <Endpoint_Read_Control_Stream_LE+0x6e>
     920:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>
     924:	88 23       	and	r24, r24
     926:	71 f0       	breq	.+28     	; 0x944 <Endpoint_Read_Control_Stream_LE+0x86>
     928:	85 30       	cpi	r24, 0x05	; 5
     92a:	71 f0       	breq	.+28     	; 0x948 <Endpoint_Read_Control_Stream_LE+0x8a>
     92c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     930:	80 ff       	sbrs	r24, 0
     932:	f6 cf       	rjmp	.-20     	; 0x920 <Endpoint_Read_Control_Stream_LE+0x62>
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 95       	ret
     938:	82 e0       	ldi	r24, 0x02	; 2
     93a:	08 95       	ret
     93c:	83 e0       	ldi	r24, 0x03	; 3
     93e:	08 95       	ret
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	08 95       	ret
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	08 95       	ret
     948:	83 e0       	ldi	r24, 0x03	; 3
     94a:	08 95       	ret

0000094c <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     94c:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <USB_ControlRequest+0x6>
     950:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <USB_ControlRequest+0x7>
     954:	26 17       	cp	r18, r22
     956:	37 07       	cpc	r19, r23
     958:	58 f0       	brcs	.+22     	; 0x970 <Endpoint_Write_Control_PStream_LE+0x24>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     95a:	61 15       	cp	r22, r1
     95c:	71 05       	cpc	r23, r1
     95e:	39 f4       	brne	.+14     	; 0x96e <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     960:	e8 ee       	ldi	r30, 0xE8	; 232
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	20 81       	ld	r18, Z
     966:	2e 77       	andi	r18, 0x7E	; 126
     968:	20 83       	st	Z, r18
     96a:	9b 01       	movw	r18, r22
     96c:	01 c0       	rjmp	.+2      	; 0x970 <Endpoint_Write_Control_PStream_LE+0x24>
     96e:	9b 01       	movw	r18, r22
     970:	e8 2f       	mov	r30, r24
     972:	f9 2f       	mov	r31, r25
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	31 c0       	rjmp	.+98     	; 0x9da <Endpoint_Write_Control_PStream_LE+0x8e>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     978:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     97c:	88 23       	and	r24, r24
     97e:	09 f4       	brne	.+2      	; 0x982 <Endpoint_Write_Control_PStream_LE+0x36>
     980:	42 c0       	rjmp	.+132    	; 0xa06 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     982:	85 30       	cpi	r24, 0x05	; 5
     984:	09 f4       	brne	.+2      	; 0x988 <Endpoint_Write_Control_PStream_LE+0x3c>
     986:	41 c0       	rjmp	.+130    	; 0xa0a <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     988:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     98c:	83 fd       	sbrc	r24, 3
     98e:	3f c0       	rjmp	.+126    	; 0xa0e <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     990:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     994:	82 fd       	sbrc	r24, 2
     996:	31 c0       	rjmp	.+98     	; 0x9fa <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     998:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  break;

		if (Endpoint_IsINReady())
     99c:	80 ff       	sbrs	r24, 0
     99e:	1d c0       	rjmp	.+58     	; 0x9da <Endpoint_Write_Control_PStream_LE+0x8e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
     9a0:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     9a4:	50 91 f3 00 	lds	r21, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     9a8:	08 c0       	rjmp	.+16     	; 0x9ba <Endpoint_Write_Control_PStream_LE+0x6e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     9aa:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9ac:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     9b0:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     9b2:	21 50       	subi	r18, 0x01	; 1
     9b4:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
     9b6:	4f 5f       	subi	r20, 0xFF	; 255
     9b8:	5f 4f       	sbci	r21, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     9ba:	21 15       	cp	r18, r1
     9bc:	31 05       	cpc	r19, r1
     9be:	19 f0       	breq	.+6      	; 0x9c6 <Endpoint_Write_Control_PStream_LE+0x7a>
     9c0:	48 30       	cpi	r20, 0x08	; 8
     9c2:	51 05       	cpc	r21, r1
     9c4:	90 f3       	brcs	.-28     	; 0x9aa <Endpoint_Write_Control_PStream_LE+0x5e>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	48 30       	cpi	r20, 0x08	; 8
     9ca:	51 05       	cpc	r21, r1
     9cc:	09 f0       	breq	.+2      	; 0x9d0 <Endpoint_Write_Control_PStream_LE+0x84>
     9ce:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9d0:	a8 ee       	ldi	r26, 0xE8	; 232
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	8c 91       	ld	r24, X
     9d6:	8e 77       	andi	r24, 0x7E	; 126
     9d8:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     9da:	21 15       	cp	r18, r1
     9dc:	31 05       	cpc	r19, r1
     9de:	61 f6       	brne	.-104    	; 0x978 <Endpoint_Write_Control_PStream_LE+0x2c>
     9e0:	91 11       	cpse	r25, r1
     9e2:	ca cf       	rjmp	.-108    	; 0x978 <Endpoint_Write_Control_PStream_LE+0x2c>
     9e4:	0a c0       	rjmp	.+20     	; 0x9fa <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9e6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9ea:	88 23       	and	r24, r24
     9ec:	91 f0       	breq	.+36     	; 0xa12 <Endpoint_Write_Control_PStream_LE+0xc6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9ee:	85 30       	cpi	r24, 0x05	; 5
     9f0:	91 f0       	breq	.+36     	; 0xa16 <Endpoint_Write_Control_PStream_LE+0xca>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     9f6:	83 fd       	sbrc	r24, 3
     9f8:	10 c0       	rjmp	.+32     	; 0xa1a <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9fa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     9fe:	82 ff       	sbrs	r24, 2
     a00:	f2 cf       	rjmp	.-28     	; 0x9e6 <Endpoint_Write_Control_PStream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     a0a:	83 e0       	ldi	r24, 0x03	; 3
     a0c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     a12:	82 e0       	ldi	r24, 0x02	; 2
     a14:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     a1c:	08 95       	ret

00000a1e <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     a1e:	98 2f       	mov	r25, r24
     a20:	29 c0       	rjmp	.+82     	; 0xa74 <Endpoint_ConfigureEndpoint_Prv+0x56>
     a22:	29 2f       	mov	r18, r25
     a24:	2f 70       	andi	r18, 0x0F	; 15
     a26:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     a2a:	98 17       	cp	r25, r24
     a2c:	39 f0       	breq	.+14     	; 0xa3c <Endpoint_ConfigureEndpoint_Prv+0x1e>
     a2e:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     a32:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     a36:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     a3a:	03 c0       	rjmp	.+6      	; 0xa42 <Endpoint_ConfigureEndpoint_Prv+0x24>
     a3c:	24 2f       	mov	r18, r20
     a3e:	76 2f       	mov	r23, r22
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	21 ff       	sbrs	r18, 1
     a44:	16 c0       	rjmp	.+44     	; 0xa72 <Endpoint_ConfigureEndpoint_Prv+0x54>
     a46:	eb ee       	ldi	r30, 0xEB	; 235
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	30 81       	ld	r19, Z
     a4c:	3e 7f       	andi	r19, 0xFE	; 254
     a4e:	30 83       	st	Z, r19
     a50:	ad ee       	ldi	r26, 0xED	; 237
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	3c 91       	ld	r19, X
     a56:	3d 7f       	andi	r19, 0xFD	; 253
     a58:	3c 93       	st	X, r19
     a5a:	30 81       	ld	r19, Z
     a5c:	31 60       	ori	r19, 0x01	; 1
     a5e:	30 83       	st	Z, r19
     a60:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     a64:	2c 93       	st	X, r18
     a66:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     a6a:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     a6e:	22 23       	and	r18, r18
     a70:	44 f4       	brge	.+16     	; 0xa82 <Endpoint_ConfigureEndpoint_Prv+0x64>
     a72:	9f 5f       	subi	r25, 0xFF	; 255
     a74:	97 30       	cpi	r25, 0x07	; 7
     a76:	a8 f2       	brcs	.-86     	; 0xa22 <Endpoint_ConfigureEndpoint_Prv+0x4>
     a78:	8f 70       	andi	r24, 0x0F	; 15
     a7a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	08 95       	ret
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	08 95       	ret

00000a86 <Endpoint_ConfigureEndpointTable>:
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	ec 01       	movw	r28, r24
     a90:	06 2f       	mov	r16, r22
     a92:	10 e0       	ldi	r17, 0x00	; 0
     a94:	36 c0       	rjmp	.+108    	; 0xb02 <Endpoint_ConfigureEndpointTable+0x7c>
     a96:	e1 2f       	mov	r30, r17
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	cf 01       	movw	r24, r30
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	88 0f       	add	r24, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	e8 0f       	add	r30, r24
     aa6:	f9 1f       	adc	r31, r25
     aa8:	ec 0f       	add	r30, r28
     aaa:	fd 1f       	adc	r31, r29
     aac:	50 81       	ld	r21, Z
     aae:	55 23       	and	r21, r21
     ab0:	39 f1       	breq	.+78     	; 0xb00 <Endpoint_ConfigureEndpointTable+0x7a>
     ab2:	94 81       	ldd	r25, Z+4	; 0x04
     ab4:	a1 81       	ldd	r26, Z+1	; 0x01
     ab6:	b2 81       	ldd	r27, Z+2	; 0x02
     ab8:	63 81       	ldd	r22, Z+3	; 0x03
     aba:	85 2f       	mov	r24, r21
     abc:	8f 70       	andi	r24, 0x0F	; 15
     abe:	87 30       	cpi	r24, 0x07	; 7
     ac0:	e0 f4       	brcc	.+56     	; 0xafa <Endpoint_ConfigureEndpointTable+0x74>
     ac2:	92 30       	cpi	r25, 0x02	; 2
     ac4:	10 f0       	brcs	.+4      	; 0xaca <Endpoint_ConfigureEndpointTable+0x44>
     ac6:	46 e0       	ldi	r20, 0x06	; 6
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <Endpoint_ConfigureEndpointTable+0x46>
     aca:	42 e0       	ldi	r20, 0x02	; 2
     acc:	28 e0       	ldi	r18, 0x08	; 8
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	03 c0       	rjmp	.+6      	; 0xada <Endpoint_ConfigureEndpointTable+0x54>
     ad4:	9f 5f       	subi	r25, 0xFF	; 255
     ad6:	22 0f       	add	r18, r18
     ad8:	33 1f       	adc	r19, r19
     ada:	2a 17       	cp	r18, r26
     adc:	3b 07       	cpc	r19, r27
     ade:	d0 f3       	brcs	.-12     	; 0xad4 <Endpoint_ConfigureEndpointTable+0x4e>
     ae0:	92 95       	swap	r25
     ae2:	90 7f       	andi	r25, 0xF0	; 240
     ae4:	20 e4       	ldi	r18, 0x40	; 64
     ae6:	62 9f       	mul	r22, r18
     ae8:	b0 01       	movw	r22, r0
     aea:	11 24       	eor	r1, r1
     aec:	55 1f       	adc	r21, r21
     aee:	55 27       	eor	r21, r21
     af0:	55 1f       	adc	r21, r21
     af2:	49 2b       	or	r20, r25
     af4:	65 2b       	or	r22, r21
     af6:	93 df       	rcall	.-218    	; 0xa1e <Endpoint_ConfigureEndpoint_Prv>
     af8:	01 c0       	rjmp	.+2      	; 0xafc <Endpoint_ConfigureEndpointTable+0x76>
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	88 23       	and	r24, r24
     afe:	21 f0       	breq	.+8      	; 0xb08 <Endpoint_ConfigureEndpointTable+0x82>
     b00:	1f 5f       	subi	r17, 0xFF	; 255
     b02:	10 17       	cp	r17, r16
     b04:	40 f2       	brcs	.-112    	; 0xa96 <Endpoint_ConfigureEndpointTable+0x10>
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	08 95       	ret

00000b12 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     b12:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest>
     b16:	88 23       	and	r24, r24
     b18:	9c f4       	brge	.+38     	; 0xb40 <Endpoint_ClearStatusStage+0x2e>
     b1a:	04 c0       	rjmp	.+8      	; 0xb24 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     b1c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>
     b20:	88 23       	and	r24, r24
     b22:	b9 f0       	breq	.+46     	; 0xb52 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     b28:	82 ff       	sbrs	r24, 2
     b2a:	f8 cf       	rjmp	.-16     	; 0xb1c <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     b2c:	e8 ee       	ldi	r30, 0xE8	; 232
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	80 81       	ld	r24, Z
     b32:	8b 77       	andi	r24, 0x7B	; 123
     b34:	80 83       	st	Z, r24
     b36:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     b38:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>
     b3c:	88 23       	and	r24, r24
     b3e:	49 f0       	breq	.+18     	; 0xb52 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     b44:	80 ff       	sbrs	r24, 0
     b46:	f8 cf       	rjmp	.-16     	; 0xb38 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b48:	e8 ee       	ldi	r30, 0xE8	; 232
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	80 81       	ld	r24, Z
     b4e:	8e 77       	andi	r24, 0x7E	; 126
     b50:	80 83       	st	Z, r24
     b52:	08 95       	ret

00000b54 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     b54:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     b58:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     b5c:	44 e6       	ldi	r20, 0x64	; 100
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <Endpoint_WaitUntilReady+0x10>

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;
     b60:	9c 01       	movw	r18, r24

			if (!(TimeoutMSRem--))
     b62:	45 2f       	mov	r20, r21
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b64:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     b68:	98 2f       	mov	r25, r24
     b6a:	91 70       	andi	r25, 0x01	; 1
     b6c:	80 fd       	sbrc	r24, 0
     b6e:	90 e8       	ldi	r25, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     b70:	90 38       	cpi	r25, 0x80	; 128
     b72:	29 f4       	brne	.+10     	; 0xb7e <Endpoint_WaitUntilReady+0x2a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		{
			if (Endpoint_IsINReady())
     b78:	80 ff       	sbrs	r24, 0
     b7a:	05 c0       	rjmp	.+10     	; 0xb86 <Endpoint_WaitUntilReady+0x32>
     b7c:	1b c0       	rjmp	.+54     	; 0xbb4 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b7e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     b82:	82 fd       	sbrc	r24, 2
     b84:	19 c0       	rjmp	.+50     	; 0xbb8 <Endpoint_WaitUntilReady+0x64>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b86:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b8a:	88 23       	and	r24, r24
     b8c:	b9 f0       	breq	.+46     	; 0xbbc <Endpoint_WaitUntilReady+0x68>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b8e:	85 30       	cpi	r24, 0x05	; 5
     b90:	b9 f0       	breq	.+46     	; 0xbc0 <Endpoint_WaitUntilReady+0x6c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b92:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     b96:	85 fd       	sbrc	r24, 5
     b98:	15 c0       	rjmp	.+42     	; 0xbc4 <Endpoint_WaitUntilReady+0x70>
     b9a:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     b9e:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ba2:	28 17       	cp	r18, r24
     ba4:	39 07       	cpc	r19, r25
     ba6:	f1 f2       	breq	.-68     	; 0xb64 <Endpoint_WaitUntilReady+0x10>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     ba8:	5f ef       	ldi	r21, 0xFF	; 255
     baa:	54 0f       	add	r21, r20
     bac:	41 11       	cpse	r20, r1
     bae:	d8 cf       	rjmp	.-80     	; 0xb60 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
     bb0:	84 e0       	ldi	r24, 0x04	; 4
     bb2:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	08 95       	ret
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     bbc:	82 e0       	ldi	r24, 0x02	; 2
     bbe:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     bc4:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     bc6:	08 95       	ret

00000bc8 <USB_Init_Device>:

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <USB_DeviceState>
     bd0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <USB_Device_ConfigurationNumber>
     bd4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <USB_Device_RemoteWakeupEnabled>
     bd8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <USB_Device_CurrentlySelfPowered>
     bdc:	c0 ee       	ldi	r28, 0xE0	; 224
     bde:	d0 e0       	ldi	r29, 0x00	; 0
     be0:	88 81       	ld	r24, Y
     be2:	8b 7f       	andi	r24, 0xFB	; 251
     be4:	88 83       	st	Y, r24
     be6:	e8 ed       	ldi	r30, 0xD8	; 216
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	81 60       	ori	r24, 0x01	; 1
     bee:	80 83       	st	Z, r24
     bf0:	42 e0       	ldi	r20, 0x02	; 2
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	13 df       	rcall	.-474    	; 0xa1e <Endpoint_ConfigureEndpoint_Prv>
     bf8:	e1 ee       	ldi	r30, 0xE1	; 225
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	8e 7f       	andi	r24, 0xFE	; 254
     c00:	80 83       	st	Z, r24
     c02:	e2 ee       	ldi	r30, 0xE2	; 226
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	81 60       	ori	r24, 0x01	; 1
     c0a:	80 83       	st	Z, r24
     c0c:	80 81       	ld	r24, Z
     c0e:	88 60       	ori	r24, 0x08	; 8
     c10:	80 83       	st	Z, r24
     c12:	88 81       	ld	r24, Y
     c14:	8e 7f       	andi	r24, 0xFE	; 254
     c16:	88 83       	st	Y, r24
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	08 95       	ret

00000c1e <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     c22:	28 d0       	rcall	.+80     	; 0xc74 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c24:	2f d0       	rcall	.+94     	; 0xc84 <USB_INT_ClearAllInterrupts>
     c26:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c28:	d0 e0       	ldi	r29, 0x00	; 0
     c2a:	88 81       	ld	r24, Y
     c2c:	8f 77       	andi	r24, 0x7F	; 127
     c2e:	88 83       	st	Y, r24
     c30:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
     c32:	80 68       	ori	r24, 0x80	; 128
     c34:	88 83       	st	Y, r24
     c36:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     c38:	8f 7d       	andi	r24, 0xDF	; 223
     c3a:	88 83       	st	Y, r24
     c3c:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	80 68       	ori	r24, 0x80	; 128
     c44:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c46:	19 bc       	out	0x29, r1	; 41
			#else
			USB_PLL_Off();
			#endif
		}

		USB_Init_Device();
     c48:	bf df       	rcall	.-130    	; 0xbc8 <USB_Init_Device>
     c4a:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     c4c:	80 61       	ori	r24, 0x10	; 16
     c4e:	88 83       	st	Y, r24
     c50:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c52:	cf 91       	pop	r28
     c54:	08 95       	ret

00000c56 <USB_Init>:
     c56:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	8f 7e       	andi	r24, 0xEF	; 239
     c5e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     c60:	e7 ed       	ldi	r30, 0xD7	; 215
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	81 60       	ori	r24, 0x01	; 1
     c68:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <USB_IsInitialized>

	USB_ResetInterface();
     c70:	d6 cf       	rjmp	.-84     	; 0xc1e <USB_ResetInterface>
     c72:	08 95       	ret

00000c74 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c74:	e8 ed       	ldi	r30, 0xD8	; 216
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8c 7f       	andi	r24, 0xFC	; 252
     c7c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     c7e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     c82:	08 95       	ret

00000c84 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c84:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     c88:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     c8c:	08 95       	ret

00000c8e <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c8e:	1f 92       	push	r1
     c90:	0f 92       	push	r0
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	0f 92       	push	r0
     c96:	11 24       	eor	r1, r1
     c98:	0b b6       	in	r0, 0x3b	; 59
     c9a:	0f 92       	push	r0
     c9c:	2f 93       	push	r18
     c9e:	3f 93       	push	r19
     ca0:	4f 93       	push	r20
     ca2:	5f 93       	push	r21
     ca4:	6f 93       	push	r22
     ca6:	7f 93       	push	r23
     ca8:	8f 93       	push	r24
     caa:	9f 93       	push	r25
     cac:	af 93       	push	r26
     cae:	bf 93       	push	r27
     cb0:	ef 93       	push	r30
     cb2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     cb4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     cb8:	82 ff       	sbrs	r24, 2
     cba:	0a c0       	rjmp	.+20     	; 0xcd0 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     cbc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     cc0:	82 ff       	sbrs	r24, 2
     cc2:	06 c0       	rjmp	.+12     	; 0xcd0 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     cc4:	e1 ee       	ldi	r30, 0xE1	; 225
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8b 7f       	andi	r24, 0xFB	; 251
     ccc:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     cce:	02 db       	rcall	.-2556   	; 0x2d4 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     cd0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     cd4:	80 ff       	sbrs	r24, 0
     cd6:	1d c0       	rjmp	.+58     	; 0xd12 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     cd8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     cdc:	80 ff       	sbrs	r24, 0
     cde:	19 c0       	rjmp	.+50     	; 0xd12 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     ce0:	ea ed       	ldi	r30, 0xDA	; 218
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	8e 7f       	andi	r24, 0xFE	; 254
     ce8:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     cea:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     cee:	80 ff       	sbrs	r24, 0
     cf0:	0c c0       	rjmp	.+24     	; 0xd0a <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     cf2:	84 e1       	ldi	r24, 0x14	; 20
     cf4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     cf6:	86 e1       	ldi	r24, 0x16	; 22
     cf8:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     cfa:	09 b4       	in	r0, 0x29	; 41
     cfc:	00 fe       	sbrs	r0, 0
     cfe:	fd cf       	rjmp	.-6      	; 0xcfa <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <USB_DeviceState>
			EVENT_USB_Device_Connect();
     d06:	d7 da       	rcall	.-2642   	; 0x2b6 <EVENT_USB_Device_Connect>
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d0a:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     d0c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     d10:	d3 da       	rcall	.-2650   	; 0x2b8 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     d12:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     d16:	80 ff       	sbrs	r24, 0
     d18:	16 c0       	rjmp	.+44     	; 0xd46 <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     d1a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     d1e:	80 ff       	sbrs	r24, 0
     d20:	12 c0       	rjmp	.+36     	; 0xd46 <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     d22:	e2 ee       	ldi	r30, 0xE2	; 226
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	8e 7f       	andi	r24, 0xFE	; 254
     d2a:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     d2c:	80 81       	ld	r24, Z
     d2e:	80 61       	ori	r24, 0x10	; 16
     d30:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     d32:	e8 ed       	ldi	r30, 0xD8	; 216
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	80 62       	ori	r24, 0x20	; 32
     d3a:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d3c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     d3e:	85 e0       	ldi	r24, 0x05	; 5
     d40:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     d44:	09 d2       	rcall	.+1042   	; 0x1158 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     d46:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     d4a:	84 ff       	sbrs	r24, 4
     d4c:	2f c0       	rjmp	.+94     	; 0xdac <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     d4e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     d52:	84 ff       	sbrs	r24, 4
     d54:	2b c0       	rjmp	.+86     	; 0xdac <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d56:	84 e1       	ldi	r24, 0x14	; 20
     d58:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d5a:	86 e1       	ldi	r24, 0x16	; 22
     d5c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     d5e:	09 b4       	in	r0, 0x29	; 41
     d60:	00 fe       	sbrs	r0, 0
     d62:	fd cf       	rjmp	.-6      	; 0xd5e <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     d64:	e8 ed       	ldi	r30, 0xD8	; 216
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	8f 7d       	andi	r24, 0xDF	; 223
     d6c:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     d6e:	e1 ee       	ldi	r30, 0xE1	; 225
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8f 7e       	andi	r24, 0xEF	; 239
     d76:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     d78:	e2 ee       	ldi	r30, 0xE2	; 226
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	8f 7e       	andi	r24, 0xEF	; 239
     d80:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     d82:	80 81       	ld	r24, Z
     d84:	81 60       	ori	r24, 0x01	; 1
     d86:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     d88:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_Device_ConfigurationNumber>
     d8c:	88 23       	and	r24, r24
     d8e:	21 f0       	breq	.+8      	; 0xd98 <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
     d90:	84 e0       	ldi	r24, 0x04	; 4
     d92:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <USB_DeviceState>
     d96:	09 c0       	rjmp	.+18     	; 0xdaa <__vector_10+0x11c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d98:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     d9c:	88 23       	and	r24, r24
     d9e:	14 f4       	brge	.+4      	; 0xda4 <__vector_10+0x116>
     da0:	83 e0       	ldi	r24, 0x03	; 3
     da2:	01 c0       	rjmp	.+2      	; 0xda6 <__vector_10+0x118>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     daa:	d6 d1       	rcall	.+940    	; 0x1158 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     dac:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     db0:	83 ff       	sbrs	r24, 3
     db2:	1e c0       	rjmp	.+60     	; 0xdf0 <__vector_10+0x162>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     db4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     db8:	83 ff       	sbrs	r24, 3
     dba:	1a c0       	rjmp	.+52     	; 0xdf0 <__vector_10+0x162>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     dbc:	e1 ee       	ldi	r30, 0xE1	; 225
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	87 7f       	andi	r24, 0xF7	; 247
     dc4:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     dc6:	82 e0       	ldi	r24, 0x02	; 2
     dc8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     dcc:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     dd0:	80 81       	ld	r24, Z
     dd2:	8e 7f       	andi	r24, 0xFE	; 254
     dd4:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     dd6:	e2 ee       	ldi	r30, 0xE2	; 226
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	8e 7f       	andi	r24, 0xFE	; 254
     dde:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     de0:	80 81       	ld	r24, Z
     de2:	80 61       	ori	r24, 0x10	; 16
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     de4:	80 83       	st	Z, r24
     de6:	42 e0       	ldi	r20, 0x02	; 2
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	18 de       	rcall	.-976    	; 0xa1e <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     dee:	b4 d1       	rcall	.+872    	; 0x1158 <USB_Event_Stub>
     df0:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     df2:	ef 91       	pop	r30
     df4:	bf 91       	pop	r27
     df6:	af 91       	pop	r26
     df8:	9f 91       	pop	r25
     dfa:	8f 91       	pop	r24
     dfc:	7f 91       	pop	r23
     dfe:	6f 91       	pop	r22
     e00:	5f 91       	pop	r21
     e02:	4f 91       	pop	r20
     e04:	3f 91       	pop	r19
     e06:	2f 91       	pop	r18
     e08:	0f 90       	pop	r0
     e0a:	0b be       	out	0x3b, r0	; 59
     e0c:	0f 90       	pop	r0
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	0f 90       	pop	r0
     e12:	1f 90       	pop	r1
     e14:	18 95       	reti

00000e16 <USB_Device_GetStatus>:

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;

	switch (USB_ControlRequest.bmRequestType)
     e16:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest>
     e1a:	80 38       	cpi	r24, 0x80	; 128
     e1c:	19 f0       	breq	.+6      	; 0xe24 <USB_Device_GetStatus+0xe>
     e1e:	82 38       	cpi	r24, 0x82	; 130
     e20:	71 f0       	breq	.+28     	; 0xe3e <USB_Device_GetStatus+0x28>
     e22:	08 95       	ret
	{
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
		{
			#if !defined(NO_DEVICE_SELF_POWER)
			if (USB_Device_CurrentlySelfPowered)
     e24:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <USB_Device_CurrentlySelfPowered>
     e28:	81 11       	cpse	r24, r1
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <USB_Device_GetStatus+0x1a>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <USB_Device_GetStatus+0x1c>
	{
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
		{
			#if !defined(NO_DEVICE_SELF_POWER)
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
     e30:	91 e0       	ldi	r25, 0x01	; 1
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     e32:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <USB_Device_RemoteWakeupEnabled>
     e36:	88 23       	and	r24, r24
     e38:	81 f0       	breq	.+32     	; 0xe5a <USB_Device_GetStatus+0x44>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     e3a:	92 60       	ori	r25, 0x02	; 2
     e3c:	0e c0       	rjmp	.+28     	; 0xe5a <USB_Device_GetStatus+0x44>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     e3e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <USB_ControlRequest+0x4>
     e42:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     e44:	87 30       	cpi	r24, 0x07	; 7
     e46:	b0 f4       	brcc	.+44     	; 0xe74 <USB_Device_GetStatus+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e48:	e9 ee       	ldi	r30, 0xE9	; 233
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     e4e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     e52:	95 fb       	bst	r25, 5
     e54:	99 27       	eor	r25, r25
     e56:	90 f9       	bld	r25, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e58:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e5a:	e8 ee       	ldi	r30, 0xE8	; 232
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	87 7f       	andi	r24, 0xF7	; 247
     e62:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     e64:	a1 ef       	ldi	r26, 0xF1	; 241
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	9c 93       	st	X, r25
				UEDATX = (Data >> 8);
     e6a:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e6c:	80 81       	ld	r24, Z
     e6e:	8e 77       	andi	r24, 0x7E	; 126
     e70:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     e72:	4f ce       	rjmp	.-866    	; 0xb12 <Endpoint_ClearStatusStage>
     e74:	08 95       	ret

00000e76 <USB_Device_ClearSetFeature>:
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     e76:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_ControlRequest>
     e7a:	8f 71       	andi	r24, 0x1F	; 31
     e7c:	19 f0       	breq	.+6      	; 0xe84 <USB_Device_ClearSetFeature+0xe>
     e7e:	82 30       	cpi	r24, 0x02	; 2
     e80:	71 f0       	breq	.+28     	; 0xe9e <USB_Device_ClearSetFeature+0x28>
     e82:	08 95       	ret
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     e84:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x2>
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	09 f0       	breq	.+2      	; 0xe8e <USB_Device_ClearSetFeature+0x18>
     e8c:	3f c0       	rjmp	.+126    	; 0xf0c <USB_Device_ClearSetFeature+0x96>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     e8e:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <USB_ControlRequest+0x1>
     e92:	93 30       	cpi	r25, 0x03	; 3
     e94:	09 f0       	breq	.+2      	; 0xe98 <USB_Device_ClearSetFeature+0x22>
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <USB_Device_RemoteWakeupEnabled>
			else
			  return;

			break;
     e9c:	2f c0       	rjmp	.+94     	; 0xefc <USB_Device_ClearSetFeature+0x86>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     e9e:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x2>
     ea2:	81 11       	cpse	r24, r1
     ea4:	2b c0       	rjmp	.+86     	; 0xefc <USB_Device_ClearSetFeature+0x86>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ea6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <USB_ControlRequest+0x4>
     eaa:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     eac:	9f ef       	ldi	r25, 0xFF	; 255
     eae:	98 0f       	add	r25, r24
     eb0:	96 30       	cpi	r25, 0x06	; 6
     eb2:	60 f5       	brcc	.+88     	; 0xf0c <USB_Device_ClearSetFeature+0x96>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     eb4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     eb8:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     ebc:	90 ff       	sbrs	r25, 0
     ebe:	1e c0       	rjmp	.+60     	; 0xefc <USB_Device_ClearSetFeature+0x86>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     ec0:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <USB_ControlRequest+0x1>
     ec4:	93 30       	cpi	r25, 0x03	; 3
     ec6:	31 f4       	brne	.+12     	; 0xed4 <USB_Device_ClearSetFeature+0x5e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ec8:	eb ee       	ldi	r30, 0xEB	; 235
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 62       	ori	r24, 0x20	; 32
     ed0:	80 83       	st	Z, r24
     ed2:	14 c0       	rjmp	.+40     	; 0xefc <USB_Device_ClearSetFeature+0x86>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     ed4:	eb ee       	ldi	r30, 0xEB	; 235
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	90 81       	ld	r25, Z
     eda:	90 61       	ori	r25, 0x10	; 16
     edc:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ede:	21 e0       	ldi	r18, 0x01	; 1
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	a9 01       	movw	r20, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <USB_Device_ClearSetFeature+0x74>
     ee6:	44 0f       	add	r20, r20
     ee8:	55 1f       	adc	r21, r21
     eea:	8a 95       	dec	r24
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <USB_Device_ClearSetFeature+0x70>
     eee:	aa ee       	ldi	r26, 0xEA	; 234
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	4c 93       	st	X, r20
				UERST = 0;
     ef4:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     ef6:	80 81       	ld	r24, Z
     ef8:	88 60       	ori	r24, 0x08	; 8
     efa:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     efc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f00:	e8 ee       	ldi	r30, 0xE8	; 232
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	87 7f       	andi	r24, 0xF7	; 247
     f08:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     f0a:	03 ce       	rjmp	.-1018   	; 0xb12 <Endpoint_ClearStatusStage>
     f0c:	08 95       	ret

00000f0e <USB_Device_SetAddress>:
		Endpoint_StallTransaction();
	}
}

static void USB_Device_SetAddress(void)
{
     f0e:	cf 93       	push	r28
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     f10:	c0 91 1f 01 	lds	r28, 0x011F	; 0x80011f <USB_ControlRequest+0x2>
     f14:	cf 77       	andi	r28, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     f16:	e3 ee       	ldi	r30, 0xE3	; 227
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	80 78       	andi	r24, 0x80	; 128
     f1e:	8c 2b       	or	r24, r28
     f20:	80 83       	st	Z, r24
     f22:	e8 ee       	ldi	r30, 0xE8	; 232
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	87 7f       	andi	r24, 0xF7	; 247
     f2a:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     f2c:	f2 dd       	rcall	.-1052   	; 0xb12 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
     f32:	80 ff       	sbrs	r24, 0
     f34:	fc cf       	rjmp	.-8      	; 0xf2e <USB_Device_SetAddress+0x20>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
     f36:	e3 ee       	ldi	r30, 0xE3	; 227
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	80 68       	ori	r24, 0x80	; 128
     f3e:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     f40:	cc 23       	and	r28, r28
     f42:	11 f0       	breq	.+4      	; 0xf48 <USB_Device_SetAddress+0x3a>
     f44:	83 e0       	ldi	r24, 0x03	; 3
     f46:	01 c0       	rjmp	.+2      	; 0xf4a <USB_Device_SetAddress+0x3c>
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <USB_DeviceState>
}
     f4e:	cf 91       	pop	r28
     f50:	08 95       	ret

00000f52 <USB_Device_GetConfiguration>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f52:	e8 ee       	ldi	r30, 0xE8	; 232
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	87 7f       	andi	r24, 0xF7	; 247
     f5a:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     f5c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f60:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f64:	80 81       	ld	r24, Z
     f66:	8e 77       	andi	r24, 0x7E	; 126
     f68:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     f6a:	d3 cd       	rjmp	.-1114   	; 0xb12 <Endpoint_ClearStatusStage>
     f6c:	08 95       	ret

00000f6e <USB_Device_GetInternalSerialDescriptor>:
}

#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
static void USB_Device_GetInternalSerialDescriptor(void)
{
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	aa 97       	sbiw	r28, 0x2a	; 42
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     f86:	83 e0       	ldi	r24, 0x03	; 3
     f88:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     f8a:	8a e2       	ldi	r24, 0x2A	; 42
     f8c:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     f8e:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     f90:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     f92:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     f94:	2e e0       	ldi	r18, 0x0E	; 14
     f96:	20 c0       	rjmp	.+64     	; 0xfd8 <USB_Device_GetInternalSerialDescriptor+0x6a>

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     f98:	e2 2f       	mov	r30, r18
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	81 e2       	ldi	r24, 0x21	; 33
     f9e:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
     fa2:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     fa4:	90 ff       	sbrs	r25, 0
     fa6:	03 c0       	rjmp	.+6      	; 0xfae <USB_Device_GetInternalSerialDescriptor+0x40>
					{
						SerialByte >>= 4;
     fa8:	e2 95       	swap	r30
     faa:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     fac:	2f 5f       	subi	r18, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     fae:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     fb0:	a9 2f       	mov	r26, r25
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	aa 0f       	add	r26, r26
     fb6:	bb 1f       	adc	r27, r27
     fb8:	43 e0       	ldi	r20, 0x03	; 3
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	4c 0f       	add	r20, r28
     fbe:	5d 1f       	adc	r21, r29
     fc0:	a4 0f       	add	r26, r20
     fc2:	b5 1f       	adc	r27, r21
     fc4:	ea 30       	cpi	r30, 0x0A	; 10
     fc6:	18 f0       	brcs	.+6      	; 0xfce <USB_Device_GetInternalSerialDescriptor+0x60>
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	f7 96       	adiw	r30, 0x37	; 55
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <USB_Device_GetInternalSerialDescriptor+0x64>
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	f0 96       	adiw	r30, 0x30	; 48
     fd2:	ed 93       	st	X+, r30
     fd4:	fc 93       	st	X, r31
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     fd6:	9f 5f       	subi	r25, 0xFF	; 255
     fd8:	94 31       	cpi	r25, 0x14	; 20
     fda:	f0 f2       	brcs	.-68     	; 0xf98 <USB_Device_GetInternalSerialDescriptor+0x2a>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     fdc:	3f bf       	out	0x3f, r19	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fde:	08 ee       	ldi	r16, 0xE8	; 232
     fe0:	10 e0       	ldi	r17, 0x00	; 0
     fe2:	f8 01       	movw	r30, r16
     fe4:	80 81       	ld	r24, Z
     fe6:	87 7f       	andi	r24, 0xF7	; 247
     fe8:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     fea:	6a e2       	ldi	r22, 0x2A	; 42
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	ce 01       	movw	r24, r28
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	fd db       	rcall	.-2054   	; 0x7ee <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ff4:	f8 01       	movw	r30, r16
     ff6:	80 81       	ld	r24, Z
     ff8:	8b 77       	andi	r24, 0x7B	; 123
     ffa:	80 83       	st	Z, r24
	Endpoint_ClearOUT();
}
     ffc:	aa 96       	adiw	r28, 0x2a	; 42
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	08 95       	ret

00001012 <USB_Device_GetDescriptor>:
#endif

static void USB_Device_GetDescriptor(void)
{
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	00 d0       	rcall	.+0      	; 0x101c <USB_Device_GetDescriptor+0xa>
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1020:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x2>
    1024:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <USB_ControlRequest+0x3>
    1028:	8c 3d       	cpi	r24, 0xDC	; 220
    102a:	23 e0       	ldi	r18, 0x03	; 3
    102c:	92 07       	cpc	r25, r18
    102e:	11 f4       	brne	.+4      	; 0x1034 <USB_Device_GetDescriptor+0x22>
	{
		USB_Device_GetInternalSerialDescriptor();
    1030:	9e df       	rcall	.-196    	; 0xf6e <USB_Device_GetInternalSerialDescriptor>
		return;
    1032:	18 c0       	rjmp	.+48     	; 0x1064 <USB_Device_GetDescriptor+0x52>
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1034:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <USB_ControlRequest+0x4>
    1038:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <USB_ControlRequest+0x5>
    103c:	ae 01       	movw	r20, r28
    103e:	4f 5f       	subi	r20, 0xFF	; 255
    1040:	5f 4f       	sbci	r21, 0xFF	; 255
    1042:	ca d8       	rcall	.-3692   	; 0x1d8 <CALLBACK_USB_GetDescriptor>
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	71 f0       	breq	.+28     	; 0x1064 <USB_Device_GetDescriptor+0x52>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1048:	08 ee       	ldi	r16, 0xE8	; 232
    104a:	10 e0       	ldi	r17, 0x00	; 0
    104c:	f8 01       	movw	r30, r16
    104e:	20 81       	ld	r18, Z
    1050:	27 7f       	andi	r18, 0xF7	; 247
    1052:	20 83       	st	Z, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1054:	bc 01       	movw	r22, r24
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	78 dc       	rcall	.-1808   	; 0x94c <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    105c:	f8 01       	movw	r30, r16
    105e:	80 81       	ld	r24, Z
    1060:	8b 77       	andi	r24, 0x7B	; 123
    1062:	80 83       	st	Z, r24
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	08 95       	ret

00001072 <USB_Device_SetConfiguration>:
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1072:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x2>
    1076:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <USB_ControlRequest+0x3>
    107a:	99 27       	eor	r25, r25
    107c:	02 97       	sbiw	r24, 0x02	; 2
    107e:	e4 f4       	brge	.+56     	; 0x10b8 <USB_Device_SetConfiguration+0x46>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1080:	e8 ee       	ldi	r30, 0xE8	; 232
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	87 7f       	andi	r24, 0xF7	; 247
    1088:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    108a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <USB_ControlRequest+0x2>
    108e:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    1092:	3f dd       	rcall	.-1410   	; 0xb12 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1094:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <USB_Device_ConfigurationNumber>
    1098:	88 23       	and	r24, r24
    109a:	21 f0       	breq	.+8      	; 0x10a4 <USB_Device_SetConfiguration+0x32>
	  USB_DeviceState = DEVICE_STATE_Configured;
    109c:	84 e0       	ldi	r24, 0x04	; 4
    109e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <USB_DeviceState>
    10a2:	09 c0       	rjmp	.+18     	; 0x10b6 <USB_Device_SetConfiguration+0x44>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    10a4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    10a8:	88 23       	and	r24, r24
    10aa:	14 f4       	brge	.+4      	; 0x10b0 <USB_Device_SetConfiguration+0x3e>
    10ac:	84 e0       	ldi	r24, 0x04	; 4
    10ae:	01 c0       	rjmp	.+2      	; 0x10b2 <USB_Device_SetConfiguration+0x40>
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    10b6:	01 c9       	rjmp	.-3582   	; 0x2ba <EVENT_USB_Device_ConfigurationChanged>
    10b8:	08 95       	ret

000010ba <USB_Device_ProcessControlRequest>:
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    10ba:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    10bc:	ed e1       	ldi	r30, 0x1D	; 29
    10be:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    10c0:	05 c0       	rjmp	.+10     	; 0x10cc <USB_Device_ProcessControlRequest+0x12>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    10c2:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	  *(RequestHeader++) = Endpoint_Read_8();
    10c6:	90 83       	st	Z, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    10c8:	8f 5f       	subi	r24, 0xFF	; 255
	  *(RequestHeader++) = Endpoint_Read_8();
    10ca:	31 96       	adiw	r30, 0x01	; 1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    10cc:	88 30       	cpi	r24, 0x08	; 8
    10ce:	c8 f3       	brcs	.-14     	; 0x10c2 <USB_Device_ProcessControlRequest+0x8>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    10d0:	fd d8       	rcall	.-3590   	; 0x2cc <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    10d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    10d6:	83 ff       	sbrs	r24, 3
    10d8:	30 c0       	rjmp	.+96     	; 0x113a <USB_Device_ProcessControlRequest+0x80>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    10da:	ed e1       	ldi	r30, 0x1D	; 29
    10dc:	f1 e0       	ldi	r31, 0x01	; 1
    10de:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
    10e0:	81 81       	ldd	r24, Z+1	; 0x01
    10e2:	85 30       	cpi	r24, 0x05	; 5
    10e4:	d1 f0       	breq	.+52     	; 0x111a <USB_Device_ProcessControlRequest+0x60>
    10e6:	30 f4       	brcc	.+12     	; 0x10f4 <USB_Device_ProcessControlRequest+0x3a>
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	89 f0       	breq	.+34     	; 0x110e <USB_Device_ProcessControlRequest+0x54>
    10ec:	50 f0       	brcs	.+20     	; 0x1102 <USB_Device_ProcessControlRequest+0x48>
    10ee:	83 30       	cpi	r24, 0x03	; 3
    10f0:	71 f0       	breq	.+28     	; 0x110e <USB_Device_ProcessControlRequest+0x54>
    10f2:	23 c0       	rjmp	.+70     	; 0x113a <USB_Device_ProcessControlRequest+0x80>
    10f4:	88 30       	cpi	r24, 0x08	; 8
    10f6:	d1 f0       	breq	.+52     	; 0x112c <USB_Device_ProcessControlRequest+0x72>
    10f8:	89 30       	cpi	r24, 0x09	; 9
    10fa:	e1 f0       	breq	.+56     	; 0x1134 <USB_Device_ProcessControlRequest+0x7a>
    10fc:	86 30       	cpi	r24, 0x06	; 6
    10fe:	e9 f4       	brne	.+58     	; 0x113a <USB_Device_ProcessControlRequest+0x80>
    1100:	10 c0       	rjmp	.+32     	; 0x1122 <USB_Device_ProcessControlRequest+0x68>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1102:	90 38       	cpi	r25, 0x80	; 128
    1104:	11 f0       	breq	.+4      	; 0x110a <USB_Device_ProcessControlRequest+0x50>
    1106:	92 38       	cpi	r25, 0x82	; 130
					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT)))
				{
					USB_Device_GetStatus();
    1108:	c1 f4       	brne	.+48     	; 0x113a <USB_Device_ProcessControlRequest+0x80>
    110a:	85 de       	rcall	.-758    	; 0xe16 <USB_Device_GetStatus>
    110c:	16 c0       	rjmp	.+44     	; 0x113a <USB_Device_ProcessControlRequest+0x80>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    110e:	99 23       	and	r25, r25
    1110:	11 f0       	breq	.+4      	; 0x1116 <USB_Device_ProcessControlRequest+0x5c>
    1112:	92 30       	cpi	r25, 0x02	; 2
					(bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_ENDPOINT)))
				{
					USB_Device_ClearSetFeature();
    1114:	91 f4       	brne	.+36     	; 0x113a <USB_Device_ProcessControlRequest+0x80>
    1116:	af de       	rcall	.-674    	; 0xe76 <USB_Device_ClearSetFeature>
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1118:	10 c0       	rjmp	.+32     	; 0x113a <USB_Device_ProcessControlRequest+0x80>
    111a:	91 11       	cpse	r25, r1
				  USB_Device_SetAddress();
    111c:	0e c0       	rjmp	.+28     	; 0x113a <USB_Device_ProcessControlRequest+0x80>
    111e:	f7 de       	rcall	.-530    	; 0xf0e <USB_Device_SetAddress>

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1120:	0c c0       	rjmp	.+24     	; 0x113a <USB_Device_ProcessControlRequest+0x80>
    1122:	90 58       	subi	r25, 0x80	; 128
    1124:	92 30       	cpi	r25, 0x02	; 2
					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_INTERFACE)))
				{
					USB_Device_GetDescriptor();
    1126:	48 f4       	brcc	.+18     	; 0x113a <USB_Device_ProcessControlRequest+0x80>
    1128:	74 df       	rcall	.-280    	; 0x1012 <USB_Device_GetDescriptor>
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    112a:	07 c0       	rjmp	.+14     	; 0x113a <USB_Device_ProcessControlRequest+0x80>
				  USB_Device_GetConfiguration();
    112c:	90 38       	cpi	r25, 0x80	; 128
    112e:	29 f4       	brne	.+10     	; 0x113a <USB_Device_ProcessControlRequest+0x80>
    1130:	10 df       	rcall	.-480    	; 0xf52 <USB_Device_GetConfiguration>

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1132:	03 c0       	rjmp	.+6      	; 0x113a <USB_Device_ProcessControlRequest+0x80>
    1134:	91 11       	cpse	r25, r1
				  USB_Device_SetConfiguration();
    1136:	01 c0       	rjmp	.+2      	; 0x113a <USB_Device_ProcessControlRequest+0x80>
    1138:	9c df       	rcall	.-200    	; 0x1072 <USB_Device_SetConfiguration>
    113a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    113e:	83 ff       	sbrs	r24, 3
    1140:	0a c0       	rjmp	.+20     	; 0x1156 <USB_Device_ProcessControlRequest+0x9c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1142:	e8 ee       	ldi	r30, 0xE8	; 232
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	87 7f       	andi	r24, 0xF7	; 247
    114a:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    114c:	eb ee       	ldi	r30, 0xEB	; 235
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	80 62       	ori	r24, 0x20	; 32
    1154:	80 83       	st	Z, r24
    1156:	08 95       	ret

00001158 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1158:	08 95       	ret

0000115a <USB_DeviceTask>:
	#endif
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
    115a:	cf 93       	push	r28
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    115c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <USB_DeviceState>
    1160:	88 23       	and	r24, r24
    1162:	99 f0       	breq	.+38     	; 0x118a <USB_DeviceTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1164:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1168:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    116a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    116e:	98 2f       	mov	r25, r24
    1170:	91 70       	andi	r25, 0x01	; 1
    1172:	80 fd       	sbrc	r24, 0
    1174:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1176:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1178:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    117c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1180:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1182:	9b df       	rcall	.-202    	; 0x10ba <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1184:	cf 70       	andi	r28, 0x0F	; 15
    1186:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(PrevEndpoint);
}
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <USB_USBTask>:
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
    118e:	e5 cf       	rjmp	.-54     	; 0x115a <USB_DeviceTask>
    1190:	08 95       	ret

00001192 <memcmp>:
    1192:	fb 01       	movw	r30, r22
    1194:	dc 01       	movw	r26, r24
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <memcmp+0xe>
    1198:	8d 91       	ld	r24, X+
    119a:	01 90       	ld	r0, Z+
    119c:	80 19       	sub	r24, r0
    119e:	21 f4       	brne	.+8      	; 0x11a8 <memcmp+0x16>
    11a0:	41 50       	subi	r20, 0x01	; 1
    11a2:	50 40       	sbci	r21, 0x00	; 0
    11a4:	c8 f7       	brcc	.-14     	; 0x1198 <memcmp+0x6>
    11a6:	88 1b       	sub	r24, r24
    11a8:	99 0b       	sbc	r25, r25
    11aa:	08 95       	ret

000011ac <memcpy>:
    11ac:	fb 01       	movw	r30, r22
    11ae:	dc 01       	movw	r26, r24
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <memcpy+0xa>
    11b2:	01 90       	ld	r0, Z+
    11b4:	0d 92       	st	X+, r0
    11b6:	41 50       	subi	r20, 0x01	; 1
    11b8:	50 40       	sbci	r21, 0x00	; 0
    11ba:	d8 f7       	brcc	.-10     	; 0x11b2 <memcpy+0x6>
    11bc:	08 95       	ret

000011be <memset>:
    11be:	dc 01       	movw	r26, r24
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <memset+0x6>
    11c2:	6d 93       	st	X+, r22
    11c4:	41 50       	subi	r20, 0x01	; 1
    11c6:	50 40       	sbci	r21, 0x00	; 0
    11c8:	e0 f7       	brcc	.-8      	; 0x11c2 <memset+0x4>
    11ca:	08 95       	ret

000011cc <_exit>:
    11cc:	f8 94       	cli

000011ce <__stop_program>:
    11ce:	ff cf       	rjmp	.-2      	; 0x11ce <__stop_program>
